!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e),r.d(e,"app",(function(){return Ji}));var n={};r.r(n),r.d(n,"mergePartials",(function(){return nr})),r.d(n,"mergeAttributes",(function(){return ir}));var i={};r.r(i),r.d(i,"_extend",(function(){return li})),r.d(i,"el",(function(){return Mr})),r.d(i,"itemize",(function(){return Hr})),r.d(i,"data",(function(){return Br})),r.d(i,"cssSync",(function(){return bn})),r.d(i,"classSync",(function(){return en})),r.d(i,"attrSync",(function(){return Zr})),r.d(i,"htmlSync",(function(){return rn})),r.d(i,"textSync",(function(){return sn})),r.d(i,"appendSync",(function(){return on})),r.d(i,"prependSync",(function(){return cn})),r.d(i,"cssInline",(function(){return kn})),r.d(i,"cssStylesheet",(function(){return $n})),r.d(i,"cssAsync",(function(){return xn})),r.d(i,"classAsync",(function(){return tn})),r.d(i,"attrAsync",(function(){return Xr})),r.d(i,"htmlAsync",(function(){return nn})),r.d(i,"textAsync",(function(){return an})),r.d(i,"appendAsync",(function(){return ln})),r.d(i,"prependAsync",(function(){return hn})),r.d(i,"cssRendering",(function(){return On})),r.d(i,"cssTransaction",(function(){return Nn})),r.d(i,"xBorders",(function(){return Wn})),r.d(i,"yBorders",(function(){return Fn})),r.d(i,"zHeight",(function(){return In})),r.d(i,"onresize",(function(){return oi})),r.d(i,"play",(function(){return Vn})),r.d(i,"on",(function(){return ii})),r.d(i,"off",(function(){return si})),r.d(i,"trigger",(function(){return ai}));var s=function(t){return Array.isArray(t)},a=function(t){return"function"==typeof t},o=function(t){return a(t)||t&&"[object function]"==={}.toString.call(t)},l=function(t){return!Array.isArray(t)&&"object"==typeof t&&t},c=function(t){return Array.isArray(t)||"object"==typeof t&&t||a(t)},h=function(t){return!0!==t&&!1!==t&&null!==t&&""!==t&&!isNaN(1*t)},u=function(t,...e){return e.forEach(e=>{t.indexOf(e)<0&&t.push(e)}),t},p=function(t,e){var r=[];return function(t,e){e=(e=e||Object.prototype)&&!s(e)?[e]:e;var r=[];for(t=t;t&&(!e||e.indexOf(t)<0)&&"default"!==t.name;)r.push(t),t=t?Object.getPrototypeOf(t):null;return r}(t,e).forEach(t=>{u(r,...Object.getOwnPropertyNames(t))}),r};function f(t,e,r=!1,n=!1,i=!0){var a=0,u=t.shift();if((h(u)||!0===u||!1===u)&&(a=u,u=t.shift()),!t.length)throw new Error("_merge() requires two or more array/objects.");return t.forEach((t,d)=>{(c(t)||o(t))&&(r?p(t):Object.getOwnPropertyNames(t)).forEach(o=>{var c=u[o],p=t[o];if((s(c)&&s(p)||l(c)&&l(p))&&(!0===a||a>0))u[o]=s(c)&&s(p)?[]:{},f([h(a)?a-1:a,u[o],c,p],e,r,n,i);else if(e(o,u,t,d))if(s(u)&&s(t))n?u[o]=p:u.push(p);else try{i?Object.defineProperty(u,o,Object.getOwnPropertyDescriptor(t,o)):u[o]=t[o]}catch(t){}})}),u}var d=function(...t){return f(t,(t,e,r)=>!0,!1,!1,!1)},m=function(t){return null===t||""===t},g=function(t){return arguments.length&&(void 0===t||void 0===t)},v=function(t){return m(t)||g(t)||!1===t||0===t||c(t)&&!Object.keys(t).length},w=function(t,e,r=!1){for(var n=t.indexOf(e);n>-1&&(r||!1===r);)t.splice(n,1),r>0&&r--,n=t.indexOf(e);return t},y=function(t,e){if(!t)return!1;if(t instanceof e)return!0;var r=t=>{for(;t&&t!==Function.prototype;){if(t===e||t.prototypes&&t.prototypes.reduce((t,n)=>t||n===e||r(n),!1))return!0;t=Object.getPrototypeOf(t)}return!1};return r(t.constructor)},b=function(t){return t instanceof Number||"number"==typeof t},j=function(t){return l(t)&&Object.getPrototypeOf(t)===Object.prototype},E=function(t){return!0===t||!1===t},x=function(t,e){var r=void 0;return c(t)&&Object.keys(t).forEach((n,i)=>{!1!==r&&(r=e(h(n)?parseFloat(n):n,t[n],i))}),r};const k=function(t,e,r=!0,n=1){if(s(t)&&s(e)&&t.length!==e.length)return!r;if(l(t)&&l(e)){var i=Object.keys(t),a=Object.keys(e);if(!i.length&&!a.length)return j(t)&&j(e)?r:t===e===r;if(!k(i,a))return!r}if(n>0&&(s(t)&&s(e)||l(t)&&l(e))){var h=function(t,e,r=!0,n=!0,i=!1,a=!1){if(s(t)&&s(e)){var o=[],h=!0;return t.forEach(t=>{if(h){var u=!1;x(e,(e,i)=>{(!u||n&&c(t))&&(u=r(t,i),(s(u)&&!u.length||l(u)&&!Object.keys(u).length)&&(u=!1),c(u)&&n&&(t=u))}),c(u)?o.push(n?u:t):E(u)?i&&!u||!i&&u?o.push(t):a&&(h=!1):o.push(u)}}),o}if(l(t)&&l(e)){o={},h=!0;return Object.keys(t).forEach(u=>{if(h){var p=r(t[u],e[u]);(s(p)&&!p.length||l(p)&&!Object.keys(p).length)&&(p=!1),c(p)?o[u]=n?p:t[u]:E(p)?i&&!p||!i&&p?o[u]=t[u]:a&&(h=!1):o[u]=p}}),o}}(t,e,(t,e)=>k(t,e,r,n-1),!1,!1,!0);return s(h)?h.length===t.length&&h.length===e.length:l(h)&&l(t)?Object.keys(h).length===Object.keys(t).length&&Object.keys(h).length===Object.keys(e).length:h}return o(r)?r(t,e):b(t)&&b(e)&&isNaN(t)&&isNaN(e)?r:t===e===r};var O=k,S=class{even(t){return!(!l(t)||t.jsenType!==this.jsenType)&&O(t,this)}inherit(t){return this}withComments(t){return this.meta||(this.meta={}),this.meta.comments=t,this}withVars(t){return this.meta||(this.meta={}),this.meta.vars=t,this}};const A=class extends S{};Object.defineProperty(A.prototype,"jsenType",{get:()=>"Reference"});var C=A;const P=class extends S{};Object.defineProperty(P.prototype,"jsenType",{get:()=>"CallExpression"});var T=P;const $=class extends S{};Object.defineProperty($.prototype,"jsenType",{get:()=>"FunctionType"});var L=$;const M=class extends S{};Object.defineProperty(M.prototype,"jsenType",{get:()=>"IfConditional"});var N=M,W=class extends Error{constructor(...t){super(...t),this.name="Syntax Error"}};const F={};class I{static parse(t,e,r={}){if(t.length){var n;if(F[t]&&!e&&!1!==r.allowCache)if(n=this.parseOne(t,F[t],r))return n;for(var i=Object.values(e||this.grammars),s=0;s<i.length;s++){var a=this.parseOne(t,i[s],r);if(a)return e||!1===r.allowCache||(F[t]=i[s]),a}if(!1===r.assert)return;throw new W(t)}}static parseOne(t,e,r={}){var n=[],i=e.parse(t,(t,e,i={})=>{var s=this.parse(t,e,i?d(r,i):r);return!1!==i.lodge&&((y(s,C)||y(s,T))&&n.push(s),s&&s.meta.vars.forEach(t=>n.push(t))),s},r);return i&&(i.meta||(i.meta={}),i.meta.vars=n,i.meta.deepVars=[],i.meta.deepVars=[],y(i,T)?i.reference.context&&i.meta.vars.push(i.reference.context):y(i,L)?i.meta.vars.splice(0):y(i,N)?(i.onTrue&&i.onTrue.meta.vars.forEach(t=>{w(i.meta.vars,t),i.meta.deepVars.push(t)}),i.onFalse&&i.onFalse.meta.vars.forEach(t=>{w(i.meta.vars,t),i.meta.deepVars.push(t)})):i.meta.vars.push(),s(r.explain)&&r.explain.push(t+" >>-------------\x3e> "+i.jsenType)),i}}var R=function(t){return a(t)&&/^class\s?/.test(Function.prototype.toString.call(t))},q=function(t){return t instanceof String||"string"==typeof t&&null!==t},H=function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?"":t.substr(n+e.length)},_=function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?t:t.substr(0,n)},D=function(t){return t.filter((t,e,r)=>r.indexOf(t)===e)},B=class extends Error{constructor(...t){super(...t),this.name="Reference Error"}};class U{constructor(t,e={}){if(this.stack=t,this.params=e,!("main"in this.stack))throw new Error('A "main" context must be provided!');this.stack.super&&(this.stack.super=U.create(this.stack.super,{errorLevel:e.errorLevel})),this.stack.local=this.stack.local||{},this.stack.$local=this.stack.$local||{}}observe(t,e){this.stack.super&&this.stack.super.observe(t,r=>{if(r.props.filter(e=>!z(this.stack.local,e,t)&&!z(this.stack.main,e,t)).length)return r.scope="super",e(r)}),t.observe(this.stack,r=>{var n=(r=r.filter(t=>"main"===t.name)).map(t=>H(t.path,".")).filter(t=>t),i=n.map(t=>_(t,"."));if(!n.length&&r.length&&r[0].value&&(n=i=D((c(r[0].value)?Object.keys(r[0].value):[]).concat(r[0].oldValue&&c(r[0].oldValue)?Object.keys(r[0].oldValue):[]))),i.filter(e=>!z(this.stack.local,e,t)).length)return e({props:i,references:n,scope:"local"})},{subtree:!0,tags:[this,"jsen-context"]})}unobserve(t,e){this.stack.super&&this.stack.super.unobserve(t,e),t.unobserve(this.stack,e,{subtree:!0,tags:[this,"jsen-context"]})}handle(t,e,r,n=0){var i=()=>e(this.stack.main,null,()=>this.stack.super?this.stack.super.handle(t,e,r,n+1):r?r():void 0,n);return"toString"===t&&this.stack.local.toString===Object.prototype.toString?i():e(this.stack.local,this.stack.$local,i,n)}get(t,e={},r=!0){return t instanceof String&&(t+=""),this.handle(t,(n,i,s,a)=>{var l=V(n,t,e);return!g(l)||z(n,t,e)?o(l)&&!R(l)&&r?l.bind(n):l:s()})}set(t,e,r={},n=!1){if(2===this.params.type&&"var"===n&&this.stack.super)return this.stack.super.set(t,e,r,n);t instanceof String&&(t+="");const i=(t,e,r,n)=>n.set?n.set(t,e,r):(t[e]=r,!0);return this.handle(!!n||t,(s,a,o)=>{if(a&&"const"===a[t])throw new LogicalError("CONST "+t+" cannot be modified!");return n?(a[t]=n,i(s,t,e,r)):z(s,t,r)?i(s,t,e,r):o()},()=>{throw new B('"'+t+'" is undefined!')})}del(t,e={}){return t instanceof String&&(t+=""),this.handle(t,(r,n,i)=>z(r,t,e)?(n&&delete n[t],e.deleteProperty||e.del?(e.deleteProperty||e.del)(r,t):(delete r[t],!0)):i())}has(t,e,r={}){return t instanceof String&&(t+=""),e instanceof String&&(e+=""),this.handle(t,(n,i,s)=>{if(z(n,t,r)){var a=V(n,t,r);return z(a,e,r)}return s()},()=>{throw new B('"'+t+'" is undefined!')})}exec(t,e,r={}){return t instanceof String&&(t+=""),this.handle(t,(n,i,s)=>{var a=V(n,t,r);if(!g(a)||z(n,t,r)){if(!o(a)){if(r.exec)return r.exec(n,t,e);throw new B('"'+t+'" is not a function! (Called on type: '+typeof n+".)")}return r.apply?r.apply(a,n,e):a.apply(n,e)}return s()},()=>{if(r.execUnknown)return r.execUnknown(this,t,e);throw new B('"'+t+'()" is undefined!')})}static create(t,e={}){return t instanceof U?t:new U({main:t},e)}}const V=(t,e,r)=>{if(!m(t)&&!g(t))return r.get&&c(t)?r.get(t,e):t[e]},z=(t,e,r)=>!m(t)&&!g(t)&&(r.has&&c(t)?r.has(t,e):c(t)?e in t:!g(t[e]));var J=function(t,e,r){return t.startsWith(e)&&t.endsWith(r)},K=function(t,e,r){return function(t,e){return _(t,e,!0)}(H(t,e),r)},Q=function(t,e=!0){return s(t)?t:!e&&l(t)?[t]:!1!==t&&0!==t&&v(t)?[]:function(t){return!q(t)&&!g(t.length)}(t)?Array.prototype.slice.call(t):l(t)?Object.values(t):[t]};const G=function(t,e=1,r=!0){return!h(e)||e<=0?t:(!s(t)&&l(t)&&r&&(t=Object.values(t)),s(t)?t.reduce((t,n)=>s(n)||l(n)&&r?t.concat(G(s(n)?n:Object.values(n),e-1,r)):t.concat(n),[]):t)};var Y=G,Z=function(t,e=1){var r=0;t.forEach(t=>{r++});var n=t.slice(t.length-r,e);return arguments.length>1?n:n[0]},X=function(t,e=1){return arguments.length>1?Z(t.slice().reverse(),e).reverse():Z(t.slice().reverse())},tt=function(t,e=[]){return f([{},t],(t,r,n)=>{if(!o(n[t]))return o(e)?e(t):!s(e)||!e.length||e.indexOf(t)>-1},!1,!1,!1)};class et{static lex(t,e,r={}){if(!q(t+=""))throw new Error("Argument1 must be a string!");var n=t=>({delims:t.delims.slice(),options:tt(t.options),nesting:t.nesting.slice(),maxDepth:t.maxDepth,comments:t.comments.slice(),tokens:t.tokens.slice(),matches:t.matches.slice(),matchesi:tt(t.matchesi)});if(et.$cache[t]&&!1!==r.cache)for(var i=0;i<et.$cache[t].length;i++){var s=et.$cache[t][i];if(O(s.delims,e))return n(s)}var a=new et(t,r).lex(e);return!1!==r.cache&&(et.$cache[t]=et.$cache[t]||[],et.$cache[t].push(a)),n(a)}static split(t,e,r){return et.lex(t,e,r).tokens}static match(t,e,r){return et.lex(t,e,r).matches}constructor(t,e){if(!q(t))throw new Error("Lexer requires the first argument to be a string.");this.$str=t,this.$options=e||{},this.$options.blocks||(this.$options.blocks=et.$blocks),this.$options.quotes||(this.$options.quotes=et.$quotes),this.$options.comments||(this.$options.comments=et.$comments)}lex(t,e){var r={delims:Q(t),options:d(!0,{},this.$options,e||{}),nesting:[],maxDepth:0,comments:[],tokens:[],matches:[],matchesi:{}};if(this._evalCharsAt(r,0),r.nesting.length)throw new Error("Error parsing the string: "+this.$str+". Unterminated blocks: "+Y(r.nesting).join(", "));return r}_evalCharsAt(t,e){if(!(e>=this.$str.length)){var r=1,n={},i={},s={};if(t.openComment||(i=this._testQuotes(t,e)),t.openQuote||(n=this._testComments(t,e)),t.openComment||n.ending)if(t.nesting.length||s.ending)this._push(t,this.$str[e]);else r=(o=n.starting||n.ending||this.$str[e]).length,this._push(t,o,"comments",n.starting);else if(t.openQuote||i.ending)this._push(t,this.$str[e]);else{if(t.options.limit&&t.matches.length===t.options.limit)return this._push(t,this.$str[e]),this._evalCharsAt(t,e+1);s=this._testNesting(t,e);s=this._testNesting(t,e);var a=this._testChars(t.options.stopChars||[],t,e);if(!t.nesting.length&&!1!==a)return t.options.stopChar=a,void(t.options.stopCharForward=this.$str.substr(e));if(t.delims.length)if(t.nesting.length||s.ending){var o;r=(o=s.starting||s.ending||this.$str[e]).length,this._push(t,o)}else{this._push(t,"");var l=this._testChars(t.delims,t,e);if(!1!==l&&(t.matches.push(l),t.matchesi[e]=l,r=l.length||1,!t.options.preserveDelims))return this._evalCharsAt(t,e+(l.length||1));this._push(t,l||this.$str[e])}else 2===t.nesting.length&&s.starting?(t.matches.push(null),this._push(t,s.starting),r=s.starting.length):!t.nesting.length&&s.ending?(this._push(t,s.ending),r=s.ending.length,t.matches.push(null)):this._push(t,this.$str[e])}return this._evalCharsAt(t,e+r)}}_testQuotes(t,e){var r={};return(t.options.quotes||[]).forEach(n=>{this.$str.substr(e,1)===n&&(t.openQuote?n===t.openQuote&&(t.openQuote=!1,r.ending=n):(t.openQuote=n,r.starting=n))}),r}_testComments(t,e){var r={};return(t.options.comments||[]).forEach(n=>{if(t.openComment){if(X(n)===X(t.openComment)){var i=X(n);this.$str.substr(e).startsWith(i)&&(t.openComment=!1,r.ending=i)}}else{var s=Z(n);this.$str.substr(e).startsWith(s)&&(t.openComment=n,r.starting=s)}}),r}_testNesting(t,e){var r={};return(t.options.blocks||[]).forEach(n=>{var i=Z(n);if(this.$str.substr(e).startsWith(i))t.nesting=t.nesting.concat([n]),r.starting=i;else if(t.nesting.length&&X(n)===X(X(t.nesting))){var s=X(n);this.$str.substr(e).startsWith(s)&&(t.nesting=t.nesting.slice(0,-1),r.ending=s)}}),t.maxDepth=Math.max(t.maxDepth,t.nesting.length),r}_testChars(t,e,r){for(var n=0;n<t.length;n++){var i=t[n];if(o(i)){var s=i(this.$str.substr(0,r),this.$str.substr(r));if(!1!==s)return s}if(e.options.useRegex){var a=this.$str.substr(r).match(new RegExp("^"+i,!0!==e.options.useRegex?e.options.useRegex:""));if(a)return a[0]}if(!e.options.ci&&this.$str.substr(r,i.length)===i||e.options.ci&&this.$str.substr(r,i.length).toLowerCase()===i.toLowerCase())return i}return!1}_push(t,e,r="tokens",n=!1){var i=t.matches.length;if(g(t.tokens[i])&&(t.tokens[i]=""),"comments"===r){t.tokens[i].comments||(t.tokens[i]=new String(t.tokens[i]),t.tokens[i].comments=[]);var s=t.tokens[i].comments.length-(!t.tokens[i].comments.length||n?0:1);t.tokens[i].comments[s]=(t.tokens[i].comments[s]||"")+e}else{var a=t.tokens[i].comments;t.tokens[i]=new String(t.tokens[i]+e),t.tokens[i].comments=a}}split(t,e,r){return this.lex(e,r).tokens}match(t,e,r){return this.lex(e,r).matches}regParse(t,e){return this.lex(t,d({useRegex:!0},e||{}))}regSplit(t,e){return this.regParse(t,e).tokens}regMatch(t,e){return this.regParse(t,e).matches}}et.$blocks=[["(",")"],["[","]"],["{","}"]],et.$quotes=['"',"'","`"],et.$comments=[["/*","*/"],["//","\n"]],et.$cache={};const rt=class extends S{};Object.defineProperty(rt.prototype,"jsenType",{get:()=>"Abstraction"});var nt=rt;var it=class extends nt{constructor(t){super(),this.expr=t}eval(t=null,e={}){return this.expr.eval(t,e)}toString(){return this.stringify()}stringify(t={}){return"("+this.expr.stringify(t)+")"}static parse(t,e,r={}){if(J(t,"(",")")&&!et.match(t,[" "]).length)return new this(e(K(t,"(",")")))}};const st=class extends S{};Object.defineProperty(st.prototype,"jsenType",{get:()=>"ArrayType"});var at=st;var ot=class extends at{constructor(t){super(),this.exprs=t||[]}inherit(t){if(t instanceof at){var e=t.exprs.filter(t=>this.exprs.reduce((e,r)=>e&&!t.even(r),!0));this.exprs=e.concat(this.exprs)}return this}eval(t=null,e={}){return this.exprs.map(r=>r.eval(t,e))}toString(){return this.stringify()}stringify(t={}){return"["+this.exprs.map(e=>e.stringify(t)).join(", ")+"]"}static parse(t,e,r={}){if(J(t,"[","]")&&!et.match(t.trim(),[" "]).length)return new this(et.split(K(t,"[","]"),[","]).map(t=>t.trim()).filter(t=>t).map(t=>e(t)))}};const lt=class extends S{};Object.defineProperty(lt.prototype,"jsenType",{get:()=>"Arguments"});var ct=lt;var ht=class extends ct{constructor(t=[]){super(),this.list=t}eval(t=null,e={}){return this.list.map(r=>r.eval(t,e))}toString(){return this.stringify()}stringify(t={}){return"("+this.list.map(e=>e.stringify(t)).join(", ")+")"}static parse(t,e,r={}){if(t=t.trim(),J(t,"(",")")&&!et.match(t,[" "]).length)return new this(et.split(K(t,"(",")"),[","]).map(t=>e(t.trim())))}};const ut=class extends S{};Object.defineProperty(ut.prototype,"jsenType",{get:()=>"AssertionExpression"});var pt=ut;const ft=class extends pt{constructor(t,e){super(),this.exprs=t,this.logic=e}eval(t=null,e={}){if(this.logic.toLowerCase()===ft.negation.toLowerCase())return!Z(this.exprs).eval(t,e);Y(ft.operators);for(var r=(this.logic||"").trim().toUpperCase(),n=r===(ft.operators.or||"").trim().toUpperCase(),i=r===(ft.operators.nor||"").trim().toUpperCase(),s=r===(ft.operators.and||"").trim().toUpperCase(),a=r===(ft.operators.nand||"").trim().toUpperCase(),o=!0,l=0,c=0;c<this.exprs.length;c++){if(o=this.exprs[c].eval(t,e),s&&!o)return!1;if(a&&!o)return!0;if(n&&o)return o;l+=o?1:0}return n?o:s||a?s:i&&0===l}toString(){return this.stringify()}stringify(t={}){return this.logic.toLowerCase()===ft.negation.toLowerCase()?this.logic+Z(this.exprs).stringify(t):this.exprs.map(e=>e.stringify(t)).join(" "+this.logic+" ")}static parse(t,e,r={}){if(t.toUpperCase().startsWith(ft.negation.toUpperCase()))return new this([e(t.substr(ft.negation.length))],ft.negation);var n=et.lex(t,Y(this.operators));if(n.tokens.length>1){var i=D(n.matches);if(i.length>1)throw new Error('"AND" and "OR" logic cannot be asserted in the same expression: '+t+"!");return new this(n.tokens.map(t=>e(t.trim())),Z(i))}}};ft.negation="!",ft.operators={and:"&&",or:"||"};var dt=ft;const mt=class extends S{};Object.defineProperty(mt.prototype,"jsenType",{get:()=>"AssignmentExpression"});var gt=mt;const vt=class extends gt{constructor(t,e,r,n="=",i=!1){super(),this.initKeyword=t,this.reference=e,this.val=r,this.operator=n,this.postIncrDecr=i}eval(t=null,e={}){var r,n,i=this.reference.getEval(t,e);if(["++","--"].includes(this.operator)){if(n=this.reference.eval(t,e),!b(n))throw new Error(this.reference+" must be a number!");r="++"===this.operator?n+1:n-1}else if(["+=","-=","*=","/="].includes(this.operator)){var a=i.get(),o=this.val.eval(t,e);if(!("+="===this.operator||b(a)&&b(o)))throw new Error(this+" - operands must each be a number!");r="*="===this.operator?a*o:"/="===this.operator?a/o:"-="===this.operator?a-o:a+o}else r=this.val.eval(t,e);try{return i.set(r,this.initKeyword),e&&s(e.references)&&_pushUnique(e.references,this.reference.toString()),this.postIncrDecr?n:r}catch(t){throw t instanceof B?new B("["+this+"]: "+t.message):t}}toString(){return this.stringify()}stringify(t={}){return["++","--"].includes(this.operator)?this.postIncrDecr?this.reference.stringify(t)+this.operator:this.operator+this.reference.stringify(t):(this.initKeyword?this.initKeyword+" ":"")+[this.reference.stringify(t),this.operator,this.val.stringify(t)].join(" ")}static parse(t,e,r={}){var n=et.lex(t,this.operators.concat([wt]));if(n.matches.length){var i,s,a,o,l=n.matches[0].trim(),c=["++","--"].includes(l);if(c?(o=t.trim().endsWith("++")||t.trim().endsWith("--"),s=n.tokens[o?"shift":"pop"]().trim()):(s=n.tokens.shift().trim(),a=n.tokens.shift().trim()),["var","let","const"].includes(_(s," "))){if("="!==l)throw new W("Invalid declaration: "+t);i=_(s," "),s=H(s," ").trim()}if(!((s=e(s,null,{lodge:!1}))instanceof C)||!c&&!(a=e(a)))throw new W(t);return new this(i,s,a,l,o)}}};vt.operators=["+=","-=","*=","/=","++","--"];const wt=(t,e)=>!(t.endsWith("=")||!e.startsWith("=")||e.startsWith("=>")||e.startsWith("==")||e.startsWith("==="))&&"=";var yt=vt,bt=function(t,e=[],r=!0){var n=0;return h(arguments[0])&&c(arguments[1])&&(n=arguments[0],t=arguments[1],e=arguments[2]||[]),f([n,{},t],(t,r,n)=>o(e)?e(t):!s(e)||!e.length||e.indexOf(t)>-1,!1,!1,r)};const jt=class extends S{};Object.defineProperty(jt.prototype,"jsenType",{get:()=>"Block"});var Et=jt;const xt=class extends S{};Object.defineProperty(xt.prototype,"jsenType",{get:()=>"ReturnDirective"});var kt=xt;class Ot extends Et{constructor(t,e){super(),this.stmts=t||[],this.delim=e}eval(t=null,e={}){e=e?bt(e):{},t=U.create(t);for(var r=t=>D(t.map(t=>_(_(t.toString(),"["),"("))),n=(t,e,r)=>{try{return t.eval(e,r)}catch(t){r.catch&&r.catch(t)}},i=[],s=0;s<this.stmts.length;s++){var a=this.stmts[s],o=r(a.meta.vars),l=r(a.meta.deepVars||[]),c=(e.references||[]).filter(t=>o.filter(e=>(e+".").startsWith(t+".")).length),h=(e.references||[]).filter(t=>l.filter(e=>(e+".").startsWith(t+".")).length);if(!e.references||!e.references.length||(c=c.length)||(h=h.length)){var u=e;if(c&&delete(u=bt(e)).references,a instanceof kt)return n(a,t,u);i[s]=n(a,t,u),e.references&&a instanceof gt&&(e.references=e.references.concat(r([a.reference])))}}return i}toString(){return this.stringify()}stringify(t={}){return this.stmts.map(e=>e.stringify(t)).join(this.delim)}static parse(t,e,r={}){var n=et.lex(t+";",Y(this.operators).concat([Ot.testBlockEnd]));if(n.matches.length)return new this(n.tokens.map(t=>e(t.trim())).filter(t=>t),n.matches[0].trim())}static testBlockEnd(t,e){return!(!t.endsWith("}")||e.trim().startsWith("else"))&&""}}Ot.operators=[";","\r\n"];const St=class extends S{};Object.defineProperty(St.prototype,"jsenType",{get:()=>"BooleanType"});var At=St;var Ct=class extends At{constructor(t){super(),this.state=t}eval(){return"true"===this.state.toLowerCase().trim()}toString(){return this.stringify()}stringify(t={}){return this.state}static parse(t,e,r={}){if("true"===(t=t.toLowerCase().trim())||"false"===t)return new this(t)}};var Pt=class extends T{constructor(t,e){super(),this.reference=t,this.args=e}eval(t=null,e={}){try{var r=this.args.eval(t,e);return this.reference.getEval(t,e).exec(r)}catch(t){throw t instanceof B?new B("["+this+"]: "+t.message):t}}toString(){return this.stringify()}stringify(t={}){return this.reference.stringify(t)+this.args.stringify(t)}static parse(t,e,r={}){if(!t.startsWith("(")&&t.endsWith(")")&&!et.match(t,[" "]).length){var n,i=et.split(t,[]),s=i.pop();if(!((n=e(i.join(""),null,{lodge:!1}))instanceof C&&(s=e(s,[ht]))))throw new W(t);return new this(n,s)}}},Tt=function(t,e,r=null){return s(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1===e.indexOf(t)):[]};const $t=class extends S{};Object.defineProperty($t.prototype,"jsenType",{get:()=>"ComparisonExpression"});var Lt=$t;class Mt extends Lt{constructor(t,e,r){super(),this.operand1=t,this.operand2=e,this.operator=r}eval(t=null,e={}){return this.constructor.compare(this.operand1.eval(t,e),this.operand2.eval(t,e),this.operator)}toString(){return this.stringify()}stringify(t={}){return[this.operand1.stringify(t),this.operator,this.operand2.stringify(t)].join(" ")}static parse(t,e,r={}){var n=Y(this.operators).map(t=>" "+t+" "),i=et.lex(t,n);if(i.tokens.length>1){if(i.tokens.length>2)throw new Error('Malformed "Comparison" expression: '+t+"!");return new this(e(Z(i.tokens).trim()),e(X(i.tokens).trim()),i.matches[0].trim())}}static compare(t,e,r="=="){if(-1===Y(this.operators).indexOf(r))throw new Error('The operator "'+r+'" is not recognized.');switch(r){case"===":return t===e;case"==":case"=":return t==e;case">":return t>e;case"<":return t<e;case">=":return t>=e;case"<=":return t<=e;case"!=":return t!=e;case"<>":case"!==":return t!==e;case"^=":return q(t)&&t.startsWith(e);case"$=":return q(t)&&t.endsWith(e);case"*=":return!(!s(e)&&!q(e))&&t.indexOf(e)>-1;case"~=":return q(t)&&q(e)&&(" "+t+" ").indexOf(" "+e+" ")>-1;case">=<":if(!s(e)||2!==e.length)throw new Error("A 'Between' comparison requires argument 2 to be an array of exactly 2 values.");return t>=e[0]&&t<=e[1];case"/**/":return e.match(new RegExp(t));default:return!1}}static diff(t,e,r){return!this.compare(t,e,r?"===":"==")}}Mt.operators={exact:{is:"===",isNull:"===",equalsTo:"==",strictlyNotEqualsTo:"!==",notEqualsTo:"!="},relative:{lesserThan:"<",greaterThan:">",lesserThanOrEqualsTo:"<=",greaterThanOrEqualsTo:">=",between:">=<"},partial:{startsWith:"^=",endsWith:"$=",contains:"*=",any:"~=",in:"~=",matches:"/**/"}};const Nt=class extends S{};Object.defineProperty(Nt.prototype,"jsenType",{get:()=>"TernaryConditional"});var Wt=Nt;class Ft extends Wt{constructor(t,e,r){super(),this.assertion=t,this.onTrue=e,this.onFalse=r}eval(t=null,e={}){return this.assertion.eval(t,e)?this.onTrue.eval(t,e):this.onFalse.eval(t,e)}toString(){return this.stringify()}stringify(t={}){return[this.assertion.stringify(t),this.constructor.operators[0],this.onTrue.stringify(t),this.constructor.operators[1],this.onFalse.stringify(t)].join(" ")}static parse(t,e,r={}){var n=et.split(t,this.operators);if(n.length>1){if(2===n.length)throw new Error("Malformed ternary expression: "+t+"!");return new this(e(n[0].trim()),e(n[1].trim()),e(n[2].trim()))}}}Ft.operators=["?",":"];const It=class extends S{};Object.defineProperty(It.prototype,"jsenType",{get:()=>"DeleteExpression"});var Rt=It;const qt=class extends Rt{constructor(t,e="delete"){super(),this.reference=t,this.operator=e}eval(t=null,e={}){try{return this.reference.getEval(t,e).del()}catch(t){throw t instanceof B?new B("["+this+"]: "+t.message):t}}toString(){return this.stringify()}stringify(t={}){return this.operator+" "+this.reference.stringify(t)}static parse(t,e,r={}){var n=et.lex(t,Object.values(this.operators));if(1===n.matches.length&&t.startsWith(n.matches[0]+" ")){var i;if(!((i=e(n.tokens.pop().trim()))instanceof C))throw new W(t);return new this(i,n.matches[0].trim())}}};qt.operators={red:"reduce",del:"delete"};var Ht=qt;const _t=class extends L{constructor(t,e,r={}){super(),this.paramters=t||{},this.statements=e,this.arrowFunctionFormatting=r}inherit(t){if(t instanceof L){for(var e=Object.keys(t.paramters),r=Object.keys(this.paramters),n=0;n<Math.max(r.length,e.length);n++){var i=e[n],s=r[n];if(!s&&i)throw new Error("Parameter #"+n+" ("+i+") in parent function must be implemented.");if(s&&i){var a=t.paramters[i],o=this.paramters[s];if(o&&!a)throw new Error("Parameter #"+n+" ("+s+") must not have a default value as established in parent function.");if(o&&a&&o.jsenType!==a.jsenType)throw new Error("Default value for parameter #"+n+" ("+s+") must be of type "+a.jsenType+" as established in parent function.")}}this.sup=t}return this}eval(t=null,e={}){var r=this;return function(...n){var i={};x(Object.keys(r.paramters),(s,a)=>{var o=r.paramters[a];if(n.length-1<s&&!o)throw new Error('The parameter "'+a+'" is required.');i[a]=n.length>s?n[s]:r.paramters[a]?r.paramters[a].eval(t,e):null}),r.arrowFunctionFormatting||(i.this=this);var s=t instanceof U?t.params.errorLevel:void 0,a=new U({main:i,super:t},{errorLevel:s}),o=r.statements.eval(a,e);return!1===r.arrowFunctionFormatting.body?o[0]:o}}toString(){return this.stringify()}stringify(t={}){var e=[];if(x(this.paramters,(r,n)=>{e.push(r+(n?"="+n.stringify(t):""))}),this.arrowFunctionFormatting){var r=!1===this.arrowFunctionFormatting.head||1===e.length&&-1===e[0].indexOf("="),n=!1===this.arrowFunctionFormatting.body;return(r?e[0]:"("+e.join(", ")+")")+" => "+(n?this.statements.stringify(t):"{"+this.statements.stringify(t)+"}")}return"function ("+e.join(", ")+") {"+this.statements.stringify(t)+"}"}static parse(t,e,r={}){var n;if((t=t.trim()).startsWith("function")&&(n=et.split(t,[]).slice(1).filter(t=>t.trim()))&&2===n.length)var i=!1,s=K(n.shift().trim(),"(",")"),a=K(n.shift().trim(),"{","}");else{if(t.startsWith("function")||!(n=et.split(t,["=>"]))||2!==n.length)return;s=n.shift().trim(),a=n.shift().trim(),i={};J(s,"(",")")?s=K(s,"(",")"):i.head=!1,J(a,"{","}")?a=K(a,"{","}"):i.body=!1}var o={};et.split(s,[","]).forEach(t=>{var r=t.split("=");r[1]?o[r[0].trim()]=e(r[1].trim(),null,{meta:null}):o[t.trim()]=null});var l=e(a,[Ot],{assert:!1})||e(a,null,{meta:null});return new this(o,"Block"===l.jsenType?l:new Ot([l]),i)}};_t.operators=["=>"];var Dt=_t;var Bt=class extends N{constructor(t,e,r,n={}){super(),this.assertion=t,this.onTrue=e,this.onFalse=r,this.params=n}eval(t=null,e={}){var r=t instanceof U?t.params.errorLevel:void 0,n=new U({main:{},super:t},{type:2,errorLevel:r});return this.assertion.eval(t,e)?this.onTrue?this.onTrue.eval(n,e):void 0:this.onFalse?this.onFalse.eval(n,e):void 0}toString(){return this.stringify()}stringify(t={}){var e=this.onTrue&&this.params.onTrueIsBlock?"{"+this.onTrue.stringify(t)+"}":this.onTrue?this.onTrue.stringify(t):"",r=this.onFalse&&this.params.onFalseIsBlock?"{"+this.onFalse.stringify(t)+"}":this.onFalse?this.onFalse.stringify(t):"";return"if ("+this.assertion.stringify(t)+")"+e+(r?" else "+r:"")}static parse(t,e,r={}){var n;if((t=t.trim()).startsWith("if")&&(n=et.split(t,[],{limit:2}).slice(1).filter(t=>t.trim()))&&2===n.length){var i,s,a=e(K(n.shift().trim(),"(",")").trim()),o=et.split(n.shift().trim(),["else"],{limit:1}),l=o.shift().trim(),c=(o.shift()||"").trim();return J(l,"{","}")?(i=!0,l=e(l=K(l,"{","}").trim(),[Ot],{assert:!1,meta:null})||e(l,null,{meta:null})):l=e(l,null,{meta:null}),c&&(J(c,"{","}")?(s=!0,c=e(c=K(c,"{","}").trim(),[Ot],{assert:!1,meta:null})||e(c,null,{meta:null})):c=e(c,null,{meta:null})),new this(a,l?"Block"===l.jsenType?l:new Ot([l]):null,c?"Block"===c.jsenType?c:new Ot([c]):null,{onTrueIsBlock:i,onFalseIsBlock:s})}}},Ut=function(t,e,r=null){return s(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1!==e.indexOf(t)):[]};const Vt=class extends S{};Object.defineProperty(Vt.prototype,"jsenType",{get:()=>"MathExpression"});var zt=Vt;const Jt=class extends zt{constructor(t,e){super(),this.val=t,this.exprs=e}eval(t=null,e={}){return this.exprs.reduce((r,n)=>{var i=n.val.eval(t,e),s=n.operator.trim();if(!(h(r)&&h(i)||"+"===s))throw new Error("Invalid Math expression: "+this.toString()+"!");switch(s){case"+":return r+i;case"-":return r-i;case"*":return r*i;case"/":return r/i}},this.val.eval(t,e))}toString(){return this.stringify()}stringify(t={}){return[this.val.stringify(t)].concat(this.exprs.map(e=>e.operator+" "+e.val.stringify(t))).join(" ")}static parse(t,e,r={}){var n=et.lex(t,Y(this.operators));if(n.tokens.length>1&&n.matches.length===n.tokens.length-1){var i=D(n.matches);if(Ut(i,this.operators.sup).length&&Ut(i,this.operators.sub).length)throw new Error('"Addition/subtraction" and "multiplication/division" operators cannot be used in the same expression: '+t+"!");return new this(e(n.tokens.shift().trim()),n.tokens.map((t,r)=>({operator:n.matches[r],val:e(t.trim())})))}}};Jt.operators={sup:["*","/"],sub:["+","-"]};var Kt=Jt;const Qt=class extends S{};Object.defineProperty(Qt.prototype,"jsenType",{get:()=>"NumberType"});var Gt=Qt;var Yt=class extends Gt{constructor(t,e=0){super(),this.int=t,this.dec=e}eval(){return parseFloat(this.int+(this.dec?"."+this.dec:null))}toString(){return this.stringify()}stringify(t={}){return this.int+(this.dec?"."+this.dec:null)}static parse(t,e,r={}){if(h(t)){t=t.split(".");return new this(parseInt(t.shift()),parseInt(t.shift()))}}};const Zt=class extends S{};Object.defineProperty(Zt.prototype,"jsenType",{get:()=>"ObjectType"});var Xt=Zt;const te=class extends Xt{constructor(t){super(),this.entries=t||{}}inherit(t){return t instanceof Xt&&x(t.entries,(t,e)=>{t in this.entries||(this.entries[t]=e)}),this}eval(t=null,e={}){var r={};return x(this.entries,(n,i)=>{r[n]=i.eval(t,e)}),r}toString(){return this.stringify()}stringify(t={}){var e=[];return x(this.entries,(r,n)=>{e.push(r+te.operators.sub+n.stringify(t))}),"{"+e.join(te.operators.sup)+"}"}static parse(t,e,r={}){if(J(t,"{","}")&&!et.match(t.trim(),[" "]).length){var n={},i=et.split(K(t,"{","}"),[te.operators.sup]).map(t=>t.trim()).filter(t=>t);return x(i,(t,r)=>{var i=et.split(r,[te.operators.sub],{limit:1});n[Z(i).trim()]=e(X(i).trim())}),new this(n)}}};te.operators={sup:",",sub:":"};var ee=te;const re=class extends S{};Object.defineProperty(re.prototype,"jsenType",{get:()=>"PresenceOperator"});var ne=re;const ie=class extends ne{constructor(t,e,r="in"){super(),this.prop=t,this.reference=e,this.operator=r}eval(t=null,e={}){var r=this.prop.eval(t,e);try{return this.reference.getEval(t,e).has(r)}catch(t){throw t instanceof B?new B("["+this+"]: "+t.message):t}}toString(){return this.stringify()}stringify(t={}){return[this.prop.stringify(t),this.operator,this.reference.stringify(t)].join(" ")}static parse(t,e,r={}){var n=et.lex(t,this.operators);if(2===n.tokens.length){var i,s;if(!((i=e(n.tokens.shift().trim()))&&(s=e(n.tokens.shift().trim()))instanceof C))throw new W(t);return new this(i,s,n.matches[0].trim())}}};ie.operators=[" in "];var se=ie;const ae=class extends C{constructor(t,e,r=!1){super(),this.context=t,this.name=e,this.backticks=r}getEval(t=null,e={}){var r=t,n=this.name;return this.context&&(n instanceof S&&(n=n.eval(t,e)),r=this.context.eval(t,e)),{get:()=>U.create(r).get(n,e.trap),del:()=>U.create(r).del(n,e.trap),has:t=>U.create(r).has(n,t,e.trap),set:(t,i=null)=>U.create(r).set(n,t,e.trap,i),exec:t=>U.create(r).exec(n,t,e.trap)}}eval(t=null,e={}){try{return this.getEval(t,e).get()}catch(t){throw t instanceof B?new B("["+this+"]: "+t.message):t}}toString(){return this.stringify()}stringify(t={}){var e=this.name;if(this.context){var r=this.context.stringify(t);e instanceof S?e="["+e.stringify(t)+"]":this.backticks&&(e="`"+e+"`")}else{r=t.context;this.backticks&&(e="`"+e+"`")}return(r||"")+(r&&!e.startsWith("[")?ae.separator:"")+e}static parse(t,e,r={}){if(!et.match(t.trim(),[" "]).length){var n,i,s=et.split(t,[]),a=s.pop(),o=et.split(a.trim(),[this.separator],{preserveDelims:!0});if(o.length>1&&(a=o.pop().substr(1),s=s.concat(o)),J(a,"`","`")&&(a=K(a,"`","`"),i=!0),s.length&&((n=e(s.join(""))).isContext=!0),J(a,"[","]")){if(!n)throw new W(t);a=e(K(a,"[","]"))}return new this(n,a,i)}}};ae.separator=".";var oe=ae;var le=class extends kt{constructor(t){super(),this.expr=t}eval(t=null,e={}){return this.expr?this.expr.eval(t,e):void 0}toString(){return this.stringify()}stringify(t={}){return this.expr?"return "+this.expr.stringify(t):"return"}static parse(t,e,r={}){var n=t.toLowerCase();if(n.startsWith("return ")||"return"===n)return new this(e(t.substr(6).trim()))}};const ce=class extends S{};Object.defineProperty(ce.prototype,"jsenType",{get:()=>"StringType"});var he=ce;var ue=class extends he{constructor(t,e){super(),this.expr=t,this.quote=e}eval(){return this.expr}toString(){return this.stringify()}stringify(t={}){return this.quote+this.expr+this.quote}static parse(t,e,r={}){if(t=t.trim(),(J(t,'"','"')||J(t,"'","'"))&&!et.match(t,[" "]).length){var n=J(t,'"','"')?'"':"'";return new this(K(t,n,n),n)}}};const pe=class extends S{};Object.defineProperty(pe.prototype,"jsenType",{get:()=>"Void"});var fe=pe;var de=class extends fe{constructor(t){super(),this.val=t}eval(){return"null"===this.val.toLowerCase().trim()?null:void 0}toString(){return this.stringify()}stringify(t={}){return this.val}static parse(t,e,r={}){if("null"===(t=t.toLowerCase().trim())||"undefined"===t)return new this(t)}};I.grammars={If:Bt,Return:le,Deletion:Ht,Assignment:yt,Presence:se,Func:Dt,Abstraction:it,Condition:Ft,Assertion:dt,Comparison:Mt,Math:Kt,Arr:ot,Obj:ee,Num:Yt,Str:ue,Bool:Ct,Void:de,Call:Pt,Reference:oe};var me=I,ge={window:null,params:{}},ve=function(){!function(t){ge.window.CSS||(ge.window.CSS={});ge.window.CSS.escape||(ge.window.CSS.escape=t=>t.replace(/([\:@\~\$\&])/g,"\\$1"))}(),ge.window.Element.prototype.matches||(ge.window.Element.prototype.matches=ge.window.Element.prototype.matchesSelector||ge.window.Element.prototype.mozMatchesSelector||ge.window.Element.prototype.msMatchesSelector||ge.window.Element.prototype.oMatchesSelector||ge.window.Element.prototype.webkitMatchesSelector||function(t){for(var e=(this.document||this.ownerDocument).querySelectorAll(t),r=e.length;--r>=0&&e.item(r)!==this;);return r>-1})};var we=function(t){return typeof t},ye=function(t,e,r=null){if(!c(t))throw new Error('Object must be of type subject; "'+we(t)+'" given!');var n;return!(n=t[e])&&r&&(n=new r(t),Object.defineProperty(t,e,{get:()=>n,set:t=>{if(t!==n)throw new Error('Attempt to overwrite the "'+e+'" special property!')},enumerable:!1})),n},be=class{constructor(t){this.subject=t,this.fireables=[],this.currentlyFiring=[]}add(t){return this.fireables.push(t),t}forget(t){this.filter(t).forEach(t=>{this.fireables=this.fireables.filter(e=>e!==t)})}filter(t){return this.fireables.filter(e=>{var r=Q(e.filter),n=Q((e.params||{}).tags),i=Q(t.filter),s=Q((t.params||{}).tags);return!(t.originalHandler&&e.handler!==t.originalHandler||i.length&&(i.length!==r.length||Ut(r,i).length!==i.length)||s.length&&(s.length!==n.length||Ut(n,s).length!==s.length))})}},je=function(t,e){return t.reduce((t,r)=>t||e(r),!1)},Ee=function(t,e,r={},n={}){e=Q(e).slice();for(var i=t;!g(i)&&!m(i)&&e.length;){var s=e.shift();if(!(r.get?r.get(i,s):c(i)?s in i:i[s]))return void(n.exists=!1);i=r.get?r.get(i,s):i[s]}return n.exists=!0,i},xe=function(t,e=null){var r={};return 2===arguments.length&&(s(t)&&s(e)?t.forEach((t,n)=>r[t]=e[n]):r[t]=e),r},ke=function(t,e,r=null,n={}){if(!t||!c(t))throw new Error('Object must be of type subject; "'+we(t)+'" given!');if(o(e)&&(n=arguments.length>2?r:{},r=e,e=null),r&&!o(r))throw new Error('Handler must be a function; "'+we(r)+'" given!');var i;if(i=De(t,!1))return i.forget({filter:e,originalHandler:r,params:n})},Oe=class{constructor(t,e){this.subject=t,this.handler=e.handler,this.filter=e.filter,this.params=e.params}disconnect(){this.disconnected=!0}},Se=class extends Oe{fire(t,e,r){return this.disconnected||this.filter&&this.filter!==t.type?e(...Array.prototype.slice.call(arguments,2)):this.handler(t,r,e)}},Ae=class{constructor(t,e){if(this.subject=t,!e.type)throw new Error("Action type must be given in definition!");x(e,(t,e)=>{Object.defineProperty(this,t,{value:e,enumerable:!0})}),Object.seal(this)}},Ce=class extends be{add(t){return super.add(new Se(this.subject,t))}fire(t,e=null){if(t instanceof Ae||(t=new Ae(this.subject,t)),this.currentlyFiring.filter(e=>e.type===t.type&&e.name===t.name).length)return e?e():void 0;this.currentlyFiring.push(t);const r=(n,...i)=>{var s=this.fireables[n];return s?s.fire(t,(...t)=>r(n+1,...t),...i):e?e(...i):i[0]};var n=r(0);return this.currentlyFiring.pop(),n}},Pe=function(t,e=!0){return ye(t,".interceptors",e?Ce:null)},Te=function(t,e){if(!e||!c(e))throw new Error("Target must be of type object!");var r,n=function(r){return arguments.length?r:t?Object.getOwnPropertyNames(e):Object.keys(e)};return(r=Pe(e,!1))?r.fire({type:t?"ownKeys":"keys"},n):n()},$e=function(t){return Te(!1,...arguments)};function Le(t,e=null,r=!1){if(!t||!c(t))throw new Error("Target must be of type object!");var n=De(t);if(!n.build){n.build=!0;var i=!(e=Q(e)).length||e.filter(t=>t.startsWith(".")).length?$e(t).filter(t=>-1===t.indexOf(".")):e.map(t=>_(t,".")),s=e.length?e.map(t=>H(t,".")):null;i.forEach(e=>{var n=qe(t,e);c(n)&&(We(t,e,n),(s||r)&&Le(n,s,r))})}}var Me=function(t,e,r=null,n={}){if(!t||!c(t))throw new Error('Object must be of type subject; "'+we(r)+'" given!');if(o(e)&&(n=arguments.length>2?r:{},r=e,e=null),!o(r))throw new Error('Callback must be a function; "'+we(r)+'" given!');var i={filter:e,handler:r,params:n};(i.filter||i.params.subtree)&&Le(t,i.filter,i.params.subtree);var s,a=De(t);return i.params.unique&&(s=a.filter({filter:e,params:n})).length?s[0]:a.add(i)},Ne=class{constructor(t,e){if(this.subject=t,e.originalSubject||(this.originalSubject=t),!("type"in e))throw new Error("Delta type must be given in definition!");if(!("name"in e))throw new Error("Property name must be given in definition!");x(e,(t,e)=>{Object.defineProperty(this,t,{value:e,enumerable:!0})}),this.path||Object.defineProperty(this,"path",{value:e.name,enumerable:!0}),Object.seal(this)}},We=function(t,e,r){var n;Me(r,r=>{if(n=De(t,!1)){var i=r.map(r=>{var n={};return x(r,(t,e)=>{"subject"!==t&&"name"!==t&&"path"!==t&&(n[t]=e)}),n.name=e,n.path=e+"."+r.path,n.originalSubject=r.originalSubject,new Ne(t,n)});return n.fire(i)}},{subtree:!0,unique:!0,tags:[Fe,e,t]})};const Fe={};var Ie=function(t,e,r){ke(r,null,null,{tags:[Fe,e,t]})},Re=function(t,...e){var r=e.map(t=>{if(!c(t))throw new Error("Target must be of type object!");return{subject:t,subjectCopy:s(t)?t.slice(0):bt(t)}}),n=t(...e);return r.map(t=>{var e,r=Object.keys(t.subjectCopy),n=Object.keys(t.subject),i=[],a=D(r.concat(n)).map(e=>{if((!s(t.subject)||"length"!==e&&".observer"!==e)&&t.subjectCopy[e]!==t.subject[e]){i.push(e);var a={name:e,related:i,buffered:!0};return n.includes(e)?(a.type="set",a.value=t.subject[e],r.includes(e)&&(a.isUpdate=!0)):a.type="del",r.includes(e)&&(a.oldValue=t.subjectCopy[e]),c(t.subjectCopy[e])&&Ie(t.subject,e,t.subjectCopy[e]),c(t.subject[e])&&We(t.subject,e,t.subject[e]),a}}).filter(t=>t);if(a.length&&(e=De(t.subject,!1)))return e.fire(a)}),n},qe=function(t,e,r=!1){if(!t||!c(t))throw new Error("Target must be of type object!");var n,i,a=function(r){return arguments.length?r:s(e)?xe(e,t):t[e]};return n=(i=Pe(t))?i.fire({type:"get",name:e},a):a(),r&&s(t)&&!h(e)&&o(n)&&!R(n)?function(...e){return Re(()=>n.apply(t,e),t)}:n},He=class extends Oe{constructor(t,e){if(super(t,e),this.filterArray=Q(this.filter),this.isDynamicFilter=this.filterArray.filter(t=>q(t)&&(t.indexOf("..")>-1||t.startsWith(".")||t.endsWith("."))).length,this.isDynamicFilter&&this.filterArray.length>1)throw new Error('Only one "Dynamic Filter" must be observed at a time! "'+this.filterArray.join(", ")+'" have been bound together.')}fire(t){var e;if(!(this.disconnected||this.params.type&&!je(t,t=>this.params.type===t.type)))if(this.filterArray.length){var r=[];this.filterArray.filter((e,n)=>(e=q(e)?e.replace(/`/g,""):e,r[n]=[],t.filter(t=>{var i=t.path.split("."),s=this.isDynamicFilter?e.split(".").map((t,e)=>t||i[e]||"").join("."):e;return u(r[n],s),(s===t.name||!1!==this.params.suptree&&(s+".").startsWith(t.path+".")||this.params.subtree&&(t.path+".").startsWith(s+"."))&&(!this.isDynamicFilter||!s.split(".").filter(t=>!t).length)}).length)).length&&(e=r,e.reduce((t,e)=>{var r=[];return t.forEach(t=>{Q(e).forEach(e=>{var n=t.slice();n.push(e),r.push(n)})}),r},[[]])).forEach(e=>{var r=this.formatChanges(e,t);this.handler(s(this.filter)?r:r[0])})}else this.filter||!this.params.subtree&&t.filter(t=>t.path===t.name).length!==t.length||this.handler(t)}formatChanges(t,e){return!1===this.params.data?[]:t.map(t=>{var r=e.reduce((e,r)=>{if(e)return e;if(t+""==r.path+"")return r;if((t+".").startsWith(r.path+".")){var n=q(t)?H(t,r.path+".").split("."):t;e=new Ne(r.subject,{type:r.type,name:t});return("del"===r.type||r.isUpdate)&&(e.oldValue=Ee(r.oldValue,n,{get:qe})),"del"!==r.type&&(e.value=Ee(r.value,n,{get:qe})),e}},null);return r||(r=new Ne(this.subject,{type:"get",name:t,value:Ee(this.subject,q(t)?t.split("."):t,{get:qe})})),r})}},_e=class extends be{add(t){return super.add(new He(this.subject,t))}fire(t){return t=Q(t,!1).map(t=>t instanceof Ne?t:new Ne(this.subject,t)),!this.currentlyFiring.filter(e=>t.filter(t=>e.type===t.type&&e.name===t.name).length).length&&(this.currentlyFiring.push(...t),this.fireables.forEach(e=>{if(t.propagationStopped)return!1;e.fire(t)}),t.forEach(t=>w(this.currentlyFiring,t)),!0)}},De=function(t,e=!0){return ye(t,".observers",e?_e:null)},Be=function(t,e){if(!t||!c(t))throw new Error("Target must be of type object!");var r,n=function(r){return arguments.length?r:e in t};return(r=Pe(t,!1))?r.fire({type:"has",name:e},n):n()},Ue=function(t,e,r,n=null,i=null){if(!e||!c(e))throw new Error("Target must be of type object!");l(r)&&(i=n,n=null);var a=Pe(e,!1),o=De(e,!1);const h=(r,n,i,s)=>{if(q(r)&&-1!==r.indexOf("."))throw new Error("Property names with a dot are not supported!");var l,h="set";t&&(h="def",n=(l=n||{}).value);var u={name:r,type:h,value:n,related:i,detail:s};Be(e,r)&&(u.isUpdate=!0,u.oldValue=qe(e,r));var p=function(t){return arguments.length?t:(l?Object.defineProperty(e,r,l):e[r]=n,!0)};if(a){var f=l?{type:"def",name:r,descriptor:l,related:i,detail:s}:{type:"set",name:r,value:n,related:i,detail:s};u.success=a.fire(f,p)}else u.success=p();return u.success&&u.value!==u.oldValue&&(c(u.oldValue)&&Ie(e,r,u.oldValue),c(u.value)&&(We(e,r,u.value),o&&o.build&&Le(u.value,null,!0))),u};var u,p=[];s(r)||(q(r)||b(r))&&(u=Q(r))?p=u.map(t=>h(t,n,u,i)):l(r)&&(u=Object.keys(r))&&(p=u.map(t=>h(t,r[t],u,i)));var f=p.filter(t=>t.success);return o&&o.fire(f),f.length>0},Ve=function(t,e,r=null,n=null){return Ue(!1,...arguments)},ze=function(t,e,r=null){if(!t||!c(t))throw new Error("Target must be of type object!");var n,i=(e=Q(e)).map(n=>{if(q(n)&&-1!==n.indexOf("."))throw new Error("Property names with a dot are not supported!");var i={name:n,type:"del",related:e,detail:r};Be(t,n)&&(i.oldValue=qe(t,n));var s,a=function(e){return arguments.length?e:(delete t[n],!0)};return(s=Pe(t,!1))?i.success=s.fire({type:"del",name:n,related:e},a):i.success=a(),i.success&&c(i.oldValue)&&Ie(t,n,i.oldValue),i}).filter(t=>t.success);return(n=De(t,!1))&&n.fire(i),i.length>0},Je=function(t,e,r=null,n=null){return Ue(!0,...arguments)},Ke=function(t){return Te(!0,...arguments)};var Qe={set:Ve,get:qe,has:Be,deleteProperty:ze,del:ze,defineProperty:Je,def:Je,keys:$e,ownKeys:Ke,intercept:function(t,e,r,n={}){if(!c(t))throw new Error('Object must be of type subject; "'+we(r)+'" given!');if(o(e)&&(n=arguments.length>2?r:{},r=e,e=null),!o(r))throw new Error('Callback must be a function; "'+we(r)+'" given!');var i,s=Pe(t),a={filter:e,handler:r,params:n};return a.params.unique&&(i=s.filter(a)).length?i[0]:s.add(a)},unintercept:function(t,e,r=null,n={}){if(!t||!c(t))throw new Error('Object must be of type subject; "'+we(t)+'" given!');if(o(e)&&(n=arguments.length>2?r:{},r=e,e=null),r&&!o(r))throw new Error('Handler must be a function; "'+we(r)+'" given!');var i;if(i=Pe(t,!1))return i.forget({filter:e,originalHandler:r,params:n})},proxy:function(t){if(!c(t))throw new Error('Object must be of type subject; "'+we(t)+'" given!');var e=new Proxy(t,{get:(t,r)=>{var n=qe(t,r);return o(n)&&!R(n)?n.bind(e):n},set:Ve,has:Be,deleteProperty:ze,defineProperty:Je,ownKeys:Ke});return e},observe:Me,unobserve:ke,closure:Re,init:function(t,e){Q(e).forEach(e=>{var r,n,i=t[e],s=Object.getOwnPropertyDescriptor(t,e)||{enumerable:!(e in t)};"value"in s&&delete s.value,"writable"in s&&delete s.writable,s.get=()=>{if(r)return i;r=!0;var n=qe(t,e);return r=!1,n},s.set=r=>{if(n)return i=r,!0;n=!0;Ve(t,e,r);return n=!1,!0},Object.defineProperty(t,e,s)})},build:Le,link:We,unlink:Ie},Ge=[],Ye=function(t){"complete"===ge.window.document.readyState?t():Ge.push(t),ge.window.document.addEventListener("DOMContentLoaded",()=>{Ge.forEach(t=>t()),Ge.splice(0)},!1)};function Ze(t,e,r={}){return r.on="removed",tr(t,t=>{e(t)},r)}function Xe(t,e,r={}){Ye(()=>{ge.window.MutationObserver&&function(t,e,r={}){r.on="added",tr(t,t=>{e(t)},r)}(t,(t,r)=>{t.forEach(t=>e(t,r))},r),q(t)?Q(ge.window.document.querySelectorAll(t)).forEach(t=>e(t,1)):t.parentNode&&e(t,1)})}function tr(t,e,r={}){t=Q(t,!1);var n=(t,e)=>{if(e=e.filter(t=>t.matches),q(t)){var n=e.filter(e=>e.matches(t));if(!1!==r.observeIndirectMutation&&(n=e.reduce((e,r)=>e.concat(Q(r.querySelectorAll(t))),n)).length)return n}else{if(e.includes(t))return[t];if(!1!==r.observeIndirectMutation&&e.length)for(var i=t;i=i.parentNode;)if(e.includes(i))return[t]}},i=[],s=[],a=r.context||ge.window.document.documentElement,o=new ge.window.MutationObserver(a=>{if(!r.on||"added"===r.on){var l=[];if(t.forEach(t=>{if(q(t))l=a.reduce((e,r)=>e.concat(n(t,Q(r.addedNodes))||[]),l);else{var e=a.reduce((e,r)=>e||(n(t,Q(r.addedNodes))||[])[0],null);e&&l.push(e)}}),l.length)if(r.onceEach){var c=Tt(l,i);c.length&&(i.push(...c),e(c,1))}else r.once&&o.disconnect(),e(l,1)}if(!r.on||"removed"===r.on){var h=[];if(t.forEach(t=>{if(q(t))h=a.reduce((e,r)=>e.concat(n(t,Q(r.removedNodes))||[]),h);else{var e=a.reduce((e,r)=>e||(n(t,Q(r.removedNodes))||[])[0],null);e&&h.push(e)}}),h.length)if(r.onceEach){var u=Tt(h,s);u.length&&(s.push(...u),e(u,0))}else r.once&&o.disconnect(),e(h,0)}});return o.observe(a,{childList:!0,subtree:!0}),o}function er(t,e,r=[]){var n=new ge.window.MutationObserver(e),i={attributes:!0,attributeOldValue:!0};return r&&(i.attributeFilter=r),n.observe(t,i),n}var rr={window:ge.window,trap:Qe,params:{bundleElement:"partials-bundle",templateElement:"template",templateNamespaceAttribute:"name",slotReferenceAttribute:"partials-slot",templateReferenceAttribute:"template",slotElement:"partials-slot",slotNameAttribute:"name",itemsBindingMethod:"partialsItemize",itemIndexAttribute:"partials-index",keyValAttributes:[],listAttributes:[],inertContexts:["template"],inertSubjects:[],noinheritAttributes:["nocompose","name","template"],recomposeCallback:null}};function nr(t,e,r=[]){return e.partialsSlottables?(x(e.partialsSlottables,(e,n)=>{if(t.partialsSlottables&&t.partialsSlottables[e]){var i=r.concat((t.getAttribute("noinherit")||"").split(" ").map(t=>t.trim()));ir(t.partialsSlottables[e],n,i,!1)}else t.append(n.clone(!0))}),t):t}function ir(t,e,r=[],n=!0){r=r.concat(rr.params.noinheritAttributes),t.hasAttribute("noinherit")&&(r=r.concat((t.getAttribute("noinherit")||"*").split(" ").map(t=>t.trim())));var i=rr.params.listAttributes.concat(["role","class"]);if(D(i).forEach(i=>{var s,a;if(!r.includes(i)&&!r.includes("*")&&(s=e.getAttribute(i))){if(a=t.getAttribute(i))var o=n?[a,s]:[s,a];else o=[s];t.setAttribute(i,D(o.join(" ").split(" ").map(t=>t.trim())).join(" ")),r.push(i)}}),D(rr.params.keyValAttributes.concat("style")).forEach(i=>{var s,a;if(!r.includes(i)&&!r.includes("*")&&(s=e.getAttribute(i))){if(a=t.getAttribute(i))(o=n?[a,s]:[s,a])[0].trim().endsWith(";")||(o[0]=o[0]+";");else var o=[s];t.setAttribute(i,o.join(" ")),r.push(i)}}),!r.includes("*"))for(var s=0;s<e.attributes.length;s++){var a=e.attributes[s];r.includes(a.name)||t.hasAttribute(a.name)&&!n||t.setAttribute(a.name,a.value)}return t}var sr,ar,or,lr=function(t,e,r=null){return d(t,l(e)?e:xe(e,r))};function cr(t,e=null){if(sr||(ar=ge.window.document.querySelector('meta[name="chtml"]'))&&(sr=(ar.getAttribute("content")||"").split(";").filter(t=>t).reduce((t,e)=>{var r=e.split("=").map(t=>t.trim());return lr(t,r[0],"true"===r[1]||"false"!==r[1]&&(h(r[1])?parseInt(r[1]):r[1]))},{})),2===arguments.length){!1===e?delete sr[t]:sr[t]=!0===e?"true":e;var r=Object.keys(sr).reduce((t,e)=>t+e+"="+sr[e]+";","");return ar.setAttribute("content",r),!0}return sr?sr[t]:void 0}function hr(t={},e=null,r=null){if(t&&d(rr.params,t),e&&e===or)return;if(or)throw new Error('"init()" already called with a window!');rr.window=e,or=e,r&&(rr.trap=r);const i=!0===cr("isomorphic")||1===cr("isomorphic"),s=t=>(t[".chtml"]||(t[".chtml"]={}),t[".chtml"]);if("templates"in rr.window.document)throw new Error('document already has a "templates" property!');const a=[];Object.defineProperty(rr.window.document,"templates",{value:{}}),Object.defineProperty(rr.window.document,"templatesReadyState",{value:"loading",writable:!0});const o=t=>{var e=t.getAttribute(rr.params.templateNamespaceAttribute);e in rr.window.document.templates&&console.warn('"'+e+'" already exists in document.templates!'),rr.window.document.templates[e]=t};Xe("template["+rr.window.CSS.escape(rr.params.templateNamespaceAttribute)+"]",t=>{var e;o(t),er(t,e=>{delete rr.window.document.templates[e[0].oldValue],o(t)},[rr.params.templateNamespaceAttribute]),(e=t.getAttribute("src"))&&!t.content.children.length&&a.push(new Promise((r,n)=>{rr.window.fetch?rr.window.fetch(e).then(t=>t.ok?t.text():Promise.reject(t.statusText)).then(e=>{t.innerHTML=e,r(t)}).catch(t=>{n("Error fetching the bundle at "+e+". ("+t+")")}):n("Error fetching the bundle at "+e+". (window.fetch() not supported by browser.)")}))});const l=t=>{(v(s(t).partials)||t.closest("[live]"))&&(s(t).templates={},s(t).partials={},Q((t.content||t).children).forEach(e=>{var r;if(e instanceof rr.window.HTMLTemplateElement&&(r=e.getAttribute(rr.params.templateNamespaceAttribute)))s(t).templates[r]=e;else{var n=e.getAttribute(rr.params.slotReferenceAttribute)||"default";s(t).partials[n]||(s(t).partials[n]=[]),s(t).partials[n].push(e)}}))};if("templates"in rr.window.HTMLTemplateElement.prototype)throw new Error('The "HTMLTemplateElement" class already has a "templates" property!');if(Object.defineProperty(rr.window.HTMLTemplateElement.prototype,"templates",{get:function(){return l(this),s(this).templates}}),"partials"in rr.window.HTMLTemplateElement.prototype)throw new Error('The "HTMLTemplateElement" class already has a "partials" property!');if(Object.defineProperty(rr.window.HTMLTemplateElement.prototype,"partials",{get:function(){return l(this),s(this).partials}}),"template"in rr.window.Element.prototype)throw new Error('The "Element" class already has a "template" property!');Object.defineProperty(rr.window.Element.prototype,"template",{get:function(){var t=this.getAttribute(rr.params.templateReferenceAttribute);if(t){if(s(this).templates||(s(this).templates={}),!s(this).templates[t]){var e=t.split("/").filter(t=>t).reduce((t,e)=>t?t.templates[e]:null,rr.window.document);e&&(s(this).templates[t]=e)}return s(this).templates[t]}}}),Xe("["+rr.window.CSS.escape(rr.params.templateReferenceAttribute)+"]",t=>{var e=rr.params.inertContexts.concat(rr.params.inertSubjects);je(e,e=>t.closest(e))||er(t,()=>{x(s(t).slots,(t,e)=>{e.resolve()})},[rr.params.templateReferenceAttribute])}),rr.window.customElements.define(rr.params.slotElement,class extends rr.window.HTMLElement{hydrate(t,e,r){this.anchorNode=t,s(this).slottedElements=e,s(this).compositionBlock=r,this._bindSlotted(e),this._connectToCompositionBlock()}connectedCallback(){this.anchorNode||(this.anchorNode=i?rr.window.document.createComment(this.outerHTML):rr.window.document.createTextNode(""),this.after(this.anchorNode),s(this).compositionBlock=this.hasAttribute(rr.params.templateReferenceAttribute)?null:this.parentNode.closest("["+rr.window.CSS.escape(rr.params.templateReferenceAttribute)+"]"),this._connectToCompositionBlock(),Ye(()=>{Promise.all(a).then(()=>{this.resolve()})}))}_connectToCompositionBlock(){this.compositionBlock&&(s(this.compositionBlock).slots||(s(this.compositionBlock).slots={}),s(this.compositionBlock).slots[this.name]=this)}_bindSlotted(t){t.forEach(t=>{t.slotReference=this}),s(this).slottedObserver=Ze(t,t=>{t.forEach(t=>{t.parentNode||w(this.slottedElements,t),t.slotReference===this&&delete t.slotReference}),this.slottedElements.length||this.anchorNode.before(this)},{onceEach:!0})}resolve(){if(!je(rr.params.inertContexts,t=>this.closest(t))){var t,e;if(this.hasAttribute(rr.params.templateReferenceAttribute))this.compositionBlock&&s(this.compositionBlock).slots[this.name]===this&&delete s(this.compositionBlock).slots[this.name],(t=this.template)&&(e=t.partials[this.name]);else{if(!this.compositionBlock)return void console.warn("Scoped slots must be found within template contexts. ["+this.name+"]",this);(t=this.compositionBlock.template)&&(e=t.partials[this.name])}t?this.fill(e):this.empty()}}fill(t){t=Q(t,!1).map(t=>t.cloneNode(!0)),this.empty(!0),this.remove(),t.forEach(t=>{"@slot"===t.getAttribute(rr.params.templateReferenceAttribute)&&(s(t).templates||(s(t).templates={}),s(t).templates["@slot"]=this),ir(t,this),t.getAttribute(rr.params.slotReferenceAttribute)||t.setAttribute(rr.params.slotReferenceAttribute,this.name),this.anchorNode.before(t)}),this._bindSlotted(t),this.slottedElements.push(...t)}empty(t=!1){if(this.slottedElements){var e=this.slottedElements;t&&this.slottedObserver&&(this.slottedObserver.disconnect(),e=this.slottedElements.splice(0)),e.forEach(t=>t.remove())}}get name(){return this.getAttribute(rr.params.slotNameAttribute)||"default"}get compositionBlock(){return s(this).compositionBlock}get slottedElements(){return s(this).slottedElements||(s(this).slottedElements=[]),s(this).slottedElements}get partials(){return l(this),s(this).partials}static get observedAttributes(){return[rr.params.slotNameAttribute]}});if("partials"in rr.window.document)throw new Error('document already has a "partials" property!');Object.defineProperty(rr.window.document,"partials",{value:{composition:n}}),a.forEach(t=>{t.catch(t=>{console.warn(t)})}),Ye(()=>{Promise.all(a).then(()=>{rr.window.document.templatesReadyState="complete",rr.window.document.dispatchEvent(new rr.window.Event("templatesreadystatechange"))}),i&&Q(rr.window.document.querySelectorAll("["+rr.window.CSS.escape(rr.params.slotReferenceAttribute)+"]")).forEach(t=>{if(!s(t.parentNode).slotsCan){var e=[];t.parentNode.childNodes.forEach(t=>{var r;if(1===t.nodeType&&t.matches("["+rr.window.CSS.escape(rr.params.slotReferenceAttribute)+"]"))e.push(t);else if(8===t.nodeType&&(r=t.nodeValue.trim())&&r.startsWith("<"+rr.params.slotElement)&&r.endsWith("</"+rr.params.slotElement+">")){var n,i,s=rr.window.document.createElement("div");s.innerHTML=r,(n=s.firstChild).matches(rr.params.slotElement)&&(n.hasAttribute(rr.params.templateReferenceAttribute)||(i=t.parentNode.closest("["+rr.window.CSS.escape(rr.params.templateReferenceAttribute)+"]")),n.hydrate(t,e,i),e=[])}}),s(t.parentNode).slotsCan=!0}})})}var ur,pr={window:ge.window,trap:Qe,params:{rootAttribute:"namespace",scopedIdAttribute:"scoped:id",namespacePropertyName:"namespace",inertContexts:[],inertSubjects:[]}};var fr,dr,mr=U,gr={window:ge.window,trap:Qe,params:{scriptElement:'script[type="scoped"]',globalBindingMethod:"bind",localBindingMethod:"bind",inertContexts:[]}};function vr(t={},e=null,r=null){if(t&&d(gr.params,t),e&&e===fr)return;if(fr)throw new Error('"init()" already called with a window!');gr.window=e,fr=e,r&&(gr.trap=r);const n=!0===cr("isomorphic")||1===cr("isomorphic");var i=[],s=cr("script-autorun");const a=(t,e)=>gr.trap?gr.trap.get(t,e):t[e],l=(t,e,r)=>(gr.trap?gr.trap.set(t,e,r):t[e]=r,t),c=(t,e)=>(gr.trap?gr.trap.set(t,e):Object.keys(e).forEach(r=>{t[r]=e[r]}),t),h=function(t){return t[".chtml"]||(t[".chtml"]={}),t[".chtml"].scopedJS||(t[".chtml"].scopedJS={scope:new mr(l({super:new mr(l({super:p},"main",l({},"this",t)))},"main",{}))},t[".chtml"].scopedJS.scope.observe(gr.trap,e=>{t[".chtml"].scopedJS.inWaitlist||u(t,e)})),t[".chtml"].scopedJS},u=function(t,e){var r=h(t);r.inWaitlist=!1;var n={references:(e||{}).references,catch:e=>{2===r.errorLevel?console.error(t,e):0!==r.errorLevel&&console.warn(t,e.message)},trap:gr.trap};if(r.AST){var i=r.AST.eval(r.scope,n);o(i)&&i(r.scope.stack.main)}},p=new mr(l({},"main",{}),{errorLevel:gr.params.errorLevel});if(Xe(gr.params.scriptElement,t=>{if(!je(gr.params.inertContexts,e=>t.closest(e))){var e,r=t.parentNode,a=h(r);if(n||t.remove(),a.scriptElement!==t){if(a.scriptElement)throw new Error("An element must only have one scopedJS instance!");if(a.scriptElement=t,e=(t.textContent||"").trim()){var o=[],l=t.hasAttribute("explain")||cr("script-explain");a.AST=class{static parse(t,e={}){var r;return(r=me.parse(t,[Ot],d({assert:!1},e)))||(r=new Ot([me.parse(t,null,e)])),r}}.parse(e,{explain:l?o:null}),l&&console.log(r,o),a.errorLevel=t.getAttribute("errors")?parseInt(t.getAttribute("errors")):cr("script-errors"),s||a.hasBindings||t.hasAttribute("autorun")?u(r):(a.inWaitlist=!0,i.push(r))}}}}),gr.params.localBindingMethod in gr.window.Element.prototype)throw new Error('The "Element" class already has a "'+gr.params.localBindingMethod+'" property!');if(Object.defineProperty(gr.window.Element.prototype,gr.params.localBindingMethod,{value:function(t,e={}){let r=h(this);e.update?c(r.scope.stack.main,t):l(r.scope.stack,"main",t),r.hasBindings=!0,i.includes(this)&&(w(i,this),u(this))}}),"bindings"in gr.window.Element.prototype)throw new Error('The "Element" class already has a "bindings" property!');if(Object.defineProperty(gr.window.Element.prototype,"bindings",{get:function(){console.log(this);var t=h(this),e=this;return t.scopeInstanceProxy||(t.scopeInstanceProxy=new Proxy({},{set:(r,n,s)=>(l(t.scope.stack.main,n,s),t.hasBindings=!0,i.includes(e)&&(w(i,e),u(e)),!0),get:(e,r)=>a(t.scope.stack.main,r)})),t.scopeInstanceProxy}}),gr.params.globalBindingMethod in gr.window.document)throw new Error('document already has a "'+gr.params.globalBindingMethod+'" property!');if(Object.defineProperty(gr.window.document,gr.params.globalBindingMethod,{value:function(t,e={}){var r;for(e.update?c(p.stack.main,t):l(p.stack,"main",t);r=i.shift();)u(r);s=!0}}),"bindings"in gr.window.document)throw new Error('document already has a "bindings" property!');var f;Object.defineProperty(gr.window.document,"bindings",{get:function(){return f||(f=new Proxy({},{set:(t,e,r)=>{var n;for(l(p.stack.main,e,r);n=i.shift();)u(n);return s=!0,!0},get:(t,e)=>a(p.stack.main,e)})),f}})}!function(t={},e=null,r=null){if(t&&d(ge.params,t),!e||e!==dr){if(dr)throw new Error('"init()" already called with a window!');ge.window=e,dr=e,r&&(ge.trap=r),ve(),hr({},e,r),function(t={},e=null,r=null){if(t&&d(pr.params,t),!e||e!==ur){if(ur)throw new Error('"init()" already called with a window!');if(pr.window=e,ur=e,r&&(pr.trap=r),!pr.window||!("Element"in pr.window))throw new Error('The "Element" class not found in global context!');if(pr.params.namespacePropertyName in pr.window.Element.prototype)throw new Error('The "Element" class already has a "'+pr.params.namespacePropertyName+'" property!');Object.defineProperty(pr.window.Element.prototype,pr.params.namespacePropertyName,{get:function(){if(!this[".sopedHTML-namespace"]){var t={};this[".sopedHTML-namespace"]=t,pr.trap.link&&pr.trap.link(this,pr.params.namespacePropertyName,t)}return this[".sopedHTML-namespace"]}}),Xe("["+pr.window.CSS.escape(pr.params.scopedIdAttribute)+"]",t=>{var e=pr.params.inertContexts.concat(pr.params.inertSubjects);if(!je(e,e=>t.closest(e))){var r=t.getAttribute(pr.params.scopedIdAttribute),n=t.parentNode.closest("["+pr.window.CSS.escape(pr.params.rootAttribute)+"],html")[pr.params.namespacePropertyName];n[r]!==t&&pr.trap.set(n,r,t),Ze(t,()=>{n[r]===t&&pr.trap.deleteProperty(n,r)},{once:!0})}})}}({},e,r),vr({},e,r)}}({},window);var wr=function(t,e,r=null){for(var n=[],i=t.length,s=0;s<i;s++)n.push({index:s,value:r?r(t[s]):t[s]});return n.sort((function(t,e){return q(t.value)&&"".localeCompare?t.value.localeCompare(e.value):t.value===e.value?0:t.value>e.value?1:-1})),"desc"===(e||"").trim().toLowerCase()&&(n=n.reverse()),n.map(e=>t[e.index])};class yr{constructor(t,e={}){const r=this.constructor;this.pathMappingScheme=e;var n=(t,e)=>l(t)&&l(e)?n(Object.keys(t),Object.keys(e))&&n(Object.values(t),Object.values(e)):s(t)&&s(e)?t.length===e.length&&t.reduce((t,r,n)=>t&&r===e[n],!0):t===e;Qe.intercept(this,"set",(t,e,n)=>{if("href"===t.query&&Tt(br,t.related).length){var i=r.parseUrl(t.value);return Qe.set(this,i),!1}return n()}),Qe.observe(this,["search","searchmap","pathname","pathmap","pathsplit","href"],t=>{var[e,i,s,a,o,l]=t.map(t=>t.value),[c,h,u,p,f,d]=t.map(t=>t.oldValue);if("set"!==t[1].type||t[1].isUpdate){var m={},g="get"===t[1].type&&n(i,h);e!==c||g||(m.search=r.toSearch(i),m.search===this.search&&delete m.search),e!==c&&g&&(m.searchmap=r.toSearchmap(e),n(m.searchmap,this.searchmap)&&delete m.searchmap);var w="get"===t[3].type&&n(a,p),y="get"===t[4].type&&n(o,f);return s!==u||w&&y||(m.pathname=r.toPathname(y?a:o,this.pathname,this.pathMappingScheme),m.pathname===this.pathname&&delete m.pathname),!w||s===u&&y||(m.pathmap=r.toPathmap(s!==u?s:o,this.pathMappingScheme),n(m.pathmap,this.pathmap)&&delete m.pathmap),!y||s===u&&w||(m.pathsplit=r.toPathsplit(s!==u?s:a,this.pathname,this.pathMappingScheme),n(m.pathsplit,this.pathsplit)&&delete m.pathsplit),l!==d||v(m)?v(m)&&l!==d&&(m=r.parseUrl(l)):(m.href=this.origin,m.href+=m.pathname||s,m.href+=m.search||e||"",m.href===this.href&&delete m.href),v(m)?void 0:Qe.set(this,m)}},{subtree:!0}),Qe.observe(this,t=>{t.forEach(t=>{if(t&&t.detail){if(!c(t.detail))throw new Error('"e.detail" can only be of type object.');if(t.detail.request&&!l(t.detail.request))throw new Error('"e.detail.request" can only be of type object.')}})}),Qe.set(this,yr.copy(t))}toString(){return this.href}static from(t,e={}){return new this(l(t)?t:this.parseUrl(t),e)}static copy(t){return bt(t,br,!1)}static parseUrl(t){var e=window.document.createElement("a");return e.href=t,br.reduce((t,r)=>lr(t,r,e[r]),{})}static toSearchmap(t){return(t.startsWith("?")?t.substr(1):t).split("&").filter(t=>t).map(t=>t.split("=").map(t=>t.trim())).reduce((t,e)=>lr(t,e[0],e[1]),{})}static toSearch(t){return Object.keys(t).length?"?"+Object.keys(t).map(e=>e+"="+t[e]).join("&"):""}static toPathmap(t,e={}){var r=q(t)?t.split("/").filter(t=>t):t,n=q(t)?t:"/"+r.join("/")+"/";return(e=wr(Object.keys(e),"desc").reduce((t,r)=>t||((n+"/").startsWith("/"===r?r:"/"+r.split("/").filter(t=>t).join("/")+"/")?e[r]:null),null))?r.reduce((t,r,n)=>e[n]?lr(t,e[n],r):t,{}):{}}static toPathsplit(t,e=null,r={}){if(q(t))return t.split("/").filter(t=>t);if(!e)throw new Error('A "referenceUrl" must be given to properly determine a path-naming scheme.');r=wr(Object.keys(r),"desc").reduce((t,n)=>t||((e+"/").startsWith("/"===n?n:"/"+n.split("/").filter(t=>t).join("/")+"/")?r[n]:null),null);if(Tt(Object.keys(t),r).length)throw new Error("The given pathmap contains keys ("+Object.keys(t).join(", ")+") not recognized by the implied path-naming scheme ("+r.join(", ")+")");return r?r.map(e=>t[e]).filter(t=>t):[]}static toPathname(t,e=null,r={}){if(l(t)){if(!e)throw new Error('A "referenceUrl" must be given to properly determine a path-naming scheme.');t=Self.toPathsplit(t,e,r)}return"/"+t.join("/")+"/"}}const br=["hash","host","hostname","href","origin","pathname","port","protocol","search"];class jr{constructor(t={}){this.routeTree=t}async route(t){var e=this.routeTree,r=t.url.pathname.split("/").filter(t=>t);const n=async function(i,s){var a;if(0===i)a=e["/"];else if(r[i-1]){var o="/"+r.slice(0,i).join("/");a=e[o]}if(a){var l=(...t)=>n(i+1,...t);return l.path=r.slice(i).join("/"),await a(t,s,l)}return 1===arguments.length?window.fetch(t.url.toString(),t.headers):s};return n(0)}}var Er=function(t){return!Array.isArray(t)&&"object"==typeof t&&t},xr={window:null,params:{}},kr=function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?t:t.substr(0,n)},Or=function(t,e){return kr(t,e,!0)},Sr=function(t){return"function"==typeof t},Ar=function(t){return Array.isArray(t)||"object"==typeof t&&t||Sr(t)},Cr=function(t){return!0!==t&&!1!==t&&null!==t&&""!==t&&!isNaN(1*t)},Pr=function(t,e){var r=void 0;return Ar(t)&&Object.keys(t).forEach((n,i)=>{!1!==r&&(r=e(Cr(n)?parseFloat(n):n,t[n],i))}),r},Tr=function(t){return t instanceof String||"string"==typeof t&&null!==t},$r=function(){!function(t){xr.window.CSS||(xr.window.CSS={});xr.window.CSS.escape||(xr.window.CSS.escape=t=>t.replace(/([\:@\~\$\&])/g,"\\$1"))}(),xr.window.Element.prototype.matches||(xr.window.Element.prototype.matches=xr.window.Element.prototype.matchesSelector||xr.window.Element.prototype.mozMatchesSelector||xr.window.Element.prototype.msMatchesSelector||xr.window.Element.prototype.oMatchesSelector||xr.window.Element.prototype.webkitMatchesSelector||function(t){for(var e=(this.document||this.ownerDocument).querySelectorAll(t),r=e.length;--r>=0&&e.item(r)!==this;);return r>-1})};function Lr(t,e=xr.window.document,r=!1){var n,i=r?"querySelectorAll":"querySelector";try{n=e[i](t)}catch(r){try{n=e[i](t.replace(/\:is\(/g,":matches("))}catch(r){try{n=e[i](t.replace(/\:is\(/g,":-webkit-any("))}catch(r){try{n=e[i](t.replace(/\:is\(/g,":-moz-any("))}catch(t){throw t}}}}return n}var Mr=function(t){if(Tr(t)){var e;if(t.trim().startsWith("<")){var r=xr.window.document.createElement("div");r.innerHtml=t,e=r.firstChild}else e=Lr(t);return e}return t},Nr=function(t){return Sr(t)||t&&"[object function]"==={}.toString.call(t)},Wr=function(t){return null===t||""===t},Fr=function(t){return arguments.length&&(void 0===t||void 0===t)},Ir=function(t){return Wr(t)||Fr(t)||!1===t||0===t||Ar(t)&&!Object.keys(t).length},Rr=function(t){return Array.isArray(t)},qr=function(t,e=!0){return Rr(t)?t:!e&&Er(t)?[t]:!1!==t&&0!==t&&Ir(t)?[]:function(t){return!Tr(t)&&!Fr(t.length)}(t)?Array.prototype.slice.call(t):Er(t)?Object.values(t):[t]};function Hr(t,e,r=null,n=null,i=!0){const s=(e,n,i)=>{var s;if(i&&t.children.length)s=t.querySelector("["+xr.params.itemIndexAttribute+'="'+e+'"]');else{var a=t.template.partials[e];if(Ir(a)&&Cr(e)&&(a=t.template.partials["#"]),Ir(a)&&(a=t.template.partials.default),!Ir(a)){s=a[0].cloneNode(!0);var o={};qr(t.children).forEach(t=>{o[t.getAttribute(xr.params.itemIndexAttribute)]=t});var l=function(t,e,r=!1,n=!1,i=!1){if(-1===t.indexOf(e))return r?[]:void 0;var s=!0===r?t.length-1:!1===r?1:r,a=i?t.lastIndexOf(e)+1:t.indexOf(e)+1,o=Fr(e)?[]:t.slice(a,a+s);return n&&o.length<s&&o.length<t.length&&(Nr(n)&&!n(s-o.length)||(o=o.concat(t.slice(0,s-o.length)))),r?o:o[0]}(Object.keys(o),e+"",!0).reduce((t,e)=>t||o[e],null);if(l)l.before(s);else t.append(s);s.setAttribute(xr.params.itemIndexAttribute,e)}}s&&Nr(r)&&setTimeout(()=>{r(s,n,e,i)},0)};var a=!!t.children.length;Pr(e,(t,e)=>s(t,e,a)),i&&xr.trap.observe&&(_r(t).previousBindings&&xr.trap.unobserve(_r(t).previousBindings,null,null,{tags:["#playui-itemize",Hr]}),xr.trap.observe(e,r=>{r.forEach(r=>{Rr(e)&&"length"===r.name||("del"===r.type?(e=>{var r=t.querySelector("["+xr.params.itemIndexAttribute+'="'+e+'"]');if(r){var i;Nr(n)&&(i=n(r));var s=()=>r.remove();i instanceof Promise?i.then(s).catch(s):s()}})(r.name):"set"!==r.type&&"def"!==r.type||s(r.name,r.value,r.isUpdate))})},{tags:["#playui-itemize",Hr]}),_r(t).previousBindings=e)}const _r=t=>(t[".stub"]||(t[".stub"]={}),t[".stub"]);var Dr=function(t,e=null){var r={};return 2===arguments.length&&(Rr(t)&&Rr(e)?t.forEach((t,n)=>r[t]=e[n]):r[t]=e),r},Br=function(t,e,r=null){t[".firedom"].data||Object.defineProperty(t,".firedom",{value:{data:{}}});var n=t[".firedom"].data;if(2===arguments.length){if(Tr(e))return n[e];if(Rr(e)){var i={};return e.forEach(t=>{i[t]=n[t]}),i}}var s=e;return Er(e)||(s=Dr(e,r)),Pr(s,(t,e)=>{Fr(e)?delete n[t]:n[t]=e}),t};const Ur={readCallbacks:[],writeCallbacks:[],_run:function(){xr.window.requestAnimationFrame(()=>{Ur.readCallbacks.forEach((t,e)=>{t&&!t()&&(Ur.readCallbacks[e]=null)}),Ur.writeCallbacks.forEach((t,e)=>{t&&!t()&&(Ur.writeCallbacks[e]=null)}),Ur._run()})},onread:function(t,e=!1){if(e)return new Promise((e,r)=>{!1===xr.reflow?t(e,r):Ur.readCallbacks.push(()=>{t(e,r)})});!1===xr.reflow?t():Ur.readCallbacks.push(t)},onwrite:function(t,e=!1){if(e)return new Promise((e,r)=>{!1===xr.reflow?t(e,r):Ur.writeCallbacks.push(()=>{t(e,r)})});!1===xr.reflow?t():Ur.writeCallbacks.push(t)},cycle:function(t,e,r){Ur.onread(()=>{var n=t(r);if(n){var i=n=>{Ur.onwrite(()=>{var i=e(n,r);if(i){var s=r=>{Ur.cycle(t,e,r)};i instanceof xr.window.Promise?i.then(s):s()}})};n instanceof xr.window.Promise?n.then(i):i()}})}};var Vr=Ur,zr=function(t,e){return"string"!=typeof t?t:t.replace(/\w\S*/g,(function(t){return t.charAt(0).toUpperCase()+(void 0!==typeof e&&e?t.substr(1).toLowerCase():t.substr(1))}))},Jr=function(t,e,r=null){return Rr(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1===e.indexOf(t)):[]},Kr=function(t,e,r=!1){for(var n=t.indexOf(e);n>-1&&(r||!1===r);)t.splice(n,1),r>0&&r--,n=t.indexOf(e);return t},Qr=function(t,...e){return e.forEach(e=>Kr(t,e)),t},Gr=function(t){return t.filter((t,e,r)=>r.indexOf(t)===e)},Yr=function(t,e,r=null){return Rr(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1!==e.indexOf(t)):[]},Zr=function(t,e,r=null,n=null){if(2===arguments.length){if(Tr(e))return t.getAttribute(e);if(Rr(e)){var i={};return e.forEach(e=>{i[e]=t.getAttribute(e)}),i}}var s=e;return Er(s)?n=r:s=Dr(e,r),Pr(s,(r,i)=>{if(arguments.length>3||Er(e)&&arguments.length>2){var s=t.getAttribute(r),a=s?s.split(" ").map(t=>t.trim()).filter(t=>t):[],o=Tr(i)?i.trim().split(" ").map(t=>t.trim()).filter(t=>t):qr(i);!n&&Yr(a,o).length?t.setAttribute(r,Qr(a,...o).join(" ")):n&&Jr(a,o).length&&t.setAttribute(r,Gr(a.concat(o)).join(" "))}else!1===i?t.removeAttribute(r):t.setAttribute(r,!0===i?"true":i)}),t},Xr=function(t,e,r=null,n=null){return 2===arguments.length?Vr.onwrite((t,e)=>{try{t(Zr(...arguments))}catch(t){e(t)}},!0):Vr.onread((t,e)=>{try{t(Zr(...arguments))}catch(t){e(t)}},!0)},tn=function(t,...e){return Xr(t,"class",...e)},en=function(t,...e){return Zr(t,"class",...e)},rn=function(t,e=null){return arguments.length>1?(Tr(e)?t.innerHTML=e:(t.innerHTML="",Fr(e)||t.append(e)),t):t.innerHTML},nn=function(t,e=null){return arguments.length>1?Vr.onwrite((t,e)=>{try{t(rn(...arguments))}catch(t){e(t)}},!0):Vr.onread((t,e)=>{try{t(rn(...arguments))}catch(t){e(t)}},!0)},sn=function(t,e=null){return arguments.length>1?(Fr(e)&&(e=""),t.innerText=e,t):t.innerText},an=function(t,e=null){return arguments.length>1?Vr.onwrite((t,e)=>{try{t(sn(...arguments))}catch(t){e(t)}},!0):Vr.onread((t,e)=>{try{t(sn(...arguments))}catch(t){e(t)}},!0)},on=function(t,...e){return Fr(e[0])&&(e[0]=""),t.append(...e),t},ln=function(t,...e){return Vr.onwrite((r,n)=>{try{r(on(t,...e))}catch(t){n(t)}},!0)},cn=function(t,...e){return Fr(e[0])&&(e[0]=""),t.prepend(...e),t},hn=function(t,...e){return Vr.onwrite((t,r)=>{try{t(cn(...e))}catch(t){r(t)}},!0)},un=function(t,e){return void 0===t?"":t.split(/(?=[A-Z])/).join(e||" ")};function pn(){var t=xr.window.getComputedStyle(xr.window.document.documentElement,""),e=(Array.prototype.slice.call(t).join("").match(/-(moz|webkit|ms)-/)||""===t.Olink&&["","o"])[1];return{api:("WebKit|Moz|Ms|O".match(new RegExp("("+e+")","i"))||[])[1],prefix:e,css:"-"+e+"-"}}var fn=function(t){var e,r,n=(r=!0,e=zr((e=t).replace(/-/g," ")).replace(/ /g,""),r?e:e[0].toLowerCase()+e.substr(1));if(pn().api+n in xr.window.document.body.style)return pn().css+un(t,"-")},dn=function(t,e,r){var n={},i=qr(t);return Pr(i,(t,s)=>{((t,s)=>{var a=un(s,"-").toLowerCase();if("auto"===r)n[a]=e(fn(a)||a,i[t]);else{if(r){var o=fn(a);o&&(n[o]=e(o,i[t]))}n[a]=e(a,i[t])}})(t,s)}),Rr(t)||r||"size"===t||"offsets"===t?n:n[t]};const mn=class{constructor(t){Pr(t,(t,e)=>{["rotate","scale","skew","translate"].includes(t)&&(this[t]=Rr(e)?new mn[t](...e):new mn[t](e))})}toString(){return["rotate","scale","skew","translate"].reduce((t,e)=>t+(this[e]&&this[e].length?" "+this[e]:""),"").trim()}static parse(t){var e=function(t){return Math.round(100*t)/100},r=function(t){var r=180*t/Math.PI;return e(r)},n=function(t){var e=[];if(window.WebKitCSSMatrix)return[(e=new window.WebKitCSSMatrix(t)).a,e.b,e.c,e.d,e.e,e.f];for(var r,n=/[\d\.\-]+/g;r=n.exec(t);)e.push(+r);return e}(t),i=n[0],s=n[1],a=n[2],o=n[3];if(i*o==s*a)throw new Error("Dramatic.parseTransform: matrix is singular");var l=Math.sqrt(i*i+s*s),c=(i/=l)*a+(s/=l)*o;a-=i*c,o-=s*c;var h=Math.sqrt(a*a+o*o);return c/=h,i*(o/=h)<s*(a/=h)&&(i=-i,s=-s,c=-c,l=-l),new mn({translate:[n[4],n[5]],scale:[e(l),e(h)],rotate:r(Math.atan2(s,i)),skew:r(Math.atan(c))})}};mn.rotate=class extends Array{toString(){return"rotate("+this.map(t=>Cr(t)?t+"deg":t).join(", ")+")"}},mn.scale=class extends Array{toString(){return"scale("+this.join(", ")+")"}},mn.skew=class extends Array{toString(){return"skew("+this.map(t=>Cr(t)?t+"deg":t).join(", ")+")"}},mn.translate=class extends Array{toString(){return"translate("+this.map(t=>Cr(t)?t+"px":t).join(", ")+")"}};var gn=mn,vn=function(t,e,r=null){var n=window.getComputedStyle(t,r);return dn(e,(t,e)=>{var r=n.getPropertyValue(fn(t)||t);return"width"!==t&&"height"!==t||""!==r||(r="0px"),"transform"===t&&(r=gn.parse(r)),r},!1)},wn=["width","height","top","left","right","bottom","padding","padding-top","padding-left","padding-right","padding-bottom","margin","margin-top","margin-left","margin-right","margin-bottom","border-width","border-top-width","border-left-width","border-right-width","border-bottom-width","outline-width","outline-top-width","outline-left-width","outline-right-width","outline-bottom-width"],yn=function(t,e,r=null){e=Tr(e)?Dr(e,r):e;var n={inset:["top","right","bottom","left"],margin:["top","right","bottom","left"],padding:["top","right","bottom","left"]};return dn(Object.keys(e),(r,i)=>{var s=e[i];Pr(n,(t,e)=>{r===t&&(Er(s)&&(s=e.map(t=>s[t]).filter(t=>!Fr(t))),Rr(s)&&(s=s.join(" ")))}),"transform"!==r||!Er(s)||s instanceof gn||(s=new gn(s).toString()),t.style[r]=wn.includes(r)&&Cr(s)?s+"px":s},"auto"),t},bn=function(t,...e){return e.length>1&&Tr(e[0])||Er(e[0])?yn(t,...e):vn(t,...e)},jn=function(t,e,r=null){return Vr.onread((n,i)=>{try{n(Nr(e)?e(t):vn(t,e,r))}catch(t){i(t)}},!0)},En=function(t,e,r=null){return Vr.onwrite((n,i)=>{try{n(Nr(e)?e(t):yn(t,e,r))}catch(t){i(t)}},!0)},xn=function(t,...e){return e.length>1&&Tr(e[0])||Er(e[0])?En(t,...e):jn(t,...e)},kn=function(t,e,r="auto"){var n=t.getAttribute("style");return"all"===e&&(e=n.split(";").map(t=>t.split(":")[0])),dn(e,t=>(new RegExp(";[ ]*?"+t+":([^;]+);?","g").exec(";"+n)||["",""])[1].trim(),r)},On=function(t,e,r=null,n=null){var i=Er(e)?Object.keys(e):e;n=Er(e)?r:n;var s=kn(t,i);return En(t,e,r).then(()=>jn(t,n||i).then(e=>En(t,s).then(()=>e)))},Sn=function(t,...e){return e.forEach(e=>{t.indexOf(e)<0&&t.push(e)}),t},An=function(t,e){var r=[];return function(t,e){e=(e=e||Object.prototype)&&!Rr(e)?[e]:e;var r=[];for(t=t;t&&(!e||e.indexOf(t)<0)&&"default"!==t.name;)r.push(t),t=t?Object.getPrototypeOf(t):null;return r}(t,e).forEach(t=>{Sn(r,...Object.getOwnPropertyNames(t))}),r};function Cn(t,e,r=!1,n=!1,i=!0){var s=0,a=t.shift();if((Cr(a)||!0===a||!1===a)&&(s=a,a=t.shift()),!t.length)throw new Error("_merge() requires two or more array/objects.");return t.forEach((t,o)=>{(Ar(t)||Nr(t))&&(r?An(t):Object.getOwnPropertyNames(t)).forEach(l=>{var c=a[l],h=t[l];if((Rr(c)&&Rr(h)||Er(c)&&Er(h))&&(!0===s||s>0))a[l]=Rr(c)&&Rr(h)?[]:{},Cn([Cr(s)?s-1:s,a[l],c,h],e,r,n,i);else if(e(l,a,t,o))if(Rr(a)&&Rr(t))n?a[l]=h:a.push(h);else try{i?Object.defineProperty(a,l,Object.getOwnPropertyDescriptor(t,l)):a[l]=t[l]}catch(t){}})}),a}var Pn=function(t,e=[],r=!0){var n=0;return Cr(arguments[0])&&Ar(arguments[1])&&(n=arguments[0],t=arguments[1],e=arguments[2]||[]),Cn([n,{},t],(t,r,n)=>Nr(e)?e(t):!Rr(e)||!e.length||e.indexOf(t)>-1,!1,!1,r)},Tn=function(t,e){var r=document.styleSheets,n=function(e){try{for(var r=0;r<e.cssRules.length;r++){var n=e.cssRules[r];if(!0===t(n))return!0}}catch(t){}};if(e){for(var i=r.length-1;i>=0;i--)if(!0===n(r[i]))return!0}else for(i=0;i<r.length;i++)if(!0===n(r[i]))return!0},$n=function(t,e,r,n="auto"){var i=Rr(e)?e.join("|"):e;if(!r&&Ln[i]&&Ln[i].el===t){var s=Pn(Ln[i]);return delete s.el,s}var a=[];return Tn(r=>{if(r.type===window.CSSRule.STYLE_RULE&&t.matches(r.selectorText)){var i=e;if(!e){i=[];for(var s=0;s<r.style.length;s++)i.push(r.style[s])}a.push(dn(i,t=>r.style[t],n))}}),a.forEach(t=>{}),Ln||(Ln={}),Ln[i]=a.slice(),Ln[i].el=t,a};const Ln={};class Mn{constructor(t,e,r,n){this.el=t,this.params=qr(e),this.readCallback=r,this.writeCallback=n,this.$savepoints=[]}save(){var t=this.readCallback(this.el,this.params);return t instanceof Promise?t.then(t=>this.$savepoints.push(t)):Er(t)?this.$savepoints.push(t):void 0}commit(t=0){for(var e=0;e<=t&&t<this.$savepoints.length;e++)this.$savepoints[e]=null;return this}rollback(t=0){if(!Cr(t))throw new Error("A valid transaction ID transaction must be provided!");var e=e=>{var r=this.$savepoints.splice(t),n=r.shift();if(!n)return{};var i=r.pop(),s={};return this.params.forEach(t=>{i&&e[t]!==i[t]||e[t]!==n[t]&&(s[t]=n[t])}),s},r=this.readCallback(this.el,this.params);return r instanceof Promise?r.then(t=>this.writeCallback(this.el,e(t))):this.writeCallback(this.el,e(r))}depth(){return this.$savepoints.length}}var Nn=function(t,e){return new Mn(t,e,(t,e)=>kn(t,e),(t,e)=>En(t,e))},Wn=function(t){var e=0;return e+=parseInt(vn(t,"border-top-width")),e+=parseInt(vn(t,"border-bottom-width"))},Fn=function(t){var e=0;return e+=parseInt(vn(t,"border-left-width")),e+=parseInt(vn(t,"border-right-width"))},In=function(t){var e=0;return qr(t.children).forEach((t,r)=>{e=Math.max(e,parseInt(vn(t,"z-index"))||0)}),e},Rn=function(t){return t instanceof Number||"number"==typeof t},qn=function(t,e=[]){return Cn([{},t],(t,r,n)=>{if(!Nr(n[t]))return Nr(e)?e(t):!Rr(e)||!e.length||e.indexOf(t)>-1},!1,!1,!1)},Hn=function(t){var e={};return t.split(";").filter(t=>t).forEach(t=>{t=t.split(":"),e[t[0].trim()]=t[1].trim()}),e},_n=function(t,e,r=!0){var n=Rr(t)?t.join("|"):t;if(!e&&Bn[n])return Bn[n];var i=[];return Tn(e=>{if((e.type===xr.window.CSSRule.KEYFRAMES_RULE||e.type===xr.window.CSSRule[pn().api.toUpperCase()+"_KEYFRAMES_RULE"])&&(Rr(t)?t:[t]).indexOf(e.name)>-1)return i=i.concat(i,function(t){for(var e=[],n=0;n<t.cssRules.length;n++){var i=t.cssRules[n],s=Hn(i.cssText.replace(i.keyText,"").replace("{","").replace("}","").trim()),a=(i.keyText||" ").split(",").map(t=>"from"===t?0:"to"===t?1:parseInt(t)/100);if(r)for(Dn(s,["animation-","transition-"]);a.length;){var o=qn(s);o.offset=a.shift(),e.push(o)}else s.offset=a.length>1?a:a[0],e.push(s)}return e.sort((t,e)=>t.offset===e.offset?0:t.offset>e.offset?1:-1)}(e)),!0},!0),Bn[n]=i,i};const Dn=function(t,e,r=""){Rr(r)?r.forEach(e=>Dn(t,e)):(t[r+"timing-function"]&&(t.easing=t[r+"timing-function"],delete t[r+"timing-function"]),t[r+"fill-mode"]&&(t.fill=t[r+"fill-mode"],delete t[r+"fill-mode"]),t[r+"iteration-count"]&&(t.iterations=t[r+"iteration-count"],delete t[r+"iteration-count"],"infinite"===t.iterations&&(t.iterations=1/0)))},Bn={};class Un{constructor(t,e,r={}){this.el=t,this.$={readyCallbacks:[],finishCallbacks:[],cancelCallbacks:[],params:r},r.fill=r.fill||"both","duration"in r||(r.duration=400),r.easing&&-1===["ease-in","ease-out","ease-in-out"].indexOf(r.easing)&&-1===r.easing.indexOf("(")&&(r.easing=function(t){t=t.indexOf("-")?t:un(t,"-");return window.getComputedStyle(document.body).getPropertyValue("--"+t)}(r.easing)||r.easing);var n={inset:["top","right","bottom","left"],margin:["top","right","bottom","left"],padding:["top","right","bottom","left"]};const i=t=>{t=t.slice();var e={},i={};Pr(t,(t,r)=>{Pr(n,(t,e)=>{r[t]&&(Er(r[t])&&(r[t]=e.map(e=>r[t][e]).filter(t=>!Fr(t))),Rr(r[t])&&(r[t]=r[t].join(" ")))}),!r.transform||!Er(r.transform)||r.transform instanceof gn||(r.transform=new gn(r.transform).toString()),Qr(Object.keys(r),"offset","easing").forEach(t=>{wn.includes(t)&&Cr(r[t])&&(r[t]+="px"),e[t]=void 0===e[t]?r[t]:e[t],i[t]=r[t]})});try{var s=this.el.animate(t,r)}catch(t){return void(this.$.error=t)}r.reverse&&s.reverse(),s.effect||(s.effect={}),s.effect.duration||(s.effect.duration=r.duration),s.onfinish=()=>{r.cancelForCss&&(s.cancel(),"forwards"!==r.fill&&"both"!==r.fill||yn(this.el,i)),this.$.finishCallbacks.forEach(t=>{t(this.el)})},s.oncancel=()=>{this.$.cancelCallbacks.forEach(t=>{t(this.el)})},this.$.anim=s,this.$.firstFrame=e,this.$.lastFrame=i,this.$.params=r,this.$.readyCallbacks.length&&this.$.readyCallbacks.forEach(t=>t(s,r,e,i))};Nr(e)?e(t,i):Un.createCallback(t,e,i,t=>{this.$.error=t})}get anim(){return this.$.anim}ready(t,e){this.$.error?e&&e(this.$.error):this.$.anim?t(this.$.anim,this.$.params,this.$.firstFrame,this.$.lastFrame):this.$.readyCallbacks.push(t)}onfinish(t){if(!Nr(t))throw new Error("Onfinish() accepts only a function.");return this.$.finishCallbacks.push(t),this}oncancel(t){if(!Nr(t))throw new Error("Oncancel() accepts only a function.");return this.$.cancelCallbacks.push(t),this}progress(){return this.$.anim?this.$.anim.currentTime/this.$.anim.effect.duration:0}seek(t){if(!Rn(t))throw new Error("Seek() accepts only a numeric value.");return this.ready((e,r)=>{var n=r.duration+(r.delay||0)+(r.endDelay||0);e.currentTime=Math.max(0,Math.min(t*n,n))}),this}reverse(){return this.ready(t=>t.reverse()),this}play(){return new Promise((t,e)=>{this.ready(r=>{r.play(),this.onfinish(()=>t(this)),this.oncancel(()=>e(this))},e)})}pause(){return this.ready(t=>t.pause()),this}finish(){return this.ready(t=>t.finish()),this}cancel(){return this.ready(t=>t.cancel()),this}static createCallback(t,e,r,n){var i=Er(e)&&!Object.values(e).filter(t=>Rr(t)).length,s=Rr(e)&&e.length>1&&Ir(e[0]);if(i||s)Vr.onread(()=>{s?(e.shift(),Un.createCallback(t,[vn(t,Object.keys(e[0])),...e],r,n)):Un.createCallback(t,[vn(t,Object.keys(e)),e],r,n)});else{if(Tr(e)){var a=e;!(e=_n(a)).length&&n&&n('Animation name "'+a+'" not found in any stylesheet!')}if(Rr(e)){var o=[];if(Pr(e,(t,e)=>{"auto"===e.height&&Sn(o,t),"auto"===e.width&&Sn(o,t)}),o.length)return void On(t,{width:"auto",height:"auto"},t=>t.getBoundingClientRect()).then(t=>{o.forEach(r=>{"auto"===e[r].width&&(e[r].width=t.width+"px"),"auto"===e[r].height&&(e[r].height=t.height+"px")}),r(e)})}r(e)}}}function Vn(t,e,r={}){return"cancelForCss"in r||(r.cancelForCss=!0),new Un(t,e,r).play().then(()=>t)}var zn=function(t){return typeof t};const Jn=function(t,e,r=!1){var n=null,i=t;Rr(t)||(n=Object.keys(t),i=Object.values(t));var s=void 0,a=i.reduce((t,n)=>{if(void 0===s){if(e(n,t))return n;if(r&&(Ar(n)||Nr(n))&&void 0!==(s=Jn(n,e,r)))return n}return t},void 0);if(void 0!==a){var o=n?n[i.indexOf(a)]:i.indexOf(a);return void 0!==s?[o].concat(qr(s)):o}};var Kn=Jn,Qn=function(t){return Sr(t)&&/^class\s?/.test(Function.prototype.toString.call(t))};const Gn={},Yn=["tripletap","doubletap","singletap"];Yn.forEach(t=>{Gn[t]=class{setup(t,e,r,n){if(!xr.window.Hammer)throw new Error("The Hammerjs library is needed to use the "+e+" gesture.");this.el=t,this.eventName=e,this.fireCallback=r,this.hammertime=n;var i=!0,s=Yn.map((t,e)=>{var r=this.hammertime.get(t);return r||(i=!1,r=new xr.window.Hammer.Tap({event:t,taps:Yn.length-e}),this.hammertime.add(r)),r});if(!i){for(var a,o=s.slice();(a=o.shift())&&o.length;)a.recognizeWith(o);for(var l,c=s.slice();(l=c.pop())&&c.length;)l.requireFailure(c)}this.hammertime.on(this.eventName,this.fireCallback)}teardown(){this.hammertime.off(this.eventName)}}});var Zn=class extends class{constructor(t,e){this.subject=t,this.handler=e.handler,this.filter=e.filter,this.params=e.params}disconnect(){this.disconnected=!0}}{fire(t){this.filter===t.type&&t.response(this.handler.call(this.subject,t))}},Xn=class{constructor(t,e){this.$={},this.$.target=t,this.$.e=e,this.$.propagationStopped=!1,this.$.defaultPrevented=!1,this.$.promisesInstance=null,this.$.promises=[]}get type(){return this.$.e.type}get target(){return this.$.e.target}get e(){return this.$.e}stopPropagation(){this.$.propagationStopped=!0}get propagationStopped(){return this.$.propagationStopped}preventDefault(){this.$.defaultPrevented=!0}get defaultPrevented(){return this.$.defaultPrevented}promise(t){if(!(t instanceof Promise))throw new Error("Event.promise() must be called with a Promise.");this.$.promises.push(t),this.$.promisesInstance=null}get promises(){return!this.$.promisesInstance&&this.$.promises.length&&(this.$.promisesInstance=Promise.all(this.$.promises)),this.$.promisesInstance}response(t){var e,r=Er(t)&&!Fr(t.propagationStopped)&&!Fr(t.defaultPrevented);!1===t||r&&t.propagationStopped?this.stopPropagation():!1===t||r&&t.defaultPrevented?this.preventDefault():(t instanceof Promise&&(e=t)||r&&(e=t.promises))&&this.promise(e)}};class ti extends class{constructor(t){this.subject=t,this.fireables=[],this.currentlyFiring=[]}add(t){return this.fireables.push(t),t}forget(t){this.filter(t).forEach(t=>{this.fireables=this.fireables.filter(e=>e!==t)})}filter(t){return this.fireables.filter(e=>{var r=qr(e.filter),n=qr((e.params||{}).tags),i=qr(t.filter),s=qr((t.params||{}).tags);return!(t.originalHandler&&e.handler!==t.originalHandler||i.length&&(i.length!==r.length||Yr(r,i).length!==i.length)||s.length&&(s.length!==n.length||Yr(n,s).length!==s.length))})}}{constructor(t){super(t),this.handlersList={},this.hammertime=()=>{if(!this.hmm){if(!xr.window.Hammer)throw new Error("The Hammerjs library is needed to use gestures.");this.hmm,new xr.window.Hammer.Manager(this.subject)}return this.hmm}}_setup(t,e){if(!this.handlersList[t])if(Gn[t])if(Tr(Gn[t]))this.handlersList[t]=e=>this.fire({type:t,e:e}),this.addFireable(new Zn(this.handlersList[t],Gn[t]));else{if(!Qn(Gn[t]))throw new Error('The "'+t+'" event hook must be either a string (alias) or a class!');if(this.handlersList[t]=new Gn[t],!Nr(this.handlersList[t].setup))throw new Error('The "'+t+'" event hook must implement a "setup" method!');this.handlersList[t].setup(this.subject,t,e=>{this.fire({type:t,e:e})},this.hammertime())}else if(ei(t.split("+")[0])){var r=t.split("+").map(t=>{var e=ei(t),r=this.hammertime().get(e);return r||(r=new(Hammer[zr(e)]),this.hammertime().add(r)),r});r.forEach((t,e)=>{t.recognizeWith(r.slice(e+1))}),this.handlersList[t]=e=>this.fire({type:t,e:e}),this.hammertime().on(t.split("+").join(" "),this.handlersList[t])}else this.handlersList[t]=t=>this.fire(t),this.subject.addEventListener(t,this.handlersList[t])}_teardown(t){if(this.handlersList[t]){if(Gn[t]){if(Tr(Gn[t]))removeListener(this.subject,Gn[t],this.handlersList[t]);else if(this.handlersList[t]){if(!Nr(this.handlersList[t].teardown))throw new Error('The "'+t+'" event hook must implement a "teardown" function!');this.handlersList[t].teardown()}}else ei(t.split("+")[0])?this.hammertime().off(t.split("+").join(" "),this.handlersList[t]):this.subject.removeEventListener(t,this.handlersList[t]);delete this.handlersList[t]}}add(t){return this._setup(t.filter,t.params),super.add(new Zn(this.subject,t))}fire(t){return t instanceof Xn||(t=new Xn(this.subject,t)),this.fireables.forEach(e=>{t.propagationStopped||e.fire(t)}),t}}const ei=function(t){return Kn(ri,e=>e.includes(t),!1)},ri={press:["press","pressup"],rotate:["rotate","rotatestart","rotatemove","rotateend","rotatecancel"],pinch:["pinch","pinchstart","pinchmove","pinchend","pinchcancel","pinchin","pinchout"],pan:["pan","panstart","panmove","panend","pancancel","panleft","panright","panup","pandown"],swipe:["swipe","swipeleft","swiperight","swipeup","swipedown"],tap:["tap"]};var ni=function(t,e=!0){return function(t,e,r=null){if(!Ar(t))throw new Error('Object must be of type subject; "'+zn(t)+'" given!');var n;return!(n=t[e])&&r&&(n=new r(t),Object.defineProperty(t,e,{get:()=>n,set:t=>{if(t!==n)throw new Error('Attempt to overwrite the "'+e+'" special property!')},enumerable:!1})),n}(t,".listeners",e?ti:null)},ii=function(t,e,r,n={}){if(!t||!Ar(t))throw new Error('Object must be of type subject; "'+zn(r)+'" given!');if(Nr(e)&&(n=arguments.length>2?r:{},r=e,e=null),!Nr(r))throw new Error('Callback must be a function; "'+zn(r)+'" given!');var i,s={filter:e,handler:r,params:n},a=ni(t);return s.params.unique&&(i=a.filter(s)).length?i[0]:a.add(s)},si=function(t,e,r=null,n={}){if(!t||!Ar(t))throw new Error('Object must be of type subject; "'+zn(t)+'" given!');if(Nr(e)&&(n=arguments.length>2?r:{},r=e,e=null),r&&!Nr(r))throw new Error('Handler must be a function; "'+zn(r)+'" given!');var i;if(i=ni(t,!1))return i.forget({filter:e,originalHandler:r,params:n})},ai=function(t,e,r={}){var n;if(n=ni(t,!1))return n.fire({target:t,type:e,data:r})},oi=function(t,e){t=qr(t,!1);var r=Object.keys(t),n=new ResizeObserver(n=>{for(let e of n)r[t.indexOf(e.target)]={width:e.contentRect.left+e.contentRect.right,height:e.contentRect.top+e.contentRect.bottom};r=r.map((e,r)=>Er(e)?e:qn(rect(t[r]),["width","height"])),e.call(...r)});return t.forEach(t=>{n.observe(t)}),n};function li(t,e,r={}){var n=(t,e)=>r.factory?e instanceof Promise?e.then(e=>e===t.el?t:e):e===t.el?t:e:e;Pr(e,(e,i)=>{"el"===e?t[e]=function(t,...e){return i(t)}:(t.prototype[e]=function(...t){return n(this,i(this.el||xr.window.document.createElement("div"),...t))},(e.endsWith("Sync")||e.endsWith("Async"))&&(r.syncIsDefault&&e.endsWith("Sync")?e=Or(e,"Sync"):!r.syncIsDefault&&e.endsWith("Async")&&(e=Or(e,"Async")),t.prototype[e]=function(...t){return n(this,i(this.el||xr.window.document.createElement("div"),...t))}))})}var ci,hi=function(...t){return Cn(t,(t,e,r)=>!0,!1,!1,!1)};function ui(t={},e=null,r=null){if(t&&hi(xr.params,t),!e||e!==ci){if(ci)throw new Error('"init()" already called with a window!');xr.window=e,ci=e,r&&(xr.trap=r),$r(),Vr._run()}}function pi(t){if(!(this instanceof pi))return new pi(t);this.el=Mr(t)}li(pi,i,{factory:(t,...e)=>new pi(t,...e)}),window.WN||(window.WN={}),window.WebNative||(window.WebNative={}),window.WN.Observer||window.WebNative.Observer?ui({},window,window.WN.Observer||window.WebNative.Observer):ui({},window),window.WN.PlayUI=pi,window.WebNative.PlayUI=pi;var fi=function(t,e,r=null){if(!Ar(t))throw new Error('Object must be of type subject; "'+zn(t)+'" given!');var n;return!(n=t[e])&&r&&(n=new r(t),Object.defineProperty(t,e,{get:()=>n,set:t=>{if(t!==n)throw new Error('Attempt to overwrite the "'+e+'" special property!')},enumerable:!1})),n},di=class{constructor(t){this.subject=t,this.fireables=[],this.currentlyFiring=[]}add(t){return this.fireables.push(t),t}forget(t){this.filter(t).forEach(t=>{this.fireables=this.fireables.filter(e=>e!==t)})}filter(t){return this.fireables.filter(e=>{var r=qr(e.filter),n=qr((e.params||{}).tags),i=qr(t.filter),s=qr((t.params||{}).tags);return!(t.originalHandler&&e.handler!==t.originalHandler||i.length&&(i.length!==r.length||Yr(r,i).length!==i.length)||s.length&&(s.length!==n.length||Yr(n,s).length!==s.length))})}},mi=function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?"":t.substr(n+e.length)},gi=function(t,e,r={},n={}){e=qr(e).slice();for(var i=t;!Fr(i)&&!Wr(i)&&e.length;){var s=e.shift();if(!(r.get?r.get(i,s):Ar(i)?s in i:i[s]))return void(n.exists=!1);i=r.get?r.get(i,s):i[s]}return n.exists=!0,i},vi=function(t,e,r=null,n={}){if(!t||!Ar(t))throw new Error('Object must be of type subject; "'+zn(t)+'" given!');if(Nr(e)&&(n=arguments.length>2?r:{},r=e,e=null),r&&!Nr(r))throw new Error('Handler must be a function; "'+zn(r)+'" given!');var i;if(i=Wi(t,!1))return i.forget({filter:e,originalHandler:r,params:n})},wi=class{constructor(t,e){this.subject=t,this.handler=e.handler,this.filter=e.filter,this.params=e.params}disconnect(){this.disconnected=!0}},yi=class extends wi{fire(t,e,r){return this.disconnected||this.filter&&this.filter!==t.type?e(...Array.prototype.slice.call(arguments,2)):this.handler(t,r,e)}},bi=class{constructor(t,e){if(this.subject=t,!e.type)throw new Error("Action type must be given in definition!");Pr(e,(t,e)=>{Object.defineProperty(this,t,{value:e,enumerable:!0})}),Object.seal(this)}},ji=class extends di{add(t){return super.add(new yi(this.subject,t))}fire(t,e=null){if(t instanceof bi||(t=new bi(this.subject,t)),this.currentlyFiring.filter(e=>e.type===t.type&&e.name===t.name).length)return e?e():void 0;this.currentlyFiring.push(t);const r=(n,...i)=>{var s=this.fireables[n];return s?s.fire(t,(...t)=>r(n+1,...t),...i):e?e(...i):i[0]};var n=r(0);return this.currentlyFiring.pop(),n}},Ei=function(t,e=!0){return fi(t,".interceptors",e?ji:null)},xi=function(t,e){if(!e||!Ar(e))throw new Error("Target must be of type object!");var r,n=function(r){return arguments.length?r:t?Object.getOwnPropertyNames(e):Object.keys(e)};return(r=Ei(e,!1))?r.fire({type:t?"ownKeys":"keys"},n):n()},ki=function(t){return xi(!1,...arguments)};function Oi(t,e=null,r=!1){if(!t||!Ar(t))throw new Error("Target must be of type object!");var n=Wi(t);if(!n.build){n.build=!0;var i=!(e=qr(e)).length||e.filter(t=>t.startsWith(".")).length?ki(t).filter(t=>-1===t.indexOf(".")):e.map(t=>kr(t,".")),s=e.length?e.map(t=>mi(t,".")):null;i.forEach(e=>{var n=Li(t,e);Ar(n)&&(Ci(t,e,n),(s||r)&&Oi(n,s,r))})}}var Si=function(t,e,r=null,n={}){if(!t||!Ar(t))throw new Error('Object must be of type subject; "'+zn(r)+'" given!');if(Nr(e)&&(n=arguments.length>2?r:{},r=e,e=null),!Nr(r))throw new Error('Callback must be a function; "'+zn(r)+'" given!');var i={filter:e,handler:r,params:n};(i.filter||i.params.subtree)&&Oi(t,i.filter,i.params.subtree);var s,a=Wi(t);return i.params.unique&&(s=a.filter({filter:e,params:n})).length?s[0]:a.add(i)},Ai=class{constructor(t,e){if(this.subject=t,e.originalSubject||(this.originalSubject=t),!("type"in e))throw new Error("Delta type must be given in definition!");if(!("name"in e))throw new Error("Property name must be given in definition!");Pr(e,(t,e)=>{Object.defineProperty(this,t,{value:e,enumerable:!0})}),this.path||Object.defineProperty(this,"path",{value:e.name,enumerable:!0}),Object.seal(this)}},Ci=function(t,e,r){var n;Si(r,r=>{if(n=Wi(t,!1)){var i=r.map(r=>{var n={};return Pr(r,(t,e)=>{"subject"!==t&&"name"!==t&&"path"!==t&&(n[t]=e)}),n.name=e,n.path=e+"."+r.path,n.originalSubject=r.originalSubject,new Ai(t,n)});return n.fire(i)}},{subtree:!0,unique:!0,tags:[Pi,e,t]})};const Pi={};var Ti=function(t,e,r){vi(r,null,null,{tags:[Pi,e,t]})},$i=function(t,...e){var r=e.map(t=>{if(!Ar(t))throw new Error("Target must be of type object!");return{subject:t,subjectCopy:Rr(t)?t.slice(0):Pn(t)}}),n=t(...e);return r.map(t=>{var e,r=Object.keys(t.subjectCopy),n=Object.keys(t.subject),i=[],s=Gr(r.concat(n)).map(e=>{if((!Rr(t.subject)||"length"!==e&&".observer"!==e)&&t.subjectCopy[e]!==t.subject[e]){i.push(e);var s={name:e,related:i,buffered:!0};return n.includes(e)?(s.type="set",s.value=t.subject[e],r.includes(e)&&(s.isUpdate=!0)):s.type="del",r.includes(e)&&(s.oldValue=t.subjectCopy[e]),Ar(t.subjectCopy[e])&&Ti(t.subject,e,t.subjectCopy[e]),Ar(t.subject[e])&&Ci(t.subject,e,t.subject[e]),s}}).filter(t=>t);if(s.length&&(e=Wi(t.subject,!1)))return e.fire(s)}),n},Li=function(t,e,r=!1){if(!t||!Ar(t))throw new Error("Target must be of type object!");var n,i,s=function(r){return arguments.length?r:Rr(e)?Dr(e,t):t[e]};return n=(i=Ei(t))?i.fire({type:"get",name:e},s):s(),r&&Rr(t)&&!Cr(e)&&Nr(n)&&!Qn(n)?function(...e){return $i(()=>n.apply(t,e),t)}:n},Mi=class extends wi{constructor(t,e){if(super(t,e),this.filterArray=qr(this.filter),this.isDynamicFilter=this.filterArray.filter(t=>Tr(t)&&(t.indexOf("..")>-1||t.startsWith(".")||t.endsWith("."))).length,this.isDynamicFilter&&this.filterArray.length>1)throw new Error('Only one "Dynamic Filter" must be observed at a time! "'+this.filterArray.join(", ")+'" have been bound together.')}fire(t){var e,r;if(!(this.disconnected||this.params.type&&(e=t,r=t=>this.params.type===t.type,!e.reduce((t,e)=>t||r(e),!1))))if(this.filterArray.length){var n=[];this.filterArray.filter((e,r)=>(e=Tr(e)?e.replace(/`/g,""):e,n[r]=[],t.filter(t=>{var i=t.path.split("."),s=this.isDynamicFilter?e.split(".").map((t,e)=>t||i[e]||"").join("."):e;return Sn(n[r],s),(s===t.name||!1!==this.params.suptree&&(s+".").startsWith(t.path+".")||this.params.subtree&&(t.path+".").startsWith(s+"."))&&(!this.isDynamicFilter||!s.split(".").filter(t=>!t).length)}).length)).length&&function(t){return t.reduce((t,e)=>{var r=[];return t.forEach(t=>{qr(e).forEach(e=>{var n=t.slice();n.push(e),r.push(n)})}),r},[[]])}(n).forEach(e=>{var r=this.formatChanges(e,t);this.handler(Rr(this.filter)?r:r[0])})}else this.filter||!this.params.subtree&&t.filter(t=>t.path===t.name).length!==t.length||this.handler(t)}formatChanges(t,e){return!1===this.params.data?[]:t.map(t=>{var r=e.reduce((e,r)=>{if(e)return e;if(t+""==r.path+"")return r;if((t+".").startsWith(r.path+".")){var n=Tr(t)?mi(t,r.path+".").split("."):t;e=new Ai(r.subject,{type:r.type,name:t});return("del"===r.type||r.isUpdate)&&(e.oldValue=gi(r.oldValue,n,{get:Li})),"del"!==r.type&&(e.value=gi(r.value,n,{get:Li})),e}},null);return r||(r=new Ai(this.subject,{type:"get",name:t,value:gi(this.subject,Tr(t)?t.split("."):t,{get:Li})})),r})}},Ni=class extends di{add(t){return super.add(new Mi(this.subject,t))}fire(t){return t=qr(t,!1).map(t=>t instanceof Ai?t:new Ai(this.subject,t)),!this.currentlyFiring.filter(e=>t.filter(t=>e.type===t.type&&e.name===t.name).length).length&&(this.currentlyFiring.push(...t),this.fireables.forEach(e=>{if(t.propagationStopped)return!1;e.fire(t)}),t.forEach(t=>Kr(this.currentlyFiring,t)),!0)}},Wi=function(t,e=!0){return fi(t,".observers",e?Ni:null)},Fi=function(t,e){if(!t||!Ar(t))throw new Error("Target must be of type object!");var r,n=function(r){return arguments.length?r:e in t};return(r=Ei(t,!1))?r.fire({type:"has",name:e},n):n()},Ii=function(t,e,r,n=null,i=null){if(!e||!Ar(e))throw new Error("Target must be of type object!");Er(r)&&(i=n,n=null);var s=Ei(e,!1),a=Wi(e,!1);const o=(r,n,i,o)=>{if(Tr(r)&&-1!==r.indexOf("."))throw new Error("Property names with a dot are not supported!");var l,c="set";t&&(c="def",n=(l=n||{}).value);var h={name:r,type:c,value:n,related:i,detail:o};Fi(e,r)&&(h.isUpdate=!0,h.oldValue=Li(e,r));var u=function(t){return arguments.length?t:(l?Object.defineProperty(e,r,l):e[r]=n,!0)};if(s){var p=l?{type:"def",name:r,descriptor:l,related:i,detail:o}:{type:"set",name:r,value:n,related:i,detail:o};h.success=s.fire(p,u)}else h.success=u();return h.success&&h.value!==h.oldValue&&(Ar(h.oldValue)&&Ti(e,r,h.oldValue),Ar(h.value)&&(Ci(e,r,h.value),a&&a.build&&Oi(h.value,null,!0))),h};var l,c=[];Rr(r)||(Tr(r)||Rn(r))&&(l=qr(r))?c=l.map(t=>o(t,n,l,i)):Er(r)&&(l=Object.keys(r))&&(c=l.map(t=>o(t,r[t],l,i)));var h=c.filter(t=>t.success);return a&&a.fire(h),h.length>0},Ri=function(t,e,r=null,n=null){return Ii(!1,...arguments)};var qi=Ri;class Hi{constructor(t,e={}){if(this.paymentPointer=t,this.params=e,this.assertSupport(this.getTag()&&this.params.prompt)){var r=window.document.monetization;qi(this,"state",r.state),r.addEventListener("monetizationpending",t=>{qi(this,{state:"pending"},t.detail)}),r.addEventListener("monetizationstart",t=>{i=0,qi(this,{state:"started"},t.detail)}),r.addEventListener("monetizationstop",t=>{qi(this,{state:"stopped"},t.detail)});var n,i=0,s=0;r.addEventListener("monetizationprogress",t=>{0===s&&(n=t.detail.assetScale);var e=Number(t.detail.amount);s+=e,qi(this,{progress:{currentTotal:{amount:i+=e,value:(i*Math.pow(10,-n)).toFixed(n)},sessionTotal:{amount:s,value:(s*Math.pow(10,-n)).toFixed(n)}},currency:n},t.detail)})}}start(){var t;this.getTag(this.paymentPointer)||((t=this.getTag())&&t.remove(),(t=window.document.createElement("meta")).setAttribute("name","monetization"),t.setAttribute("content",this.paymentPointer),window.document.querySelector("head").appendChild(t));return this.assertSupport(this.params.prompt),this}stop(){return(monetizationMeta=this.getTag())&&monetizationMeta.remove(),this}getTag(t=null){return window.document.querySelector('meta[name="monetization"]'+(t?'[content="'+t+'"]':""))}assertSupport(t){if(!window.document.monetization){if(t){var e,r=function(){if(!xr.window)return"";if(void 0!==xr.window.InstallTrigger)return"firefox";if(/constructor/i.test(xr.window.HTMLElement)||"[object SafariRemoteNotification]"===(!xr.window.safari||void 0!==xr.window.safari&&xr.window.safari.pushNotification).toString())return"safari";var t=!(!xr.window.chrome||!xr.window.chrome.webstore&&!xr.window.chrome.runtime),e=t&&-1!=xr.window.navigator.userAgent.indexOf("Edg"),r=!!xr.window.opr&&!!xr.window.opr.addons||!!xr.window.opera||xr.window.navigator.userAgent.indexOf(" OPR/")>=0,n=!!xr.window.document.documentMode,i=!n&&!!xr.window.StyleMedia;return(t||r)&&xr.window.CSS,i?"edge":n?"ie":r?"opera":e?"ie-chromium":t?"chrome":"unknown"}();r.startsWith("ie")?e="https://microsoftedge.microsoft.com/addons/detail/ljionajlbinlfkdnpkloejeoogfgkojm":"firefox"===r?e="https://addons.mozilla.org/en-US/firefox/addon/coil/":"chrome"!==r&&"brave"!==r||(e="https://chrome.google.com/webstore/detail/coil/locbifcbeldmnphbgkdigjmkbfkhbnca"),e?window.confirm("This version of "+r+" does not support the Web Monetization API! \r\nWould you like to add the Web Monetization extension?")&&window.open(e,"_blank"):window.alert("Your browser does not support the Web WebMonetization API.")}return!1}return!0}static init(t,e={}){return Hi.instances[t]||(Hi.instances[t]=new Hi(t,e)),Hi.instances[t]}}Hi.instances={};var _i={engr:[{label:"CHTML",desc:"A suite of short specifications and technologies that bring a component architecture to the HTML language itself.",tags:["#ScopedHTML","#ScopedCSS","#ScopedJS","#HTMLPartials"],link1:["https://docs.web-native.dev/chtml/","DOCS"],link2:["https://github.com/web-native/chtml","GitHub"]},{label:"Observer",desc:'A general-purpose observability API for JavaScript. (JavaScript\'s new <code style="background-color:whitesmoke">Object.observe()</doce>.)',tags:["#ObserverActions"],link1:["https://docs.web-native.dev/observer/","DOCS"],link2:["https://github.com/web-native/observer","GitHub"]},{label:"JSEN",desc:"A general-purpose library for parsing JavaScript expressions that execute in user-defined scopes. (JavaScript's micro runtime.)",tags:["#scopedJS"],link1:["https://docs.web-native.dev/jsen/","DOCS"],link2:["https://github.com/web-native/jsen","GitHub"]},{label:"RQL",desc:"A graphical Structured Query Language.",link1:["https://docs.web-native.dev/rql/","DOCS"],link2:["https://github.com/web-native/rql","GitHub"]}],evan:[{},{},{},{meta:{type:"article"},label:"I’m joining web-native!",desc:"Hey, Awesome! I am pleased to announce that I am joining Web-native as a Front-end Engineer and Developer Relations!🎉",link2:["https://medium.com/@raymondosy1/im-joining-web-native-c98b2cdc5540","Read article"],authors:[{name:"Raymond Akalonu",avatar:"https://miro.medium.com/fit/c/48/48/0*dx5wDBZDIOiMILkr.",link:"https://miro.medium.com/@raymondosy1"}]}]},Di=class{constructor(t=[],e={}){this.$={animations:[],finishCallbacks:[],cancelCallbacks:[],params:e},t.forEach(t=>{this.add(t)})}add(t){if(!(t instanceof Un))throw new Error("Argument#1 must be an Ani instance!");switch(this.$.animations.push(t),this.$.addCallback&&this.$.addCallback(t),this.$.playState){case"paused":t.pause();break;case"cancelled":t.cancel();break;case"finished":t.finish()}return this.$.reversed&&t.reverse(),this}remove(t){if(!(t instanceof Un))throw new Error("Argument#1 must be an Ani instance!");return Kr(this.$.animations,t),this.$.removeCallback&&this.$.removeCallback(t),this}onfinish(t){if(!Nr(t))throw new Error("Onfinish() accepts only a function.");return this.$.finishCallbacks.push(t),this}oncancel(t){if(!Nr(t))throw new Error("Oncancel() accepts only a function.");return this.$.cancelCallbacks.push(t),this}progress(){return this.$.animations.reduce((t,e)=>t.progress()+e.progress(),0)/this.$.animations.length}play(){return this.$.playState="playing",new Promise((t,e)=>{var r,n,i=()=>{r||(r=!0,this.$.finishCallbacks.forEach(t=>t()),t())},s=()=>{n||(n=!0,this.$.cancelCallbacks.forEach(t=>t()),e())},a=this.$.animations.length;this.$.animations.forEach(t=>{t.play().then(()=>{!--a>0&&i()}).catch(s)}),this.$.addCallback=t=>{"playing"===this.$.playState&&(a++,t.play().then(()=>{!--a>0&&i()}).catch(s))},this.$.removeCallback=t=>{a--}})}seek(t,e=[]){this.each(e=>e.seek(t),e)}reverse(t=[]){this.$.reversed=!this.$.reversed,this.each(t=>t.reverse(),t)}pause(t=[]){this.$.playState="paused",this.each(t=>t.pause(),t)}finish(t=[]){this.$.playState="finished",this.each(t=>t.finish(),t)}cancel(t=[]){this.$.playState="cancelled",this.each(t=>t.cancel(),t)}clear(t=[]){this.$.animations=this.$.animations.filter(e=>{if(!t||!qr(t,!1).includes(e.el))return!1})}each(t,e=[]){this.$.animations.forEach(r=>{e&&qr(e,!1).includes(r.el)||t(r)})}},Bi=function(t,e=1){var r=0;t.forEach(t=>{r++});var n=t.slice(t.length-r,e);return arguments.length>1?n:n[0]},Ui=class{constructor(t=[],e={}){this.$={},this.$.entries=[],this.$.params=e,this.nowPlaying=new Di,t.forEach(t=>{this.add(t,e.timing)}),this.queue=[]}add(t,e={},r={},n=null,i=null){if(!this.$.entries.filter(e=>e.el===t).length){var s={el:t,effect:e,params:r,onfinish:n,oncancel:i};this.$.entries.push(s),this.nowPlayingAdd(s)}}remove(t){this.$.entries=this.$.entries.filter(e=>e.el!==t)}nowPlayingAdd(t){if(this.nowPlayingEffect){var e=(t,e,r,n)=>{var i=new Un(e.el,r,n);t.add(i),n.oneoff&&i.onfinish(()=>{t.remove(i),this.remove(e.el)}),e.onfinish&&i.onfinish(e.onfinish),e.oncancel&&i.oncancel(e.oncancel)},r=(t,n)=>{var i=n[0],s=Ir(i.effect)?this.nowPlayingEffect:i.effect,a=hi({},this.nowPlayingParams,i.params);if(a.delay=a.delay||0,Rn(a.lag)||Rn(a.endLag)){var o=function(t,e=1){return arguments.length>1?Bi(t.slice().reverse(),e).reverse():Bi(t.slice().reverse())}(t.$.animations);if(o)return void o.ready((o,l)=>{Rn(a.lag)?a.delay+=l.delay+a.lag:a.delay+=l.delay+parseFloat(l.endDelay)+l.duration+a.endLag,a.delay-=Rn(o.currentTime)?o.currentTime:0,e(t,i,s,a),n.shift(),n.length&&r(t,n)})}e(t,i,s,a),n.shift(),n.length&&r(t,n)};this.queue.push(t),1===this.queue.length&&r(this.nowPlaying,this.queue)}}play(t={},e={}){return this.nowPlayingEffect&&(this.nowPlaying=new Di,this.queue=[]),this.nowPlayingEffect=t,this.nowPlayingParams=e,(e.reverseList?this.$.entries.slice().reverse():this.$.entries).forEach(t=>{e.except&&qr(e.except,!1).includes(t.el)||e.only&&!qr(e.only,!1).includes(t.el)||this.nowPlayingAdd(t)}),this.nowPlaying.play()}};window.customElements.define("playui-ul",class extends window.HTMLUListElement{constructor(){super();var t=new Ui,e=new Ui,r={lag:150,oneoff:!0,duration:300};t.play([{opacity:0,transform:{translate:["0","100"]}},{opacity:1,transform:{translate:["0","0"]}}],r),e.play([{opacity:0,transform:{translate:["0","-100"]}},{opacity:1,transform:{translate:["0","0"]}}],r),this.intersectionObserver=new window.IntersectionObserver(r=>{r.forEach(r=>{r.isIntersecting&&(r.boundingClientRect.top<0?e.add(r.target):t.add(r.target))})},{rootMargin:"50px"})}sequenceAdd(t){this.intersectionObserver.observe(t)}},{extends:"ul"}),window.customElements.define("playui-li",class extends window.HTMLLIElement{connectedCallback(){this.parentNode.sequenceAdd&&this.parentNode.sequenceAdd(this)}},{extends:"li"});var Vi;const zi={"/about":async function(t,e,r){return{title:"About Web-Native------",main:{fffjfjfj:"Finally, a Web-Native UI Framework!"}}}};zi["/"]=async function(t,e,r){var n;return n=r.path?await r():{title:"Web-Native Home :: Web-Native",main:_i},Er(n)?await async function(t,e){if(!Vi)return Vi=!0,{location:t.url,route:e,$:window.WebNative.PlayUI,monetization:Hi.init("$ilp.uphold.com/g7MhU9HPWgzy",{prompt:!0}),console:console};return{location:t.url,route:e}}(t,n):n};const Ji=new class{constructor(t){Qe.set(this,"location",new yr(window.document.location,t.pathnamingScheme)),window.addEventListener("popstate",t=>{window.setTimeout(()=>{Qe.set(this.location,yr.copy(window.document.location),{src:window.document.location})},0)}),window.addEventListener("click",t=>{var e,r;if((e=t.target.closest("a"))&&(r=e.href)&&(!e.origin||e.origin===this.location.origin)&&!e.getAttribute("target")){t.preventDefault();var n=Qe.set(this.location,"href",r,{src:e});n&&n.defaultPrevented}}),this.history=window.history,Qe.observe(this.location,"href",t=>{t.value===window.document.location.href?this.history.replaceState(this.history.state,"",t.value):this.history.pushState(this.history.state,"",t.value)});const e=new jr(t.routes),r=async r=>{var n,i=await e.route(r);return await(n=e=>{new Promise(t=>{"complete"===document.templatesReadyState?t():document.addEventListener("templatesreadystatechange",t)}).then(async()=>{document.body.setAttribute("template",(t.templateRoutePath||"app")+r.url.pathname),document.bind(i,{update:!0}),e(i)})},new Promise(n))};Qe.observe(this.location,"href",async t=>{await r({url:this.location,headers:t.detail||{}})}),t.isomorphic||r({url:this.location,headers:{}})}go(t,e={},r=null){return Qe.set(this.location,"href",t,{request:e,src:r})}}({routes:zi,templateRoutePath:"app/route",isomorphic:!0})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,