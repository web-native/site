!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e),r.d(e,"app",(function(){return $a}));var n={};r.r(n),r.d(n,"mergePartials",(function(){return Xr})),r.d(n,"mergeAttributes",(function(){return tn}));var i={};r.r(i),r.d(i,"INIT",(function(){return pa})),r.d(i,"_extend",(function(){return fa})),r.d(i,"el",(function(){return Vi})),r.d(i,"itemize",(function(){return Ui})),r.d(i,"select",(function(){return Bi})),r.d(i,"selectAll",(function(){return Ji})),r.d(i,"data",(function(){return Gi})),r.d(i,"cssSync",(function(){return Ps})),r.d(i,"classSync",(function(){return os})),r.d(i,"attrSync",(function(){return is})),r.d(i,"htmlSync",(function(){return ls})),r.d(i,"textSync",(function(){return us})),r.d(i,"appendSync",(function(){return ps})),r.d(i,"prependSync",(function(){return ds})),r.d(i,"cssInline",(function(){return Ns})),r.d(i,"cssStylesheet",(function(){return Ls})),r.d(i,"cssAsync",(function(){return $s})),r.d(i,"classAsync",(function(){return as})),r.d(i,"attrAsync",(function(){return ss})),r.d(i,"htmlAsync",(function(){return cs})),r.d(i,"textAsync",(function(){return hs})),r.d(i,"appendAsync",(function(){return fs})),r.d(i,"prependAsync",(function(){return ms})),r.d(i,"cssRendering",(function(){return Ms})),r.d(i,"cssTransaction",(function(){return Rs})),r.d(i,"xBorders",(function(){return Ds})),r.d(i,"yBorders",(function(){return Hs})),r.d(i,"zHeight",(function(){return _s})),r.d(i,"onmutated",(function(){return vs})),r.d(i,"onconnected",(function(){return gs})),r.d(i,"ondisconnected",(function(){return bs})),r.d(i,"onattrchange",(function(){return ys})),r.d(i,"onresize",(function(){return ua})),r.d(i,"play",(function(){return Qs})),r.d(i,"on",(function(){return oa})),r.d(i,"off",(function(){return la})),r.d(i,"trigger",(function(){return ca}));var s={};r.r(s),r.d(s,"WebMonetization",(function(){return xa}));var a=function(t){return Array.isArray(t)},o=function(t){return t instanceof String||"string"==typeof t&&null!==t},l=function(t){return arguments.length&&(void 0===t||void 0===t)},c=function(t){return null===t||""===t},u=function(t){return"function"==typeof t},h=function(t){return Array.isArray(t)||"object"==typeof t&&t||u(t)},p=function(t){return!Array.isArray(t)&&"object"==typeof t&&t},f=function(t,e=!0){return a(t)?t:!e&&p(t)?[t]:!1!==t&&0!==t&&function(t){return c(t)||l(t)||!1===t||0===t||h(t)&&!Object.keys(t).length}(t)?[]:function(t){return!o(t)&&!l(t.length)}(t)?Array.prototype.slice.call(t):p(t)?Object.values(t):[t]},d=function(t){return u(t)||t&&"[object function]"==={}.toString.call(t)},m=function(t){return typeof t},v=function(t,e,r=null){if(!h(t))throw new Error('Object must be of type subject; "'+m(t)+'" given!');var n;return!(n=t[e])&&r&&(n=new r(t),Object.defineProperty(t,e,{get:()=>n,set:t=>{if(t!==n)throw new Error('Attempt to overwrite the "'+e+'" special property!')},enumerable:!1})),n},g=function(t,e,r=null){return a(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1!==e.indexOf(t)):[]},b=class{constructor(t){this.subject=t,this.fireables=[],this.currentlyFiring=[]}add(t){return this.fireables.push(t),t}forget(t){this.filter(t).forEach(t=>{this.fireables=this.fireables.filter(e=>e!==t)})}filter(t){return this.fireables.filter(e=>{var r=f(e.filter),n=f((e.params||{}).tags),i=f(t.filter),s=f((t.params||{}).tags);return!(t.originalHandler&&e.handler!==t.originalHandler||i.length&&(i.length!==r.length||g(r,i).length!==i.length)||s.length&&(s.length!==n.length||g(n,s).length!==s.length))})}},y=function(t,...e){return e.forEach(e=>{t.indexOf(e)<0&&t.push(e)}),t},w=function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?"":t.substr(n+e.length)},j=function(t,e,r={},n={}){e=f(e).slice();for(var i=t;!l(i)&&!c(i)&&e.length;){var s=e.shift();if(!(r.get?r.get(i,s):h(i)?s in i:i[s]))return void(n.exists=!1);i=r.get?r.get(i,s):i[s]}return n.exists=!0,i},E=function(t,e=null){var r={};return 2===arguments.length&&(a(t)&&a(e)?t.forEach((t,n)=>r[t]=e[n]):r[t]=e),r},O=function(t){return!0!==t&&!1!==t&&null!==t&&""!==t&&!isNaN(1*t)},x=function(t){return u(t)&&/^class\s?/.test(Function.prototype.toString.call(t))},k=function(t,e){var r=[];return function(t,e){e=(e=e||Object.prototype)&&!a(e)?[e]:e;var r=[];for(t=t;t&&(!e||e.indexOf(t)<0)&&"default"!==t.name;)r.push(t),t=t?Object.getPrototypeOf(t):null;return r}(t,e).forEach(t=>{y(r,...Object.getOwnPropertyNames(t))}),r};function S(t,e,r=!1,n=!1,i=!0){var s=0,o=t.shift();if((O(o)||!0===o||!1===o)&&(s=o,o=t.shift()),!t.length)throw new Error("_merge() requires two or more array/objects.");return t.forEach((t,l)=>{(h(t)||d(t))&&(r?k(t):Object.getOwnPropertyNames(t)).forEach(c=>{var u=o[c],h=t[c];if((a(u)&&a(h)||p(u)&&p(h))&&(!0===s||s>0))o[c]=a(u)&&a(h)?[]:{},S([O(s)?s-1:s,o[c],u,h],e,r,n,i);else if(e(c,o,t,l))if(a(o)&&a(t))n?o[c]=h:o.push(h);else try{i?Object.defineProperty(o,c,Object.getOwnPropertyDescriptor(t,c)):o[c]=t[c]}catch(t){}})}),o}var A=function(t,e=[],r=!0){var n=0;return O(arguments[0])&&h(arguments[1])&&(n=arguments[0],t=arguments[1],e=arguments[2]||[]),S([n,{},t],(t,r,n)=>d(e)?e(t):!a(e)||!e.length||e.indexOf(t)>-1,!1,!1,r)},P=function(t,e,r=null,n={}){if(!t||!h(t))throw new Error('Object must be of type subject; "'+m(t)+'" given!');if(d(e)&&(n=arguments.length>2?r:{},r=e,e=null),r&&!d(r))throw new Error('Handler must be a function; "'+m(r)+'" given!');var i;if(i=K(t,!1))return i.forget({filter:e,originalHandler:r,params:n})},C=function(t,e){var r=void 0;return h(t)&&Object.keys(t).forEach((n,i)=>{!1!==r&&(r=e(O(n)?parseFloat(n):n,t[n],i))}),r},T=class{constructor(t,e){this.subject=t,this.handler=e.handler,this.filter=e.filter,this.params=e.params}disconnect(){this.disconnected=!0}},$=class extends T{fire(t,e,r){return this.disconnected||this.filter&&this.filter!==t.type?e(...Array.prototype.slice.call(arguments,2)):this.handler(t,r,e)}},N=class{constructor(t,e){if(this.subject=t,!e.type)throw new Error("Action type must be given in definition!");C(e,(t,e)=>{Object.defineProperty(this,t,{value:e,enumerable:!0})}),Object.seal(this)}},M=class extends b{add(t){return super.add(new $(this.subject,t))}fire(t,e=null){if(t instanceof N||(t=new N(this.subject,t)),this.currentlyFiring.filter(e=>e.type===t.type&&e.name===t.name).length)return e?e():void 0;this.currentlyFiring.push(t);const r=(n,...i)=>{var s=this.fireables[n];return s?s.fire(t,(...t)=>r(n+1,...t),...i):e?e(...i):i[0]};var n=r(0);return this.currentlyFiring.pop(),n}},I=function(t,e=!0){return v(t,".interceptors",e?M:null)},L=function(t,e){if(!e||!h(e))throw new Error("Target must be of type object!");var r,n=function(r){return arguments.length?r:t?Object.getOwnPropertyNames(e):Object.keys(e)};return(r=I(e,!1))?r.fire({type:t?"ownKeys":"keys"},n):n()},F=function(t){return L(!1,...arguments)};function W(t,e=null,r=!1){if(!t||!h(t))throw new Error("Target must be of type object!");var n=K(t);if(!n.build){n.build=!0;var i=!(e=f(e)).length||e.filter(t=>t.startsWith(".")).length?F(t).filter(t=>-1===t.indexOf(".")):e.map(t=>function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?t:t.substr(0,n)}(t,".")),s=e.length?e.map(t=>w(t,".")):null;i.forEach(e=>{var n=V(t,e);h(n)&&(H(t,e,n),(s||r)&&W(n,s,r))})}}var R=function(t,e,r=null,n={}){if(!t||!h(t))throw new Error('Object must be of type subject; "'+m(r)+'" given!');if(d(e)&&(n=arguments.length>2?r:{},r=e,e=null),!d(r))throw new Error('Callback must be a function; "'+m(r)+'" given!');var i={filter:e,handler:r,params:n};(i.filter||i.params.subtree)&&W(t,i.filter,i.params.subtree);var s,a=K(t);return i.params.unique&&(s=a.filter({filter:e,params:n})).length?s[0]:a.add(i)},D=class{constructor(t,e){if(this.subject=t,e.originalSubject||(this.originalSubject=t),!("type"in e))throw new Error("Delta type must be given in definition!");if(!("name"in e))throw new Error("Property name must be given in definition!");C(e,(t,e)=>{Object.defineProperty(this,t,{value:e,enumerable:!0})}),this.path||Object.defineProperty(this,"path",{value:e.name,enumerable:!0}),Object.seal(this)}},H=function(t,e,r){var n;R(r,r=>{if(n=K(t,!1)){var i=r.map(r=>{var n={};return C(r,(t,e)=>{"subject"!==t&&"name"!==t&&"path"!==t&&(n[t]=e)}),n.name=e,n.path=e+"."+r.path,n.originalSubject=r.originalSubject,new D(t,n)});return n.fire(i)}},{subtree:!0,unique:!0,tags:[_,e,t]})};const _={};var q=function(t,e,r){P(r,null,null,{tags:[_,e,t]})},B=function(t,...e){var r=e.map(t=>{if(!h(t))throw new Error("Target must be of type object!");return{subject:t,subjectCopy:a(t)?t.slice(0):A(t)}}),n=t(...e);return r.map(t=>{var e,r,n=Object.keys(t.subjectCopy),i=Object.keys(t.subject),s=[],o=(e=n.concat(i),e.filter((t,e,r)=>r.indexOf(t)===e)).map(e=>{if((!a(t.subject)||"length"!==e&&".observer"!==e)&&t.subjectCopy[e]!==t.subject[e]){s.push(e);var r={name:e,related:s,buffered:!0};return i.includes(e)?(r.type="set",r.value=t.subject[e],n.includes(e)&&(r.isUpdate=!0)):r.type="del",n.includes(e)&&(r.oldValue=t.subjectCopy[e]),h(t.subjectCopy[e])&&q(t.subject,e,t.subjectCopy[e]),h(t.subject[e])&&H(t.subject,e,t.subject[e]),r}}).filter(t=>t);if(o.length&&(r=K(t.subject,!1)))return r.fire(o)}),n},V=function(t,e,r=!1){if(!t||!h(t))throw new Error("Target must be of type object!");var n,i,s=function(r){return arguments.length?r:a(e)?E(e,t):t[e]};return n=(i=I(t))?i.fire({type:"get",name:e},s):s(),r&&a(t)&&!O(e)&&d(n)&&!x(n)?function(...e){return B(()=>n.apply(t,e),t)}:n},z=class extends T{constructor(t,e){if(super(t,e),this.filterArray=f(this.filter),this.isDynamicFilter=this.filterArray.filter(t=>o(t)&&(t.indexOf("..")>-1||t.startsWith(".")||t.endsWith("."))).length,this.isDynamicFilter&&this.filterArray.length>1)throw new Error('Only one "Dynamic Filter" must be observed at a time! "'+this.filterArray.join(", ")+'" have been bound together.')}fire(t){var e,r;if(!(this.disconnected||this.params.type&&(e=t,r=t=>this.params.type===t.type,!e.reduce((t,e)=>t||r(e),!1))))if(this.filterArray.length){var n=[];this.filterArray.filter((e,r)=>(e=o(e)?e.replace(/`/g,""):e,n[r]=[],t.filter(t=>{var i=t.path.split("."),s=this.isDynamicFilter?e.split(".").map((t,e)=>t||i[e]||"").join("."):e;return y(n[r],s),(s===t.name||!1!==this.params.suptree&&(s+".").startsWith(t.path+".")||this.params.subtree&&(t.path+".").startsWith(s+"."))&&(!this.isDynamicFilter||!s.split(".").filter(t=>!t).length)}).length)).length&&function(t){return t.reduce((t,e)=>{var r=[];return t.forEach(t=>{f(e).forEach(e=>{var n=t.slice();n.push(e),r.push(n)})}),r},[[]])}(n).forEach(e=>{var r=this.formatChanges(e,t);this.handler(a(this.filter)?r:r[0])})}else this.filter||!this.params.subtree&&t.filter(t=>t.path===t.name).length!==t.length||this.handler(t)}formatChanges(t,e){return!1===this.params.data?[]:t.map(t=>{var r=e.reduce((e,r)=>{if(e)return e;if(t+""==r.path+"")return r;if((t+".").startsWith(r.path+".")){var n=o(t)?w(t,r.path+".").split("."):t;e=new D(r.subject,{type:r.type,name:t});return("del"===r.type||r.isUpdate)&&(e.oldValue=j(r.oldValue,n,{get:V})),"del"!==r.type&&(e.value=j(r.value,n,{get:V})),e}},null);return r||(r=new D(this.subject,{type:"get",name:t,value:j(this.subject,o(t)?t.split("."):t,{get:V})})),r})}},U=class extends b{add(t){return super.add(new z(this.subject,t))}fire(t){return t=f(t,!1).map(t=>t instanceof D?t:new D(this.subject,t)),!this.currentlyFiring.filter(e=>t.filter(t=>e.type===t.type&&e.name===t.name).length).length&&(this.currentlyFiring.push(...t),this.fireables.forEach(e=>{if(t.propagationStopped)return!1;e.fire(t)}),t.forEach(t=>function(t,e,r=!1){for(var n=t.indexOf(e);n>-1&&(r||!1===r);)t.splice(n,1),r>0&&r--,n=t.indexOf(e);return t}(this.currentlyFiring,t)),!0)}},K=function(t,e=!0){return v(t,".observers",e?U:null)},J=function(t,e){if(!t||!h(t))throw new Error("Target must be of type object!");var r,n=function(r){return arguments.length?r:e in t};return(r=I(t,!1))?r.fire({type:"has",name:e},n):n()},Q=function(t,e,r,n=null,i=null){if(!e||!h(e))throw new Error("Target must be of type object!");p(r)&&(i=n,n=null);var s=I(e,!1),l=K(e,!1);const c=(r,n,i,a)=>{if(-1!==r.indexOf("."))throw new Error("Property names with a dot are not supported!");var o,c="set";t&&(c="def",n=(o=n||{}).value);var u={name:r,type:c,value:n,related:i,detail:a};J(e,r)&&(u.isUpdate=!0,u.oldValue=V(e,r));var p=function(t){return arguments.length?t:(o?Object.defineProperty(e,r,o):e[r]=n,!0)};if(s){var f=o?{type:"def",name:r,descriptor:o,related:i,detail:a}:{type:"set",name:r,value:n,related:i,detail:a};u.success=s.fire(f,p)}else u.success=p();return u.success&&u.value!==u.oldValue&&(h(u.oldValue)&&q(e,r,u.oldValue),h(u.value)&&(H(e,r,u.value),l&&l.build&&W(u.value,null,!0))),u};var u,d,m=[];a(r)||(o(r)||((d=r)instanceof Number||"number"==typeof d))&&(u=f(r))?m=u.map(t=>c(t,n,u,i)):p(r)&&(u=Object.keys(r))&&(m=u.map(t=>c(t,r[t],u,i)));var v=m.filter(t=>t.success);return l&&l.fire(v),v.length>0},G=function(t,e,r=null,n=null){return Q(!1,...arguments)},Y=function(t,e,r=null){if(!t||!h(t))throw new Error("Target must be of type object!");var n,i=(e=f(e)).map(n=>{if(-1!==n.indexOf("."))throw new Error("Property names with a dot are not supported!");var i={name:n,type:"del",related:e,detail:r};J(t,n)&&(i.oldValue=V(t,n));var s,a=function(e){return arguments.length?e:(delete t[n],!0)};return(s=I(t,!1))?i.success=s.fire({type:"del",name:n,related:e},a):i.success=a(),i.success&&h(i.oldValue)&&q(t,n,i.oldValue),i}).filter(t=>t.success);return(n=K(t,!1))&&n.fire(i),i.length>0},Z=function(t,e,r=null,n=null){return Q(!0,...arguments)},X=function(t){return L(!0,...arguments)};var tt={set:G,get:V,has:J,deleteProperty:Y,del:Y,defineProperty:Z,def:Z,keys:F,ownKeys:X,intercept:function(t,e,r,n={}){if(!h(t))throw new Error('Object must be of type subject; "'+m(r)+'" given!');if(d(e)&&(n=arguments.length>2?r:{},r=e,e=null),!d(r))throw new Error('Callback must be a function; "'+m(r)+'" given!');var i,s=I(t),a={filter:e,handler:r,params:n};return a.params.unique&&(i=s.filter(a)).length?i[0]:s.add(a)},unintercept:function(t,e,r=null,n={}){if(!t||!h(t))throw new Error('Object must be of type subject; "'+m(t)+'" given!');if(d(e)&&(n=arguments.length>2?r:{},r=e,e=null),r&&!d(r))throw new Error('Handler must be a function; "'+m(r)+'" given!');var i;if(i=I(t,!1))return i.forget({filter:e,originalHandler:r,params:n})},proxy:function(t){if(!h(t))throw new Error('Object must be of type subject; "'+m(t)+'" given!');var e=new Proxy(t,{get:(t,r)=>{var n=V(t,r);return d(n)&&!x(n)?n.bind(e):n},set:G,has:J,deleteProperty:Y,defineProperty:Z,ownKeys:X});return e},observe:R,unobserve:P,closure:B,init:function(t,e){f(e).forEach(e=>{var r,n,i=t[e],s=Object.getOwnPropertyDescriptor(t,e)||{enumerable:!(e in t)};"value"in s&&delete s.value,"writable"in s&&delete s.writable,s.get=()=>{if(r)return i;r=!0;var n=V(t,e);return r=!1,n},s.set=r=>{if(n)return i=r,!0;n=!0;G(t,e,r);return n=!1,!0},Object.defineProperty(t,e,s)})},build:W,link:H,unlink:q},et=function(t){return Array.isArray(t)},rt=function(t){return"function"==typeof t},nt=function(t){return rt(t)||t&&"[object function]"==={}.toString.call(t)},it=function(t){return!Array.isArray(t)&&"object"==typeof t&&t},st=function(t){return Array.isArray(t)||"object"==typeof t&&t||rt(t)},at=function(t){return!0!==t&&!1!==t&&null!==t&&""!==t&&!isNaN(1*t)},ot=function(t,e){var r=[];return function(t,e){e=(e=e||Object.prototype)&&!et(e)?[e]:e;var r=[];for(t=t;t&&(!e||e.indexOf(t)<0)&&"default"!==t.name;)r.push(t),t=t?Object.getPrototypeOf(t):null;return r}(t,e).forEach(t=>{!function(t,...e){e.forEach(e=>{t.indexOf(e)<0&&t.push(e)})}(r,...Object.getOwnPropertyNames(t))}),r};function lt(t,e,r=!1,n=!1,i=!0){var s=0,a=t.shift();if((at(a)||!0===a||!1===a)&&(s=a,a=t.shift()),!t.length)throw new Error("_merge() requires two or more array/objects.");return t.forEach((t,o)=>{(st(t)||nt(t))&&(r?ot(t):Object.getOwnPropertyNames(t)).forEach(l=>{var c=a[l],u=t[l];if((et(c)&&et(u)||it(c)&&it(u))&&(!0===s||s>0))a[l]=et(c)&&et(u)?[]:{},lt([at(s)?s-1:s,a[l],c,u],e,r,n,i);else if(e(l,a,t,o))if(et(a)&&et(t))n?a[l]=u:a.push(u);else try{i?Object.defineProperty(a,l,Object.getOwnPropertyDescriptor(t,l)):a[l]=t[l]}catch(t){}})}),a}var ct=function(...t){return lt(t,(t,e,r)=>!0,!1,!1,!1)},ut=function(t){return null===t||""===t},ht=function(t){return arguments.length&&(void 0===t||void 0===t)},pt=function(t,e,r=!1){for(var n=t.indexOf(e);n>-1&&(r||!1===r);)t.splice(n,1),r>0&&r--,n=t.indexOf(e);return t},ft=function(t,e){if(!t)return!1;if(t instanceof e)return!0;var r=t=>{for(;t&&t!==Function.prototype;){if(t===e||t.prototypes&&t.prototypes.reduce((t,n)=>t||n===e||r(n),!1))return!0;t=Object.getPrototypeOf(t)}return!1};return r(t.constructor)},dt=function(t){return t instanceof Number||"number"==typeof t},mt=function(t){return it(t)&&Object.getPrototypeOf(t)===Object.prototype},vt=function(t){return!0===t||!1===t},gt=function(t,e){var r=void 0;return st(t)&&Object.keys(t).forEach((n,i)=>{!1!==r&&(r=e(at(n)?parseFloat(n):n,t[n],i))}),r};const bt=function(t,e,r=!0,n=1){if(et(t)&&et(e)&&t.length!==e.length)return!r;if(it(t)&&it(e)){var i=Object.keys(t),s=Object.keys(e);if(!i.length&&!s.length)return mt(t)&&mt(e)?r:t===e===r;if(!bt(i,s))return!r}if(n>0&&(et(t)&&et(e)||it(t)&&it(e))){var a=function(t,e,r=!0,n=!0,i=!1,s=!1){if(et(t)&&et(e)){var a=[],o=!0;return t.forEach(t=>{if(o){var l=!1;gt(e,(e,i)=>{(!l||n&&st(t))&&(l=r(t,i),(et(l)&&!l.length||it(l)&&!Object.keys(l).length)&&(l=!1),st(l)&&n&&(t=l))}),st(l)?a.push(n?l:t):vt(l)?i&&!l||!i&&l?a.push(t):s&&(o=!1):a.push(l)}}),a}if(it(t)&&it(e)){a={},o=!0;return Object.keys(t).forEach(l=>{if(o){var c=r(t[l],e[l]);(et(c)&&!c.length||it(c)&&!Object.keys(c).length)&&(c=!1),st(c)?a[l]=n?c:t[l]:vt(c)?i&&!c||!i&&c?a[l]=t[l]:s&&(o=!1):a[l]=c}}),a}}(t,e,(t,e)=>bt(t,e,r,n-1),!1,!1,!0);return et(a)?a.length===t.length&&a.length===e.length:it(a)&&it(t)?Object.keys(a).length===Object.keys(t).length&&Object.keys(a).length===Object.keys(e).length:a}return nt(r)?r(t,e):dt(t)&&dt(e)&&isNaN(t)&&isNaN(e)?r:t===e===r};var yt=bt,wt=class{even(t){return!(!it(t)||t.jsenType!==this.jsenType)&&yt(t,this)}inherit(t){return this}withComments(t){return this.meta||(this.meta={}),this.meta.comments=t,this}withVars(t){return this.meta||(this.meta={}),this.meta.vars=t,this}};const jt=class extends wt{};Object.defineProperty(jt.prototype,"jsenType",{get:()=>"Reference"});var Et=jt;const Ot=class extends wt{};Object.defineProperty(Ot.prototype,"jsenType",{get:()=>"CallExpression"});var xt=Ot;const kt=class extends wt{};Object.defineProperty(kt.prototype,"jsenType",{get:()=>"FunctionType"});var St=kt;const At=class extends wt{};Object.defineProperty(At.prototype,"jsenType",{get:()=>"IfConditional"});var Pt=At;const Ct={};class Tt{static parse(t,e,r={},n=Tt){if(t.length){var i;if(Ct[t]&&!e&&!1!==r.allowCache)if(i=n.parseOne(t,Ct[t],r,n))return i;for(var s=Object.values(e||n.grammars),a=0;a<s.length;a++){var o=n.parseOne(t,s[a],r,n);if(o)return e||!1===r.allowCache||(Ct[t]=s[a]),o}if(!1===r.assert)return;throw new Error("[Syntax error:] "+t)}}static parseOne(t,e,r={},n=Tt){var i=[],s=e.parse(t,(t,e,s={})=>{var a=n.parse(t,e,s?ct(r,s):r,n);return!1!==s.lodge&&(ft(a,Et)&&i.push(a),ft(a,xt)&&i.push(a.reference),a&&a.meta.vars.forEach(t=>i.push(t))),a},r);return s&&(s.meta||(s.meta={}),s.meta.vars=i,s.meta.deepVars=[],ft(s,xt)?s.reference.context&&s.meta.vars.push(s.reference.context):ft(s,St)?s.meta.vars.splice(0):ft(s,Pt)?(s.onTrue&&s.onTrue.meta.vars.forEach(t=>{pt(s.meta.vars,t),s.meta.deepVars.push(t)}),s.onFalse&&s.onFalse.meta.vars.forEach(t=>{pt(s.meta.vars,t),s.meta.deepVars.push(t)})):s.meta.vars.push(),et(r.explain)&&r.explain.push(t+" >>-------------\x3e> "+s.jsenType)),s}}var $t=function(t){return t instanceof String||"string"==typeof t&&null!==t},Nt=function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?"":t.substr(n+e.length)},Mt=function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?t:t.substr(0,n)},It=function(t){return t.filter((t,e,r)=>r.indexOf(t)===e)},Lt=class extends Error{},Ft=class extends Error{};class Wt{constructor(t,e={}){if(this.stack=t,this.params=e,!("main"in this.stack))throw new Error('A "main" context must be provided!');this.stack.super&&(this.stack.super=Wt.create(this.stack.super,{errorLevel:e.errorLevel})),this.stack.local=this.stack.local||{},this.stack.$local=this.stack.$local||{}}observe(t,e){this.stack.super&&this.stack.super.observe(t,r=>{if(r.props.filter(e=>!Dt(this.stack.local,e,t)&&!Dt(this.stack.main,e,t)).length)return r.scope="super",e(r)}),t.observe(this.stack,r=>{var n=(r=r.filter(t=>"main"===t.name)).map(t=>Nt(t.path,".")).filter(t=>t),i=n.map(t=>Mt(t,"."));if(!n.length&&r.length&&r[0].value&&(i=n=It(Object.keys(st(r[0].value.main)?r[0].value.main:[]).concat(r[0].oldValue&&st(r[0].oldValue.main)?Object.keys(r[0].oldValue.main):[]))),i.filter(e=>!Dt(this.stack.local,e,t)).length)return e({props:i,references:n,scope:"local"})},{subtree:!0,tags:[this,"jsen-context"]})}unobserve(t,e){this.stack.super&&this.stack.super.unobserve(t,e),t.unobserve(this.stack,e,{subtree:!0,tags:[this,"jsen-context"]})}handle(t,e,r,n=0){var i=()=>e(this.stack.main,null,()=>this.stack.super?this.stack.super.handle(t,e,r,n+1):r?r():void 0,n);return"toString"===t&&this.stack.local.toString===Object.prototype.toString?i():e(this.stack.local,this.stack.$local,i,n)}get(t,e={},r=!0){return t instanceof String&&(t+=""),this.handle(t,(n,i,s,a)=>{var o=Rt(n,t,e);return!ht(o)||Dt(n,t,e)?nt(o)&&!function(t){return rt(t)&&/^class\s?/.test(Function.prototype.toString.call(t))}(o)&&r?o.bind(n):o:s()})}set(t,e,r={},n=!1){if(2===this.params.type&&"var"===n&&this.stack.super)return this.stack.super.set(t,e,r,n);t instanceof String&&(t+="");const i=(t,e,r,n)=>n.set?n.set(t,e,r):(t[e]=r,!0);return this.handle(!!n||t,(s,a,o)=>{if(a&&"const"===a[t])throw new Lt("CONST "+t+" cannot be modified!");if(n){if(!["var","let","const"].includes(n))throw new Ft("Unrecognized declarator: "+n+"!");return a[t]=n,i(s,t,e,r)}return Dt(s,t,r)?i(s,t,e,r):o()},()=>{throw new Lt('"'+t+'" is undefined!')})}del(t,e={}){return t instanceof String&&(t+=""),this.handle(t,(r,n,i)=>Dt(r,t,e)?(n&&delete n[t],e.deleteProperty||e.del?(e.deleteProperty||e.del)(r,t):(delete r[t],!0)):i())}has(t,e,r={}){return t instanceof String&&(t+=""),e instanceof String&&(e+=""),this.handle(t,(n,i,s)=>{if(Dt(n,t,r)){var a=Rt(n,t,r);return Dt(a,e,r)}return s()},()=>{throw new Lt('"'+t+'" is undefined!')})}exec(t,e,r={}){return t instanceof String&&(t+=""),this.handle(t,(n,i,s)=>{var a=Rt(n,t,r);if(!ht(a)||Dt(n,t,r)){if(!nt(a)){if(r.exec)return r.exec(n,t,e);throw new Lt('"'+t+'" is not a function! (Called on type: '+typeof n+".)")}return r.apply?r.apply(a,n,e):a.apply(n,e)}return s()},()=>{if(r.execUnknown)return r.execUnknown(this,t,e);throw new Lt('"'+t+'()" is undefined!')})}static create(t,e={}){return t instanceof Wt?t:new Wt({main:t},e)}}const Rt=(t,e,r)=>r.get&&st(t)&&!ut(t)?r.get(t,e):(st(t)||$t(t)||dt(t))&&!ut(t)?t[e]:void 0,Dt=(t,e,r)=>r.has&&st(t)&&!ut(t)?r.has(t,e):st(t)&&!ut(t)?e in t:!ut(t)&&!ht(t[e]);var Ht=function(t,e,r){return t.startsWith(e)&&t.endsWith(r)},_t=function(t,e,r){return function(t,e){return Mt(t,e,!0)}(Nt(t,e),r)},qt=function(t,e=!0){return et(t)?t:!e&&it(t)?[t]:!1!==t&&0!==t&&function(t){return ut(t)||ht(t)||!1===t||0===t||st(t)&&!Object.keys(t).length}(t)?[]:function(t){return!$t(t)&&!ht(t.length)}(t)?Array.prototype.slice.call(t):it(t)?Object.values(t):[t]};const Bt=function(t,e=1,r=!0){return!at(e)||e<=0?t:(!et(t)&&it(t)&&r&&(t=Object.values(t)),et(t)?t.reduce((t,n)=>et(n)||it(n)&&r?t.concat(Bt(et(n)?n:Object.values(n),e-1,r)):t.concat(n),[]):t)};var Vt=Bt,zt=function(t,e=1){var r=0;t.forEach(t=>{r++});var n=t.slice(t.length-r,e);return arguments.length>1?n:n[0]},Ut=function(t,e=1){return arguments.length>1?zt(t.slice().reverse(),e).reverse():zt(t.slice().reverse())},Kt=function(t,e=[]){return lt([{},t],(t,r,n)=>{if(!nt(n[t]))return nt(e)?e(t):!et(e)||!e.length||e.indexOf(t)>-1},!1,!1,!1)};class Jt{static lex(t,e,r={}){if(!$t(t+=""))throw new Error("Argument1 must be a string!");var n=t=>({delims:t.delims.slice(),options:Kt(t.options),nesting:t.nesting.slice(),maxDepth:t.maxDepth,comments:t.comments.slice(),tokens:t.tokens.slice(),matches:t.matches.slice(),matchesi:Kt(t.matchesi)});if(Jt.$cache[t]&&!1!==r.cache)for(var i=0;i<Jt.$cache[t].length;i++){var s=Jt.$cache[t][i];if(yt(s.delims,e))return n(s)}var a=new Jt(t,r).lex(e);return!1!==r.cache&&(Jt.$cache[t]=Jt.$cache[t]||[],Jt.$cache[t].push(a)),n(a)}static split(t,e,r){return Jt.lex(t,e,r).tokens}static match(t,e,r){return Jt.lex(t,e,r).matches}constructor(t,e){if(!$t(t))throw new Error("Lexer requires the first argument to be a string.");this.$str=t,this.$options=e||{},this.$options.blocks||(this.$options.blocks=Jt.$blocks),this.$options.quotes||(this.$options.quotes=Jt.$quotes),this.$options.comments||(this.$options.comments=Jt.$comments)}lex(t,e){var r={delims:qt(t),options:ct(!0,{},this.$options,e||{}),nesting:[],maxDepth:0,comments:[],tokens:[],matches:[],matchesi:{}};if(this._evalCharsAt(r,0),r.nesting.length)throw new Error("Error parsing the string: "+this.$str+". Unterminated blocks: "+Vt(r.nesting).join(", "));return r}_evalCharsAt(t,e){if(!(e>=this.$str.length)){var r=1,n={},i={},s={};if(t.openComment||(i=this._testQuotes(t,e)),t.openQuote||(n=this._testComments(t,e)),t.openComment||n.ending)if(t.nesting.length||s.ending)this._push(t,this.$str[e]);else r=(o=n.starting||n.ending||this.$str[e]).length,this._push(t,o,"comments",n.starting);else if(t.openQuote||i.ending)this._push(t,this.$str[e]);else{if(t.options.limit&&t.matches.length===t.options.limit)return this._push(t,this.$str[e]),this._evalCharsAt(t,e+1);s=this._testNesting(t,e);s=this._testNesting(t,e);var a=this._testChars(t.options.stopChars||[],t,e);if(!t.nesting.length&&!1!==a)return t.options.stopChar=a,void(t.options.stopCharForward=this.$str.substr(e));if(t.delims.length)if(t.nesting.length||s.ending){var o;r=(o=s.starting||s.ending||this.$str[e]).length,this._push(t,o)}else{this._push(t,"");var l=this._testChars(t.delims,t,e);if(!1!==l&&(t.matches.push(l),t.matchesi[e]=l,r=l.length||1,!t.options.preserveDelims))return this._evalCharsAt(t,e+(l.length||1));this._push(t,l||this.$str[e])}else 2===t.nesting.length&&s.starting?(t.matches.push(null),this._push(t,s.starting),r=s.starting.length):!t.nesting.length&&s.ending?(this._push(t,s.ending),r=s.ending.length,t.matches.push(null)):this._push(t,this.$str[e])}return this._evalCharsAt(t,e+r)}}_testQuotes(t,e){var r={};return(t.options.quotes||[]).forEach(n=>{this.$str.substr(e,1)===n&&(t.openQuote?n===t.openQuote&&(t.openQuote=!1,r.ending=n):(t.openQuote=n,r.starting=n))}),r}_testComments(t,e){var r={};return(t.options.comments||[]).forEach(n=>{if(t.openComment){if(Ut(n)===Ut(t.openComment)){var i=Ut(n);this.$str.substr(e).startsWith(i)&&(t.openComment=!1,r.ending=i)}}else{var s=zt(n);this.$str.substr(e).startsWith(s)&&(t.openComment=n,r.starting=s)}}),r}_testNesting(t,e){var r={};return(t.options.blocks||[]).forEach(n=>{var i=zt(n);if(this.$str.substr(e).startsWith(i))t.nesting=t.nesting.concat([n]),r.starting=i;else if(t.nesting.length&&Ut(n)===Ut(Ut(t.nesting))){var s=Ut(n);this.$str.substr(e).startsWith(s)&&(t.nesting=t.nesting.slice(0,-1),r.ending=s)}}),t.maxDepth=Math.max(t.maxDepth,t.nesting.length),r}_testChars(t,e,r){for(var n=0;n<t.length;n++){var i=t[n];if(nt(i)){var s=i(this.$str.substr(0,r),this.$str.substr(r));if(!1!==s)return s}if(e.options.useRegex){var a=this.$str.substr(r).match(new RegExp("^"+i,!0!==e.options.useRegex?e.options.useRegex:""));if(a)return a[0]}if(!e.options.ci&&this.$str.substr(r,i.length)===i||e.options.ci&&this.$str.substr(r,i.length).toLowerCase()===i.toLowerCase())return i}return!1}_push(t,e,r="tokens",n=!1){var i=t.matches.length;if(ht(t.tokens[i])&&(t.tokens[i]=""),"comments"===r){t.tokens[i].comments||(t.tokens[i]=new String(t.tokens[i]),t.tokens[i].comments=[]);var s=t.tokens[i].comments.length-(!t.tokens[i].comments.length||n?0:1);t.tokens[i].comments[s]=(t.tokens[i].comments[s]||"")+e}else{var a=t.tokens[i].comments;t.tokens[i]=new String(t.tokens[i]+e),t.tokens[i].comments=a}}split(t,e,r){return this.lex(e,r).tokens}match(t,e,r){return this.lex(e,r).matches}regParse(t,e){return this.lex(t,ct({useRegex:!0},e||{}))}regSplit(t,e){return this.regParse(t,e).tokens}regMatch(t,e){return this.regParse(t,e).matches}}Jt.$blocks=[["(",")"],["[","]"],["{","}"]],Jt.$quotes=['"',"'","`"],Jt.$comments=[["/*","*/"],["//","\n"]],Jt.$cache={};const Qt=class extends wt{};Object.defineProperty(Qt.prototype,"jsenType",{get:()=>"Abstraction"});var Gt=Qt;const Yt=class extends Gt{constructor(t){super(),this.expr=t}eval(t=null,e={},r={}){return this.expr.eval(t,e,r)}toString(t=null){return"("+this.expr.toString(t)+")"}static parse(t,e,r={},n=Yt){if(Ht(t,"(",")")&&!Jt.match(t,[" "]).length)return new n(e(_t(t,"(",")")))}};var Zt=Yt;const Xt=class extends wt{};Object.defineProperty(Xt.prototype,"jsenType",{get:()=>"ArrayType"});var te=Xt;const ee=class extends te{constructor(t){super(),this.exprs=t||[]}inherit(t){if(t instanceof te){var e=t.exprs.filter(t=>this.exprs.reduce((e,r)=>e&&!t.even(r),!0));this.exprs=e.concat(this.exprs)}return this}eval(t=null,e={},r={}){return this.exprs.map(n=>n.eval(t,e,r))}toString(t=null){return"["+this.exprs.map(e=>e.toString(t)).join(", ")+"]"}static parse(t,e,r={},n=ee){if(Ht(t,"[","]")&&!Jt.match(t.trim(),[" "]).length)return new n(Jt.split(_t(t,"[","]"),[","]).map(t=>t.trim()).filter(t=>t).map(t=>e(t)))}};var re=ee;const ne=class extends wt{};Object.defineProperty(ne.prototype,"jsenType",{get:()=>"Arguments"});var ie=ne;const se=class extends ie{constructor(t=[]){super(),this.list=t}eval(t=null,e={},r={}){return this.list.map(n=>n.eval(t,e,r))}toString(t=null){return"("+this.list.map(e=>e.toString(t)).join(", ")+")"}static parse(t,e,r={},n=se){if(t=t.trim(),Ht(t,"(",")")&&!Jt.match(t,[" "]).length)return new n(Jt.split(_t(t,"(",")"),[","]).map(t=>e(t.trim())))}};var ae=se;const oe=class extends wt{};Object.defineProperty(oe.prototype,"jsenType",{get:()=>"AssertionExpression"});var le=oe;const ce=class extends le{constructor(t,e){super(),this.exprs=t,this.logic=e}eval(t=null,e={},r={}){if(this.logic.toLowerCase()===ce.negation.toLowerCase())return!zt(this.exprs).eval(t,e,r);Vt(ce.operators);for(var n=(this.logic||"").trim().toUpperCase(),i=n===(ce.operators.or||"").trim().toUpperCase(),s=n===(ce.operators.nor||"").trim().toUpperCase(),a=n===(ce.operators.and||"").trim().toUpperCase(),o=n===(ce.operators.nand||"").trim().toUpperCase(),l=!0,c=0,u=0;u<this.exprs.length;u++){if(l=this.exprs[u].eval(t,e,r),a&&!l)return!1;if(o&&!l)return!0;if(i&&l)return l;c+=l?1:0}return i?l:a||o?a:s&&0===c}toString(t=null){return this.logic.toLowerCase()===ce.negation.toLowerCase()?this.logic+zt(this.exprs).toString(t):this.exprs.map(e=>e.toString(t)).join(" "+this.logic+" ")}static parse(t,e,r={},n=ce){if(t.toUpperCase().startsWith(ce.negation.toUpperCase()))return new n([e(t.substr(ce.negation.length))],ce.negation);var i=Jt.lex(t,Vt(n.operators));if(i.tokens.length>1){var s=It(i.matches);if(s.length>1)throw new Error('"AND" and "OR" logic cannot be asserted in the same expression: '+t+"!");return new n(i.tokens.map(t=>e(t.trim())),zt(s))}}};ce.negation="!",ce.operators={and:"&&",or:"||"};var ue=ce;const he=class extends wt{};Object.defineProperty(he.prototype,"jsenType",{get:()=>"AssignmentExpression"});var pe=he;const fe=class extends pe{constructor(t,e,r,n="=",i=!1){super(),this.initKeyword=t,this.reference=e,this.val=r,this.operator=n,this.postIncrDecr=i}eval(t=null,e={},r={}){var n,i,s=this.reference.getEval(t,e,r);if(["++","--"].includes(this.operator)){if(i=this.reference.eval(t,e,r),!dt(i))throw new Error(this.reference+" must be a number!");n="++"===this.operator?i+1:i-1}else if(["+=","-=","*=","/="].includes(this.operator)){var a=this.reference.eval(t,e,r),o=this.val.eval(t,e,r);if(!("+="===this.operator||dt(a)&&dt(o)))throw new Error(this+" - operands must each be a number!");n="*="===this.operator?a*o:"/="===this.operator?a/o:"-="===this.operator?a-o:a+o}else n=this.val.eval(t,e,r);if(!ht(s.context)&&!ht(s.name)){if(e&&et(e.references)&&_pushUnique(e.references,this.reference.toString()),Wt.create(s.context).set(s.name,n,r,this.initKeyword))return this.postIncrDecr?i:n;throw new Error("["+this+"] Operation failed!")}throw new Error('"'+this+'" is undefined!')}toString(t=null){return["++","--"].includes(this.operator)?this.postIncrDecr?this.reference.toString(t)+this.operator:this.operator+this.reference.toString(t):(this.initKeyword?this.initKeyword+" ":"")+[this.reference.toString(t),this.operator,this.val.toString(t)].join(" ")}static parse(t,e,r={},n=fe){var i=Jt.lex(t,n.operators.concat([de]));if(i.matches.length){var s,a,o,l,c=i.matches[0].trim(),u=["++","--"].includes(c);if(u?(l=t.trim().endsWith("++")||t.trim().endsWith("--"),a=i.tokens[l?"shift":"pop"]().trim()):(a=i.tokens.shift().trim(),o=i.tokens.shift().trim()),["var","let","const"].includes(Mt(a," "))){if("="!==c)throw new Error("Invalid declaration: "+t);s=Mt(a," "),a=Nt(a," ").trim()}if(!((a=e(a,null,{lodge:!1}))instanceof Et)||!u&&!(o=e(o)))throw new Error("Invalid assignment expression: "+t);return new n(s,a,o,c,l)}}};fe.operators=["+=","-=","*=","/=","++","--"];const de=(t,e)=>!(t.endsWith("=")||!e.startsWith("=")||e.startsWith("=>")||e.startsWith("==")||e.startsWith("==="))&&"=";var me=fe;const ve=class extends wt{};Object.defineProperty(ve.prototype,"jsenType",{get:()=>"Block"});var ge=ve;const be=class extends wt{};Object.defineProperty(be.prototype,"jsenType",{get:()=>"ReturnDirective"});var ye=be;class we extends ge{constructor(t,e){super(),this.stmts=t||[],this.delim=e}eval(t=null,e={},r={}){e=e?function(t,e=[],r=!0){var n=0;return at(arguments[0])&&st(arguments[1])&&(n=arguments[0],t=arguments[1],e=arguments[2]||[]),lt([n,{},t],(t,r,n)=>nt(e)?e(t):!et(e)||!e.length||e.indexOf(t)>-1,!1,!1,r)}(e):{};for(var n=(t=Wt.create(t)).params.errorLevel,i=t=>It(t.map(t=>Mt(Mt(t.toString(),"["),"("))),s=(t,e,r,i)=>{if(2===n)return t.eval(e,r,i);try{return t.eval(e,r,i)}catch(t){1===n&&console.warn(t.message)}},a=[],o=0;o<this.stmts.length;o++){var l=this.stmts[o],c=i(l.meta.vars),u=i(l.meta.deepVars||[]),h=(e.references||[]).filter(t=>c.filter(e=>(e+".").startsWith(t+".")).length),p=(e.references||[]).filter(t=>u.filter(e=>(e+".").startsWith(t+".")).length);if(!e.references||!e.references.length||(h=h.length)||(p=p.length)){if(l instanceof ye)return s(l,t,h?null:e,r);a[o]=s(l,t,h?null:e,r),e.references&&l instanceof pe&&(e.references=e.references.concat(i([l.reference])))}}return a}toString(t=null){return this.stmts.map(e=>e.toString(t)).join(this.delim)}static parse(t,e,r={},n=we){var i=Jt.lex(t+";",Vt(n.operators).concat([we.testBlockEnd]));if(i.matches.length)return new n(i.tokens.map(t=>e(t.trim())).filter(t=>t),i.matches[0].trim())}static testBlockEnd(t,e){return!(!t.endsWith("}")||e.trim().startsWith("else"))&&""}}we.operators=[";","\r\n"];const je=class extends wt{};Object.defineProperty(je.prototype,"jsenType",{get:()=>"BooleanType"});var Ee=je;const Oe=class extends Ee{constructor(t){super(),this.state=t}eval(){return"true"===this.state.toLowerCase().trim()}toString(){return this.state}static parse(t,e,r={},n=Oe){if("true"===(t=t.toLowerCase().trim())||"false"===t)return new n(t)}};var xe=Oe;const ke=class extends xt{constructor(t,e){super(),this.reference=t,this.args=e}eval(t=null,e={},r={}){var n=this.reference.getEval(t,e,r),i=this.args.eval(t,e,r);if(ht(n.context)||ht(n.name))throw new Error("[Reference Error]["+this+']: "'+(this.reference.context||this.reference)+'" is undefined!');try{return Wt.create(n.context).exec(n.name,i,r)}catch(t){throw t instanceof Lt?new Error("[Reference Error]["+this+"]: "+t.message):t instanceof Ft?new Error("[Syntax Error]["+this+"]: "+t.message):t}}toString(t=null){return this.reference.toString(t)+this.args.toString(t)}static parse(t,e,r={},n=ke){if(!t.startsWith("(")&&t.endsWith(")")&&!Jt.match(t,[" "]).length){var i,s=Jt.split(t,[]),a=s.pop();if(!((i=e(s.join(""),null,{lodge:!1}))instanceof Et&&(a=e(a,[ae]))))throw new Error("Invalid call directive: "+t);return new n(i,a)}}};var Se=ke;const Ae=class extends wt{};Object.defineProperty(Ae.prototype,"jsenType",{get:()=>"ComparisonExpression"});var Pe=Ae;const Ce=class extends Pe{constructor(t,e,r){super(),this.operand1=t,this.operand2=e,this.operator=r}eval(t=null,e={},r={}){return Ce.compare(this.operand1.eval(t,e,r),this.operand2.eval(t,e,r),this.operator)}toString(t=null){return[this.operand1.toString(t),this.operator,this.operand2.toString(t)].join(" ")}static parse(t,e,r={},n=Ce){var i=Vt(n.operators).map(t=>" "+t+" "),s=Jt.lex(t,i);if(s.tokens.length>1){if(s.tokens.length>2)throw new Error('Malformed "Comparison" expression: '+t+"!");return new n(e(zt(s.tokens).trim()),e(Ut(s.tokens).trim()),s.matches[0].trim())}}static compare(t,e,r="=="){if(-1===Vt(Ce.operators).indexOf(r))throw new Error('The operator "'+r+'" is not recognized.');switch(r){case"===":return t===e;case"==":case"=":return t==e;case">":return t>e;case"<":return t<e;case">=":return t>=e;case"<=":return t<=e;case"!=":return t!=e;case"<>":case"!==":return t!==e;case"^=":return $t(t)&&t.startsWith(e);case"$=":return $t(t)&&t.endsWith(e);case"*=":return!(!et(e)&&!$t(e))&&t.indexOf(e)>-1;case"~=":return $t(t)&&$t(e)&&(" "+t+" ").indexOf(" "+e+" ")>-1;case">=<":if(!et(e)||2!==e.length)throw new Error("A 'Between' comparison requires argument 2 to be an array of exactly 2 values.");return t>=e[0]&&t<=e[1];case"/**/":return e.match(new RegExp(t));default:return!1}}static diff(t,e,r){return!Ce.compare(t,e,r?"===":"==")}};Ce.operators={exact:{is:"===",isNull:"===",equalsTo:"==",strictlyNotEqualsTo:"!==",notEqualsTo:"!="},relative:{lesserThan:"<",greaterThan:">",lesserThanOrEqualsTo:"<=",greaterThanOrEqualsTo:">=",between:">=<"},partial:{startsWith:"^=",endsWith:"$=",contains:"*=",any:"~=",in:"~=",matches:"/**/"}};var Te=Ce;const $e=class extends wt{};Object.defineProperty($e.prototype,"jsenType",{get:()=>"TernaryConditional"});var Ne=$e;const Me=class extends Ne{constructor(t,e,r){super(),this.assertion=t,this.onTrue=e,this.onFalse=r}eval(t=null,e={},r={}){return this.assertion.eval(t,e,r)?this.onTrue.eval(t,e,r):this.onFalse.eval(t,e,r)}toString(t=null){return[this.assertion.toString(t),Me.operators[0],this.onTrue.toString(t),Me.operators[1],this.onFalse.toString(t)].join(" ")}static parse(t,e,r={},n=Me){var i=Jt.split(t,n.operators);if(i.length>1){if(2===i.length)throw new Error("Malformed ternary expression: "+t+"!");return new n(e(i[0].trim()),e(i[1].trim()),e(i[2].trim()))}}};Me.operators=["?",":"];var Ie=Me;const Le=class extends wt{};Object.defineProperty(Le.prototype,"jsenType",{get:()=>"DeleteExpression"});var Fe=Le;const We=class extends Fe{constructor(t,e="delete"){super(),this.reference=t,this.operator=e}eval(t=null,e={},r={}){var n=this.reference.getEval(t,e,r);if(!ht(n.context)&&!ht(n.name))return Wt.create(n.context).del(n.name,r);throw new Error("[Reference Error]["+this+']: "'+(this.context||this)+'" is undefined!')}toString(t=null){return this.operator+" "+this.reference.toString(t)}static parse(t,e,r={},n=We){var i=Jt.lex(t,Object.values(n.operators));if(1===i.matches.length&&t.startsWith(i.matches[0]+" ")){var s;if(!((s=e(i.tokens.pop().trim()))instanceof Et))throw new Error("Invalid delete directive: "+t);return new n(s,i.matches[0].trim())}}};We.operators={red:"reduce",del:"delete"};var Re=We;const De=class extends St{constructor(t,e,r={}){super(),this.paramters=t||{},this.statements=e,this.arrowFunctionFormatting=r}inherit(t){if(t instanceof St){for(var e=Object.keys(t.paramters),r=Object.keys(this.paramters),n=0;n<Math.max(r.length,e.length);n++){var i=e[n],s=r[n];if(!s&&i)throw new Error("Parameter #"+n+" ("+i+") in parent function must be implemented.");if(s&&i){var a=t.paramters[i],o=this.paramters[s];if(o&&!a)throw new Error("Parameter #"+n+" ("+s+") must not have a default value as established in parent function.");if(o&&a&&o.jsenType!==a.jsenType)throw new Error("Default value for parameter #"+n+" ("+s+") must be of type "+a.jsenType+" as established in parent function.")}}this.sup=t}return this}eval(t=null,e={},r={}){var n=this;return function(...i){var s={};gt(Object.keys(n.paramters),(a,o)=>{var l=n.paramters[o];if(i.length-1<a&&!l)throw new Error('The parameter "'+o+'" is required.');s[o]=i.length>a?i[a]:n.paramters[o]?n.paramters[o].eval(t,e,r):null}),n.arrowFunctionFormatting||(s.this=this);var a=t instanceof Wt?t.params.errorLevel:void 0,o=new Wt({main:s,super:t},{errorLevel:a});return n.statements.eval(o,e,r)}}toString(t=null){var e=[];if(gt(this.paramters,(r,n)=>{e.push(r+(n?"="+n.toString(t):""))}),this.arrowFunctionFormatting){var r=!1===this.arrowFunctionFormatting.head||1===e.length&&-1===e[0].indexOf("="),n=!1===this.arrowFunctionFormatting.body;return(r?e[0]:"("+e.join(", ")+")")+" => "+(n?this.statements.toString(t):"{"+this.statements.toString(t)+"}")}return"function ("+e.join(", ")+") {"+this.statements.toString(t)+"}"}static parse(t,e,r={},n=De){var i;if((t=t.trim()).startsWith("function")&&(i=Jt.split(t,[]).slice(1).filter(t=>t.trim()))&&2===i.length)var s=!1,a=_t(i.shift().trim(),"(",")"),o=_t(i.shift().trim(),"{","}");else{if(t.startsWith("function")||!(i=Jt.split(t,["=>"]))||2!==i.length)return;a=i.shift().trim(),o=i.shift().trim(),s={};Ht(a,"(",")")?a=_t(a,"(",")"):s.head=!1,Ht(o,"{","}")?o=_t(o,"{","}"):s.body=!1}var l={};Jt.split(a,[","]).forEach(t=>{var r=t.split("=");r[1]?l[r[0].trim()]=e(r[1].trim(),null,{meta:null}):l[t.trim()]=null});var c=e(o,[we],{assert:!1})||e(o,null,{meta:null});return new n(l,"Block"===c.jsenType?c:new we([c]),s)}};De.operators=["=>"];var He=De;const _e=class extends Pt{constructor(t,e,r,n={}){super(),this.assertion=t,this.onTrue=e,this.onFalse=r,this.params=n}eval(t=null,e={},r={}){var n=t instanceof Wt?t.params.errorLevel:void 0,i=new Wt({main:{},super:t},{type:2,errorLevel:n});return this.assertion.eval(t,e,r)?this.onTrue?this.onTrue.eval(i,e,r):void 0:this.onFalse?this.onFalse.eval(i,e,r):void 0}toString(t=null){var e=this.onTrue&&this.params.onTrueIsBlock?"{"+this.onTrue.toString(t)+"}":this.onTrue?this.onTrue.toString(t):"",r=this.onFalse&&this.params.onFalseIsBlock?"{"+this.onFalse.toString(t)+"}":this.onFalse?this.onFalse.toString(t):"";return"if ("+this.assertion.toString(t)+")"+e+(r?" else "+r:"")}static parse(t,e,r={},n=_e){var i;if((t=t.trim()).startsWith("if")&&(i=Jt.split(t,[],{limit:2}).slice(1).filter(t=>t.trim()))&&2===i.length){var s,a,o=e(_t(i.shift().trim(),"(",")").trim()),l=Jt.split(i.shift().trim(),["else"],{limit:1}),c=l.shift().trim(),u=(l.shift()||"").trim();return Ht(c,"{","}")?(s=!0,c=e(c=_t(c,"{","}").trim(),[we],{assert:!1,meta:null})||e(c,null,{meta:null})):c=e(c,null,{meta:null}),u&&(Ht(u,"{","}")?(a=!0,u=e(u=_t(u,"{","}").trim(),[we],{assert:!1,meta:null})||e(u,null,{meta:null})):u=e(u,null,{meta:null})),new n(o,c?"Block"===c.jsenType?c:new we([c]):null,u?"Block"===u.jsenType?u:new we([u]):null,{onTrueIsBlock:s,onFalseIsBlock:a})}}};var qe=_e,Be=function(t,e,r=null){return et(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1!==e.indexOf(t)):[]};const Ve=class extends wt{};Object.defineProperty(Ve.prototype,"jsenType",{get:()=>"MathExpression"});var ze=Ve;const Ue=class extends ze{constructor(t,e){super(),this.val=t,this.exprs=e}eval(t=null,e={},r={}){return this.exprs.reduce((n,i)=>{var s=i.val.eval(t,e,r),a=i.operator.trim();if(!(at(n)&&at(s)||"+"===a))throw new Error("Invalid Math expression: "+this.toString()+"!");switch(a){case"+":return n+s;case"-":return n-s;case"*":return n*s;case"/":return n/s}},this.val.eval(t,e,r))}toString(t=null){return[this.val.toString(t)].concat(this.exprs.map(e=>e.operator+" "+e.val.toString(t))).join(" ")}static parse(t,e,r={},n=Ue){var i=Jt.lex(t,Vt(n.operators));if(i.tokens.length>1&&i.matches.length===i.tokens.length-1){var s=It(i.matches);if(Be(s,Ue.operators.sup).length&&Be(s,Ue.operators.sub).length)throw new Error('"Addition/subtraction" and "multiplication/division" operators cannot be used in the same expression: '+t+"!");return new n(e(i.tokens.shift().trim()),i.tokens.map((t,r)=>({operator:i.matches[r],val:e(t.trim())})))}}};Ue.operators={sup:["*","/"],sub:["+","-"]};var Ke=Ue;const Je=class extends wt{};Object.defineProperty(Je.prototype,"jsenType",{get:()=>"NumberType"});var Qe=Je;const Ge=class extends Qe{constructor(t,e=0){super(),this.int=t,this.dec=e}eval(){return parseFloat(this.int+(this.dec?"."+this.dec:null))}toString(t=null){return this.int+(this.dec?"."+this.dec:null)}static parse(t,e,r={},n=Ge){if(at(t)){t=t.split(".");return new n(parseInt(t.shift()),parseInt(t.shift()))}}};var Ye=Ge;const Ze=class extends wt{};Object.defineProperty(Ze.prototype,"jsenType",{get:()=>"ObjectType"});var Xe=Ze;const tr=class extends Xe{constructor(t){super(),this.entries=t||{}}inherit(t){return t instanceof Xe&&gt(t.entries,(t,e)=>{t in this.entries||(this.entries[t]=e)}),this}eval(t=null,e={},r={}){var n={};return gt(this.entries,(i,s)=>{n[i]=s.eval(t,e,r)}),n}toString(t=null){var e=[];return gt(this.entries,(r,n)=>{e.push(r+tr.operators.sub+n.toString(t))}),"{"+e.join(tr.operators.sup)+"}"}static parse(t,e,r={},n=tr){if(Ht(t,"{","}")&&!Jt.match(t.trim(),[" "]).length){var i={},s=Jt.split(_t(t,"{","}"),[tr.operators.sup]).map(t=>t.trim()).filter(t=>t);return gt(s,(t,r)=>{var n=Jt.split(r,[tr.operators.sub],{limit:1});i[zt(n).trim()]=e(Ut(n).trim())}),new n(i)}}};tr.operators={sup:",",sub:":"};var er=tr;const rr=class extends wt{};Object.defineProperty(rr.prototype,"jsenType",{get:()=>"PresenceOperator"});var nr=rr;const ir=class extends nr{constructor(t,e,r="in"){super(),this.prop=t,this.reference=e,this.operator=r}eval(t=null,e={},r={}){var n=this.reference.getEval(t,e,r),i=this.prop.eval(t,e,r);if(!ht(n.context)&&!ht(n.name))return Wt.create(n.context).has(n.name,i,r);throw new Error('"'+this+'" is undefined!')}toString(t=null){return[this.prop.toString(t),this.operator,this.reference.toString(t)].join(" ")}static parse(t,e,r={},n=ir){var i=Jt.lex(t,n.operators);if(2===i.tokens.length){var s,a;if(!((s=e(i.tokens.shift().trim()))&&(a=e(i.tokens.shift().trim()))instanceof Et))throw new Error("Invalid presence check expression: "+t);return new n(s,a,i.matches[0].trim())}}};ir.operators=[" in "];var sr=ir;const ar=class extends Et{constructor(t,e,r=!1){super(),this.context=t,this.name=e,this.backticks=r}getEval(t=null,e={},r={}){var n=t,i=this.name;return this.context&&(i instanceof wt&&(i=i.eval(t,e,r)),n=this.context.eval(t,e,r)),{context:n,name:i}}eval(t=null,e={},r={}){var n=this.getEval(t,e,r);if(!ht(n.context)&&!ht(n.name))return Wt.create(n.context).get(n.name,r);throw new Error("[Reference Error]["+this+']: "'+(this.context||this)+'" is undefined!')}toString(t=null){var e=this.name;if(this.context){var r=this.context.toString(t);e instanceof wt?e="["+e.toString(t)+"]":this.backticks&&(e="`"+e+"`")}else{r=t;this.backticks&&(e="`"+e+"`")}return(r||"")+(r&&!e.startsWith("[")?ar.separator:"")+e}static parse(t,e,r={},n=ar){if(!Jt.match(t.trim(),[" "]).length){var i,s,a=Jt.split(t,[]),o=a.pop(),l=Jt.split(o.trim(),[n.separator],{preserveDelims:!0});if(l.length>1&&(o=l.pop().substr(1),a=a.concat(l)),Ht(o,"`","`")&&(o=_t(o,"`","`"),s=!0),a.length&&((i=e(a.join(""))).isContext=!0),Ht(o,"[","]")){if(!i)throw new Error("Invalid reference: "+t+"!");o=e(_t(o,"[","]"))}return new n(i,o,s)}}};ar.separator=".";var or=ar;const lr=class extends ye{constructor(t){super(),this.expr=t}eval(t=null,e={},r={}){return this.expr?this.expr.eval(t,e,r):void 0}toString(t=null){return this.expr?"return "+this.expr.toString(t):"return"}static parse(t,e,r={},n=lr){var i=t.toLowerCase();if(i.startsWith("return ")||"return"===i)return new n(e(t.substr(6).trim()))}};var cr=lr;const ur=class extends wt{};Object.defineProperty(ur.prototype,"jsenType",{get:()=>"StringType"});var hr=ur;const pr=class extends hr{constructor(t,e){super(),this.expr=t,this.quote=e}eval(){return this.expr}toString(){return this.quote+this.expr+this.quote}static parse(t,e,r={},n=pr){if(t=t.trim(),(Ht(t,'"','"')||Ht(t,"'","'"))&&!Jt.match(t,[" "]).length){var i=Ht(t,'"','"')?'"':"'";return new n(_t(t,i,i),i)}}};var fr=pr;const dr=class extends wt{};Object.defineProperty(dr.prototype,"jsenType",{get:()=>"Void"});var mr=dr;const vr=class extends mr{constructor(t){super(),this.val=t}eval(){return"null"===this.val.toLowerCase().trim()?null:void 0}toString(){return this.val}static parse(t,e,r={},n=vr){if("null"===(t=t.toLowerCase().trim())||"undefined"===t)return new n(t)}};var gr=vr;Tt.grammars={If:qe,Return:cr,Deletion:Re,Assignment:me,Presence:sr,Func:He,Abstraction:Zt,Condition:Ie,Assertion:ue,Comparison:Te,Math:Ke,Arr:re,Obj:er,Num:Ye,Str:fr,Bool:xe,Void:gr,Call:Se,Reference:or};var br=Tt,yr=function(t){return arguments.length&&(void 0===t||void 0===t)},wr=function(t){return"function"==typeof t},jr=function(t){return Array.isArray(t)||"object"==typeof t&&t||wr(t)},Er=function(t){return function(t){return null===t||""===t}(t)||yr(t)||!1===t||0===t||jr(t)&&!Object.keys(t).length},Or=function(t,e){return t.reduce((t,r)=>t||e(r),!1)},xr=function(t){return Array.isArray(t)},kr=function(t){return t instanceof String||"string"==typeof t&&null!==t},Sr=function(t){return!Array.isArray(t)&&"object"==typeof t&&t},Ar=function(t,e=!0){return xr(t)?t:!e&&Sr(t)?[t]:!1!==t&&0!==t&&Er(t)?[]:function(t){return!kr(t)&&!yr(t.length)}(t)?Array.prototype.slice.call(t):Sr(t)?Object.values(t):[t]},Pr=function(t,e,r=!1){for(var n=t.indexOf(e);n>-1&&(r||!1===r);)t.splice(n,1),r>0&&r--,n=t.indexOf(e);return t},Cr=function(t){return!0!==t&&!1!==t&&null!==t&&""!==t&&!isNaN(1*t)},Tr=function(t,e){var r=void 0;return jr(t)&&Object.keys(t).forEach((n,i)=>{!1!==r&&(r=e(Cr(n)?parseFloat(n):n,t[n],i))}),r},$r=function(t,e,r=null){return xr(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1===e.indexOf(t)):[]},Nr=function(t){return wr(t)||t&&"[object function]"==={}.toString.call(t)},Mr=function(t,e){var r=[];return function(t,e){e=(e=e||Object.prototype)&&!xr(e)?[e]:e;var r=[];for(t=t;t&&(!e||e.indexOf(t)<0)&&"default"!==t.name;)r.push(t),t=t?Object.getPrototypeOf(t):null;return r}(t,e).forEach(t=>{!function(t,...e){e.forEach(e=>{t.indexOf(e)<0&&t.push(e)})}(r,...Object.getOwnPropertyNames(t))}),r};var Ir=function(...t){return function t(e,r,n=!1,i=!1,s=!0){var a=0,o=e.shift();if((Cr(o)||!0===o||!1===o)&&(a=o,o=e.shift()),!e.length)throw new Error("_merge() requires two or more array/objects.");return e.forEach((e,l)=>{(jr(e)||Nr(e))&&(n?Mr(e):Object.getOwnPropertyNames(e)).forEach(c=>{var u=o[c],h=e[c];if((xr(u)&&xr(h)||Sr(u)&&Sr(h))&&(!0===a||a>0))o[c]=xr(u)&&xr(h)?[]:{},t([Cr(a)?a-1:a,o[c],u,h],r,n,i,s);else if(r(c,o,e,l))if(xr(o)&&xr(e))i?o[c]=h:o.push(h);else try{s?Object.defineProperty(o,c,Object.getOwnPropertyDescriptor(e,c)):o[c]=e[c]}catch(t){}})}),o}(t,(t,e,r)=>!0,!1,!1,!1)},Lr=function(t,e,r=null){return Ir(t,Sr(e)?e:function(t,e=null){var r={};return 2===arguments.length&&(xr(t)&&xr(e)?t.forEach((t,n)=>r[t]=e[n]):r[t]=e),r}(e,r))};var Fr={window:null,trap:tt,params:{rootAttribute:"root",scopedIdAttribute:"scoped:id",namespacePropertyName:"idrefs",inertContexts:[],inertSubjects:[]}};var Wr={window:null,trap:tt,params:{scriptElement:'script[type="scoped"]',globalBindingMethod:"bind",localBindingMethod:"bind",inertContexts:[]}};var Rr={window:null,trap:tt,params:{bundleElement:"partials-bundle",templateElement:"template",templateNamespaceAttribute:"name",slotReferenceAttribute:"partials-slot",templateReferenceAttribute:"template",slotElement:"partials-slot",slotNameAttribute:"name",itemsBindingMethod:"partialsItemize",itemIndexAttribute:"partials-index",keyValAttributes:[],listAttributes:[],inertContexts:["template"],inertSubjects:[],noinheritAttributes:["nocompose","name","template"],recomposeCallback:null}};Wr.params.inertContexts.push(Rr.params.slotElement,Rr.params.moduleElement),Fr.params.inertSubjects.push(Rr.params.slotElement);var Dr,Hr,_r={get window(){return Dr},set window(t){Dr=t,Fr.window=t,Wr.window=t,Rr.window=t},get trap(){return Hr},set trap(t){Hr=t,Fr.trap=t,Wr.trap=t,Rr.trap=t},params:{SCOPED_HTML:Fr.params,SCOPED_JS:Wr.params,HTML_PARTIALS:Rr.params}};_r.trap=tt;var qr,Br,Vr=_r,zr=[];function Ur(t){"complete"===Vr.window.document.readyState?t():zr.push(t),Vr.window.document.addEventListener("DOMContentLoaded",()=>{zr.forEach(t=>t()),zr.splice(0)},!1)}function Kr(t,e,r={}){Ur(()=>{Ar(Vr.window.document.querySelectorAll(t)).forEach(t=>e(t,1)),Vr.window.MutationObserver&&(r.on||(r.on="connected"),Jr(t,(t,r)=>{t.forEach(t=>e(t,r))},r))})}function Jr(t,e,r={}){t=Ar(t,!1);var n=(t,e)=>{if(e=e.filter(t=>t.matches),kr(t)){var n=e.filter(e=>e.matches(t));if(!1!==r.observeIndirectMutation&&(n=e.reduce((e,r)=>e.concat(Ar(r.querySelectorAll(t))),n)).length)return n}else{if(e.includes(t))return[t];if(!1!==r.observeIndirectMutation&&e.length)for(var i=t;i=i.parentNode;)if(e.includes(i))return[t]}},i=[],s=[],a=r.context||Vr.window.document.documentElement,o=new Vr.window.MutationObserver(a=>{if(!r.on||"connected"===r.on){var l=[];if(t.forEach(t=>{if(kr(t))l=a.reduce((e,r)=>e.concat(n(t,Ar(r.addedNodes))||[]),l);else{var e=a.reduce((e,r)=>e||(n(t,Ar(r.addedNodes))||[])[0],null);e&&l.push(e)}}),l.length)if(r.onceEach){var c=$r(l,i);c.length&&(i.push(...c),e(c,1))}else r.once&&o.disconnect(),e(l,1)}if(!r.on||"disconnected"===r.on){var u=[];if(t.forEach(t=>{if(kr(t))u=a.reduce((e,r)=>e.concat(n(t,Ar(r.removedNodes))||[]),u);else{var e=a.reduce((e,r)=>e||(n(t,Ar(r.removedNodes))||[])[0],null);e&&u.push(e)}}),u.length)if(r.onceEach){var h=$r(u,s);h.length&&(s.push(...h),e(h,0))}else r.once&&o.disconnect(),e(u,0)}});return o.observe(a,{childList:!0,subtree:!0}),o}function Qr(t,e,r=[]){var n=new Vr.window.MutationObserver(e),i={attributes:!0,attributeOldValue:!0};return r&&(i.attributeFilter=r),n.observe(t,i),n}function Gr(t,e=null){if(qr||(Br=Vr.window.document.querySelector('meta[name="chtml"]'))&&(qr=(Br.getAttribute("content")||"").split(";").filter(t=>t).reduce((t,e)=>{var r=e.split("=").map(t=>t.trim());return Lr(t,r[0],"true"===r[1]||"false"!==r[1]&&(Cr(r[1])?parseInt(r[1]):r[1]))},{})),2===arguments.length){!1===e?delete qr[t]:qr[t]=!0===e?"true":e;var r=Object.keys(qr).reduce((t,e)=>t+e+"="+qr[e]+";","");return Br.setAttribute("content",r),!0}return qr?qr[t]:void 0}function Yr(t){return Vr.window.CSS?Vr.window.CSS.escape(t):t.replace(/([\:@\~\$\&])/g,"\\$1")}var Zr=function(t){return t.filter((t,e,r)=>r.indexOf(t)===e)};function Xr(t,e,r=[]){return e.partialsSlottables?(Tr(e.partialsSlottables,(e,n)=>{if(t.partialsSlottables&&t.partialsSlottables[e]){var i=r.concat((t.getAttribute("noinherit")||"").split(" ").map(t=>t.trim()));tn(t.partialsSlottables[e],n,i,!1)}else t.append(n.clone(!0))}),t):t}function tn(t,e,r=[],n=!0){r=r.concat(Rr.params.noinheritAttributes),t.hasAttribute("noinherit")&&(r=r.concat((t.getAttribute("noinherit")||"*").split(" ").map(t=>t.trim())));var i=Rr.params.listAttributes.concat(["role","class"]);if(Zr(i).forEach(i=>{var s,a;if(!r.includes(i)&&!r.includes("*")&&(s=e.getAttribute(i))){if(a=t.getAttribute(i))var o=n?[a,s]:[s,a];else o=[s];t.setAttribute(i,Zr(o.join(" ").split(" ").map(t=>t.trim())).join(" ")),r.push(i)}}),Zr(Rr.params.keyValAttributes.concat("style")).forEach(i=>{var s,a;if(!r.includes(i)&&!r.includes("*")&&(s=e.getAttribute(i))){if(a=t.getAttribute(i))(o=n?[a,s]:[s,a])[0].trim().endsWith(";")||(o[0]=o[0]+";");else var o=[s];t.setAttribute(i,o.join(" ")),r.push(i)}}),!r.includes("*"))for(var s=0;s<e.attributes.length;s++){var a=e.attributes[s];r.includes(a.name)||t.hasAttribute(a.name)&&!n||t.setAttribute(a.name,a.value)}return t}const en=t=>(t[".chtml"]||(t[".chtml"]={}),t[".chtml"]);function rn(t,e,r=null,n=null){if(en(t).itemSlots||(en(t).itemSlots={}),t.template){var i=Rr.trap.keys(e),s=Rr.trap.keys(en(t).itemSlots);!s.length&&t.children.length&&(_arrFrom(t.children).forEach((e,r)=>{var n=e.getAttribute(Rr.params.itemIndexAttribute)||r;en(t).itemSlots[n]=e}),s=Rr.trap.keys(en(t).itemSlots));var a=new Rr.trap.MutationEvent(t,{type:"remodelling"});return Zr(i.concat(s)).forEach(s=>{var o,l=en(t).itemSlots[s];if(Rr.trap.has(e,s)){var c=Rr.trap.get(e,s),u=!1;if(!l){var h=t.template.partials[s];if(Er(h)&&Cr(s)&&(h=t.template.partials["#"]),Er(h)&&(h=t.template.partials.default),!Er(h)){l=h[0].cloneNode(!0);var p=function(t,e,r=!1,n=!1,i=!1){if(-1===t.indexOf(e))return r?[]:void 0;var s=!0===r?t.length-1:!1===r?1:r,a=i?t.lastIndexOf(e)+1:t.indexOf(e)+1,o=yr(e)?[]:t.slice(a,a+s);return n&&o.length<s&&o.length<t.length&&(Nr(n)&&!n(s-o.length)||(o=o.concat(t.slice(0,s-o.length)))),r?o:o[0]}(i,s+"",!0).reduce((e,r)=>e||en(t).itemSlots[r],null);if(p)p.before(l);else t.append(l);l.setAttribute(Rr.params.itemIndexAttribute,s),en(t).itemSlots[s]=l,u=!0}}l&&Nr(r)&&(o=r(l,c,s,u))}else if(l){Nr(n)&&(o=n(l));var f=()=>{l.remove(),delete en(t).itemSlots[s]};o instanceof Promise?o.then(f).catch(f):f()}a.response(o)}),a}}var nn=!1,sn=!1,an=function(){if(sn)return;sn=!0,function(){if(!nn){if(nn=!0,Rr.params.itemsBindingMethod in Rr.window.Element.prototype)throw new Error('The "Element" class already has a "'+Rr.params.itemsBindingMethod+'" property!');Object.defineProperty(Rr.window.Element.prototype,Rr.params.itemsBindingMethod,{value:function(t,e,r=null){return jr(t)&&t&&Rr.trap.observe(t,()=>rn(this,t,e,r),{data:!1,tags:["#HTMLPartials-itemize",this]}),jr(en(this).itemData)&&Rr.trap.unobserve(en(this).itemData,null,null,{tags:["#HTMLPartials-itemize",this]}),en(this).itemData=t,rn(this,t||{},e,r)}})}}();const t=!0===Gr("isomorphic")||1===Gr("isomorphic"),e=t=>(t[".chtml"]||(t[".chtml"]={}),t[".chtml"]);if("templates"in Rr.window.document)throw new Error('document already has a "templates" property!');const r=[];Object.defineProperty(Rr.window.document,"templates",{value:{}}),Object.defineProperty(Rr.window.document,"templatesReadyState",{value:"loading",writable:!0});const i=t=>{var e=t.getAttribute(Rr.params.templateNamespaceAttribute);e in Rr.window.document.templates&&console.warn('"'+e+'" already exists in document.templates!'),Rr.window.document.templates[e]=t};Kr("template["+Yr(Rr.params.templateNamespaceAttribute)+"]",t=>{var e;i(t),Qr(t,e=>{delete Rr.window.document.templates[e[0].oldValue],i(t)},[Rr.params.templateNamespaceAttribute]),(e=t.getAttribute("src"))&&!t.content.children.length&&r.push(new Promise((r,n)=>{Rr.window.fetch?Rr.window.fetch(e).then(t=>t.ok?t.text():Promise.reject(t.statusText)).then(e=>{t.innerHTML=e,r(t)}).catch(t=>{n("Error fetching the bundle at "+e+". ("+t+")")}):n("Error fetching the bundle at "+e+". (window.fetch() not supported by browser.)")}))});const s=t=>{(Er(e(t).partials)||t.closest("[live]"))&&(e(t).templates={},e(t).partials={},Ar((t.content||t).children).forEach(r=>{var n;if(r instanceof Rr.window.HTMLTemplateElement&&(n=r.getAttribute(Rr.params.templateNamespaceAttribute)))e(t).templates[n]=r;else{var i=r.getAttribute(Rr.params.slotReferenceAttribute)||"default";e(t).partials[i]||(e(t).partials[i]=[]),e(t).partials[i].push(r)}}))};if("templates"in Rr.window.HTMLTemplateElement.prototype)throw new Error('The "HTMLTemplateElement" class already has a "templates" property!');if(Object.defineProperty(Rr.window.HTMLTemplateElement.prototype,"templates",{get:function(){return s(this),e(this).templates}}),"partials"in Rr.window.HTMLTemplateElement.prototype)throw new Error('The "HTMLTemplateElement" class already has a "partials" property!');if(Object.defineProperty(Rr.window.HTMLTemplateElement.prototype,"partials",{get:function(){return s(this),e(this).partials}}),"template"in Rr.window.Element.prototype)throw new Error('The "Element" class already has a "template" property!');Object.defineProperty(Rr.window.Element.prototype,"template",{get:function(){var t=this.getAttribute(Rr.params.templateReferenceAttribute);if(t){if(e(this).templates||(e(this).templates={}),!e(this).templates[t]){var r=t.split("/").filter(t=>t).reduce((t,e)=>t?t.templates[e]:null,Rr.window.document);r&&(e(this).templates[t]=r)}return e(this).templates[t]}}}),Kr("["+Yr(Rr.params.templateReferenceAttribute)+"]",t=>{var r=Rr.params.inertContexts.concat(Rr.params.inertSubjects);Or(r,e=>t.closest(e))||Qr(t,()=>{Tr(e(t).slots,(t,e)=>{e.resolve()})},[Rr.params.templateReferenceAttribute])}),Rr.window.customElements.define(Rr.params.slotElement,class extends Rr.window.HTMLElement{hydrate(t,r,n){this.anchorNode=t,e(this).slottedElements=r,e(this).compositionBlock=n,this._bindSlotted(r),this._connectToCompositionBlock()}connectedCallback(){this.anchorNode||(this.anchorNode=t?Rr.window.document.createComment(this.outerHTML):Rr.window.document.createTextNode(""),this.after(this.anchorNode),e(this).compositionBlock=this.hasAttribute(Rr.params.templateReferenceAttribute)?null:this.parentNode.closest("["+Yr(Rr.params.templateReferenceAttribute)+"]"),this._connectToCompositionBlock(),Ur(()=>{Promise.all(r).then(()=>{this.resolve()})}))}_connectToCompositionBlock(){this.compositionBlock&&(e(this.compositionBlock).slots||(e(this.compositionBlock).slots={}),e(this.compositionBlock).slots[this.name]=this)}_bindSlotted(t){t.forEach(t=>{t.slotReference=this}),e(this).slottedObserver=Jr(t,t=>{t.forEach(t=>{t.parentNode||Pr(this.slottedElements,t),t.slotReference===this&&delete t.slotReference}),this.slottedElements.length||this.anchorNode.before(this)},{on:"disconnected",onceEach:!0})}resolve(){if(!Or(Rr.params.inertContexts,t=>this.closest(t))){var t,r;if(this.hasAttribute(Rr.params.templateReferenceAttribute))this.compositionBlock&&e(this.compositionBlock).slots[this.name]===this&&delete e(this.compositionBlock).slots[this.name],(t=this.template)&&(r=t.partials[this.name]);else{if(!this.compositionBlock)return void console.warn("Scoped slots must be found within template contexts. ["+this.name+"]",this);(t=this.compositionBlock.template)&&(r=t.partials[this.name])}t?this.fill(r):this.empty()}}fill(t){t=Ar(t,!1).map(t=>t.cloneNode(!0)),this.empty(!0),this.remove(),t.forEach(t=>{"@slot"===t.getAttribute(Rr.params.templateReferenceAttribute)&&(e(t).templates||(e(t).templates={}),e(t).templates["@slot"]=this),tn(t,this),t.getAttribute(Rr.params.slotReferenceAttribute)||t.setAttribute(Rr.params.slotReferenceAttribute,this.name),this.anchorNode.before(t)}),this._bindSlotted(t),this.slottedElements.push(...t)}empty(t=!1){if(this.slottedElements){var e=this.slottedElements;t&&this.slottedObserver&&(this.slottedObserver.disconnect(),e=this.slottedElements.splice(0)),e.forEach(t=>t.remove())}}get name(){return this.getAttribute(Rr.params.slotNameAttribute)||"default"}get compositionBlock(){return e(this).compositionBlock}get slottedElements(){return e(this).slottedElements||(e(this).slottedElements=[]),e(this).slottedElements}get partials(){return s(this),e(this).partials}static get observedAttributes(){return[Rr.params.slotNameAttribute]}});if("partials"in Rr.window.document)throw new Error('document already has a "partials" property!');Object.defineProperty(Rr.window.document,"partials",{value:{composition:n,utils:{itemize:rn}}}),r.forEach(t=>{t.catch(t=>{console.warn(t)})}),Ur(()=>{Promise.all(r).then(()=>{Rr.window.document.templatesReadyState="complete",Rr.window.document.dispatchEvent(new Rr.window.Event("templatesreadystatechange"))}),t&&Ar(Rr.window.document.querySelectorAll("["+Yr(Rr.params.slotReferenceAttribute)+"]")).forEach(t=>{if(!e(t.parentNode).slotsCan){var r=[];t.parentNode.childNodes.forEach(t=>{var e;if(1===t.nodeType&&t.matches("["+Yr(Rr.params.slotReferenceAttribute)+"]"))r.push(t);else if(8===t.nodeType&&(e=t.nodeValue.trim())&&e.startsWith("<"+Rr.params.slotElement)&&e.endsWith("</"+Rr.params.slotElement+">")){var n,i,s=Rr.window.document.createElement("div");s.innerHTML=e,(n=s.firstChild).matches(Rr.params.slotElement)&&(n.hasAttribute(Rr.params.templateReferenceAttribute)||(i=t.parentNode.closest("["+Yr(Rr.params.templateReferenceAttribute)+"]")),n.hydrate(t,r,i),r=[])}}),e(t.parentNode).slotsCan=!0}})})},on=!1,ln=Wt;var cn=!1,un=function(){if(cn)return;cn=!0;const t=!0===Gr("isomorphic")||1===Gr("isomorphic");var e=[];const r=(t,e,r)=>(Wr.trap?Wr.trap.set(t,e,r):t[e]=r,t),n=(t,e)=>(Wr.trap?Wr.trap.set(t,e):Object.keys(e).forEach(r=>{t[r]=e[r]}),t),i=function(t){return t[".chtml"]||(t[".chtml"]={}),t[".chtml"].scopedJS||(t[".chtml"].scopedJS={scope:new ln(r({super:new ln(r({super:a},"main",r({},"this",t)))},"main",{}))},t[".chtml"].scopedJS.scope.observe(Wr.trap,r=>{e||s(t,r)})),t[".chtml"].scopedJS},s=function(t,e){var r=i(t);if(r.AST){var n=r.AST.eval(r.scope,e,Wr.trap);Nr(n)&&n(r.scope.stack.main)}},a=new ln(r({},"main",{}),{errorLevel:Wr.params.errorLevel});if(Kr(Wr.params.scriptElement,r=>{if(!Or(Wr.params.inertContexts,t=>r.closest(t))){var n,a=r.parentNode,o=i(a);if(t||r.remove(),o.scriptElement!==r){if(o.scriptElement)throw new Error("An element must only have one scopedJS instance!");if(o.scriptElement=r,n=(r.textContent||"").trim()){var l=[],c=r.hasAttribute("explain")?r.getAttribute("explain"):Gr("script-explain");if(o.AST=class{static parse(t,e={}){var r;return(r=br.parse(t,[we],Ir({assert:!1},e)))||(r=new we([br.parse(t,null,e)])),r}}.parse(n,{explain:c?l:null}),c){var u=r.getAttribute("console-id");console.log("START ---------------------"+u),console.log(l),console.log("END ---------------------"+u)}var h=r.hasAttribute("errors")?parseInt(r.getAttribute("errors")):Gr("script-errors");o.scope.params.errorLevel=h,e&&!r.hasAttribute("autorun")?e.push(a):s(a)}}}}),Wr.params.localBindingMethod in Wr.window.Element.prototype)throw new Error('The "Element" class already has a "'+Wr.params.localBindingMethod+'" property!');if(Object.defineProperty(Wr.window.Element.prototype,Wr.params.localBindingMethod,{value:function(t,a=!0){!1===a?n(i(this).scope.stack.main,t):r(i(this).scope.stack,"main",t),e&&e.includes(this)&&(s(this),Pr(e,this),e.length||(e=null))}}),"bindings"in Wr.window.Element.prototype)throw new Error('The "Element" class already has a "bindings" property!');if(Object.defineProperty(Wr.window.Element.prototype,"bindings",{get:()=>{var t=i(this),r=this;return t.scopeInstanceProxy||(t.scopeInstanceProxy=new Proxy({},{set:(n,i,a)=>{if(Wr.trap)return EMV.trap.set(t.scope.stack.main,i,a);t.scope.stack.main[i]=a,e&&e.includes(r)&&(s(r),Pr(e,r),e.length||(e=null))}})),t.scopeInstanceProxy}}),Wr.params.globalBindingMethod in Wr.window.document)throw new Error('document already has a "'+Wr.params.globalBindingMethod+'" property!');if(Object.defineProperty(Wr.window.document,Wr.params.globalBindingMethod,{value:function(t,i=!0){!1===i?n(a.stack.main,t):r(a.stack,"main",t),e&&(e.forEach(t=>s(t)),e=null)}}),"bindings"in Wr.window.document)throw new Error('document already has a "bindings" property!');var o;Object.defineProperty(Wr.window.document,"bindings",{get:()=>(o||(o=new Proxy({},{set:(t,r,n)=>(Wr.trap?Wr.trap.set(a.stack.main,r,n):a.stack.main[r]=n,e&&(e.forEach(t=>s(t)),e=null),!0)})),o)})},hn=!1;Vr.window=window,function(){if(!hn){if(hn=!0,an(),function(){if(!on){if(on=!0,!Fr.window||!("Element"in Fr.window))throw new Error('The "Element" class not found in global context!');if(Fr.params.namespacePropertyName in Fr.window.Element.prototype)throw new Error('The "Element" class already has a "'+Fr.params.namespacePropertyName+'" property!');Object.defineProperty(Fr.window.Element.prototype,Fr.params.namespacePropertyName,{get:function(){if(!this[".sopedHTML-namespace"]){var t={};this[".sopedHTML-namespace"]=t,Fr.trap.link&&Fr.trap.link(this,Fr.params.namespacePropertyName,t)}return this[".sopedHTML-namespace"]}}),Kr("["+Yr(Fr.params.scopedIdAttribute)+"]",t=>{var e=Fr.params.inertContexts.concat(Fr.params.inertSubjects);if(!Or(e,e=>t.closest(e))){var r=t.getAttribute(Fr.params.scopedIdAttribute),n=t.parentNode.closest("["+Yr(Fr.params.rootAttribute)+"],html")[Fr.params.namespacePropertyName];n[r]!==t&&Fr.trap.set(n,r,t),Jr(t,()=>{n[r]===t&&Fr.trap.deleteProperty(n,r)},{on:"disconnected",once:!0})}})}}(),un(),"chtml"in Vr.window.document)throw new Error('document already has a "chtml" property!');Object.defineProperty(Vr.window.document,"chtml",{value:{ready:Ur,params:Vr.params}})}}();var pn=function(t){return Array.isArray(t)},fn=function(t){return t instanceof String||"string"==typeof t&&null!==t},dn=function(t){return arguments.length&&(void 0===t||void 0===t)},mn=function(t){return null===t||""===t},vn=function(t){return"function"==typeof t},gn=function(t){return Array.isArray(t)||"object"==typeof t&&t||vn(t)},bn=function(t){return!Array.isArray(t)&&"object"==typeof t&&t},yn=function(t,e=!0){return pn(t)?t:!e&&bn(t)?[t]:!1!==t&&0!==t&&function(t){return mn(t)||dn(t)||!1===t||0===t||gn(t)&&!Object.keys(t).length}(t)?[]:function(t){return!fn(t)&&!dn(t.length)}(t)?Array.prototype.slice.call(t):bn(t)?Object.values(t):[t]},wn=function(t){return vn(t)||t&&"[object function]"==={}.toString.call(t)},jn=function(t){return typeof t},En=function(t,e,r=null){if(!gn(t))throw new Error('Object must be of type subject; "'+jn(t)+'" given!');var n;return!(n=t[e])&&r&&(n=new r(t),Object.defineProperty(t,e,{get:()=>n,set:t=>{if(t!==n)throw new Error('Attempt to overwrite the "'+e+'" special property!')},enumerable:!1})),n},On=function(t,e,r=null){return pn(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1!==e.indexOf(t)):[]},xn=class{constructor(t){this.subject=t,this.fireables=[],this.currentlyFiring=[]}add(t){return this.fireables.push(t),t}forget(t){this.filter(t).forEach(t=>{this.fireables=this.fireables.filter(e=>e!==t)})}filter(t){return this.fireables.filter(e=>{var r=yn(e.filter),n=yn((e.params||{}).tags),i=yn(t.filter),s=yn((t.params||{}).tags);return!(t.originalHandler&&e.handler!==t.originalHandler||i.length&&(i.length!==r.length||On(r,i).length!==i.length)||s.length&&(s.length!==n.length||On(n,s).length!==s.length))})}},kn=function(t,...e){return e.forEach(e=>{t.indexOf(e)<0&&t.push(e)}),t},Sn=function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?"":t.substr(n+e.length)},An=function(t,e,r={},n={}){e=yn(e).slice();for(var i=t;!dn(i)&&!mn(i)&&e.length;){var s=e.shift();if(!(r.get?r.get(i,s):gn(i)?s in i:i[s]))return void(n.exists=!1);i=r.get?r.get(i,s):i[s]}return n.exists=!0,i},Pn=function(t,e=null){var r={};return 2===arguments.length&&(pn(t)&&pn(e)?t.forEach((t,n)=>r[t]=e[n]):r[t]=e),r},Cn=function(t){return!0!==t&&!1!==t&&null!==t&&""!==t&&!isNaN(1*t)},Tn=function(t){return vn(t)&&/^class\s?/.test(Function.prototype.toString.call(t))},$n=function(t,e){var r=[];return function(t,e){e=(e=e||Object.prototype)&&!pn(e)?[e]:e;var r=[];for(t=t;t&&(!e||e.indexOf(t)<0)&&"default"!==t.name;)r.push(t),t=t?Object.getPrototypeOf(t):null;return r}(t,e).forEach(t=>{kn(r,...Object.getOwnPropertyNames(t))}),r};function Nn(t,e,r=!1,n=!1,i=!0){var s=0,a=t.shift();if((Cn(a)||!0===a||!1===a)&&(s=a,a=t.shift()),!t.length)throw new Error("_merge() requires two or more array/objects.");return t.forEach((t,o)=>{(gn(t)||wn(t))&&(r?$n(t):Object.getOwnPropertyNames(t)).forEach(l=>{var c=a[l],u=t[l];if((pn(c)&&pn(u)||bn(c)&&bn(u))&&(!0===s||s>0))a[l]=pn(c)&&pn(u)?[]:{},Nn([Cn(s)?s-1:s,a[l],c,u],e,r,n,i);else if(e(l,a,t,o))if(pn(a)&&pn(t))n?a[l]=u:a.push(u);else try{i?Object.defineProperty(a,l,Object.getOwnPropertyDescriptor(t,l)):a[l]=t[l]}catch(t){}})}),a}var Mn=function(t,e=[],r=!0){var n=0;return Cn(arguments[0])&&gn(arguments[1])&&(n=arguments[0],t=arguments[1],e=arguments[2]||[]),Nn([n,{},t],(t,r,n)=>wn(e)?e(t):!pn(e)||!e.length||e.indexOf(t)>-1,!1,!1,r)},In=function(t,e,r=null,n={}){if(!t||!gn(t))throw new Error('Object must be of type subject; "'+jn(t)+'" given!');if(wn(e)&&(n=arguments.length>2?r:{},r=e,e=null),r&&!wn(r))throw new Error('Handler must be a function; "'+jn(r)+'" given!');var i;if(i=Xn(t,!1))return i.forget({filter:e,originalHandler:r,params:n})},Ln=function(t,e){var r=void 0;return gn(t)&&Object.keys(t).forEach((n,i)=>{!1!==r&&(r=e(Cn(n)?parseFloat(n):n,t[n],i))}),r},Fn=class{constructor(t,e){this.subject=t,this.handler=e.handler,this.filter=e.filter,this.params=e.params}disconnect(){this.disconnected=!0}},Wn=class extends Fn{fire(t,e,r){return this.disconnected||this.filter&&this.filter!==t.type?e(...Array.prototype.slice.call(arguments,2)):this.handler(t,r,e)}},Rn=class{constructor(t,e){if(this.subject=t,!e.type)throw new Error("Action type must be given in definition!");Ln(e,(t,e)=>{Object.defineProperty(this,t,{value:e,enumerable:!0})}),Object.seal(this)}},Dn=class extends xn{add(t){return super.add(new Wn(this.subject,t))}fire(t,e=null){if(t instanceof Rn||(t=new Rn(this.subject,t)),this.currentlyFiring.filter(e=>e.type===t.type&&e.name===t.name).length)return e?e():void 0;this.currentlyFiring.push(t);const r=(n,...i)=>{var s=this.fireables[n];return s?s.fire(t,(...t)=>r(n+1,...t),...i):e?e(...i):i[0]};var n=r(0);return this.currentlyFiring.pop(),n}},Hn=function(t,e=!0){return En(t,".interceptors",e?Dn:null)},_n=function(t,e){if(!e||!gn(e))throw new Error("Target must be of type object!");var r,n=function(r){return arguments.length?r:t?Object.getOwnPropertyNames(e):Object.keys(e)};return(r=Hn(e,!1))?r.fire({type:t?"ownKeys":"keys"},n):n()},qn=function(t){return _n(!1,...arguments)};function Bn(t,e=null,r=!1){if(!t||!gn(t))throw new Error("Target must be of type object!");var n=Xn(t);if(!n.build){n.build=!0;var i=!(e=yn(e)).length||e.filter(t=>t.startsWith(".")).length?qn(t).filter(t=>-1===t.indexOf(".")):e.map(t=>function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?t:t.substr(0,n)}(t,".")),s=e.length?e.map(t=>Sn(t,".")):null;i.forEach(e=>{var n=Gn(t,e);gn(n)&&(Un(t,e,n),(s||r)&&Bn(n,s,r))})}}var Vn=function(t,e,r=null,n={}){if(!t||!gn(t))throw new Error('Object must be of type subject; "'+jn(r)+'" given!');if(wn(e)&&(n=arguments.length>2?r:{},r=e,e=null),!wn(r))throw new Error('Callback must be a function; "'+jn(r)+'" given!');var i={filter:e,handler:r,params:n};(i.filter||i.params.subtree)&&Bn(t,i.filter,i.params.subtree);var s,a=Xn(t);return i.params.unique&&(s=a.filter({filter:e,params:n})).length?s[0]:a.add(i)},zn=class{constructor(t,e){if(this.subject=t,e.originalSubject||(this.originalSubject=t),!("type"in e))throw new Error("Delta type must be given in definition!");if(!("name"in e))throw new Error("Property name must be given in definition!");Ln(e,(t,e)=>{Object.defineProperty(this,t,{value:e,enumerable:!0})}),this.path||Object.defineProperty(this,"path",{value:e.name,enumerable:!0}),Object.seal(this)}},Un=function(t,e,r){var n;Vn(r,r=>{if(n=Xn(t,!1)){var i=r.map(r=>{var n={};return Ln(r,(t,e)=>{"subject"!==t&&"name"!==t&&"path"!==t&&(n[t]=e)}),n.name=e,n.path=e+"."+r.path,n.originalSubject=r.originalSubject,new zn(t,n)});return n.fire(i)}},{subtree:!0,unique:!0,tags:[Kn,e,t]})};const Kn={};var Jn=function(t,e,r){In(r,null,null,{tags:[Kn,e,t]})},Qn=function(t,...e){var r=e.map(t=>{if(!gn(t))throw new Error("Target must be of type object!");return{subject:t,subjectCopy:pn(t)?t.slice(0):Mn(t)}}),n=t(...e);return r.map(t=>{var e,r,n=Object.keys(t.subjectCopy),i=Object.keys(t.subject),s=[],a=(e=n.concat(i),e.filter((t,e,r)=>r.indexOf(t)===e)).map(e=>{if((!pn(t.subject)||"length"!==e&&".observer"!==e)&&t.subjectCopy[e]!==t.subject[e]){s.push(e);var r={name:e,related:s,buffered:!0};return i.includes(e)?(r.type="set",r.value=t.subject[e],n.includes(e)&&(r.isUpdate=!0)):r.type="del",n.includes(e)&&(r.oldValue=t.subjectCopy[e]),gn(t.subjectCopy[e])&&Jn(t.subject,e,t.subjectCopy[e]),gn(t.subject[e])&&Un(t.subject,e,t.subject[e]),r}}).filter(t=>t);if(a.length&&(r=Xn(t.subject,!1)))return r.fire(a)}),n},Gn=function(t,e,r=!1){if(!t||!gn(t))throw new Error("Target must be of type object!");var n,i,s=function(r){return arguments.length?r:pn(e)?Pn(e,t):t[e]};return n=(i=Hn(t))?i.fire({type:"get",name:e},s):s(),r&&pn(t)&&!Cn(e)&&wn(n)&&!Tn(n)?function(...e){return Qn(()=>n.apply(t,e),t)}:n},Yn=class extends Fn{constructor(t,e){if(super(t,e),this.filterArray=yn(this.filter),this.isDynamicFilter=this.filterArray.filter(t=>fn(t)&&(t.indexOf("..")>-1||t.startsWith(".")||t.endsWith("."))).length,this.isDynamicFilter&&this.filterArray.length>1)throw new Error('Only one "Dynamic Filter" must be observed at a time! "'+this.filterArray.join(", ")+'" have been bound together.')}fire(t){var e,r;if(!(this.disconnected||this.params.type&&(e=t,r=t=>this.params.type===t.type,!e.reduce((t,e)=>t||r(e),!1))))if(this.filterArray.length){var n=[];this.filterArray.filter((e,r)=>(e=fn(e)?e.replace(/`/g,""):e,n[r]=[],t.filter(t=>{var i=t.path.split("."),s=this.isDynamicFilter?e.split(".").map((t,e)=>t||i[e]||"").join("."):e;return kn(n[r],s),(s===t.name||!1!==this.params.suptree&&(s+".").startsWith(t.path+".")||this.params.subtree&&(t.path+".").startsWith(s+"."))&&(!this.isDynamicFilter||!s.split(".").filter(t=>!t).length)}).length)).length&&function(t){return t.reduce((t,e)=>{var r=[];return t.forEach(t=>{yn(e).forEach(e=>{var n=t.slice();n.push(e),r.push(n)})}),r},[[]])}(n).forEach(e=>{var r=this.formatChanges(e,t);this.handler(pn(this.filter)?r:r[0])})}else this.filter||!this.params.subtree&&t.filter(t=>t.path===t.name).length!==t.length||this.handler(t)}formatChanges(t,e){return!1===this.params.data?[]:t.map(t=>{var r=e.reduce((e,r)=>{if(e)return e;if(t+""==r.path+"")return r;if((t+".").startsWith(r.path+".")){var n=fn(t)?Sn(t,r.path+".").split("."):t;e=new zn(r.subject,{type:r.type,name:t});return("del"===r.type||r.isUpdate)&&(e.oldValue=An(r.oldValue,n,{get:Gn})),"del"!==r.type&&(e.value=An(r.value,n,{get:Gn})),e}},null);return r||(r=new zn(this.subject,{type:"get",name:t,value:An(this.subject,fn(t)?t.split("."):t,{get:Gn})})),r})}},Zn=class extends xn{add(t){return super.add(new Yn(this.subject,t))}fire(t){return t=yn(t,!1).map(t=>t instanceof zn?t:new zn(this.subject,t)),!this.currentlyFiring.filter(e=>t.filter(t=>e.type===t.type&&e.name===t.name).length).length&&(this.currentlyFiring.push(...t),this.fireables.forEach(e=>{if(t.propagationStopped)return!1;e.fire(t)}),t.forEach(t=>function(t,e,r=!1){for(var n=t.indexOf(e);n>-1&&(r||!1===r);)t.splice(n,1),r>0&&r--,n=t.indexOf(e);return t}(this.currentlyFiring,t)),!0)}},Xn=function(t,e=!0){return En(t,".observers",e?Zn:null)},ti=function(t,e){if(!t||!gn(t))throw new Error("Target must be of type object!");var r,n=function(r){return arguments.length?r:e in t};return(r=Hn(t,!1))?r.fire({type:"has",name:e},n):n()},ei=function(t,e,r,n=null,i=null){if(!e||!gn(e))throw new Error("Target must be of type object!");bn(r)&&(i=n,n=null);var s=Hn(e,!1),a=Xn(e,!1);const o=(r,n,i,o)=>{if(-1!==r.indexOf("."))throw new Error("Property names with a dot are not supported!");var l,c="set";t&&(c="def",n=(l=n||{}).value);var u={name:r,type:c,value:n,related:i,detail:o};ti(e,r)&&(u.isUpdate=!0,u.oldValue=Gn(e,r));var h=function(t){return arguments.length?t:(l?Object.defineProperty(e,r,l):e[r]=n,!0)};if(s){var p=l?{type:"def",name:r,descriptor:l,related:i,detail:o}:{type:"set",name:r,value:n,related:i,detail:o};u.success=s.fire(p,h)}else u.success=h();return u.success&&u.value!==u.oldValue&&(gn(u.oldValue)&&Jn(e,r,u.oldValue),gn(u.value)&&(Un(e,r,u.value),a&&a.build&&Bn(u.value,null,!0))),u};var l,c,u=[];pn(r)||(fn(r)||((c=r)instanceof Number||"number"==typeof c))&&(l=yn(r))?u=l.map(t=>o(t,n,l,i)):bn(r)&&(l=Object.keys(r))&&(u=l.map(t=>o(t,r[t],l,i)));var h=u.filter(t=>t.success);return a&&a.fire(h),h.length>0},ri=function(t,e,r=null,n=null){return ei(!1,...arguments)},ni=function(t,e,r=null){if(!t||!gn(t))throw new Error("Target must be of type object!");var n,i=(e=yn(e)).map(n=>{if(-1!==n.indexOf("."))throw new Error("Property names with a dot are not supported!");var i={name:n,type:"del",related:e,detail:r};ti(t,n)&&(i.oldValue=Gn(t,n));var s,a=function(e){return arguments.length?e:(delete t[n],!0)};return(s=Hn(t,!1))?i.success=s.fire({type:"del",name:n,related:e},a):i.success=a(),i.success&&gn(i.oldValue)&&Jn(t,n,i.oldValue),i}).filter(t=>t.success);return(n=Xn(t,!1))&&n.fire(i),i.length>0},ii=function(t,e,r=null,n=null){return ei(!0,...arguments)},si=function(t){return _n(!0,...arguments)};var ai={set:ri,get:Gn,has:ti,deleteProperty:ni,del:ni,defineProperty:ii,def:ii,keys:qn,ownKeys:si,intercept:function(t,e,r,n={}){if(!gn(t))throw new Error('Object must be of type subject; "'+jn(r)+'" given!');if(wn(e)&&(n=arguments.length>2?r:{},r=e,e=null),!wn(r))throw new Error('Callback must be a function; "'+jn(r)+'" given!');var i,s=Hn(t),a={filter:e,handler:r,params:n};return a.params.unique&&(i=s.filter(a)).length?i[0]:s.add(a)},unintercept:function(t,e,r=null,n={}){if(!t||!gn(t))throw new Error('Object must be of type subject; "'+jn(t)+'" given!');if(wn(e)&&(n=arguments.length>2?r:{},r=e,e=null),r&&!wn(r))throw new Error('Handler must be a function; "'+jn(r)+'" given!');var i;if(i=Hn(t,!1))return i.forget({filter:e,originalHandler:r,params:n})},proxy:function(t){if(!gn(t))throw new Error('Object must be of type subject; "'+jn(t)+'" given!');var e=new Proxy(t,{get:(t,r)=>{var n=Gn(t,r);return wn(n)&&!Tn(n)?n.bind(e):n},set:ri,has:ti,deleteProperty:ni,defineProperty:ii,ownKeys:si});return e},observe:Vn,unobserve:In,closure:Qn,init:function(t,e){yn(e).forEach(e=>{var r,n,i=t[e],s=Object.getOwnPropertyDescriptor(t,e)||{enumerable:!(e in t)};"value"in s&&delete s.value,"writable"in s&&delete s.writable,s.get=()=>{if(r)return i;r=!0;var n=Gn(t,e);return r=!1,n},s.set=r=>{if(n)return i=r,!0;n=!0;ri(t,e,r);return n=!1,!0},Object.defineProperty(t,e,s)})},build:Bn,link:Un,unlink:Jn},oi=function(t){return"function"==typeof t},li=function(t){return oi(t)||t&&"[object function]"==={}.toString.call(t)},ci=function(t){return!Array.isArray(t)&&"object"==typeof t&&t},ui=function(t){return t instanceof String||"string"==typeof t&&null!==t},hi=function(t,e,r=null){for(var n=[],i=t.length,s=0;s<i;s++)n.push({index:s,value:r?r(t[s]):t[s]});return n.sort((function(t,e){return ui(t.value)&&"".localeCompare?t.value.localeCompare(e.value):t.value===e.value?0:t.value>e.value?1:-1})),"desc"===(e||"").trim().toLowerCase()&&(n=n.reverse()),n.map(e=>t[e.index])},pi=function(t){return Array.isArray(t)},fi=function(t,e,r=null){return pi(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1===e.indexOf(t)):[]},di=function(t){return Array.isArray(t)||"object"==typeof t&&t||oi(t)},mi=function(t){return null===t||""===t},vi=function(t){return arguments.length&&(void 0===t||void 0===t)},gi=function(t){return mi(t)||vi(t)||!1===t||0===t||di(t)&&!Object.keys(t).length},bi=function(t){return!0!==t&&!1!==t&&null!==t&&""!==t&&!isNaN(1*t)},yi=function(t,...e){return e.forEach(e=>{t.indexOf(e)<0&&t.push(e)}),t},wi=function(t,e){var r=[];return function(t,e){e=(e=e||Object.prototype)&&!pi(e)?[e]:e;var r=[];for(t=t;t&&(!e||e.indexOf(t)<0)&&"default"!==t.name;)r.push(t),t=t?Object.getPrototypeOf(t):null;return r}(t,e).forEach(t=>{yi(r,...Object.getOwnPropertyNames(t))}),r};function ji(t,e,r=!1,n=!1,i=!0){var s=0,a=t.shift();if((bi(a)||!0===a||!1===a)&&(s=a,a=t.shift()),!t.length)throw new Error("_merge() requires two or more array/objects.");return t.forEach((t,o)=>{(di(t)||li(t))&&(r?wi(t):Object.getOwnPropertyNames(t)).forEach(l=>{var c=a[l],u=t[l];if((pi(c)&&pi(u)||ci(c)&&ci(u))&&(!0===s||s>0))a[l]=pi(c)&&pi(u)?[]:{},ji([bi(s)?s-1:s,a[l],c,u],e,r,n,i);else if(e(l,a,t,o))if(pi(a)&&pi(t))n?a[l]=u:a.push(u);else try{i?Object.defineProperty(a,l,Object.getOwnPropertyDescriptor(t,l)):a[l]=t[l]}catch(t){}})}),a}var Ei=function(t,e,r=null){return function(...t){return ji(t,(t,e,r)=>!0,!1,!1,!1)}(t,ci(e)?e:function(t,e=null){var r={};return 2===arguments.length&&(pi(t)&&pi(e)?t.forEach((t,n)=>r[t]=e[n]):r[t]=e),r}(e,r))};class Oi{constructor(t,e={}){const r=this.constructor;this.pathMappingScheme=e;var n=(t,e)=>ci(t)&&ci(e)?n(Object.keys(t),Object.keys(e))&&n(Object.values(t),Object.values(e)):pi(t)&&pi(e)?t.length===e.length&&t.reduce((t,r,n)=>t&&r===e[n],!0):t===e;ai.intercept(this,"set",(t,e,n)=>{if("href"===t.query&&fi(xi,t.related).length){var i=r.parseUrl(t.value);return ai.set(this,i),!1}return n()}),ai.observe(this,["search","searchmap","pathname","pathmap","pathsplit","href"],t=>{var[e,i,s,a,o,l]=t.map(t=>t.value),[c,u,h,p,f,d]=t.map(t=>t.oldValue);if("set"!==t[1].type||t[1].isUpdate){var m={},v="get"===t[1].type&&n(i,u);e!==c||v||(m.search=r.toSearch(i),m.search===this.search&&delete m.search),e!==c&&v&&(m.searchmap=r.toSearchmap(e),n(m.searchmap,this.searchmap)&&delete m.searchmap);var g="get"===t[3].type&&n(a,p),b="get"===t[4].type&&n(o,f);return s!==h||g&&b||(m.pathname=r.toPathname(b?a:o,this.pathname,this.pathMappingScheme),m.pathname===this.pathname&&delete m.pathname),!g||s===h&&b||(m.pathmap=r.toPathmap(s!==h?s:o,this.pathMappingScheme),n(m.pathmap,this.pathmap)&&delete m.pathmap),!b||s===h&&g||(m.pathsplit=r.toPathsplit(s!==h?s:a,this.pathname,this.pathMappingScheme),n(m.pathsplit,this.pathsplit)&&delete m.pathsplit),l!==d||gi(m)?gi(m)&&l!==d&&(m=r.parseUrl(l)):(m.href=this.origin,m.href+=m.pathname||s,m.href+=m.search||e||"",m.href===this.href&&delete m.href),gi(m)?void 0:ai.set(this,m)}},{subtree:!0}),ai.observe(this,t=>{t.forEach(t=>{if(t&&t.detail){if(!di(t.detail))throw new Error('"e.detail" can only be of type object.');if(t.detail.request&&!ci(t.detail.request))throw new Error('"e.detail.request" can only be of type object.')}})}),ai.set(this,Oi.copy(t))}toString(){return this.href}static from(t,e={}){return new this(ci(t)?t:this.parseUrl(t),e)}static copy(t){return function(t,e=[],r=!0){var n=0;return bi(arguments[0])&&di(arguments[1])&&(n=arguments[0],t=arguments[1],e=arguments[2]||[]),ji([n,{},t],(t,r,n)=>li(e)?e(t):!pi(e)||!e.length||e.indexOf(t)>-1,!1,!1,r)}(t,xi,!1)}static parseUrl(t){var e=window.document.createElement("a");return e.href=t,xi.reduce((t,r)=>Ei(t,r,e[r]),{})}static toSearchmap(t){return(t.startsWith("?")?t.substr(1):t).split("&").filter(t=>t).map(t=>t.split("=").map(t=>t.trim())).reduce((t,e)=>Ei(t,e[0],e[1]),{})}static toSearch(t){return Object.keys(t).length?"?"+Object.keys(t).map(e=>e+"="+t[e]).join("&"):""}static toPathmap(t,e={}){var r=ui(t)?t.split("/").filter(t=>t):t,n=ui(t)?t:"/"+r.join("/")+"/";return(e=hi(Object.keys(e),"desc").reduce((t,r)=>t||((n+"/").startsWith("/"===r?r:"/"+r.split("/").filter(t=>t).join("/")+"/")?e[r]:null),null))?r.reduce((t,r,n)=>e[n]?Ei(t,e[n],r):t,{}):{}}static toPathsplit(t,e=null,r={}){if(ui(t))return t.split("/").filter(t=>t);if(!e)throw new Error('A "referenceUrl" must be given to properly determine a path-naming scheme.');r=hi(Object.keys(r),"desc").reduce((t,n)=>t||((e+"/").startsWith("/"===n?n:"/"+n.split("/").filter(t=>t).join("/")+"/")?r[n]:null),null);if(fi(Object.keys(t),r).length)throw new Error("The given pathmap contains keys ("+Object.keys(t).join(", ")+") not recognized by the implied path-naming scheme ("+r.join(", ")+")");return r?r.map(e=>t[e]).filter(t=>t):[]}static toPathname(t,e=null,r={}){if(ci(t)){if(!e)throw new Error('A "referenceUrl" must be given to properly determine a path-naming scheme.');t=Self.toPathsplit(t,e,r)}return"/"+t.join("/")+"/"}}const xi=["hash","host","hostname","href","origin","pathname","port","protocol","search"];class ki{constructor(t={}){this.routeTree=t}async route(t){var e=this.routeTree,r=t.url.pathname.split("/").filter(t=>t);const n=async function(i,s){var a;if(0===i)a=e["/"];else if(r[i-1]){var o="/"+r.slice(0,i).join("/");a=e[o]}if(a){var l=(...t)=>n(i+1,...t);return l.path=r.slice(i).join("/"),await a(t,s,l)}return 1===arguments.length?window.fetch(t.url.toString(),t.headers):s};return n(0)}}var Si=function(t,e){return function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?t:t.substr(0,n)}(t,e,!0)},Ai=function(t){return Array.isArray(t)},Pi=function(t){return t instanceof String||"string"==typeof t&&null!==t},Ci=function(t){return arguments.length&&(void 0===t||void 0===t)},Ti=function(t){return"function"==typeof t},$i=function(t){return Array.isArray(t)||"object"==typeof t&&t||Ti(t)},Ni=function(t){return function(t){return null===t||""===t}(t)||Ci(t)||!1===t||0===t||$i(t)&&!Object.keys(t).length},Mi=function(t){return!Array.isArray(t)&&"object"==typeof t&&t},Ii=function(t,e=!0){return Ai(t)?t:!e&&Mi(t)?[t]:!1!==t&&0!==t&&Ni(t)?[]:function(t){return!Pi(t)&&!Ci(t.length)}(t)?Array.prototype.slice.call(t):Mi(t)?Object.values(t):[t]},Li=function(t){return!0!==t&&!1!==t&&null!==t&&""!==t&&!isNaN(1*t)},Fi=function(t,e){var r=void 0;return $i(t)&&Object.keys(t).forEach((n,i)=>{!1!==r&&(r=e(Li(n)?parseFloat(n):n,t[n],i))}),r},Wi=function(t){return Ti(t)||t&&"[object function]"==={}.toString.call(t)},Ri=function(t,...e){return e.forEach(e=>{t.indexOf(e)<0&&t.push(e)}),t},Di=function(t,e){var r=[];return function(t,e){e=(e=e||Object.prototype)&&!Ai(e)?[e]:e;var r=[];for(t=t;t&&(!e||e.indexOf(t)<0)&&"default"!==t.name;)r.push(t),t=t?Object.getPrototypeOf(t):null;return r}(t,e).forEach(t=>{Ri(r,...Object.getOwnPropertyNames(t))}),r};function Hi(t,e,r=!1,n=!1,i=!0){var s=0,a=t.shift();if((Li(a)||!0===a||!1===a)&&(s=a,a=t.shift()),!t.length)throw new Error("_merge() requires two or more array/objects.");return t.forEach((t,o)=>{($i(t)||Wi(t))&&(r?Di(t):Object.getOwnPropertyNames(t)).forEach(l=>{var c=a[l],u=t[l];if((Ai(c)&&Ai(u)||Mi(c)&&Mi(u))&&(!0===s||s>0))a[l]=Ai(c)&&Ai(u)?[]:{},Hi([Li(s)?s-1:s,a[l],c,u],e,r,n,i);else if(e(l,a,t,o))if(Ai(a)&&Ai(t))n?a[l]=u:a.push(u);else try{i?Object.defineProperty(a,l,Object.getOwnPropertyDescriptor(t,l)):a[l]=t[l]}catch(t){}})}),a}var _i=function(...t){return Hi(t,(t,e,r)=>!0,!1,!1,!1)};var qi={window:null,trap:Reflect,params:{}};function Bi(t,e=qi.window.document,r=!1){var n,i=r?"querySelectorAll":"querySelector";try{n=e[i](t)}catch(r){try{n=e[i](t.replace(/\:is\(/g,":matches("))}catch(r){try{n=e[i](t.replace(/\:is\(/g,":-webkit-any("))}catch(r){try{n=e[i](t.replace(/\:is\(/g,":-moz-any("))}catch(t){throw t}}}}return n}var Vi=function(t){if(Pi(t)){var e;if(t.trim().startsWith("<")){var r=qi.window.document.createElement("div");r.innerHtml=t,e=r.firstChild}else e=Bi(t);return e}return t},zi=function(t){return t.filter((t,e,r)=>r.indexOf(t)===e)};function Ui(t,e,r=null,n=null,i=!0){if(i&&qi.trap.observe&&qi.trap.unobserve&&($i(e)&&qi.trap.observe(e,()=>Ui(t,e,r,n,!1),{data:!1,tags:["#playui-itemize",Ui]}),$i(Ki(t).itemData)&&qi.trap.unobserve(Ki(t).itemData,null,null,{tags:["#playui-itemize",Ui]}),Ki(t).itemData=e),Ki(t).itemSlots||(Ki(t).itemSlots={}),!t.template)return;const s=qi.trap.keys||Object.keys;var a=s(e),o=s(Ki(t).itemSlots);!o.length&&t.children.length&&(_arrFrom(t.children).forEach((e,r)=>{var n=e.getAttribute(qi.params.itemIndexAttribute)||r;Ki(t).itemSlots[n]=e}),o=s(Ki(t).itemSlots));var l=[];return zi(a.concat(o)).forEach(i=>{var s,o=Ki(t).itemSlots[i];if(qi.trap.has(e,i)){var c=qi.trap.get(e,i),u=!1;if(!o){var h=t.template.partials[i];if(Ni(h)&&Li(i)&&(h=t.template.partials["#"]),Ni(h)&&(h=t.template.partials.default),!Ni(h)){o=h[0].cloneNode(!0);var p=function(t,e,r=!1,n=!1,i=!1){if(-1===t.indexOf(e))return r?[]:void 0;var s=!0===r?t.length-1:!1===r?1:r,a=i?t.lastIndexOf(e)+1:t.indexOf(e)+1,o=Ci(e)?[]:t.slice(a,a+s);return n&&o.length<s&&o.length<t.length&&(Wi(n)&&!n(s-o.length)||(o=o.concat(t.slice(0,s-o.length)))),r?o:o[0]}(a,i+"",!0).reduce((e,r)=>e||Ki(t).itemSlots[r],null);if(p)p.before(o);else t.append(o);o.setAttribute(qi.params.itemIndexAttribute,i),Ki(t).itemSlots[i]=o,u=!0}}o&&Wi(r)&&(s=r(o,c,i,u))instanceof Promise&&l.push(s)}else if(o){Wi(n)&&(s=n(o));var f=()=>{o.remove(),delete Ki(t).itemSlots[i]};s instanceof Promise?l.push(s.then(f).catch(f)):f()}}),l}const Ki=t=>(t[".stub"]||(t[".stub"]={}),t[".stub"]);function Ji(t,e=document){return Bi(t,e,!0)}var Qi=function(t,e=null){var r={};return 2===arguments.length&&(Ai(t)&&Ai(e)?t.forEach((t,n)=>r[t]=e[n]):r[t]=e),r},Gi=function(t,e,r=null){t[".firedom"].data||Object.defineProperty(t,".firedom",{value:{data:{}}});var n=t[".firedom"].data;if(2===arguments.length){if(Pi(e))return n[e];if(Ai(e)){var i={};return e.forEach(t=>{i[t]=n[t]}),i}}var s=e;return Mi(e)||(s=Qi(e,r)),Fi(s,(t,e)=>{Ci(e)?delete n[t]:n[t]=e}),t};const Yi={readCallbacks:[],writeCallbacks:[],_run:function(){qi.window.requestAnimationFrame(()=>{Yi.readCallbacks.forEach((t,e)=>{t&&!t()&&(Yi.readCallbacks[e]=null)}),Yi.writeCallbacks.forEach((t,e)=>{t&&!t()&&(Yi.writeCallbacks[e]=null)}),Yi._run()})},onread:function(t,e=!1){if(e)return new Promise((e,r)=>{Yi.readCallbacks.push(()=>{t(e,r)})});Yi.readCallbacks.push(t)},onwrite:function(t,e=!1){if(e)return new Promise((e,r)=>{Yi.writeCallbacks.push(()=>{t(e,r)})});Yi.writeCallbacks.push(t)},cycle:function(t,e,r){Yi.onread(()=>{var n=t(r);if(n){var i=n=>{Yi.onwrite(()=>{var i=e(n,r);if(i){var s=r=>{Yi.cycle(t,e,r)};i instanceof qi.window.Promise?i.then(s):s()}})};n instanceof qi.window.Promise?n.then(i):i()}})}};var Zi=Yi,Xi=function(t,e){return"string"!=typeof t?t:t.replace(/\w\S*/g,(function(t){return t.charAt(0).toUpperCase()+(void 0!==typeof e&&e?t.substr(1).toLowerCase():t.substr(1))}))},ts=function(t,e,r=null){return Ai(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1===e.indexOf(t)):[]},es=function(t,e,r=!1){for(var n=t.indexOf(e);n>-1&&(r||!1===r);)t.splice(n,1),r>0&&r--,n=t.indexOf(e);return t},rs=function(t,...e){return e.forEach(e=>es(t,e)),t},ns=function(t,e,r=null){return Ai(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1!==e.indexOf(t)):[]},is=function(t,e,r=null,n=null){if(2===arguments.length){if(Pi(e))return t.getAttribute(e);if(Ai(e)){var i={};return e.forEach(e=>{i[e]=t.getAttribute(e)}),i}}var s=e;return Mi(s)?n=r:s=Qi(e,r),Fi(s,(r,i)=>{if(arguments.length>3||Mi(e)&&arguments.length>2){var s=t.getAttribute(r),a=s?s.split(" ").map(t=>t.trim()).filter(t=>t):[],o=Pi(i)?i.trim().split(" ").map(t=>t.trim()).filter(t=>t):Ii(i);!n&&ns(a,o).length?t.setAttribute(r,rs(a,...o).join(" ")):n&&ts(a,o).length&&t.setAttribute(r,zi(a.concat(o)).join(" "))}else!1===i?t.removeAttribute(r):t.setAttribute(r,!0===i?"true":i)}),t},ss=function(t,e,r=null,n=null){return 2===arguments.length?Zi.onwrite((t,e)=>{try{t(is(...arguments))}catch(t){e(t)}},!0):Zi.onread((t,e)=>{try{t(is(...arguments))}catch(t){e(t)}},!0)},as=function(t,...e){return ss(t,"class",...e)},os=function(t,...e){return is(t,"class",...e)},ls=function(t,e=null){return arguments.length>1?(Pi(e)?t.innerHTML=e:(t.innerHTML="",Ci(e)||t.append(e)),t):t.innerHTML},cs=function(t,e=null){return arguments.length>1?Zi.onwrite((t,e)=>{try{t(ls(...arguments))}catch(t){e(t)}},!0):Zi.onread((t,e)=>{try{t(ls(...arguments))}catch(t){e(t)}},!0)},us=function(t,e=null){return arguments.length>1?(Ci(e)&&(e=""),t.innerText=e,t):t.innerText},hs=function(t,e=null){return arguments.length>1?Zi.onwrite((t,e)=>{try{t(us(...arguments))}catch(t){e(t)}},!0):Zi.onread((t,e)=>{try{t(us(...arguments))}catch(t){e(t)}},!0)},ps=function(t,...e){return Ci(e[0])&&(e[0]=""),t.append(...e),t},fs=function(t,...e){return Zi.onwrite((r,n)=>{try{r(ps(t,...e))}catch(t){n(t)}},!0)},ds=function(t,...e){return Ci(e[0])&&(e[0]=""),t.prepend(...e),t},ms=function(t,...e){return Zi.onwrite((t,r)=>{try{t(ds(...e))}catch(t){r(t)}},!0)},vs=function(t,e,r={}){t=Ii(t,!1);var n=(t,e)=>{if(e=e.filter(t=>t.matches),Pi(t)){var n=e.filter(e=>e.matches(t));if(!1!==r.observeIndirectMutation&&(n=e.reduce((e,r)=>e.concat(Ii(r.querySelectorAll(t))),n)).length)return n}else{if(e.includes(t))return[t];if(!1!==r.observeIndirectMutation&&e.length)for(var i=t;i=i.parentNode;)if(e.includes(i))return[t]}},i=[],s=[],a=r.context||qi.window.document.documentElement,o=new qi.window.MutationObserver(a=>{if(!r.on||"connected"===r.on){var l=[];if(t.forEach(t=>{if(Pi(t))l=a.reduce((e,r)=>e.concat(n(t,Ii(r.addedNodes))||[]),l);else{var e=a.reduce((e,r)=>e||(n(t,Ii(r.addedNodes))||[])[0],null);e&&l.push(e)}}),l.length)if(r.onceEach){var c=ts(l,i);c.length&&(i.push(...c),e(c,1))}else r.once&&o.disconnect(),e(l,1)}if(!r.on||"disconnected"===r.on){var u=[];if(t.forEach(t=>{if(Pi(t))u=a.reduce((e,r)=>e.concat(n(t,Ii(r.removedNodes))||[]),u);else{var e=a.reduce((e,r)=>e||(n(t,Ii(r.removedNodes))||[])[0],null);e&&u.push(e)}}),u.length)if(r.onceEach){var h=ts(u,s);h.length&&(s.push(...h),e(h,0))}else r.once&&o.disconnect(),e(u,0)}});return o.observe(a,{childList:!0,subtree:!0}),o},gs=function(t,e,r={}){return r.on="connected",vs(t,t=>{e(t)},r)},bs=function(t,e,r={}){return r.on="disconnected",vs(t,t=>{e(t)},r)},ys=function(t,e,r=[]){var n=new qi.window.MutationObserver(t=>{t.forEach(t=>{e(t)})}),i={attributes:!0,attributeOldValue:!0};return r&&(i.attributeFilter=r),n.observe(t,i),n},ws=function(t,e){return void 0===t?"":t.split(/(?=[A-Z])/).join(e||" ")},js=function(t){var e,r,n=(r=!0,e=Xi((e=t).replace(/-/g," ")).replace(/ /g,""),r?e:e[0].toLowerCase()+e.substr(1));if(qi.params.vendorPrefix.api+n in qi.window.document.body.style)return qi.params.vendorPrefix.css+ws(t,"-")},Es=function(t,e,r){var n={},i=Ii(t);return Fi(i,(t,s)=>{((t,s)=>{var a=ws(s,"-").toLowerCase();if("auto"===r)n[a]=e(js(a)||a,i[t]);else{if(r){var o=js(a);o&&(n[o]=e(o,i[t]))}n[a]=e(a,i[t])}})(t,s)}),Ai(t)||r||"size"===t||"offsets"===t?n:n[t]};const Os=class{constructor(t){Fi(t,(t,e)=>{["rotate","scale","skew","translate"].includes(t)&&(this[t]=Ai(e)?new Os[t](...e):new Os[t](e))})}toString(){return["rotate","scale","skew","translate"].reduce((t,e)=>t+(this[e]&&this[e].length?" "+this[e]:""),"").trim()}static parse(t){var e=function(t){return Math.round(100*t)/100},r=function(t){var r=180*t/Math.PI;return e(r)},n=function(t){var e=[];if(window.WebKitCSSMatrix)return[(e=new window.WebKitCSSMatrix(t)).a,e.b,e.c,e.d,e.e,e.f];for(var r,n=/[\d\.\-]+/g;r=n.exec(t);)e.push(+r);return e}(t),i=n[0],s=n[1],a=n[2],o=n[3];if(i*o==s*a)throw new Error("Dramatic.parseTransform: matrix is singular");var l=Math.sqrt(i*i+s*s),c=(i/=l)*a+(s/=l)*o;a-=i*c,o-=s*c;var u=Math.sqrt(a*a+o*o);return c/=u,i*(o/=u)<s*(a/=u)&&(i=-i,s=-s,c=-c,l=-l),new Os({translate:[n[4],n[5]],scale:[e(l),e(u)],rotate:r(Math.atan2(s,i)),skew:r(Math.atan(c))})}};Os.rotate=class extends Array{toString(){return"rotate("+this.map(t=>Li(t)?t+"deg":t).join(", ")+")"}},Os.scale=class extends Array{toString(){return"scale("+this.join(", ")+")"}},Os.skew=class extends Array{toString(){return"skew("+this.map(t=>Li(t)?t+"deg":t).join(", ")+")"}},Os.translate=class extends Array{toString(){return"translate("+this.map(t=>Li(t)?t+"px":t).join(", ")+")"}};var xs=Os,ks=function(t,e,r=null){var n=window.getComputedStyle(t,r);return Es(e,(t,e)=>{var r=n.getPropertyValue(js(t)||t);return"width"!==t&&"height"!==t||""!==r||(r="0px"),"transform"===t&&(r=xs.parse(r)),r},!1)},Ss=["width","height","top","left","right","bottom","padding","padding-top","padding-left","padding-right","padding-bottom","margin","margin-top","margin-left","margin-right","margin-bottom","border-width","border-top-width","border-left-width","border-right-width","border-bottom-width","outline-width","outline-top-width","outline-left-width","outline-right-width","outline-bottom-width"],As=function(t,e,r=null){e=Pi(e)?Qi(e,r):e;var n={inset:["top","right","bottom","left"],margin:["top","right","bottom","left"],padding:["top","right","bottom","left"]};return Es(Object.keys(e),(r,i)=>{var s=e[i];Fi(n,(t,e)=>{r===t&&(Mi(s)&&(s=e.map(t=>s[t]).filter(t=>!Ci(t))),Ai(s)&&(s=s.join(" ")))}),"transform"!==r||!Mi(s)||s instanceof xs||(s=new xs(s).toString()),t.style[r]=Ss.includes(r)&&Li(s)?s+"px":s},"auto"),t},Ps=function(t,...e){return e.length>1&&Pi(e[0])||Mi(e[0])?As(t,...e):ks(t,...e)},Cs=function(t,e,r=null){return Zi.onread((n,i)=>{try{n(Wi(e)?e(t):ks(t,e,r))}catch(t){i(t)}},!0)},Ts=function(t,e,r=null){return Zi.onwrite((n,i)=>{try{n(Wi(e)?e(t):As(t,e,r))}catch(t){i(t)}},!0)},$s=function(t,...e){return e.length>1&&Pi(e[0])||Mi(e[0])?Ts(t,...e):Cs(t,...e)},Ns=function(t,e,r="auto"){var n=t.getAttribute("style");return"all"===e&&(e=n.split(";").map(t=>t.split(":")[0])),Es(e,t=>(new RegExp(";[ ]*?"+t+":([^;]+);?","g").exec(";"+n)||["",""])[1].trim(),r)},Ms=function(t,e,r=null,n=null){var i=Mi(e)?Object.keys(e):e;n=Mi(e)?r:n;var s=Ns(t,i);return Ts(t,e,r).then(()=>Cs(t,n||i).then(e=>Ts(t,s).then(()=>e)))},Is=function(t,e){var r=document.styleSheets,n=function(e){try{for(var r=0;r<e.cssRules.length;r++){var n=e.cssRules[r];if(!0===t(n))return!0}}catch(t){}};if(e){for(var i=r.length-1;i>=0;i--)if(!0===n(r[i]))return!0}else for(i=0;i<r.length;i++)if(!0===n(r[i]))return!0},Ls=function(t,e,r,n="auto"){var i=Ai(e)?e.join("|"):e;if(!r&&Fs[i]&&Fs[i].el===t){var s=function(t,e=[],r=!0){var n=0;return Li(arguments[0])&&$i(arguments[1])&&(n=arguments[0],t=arguments[1],e=arguments[2]||[]),Hi([n,{},t],(t,r,n)=>Wi(e)?e(t):!Ai(e)||!e.length||e.indexOf(t)>-1,!1,!1,r)}(Fs[i]);return delete s.el,s}var a=[];return Is(r=>{if(r.type===window.CSSRule.STYLE_RULE&&t.matches(r.selectorText)){var i=e;if(!e){i=[];for(var s=0;s<r.style.length;s++)i.push(r.style[s])}a.push(Es(i,t=>r.style[t],n))}}),a.forEach(t=>{}),Fs||(Fs={}),Fs[i]=a.slice(),Fs[i].el=t,a};const Fs={};class Ws{constructor(t,e,r,n){this.el=t,this.params=Ii(e),this.readCallback=r,this.writeCallback=n,this.$savepoints=[]}save(){var t=this.readCallback(this.el,this.params);return t instanceof Promise?t.then(t=>this.$savepoints.push(t)):Mi(t)?this.$savepoints.push(t):void 0}commit(t=0){for(var e=0;e<=t&&t<this.$savepoints.length;e++)this.$savepoints[e]=null;return this}rollback(t=0){if(!Li(t))throw new Error("A valid transaction ID transaction must be provided!");var e=e=>{var r=this.$savepoints.splice(t),n=r.shift();if(!n)return{};var i=r.pop(),s={};return this.params.forEach(t=>{i&&e[t]!==i[t]||e[t]!==n[t]&&(s[t]=n[t])}),s},r=this.readCallback(this.el,this.params);return r instanceof Promise?r.then(t=>this.writeCallback(this.el,e(t))):this.writeCallback(this.el,e(r))}depth(){return this.$savepoints.length}}var Rs=function(t,e){return new Ws(t,e,(t,e)=>Ns(t,e),(t,e)=>Ts(t,e))},Ds=function(t){var e=0;return e+=parseInt(ks(t,"border-top-width")),e+=parseInt(ks(t,"border-bottom-width"))},Hs=function(t){var e=0;return e+=parseInt(ks(t,"border-left-width")),e+=parseInt(ks(t,"border-right-width"))},_s=function(t){var e=0;return Ii(t.children).forEach((t,r)=>{e=Math.max(e,parseInt(ks(t,"z-index"))||0)}),e},qs=function(t){return t instanceof Number||"number"==typeof t},Bs=function(t,e=[]){return Hi([{},t],(t,r,n)=>{if(!Wi(n[t]))return Wi(e)?e(t):!Ai(e)||!e.length||e.indexOf(t)>-1},!1,!1,!1)},Vs=function(t){var e={};return t.split(";").filter(t=>t).forEach(t=>{t=t.split(":"),e[t[0].trim()]=t[1].trim()}),e},zs=function(t,e,r=!0){var n=Ai(t)?t.join("|"):t;if(!e&&Ks[n])return Ks[n];var i=[];return Is(e=>{if((e.type===qi.window.CSSRule.KEYFRAMES_RULE||e.type===qi.window.CSSRule[qi.ENV.params.vendorPrefix.api.toUpperCase()+"_KEYFRAMES_RULE"])&&(Ai(t)?t:[t]).indexOf(e.name)>-1)return i=i.concat(i,function(t){for(var e=[],n=0;n<t.cssRules.length;n++){var i=t.cssRules[n],s=Vs(i.cssText.replace(i.keyText,"").replace("{","").replace("}","").trim()),a=(i.keyText||" ").split(",").map(t=>"from"===t?0:"to"===t?1:parseInt(t)/100);if(r)for(Us(s,["animation-","transition-"]);a.length;){var o=Bs(s);o.offset=a.shift(),e.push(o)}else s.offset=a.length>1?a:a[0],e.push(s)}return e.sort((t,e)=>t.offset===e.offset?0:t.offset>e.offset?1:-1)}(e)),!0},!0),Ks[n]=i,i};const Us=function(t,e,r=""){Ai(r)?r.forEach(e=>Us(t,e)):(t[r+"timing-function"]&&(t.easing=t[r+"timing-function"],delete t[r+"timing-function"]),t[r+"fill-mode"]&&(t.fill=t[r+"fill-mode"],delete t[r+"fill-mode"]),t[r+"iteration-count"]&&(t.iterations=t[r+"iteration-count"],delete t[r+"iteration-count"],"infinite"===t.iterations&&(t.iterations=1/0)))},Ks={};class Js{constructor(t,e,r={}){this.el=t,this.$={readyCallbacks:[],finishCallbacks:[],cancelCallbacks:[],params:r},r.fill=r.fill||"both","duration"in r||(r.duration=400),r.easing&&-1===["ease-in","ease-out","ease-in-out"].indexOf(r.easing)&&-1===r.easing.indexOf("(")&&(r.easing=function(t){t=t.indexOf("-")?t:ws(t,"-");return window.getComputedStyle(document.body).getPropertyValue("--"+t)}(r.easing)||r.easing);var n={inset:["top","right","bottom","left"],margin:["top","right","bottom","left"],padding:["top","right","bottom","left"]};const i=t=>{t=t.slice();var e={},i={};Fi(t,(t,r)=>{Fi(n,(t,e)=>{r[t]&&(Mi(r[t])&&(r[t]=e.map(e=>r[t][e]).filter(t=>!Ci(t))),Ai(r[t])&&(r[t]=r[t].join(" ")))}),!r.transform||!Mi(r.transform)||r.transform instanceof xs||(r.transform=new xs(r.transform).toString()),rs(Object.keys(r),"offset","easing").forEach(t=>{Ss.includes(t)&&Li(r[t])&&(r[t]+="px"),e[t]=void 0===e[t]?r[t]:e[t],i[t]=r[t]})});try{var s=this.el.animate(t,r)}catch(t){return void(this.$.error=t)}r.reverse&&s.reverse(),s.effect||(s.effect={}),s.effect.duration||(s.effect.duration=r.duration),s.onfinish=()=>{r.cancelForCss&&(s.cancel(),"forwards"!==r.fill&&"both"!==r.fill||As(this.el,i)),this.$.finishCallbacks.forEach(t=>{t(this.el)})},s.oncancel=()=>{this.$.cancelCallbacks.forEach(t=>{t(this.el)})},this.$.anim=s,this.$.firstFrame=e,this.$.lastFrame=i,this.$.params=r,this.$.readyCallbacks.length&&this.$.readyCallbacks.forEach(t=>t(s,r,e,i))};Wi(e)?e(t,i):Js.createCallback(t,e,i,t=>{this.$.error=t})}get anim(){return this.$.anim}ready(t,e){this.$.error?e&&e(this.$.error):this.$.anim?t(this.$.anim,this.$.params,this.$.firstFrame,this.$.lastFrame):this.$.readyCallbacks.push(t)}onfinish(t){if(!Wi(t))throw new Error("Onfinish() accepts only a function.");return this.$.finishCallbacks.push(t),this}oncancel(t){if(!Wi(t))throw new Error("Oncancel() accepts only a function.");return this.$.cancelCallbacks.push(t),this}progress(){return this.$.anim?this.$.anim.currentTime/this.$.anim.effect.duration:0}seek(t){if(!qs(t))throw new Error("Seek() accepts only a numeric value.");return this.ready((e,r)=>{var n=r.duration+(r.delay||0)+(r.endDelay||0);e.currentTime=Math.max(0,Math.min(t*n,n))}),this}reverse(){return this.ready(t=>t.reverse()),this}play(){return new Promise((t,e)=>{this.ready(r=>{r.play(),this.onfinish(()=>t(this)),this.oncancel(()=>e(this))},e)})}pause(){return this.ready(t=>t.pause()),this}finish(){return this.ready(t=>t.finish()),this}cancel(){return this.ready(t=>t.cancel()),this}static createCallback(t,e,r,n){var i=Mi(e)&&!Object.values(e).filter(t=>Ai(t)).length,s=Ai(e)&&e.length>1&&Ni(e[0]);if(i||s)Zi.onread(()=>{s?(e.shift(),Js.createCallback(t,[ks(t,Object.keys(e[0])),...e],r,n)):Js.createCallback(t,[ks(t,Object.keys(e)),e],r,n)});else{if(Pi(e)){var a=e;!(e=zs(a)).length&&n&&n('Animation name "'+a+'" not found in any stylesheet!')}if(Ai(e)){var o=[];if(Fi(e,(t,e)=>{"auto"===e.height&&Ri(o,t),"auto"===e.width&&Ri(o,t)}),o.length)return void Ms(t,{width:"auto",height:"auto"},t=>t.getBoundingClientRect()).then(t=>{o.forEach(r=>{"auto"===e[r].width&&(e[r].width=t.width+"px"),"auto"===e[r].height&&(e[r].height=t.height+"px")}),r(e)})}r(e)}}}function Qs(t,e,r={}){return"cancelForCss"in r||(r.cancelForCss=!0),new Js(t,e,r).play().then(()=>t)}var Gs=function(t){return typeof t};const Ys=function(t,e,r=!1){var n=null,i=t;Ai(t)||(n=Object.keys(t),i=Object.values(t));var s=void 0,a=i.reduce((t,n)=>{if(void 0===s){if(e(n,t))return n;if(r&&($i(n)||Wi(n))&&void 0!==(s=Ys(n,e,r)))return n}return t},void 0);if(void 0!==a){var o=n?n[i.indexOf(a)]:i.indexOf(a);return void 0!==s?[o].concat(Ii(s)):o}};var Zs=Ys;const Xs={},ta=["tripletap","doubletap","singletap"];ta.forEach(t=>{Xs[t]=class{setup(t,e,r,n){if(!qi.window.Hammer)throw new Error("The Hammerjs library is needed to use the "+e+" gesture.");this.el=t,this.eventName=e,this.fireCallback=r,this.hammertime=n;var i=!0,s=ta.map((t,e)=>{var r=this.hammertime.get(t);return r||(i=!1,r=new qi.window.Hammer.Tap({event:t,taps:ta.length-e}),this.hammertime.add(r)),r});if(!i){for(var a,o=s.slice();(a=o.shift())&&o.length;)a.recognizeWith(o);for(var l,c=s.slice();(l=c.pop())&&c.length;)l.requireFailure(c)}this.hammertime.on(this.eventName,this.fireCallback)}teardown(){this.hammertime.off(this.eventName)}}});var ea=class extends class{constructor(t,e){this.subject=t,this.handler=e.handler,this.filter=e.filter,this.params=e.params}disconnect(){this.disconnected=!0}}{fire(t){this.filter===t.type&&t.response(this.handler.call(this.subject,t))}},ra=class{constructor(t,e){this.$={},this.$.target=t,this.$.e=e,this.$.propagationStopped=!1,this.$.defaultPrevented=!1,this.$.promisesInstance=null,this.$.promises=[]}get type(){return this.$.e.type}get target(){return this.$.e.target}get e(){return this.$.e}stopPropagation(){this.$.propagationStopped=!0}get propagationStopped(){return this.$.propagationStopped}preventDefault(){this.$.defaultPrevented=!0}get defaultPrevented(){return this.$.defaultPrevented}promise(t){if(!(t instanceof Promise))throw new Error("Event.promise() must be called with a Promise.");this.$.promises.push(t),this.$.promisesInstance=null}get promises(){return!this.$.promisesInstance&&this.$.promises.length&&(this.$.promisesInstance=Promise.all(this.$.promises)),this.$.promisesInstance}response(t){var e,r=Mi(t)&&!Ci(t.propagationStopped)&&!Ci(t.defaultPrevented);!1===t||r&&t.propagationStopped?this.stopPropagation():!1===t||r&&t.defaultPrevented?this.preventDefault():(t instanceof Promise&&(e=t)||r&&(e=t.promises))&&this.promise(e)}};class na extends class{constructor(t){this.subject=t,this.fireables=[],this.currentlyFiring=[]}add(t){return this.fireables.push(t),t}forget(t){this.filter(t).forEach(t=>{this.fireables=this.fireables.filter(e=>e!==t)})}filter(t){return this.fireables.filter(e=>{var r=Ii(e.filter),n=Ii((e.params||{}).tags),i=Ii(t.filter),s=Ii((t.params||{}).tags);return!(t.originalHandler&&e.handler!==t.originalHandler||i.length&&(i.length!==r.length||ns(r,i).length!==i.length)||s.length&&(s.length!==n.length||ns(n,s).length!==s.length))})}}{constructor(t){super(t),this.handlersList={},this.hammertime=()=>{if(!this.hmm){if(!qi.window.Hammer)throw new Error("The Hammerjs library is needed to use gestures.");this.hmm,new qi.window.Hammer.Manager(this.subject)}return this.hmm}}_setup(t,e){var r;if(!this.handlersList[t])if(Xs[t])if(Pi(Xs[t]))this.handlersList[t]=e=>this.fire({type:t,e:e}),this.addFireable(new ea(this.handlersList[t],Xs[t]));else{if(r=Xs[t],!Ti(r)||!/^class\s?/.test(Function.prototype.toString.call(r)))throw new Error('The "'+t+'" event hook must be either a string (alias) or a class!');if(this.handlersList[t]=new Xs[t],!Wi(this.handlersList[t].setup))throw new Error('The "'+t+'" event hook must implement a "setup" method!');this.handlersList[t].setup(this.subject,t,e=>{this.fire({type:t,e:e})},this.hammertime())}else if(ia(t.split("+")[0])){var n=t.split("+").map(t=>{var e=ia(t),r=this.hammertime().get(e);return r||(r=new(Hammer[Xi(e)]),this.hammertime().add(r)),r});n.forEach((t,e)=>{t.recognizeWith(n.slice(e+1))}),this.handlersList[t]=e=>this.fire({type:t,e:e}),this.hammertime().on(t.split("+").join(" "),this.handlersList[t])}else this.handlersList[t]=t=>this.fire(t),this.subject.addEventListener(t,this.handlersList[t])}_teardown(t){if(this.handlersList[t]){if(Xs[t]){if(Pi(Xs[t]))removeListener(this.subject,Xs[t],this.handlersList[t]);else if(this.handlersList[t]){if(!Wi(this.handlersList[t].teardown))throw new Error('The "'+t+'" event hook must implement a "teardown" function!');this.handlersList[t].teardown()}}else ia(t.split("+")[0])?this.hammertime().off(t.split("+").join(" "),this.handlersList[t]):this.subject.removeEventListener(t,this.handlersList[t]);delete this.handlersList[t]}}add(t){return this._setup(t.filter,t.params),super.add(new ea(this.subject,t))}fire(t){return t instanceof ra||(t=new ra(this.subject,t)),this.fireables.forEach(e=>{t.propagationStopped||e.fire(t)}),t}}const ia=function(t){return Zs(sa,e=>e.includes(t),!1)},sa={press:["press","pressup"],rotate:["rotate","rotatestart","rotatemove","rotateend","rotatecancel"],pinch:["pinch","pinchstart","pinchmove","pinchend","pinchcancel","pinchin","pinchout"],pan:["pan","panstart","panmove","panend","pancancel","panleft","panright","panup","pandown"],swipe:["swipe","swipeleft","swiperight","swipeup","swipedown"],tap:["tap"]};var aa=function(t,e=!0){return function(t,e,r=null){if(!$i(t))throw new Error('Object must be of type subject; "'+Gs(t)+'" given!');var n;return!(n=t[e])&&r&&(n=new r(t),Object.defineProperty(t,e,{get:()=>n,set:t=>{if(t!==n)throw new Error('Attempt to overwrite the "'+e+'" special property!')},enumerable:!1})),n}(t,".listeners",e?na:null)},oa=function(t,e,r,n={}){if(!t||!$i(t))throw new Error('Object must be of type subject; "'+Gs(r)+'" given!');if(Wi(e)&&(n=arguments.length>2?r:{},r=e,e=null),!Wi(r))throw new Error('Callback must be a function; "'+Gs(r)+'" given!');var i,s={filter:e,handler:r,params:n},a=aa(t);return s.params.unique&&(i=a.filter(s)).length?i[0]:a.add(s)},la=function(t,e,r=null,n={}){if(!t||!$i(t))throw new Error('Object must be of type subject; "'+Gs(t)+'" given!');if(Wi(e)&&(n=arguments.length>2?r:{},r=e,e=null),r&&!Wi(r))throw new Error('Handler must be a function; "'+Gs(r)+'" given!');var i;if(i=aa(t,!1))return i.forget({filter:e,originalHandler:r,params:n})},ca=function(t,e,r={}){var n;if(n=aa(t,!1))return n.fire({target:t,type:e,data:r})},ua=function(t,e){t=Ii(t,!1);var r=Object.keys(t),n=new ResizeObserver(n=>{for(let e of n)r[t.indexOf(e.target)]={width:e.contentRect.left+e.contentRect.right,height:e.contentRect.top+e.contentRect.bottom};r=r.map((e,r)=>Mi(e)?e:Bs(rect(t[r]),["width","height"])),e.call(...r)});return t.forEach(t=>{n.observe(t)}),n},ha=!1;function pa(){var t,e;ha||(ha=!0,qi.window.Element.prototype.matches||(qi.window.Element.prototype.matches=qi.window.Element.prototype.matchesSelector||qi.window.Element.prototype.mozMatchesSelector||qi.window.Element.prototype.msMatchesSelector||qi.window.Element.prototype.oMatchesSelector||qi.window.Element.prototype.webkitMatchesSelector||function(t){for(var e=(this.document||this.ownerDocument).querySelectorAll(t),r=e.length;--r>=0&&e.item(r)!==this;);return r>-1}),qi.params.vendorPrefix=(t=qi.window.getComputedStyle(qi.window.document.documentElement,""),{prefix:e=(Array.prototype.slice.call(t).join("").match(/-(moz|webkit|ms)-/)||""===t.Olink&&["","o"])[1],css:"-"+e+"-",api:("WebKit|Moz|Ms|O".match(new RegExp("("+e+")","i"))||[])[1]}),Zi._run())}function fa(t,e,r={}){var n=(t,e)=>r.factory?e instanceof Promise?e.then(e=>e===t.el?t:e):e===t.el?t:e:e;Fi(e,(e,i)=>{"INIT"===e?t[e]=i:"el"===e||"select"===e||"selectAll"===e?t[e]=function(t,...n){var s=i(t);return r.factory&&(s="selectAll"===e?Ii(s).map(t=>r.factory(t,...n)):r.factory(s,...n)),s}:(t.prototype[e]=function(...t){return n(this,i(this.el||qi.window.document.createElement("div"),...t))},(e.endsWith("Sync")||e.endsWith("Async"))&&(r.syncIsDefault&&e.endsWith("Sync")?e=Si(e,"Sync"):!r.syncIsDefault&&e.endsWith("Async")&&(e=Si(e,"Async")),t.prototype[e]=function(...t){return n(this,i(this.el||qi.window.document.createElement("div"),...t))}))})}function da(t){if(!(this instanceof da))return new da(t);this.el=Vi(t)}fa(da,i,{factory:(t,...e)=>new da(t,...e)}),qi.window=window,da.INIT(),window.WebNative||(window.WebNative={}),window.WebNative.PlayUI=da;var ma=function(t){return oi(t)&&/^class\s?/.test(Function.prototype.toString.call(t))},va=function(t,e=1){var r=0;t.forEach(t=>{r++});var n=t.slice(t.length-r,e);return arguments.length>1?n:n[0]},ga=function(t,e=1){return arguments.length>1?va(t.slice().reverse(),e).reverse():va(t.slice().reverse())},ba=function(t,e){var r=void 0;return di(t)&&Object.keys(t).forEach((n,i)=>{!1!==r&&(r=e(bi(n)?parseFloat(n):n,t[n],i))}),r},ya=class{constructor(t={}){ba(t,(t,e)=>{ai.set(this,t,e)})}setActiveState(t=!0){if(this.active!==t){var e=ai.set(this,t?"activating":"deactivating",!0,!0);return e.promises?(e.promises.then(()=>{ai.set(this,t?{activating:!1,active:!0}:{deactivating:!1,active:!1},!0)}),e):ai.set(this,t?{activating:!1,active:!0}:{deactivating:!1,active:!1},!0)}}},wa=class extends class{constructor(t={},e={}){var r;this.params=e,this.params.itemsOffset||(this.params.itemsOffset="entries"),this.fill(t),ai.set(this,"current",{}),(r=e.takeStats||[],r.filter((t,e,r)=>r.indexOf(t)===e)).forEach(t=>{var e,r,n,i;n="[",i="]",(r=t).startsWith(n)&&r.endsWith(i)&&(e=!0,t=function(t,e,r){return function(t,e){return function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?t:t.substr(0,n)}(t,e,!0)}(function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?"":t.substr(n+e.length)}(t,e),r)}(t,"[","]"),this.current[t]=[]);var s=this.params.itemsOffset+".."+t;ai.observe(this,s,r=>{!0===r.value?e?(yi(this.current[t],r.originalSubject),ai.set(this.current,t,this.current[t])):ai.set(this.current,t,r.originalSubject):!1===r.value&&(e?(!function(t,e,r=!1){for(var n=t.indexOf(e);n>-1&&(r||!1===r);)t.splice(n,1),r>0&&r--,n=t.indexOf(e)}(this.current[t],r.originalSubject),ai.set(this.current,t,this.current[t])):this.current[t]===r.originalSubject&&ai.del(this.current,t))})})}fill(t){ba(t,(t,e)=>{ai.set(this,t,e)})}getItemsArray(){var t=this[this.params.itemsOffset];return pi(t)?t:t?Object.values(t):[]}filter(){}sort(){}}{constructor(t={},e={}){e.takeStats||(e.takeStats=[]),e.takeStats.includes("active")||e.takeStats.push("active"),e.takeStats.includes("activating")||e.takeStats.push("activating"),e.takeStats.includes("deactivating")||e.takeStats.push("deactivating"),super({},e),ai.observe(this,this.params.itemsOffset+"..activating",t=>{t.value&&this.getItemsArray().forEach(t=>{!0!==t.active||t.activating||t.setActiveState(!1)})}),this.fill(t)}selectStart(){var t,e=this.getItemsArray();if(!gi(e)&&(t=va(e)))return t.setActiveState(!0)}selectEnd(){var t,e=this.getItemsArray();if(!gi(e)&&(t=ga(e)))return t.setActiveState(!0)}selectPrev(t=!1){var e,r=this.getItemsArray();if(!gi(r))return this.current.active?e=function(t,e,r=!1,n=!1,i=!1){if(-1===t.indexOf(e))return r?[]:void 0;var s=!0===r?t.length-1:!1===r?1:r,a=(t=t.slice().reverse(),i?t.lastIndexOf(e)+1:t.indexOf(e)+1),o=vi(e)?[]:t.slice(a,a+s);return n&&o.length<s&&o.length<t.length&&(li(n)&&!n(s-o.length)||(o=o.concat(t.slice(0,s-o.length)))),r?o:o[0]}(r,this.current.active,!1,t):!t||li(t)&&!t(0)||(e=ga(r)),e?e.setActiveState(!0):void 0;li(t)&&t()}selectNext(t=!1){var e,r=this.getItemsArray();if(!gi(r))return this.current.active?e=function(t,e,r=!1,n=!1,i=!1){if(-1===t.indexOf(e))return r?[]:void 0;var s=!0===r?t.length-1:!1===r?1:r,a=i?t.lastIndexOf(e)+1:t.indexOf(e)+1,o=vi(e)?[]:t.slice(a,a+s);return n&&o.length<s&&o.length<t.length&&(li(n)&&!n(s-o.length)||(o=o.concat(t.slice(0,s-o.length)))),r?o:o[0]}(r,this.current.active,!1,t):!t||li(t)&&!t(0)||(e=va(r)),e?e.setActiveState(!0):void 0;li(t)&&t()}selectRand(){}filter(){}sort(){}static createEntries(t,e=ya){var r=pi(t)?[]:{};return ba(t,(t,n)=>{n=n instanceof e?n:ma(e)?new e(n):li(e)?e(n):n,ai.set(r,t,n)}),r}};!function(...t){var e={};pi(arguments[0])&&(t=arguments[0],e=arguments[1]);var r=ga(t),n={},i=class extends r{constructor(...t){super(...t)}};i.prototypes=t,t.forEach(t=>{ji([i,t],(t,e,r)=>-1===["name","prototype","prototypes","length"].indexOf(t)),ji([i.prototype,t.prototype],(t,e,r)=>-1===["prototype","prototypes"].indexOf(t)&&(!li(r[t])||(pi(n[t])?n[t].push(r[t]):n[t]=[r[t]],!1)),!0)}),ba(n,(t,r)=>{"constructor"!==t&&(i.prototype[t]=function(...n){if(Object.hasOwnProperty(e,t)&&li(e[t]))return e[t].call(this,r,...n);var i=[];return r.forEach(t=>{i.push(t.call(this,...n))}),ga(i)})})}(ya,wa);const ja={params:{pathnaming:{"/":["name","id"]}}};var Ea;Ea=window,ja.detect=function(){if(!Ea)return"";if(void 0!==Ea.InstallTrigger)return"firefox";if(/constructor/i.test(Ea.HTMLElement)||"[object SafariRemoteNotification]"===(!Ea.safari||void 0!==Ea.safari&&Ea.safari.pushNotification).toString())return"safari";var t=!(!Ea.chrome||!Ea.chrome.webstore&&!Ea.chrome.runtime),e=t&&-1!=Ea.navigator.userAgent.indexOf("Edg"),r=!!Ea.opr&&!!Ea.opr.addons||!!Ea.opera||Ea.navigator.userAgent.indexOf(" OPR/")>=0,n=!!Ea.document.documentMode,i=!n&&!!Ea.StyleMedia;return(t||r)&&Ea.CSS,i?"edge":n?"ie":r?"opera":e?"ie-chromium":t?"chrome":"unknown"};var Oa=ja;class xa{constructor(t,e={}){if(this.paymentPointer=t,this.params=e,this.assertSupport(this.getTag()&&this.params.prompt)){var r=window.document.monetization;ai.set(this,"state",r.state),r.addEventListener("monetizationpending",t=>{ai.set(this,{state:"pending",pending:t.detail,started:!1,stopped:!1})}),r.addEventListener("monetizationstart",t=>{i=0,ai.set(this,{state:"started",started:t.detail,stopped:!1,pending:!1})}),r.addEventListener("monetizationstop",t=>{ai.set(this,{state:"stopped",stopped:t.detail,pending:!1,started:!1})});var n,i=0,s=0;r.addEventListener("monetizationprogress",t=>{0===s&&(n=t.detail.assetScale);var e=Number(t.detail.amount);i+=e,s+=e,ai.set(this,{progress:t.detail,currency:n,currentTotal:{amount:i,value:(i*Math.pow(10,-n)).toFixed(n)},sessionTotal:{amount:s,value:(s*Math.pow(10,-n)).toFixed(n)}})})}}start(){var t;this.getTag(this.paymentPointer)||((t=this.getTag())&&t.remove(),(t=window.document.createElement("meta")).setAttribute("name","monetization"),t.setAttribute("content",this.paymentPointer),window.document.querySelector("head").appendChild(t));this.assertSupport(this.params.prompt)}stop(){(monetizationMeta=this.getTag())&&monetizationMeta.remove()}getTag(t=null){return window.document.querySelector('meta[name="monetization"]'+(t?'[content="'+t+'"]':""))}assertSupport(t){window.document.querySelector("head");if(!window.document.monetization){if(t){var e,r=Oa.detect();r.startsWith("ie")?e="https://microsoftedge.microsoft.com/addons/detail/ljionajlbinlfkdnpkloejeoogfgkojm":"firefox"===r?e="https://addons.mozilla.org/en-US/firefox/addon/coil/":"chrome"!==r&&"brave"!==r||(e="https://chrome.google.com/webstore/detail/coil/locbifcbeldmnphbgkdigjmkbfkhbnca"),e?window.confirm("This version of "+r+" does not support the Web WebMonetization API! \r\nWould you like to add the Web WebMonetization extension?")&&window.open(e,"_blank"):window.alert("Your browser does not support the Web WebMonetization API.")}return!1}return!0}static init(t,e={}){return xa.instances[t]||(xa.instances[t]=new xa(t,e)),xa.instances[t]}}xa.instances={};var ka={engr:[{label:"CHTML",desc:"A suite of short specifications and technologies that bring a component architecture to the HTML language itself.",tags:["#ScopedHTML","#ScopedCSS","#ScopedJS","#HTMLPartials"],link1:["https://docs.web-native.dev/chtml/","DOCS"],link2:["https://github.com/web-native/chtml","GitHub"]},{label:"PlayUI",desc:"A resilient, jQuery-inspired DOM API and an intuitive UI manipulation library.",tags:["#AsynchronousDOM","#UIPhysics"],link1:["https://docs.web-native.dev/play-ui/","DOCS"],link2:["https://github.com/web-native/play-ui","GitHub"]},{label:"Observer Components",desc:"Application components and client-side APIs implemented as live, observerive objects.",tags:["#ObserverActions"],link1:["https://docs.web-native.dev/observer-components/","DOCS"],link2:["https://github.com/web-native/observer-components","GitHub"]},{label:"Observer",desc:'A general-purpose observability API for JavaScript. (JavaScript\'s new <code style="background-color:whitesmoke">Object.observe()</doce>.)',tags:["#ObserverActions"],link1:["https://docs.web-native.dev/observer/","DOCS"],link2:["https://github.com/web-native/observer","GitHub"]},{label:"JSEN",desc:"A general-purpose library for parsing JavaScript expressions that execute in user-defined scopes. (JavaScript's micro runtime.)",tags:["#scopedJS"],link1:["https://docs.web-native.dev/jsen/","DOCS"],link2:["https://github.com/web-native/jsen","GitHub"]},{label:"Commons",desc:"A thoughtful utilities library for JavaScript; used across all Web-Native modules.",link1:["https://docs.web-native.dev/commons/","DOCS"],link2:["https://github.com/web-native/commons","GitHub"]}],evan:[{},{},{},{meta:{type:"article"},label:"I’m joining web-native!",desc:"Hey, Awesome! I am pleased to announce that I am joining Web-native as a Front-end Engineer and Developer Relations!🎉",link2:["https://medium.com/@raymondosy1/im-joining-web-native-c98b2cdc5540","Read article"],authors:[{name:"Raymond Akalonu",avatar:"https://miro.medium.com/fit/c/48/48/0*dx5wDBZDIOiMILkr.",link:"https://miro.medium.com/@raymondosy1"}]}]},Sa=class{constructor(t=[],e={}){this.$={animations:[],finishCallbacks:[],cancelCallbacks:[],params:e},t.forEach(t=>{this.add(t)})}add(t){if(!(t instanceof Js))throw new Error("Argument#1 must be an Ani instance!");switch(this.$.animations.push(t),this.$.addCallback&&this.$.addCallback(t),this.$.playState){case"paused":t.pause();break;case"cancelled":t.cancel();break;case"finished":t.finish()}return this.$.reversed&&t.reverse(),this}remove(t){if(!(t instanceof Js))throw new Error("Argument#1 must be an Ani instance!");return es(this.$.animations,t),this.$.removeCallback&&this.$.removeCallback(t),this}onfinish(t){if(!Wi(t))throw new Error("Onfinish() accepts only a function.");return this.$.finishCallbacks.push(t),this}oncancel(t){if(!Wi(t))throw new Error("Oncancel() accepts only a function.");return this.$.cancelCallbacks.push(t),this}progress(){return this.$.animations.reduce((t,e)=>t.progress()+e.progress(),0)/this.$.animations.length}play(){return this.$.playState="playing",new Promise((t,e)=>{var r,n,i=()=>{r||(r=!0,this.$.finishCallbacks.forEach(t=>t()),t())},s=()=>{n||(n=!0,this.$.cancelCallbacks.forEach(t=>t()),e())},a=this.$.animations.length;this.$.animations.forEach(t=>{t.play().then(()=>{!--a>0&&i()}).catch(s)}),this.$.addCallback=t=>{"playing"===this.$.playState&&(a++,t.play().then(()=>{!--a>0&&i()}).catch(s))},this.$.removeCallback=t=>{a--}})}seek(t,e=[]){this.each(e=>e.seek(t),e)}reverse(t=[]){this.$.reversed=!this.$.reversed,this.each(t=>t.reverse(),t)}pause(t=[]){this.$.playState="paused",this.each(t=>t.pause(),t)}finish(t=[]){this.$.playState="finished",this.each(t=>t.finish(),t)}cancel(t=[]){this.$.playState="cancelled",this.each(t=>t.cancel(),t)}clear(t=[]){this.$.animations=this.$.animations.filter(e=>{if(!t||!Ii(t,!1).includes(e.el))return!1})}each(t,e=[]){this.$.animations.forEach(r=>{e&&Ii(e,!1).includes(r.el)||t(r)})}},Aa=function(t,e=1){var r=0;t.forEach(t=>{r++});var n=t.slice(t.length-r,e);return arguments.length>1?n:n[0]},Pa=class{constructor(t=[],e={}){this.$={},this.$.entries=[],this.$.params=e,this.nowPlaying=new Sa,t.forEach(t=>{this.add(t,e.timing)}),this.queue=[]}add(t,e={},r={},n=null,i=null){if(!this.$.entries.filter(e=>e.el===t).length){var s={el:t,effect:e,params:r,onfinish:n,oncancel:i};this.$.entries.push(s),this.nowPlayingAdd(s)}}remove(t){this.$.entries=this.$.entries.filter(e=>e.el!==t)}nowPlayingAdd(t){if(this.nowPlayingEffect){var e=(t,e,r,n)=>{var i=new Js(e.el,r,n);t.add(i),n.oneoff&&i.onfinish(()=>{t.remove(i),this.remove(e.el)}),e.onfinish&&i.onfinish(e.onfinish),e.oncancel&&i.oncancel(e.oncancel)},r=(t,n)=>{var i=n[0],s=Ni(i.effect)?this.nowPlayingEffect:i.effect,a=_i({},this.nowPlayingParams,i.params);if(a.delay=a.delay||0,qs(a.lag)||qs(a.endLag)){var o=function(t,e=1){return arguments.length>1?Aa(t.slice().reverse(),e).reverse():Aa(t.slice().reverse())}(t.$.animations);if(o)return void o.ready((o,l)=>{qs(a.lag)?a.delay+=l.delay+a.lag:a.delay+=l.delay+parseFloat(l.endDelay)+l.duration+a.endLag,a.delay-=qs(o.currentTime)?o.currentTime:0,e(t,i,s,a),n.shift(),n.length&&r(t,n)})}e(t,i,s,a),n.shift(),n.length&&r(t,n)};this.queue.push(t),1===this.queue.length&&r(this.nowPlaying,this.queue)}}play(t={},e={}){return this.nowPlayingEffect&&(this.nowPlaying=new Sa,this.queue=[]),this.nowPlayingEffect=t,this.nowPlayingParams=e,(e.reverseList?this.$.entries.slice().reverse():this.$.entries).forEach(t=>{e.except&&Ii(e.except,!1).includes(t.el)||e.only&&!Ii(e.only,!1).includes(t.el)||this.nowPlayingAdd(t)}),this.nowPlaying.play()}};window.customElements.define("playui-ul",class extends window.HTMLUListElement{constructor(){super();var t=new Pa,e=new Pa,r={lag:150,oneoff:!0,duration:300};t.play([{opacity:0,transform:{translate:["0","100"]}},{opacity:1,transform:{translate:["0","0"]}}],r),e.play([{opacity:0,transform:{translate:["0","-100"]}},{opacity:1,transform:{translate:["0","0"]}}],r),this.intersectionObserver=new window.IntersectionObserver(r=>{r.forEach(r=>{r.isIntersecting&&(r.boundingClientRect.top<0?e.add(r.target):t.add(r.target))})},{rootMargin:"50px"})}sequenceAdd(t){this.intersectionObserver.observe(t)}},{extends:"ul"}),window.customElements.define("playui-li",class extends window.HTMLLIElement{connectedCallback(){this.parentNode.sequenceAdd&&this.parentNode.sequenceAdd(this)}},{extends:"li"});var Ca;const Ta={"/about":async function(t,e,r){return{title:"About Web-Native------",main:{fffjfjfj:"Finally, a Web-Native UI Framework!"}}}};Ta["/"]=async function(t,e,r){var n,i;return n=r.path?await r():{title:"Web-Native Home :: Web-Native",main:ka},i=n,!Array.isArray(i)&&"object"==typeof i&&i?await async function(t,e){if(!Ca)return Ca=!0,{location:t.url,route:e,$:window.WebNative.PlayUI,monetization:s.WebMonetization.init("$ilp.uphold.com/g7MhU9HPWgzy",{prompt:!0}),console:console};return{location:t.url,route:e}}(t,n):n};const $a=new class{constructor(t){ai.set(this,"location",new Oi(window.document.location,t.pathnamingScheme)),window.addEventListener("popstate",t=>{window.setTimeout(()=>{ai.set(this.location,Oi.copy(window.document.location),{src:window.document.location})},0)}),window.addEventListener("click",t=>{var e,r;if((e=t.target.closest("a"))&&(r=e.href)&&(!e.origin||e.origin===this.location.origin)&&!e.getAttribute("target")){t.preventDefault();var n=ai.set(this.location,"href",r,{src:e});n&&n.defaultPrevented}}),this.history=window.history,ai.observe(this.location,"href",t=>{t.value===window.document.location.href?this.history.replaceState(this.history.state,"",t.value):this.history.pushState(this.history.state,"",t.value)});const e=new ki(t.routes),r=async r=>{var n,i=await e.route(r);return await(n=e=>{new Promise(t=>{"complete"===document.templatesReadyState?t():document.addEventListener("templatesreadystatechange",t)}).then(async()=>{document.body.setAttribute("template",(t.templateRoutePath||"app")+r.url.pathname),document.bind(i,!1),e(i)})},new Promise(n))};ai.observe(this.location,"href",async t=>{await r({url:this.location,headers:t.detail||{}})}),t.isomorphic||r({url:this.location,headers:{}})}go(t,e={},r=null){return ai.set(this.location,"href",t,{request:e,src:r})}}({routes:Ta,templateRoutePath:"app/route",isomorphic:!0})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
