!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);var n={};r.r(n),r.d(n,"Route",(function(){return Ur})),r.d(n,"Router",(function(){return Gr}));var i=function(e){return"function"==typeof e},s=function(e){return Array.isArray(e)||"object"==typeof e&&e||i(e)},a=function(e){return Array.isArray(e)},o=function(e){return"string"==typeof e&&null!==e},l=function(e){return arguments.length&&(void 0===e||void 0===e)},c=function(e){return null===e||""===e},p=function(e){return c(e)||l(e)||!1===e||0===e||s(e)&&!Object.keys(e).length},h=function(e){return!Array.isArray(e)&&"object"==typeof e&&e},u=function(e,t=!0){return a(e)?e:!t&&h(e)?[e]:!1!==e&&0!==e&&p(e)?[]:function(e){return!o(e)&&!l(e.length)}(e)?Array.prototype.slice.call(e):h(e)?Object.values(e):[e]},d=function(e,t=null){var r={};return 2===arguments.length&&(a(e)&&a(t)?e.forEach((e,n)=>r[e]=t[n]):r[e]=t),r},f=function(e){return!0!==e&&!1!==e&&null!==e&&""!==e&&!isNaN(1*e)},m=function(e){return i(e)&&/^class\s?/.test(Function.prototype.toString.call(e))},g=function(e){return i(e)||e&&"[object function]"==={}.toString.call(e)},v=function(e,t){var r=void 0;return s(e)&&Object.keys(e).forEach((n,i)=>{!1!==r&&(r=t(f(n)?parseFloat(n):n,e[n],i))}),r},b=class{constructor(e,t={}){this.$={},this.$.target=e,this.$.details=t,this.$.propagationStopped=!1,this.$.defaultPrevented=!1,this.$.promisesInstance=null,this.$.promises=[],v(t,(e,t)=>{"$"!==e&&Object.defineProperty(this,e,{value:t})})}get target(){return this.$.target}get details(){return this.$.details}stopPropagation(){this.$.propagationStopped=!0}get propagationStopped(){return this.$.propagationStopped}preventDefault(){this.$.defaultPrevented=!0}get defaultPrevented(){return this.$.defaultPrevented}promise(e){if(!(e instanceof Promise))throw new Error("Event.promise() must be called with a Promise.");this.$.promises.push(e),this.$.promisesInstance=null}get promises(){return!this.$.promisesInstance&&this.$.promises.length&&(this.$.promisesInstance=Promise.all(this.$.promises)),this.$.promisesInstance}response(e){var t,r=h(e)&&!l(e.propagationStopped)&&!l(e.defaultPrevented);!1===e||r&&e.propagationStopped?this.stopPropagation():!1===e||r&&e.defaultPrevented?this.preventDefault():(e instanceof Promise&&(t=e)||r&&(t=e.promises))&&this.promise(t)}},y=class extends b{constructor(e,t={}){super(e,t)}},w=function(e){return"number"==typeof e},x=function(e){return h(e)&&Object.getPrototypeOf(e)===Object.prototype},k=function(e){return!0===e||!1===e};const E=function(e,t,r=!0,n=1){if(a(e)&&a(t)&&e.length!==t.length)return!r;if(h(e)&&h(t)){var i=Object.keys(e),o=Object.keys(t);if(!i.length&&!o.length)return x(e)&&x(t)?r:e===t===r;if(!E(i,o))return!r}if(n>0&&(a(e)&&a(t)||h(e)&&h(t))){var l=function(e,t,r=!0,n=!0,i=!1,o=!1){if(a(e)&&a(t)){var l=[],c=!0;return e.forEach(e=>{if(c){var p=!1;v(t,(t,i)=>{(!p||n&&s(e))&&(p=r(e,i),(a(p)&&!p.length||h(p)&&!Object.keys(p).length)&&(p=!1),s(p)&&n&&(e=p))}),s(p)?l.push(n?p:e):k(p)?i&&!p||!i&&p?l.push(e):o&&(c=!1):l.push(p)}}),l}if(h(e)&&h(t)){l={},c=!0;return Object.keys(e).forEach(p=>{if(c){var u=r(e[p],t[p]);(a(u)&&!u.length||h(u)&&!Object.keys(u).length)&&(u=!1),s(u)?l[p]=n?u:e[p]:k(u)?i&&!u||!i&&u?l[p]=e[p]:o&&(c=!1):l[p]=u}}),l}}(e,t,(e,t)=>E(e,t,r,n-1),!1,!1,!0);return a(l)?l.length===e.length&&l.length===t.length:h(l)&&h(e)?Object.keys(l).length===Object.keys(e).length&&Object.keys(l).length===Object.keys(t).length:l}return g(r)?r(e,t):w(e)&&w(t)&&isNaN(e)&&isNaN(t)?r:e===t===r};var S=E,j=function(e,t,r=null){return a(t)?e.filter(e=>r?t.filter(t=>r(e,t)).length:-1!==t.indexOf(e)):[]},O=class{disconnect(){this.disconnected=!0}},T=class{constructor(){this.fireables=[],this.currentlyFiringEvents=[]}addFireable(e){return this.fireables.push(e),e}removeFireable(e,t=[]){this.fireables=this.fireables.filter(t=>t!==e)}findFireables(e){return this.fireables.filter(t=>{var r=t.params||{},n=r.tags||[],i=e.params||{},s=i.tags||[];return!(e.handler&&t.handler!==e.handler||i.type&&r.type!==i.type||(s.length||n.length)&&j(n,s).length!==n.length)})}static createForTarget(e,t,r){var n;if(e&&s(e))return(n=e[C])||(n={},Object.defineProperty(e,C,{get:()=>n,set:e=>{if(e!==n)throw new Error('Attempt to overwrite the "'+C+'" special property!')},enumerable:!1})),n[t]="listeners"===t?new r(e):new r,n[t]}static getForTarget(e,t){var r;if(e&&s(e)&&(r=e[C]))return r[t]}};const C=".reflex";var A=class extends O{constructor(e,t={}){super(),this.handler=e,this.params=t}fire(e,t,r){return this.disconnected||this.params.type&&this.params.type!==e.type?t(...u(arguments).slice(2)):this.handler(e,r,t)}};class P extends T{fire(e,t=null){if(this.currentlyFiringEvents.filter(t=>t.type===e.type&&t.query===e.query).length)return t?t():void 0;this.currentlyFiringEvents.push(e);const r=(n,...i)=>{var s=this.fireables[n];return s?s.fire(e,(...e)=>r(n+1,...e),...i):t?t(...i):i[0]};var n=r(0);return this.currentlyFiringEvents.pop(),n}static createForTarget(e){return super.createForTarget(e,"traps",P)}static getForTarget(e){return super.getForTarget(e,"traps")}}var $=function(e,...t){return t.forEach(t=>{e.indexOf(t)<0&&e.push(t)}),e},F=function(e,t){var r=[];return function(e,t){t=(t=t||Object.prototype)&&!a(t)?[t]:t;var r=[];for(e=e;e&&(!t||t.indexOf(e)<0)&&"default"!==e.name;)r.push(e),e=e?Object.getPrototypeOf(e):null;return r}(e,t).forEach(e=>{$(r,...Object.getOwnPropertyNames(e))}),r};function W(e,t,r=!1,n=!1,i=!0){var o=0,l=e.shift();if((f(l)||!0===l||!1===l)&&(o=l,l=e.shift()),!e.length)throw new Error("_merge() requires two or more array/objects.");return e.forEach((e,c)=>{(s(e)||g(e))&&(r?F(e):Object.getOwnPropertyNames(e)).forEach(s=>{var p=l[s],u=e[s];if((a(p)&&a(u)||h(p)&&h(u))&&(!0===o||o>0))l[s]=a(p)&&a(u)?[]:{},W([f(o)?o-1:o,l[s],p,u],t,r,n,i);else if(t(s,l,e,c))if(a(l)&&a(e))n?l[s]=u:l.push(u);else try{i?Object.defineProperty(l,s,Object.getOwnPropertyDescriptor(e,s)):l[s]=e[s]}catch(e){}})}),l}var R=function(e,t=[],r=!0){var n=0;return f(arguments[0])&&s(arguments[1])&&(n=arguments[0],e=arguments[1],t=arguments[2]||[]),W([n,{},e],(e,r,n)=>g(t)?t(e):!a(t)||!t.length||t.indexOf(e)>-1,!1,!1,r)},M=function(...e){return W(e,(e,t,r)=>!0,!1,!1,!1)},D=function(e){return e.filter((e,t,r)=>r.indexOf(e)===t)},L=class extends b{constructor(e,t={}){if(t.data&&(t.fields=Object.keys(t.data)),super(e,t),this.srcEvt){this.dataEven=this.srcEvt.dataEven,this.originatingTarget=this.srcEvt.originatingTarget,this.originatingType=this.srcEvt.originatingType,this.originatingFields=[],this.originatingData={},this._originatingData={};var r=this.fields[0];Object.keys(this.srcEvt.originatingData).forEach(e=>{var t=r+"."+e;this.originatingFields.push(t),this.originatingData[t]=this.srcEvt.originatingData[e],this._originatingData[t]=this.srcEvt._originatingData[e]}),this.originatingCreated=this.srcEvt.originatingCreated,this.originatingDeleted=this.srcEvt.originatingDeleted}else this.dataEven=S(this.data,this._data),this.originatingTarget=this.target,this.originatingType=this.type,this.originatingFields=this.fields,this.originatingData=this.data,this._originatingData=this._data,this.originatingCreated=this.created,this.originatingDeleted=this.deleted}},N=function(e,t,r=!1){for(var n=e.indexOf(t);n>-1&&(r||!1===r);)e.splice(n,1),r>0&&r--,n=e.indexOf(t);return e};class I extends T{findFireables(e){return super.findFireables(e).filter(t=>c(e.fields)||l(e.fields)||S(u(t.fields),u(e.fields)))}fire(e){return this.currentlyFiringEvents.filter(t=>t.type===e.type&&t.fields===e.fields).length||(this.currentlyFiringEvents.push(e),this.fireables.forEach(t=>{e.propagationStopped||t.params.type&&t.params.type!==e.type||t.fire(e)}),this.currentlyFiringEvents.pop()),e}static createForTarget(e){return super.createForTarget(e,"observers",I)}static getForTarget(e){return super.getForTarget(e,"observers")}}var _=function(e,t,r=null,n={}){if(!e||!s(e))throw new Error("Object must be of type object!");var i;(g(t)||c(t)||l(t))&&(n=arguments.length>2?r:{},r=t,t=null),(i=I.getForTarget(e))&&i.findFireables({handler:r,fields:t,params:n}).forEach(e=>{i.removeFireable(e)})},q=function(e,t,r){_(r,null,{tags:["#e-bubbling",t,e]})},H=function(e){return typeof e},B=function(e,t,r=!1){if(""==t)return e;var n=r?e.lastIndexOf(t):e.indexOf(t);return-1===n?"":e.substr(n+t.length)},U=function(e,t,r={},n={}){t=u(t).slice();for(var i=e;!l(i)&&!c(i)&&t.length;){var a=t.shift();if(!(r.get?r.get(i,a):s(i)?a in i:i[a]))return void(n.exists=!1);i=r.get?r.get(i,a):i[a]}return n.exists=!0,i},z=class extends O{constructor(e,t=null,r={}){if(super(),this.handler=e,this.fields=t,this.params=r,this.fieldsArray=u(this.fields),this.isDynamicField=this.fieldsArray.filter(e=>e.indexOf("..")>-1||e.startsWith(".")||e.endsWith(".")).length,this.isDynamicField&&this.fieldsArray.length>1)throw new Error('Only one "Dynamic Field" must be observed at a time! "'+this.fieldsArray.join(", ")+'" have been bound together.')}fire(e){this.disconnected||this.params.type&&this.params.type!==e.type||e.dataEven&&!1!==this.params.diff||this.fireCallback(e,t=>{if(t){var r=[],n=[];return!1!==this.params.data&&t.forEach(t=>{var i=e.originatingFields.reduce((r,n)=>{var i=e.originatingData[n],s=e._originatingData[n];if(!r&&t===n)return[i,s];if(!r&&(t+".").startsWith(n+".")){var a=B(t,n+".");return[U(i,a.split("."),{get:G}),U(s,a.split("."),{get:G})]}return r},null);if(i)r.push(i.shift()),n.push(i.shift());else{var s=U(e.target,o(t)?t.split("."):t,{get:G});r.push(s),n.push(s)}}),a(this.fields)?e.response(this.handler(r,n,e)):e.response(this.handler(r[0],n[0],e))}r={},n={};return e.fields.forEach(t=>{var i=t in e.data?e.data[t]:G(e.target,t),s=t in e._data?e._data[t]:i;r[t]=i,n[t]=s}),e.response(this.handler(r,n,e))})}fireCallback(e,t){if(this.fieldsArray.length){var r=[];this.fieldsArray.filter((t,n)=>(t=o(t)?t.replace(/`/g,""):t,r[n]=[],e.originatingFields.filter(i=>{var s=i.split("."),a=this.isDynamicField?t.split(".").map((e,t)=>e||s[t]||"").join("."):t;return $(r[n],a),(a===i&&!e.srcEvt||!1!==this.params.observeUp&&(a+".").startsWith(i+".")||this.params.observeDown&&(i+".").startsWith(a+"."))&&(!this.isDynamicField||!a.split(".").filter(e=>!e).length)}).length)).length&&(n=r,n.reduce((e,t)=>{var r=[];return e.forEach(e=>{u(t).forEach(t=>{var n=e.slice();n.push(t),r.push(n)})}),r},[[]])).forEach(t)}else this.fields||e.srcEvt&&!this.params.observeDown||t();var n}},J=function(e,t,r=null,n={}){if(!e||!s(e))throw new Error("Object must be of type object!");if(g(t)&&(n=arguments.length>2?r:{},r=t,t=null),!g(r))throw new Error('Callback must be a function; "'+H(r)+'" given!');var i;return(i=I.getForTarget(e))||(i=I.createForTarget(e)),i.addFireable(new z(r,t,n))},K=function(e,t,r){var n;J(r,(i,s,a)=>{if(n=I.getForTarget(e)){var o=d(t,r);return n.fire(new L(e,{type:a.type,bubbling:!0,data:o,_data:o,srcEvt:a}))}},{observeDown:!0,tags:["#e-bubbling",t,e]})},Q=function(e,t,r=[],n=!1){var i=e.map((e,t)=>{if(!e||!s(e))throw new Error("Target must be of type object!");return{target:e,targetCopy:R(e,r),setData:{},_setData:{},delData:{},_delData:{},created:[],deleted:[]}}),o=t(...e);return i.map(e=>{var t,i,o=Object.keys(e.targetCopy),l=Object.keys(e.target),c=D(o.concat(l)).filter(t=>{if(!(r.length&&!r.includes(t)||a(e.target)&&("length"===t||".reflex"===t))){if(l.includes(t)?(e._setData[t]=e.targetCopy[t],e.setData[t]=e.target[t],o.includes(t)||e.created.push(t)):(e._delData[t]=e.targetCopy[t],e.delData[t]=void 0,e.deleted.push(t)),e.targetCopy[t]!==e.target[t])return e.targetCopy[t]&&s(e.targetCopy[t])&&q(e.target,t,e.targetCopy[t]),e.target[t]&&s(e.target[t])&&K(e.target,t,e.target[t]),!0;delete e.setData[t],delete e._setData[t]}});return((i=I.getForTarget(e.target))||n)&&(t=new L(e.target,{type:"transaction",data:M(e.setData,e.delData),_data:M(e._setData,e._delData),created:e.created,deleted:e.deleted}),i&&(Object.keys(e.delData).length&&t.response(i.fire(new L(e.target,{type:"del",data:e.delData,_data:e._delData,deleted:e.deleted}))),Object.keys(e.setData).length&&t.response(i.fire(new L(e.target,{type:"set",data:e.setData,_data:e._setData,created:e.created}))))),n?t:c}),o},G=function(e,t){if(!e||!s(e))throw new Error("Target must be of type object!");var r,n,i=function(r){return arguments.length?r:a(t)?d(t,e):e[t]};return r=(n=P.getForTarget(e))?n.fire(new y(e,{type:"get",query:t}),i):i(),a(e)&&!f(t)&&g(r)&&!m(r)?function(...t){return Q([e],()=>r.apply(e,t))}:r},V=function(e,t){return e.reduce((e,r)=>e&&t(r),!0)},Y=function(e,t){if(!e||!s(e))throw new Error("Target must be of type object!");var r,n=function(r){return arguments.length?r:t in e};return(r=P.getForTarget(e))?r.fire(new y(e,{type:"has",query:t}),n):n()},Z=function(e,t,r,n=null,i=!1){if(!t||!s(t))throw new Error("Target must be of type object!");h(r)&&(i=n);var l,c,p=r,d={},f={},m=[],g=(r,n,i)=>{var a;d[r]=t[r],Y(t,r)||m.push(r),e&&(n=(a=n||{}).value);var o,l,c=function(e){return arguments.length?e:(a?Object.defineProperty(t,r,a):t[r]=n,!0)};if(l=P.getForTarget(t)){var p=a?{type:"def",query:r,descriptor:a,related:i}:{type:"set",query:r,value:n,related:i};o=l.fire(new y(t,p),c)}else o=c();return o?(f[r]=n,f[r]!==d[r]?(d[r]&&s(d[r])&&q(t,r,d[r]),f[r]&&s(f[r])&&K(t,r,f[r])):(delete f[r],delete d[r])):delete d[r],o},v=[];if(a(p)||(o(p)||w(p))&&(p=u(p)))v=p.map(e=>g(e,n,p));else if(h(r)){var b=Object.keys(r);v=b.map(e=>g(e,r[e],b))}return((c=I.getForTarget(t))||i)&&(l=new L(t,{type:"set",data:f,_data:d,created:m}),c&&c.fire(l)),i?l:V(v,e=>e)},X=function(e,t,r=null,n=!1){return Z(!1,...arguments)},ee=function(e,t){u(t).forEach(t=>{var r,n,i=e[t],s=Object.getOwnPropertyDescriptor(e,t)||{enumerable:!(t in e)};"value"in s&&delete s.value,"writable"in s&&delete s.writable,s.get=()=>{if(r)return i;r=!0;var n=G(e,t);return r=!1,n},s.set=r=>{if(n)return i=r,!0;n=!0;X(e,t,r);return n=!1,!0},Object.defineProperty(e,t,s)})},te=function(e,t){if(!t||!s(t))throw new Error("Target must be of type object!");var r,n=function(r){return arguments.length?r:e?Object.getOwnPropertyNames(t):Object.keys(t)};return(r=P.getForTarget(t))?r.fire(new y(t,{type:e?"ownKeys":"keys"}),n):n()},re=function(e){return te(!1,...arguments)};var ne=function(e,t,r=null,n=!1){return Z(!0,...arguments)},ie=function(e,t,r=!1){if(!e||!s(e))throw new Error("Target must be of type object!");t=u(t);var n,i,a={},o={},l=[],c=t.map(r=>{a[r]=e[r],Y(e,r)&&l.push(r);var n,i,c=function(t){return arguments.length?t:(delete e[r],!0)};return(n=(i=P.getForTarget(e))?i.fire(new y(e,{type:"del",query:r,related:t}),c):c())&&(o[r]=void 0,a[r]&&s(a[r])&&q(e,r,a[r])),n});return((i=I.getForTarget(e))||r)&&(n=new L(e,{type:"del",data:o,_data:a,deleted:l}),i&&Object.keys(o).length&&i.fire(n)),r?n:V(c,e=>e)};class se extends T{fire(e){return this.fireables.forEach(t=>{e.propagationStopped||t.fire(e)}),e}static createForTarget(e,t=se){return super.createForTarget(e,"listeners",t)}static getForTarget(e){return super.getForTarget(e,"listeners")}}var ae=class extends O{constructor(e,t={}){super(),this.handler=e,this.params=t}fire(e){this.params.type===e.type&&e.response(this.handler.call(this.target,e.e))}};var oe={build:function e(t,r=!1){if(!t||!s(t))throw new Error("Target must be of type object!");var n=re(t);n.forEach(n=>{var i=G(t,n);s(i)&&i&&(K(t,n,i),e(i,r))}),r&&ee(t,n)},observe:J,unobserve:_,trap:function(e,t,r={}){if(!e||!s(e))throw new Error("Object must be of type object!");if(!g(t))throw new Error('Callback must be a function; "'+H(t)+'" given!');var n;return(n=P.getForTarget(e))||(n=P.createForTarget(e)),n.addFireable(new A(t,r))},untrap:function(e,t=null,r={}){if(!e||!s(e))throw new Error("Object must be of type object!");var n;(n=I.getForTarget(e))&&n.findFireables({handler:t,params:r}).forEach(e=>{n.removeFireable(e)})},def:ne,defineProperty:ne,set:X,del:ie,deleteProperty:ie,link:K,unlink:q,transaction:Q,get:G,has:Y,init:ee,keys:re,ownKeys:function(e){return te(!0,...arguments)},on:function(e,t,r,n={}){var i;return(i=se.getForTarget(e))||(i=se.createForTarget(e)),i.addFireable(new ae(r,M(n,{type:t})))},off:function(e,t,r=null,n={}){var i;(i=se.getForTarget(e))&&i.findFireables({handler:r,type:t,params:n}).forEach(e=>{i.removeFireable(e)})},trigger:function(e,t,r={}){var n;if(n=se.getForTarget(e))return n.fire(new b(e,M(r,{type:t})))},MutationEvent:L,QueryEvent:y,Event:b},le=function(e){return Array.isArray(e)},ce=function(e){return"function"==typeof e},pe=function(e){return ce(e)||e&&"[object function]"==={}.toString.call(e)},he=function(e){return!Array.isArray(e)&&"object"==typeof e&&e},ue=function(e){return Array.isArray(e)||"object"==typeof e&&e||ce(e)},de=function(e){return!0!==e&&!1!==e&&null!==e&&""!==e&&!isNaN(1*e)},fe=function(e,t){var r=[];return function(e,t){t=(t=t||Object.prototype)&&!le(t)?[t]:t;var r=[];for(e=e;e&&(!t||t.indexOf(e)<0)&&"default"!==e.name;)r.push(e),e=e?Object.getPrototypeOf(e):null;return r}(e,t).forEach(e=>{!function(e,...t){t.forEach(t=>{e.indexOf(t)<0&&e.push(t)})}(r,...Object.getOwnPropertyNames(e))}),r};function me(e,t,r=!1,n=!1,i=!0){var s=0,a=e.shift();if((de(a)||!0===a||!1===a)&&(s=a,a=e.shift()),!e.length)throw new Error("_merge() requires two or more array/objects.");return e.forEach((e,o)=>{(ue(e)||pe(e))&&(r?fe(e):Object.getOwnPropertyNames(e)).forEach(l=>{var c=a[l],p=e[l];if((le(c)&&le(p)||he(c)&&he(p))&&(!0===s||s>0))a[l]=le(c)&&le(p)?[]:{},me([de(s)?s-1:s,a[l],c,p],t,r,n,i);else if(t(l,a,e,o))if(le(a)&&le(e))n?a[l]=p:a.push(p);else try{i?Object.defineProperty(a,l,Object.getOwnPropertyDescriptor(e,l)):a[l]=e[l]}catch(e){}})}),a}var ge=function(...e){return me(e,(e,t,r)=>!0,!1,!1,!1)},ve=function(e){return null===e||""===e},be=function(e){return arguments.length&&(void 0===e||void 0===e)},ye=function(e,t){if(!e)return!1;if(e instanceof t)return!0;var r=e=>{for(;e&&e!==Function.prototype;){if(e===t||e.prototypes&&e.prototypes.reduce((e,n)=>e||n===t||r(n),!1))return!0;e=Object.getPrototypeOf(e)}return!1};return r(e.constructor)},we=function(e){return"number"==typeof e},xe=function(e){return he(e)&&Object.getPrototypeOf(e)===Object.prototype},ke=function(e){return!0===e||!1===e},Ee=function(e,t){var r=void 0;return ue(e)&&Object.keys(e).forEach((n,i)=>{!1!==r&&(r=t(de(n)?parseFloat(n):n,e[n],i))}),r};const Se=function(e,t,r=!0,n=1){if(le(e)&&le(t)&&e.length!==t.length)return!r;if(he(e)&&he(t)){var i=Object.keys(e),s=Object.keys(t);if(!i.length&&!s.length)return xe(e)&&xe(t)?r:e===t===r;if(!Se(i,s))return!r}if(n>0&&(le(e)&&le(t)||he(e)&&he(t))){var a=function(e,t,r=!0,n=!0,i=!1,s=!1){if(le(e)&&le(t)){var a=[],o=!0;return e.forEach(e=>{if(o){var l=!1;Ee(t,(t,i)=>{(!l||n&&ue(e))&&(l=r(e,i),(le(l)&&!l.length||he(l)&&!Object.keys(l).length)&&(l=!1),ue(l)&&n&&(e=l))}),ue(l)?a.push(n?l:e):ke(l)?i&&!l||!i&&l?a.push(e):s&&(o=!1):a.push(l)}}),a}if(he(e)&&he(t)){a={},o=!0;return Object.keys(e).forEach(l=>{if(o){var c=r(e[l],t[l]);(le(c)&&!c.length||he(c)&&!Object.keys(c).length)&&(c=!1),ue(c)?a[l]=n?c:e[l]:ke(c)?i&&!c||!i&&c?a[l]=e[l]:s&&(o=!1):a[l]=c}}),a}}(e,t,(e,t)=>Se(e,t,r,n-1),!1,!1,!0);return le(a)?a.length===e.length&&a.length===t.length:he(a)&&he(e)?Object.keys(a).length===Object.keys(e).length&&Object.keys(a).length===Object.keys(t).length:a}return pe(r)?r(e,t):we(e)&&we(t)&&isNaN(e)&&isNaN(t)?r:e===t===r};var je=Se,Oe=class{even(e){return!(!he(e)||e.jsenType!==this.jsenType)&&je(e,this)}inherit(e){return this}withComments(e){return this.meta||(this.meta={}),this.meta.comments=e,this}withVars(e){return this.meta||(this.meta={}),this.meta.vars=e,this}};const Te=class extends Oe{};Object.defineProperty(Te.prototype,"jsenType",{get:()=>"Reference"});var Ce=Te;const Ae=class extends Oe{};Object.defineProperty(Ae.prototype,"jsenType",{get:()=>"CallExpression"});var Pe=Ae;const $e=class extends Oe{};Object.defineProperty($e.prototype,"jsenType",{get:()=>"FunctionType"});var Fe=$e;const We=class extends Oe{};Object.defineProperty(We.prototype,"jsenType",{get:()=>"IfConditional"});var Re=We;const Me={};class De{static parse(e,t,r={},n=De){if(e.length){var i;if(Me[e])if(i=De.parseOne(e,Me[e],r,n))return i;for(var s=Object.values(t||n.grammars),a=0;a<s.length;a++){var o=De.parseOne(e,s[a],r,n);if(o)return t||(Me[e]=s[a]),o}if(!1===r.assert)return;throw new Error("[Syntax error:] "+e)}}static parseOne(e,t,r={},n=De){var i=[],s=t.parse(e,(e,t,s={})=>{var a=De.parse(e,t,s?ge(r,s):r,n);return!1!==s.lodge&&(ye(a,Ce)||ye(a,Pe)?i.push(a):!a||ye(a,Fe)||ye(a,Re)||a.meta.vars.forEach(e=>i.push(e))),a});return s&&(s.meta||(s.meta={}),s.meta.vars=i,le(r.explain)&&r.explain.push(e+" >>-------------\x3e> "+s.jsenType)),s}}var Le=function(e){return"string"==typeof e&&null!==e},Ne=function(e,t=!0){return le(e)?e:!t&&he(e)?[e]:!1!==e&&0!==e&&function(e){return ve(e)||be(e)||!1===e||0===e||ue(e)&&!Object.keys(e).length}(e)?[]:function(e){return!Le(e)&&!be(e.length)}(e)?Array.prototype.slice.call(e):he(e)?Object.values(e):[e]};const Ie=function(e,t=1,r=!0){return!de(t)||t<=0?e:(!le(e)&&he(e)&&r&&(e=Object.values(e)),le(e)?e.reduce((e,n)=>le(n)||he(n)&&r?e.concat(Ie(le(n)?n:Object.values(n),t-1,r)):e.concat(n),[]):e)};var _e=Ie,qe=function(e,t=1){var r=0;e.forEach(e=>{r++});var n=e.slice(e.length-r,t);return arguments.length>1?n:n[0]},He=function(e,t=1){return arguments.length>1?qe(e.slice().reverse(),t).reverse():qe(e.slice().reverse())},Be=function(e,t=[]){return me([{},e],(e,r,n)=>{if(!pe(n[e]))return pe(t)?t(e):!le(t)||!t.length||t.indexOf(e)>-1},!1,!1,!1)};const Ue=class{static lex(e,t,r={}){if(!Le(e))throw new Error("Argument1 must be a string!");var n=e=>({delims:e.delims.slice(),options:Be(e.options),nesting:e.nesting.slice(),maxDepth:e.maxDepth,comments:e.comments.slice(),tokens:e.tokens.slice(),matches:e.matches.slice(),matchesi:Be(e.matchesi)});if(Ue.$cache[e]&&!1!==r.cache)for(var i=0;i<Ue.$cache[e].length;i++){var s=Ue.$cache[e][i];if(je(s.delims,t))return n(s)}var a=new Ue(e,r).lex(t);return!1!==r.cache&&(Ue.$cache[e]=Ue.$cache[e]||[],Ue.$cache[e].push(a)),n(a)}static split(e,t,r){return Ue.lex(e,t,r).tokens}static match(e,t,r){return Ue.lex(e,t,r).matches}constructor(e,t){if(!Le(e))throw new Error("Lexer requires the first argument to be a string.");this.$str=e,this.$options=t||{},this.$options.blocks||(this.$options.blocks=Ue.$blocks),this.$options.quotes||(this.$options.quotes=Ue.$quotes),this.$options.comments||(this.$options.comments=Ue.$comments)}lex(e,t){var r={delims:Ne(e),options:ge(!0,{},this.$options,t||{}),nesting:[],maxDepth:0,comments:[],tokens:[],matches:[],matchesi:{}};if(this._evalCharsAt(r,0),r.nesting.length)throw new Error("Error parsing the string: "+this.$str+". Unterminated blocks: "+_e(r.nesting).join(", "));return r}_evalCharsAt(e,t){if(!(t>=this.$str.length)){var r=1,n={},i={},s={};if(e.openComment||(i=this._testQuotes(e,t)),e.openQuote||(n=this._testComments(e,t)),e.openComment||n.ending)if(e.nesting.length||s.ending)this._push(e,this.$str[t]);else r=(o=n.starting||n.ending||this.$str[t]).length,this._push(e,o,"comments",n.starting);else if(e.openQuote||i.ending)this._push(e,this.$str[t]);else{if(e.options.limit&&e.matches.length===e.options.limit)return this._push(e,this.$str[t]),this._evalCharsAt(e,t+1);s=this._testNesting(e,t);s=this._testNesting(e,t);var a=this._testChars(e.options.stopChars||[],e,t);if(!e.nesting.length&&!1!==a)return e.options.stopChar=a,void(e.options.stopCharForward=this.$str.substr(t));if(e.delims.length)if(e.nesting.length||s.ending){var o;r=(o=s.starting||s.ending||this.$str[t]).length,this._push(e,o)}else{this._push(e,"");var l=this._testChars(e.delims,e,t);if(!1!==l&&(e.matches.push(l),e.matchesi[t]=l,r=l.length||1,!e.options.preserveDelims))return this._evalCharsAt(e,t+(l.length||1));this._push(e,l||this.$str[t])}else 2===e.nesting.length&&s.starting?(e.matches.push(null),this._push(e,s.starting),r=s.starting.length):!e.nesting.length&&s.ending?(this._push(e,s.ending),r=s.ending.length,e.matches.push(null)):this._push(e,this.$str[t])}return this._evalCharsAt(e,t+r)}}_testQuotes(e,t){var r={};return(e.options.quotes||[]).forEach(n=>{this.$str.substr(t,1)===n&&(e.openQuote?n===e.openQuote&&(e.openQuote=!1,r.ending=n):(e.openQuote=n,r.starting=n))}),r}_testComments(e,t){var r={};return(e.options.comments||[]).forEach(n=>{if(e.openComment){if(He(n)===He(e.openComment)){var i=He(n);this.$str.substr(t).startsWith(i)&&(e.openComment=!1,r.ending=i)}}else{var s=qe(n);this.$str.substr(t).startsWith(s)&&(e.openComment=n,r.starting=s)}}),r}_testNesting(e,t){var r={};return(e.options.blocks||[]).forEach(n=>{var i=qe(n);if(this.$str.substr(t).startsWith(i))e.nesting=e.nesting.concat([n]),r.starting=i;else if(e.nesting.length&&He(n)===He(He(e.nesting))){var s=He(n);this.$str.substr(t).startsWith(s)&&(e.nesting=e.nesting.slice(0,-1),r.ending=s)}}),e.maxDepth=Math.max(e.maxDepth,e.nesting.length),r}_testChars(e,t,r){for(var n=0;n<e.length;n++){var i=e[n];if(pe(i)){var s=i(this.$str.substr(0,r),this.$str.substr(r));if(!1!==s)return s}if(t.options.useRegex){var a=this.$str.substr(r).match(new RegExp("^"+i,!0!==t.options.useRegex?t.options.useRegex:""));if(a)return a[0]}if(!t.options.ci&&this.$str.substr(r,i.length)===i||t.options.ci&&this.$str.substr(r,i.length).toLowerCase()===i.toLowerCase())return i}return!1}_push(e,t,r="tokens",n=!1){var i=e.matches.length;if(be(e.tokens[i])&&(e.tokens[i]=""),"comments"===r){e.tokens[i].comments||(e.tokens[i]=new String(e.tokens[i]),e.tokens[i].comments=[]);var s=e.tokens[i].comments.length-(!e.tokens[i].comments.length||n?0:1);e.tokens[i].comments[s]=(e.tokens[i].comments[s]||"")+t}else{var a=e.tokens[i].comments;e.tokens[i]=new String(e.tokens[i]+t),e.tokens[i].comments=a}}split(e,t,r){return this.lex(t,r).tokens}match(e,t,r){return this.lex(t,r).matches}regParse(e,t){return this.lex(e,ge({useRegex:!0},t||{}))}regSplit(e,t){return this.regParse(e,t).tokens}regMatch(e,t){return this.regParse(e,t).matches}};Ue.$blocks=[["(",")"],["[","]"],["{","}"]],Ue.$quotes=['"',"'","`"],Ue.$comments=[["/*","*/"],["//","\n"]],Ue.$cache={};var ze=Ue;class Je{constructor(e,t=1){if(this.stack=e,this.type=t,!("main"in this.stack))throw new Error('A "main" context must be provided!');this.stack.super&&(this.stack.super=Je.create(this.stack.super)),this.stack.local=this.stack.local||{},this.stack.$local=this.stack.$local||{}}observe(e,t,r,n={}){n.observe&&e.length&&(this.stack.super&&this.stack.super.observe(e,(e,r,i)=>{if(i.fields.filter(e=>!Qe(this.stack.local,e,n)&&!Qe(this.stack.main,e,n)).length)return t(e,r,i)},r,n),ue(this.stack.main)&&n.observe(this.stack.main,e,(e,r,i)=>{if(i.fields.filter(e=>!Qe(this.stack.local,e,n)).length)return t(e,r,i)},r))}unobserve(e,t,r,n={}){n.unobserve&&(this.stack.super&&this.stack.super.unobserve(e,t,r,n),this.stack.main&&n.unobserve(this.stack.main,e,t,r))}handle(e,t,r,n=0){var i=()=>t(this.stack.main,null,()=>this.stack.super?this.stack.super.handle(e,t,r,n+1):r?r():void 0,n);return"toString"===e&&this.stack.local.toString===Object.prototype.toString?i():t(this.stack.local,this.stack.$local,i,n)}get(e,t={},r=!0){return e instanceof String&&(e+=""),this.handle(e,(n,i,s,a)=>{var o=Ke(n,e,t);return!be(o)||Qe(n,e,t)?pe(o)&&!function(e){return ce(e)&&/^class\s?/.test(Function.prototype.toString.call(e))}(o)&&r?o.bind(n):o:s()})}set(e,t,r={},n=!1){if(2===this.type&&"var"===n&&this.stack.super)return this.stack.super.set(e,t,r,n);e instanceof String&&(e+="");const i=(e,t,r,n)=>n.set?n.set(e,t,r):(e[t]=r,!0);return this.handle(!!n||e,(s,a,o)=>{if(a&&"const"===a[e])throw new Error("CONST "+e+" cannot be modified!");if(n){if(!["var","let","const"].includes(n))throw new Error("Unrecognized declarator: "+n+"!");return a[e]=n,i(s,e,t,r)}return Qe(s,e,r)?i(s,e,t,r):o()},()=>{throw new Error('"'+e+'" is undefined!')})}del(e,t={}){return e instanceof String&&(e+=""),this.handle(e,(r,n,i)=>Qe(r,e,t)?(n&&delete n[e],t.deleteProperty||t.del?(t.deleteProperty||t.del)(r,e):(delete r[e],!0)):i())}has(e,t,r={}){return e instanceof String&&(e+=""),t instanceof String&&(t+=""),this.handle(e,(n,i,s)=>{if(Qe(n,e,r)){var a=Ke(n,e,r);return Qe(a,t,r)}return s()},()=>{throw new Error('"'+e+'" is undefined!')})}exec(e,t,r={}){return e instanceof String&&(e+=""),this.handle(e,(n,i,s)=>{var a=Ke(n,e,r);if(!be(a)||Qe(n,e,r)){if(!pe(a)){if(r.exec)return r.exec(n,e,t);throw new Error('"'+e+'" is not a function! (Called on type: '+typeof n+".)")}return r.apply?r.apply(a,n,t):a.apply(n,t)}return s()},()=>{if(r.execUnknown)return r.execUnknown(this,e,t);throw new Error('"'+e+'()" is undefined!')})}static create(e){return e instanceof Je?e:new Je({main:e})}}const Ke=(e,t,r)=>r.get&&ue(e)&&!ve(e)?r.get(e,t):(ue(e)||Le(e)||we(e))&&!ve(e)?e[t]:void 0,Qe=(e,t,r)=>r.has&&ue(e)&&!ve(e)?r.has(e,t):ue(e)&&!ve(e)?t in e:!ve(e)&&!be(e[t]);var Ge=function(e,t,r){return e.startsWith(t)&&e.endsWith(r)},Ve=function(e,t,r=!1){if(""==t)return e;var n=r?e.lastIndexOf(t):e.indexOf(t);return-1===n?"":e.substr(n+t.length)},Ye=function(e,t,r=!1){if(""==t)return e;var n=r?e.lastIndexOf(t):e.indexOf(t);return-1===n?e:e.substr(0,n)},Ze=function(e,t,r){return function(e,t){return Ye(e,t,!0)}(Ve(e,t),r)};const Xe=class extends Oe{};Object.defineProperty(Xe.prototype,"jsenType",{get:()=>"Abstraction"});var et=Xe;const tt=class extends et{constructor(e){super(),this.expr=e}eval(e=null,t={}){return this.expr.eval(e,t)}toString(e=null){return"("+this.expr.toString(e)+")"}static parse(e,t,r=tt){if(Ge(e,"(",")")&&!ze.match(e,[" "]).length)return new r(t(Ze(e,"(",")")))}};var rt=tt;const nt=class extends Oe{};Object.defineProperty(nt.prototype,"jsenType",{get:()=>"ArrayType"});var it=nt;const st=class extends it{constructor(e){super(),this.exprs=e||[]}inherit(e){if(e instanceof it){var t=e.exprs.filter(e=>this.exprs.reduce((t,r)=>t&&!e.even(r),!0));this.exprs=t.concat(this.exprs)}return this}eval(e=null,t={}){return this.exprs.map(r=>r.eval(e,t))}toString(e=null){return"["+this.exprs.map(t=>t.toString(e)).join(", ")+"]"}static parse(e,t,r=st){if(Ge(e,"[","]")&&!ze.match(e.trim(),[" "]).length)return new r(ze.split(Ze(e,"[","]"),[","]).map(e=>e.trim()).filter(e=>e).map(e=>t(e)))}};var at=st;const ot=class extends Oe{};Object.defineProperty(ot.prototype,"jsenType",{get:()=>"Arguments"});var lt=ot;const ct=class extends lt{constructor(e=[]){super(),this.list=e}eval(e=null,t={}){return this.list.map(r=>r.eval(e,t))}toString(e=null){return"("+this.list.map(t=>t.toString(e)).join(", ")+")"}static parse(e,t,r=ct){if(e=e.trim(),Ge(e,"(",")")&&!ze.match(e,[" "]).length)return new r(ze.split(Ze(e,"(",")"),[","]).map(e=>t(e.trim())))}};var pt=ct,ht=function(e){return e.filter((e,t,r)=>r.indexOf(e)===t)};const ut=class extends Oe{};Object.defineProperty(ut.prototype,"jsenType",{get:()=>"AssertionExpression"});var dt=ut;const ft=class extends dt{constructor(e,t){super(),this.exprs=e,this.logic=t}eval(e=null,t={}){if("!"===this.logic)return!qe(this.exprs).eval(e,t);_e(ft.operators);for(var r=(this.logic||"").trim().toUpperCase(),n=r===(ft.operators.or||"").trim().toUpperCase(),i=r===(ft.operators.nor||"").trim().toUpperCase(),s=r===(ft.operators.and||"").trim().toUpperCase(),a=r===(ft.operators.nand||"").trim().toUpperCase(),o=!0,l=0,c=0;c<this.exprs.length;c++){if(o=this.exprs[c].eval(e,t),s&&!o)return!1;if(a&&!o)return!0;if(n&&o)return o;l+=o?1:0}return n?o:s||a?s:i&&0===l}toString(e=null){return"!"===this.logic?"!"+qe(this.exprs).toString(e):this.exprs.map(t=>t.toString(e)).join(" "+this.logic+" ")}static parse(e,t,r=ft){if(e.startsWith("!"))return new r([t(e.substr(1))],"!");var n=ze.lex(e,_e(r.operators));if(n.tokens.length>1){var i=ht(n.matches);if(i.length>1)throw new Error('"AND" and "OR" logic cannot be asserted in the same expression: '+e+"!");return new r(n.tokens.map(e=>t(e.trim())),qe(i))}}};ft.operators={and:"&&",or:"||"};var mt=ft;const gt=class extends Oe{};Object.defineProperty(gt.prototype,"jsenType",{get:()=>"AssignmentExpression"});var vt=gt;const bt=class extends vt{constructor(e,t,r,n="="){super(),this.initKeyword=e,this.reference=t,this.val=r,this.operator=n}eval(e=null,t={}){var r=this.reference.getEval(e,t),n=this.val.eval(e,t);if(!be(r.context)&&!be(r.name))return Je.create(r.context).set(r.name,n,t,this.initKeyword);throw new Error('"'+this+'" is undefined!')}toString(e=null){return(this.initKeyword?this.initKeyword+" ":"")+[this.reference.toString(e),this.operator,this.val.toString(e)].join(" ")}static parse(e,t,r=bt){var n=ze.lex(e,r.operators);if(2===n.tokens.length){var i,s=n.tokens.shift().trim(),a=n.tokens.shift().trim();if(["var","let","const"].includes(Ye(s," "))&&(i=Ye(s," "),s=Ve(s," ").trim()),!((s=t(s,null,{lodge:!1}))instanceof Ce&&(a=t(a))))throw new Error("Invalid assignment expression: "+e);return new r(i,s,a,n.matches[0].trim())}}};bt.operators=[" = "];var yt=bt;const wt=class extends Oe{};Object.defineProperty(wt.prototype,"jsenType",{get:()=>"Block"});var xt=wt;const kt=class extends Oe{};Object.defineProperty(kt.prototype,"jsenType",{get:()=>"ReturnDirective"});var Et=kt;class St extends xt{constructor(e,t){super(),this.stmts=e||[],this.delim=t}eval(e=null,t={}){e=Je.create(e);for(var r,n=[],i=0;i<this.stmts.length;i++){var s=this.stmts[i];if(s instanceof Et)return s.eval(e,t);n[i]=s.eval(e,t),function(r,n,i){e.observe(n,(n,i,s)=>{var a=r.eval(e,t);if(!1!==a)return a},{observeDown:!0,data:!1,tags:["#block",r]},t)}(s,(r=s.meta.vars,ht(r.map(e=>Ye(Ye(e.toString(),"["),"(")))),this.prevContext)}return this.prevContext=e,n}toString(e=null){return this.stmts.map(t=>t.toString(e)).join(this.delim)}static parse(e,t,r=St){var n=ze.lex(e+";",_e(r.operators).concat([St.testBlockEnd]));if(n.matches.length)return new r(n.tokens.map(e=>t(e.trim())).filter(e=>e),n.matches[0].trim())}static testBlockEnd(e,t){return!(!e.endsWith("}")||t.trim().startsWith("else"))&&""}}St.operators=[";","\r\n"];const jt=class extends Oe{};Object.defineProperty(jt.prototype,"jsenType",{get:()=>"BooleanType"});var Ot=jt;const Tt=class extends Ot{constructor(e){super(),this.state=e}eval(){return"true"===this.state.toLowerCase().trim()}toString(){return this.state}static parse(e,t,r=Tt){if("true"===(e=e.toLowerCase().trim())||"false"===e)return new r(e)}};var Ct=Tt;const At=class extends Pe{constructor(e,t){super(),this.reference=e,this.args=t}eval(e=null,t={}){var r=this.reference.getEval(e,t),n=this.args.eval(e,t);if(!be(r.context)&&!be(r.name))return Je.create(r.context).exec(r.name,n,t);throw new Error('"'+this+'" is undefined!')}toString(e=null){return this.reference.toString(e)+this.args.toString(e)}static parse(e,t,r=At){if(!e.startsWith("(")&&e.endsWith(")")&&!ze.match(e,[" "]).length){var n,i=ze.split(e,[]),s=i.pop();if(!((n=t(i.join(""),null,{lodge:!1}))instanceof Ce&&(s=t(s,[pt]))))throw new Error("Invalid call directive: "+e);return new r(n,s)}}};var Pt=At;const $t=class extends Oe{};Object.defineProperty($t.prototype,"jsenType",{get:()=>"ComparisonExpression"});var Ft=$t;const Wt=class extends Ft{constructor(e,t,r){super(),this.operand1=e,this.operand2=t,this.operator=r}eval(e=null,t={}){return Wt.compare(this.operand1.eval(e,t),this.operand2.eval(e,t),this.operator)}toString(e=null){return[this.operand1.toString(e),this.operator,this.operand2.toString(e)].join(" ")}static parse(e,t,r=Wt){var n=_e(r.operators).map(e=>" "+e+" "),i=ze.lex(e,n);if(i.tokens.length>1){if(i.tokens.length>2)throw new Error('Malformed "Comparison" expression: '+e+"!");return new r(t(qe(i.tokens).trim()),t(He(i.tokens).trim()),i.matches[0].trim())}}static compare(e,t,r="=="){if(-1===_e(Wt.operators).indexOf(r))throw new Error('The operator "'+r+'" is not recognized.');switch(r){case"===":return e===t;case"==":case"=":return e==t;case">":return e>t;case"<":return e<t;case">=":return e>=t;case"<=":return e<=t;case"!=":return e!=t;case"!==":return e!==t;case"^=":return Le(e)&&e.startsWith(t);case"$=":return Le(e)&&e.endsWith(t);case"*=":return!(!le(t)&&!Le(t))&&e.indexOf(t)>-1;case"~=":return Le(e)&&Le(t)&&(" "+e+" ").indexOf(" "+t+" ")>-1;case">=<":if(!le(t)||2!==t.length)throw new Error("A 'Between' comparison requires argument 2 to be an array of exactly 2 values.");return e>=t[0]&&e<=t[1];case"/**/":return t.match(new RegExp(e));default:return!1}}static diff(e,t,r){return!Wt.compare(e,t,r?"===":"==")}};Wt.operators={exact:{is:"===",isNull:"===",equalsTo:"==",strictlyNotEqualsTo:"!==",notEqualsTo:"!="},relative:{lesserThan:"<",greaterThan:">",lesserThanOrEqualsTo:"<=",greaterThanOrEqualsTo:">=",between:">=<"},partial:{startsWith:"^=",endsWith:"$=",contains:"*=",any:"~=",in:"~=",matches:"/**/"}};var Rt=Wt;const Mt=class extends Oe{};Object.defineProperty(Mt.prototype,"jsenType",{get:()=>"TernaryConditional"});var Dt=Mt;const Lt=class extends Dt{constructor(e,t,r){super(),this.assertion=e,this.onTrue=t,this.onFalse=r}eval(e=null,t={}){return this.assertion.eval(e,t)?this.onTrue.eval(e,t):this.onFalse.eval(e,t)}toString(e=null){return[this.assertion.toString(e),Lt.operators[0],this.onTrue.toString(e),Lt.operators[1],this.onFalse.toString(e)].join(" ")}static parse(e,t,r=Lt){var n=ze.split(e,r.operators);if(n.length>1){if(2===n.length)throw new Error("Malformed ternary expression: "+e+"!");return new r(t(n[0].trim()),t(n[1].trim()),t(n[2].trim()))}}};Lt.operators=["?",":"];var Nt=Lt;const It=class extends Oe{};Object.defineProperty(It.prototype,"jsenType",{get:()=>"DeleteExpression"});var _t=It;const qt=class extends _t{constructor(e,t="delete"){super(),this.reference=e,this.operator=t}eval(e=null,t={}){var r=this.reference.getEval(e,t);if(!be(r.context)&&!be(r.name))return Je.create(r.context).del(r.name,t);throw new Error('"'+this+'" is undefined!')}toString(e=null){return this.operator+" "+this.reference.toString(e)}static parse(e,t,r=qt){var n=ze.lex(e,Object.values(r.operators));if(1===n.matches.length&&e.startsWith(n.matches[0]+" ")){var i;if(!((i=t(n.tokens.pop().trim()))instanceof Ce))throw new Error("Invalid delete directive: "+e);return new r(i,n.matches[0].trim())}}};qt.operators={red:"reduce",del:"delete"};var Ht=qt;const Bt=class extends Fe{constructor(e,t,r={}){super(),this.paramters=e||{},this.statements=t,this.arrowFunctionFormatting=r}inherit(e){if(e instanceof Fe){for(var t=Object.keys(e.paramters),r=Object.keys(this.paramters),n=0;n<Math.max(r.length,t.length);n++){var i=t[n],s=r[n];if(!s&&i)throw new Error("Parameter #"+n+" ("+i+") in parent function must be implemented.");if(s&&i){var a=e.paramters[i],o=this.paramters[s];if(o&&!a)throw new Error("Parameter #"+n+" ("+s+") must not have a default value as established in parent function.");if(o&&a&&o.jsenType!==a.jsenType)throw new Error("Default value for parameter #"+n+" ("+s+") must be of type "+a.jsenType+" as established in parent function.")}}this.sup=e}return this}eval(e=null,t={}){return(...r)=>{var n={};Ee(Object.keys(this.paramters),(i,s)=>{var a=this.paramters[s];if(r.length-1<i&&!a)throw new Error('The parameter "'+s+'" is required.');n[s]=r.length>i?r[i]:this.paramters[s]?this.paramters[s].eval(e,t):null});var i=new Je({main:n,super:e});return this.statements.eval(i,t)}}toString(e=null){var t=[];if(Ee(this.paramters,(r,n)=>{t.push(r+(n?"="+n.toString(e):""))}),this.arrowFunctionFormatting){var r=!1===this.arrowFunctionFormatting.head||1===t.length&&-1===t[0].indexOf("="),n=!1===this.arrowFunctionFormatting.body;return(r?t[0]:"("+t.join(", ")+")")+" => "+(n?this.statements.toString(e):"{"+this.statements.toString(e)+"}")}return"function ("+t.join(", ")+") {"+this.statements.toString(e)+"}"}static parse(e,t,r=Bt){var n;if((e=e.trim()).startsWith("function")&&(n=ze.split(e,[]).slice(1).filter(e=>e.trim()))&&2===n.length)var i=!1,s=Ze(n.shift().trim(),"(",")"),a=Ze(n.shift().trim(),"{","}");else{if(e.startsWith("function")||!(n=ze.split(e,["=>"]))||2!==n.length)return;s=n.shift().trim(),a=n.shift().trim(),i={};Ge(s,"(",")")?s=Ze(s,"(",")"):i.head=!1,Ge(a,"{","}")?a=Ze(a,"{","}"):i.body=!1}var o={};ze.split(s,[","]).forEach(e=>{var r=e.split("=");r[1]?o[r[0].trim()]=t(r[1].trim(),null,{meta:null}):o[e.trim()]=null});var l=t(a,[St],{assert:!1})||t(a,null,{meta:null});return new r(o,"Block"===l.jsenType?l:new St([l]),i)}};Bt.operators=["=>"];var Ut=Bt;const zt=class extends Re{constructor(e,t,r,n={}){super(),this.assertion=e,this.onTrue=t,this.onFalse=r,this.params=n}eval(e=null,t={}){var r=new Je({main:{},super:e},2);return this.assertion.eval(e,t)?this.onTrue?this.onTrue.eval(r,t):void 0:this.onFalse?this.onFalse.eval(r,t):void 0}toString(e=null){var t=this.onTrue&&this.params.onTrueIsBlock?"{"+this.onTrue.toString(e)+"}":this.onTrue?this.onTrue.toString(e):"",r=this.onFalse&&this.params.onFalseIsBlock?"{"+this.onFalse.toString(e)+"}":this.onFalse?this.onFalse.toString(e):"";return"if ("+this.assertion.toString(e)+")"+t+(r?" else "+r:"")}static parse(e,t,r=zt){var n;if((e=e.trim()).startsWith("if")&&(n=ze.split(e,[],{limit:2}).slice(1).filter(e=>e.trim()))&&2===n.length){var i,s,a=t(Ze(n.shift().trim(),"(",")").trim()),o=ze.split(n.shift().trim(),["else"],{limit:1}),l=o.shift().trim(),c=(o.shift()||"").trim();return Ge(l,"{","}")?(i=!0,l=t(l=Ze(l,"{","}").trim(),[St],{assert:!1,meta:null})||t(l,null,{meta:null})):l=t(l,null,{meta:null}),c&&(Ge(c,"{","}")?(s=!0,c=t(c=Ze(c,"{","}").trim(),[St],{assert:!1,meta:null})||t(c,null,{meta:null})):c=t(c,null,{meta:null})),new r(a,l?"Block"===l.jsenType?l:new St([l]):null,c?"Block"===c.jsenType?c:new St([c]):null,{onTrueIsBlock:i,onFalseIsBlock:s})}}};var Jt=zt,Kt=function(e,t,r=null){return le(t)?e.filter(e=>r?t.filter(t=>r(e,t)).length:-1!==t.indexOf(e)):[]};const Qt=class extends Oe{};Object.defineProperty(Qt.prototype,"jsenType",{get:()=>"MathExpression"});var Gt=Qt;const Vt=class extends Gt{constructor(e,t){super(),this.val=e,this.exprs=t}eval(e=null,t={}){return this.exprs.reduce((r,n)=>{var i=n.val.eval(e,t),s=n.operator.trim();if(!(de(r)&&de(i)||"+"===s))throw new Error("Invalid Math expression: "+this.toString()+"!");switch(s){case"+":return r+i;case"-":return r-i;case"*":return r*i;case"/":return r/i}},this.val.eval(e,t))}toString(e=null){return[this.val.toString(e)].concat(this.exprs.map(t=>t.operator+" "+t.val.toString(e))).join(" ")}static parse(e,t,r=Vt){var n=ze.lex(e,_e(r.operators));if(n.tokens.length>1&&n.matches.length===n.tokens.length-1){var i=ht(n.matches);if(Kt(i,Vt.operators.sup).length&&Kt(i,Vt.operators.sub).length)throw new Error('"Addition/subtraction" and "multiplication/division" operators cannot be used in the same expression: '+e+"!");return new r(t(n.tokens.shift().trim()),n.tokens.map((e,r)=>({operator:n.matches[r],val:t(e.trim())})))}}};Vt.operators={sup:["*","/"],sub:[" + "," - "]};var Yt=Vt;const Zt=class extends Oe{};Object.defineProperty(Zt.prototype,"jsenType",{get:()=>"NumberType"});var Xt=Zt;const er=class extends Xt{constructor(e,t=0){super(),this.int=e,this.dec=t}eval(){return parseFloat(this.int+(this.dec?"."+this.dec:null))}toString(e=null){return this.int+(this.dec?"."+this.dec:null)}static parse(e,t,r=er){if(de(e)){e=e.split(".");return new r(parseInt(e.shift()),parseInt(e.shift()))}}};var tr=er;const rr=class extends Oe{};Object.defineProperty(rr.prototype,"jsenType",{get:()=>"ObjectType"});var nr=rr;const ir=class extends nr{constructor(e){super(),this.entries=e||{}}inherit(e){return e instanceof nr&&Ee(e.entries,(e,t)=>{e in this.entries||(this.entries[e]=t)}),this}eval(e=null,t={}){var r={};return Ee(this.entries,(n,i)=>{r[n]=i.eval(e,t)}),r}toString(e=null){var t=[];return Ee(this.entries,(r,n)=>{t.push(r+ir.operators.sub+n.toString(e))}),"{"+t.join(ir.operators.sup)+"}"}static parse(e,t,r=ir){if(Ge(e,"{","}")&&!ze.match(e.trim(),[" "]).length){var n={},i=ze.split(Ze(e,"{","}"),[ir.operators.sup]).map(e=>e.trim()).filter(e=>e);return Ee(i,(e,r)=>{var i=ze.split(r,[ir.operators.sub],{limit:1});n[qe(i).trim()]=t(He(i).trim())}),new r(n)}}};ir.operators={sup:",",sub:":"};var sr=ir;const ar=class extends Oe{};Object.defineProperty(ar.prototype,"jsenType",{get:()=>"PresenceOperator"});var or=ar;const lr=class extends or{constructor(e,t,r="in"){super(),this.prop=e,this.reference=t,this.operator=r}eval(e=null,t={}){var r=this.reference.getEval(e,t),n=this.prop.eval(e,t);if(!be(r.context)&&!be(r.name))return Je.create(r.context).has(r.name,n,t);throw new Error('"'+this+'" is undefined!')}toString(e=null){return[this.prop.toString(e),this.operator,this.reference.toString(e)].join(" ")}static parse(e,t,r=lr){var n=ze.lex(e,r.operators);if(2===n.tokens.length){var i,s;if(!((i=t(n.tokens.shift().trim()))&&(s=t(n.tokens.shift().trim()))instanceof Ce))throw new Error("Invalid presence check expression: "+e);return new r(i,s,n.matches[0].trim())}}};lr.operators=[" in "];var cr=lr;const pr=class extends Ce{constructor(e,t,r=!1){super(),this.context=e,this.name=t,this.backticks=r}getEval(e=null,t={}){var r=e,n=this.name;return this.context&&(n instanceof Oe&&(n=n.eval(e,t)),r=this.context.eval(e,t)),{context:r,name:n}}eval(e=null,t={}){var r=this.getEval(e,t);if(!be(r.context)&&!be(r.name))return Je.create(r.context).get(r.name,t)}toString(e=null){var t=this.name;if(this.context){var r=this.context.toString(e);t instanceof Oe?t="["+t.toString(e)+"]":this.backticks&&(t="`"+t+"`")}else{r=e;this.backticks&&(t="`"+t+"`")}return(r||"")+(r&&!t.startsWith("[")?pr.separator:"")+t}static parse(e,t,r=pr){if(!ze.match(e.trim(),[" "]).length){var n,i,s=ze.split(e,[]),a=s.pop(),o=ze.split(a.trim(),[r.separator],{preserveDelims:!0});if(o.length>1&&(a=o.pop().substr(1),s=s.concat(o)),Ge(a,"`","`")&&(a=Ze(a,"`","`"),i=!0),s.length&&((n=t(s.join(""))).isContext=!0),Ge(a,"[","]")){if(!n)throw new Error("Invalid reference: "+e+"!");a=t(Ze(a,"[","]"))}return new r(n,a,i)}}};pr.separator=".";var hr=pr;const ur=class extends Et{constructor(e){super(),this.expr=e}eval(e=null,t={}){return this.expr?this.expr.eval(e,t):void 0}toString(e=null){return this.expr?"return "+this.expr.toString(e):"return"}static parse(e,t,r=ur){var n=e.toLowerCase();if(n.startsWith("return ")||"return"===n)return new r(t(e.substr(6).trim()))}};var dr=ur;const fr=class extends Oe{};Object.defineProperty(fr.prototype,"jsenType",{get:()=>"StringType"});var mr=fr;const gr=class extends mr{constructor(e,t){super(),this.expr=e,this.quote=t}eval(){return this.expr}toString(){return this.quote+this.expr+this.quote}static parse(e,t,r=gr){if(e=e.trim(),(Ge(e,'"','"')||Ge(e,"'","'"))&&!ze.match(e,[" "]).length){var n=Ge(e,'"','"')?'"':"'";return new r(Ze(e,n,n),n)}}};var vr=gr;De.grammars={If:Jt,Return:dr,Deletion:Ht,Assignment:yt,Presence:cr,Func:Ut,Abstraction:rt,Condition:Nt,Assertion:mt,Comparison:Rt,Math:Yt,Arr:at,Obj:sr,Num:tr,Str:vr,Bool:Ct,Call:Pt,Reference:hr};var br=De;var yr={Window:null,Trap:null,params:{rootAttribute:"root",scopedIdAttribute:"scoped:id",idHintsAttribute:"scope-hint",scopeTreePropertyName:"scopeTree",addCallback:null}};const wr={std:{html:{type:["#sectioning-root"],model:["head","body"],singleton:!0},caption:{model:["#flow","!table"],singleton:!0},col:{model:["#nothing"]},colgroup:{model:[{"colgroup[span]":["#nothing"]},{":not(colgroup[span])":["col","template"]}],singleton:!0},dd:{model:["#flow"],implicitRole:"definition"},dt:{model:["#flow","!#heading","!#sectioning","!header","!footer"],implicitRole:"term"},figcaption:{model:["#flow"],singleton:!0},head:{model:["#metadata"],singleton:!0},legend:{model:["#phrasing"],singleton:!0},li:{model:["#flow"],implicitRole:"listitem"},optgroup:{model:["option","#script-supporting"],implicitRole:"group"},option:{model:[{"option[label][value]":["#nothing"]},{"option[label]:not(option[value])":["#text"]},{":not(option[label])":["#text"]}]},param:{model:["#nothing"]},rp:{model:["#text"]},rt:{model:["#phrasing"]},source:{model:["#nothing"]},summary:{model:["#phrasing","#heading"],singleton:!0},track:{model:["#nothing"]},tbody:{model:["#script-supporting","tr"]},td:{model:["#flow","!#heading","!#sectioning","!header","!footer"]},tfoot:{model:["tr","#script-supporting"],singleton:!0},thead:{model:["tr","#script-supporting"],singleton:!0},tr:{model:["#script-supporting","td","th"]},a:{type:["#flow","#phrasing",{"a[href]":["#interactive","#palpable"]}],model:["#transparent","!#interactive","!a"]},abbr:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},address:{type:["#flow","#palpable"],model:["#flow","!#heading","!#sectioning","!header","!footer","!address"]},area:{type:["#flow","#phrasing"],model:["#nothing"]},article:{type:["#flow","#palpable","#sectioning-content"],model:["#flow"],implicitRole:"article",acceptableRoles:["application","article","document","main"]},aside:{type:["#flow","#palpable","#sectioning-content"],model:["#flow"],implicitRole:"complementary",acceptableRoles:["complementary","note","search"]},audio:{type:["#embedded","#flow","#phrasing",{"audio[controls]":["#interactive","#palpable"]}],model:["#transparent","!#media","track",{":not(audio[src])":["source"]}]},b:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},base:{type:["#metadata"],model:["#nothing"],singleton:!0},bdi:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},bdo:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},blockquote:{type:["#flow","#palpable","#sectioning-root"],model:["#flow"]},body:{type:["#sectioning-root"],model:["#flow","@banner","@contentinfo","@complementary","@main"],singleton:!0},br:{type:["#flow","#phrasing"],model:["#nothing"]},button:{type:["#flow","#interactive","#palpable","#phrasing"],model:["#phrasing","!#interactive"]},canvas:{type:["#embedded","#flow","#palpable","#phrasing"],model:["#transparent","!#interactive","a","img[usemap]","button",'input[type="button"]','input[type="radio"]','input[type="checkbox"]',"select[multiple]","select[size>=1]","[tabindex]!#interactive"]},cite:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},code:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},data:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},datalist:{type:["#flow","#phrasing"],model:["#phrasing","#script-supporting","option"]},del:{type:["#flow","#phrasing"],model:["#transparent"]},details:{type:["#flow","#interactive","#palpable","#sectioning-root"],model:["#flow","summary"]},dfn:{type:["#flow","#palpable","#phrasing"],model:["#phrasing","!dfn"],implicitRole:"term"},dialog:{type:["#flow","#sectioning-root"],model:["#flow"],implicitRole:"dialog"},div:{type:["#flow","#palpable"],model:[{"dl > div":["dt","dd"]},{div:["#flow"]}]},dl:{type:["#flow"],model:["#script-supporting","dl","dt","div"]},em:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},embed:{type:["#embedded","#flow","#phrasing","#interactive","#palpable"],model:["#nothing"]},fieldset:{type:["#flow","#sectioning-root","#palpable"],model:["legend","#flow"]},figure:{type:["#flow","#sectioning-root","#palpable"],model:["#flow","figcaption"],implicitRole:"figure"},footer:{type:["#flow","#palpable"],model:["#flow","!header","!footer"],acceptableRoles:["contentinfo"],singleton:!0},form:{type:["#flow","#palpable"],model:["#flow","!form"]},h1:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h2:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h3:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h4:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h5:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h6:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},header:{type:["#flow","#palpable"],model:["#flow","!header","!footer"],acceptableRoles:["banner"],singleton:!0},hgroup:{type:["#flow","#heading","#palpable"],model:["h1","h2","h3","h4","h5","h6","#script-supporting"]},hr:{type:["#flow"],model:["#nothing"],implicitRole:"separator"},i:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},iframe:{type:["#embedded","#flow","#phrasing","#interactive","#palpable"],model:["#nothing"]},img:{type:["#embedded","#flow","#phrasing",{"img[usemap]":["#interactive","#palpable"]}],model:["#nothing"]},input:{type:["#flow","#phrasing",{'input:not([type!="hidden"])':["#interactive","#palpable"]}],model:["#nothing"]},ins:{type:["#flow","#phrasing","#palpable"],model:["#transparent"]},kbd:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},label:{type:["#flow","#phrasing","#interactive","#palpable"],model:["#phrasing","!label"]},link:{type:["#metadata",{"body link":["#flow","#phrasing"]}],model:["#nothing"]},main:{type:["#flow","#palpable"],model:["#flow"],implicitRole:"main",singleton:!0},map:{type:["#flow","#phrasing","#palpable"],model:["#transparent"]},mark:{type:["#flow","#phrasing","#palpable"],model:["#transparent"]},math:{type:["#embedded","#flow","#phrasing","#palpable"],model:[]},menu:{type:["#flow",{":contains(> li)":["#palpable"]}],model:["#script-supporting","li"],implicitRole:"list"},meta:{type:["#metadata",{"meta[itemprop]":["#flow","#phrasing"]}],model:["#nothing"],names:["application-name","author","description","generator","keywords","referrer","theme-color"]},meter:{type:["#flow","#labelable","#phrasing","#palpable"],model:["#phrasing","!meter"]},nav:{type:["#flow","#sectioning-content","#palpable"],model:["#flow"],implicitRole:"navigation",acceptableRoles:["navigation"]},noscript:{type:["#metadata","#flow","#phrasing"],model:[{"head link":["style","meta","link"]},{":not(head link)":["#transparent","!noscript"]}]},object:{type:["#embedded","#flow","#phrasing",{"object[usemap]":["#interactive","#palpable"]}],model:["#transparent","param"]},ol:{type:["#flow",{":contains(> li)":["#palpable"]}],model:["#script-supporting","li"],implicitRole:"list"},output:{type:["#flow","#labelable","#phrasing","#palpable"],model:["#phrasing","!meter"]},p:{type:["#flow","#palpable"],model:["#phrasing"]},picture:{type:["#embedded","#flow","#phrasing"],model:["source","img","#acript-supporting"]},pre:{type:["#flow","#palpable"],model:["#phrasing"]},progress:{type:["#flow","#labelable","#phrasing","#palpable"],model:["#phrasing","!progress"]},q:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},ruby:{type:["#flow","#phrasing","#palpable"],model:["rp","rt"]},s:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},samp:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},script:{type:["#flow","#metadata","#phrasing","#acript-supporting"],model:[{"script[src]":[]}]},section:{type:["#flow","#sectioning-content","#palpable"],model:["#flow"],implicitRole:"region",acceptableRoles:["alert","alertdialog","application","contentinfo","dialog","document","log","main","marquee","region","search","status"]},select:{type:["#flow","#interactive","#labelable","#phrasing","#palpable"],model:["option","optgroup","#acript-supporting"]},slot:{type:["#flow","#phrasing"],model:["#transparent"]},small:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},span:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},strong:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},style:{type:["#metadata"],model:["#text"]},sub:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},sup:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},svg:{type:["#embedded","#flow","#phrasing","#palpable"],model:[]},table:{type:["#flow","#palpable"],model:["caption","colgroup","thead","tbody","tr","tfoot","#script-supporting"]},td:{type:["#sectioning-root"],model:["#flow"]},template:{type:["#metadata","#flow","#phrasing","#script-supporting"],model:["#nothing"]},textarea:{type:["#flow","#interactive","#labelable","#phrasing","#palpable"],model:["#text"]},time:{type:["#flow","#phrasing","#palpable"],model:[{"time[datetime]":["#phrasing"]},{":not(time[datetime])":["#text"]}]},title:{type:["#metadata"],model:["#text"],singleton:!0},u:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},ul:{type:["#flow",{":contains(> li)":["#palpable"]}],model:["#script-supporting","li"],implicitRole:"list"},var:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},video:{type:["#embedded","#flow","#phrasing",{"video[controls]":["#interactive","#palpable"]}],model:["#transparent","!#media","track",{":not(video[src])":["source"]}]},wbr:{type:["#flow","#phrasing"],model:["#nothing"]}},aria:{banner:{type:["@banner"],singleton:!0},contentinfo:{type:["@contentinfo"],singleton:!0},complementary:{type:["@complementary"],singleton:!0},navigation:{type:["@navigation"],singleton:!0},list:{type:["@list"]},listitem:{type:["@listitem"]}},getContentModelFor(e){var t=e.nodeName.toLowerCase();return wr.std[t]?wr.expandRules(e,wr.std[t].model||[]):[]},getCategoriesFor(e,t=!0){var r=e.nodeName.toLowerCase(),n=wr.std[r]||wr.aria[r]||{},i=[];if(t&&!e.nodeName.startsWith("#")&&(e.hasAttribute("role")||n.implicitRole))if(e.hasAttribute("role")){e.getAttribute("role").split(" ");e.getAttribute("role").split(" ").forEach(t=>{n&&n.acceptableRoles&&!n.acceptableRoles.includes(t)||(t=t.trim(),i.push("@"+t),wr.aria[t]&&wr.aria[t].type&&(i=i.concat(wr.expandRules(e,wr.aria[t].type||[]))))})}else n.implicitRole&&$(i,"@"+n.implicitRole,r);else i=$(wr.expandRules(e,n.type||[]),r);return i},assertNodeBelongsInContentModel(e,t){var r,n=e instanceof HTMLElement?wr.getContentModelFor(e):e,i=t instanceof HTMLElement?wr.getCategoriesFor(t):t;return!j(n,["#nothing","#text"]).length&&(n.forEach(e=>{if(e.startsWith("!")){var t=e.substr(1);i.includes(t)&&(r=!1)}else!1!==r&&i.includes(e)&&(r=!0)}),r&&!0)},assertNodeBelongsInScopeAs(e,t,r=null){for(var n,i=wr.getCategoriesFor(e),s=t;!n&&(s=s.parentNode);)j(i,wr.getCategoriesFor(s)).length&&wr.assertNodeBelongsInContentModel(s,r&&r.type||t)&&(n=s);return n===e},expandRules(e,t){var r=t.reduce((t,r)=>(h(r)?e.matches(Object.keys(r)[0])&&(t=t.concat(Object.values(r)[0])):t.push(r),t),[]);return r.includes("#sectioning-root")&&r.push("#sectioning-content"),r}};var xr=wr;class kr{constructor(e){Object.defineProperty(this,"_el",{value:e}),Object.defineProperty(this,"el",{value:"#document"===e.nodeName?e.querySelector("html"):e}),Object.defineProperty(this.el,".scopedHTML",{value:this}),this.isRoot=e.hasAttribute(yr.params.rootAttribute);const t={};if(Object.defineProperty(this,"store",{value:t}),yr.Trap&&(yr.Trap.trap&&yr.Trap.trap(t,(e,t,r)=>r(t||this.find(e.query)),{type:"get"}),yr.Trap.link&&yr.Trap.link(this.el,yr.params.scopeTreePropertyName,this.store),yr.Trap.init)){const t=(e.getAttribute(yr.params.idHintsAttribute)||"").split(" ").map(e=>e.trim()).filter(e=>e);yr.Trap.init(this.store,t)}}add(e,t){var r=(e,t,r,n=!1)=>{var i=r;return n&&(yr.params.addCallback&&(i=yr.params.addCallback(i,this)),new kr(i)),yr.Trap&&yr.Trap.set?yr.Trap.set(e,t,i):a(e)?e.push(i):e[t]=i,n&&function e(t,r){if(t.parentNode&&yr.Window.MutationObserver){var n=!1;new yr.Window.MutationObserver(e=>{e.forEach(e=>{!n&&u(e.removedNodes).includes(t)&&(n=!0,r())})}).observe(t.parentNode,{childList:!0}),e(t.parentNode,()=>{n||(n=!0,r())})}}(r,()=>{yr.Trap&&yr.Trap.deleteProperty?yr.Trap.deleteProperty(e,t):a(e)?_remove(e,i):delete e[t]}),r};if(a(t)){var n=[];return t.forEach((e,t)=>r(n,t,e,!0)),r(this.store,e,n),n}return r(this.store,e,t,!0)}find(e){return u(e).forEach(e=>{if(this.store[e])return this.store[e];var t;((t=this.findExplicit(e))||(t=this.findImplicit(e)))&&this.add(e,t)}),a(e)?_objFrom(e,this.store):this.store[e]}findExplicit(e){if(this.isRoot){var t,r,n=yr.Window.CSS?yr.Window.CSS.escape:e=>e,i="["+n(yr.params.rootAttribute)+"]",s="["+n(yr.params.scopedIdAttribute)+'="'+e+'"]';if((r=(this.el.shadowRoot||this.el).querySelector(s))&&(this.el.shadowRoot&&(!r.parentNode.closest||!r.parentNode.closest(i))||!this.el.shadowRoot&&r.parentNode&&(t=r.parentNode.closest(i))&&t.isSameNode(this.el)))return r}}findImplicit(e){if(!f(e)&&!e.match(/[^a-zA-Z0-9\-]/)){var t=[];xr.aria[e]?t.push({Schema:xr.aria[e],selector:['[role="'+e+'"]']}):t.push({Schema:xr.std[e]||xr.aria[e],selector:[e,'[role="'+e+'"]']}),v(xr.std,(r,n)=>{n.implicitRole===e&&t.push({Schema:n,selector:[r]})});var r=null;return t.forEach(e=>{(this.el.shadowRoot||this.el).querySelectorAll(e.selector.join(",")).forEach(t=>{xr.assertNodeBelongsInScopeAs(this.el,t,e.schema)&&(e.schema&&e.schema.singleton?r=t:r&&!a(r)||(r=r||[]).push(t))}),r||!e.schema||e.schema.singleton||(r=[])}),r}}}kr.init=function(e,t=oe){if(yr.Window=e,yr.Trap=t,!yr.Window||!("Element"in yr.Window))throw new Error('The "Element" class not found in global context!');if(yr.params.scopeTreePropertyName in yr.Window.Element.prototype)throw new Error('The "Element" class already has a "'+yr.params.scopeTreePropertyName+'" property!');Object.defineProperty(yr.Window.Element.prototype,yr.params.scopeTreePropertyName,{get:function(){return this[".scopedHTML"]||new kr(this),yr.params.proxyScopedObjects?yr.Trap?new Proxy(this[".scopedHTML"].store,yr.Trap):new Proxy(this[".scopedHTML"].store):this[".scopedHTML"].store}})};var Er={Window:null},Sr=class{};Sr.init=function(e){Er.Window=e};var jr=class{static parse(e,t={}){var r;return(r=br.parse(e,[St],M({assert:!1},t)))||(r=new St([br.parse(e,null,t)])),r}},Or=Je;var Tr={Window:null,Trap:null,params:{scriptElement:'script[type="text/scoped-js"]',bindMethodName:"bind",inertContexts:[],autoHide:!0,bindCallback:null},globals:{}};jr.init=function(e,t=oe){Tr.Window=e,Tr.Trap=t;var r,n,i;r=e=>{var t;if(s(e.parentNode).AST)throw new Error("An element must only have one scopedJS instance!");(t=(e.textContent||"").trim())&&(s(e.parentNode).AST=jr.parse(t),a(e.parentNode),Tr.params.autoHide&&e.remove())},n=()=>i().forEach(r),i=()=>u(Tr.Window.document.scripts).filter(e=>e.matches(Tr.params.scriptElement)&&!e[".scopedJS-scooped"]&&!function(e,t){return e.reduce((e,r)=>e||t(r),!1)}(Tr.params.inertContexts,t=>e.closest(t))).map(e=>(e[".scopedJS-scooped"]=!0,e)),Tr.Window.document.addEventListener("DOMContentLoaded",()=>setTimeout(n,0),!1),Tr.Window.addEventListener("load",()=>setTimeout(n,0),!1),"complete"===Tr.Window.document.readyState&&n(),Tr.Window&&Tr.Window.MutationObserver&&new Tr.Window.MutationObserver(()=>n()).observe(Tr.Window.document,{childList:!0,subtree:!0});var s=function(e){if(!e[".scopedJS"]){var t={};Object.defineProperty(e,".scopedJS",{get:function(){return t}})}return e[".scopedJS"]},a=function(e){if(s(e).AST){var t=s(e).binding||{},r={main:{},super:Tr.globals};Tr.Trap?Tr.Trap.set(r.main,"this",e):r.main.this=e;var n={main:t,super:new Or(r)},i=new Or(n),a=s(e).AST.eval(i,Tr.Trap);g(a)&&a(t)}};if(!Tr.Window||!("Element"in Tr.Window))throw new Error('The "Element" class not found in global context!');if(Tr.params.bindMethodName in Tr.Window.Element.prototype)throw new Error('The "Element" class already has a "'+Tr.params.bindMethodName+'" property!');Object.defineProperty(Tr.Window.Element.prototype,Tr.params.bindMethodName,{value:function(e){var t=s(this).binding;s(this).binding=e,a(this),Tr.params.bindCallback&&Tr.params.bindCallback(this,e,t)}})};var Cr={Window:null,Trap:null,ScopedHTML:null,ScopedJS:null,params:{namespaceAttribute:"namespace",bundleElement:"html-bundle",importElement:"html-import",keyValAttributes:[],listAttributes:[],norecomposeAttributes:["nocompose","shadow"],recomposeCallback:null}},Ar=function(e,t,r=!1){if(""==t)return e;var n=r?e.lastIndexOf(t):e.indexOf(t);return-1===n?e:e.substr(0,n)},Pr=function(e,t,r,n=[]){if(n=n.concat([Cr.params.namespaceAttribute,...Cr.params.norecomposeAttributes]),t.hasAttribute("norecompose")&&(n=n.concat((t.getAttribute("norecompose")||"*").split(" ").map(e=>e.trim()))),g(Cr.params.recomposeCallback)){var i=Cr.params.recomposeCallback(e,t,r,n);if(!1===i)return!1;(o(i)||a(i))&&(n=n.concat(i))}var s=Cr.params.listAttributes.concat(["role","class"]);Cr.scopedHTML&&(s=s.concat([Cr.ScopedHTML.params.idHintsAttribute])),D(s).forEach(i=>{var s,a;if(!n.includes(i)&&!n.includes("*")&&(s=e.getAttribute(i))){if(a=t.getAttribute(i))var o="prepend"===r?[s,a]:[a,s];else o=[s];t.setAttribute(i,D(o.join(" ").split(" ").map(e=>e.trim())).join(" ")),n.push(i)}}),D(Cr.params.keyValAttributes.concat("style")).forEach(i=>{var s,a;if(!n.includes(i)&&!n.includes("*")&&(s=e.getAttribute(i))){if(a=t.getAttribute(i))(o="prepend"===r?[s,a]:[a,s])[0].trim().endsWith(";")||(o[0]=o[0]+";");else var o=[s];t.setAttribute(i,o.join(" ")),n.push(i)}});for(var l=0;l<e.attributes.length;l++){var c=e.attributes[l];n.includes(c.name)||n.includes("*")||t.hasAttribute(c.name)&&![Cr.ScopedHTML.params.rootAttribute,Cr.ScopedHTML.params.scopedIdAttribute].includes(c.name)||(t.setAttribute(c.name,c.value),n.push(c.name))}if(!n.includes("--scoped-js")&&!n.includes("*")&&Cr.ScopedJS){var p=u((t.shadowRoot||t).children).filter(e=>e.matches(Cr.ScopedJS.params.scriptElement)),h=u((e.shadowRoot||e).children).filter(e=>e.matches(Cr.ScopedJS.params.scriptElement));h.length&&(p.length?p[0][r](h[0].textContent):t.prepend(h[0].cloneNode(!0)))}return t},$r=function(e,t){return t.matches(Cr.params.importElement)?function(e,t){t=t.cloneNode(!0);var r=e.getAttribute(Cr.params.namespaceAttribute),n=Cr.ScopedHTML&&t.hasAttribute(Cr.ScopedHTML.params.rootAttribute);return t.setAttribute(Cr.params.namespaceAttribute,r),Pr(e,t,"append"),Cr.ScopedHTML?(u((e.shadowRoot||e).children).forEach((e,r)=>{if(!Cr.ScopedJS||!e.matches(Cr.ScopedJS.params.scriptElement)){e=e.cloneNode(!0);var i,s=Cr.Window.CSS?Cr.Window.CSS.escape:e=>e;if(n&&(i=e.getAttribute(Cr.ScopedHTML.params.scopedIdAttribute))){var a,o="["+s(Cr.ScopedHTML.params.rootAttribute)+"]",l="["+s(Cr.ScopedHTML.params.scopedIdAttribute)+'="'+i+'"]';t.shadowRoot&&(a=t.shadowRoot.querySelector(l))||(a=t.querySelector(l))&&a.parentNode.closest(o)===t?(Pr(a,e,"prepend"),a.replaceWith(e)):t.append(e)}else t.append(e)}}),t):t}(t,e):Pr(e,t,"prepend")};class Fr{constructor(e,t,r,n=null){this.namespace=u(t),this.getter=r,this.carry=n,this.collections={},this.value,this.sources=[],this.loadingSources=new Promise((t,r)=>{var n=[];u(e).forEach(e=>{e instanceof Promise?(n.push(e),e.then(r=>{n=n.filter(t=>t!==e),this.sources.push(r),n.length||t()})):this.sources.push(e)}),n.length||t()})}enter(e){return e in this.collections||(this.collections[e]=new Fr(this.sources,this.namespace.concat(e),this.getter,this)),this.collections[e]}leave(){return this.carry}get(){if(!this.value){var e=this.namespace.slice(),t=this.carry?this.carry.get():null;this.sources.forEach((r,n)=>{(t=this.getter.call(null,r,e,t,n))&&(this.value=t)})}return this.value}find(e){for(var t,r,n=e.split("/"),i=this;(r=n.shift())&&(i=i.enter(r));)t=i;var s=t.get();if(s)return s.cloneNode(!0)}}var Wr=function(e,t,r=!1,n=!1,i=!1){if(-1===e.indexOf(t))return r?[]:void 0;var s=!0===r?e.length-1:!1===r?1:r,a=i?e.lastIndexOf(t)+1:e.indexOf(t)+1,o=l(t)?[]:e.slice(a,a+s);return n&&o.length<s&&o.length<e.length&&(g(n)&&!n(s-o.length)||(o=o.concat(e.slice(0,s-o.length)))),r?o:o[0]};class Rr{static capture(e,t,r){const n=function(e){var t={roadmap:e};return t.roadmap&&(t.namespace=Ar(t.roadmap,"//"),t.subnamespace=B(t.roadmap,"//"),t.subnamespace.startsWith("/")&&(t.subnamespace=B(t.subnamespace,"/")),t.subnamespace.endsWith("//")&&-1===t.subnamespace.indexOf("///")&&(t.subnamespace=t.subnamespace+t.namespace+"//")),t}(e.getAttribute(Cr.params.namespaceAttribute)||""),i=Cr.syncListCallback||function(e,t,r,n=!1){return arguments.length>2?t.bind(r):t.unbind()};if(n.subnamespace)return s(t)&&t&&Cr.Trap.observe(t,r=>Rr.sync(e,t,n.subnamespace,i),{tags:["#HTMLTransport-sync",e]}),s(r)&&r&&Cr.Trap.unobserve(r,null,null,{tags:["#HTMLTransport-sync",e]}),Rr.sync(e,t||{},n.subnamespace,i)}static sync(e,t,r,n=null){var i=e[".scopedHTML"],s=r.split("//");s[0].indexOf("[")>-1&&(s[0]='"'+s[0].replace(/\[/g,'" + ').replace(/\]/g,' + "')+'"');var a=Cr.Trap.keys(t),o=Cr.Trap.keys(i.store),l=new Cr.Trap.MutationEvent(e,{type:"remodelling"});return D(a.concat(o)).forEach(r=>{r=f(r)?parseInt(r):r;var o,c=i.find(r);if(Cr.Trap.has(t,r)){var p=Cr.Trap.get(t,r),h=!1;if(!c){var u=s.slice();u[0].indexOf('"')>-1&&(u[0]=u[0].replace(/" \+  \+ "/g,r),u[0]=br.parse(u[0]).eval(p));var d=Rr.import(u.join("//"));if(d){var m=Wr(a,r+"",!0).reduce((e,t)=>e||i.find(t),null);m?m.before(d):e.append(d),c=i.add(r,d),h=!0}}c&&g(n)&&(o=n(r,c,p,h))}else if(c){g(n)&&(o=n(r,c));var v=()=>{c.remove()};o instanceof Promise?o.then(v).catch(v):v()}l.response(o)}),l}}Rr.init=function(e,t=oe,r=[]){Cr.Window=e,Cr.Trap=t,Cr.ScopedHTML&&(Cr.ScopedHTML.params.addCallback=(e,t)=>{var r;return e.matches(Cr.params.importElement)&&(r=e.resolve())?r:e}),Cr.ScopedJS&&Cr.Trap&&Cr.Trap.observe&&(Cr.ScopedJS.params.bindCallback=Rr.capture),Rr.contentLoadedPromise=new Promise(e=>{"complete"!==Cr.Window.document.readyState?(Cr.Window.document.addEventListener("DOMContentLoaded",e,!1),Cr.Window.addEventListener("load",e,!1)):e()}),Cr.Window.customElements.define(Cr.params.bundleElement,class extends Cr.Window.HTMLTemplateElement{attributeChangedCallback(e,t,r){r&&this.load()}load(){var e=this.getAttribute("src");e&&this.content.children.length?console.warn("A CHTML bundle must define only either a remote content or local content! Bundle ignored."):e&&(Cr.Window.fetch?Cr.Window.fetch(e).then(e=>e.ok?e.text():Promise.reject(e.statusText)).then(e=>{this.innerHTML=e,this.dispatchEvent(new Cr.Window.Event("bundleloadsuccess",{bubbles:!0}))}).catch(t=>{console.warn("Error fetching the bundle at "+e+". ("+t+")"),this.dispatchEvent(new Cr.Window.Event("bundleloaderror",{bubbles:!0}))}):setTimeout(()=>{this.dispatchEvent(new Cr.Window.Event("bundleloadsuccess",{bubbles:!0}))},0))}static get observedAttributes(){return["src"]}},{extends:"template"}),Rr.contentLoadedPromise.then(()=>{if(g(r))r=r();else if(!r||!r.length){var e=u(Cr.Window.document.querySelectorAll('template[is="'+Cr.params.bundleElement+'"]')).reverse();r=e.map(e=>e.hasAttribute("src")&&!e.content.children.length?new Promise(t=>{e.addEventListener("bundleloadsuccess",()=>t(e)),e.addEventListener("bundleloaderror",()=>t(e))}):e)}var t;Rr.bundleMatrix=function(e){e=e.map(e=>{if(!(e instanceof Promise||e instanceof Cr.Window.HTMLTemplateElement)){var t=Cr.Window.document.createElement("template");t.innerHTML=e.toString(),e=t}return e});const t=[],r=new Fr(e,[],(e,n,i,s)=>{var a=n.join("/");if(t.includes(a))return r.find(n.slice(0,-1).join("/"));t.push(a);var o=Cr.Window.CSS?Cr.Window.CSS.escape:e=>e,l=u(e.content.children).filter(e=>e.matches("["+o(Cr.params.namespaceAttribute)+'="'+a+'"]'))[0];if(l&&i){try{e.hasAttribute("norecompose")&&(e.getAttribute("norecompose")||"*").split(" ").map(e=>e.trim()),l=$r(i,l)}catch(e){console.error("[Inheritance error at source #"+s+"]: "+e.message)}return t.pop(),l}return t.pop(),l?l.cloneNode(!0):i?i.cloneNode(!0):null});return r}(r),Rr.bundleMatrix.loadingSources.then(()=>{Rr.importsReady=!0}),t=Rr,Cr.Window.customElements.define(Cr.params.importElement,class extends Cr.Window.HTMLElement{attemptResolve(){this.hasAttribute("ondemand")||this.closest("template")||this.closest(Cr.params.importElement+"[ondemand]")||t.bundleMatrix.loadingSources.then(()=>{this.resolve()})}connectedCallback(){this.processed=!1,this.attemptResolve()}attributeChangedCallback(e,t,r){this.attemptResolve()}resolve(){if(!this.parentNode)return!1;var e,r,n=Cr.params.namespaceAttribute;if((r=Ar(this.getAttribute(n)||"","//"))&&r!==this.__namespace){if(t.bundleMatrix&&(e=t.import(r))){this.__namespace=r;var i=$r(e,this);return this.hasAttribute("shadow")?(this.parentNode.shadowRoot||this.parentNode.attachShadow({mode:"open"}),this.parentNode.shadowRoot.append(i),this.remove()):this.replaceWith(i),i.setAttribute("autoimported","true"),i.dispatchEvent(new Cr.Window.Event("imported",{bubbles:!0})),i}this.innnerText='No element found on the namespace "'+r+'"!'}}static get observedAttributes(){return["ondemand",Cr.params.namespaceAttribute]}})})},Rr.ready=function(e,t=!0){Rr.contentLoadedPromise.then(()=>{t?Rr.bundleMatrix.loadingSources.then(e):e()})},Rr.import=function(e){if(Rr.bundleMatrix)return Rr.importsReady||Rr.warnedEarlyBundleAccess||(Rr.warnedEarlyBundleAccess=!0,console.warn("Remote bundles are still loading at this time! You should probabbly wrap bundle-dependent code within HTMLTransport.ready(callback[, true/*waitForBundles*/]).")),Rr.bundleMatrix.find(e)},Tr.params.inertContexts.push(Cr.params.importElement),Cr.ScopedHTML=yr,Cr.ScopedJS=Tr;var Mr={ScopedHTML:yr,ScopedJS:Tr,HTMLTransport:Cr};const Dr={init:function(e){kr.init(e),Sr.init(e),jr.init(e),Rr.init(e)},ready:Rr.ready};var Lr=function(e,t=1){var r=0;e.forEach(e=>{r++});var n=e.slice(e.length-r,t);return arguments.length>1?n:n[0]},Nr=function(e,t=1){return arguments.length>1?Lr(e.slice().reverse(),t).reverse():Lr(e.slice().reverse())},Ir=function(e,t,r){return function(e,t){return Ar(e,t,!0)}(B(e,t),r)},_r=class{constructor(e={}){v(e,(e,t)=>{oe.set(this,e,t)})}setActiveState(e=!0){if(this.active!==e){var t=oe.set(this,e?"activating":"deactivating",!0,!0);return t.promises?(t.promises.then(()=>{oe.set(this,e?{activating:!1,active:!0}:{deactivating:!1,active:!1},!0)}),t):oe.set(this,e?{activating:!1,active:!0}:{deactivating:!1,active:!1},!0)}}},qr=class extends class{constructor(e={},t={}){this.params=t,this.params.itemsOffset||(this.params.itemsOffset="entries"),this.fill(e),oe.set(this,"current",{}),D(t.takeStats||[]).forEach(e=>{var t,r,n,i;n="[",i="]",(r=e).startsWith(n)&&r.endsWith(i)&&(t=!0,e=Ir(e,"[","]"),this.current[e]=[]);var s=this.params.itemsOffset+".."+e;oe.observe(this,s,(r,n,i)=>{!0===r?t?($(this.current[e],i.originatingTarget),oe.set(this.current,e,this.current[e])):oe.set(this.current,e,i.originatingTarget):!1===r&&(t?(N(this.current[e],i.originatingTarget),oe.set(this.current,e,this.current[e])):this.current[e]===i.originatingTarget&&oe.del(this.current,e))})})}fill(e){v(e,(e,t)=>{oe.set(this,e,t)})}getItemsArray(){var e=this[this.params.itemsOffset];return a(e)?e:e?Object.values(e):[]}filter(){}sort(){}}{constructor(e={},t={}){t.takeStats||(t.takeStats=[]),t.takeStats.includes("active")||t.takeStats.push("active"),t.takeStats.includes("activating")||t.takeStats.push("activating"),t.takeStats.includes("deactivating")||t.takeStats.push("deactivating"),super({},t),oe.observe(this,this.params.itemsOffset+"..activating",e=>{e&&this.getItemsArray().forEach(e=>{!0!==e.active||e.activating||e.setActiveState(!1)})}),this.fill(e)}selectStart(){var e,t=this.getItemsArray();if(!p(t)&&(e=Lr(t)))return e.setActiveState(!0)}selectEnd(){var e,t=this.getItemsArray();if(!p(t)&&(e=Nr(t)))return e.setActiveState(!0)}selectPrev(e=!1){var t,r=this.getItemsArray();if(!p(r))return this.current.active?t=function(e,t,r=!1,n=!1,i=!1){if(-1===e.indexOf(t))return r?[]:void 0;var s=!0===r?e.length-1:!1===r?1:r,a=(e=e.slice().reverse(),i?e.lastIndexOf(t)+1:e.indexOf(t)+1),o=l(t)?[]:e.slice(a,a+s);return n&&o.length<s&&o.length<e.length&&(g(n)&&!n(s-o.length)||(o=o.concat(e.slice(0,s-o.length)))),r?o:o[0]}(r,this.current.active,!1,e):!e||g(e)&&!e(0)||(t=Nr(r)),t?t.setActiveState(!0):void 0;g(e)&&e()}selectNext(e=!1){var t,r=this.getItemsArray();if(!p(r))return this.current.active?t=Wr(r,this.current.active,!1,e):!e||g(e)&&!e(0)||(t=Lr(r)),t?t.setActiveState(!0):void 0;g(e)&&e()}selectRand(){}filter(){}sort(){}static createEntries(e,t=_r){var r=a(e)?[]:{};return v(e,(e,n)=>{n=n instanceof t?n:m(t)?new t(n):g(t)?t(n):n,oe.set(r,e,n)}),r}},Hr={register(e,t,r=!1){Br[e]={component:t,singleton:r}},create(e,...t){var r,n;if(r=Br[e]){if(r.singletonInstance)return r.singletonInstance;if("auto"===r.singleton&&r.singletonInstances){var i=r.singletonInstances.filter(e=>j(t,e.args).length===t.length);if(1===i.length)return i[0].instance}return n=m(r.component)?new r.component(...t):g(r.component)?r.component(...t):r.component,!0===r.singleton?r.singletonInstance=n:"auto"===r.singleton&&(r.singletonInstances=r.singletonInstances||[],r.singletonInstances.push({instance:n,args:t})),n}throw new Error('The "'+e+'" component is not defined in registry!')}};const Br={};class Ur extends(function(...e){var t={};a(arguments[0])&&(e=arguments[0],t=arguments[1],arguments[2]&&arguments[2]);var r=Nr(e),n={},i=class extends r{constructor(...e){super(...e)}};return i.prototypes=e,e.forEach(e=>{W([i,e],(e,t,r)=>-1===["name","prototype","prototypes","length"].indexOf(e)),W([i.prototype,e.prototype],(e,t,r)=>-1===["prototype","prototypes"].indexOf(e)&&(!g(r[e])||(a(n[e])?n[e].push(r[e]):n[e]=[r[e]],!1)),!0)}),v(n,(e,r)=>{"constructor"!==e&&(i.prototype[e]=function(...n){if(Object.hasOwnProperty(t,e)&&g(t[e]))return t[e].call(this,r,...n);var i=[];return r.forEach(e=>{i.push(e.call(this,...n))}),Nr(i)})}),i}(_r,qr)){constructor(e={},t={}){t.itemsOffset="subroutes",super(e,t),oe.observe(this,"active",e=>{!0===e&&this.activeCallback&&this.activeCallback()}),this.initCallback&&this.initCallback()}route(e=null){var t,r;a(e)?(t=e.shift(),r=e):r=f(t=e)?parseInt(e)+1:null;var n=Hr.create("Router"),i="pathmap";f(t)&&(t=parseInt(t),i="pathsplit");var s=r=>{if(this.active||this.activating){var n=[];v(r,(e,r)=>{if(e===t)return!1;n.push(r)}),oe.set(this,"ownPath",n.join("/"))}else oe.del(this,"ownPath");var i=r[t];if((this.active||this.activating)&&this.subroutes&&i){if(this.subroutes[i]){if(!this.subroutes[i].active&&!this.subroutes[i].activating)return this.subroutes[i].setActiveState(!0)}else if(!c(e))throw new Error("404: "+i,this.subroutingKey)}else if(this.current.active)return this.current.active.setActiveState(!1)};s(n[i]),oe.observe(n,i,s),this.getItemsArray().forEach(e=>e.route(r))}static createRoutes(e,t=Ur){return super.createEntries(e,t)}}var zr=function(e,t,r=null){for(var n=[],i=e.length,s=0;s<i;s++)n.push({index:s,value:r?r(e[s]):e[s]});return n.sort((function(e,t){return o(e.value)&&"".localeCompare?e.value.localeCompare(t.value):e.value===t.value?0:e.value>t.value?1:-1})),"desc"===(t||"").trim().toLowerCase()&&(n=n.reverse()),n.map(t=>e[t.index])},Jr=function(e,t,r=null){return a(t)?e.filter(e=>r?t.filter(t=>r(e,t)).length:-1===t.indexOf(e)):[]},Kr=function(e,t,r=null){return M(e,h(t)?t:d(t,r))};var Qr={params:{pathnaming:{"/":["name","id"]}}};class Gr{constructor(){var e=(e,t=null)=>(e=R(e,Vr,!1),t?Kr(e,"state",t):e),t=(e,r)=>h(e)&&h(r)?t(Object.keys(e),Object.keys(r))&&t(Object.values(e),Object.values(r)):a(e)&&a(r)?e.length===r.length&&e.reduce((e,t,n)=>e&&t===r[n],!0):e===r;oe.trap(this,(e,t,r)=>{if("href"===e.query&&Jr(Vr,e.related).length){var n=Gr.parseUrl(e.value);return oe.set(this,n),!1}return r()},{type:"set"}),oe.observe(this,["search","searchmap","pathname","pathmap","pathsplit","href"],(e,r,n)=>{var[i,s,a,o,l,c]=e,[h,u,d,f,m,g]=r;if(!(n.originatingCreated&&n.originatingCreated.indexOf("searchmap")>-1)){var v={},b=!n.originatingFields.filter(e=>e.startsWith("searchmap.")).length&&t(s,u);i!==h||b||(v.search=Gr.toSearch(s),v.search===this.search&&delete v.search),i!==h&&b&&(v.searchmap=Gr.toSearchmap(i),t(v.searchmap,this.searchmap)&&delete v.searchmap);var y=!n.originatingFields.filter(e=>e.startsWith("pathmap.")).length&&t(o,f),w=!n.originatingFields.filter(e=>e.startsWith("pathsplit.")).length&&t(l,m);return a!==d||y&&w||(v.pathname=Gr.toPathname(w?o:l,this.pathname),v.pathname===this.pathname&&delete v.pathname),!y||a===d&&w||(v.pathmap=Gr.toPathmap(a!==d?a:l),t(v.pathmap,this.pathmap)&&delete v.pathmap),!w||a===d&&y||(v.pathsplit=Gr.toPathsplit(a!==d?a:o,this.pathname),t(v.pathsplit,this.pathsplit)&&delete v.pathsplit),c!==g||p(v)?p(v)&&c!==g&&(v=Gr.parseUrl(c)):(v.href=this.origin,v.href+=v.pathname||a,v.href+=v.search||i||"",v.href===this.href&&delete v.href),p(v)?void 0:oe.set(this,v,!0)}},{observeDown:!0}),oe.observe(this,"href",e=>{e===window.document.location.href?window.history.replaceState(this.state,"",e):window.history.pushState(this.state,"",e)}),oe.observe(this,"hash",e=>{}),window.addEventListener("popstate",t=>{window.setTimeout(()=>{oe.set(this,e(window.document.location,window.history.state))},0)});var r=(e,t=10)=>{window.requestAnimationFrame(()=>{e>0?(window.scrollBy(0,t),r(Math.max(e-t,0))):e<0&&(window.scrollBy(0,-t),r(Math.min(e+t,0)))})},n=e=>{window.setTimeout(()=>{var t=u(window.document.querySelectorAll(e)).filter(e=>e.scrollHeight)[0];if(t){var n=t.getBoundingClientRect();r(n.top)}},0)};window.addEventListener("click",e=>{var t,r;if((t=e.target.closest("a"))&&(r=t.href)&&(!t.origin||t.origin===this.origin)){e.preventDefault();var i=this.route(r,null,t.getAttribute("target"));t.hash&&n(t.hash),i&&i.defaultPrevented}}),this.href||oe.set(this,e(window.document.location)),!this.state&&window.history&&oe.set(this,"state",window.history.state),window.document.location.hash&&n(window.document.location.hash)}route(e,t=null,r=null){var n={href:e};return arguments.length>1&&(n.request=t),arguments.length>2&&(n.target=r),oe.set(this,n,!0)}update(e){return window.history.replaceState(e,"",window.document.location),oe.set(this,"state",e,!0)}forward(){window.history.forward()}back(){window.history.back()}go(e){window.history.go(e)}matches(e){var t=Gr.parseUrl(e);return(this.href+"/").startsWith(t.href.endsWith("/")?t.href:t.href+"/")}static parseUrl(e){var t=window.document.createElement("a");return t.href=e,Vr.reduce((e,r)=>Kr(e,r,t[r]),{})}static toSearchmap(e){return(e.startsWith("?")?e.substr(1):e).split("&").filter(e=>e).map(e=>e.split("=").map(e=>e.trim())).reduce((e,t)=>Kr(e,t[0],t[1]),{})}static toSearch(e){return Object.keys(e).length?"?"+Object.keys(e).map(t=>t+"="+e[t]).join("&"):""}static toPathmap(e){var t=o(e)?e.split("/").filter(e=>e):e,r=o(e)?e:"/"+t.join("/")+"/",n=zr(Object.keys(Qr.params.pathnaming),"desc").reduce((e,t)=>e||((r+"/").startsWith("/"===t?t:"/"+t.split("/").filter(e=>e).join("/")+"/")?Qr.params.pathnaming[t]:null),null);return n?t.reduce((e,t,r)=>n[r]?Kr(e,n[r],t):e,{}):{}}static toPathsplit(e,t=null){if(o(e))return e.split("/").filter(e=>e);if(!t)throw new Error('A "referenceUrl" must be given to properly determine a path-naming scheme.');var r=zr(Object.keys(Qr.params.pathnaming),"desc").reduce((e,r)=>e||((t+"/").startsWith("/"===r?r:"/"+r.split("/").filter(e=>e).join("/")+"/")?Qr.params.pathnaming[r]:null),null);if(Jr(Object.keys(e),r).length)throw new Error("The given pathmap contains keys ("+Object.keys(e).join(", ")+") not recognized by the implied path-naming scheme ("+r.join(", ")+")");return r?r.map(t=>e[t]).filter(e=>e):[]}static toPathname(e,t=null){if(h(e)){if(!t)throw new Error('A "referenceUrl" must be given to properly determine a path-naming scheme.');e=Gr.toPathsplit(e,t)}return"/"+e.join("/")+"/"}}const Vr=["hash","host","hostname","href","origin","pathname","port","protocol","search"];Hr.register("Router",Gr,!0),Hr.register("Monetization",class{constructor(){var e=window.document.monetization;e&&(oe.set(this,"state",e.state),e.addEventListener("monetizationpending",e=>{oe.set(this,{state:"pending",detail:e})}),e.addEventListener("monetizationstart",e=>{oe.set(this,{state:"started",detail:e})}),e.addEventListener("monetizationstop",e=>{oe.set(this,{state:"stopped",detail:e})}),e.addEventListener("monetizationprogress",e=>{oe.set(this,{progress:e})}))}start(){if(!window.document.querySelector('meta[name="monetization"]')){window.document.querySelector("head").append('<meta name="monetization" content="$ddddd.gggggg.ttttt" />')}}stop(){var e;(e=window.document.querySelector('meta[name="monetization"]'))&&e.remove()}},!0);var Yr,Zr,Xr=function(e,t){return void 0===e?"":e.split(/(?=[A-Z])/).join(t||" ")},en=(Yr=window.getComputedStyle(document.documentElement,""),{prefix:Zr=(Array.prototype.slice.call(Yr).join("").match(/-(moz|webkit|ms)-/)||""===Yr.Olink&&["","o"])[1],css:"-"+Zr+"-",api:"WebKit|Moz|Ms|O".match(new RegExp("("+Zr+")","i"))[1]}),tn=function(e){var t,r,n=(r=!0,t=function(e,t){return"string"!=typeof e?e:e.replace(/\w\S*/g,(function(e){return e.charAt(0).toUpperCase()+(void 0!==typeof t&&t?e.substr(1).toLowerCase():e.substr(1))}))}((t=e).replace(/-/g," ")).replace(/ /g,""),r?t:t[0].toLowerCase()+t.substr(1));if(en.api+n in document.body.style)return en.css+Xr(e,"-")},rn=function(e,t,r){var n={},i=u(e);return v(i,(e,s)=>{((e,s)=>{var a=Xr(s,"-").toLowerCase();if("auto"===r)n[a]=t(tn(a)||a,i[e]);else{if(r){var o=tn(a);o&&(n[o]=t(o,i[e]))}n[a]=t(a,i[e])}})(e,s)}),a(e)||r||"size"===e||"offsets"===e?n:n[e]};const nn=class{constructor(e){v(e,(e,t)=>{["rotate","scale","skew","translate"].includes(e)&&(this[e]=a(t)?new nn[e](...t):new nn[e](t))})}toString(){return["rotate","scale","skew","translate"].reduce((e,t)=>e+(this[t]&&this[t].length?" "+this[t]:""),"").trim()}static parse(e){var t=function(e){return Math.round(100*e)/100},r=function(e){var r=180*e/Math.PI;return t(r)},n=function(e){var t=[];if(window.WebKitCSSMatrix)return[(t=new window.WebKitCSSMatrix(e)).a,t.b,t.c,t.d,t.e,t.f];for(var r,n=/[\d\.\-]+/g;r=n.exec(e);)t.push(+r);return t}(e),i=n[0],s=n[1],a=n[2],o=n[3];if(i*o==s*a)throw new Error("Dramatic.parseTransform: matrix is singular");var l=Math.sqrt(i*i+s*s),c=(i/=l)*a+(s/=l)*o;a-=i*c,o-=s*c;var p=Math.sqrt(a*a+o*o);return c/=p,i*(o/=p)<s*(a/=p)&&(i=-i,s=-s,c=-c,l=-l),new nn({translate:[n[4],n[5]],scale:[t(l),t(p)],rotate:r(Math.atan2(s,i)),skew:r(Math.atan(c))})}};nn.rotate=class extends Array{toString(){return"rotate("+this.map(e=>f(e)?e+"deg":e).join(", ")+")"}},nn.scale=class extends Array{toString(){return"scale("+this.join(", ")+")"}},nn.skew=class extends Array{toString(){return"skew("+this.map(e=>f(e)?e+"deg":e).join(", ")+")"}},nn.translate=class extends Array{toString(){return"translate("+this.map(e=>f(e)?e+"px":e).join(", ")+")"}};var sn=nn,an=function(e,t,r=null){var n=window.getComputedStyle(e,r);return rn(t,(e,t)=>{var r=n.getPropertyValue(tn(e)||e);return"width"!==e&&"height"!==e||""!==r||(r="0px"),"transform"===e&&(r=sn.parse(r)),r},!1)},on=["width","height","top","left","right","bottom","padding","padding-top","padding-left","padding-right","padding-bottom","margin","margin-top","margin-left","margin-right","margin-bottom","border-width","border-top-width","border-left-width","border-right-width","border-bottom-width","outline-width","outline-top-width","outline-left-width","outline-right-width","outline-bottom-width"],ln=function(e,t,r=null){t=o(t)?d(t,r):t;var n={inset:["top","right","bottom","left"],margin:["top","right","bottom","left"],padding:["top","right","bottom","left"]};return rn(Object.keys(t),(r,i)=>{var s=t[i];v(n,(e,t)=>{r===e&&(h(s)&&(s=t.map(e=>s[e]).filter(e=>!l(e))),a(s)&&(s=s.join(" ")))}),"transform"!==r||!h(s)||s instanceof sn||(s=new sn(s).toString()),e.style[r]=on.includes(r)&&f(s)?s+"px":s},"auto"),e};const cn={readCallbacks:[],writeCallbacks:[],_run:function(){requestAnimationFrame(()=>{cn.readCallbacks.forEach((e,t)=>{e&&!e()&&(cn.readCallbacks[t]=null)}),cn.writeCallbacks.forEach((e,t)=>{e&&!e()&&(cn.writeCallbacks[t]=null)}),cn._run()})},onread:function(e,t=!1){if(t)return new Promise((t,r)=>{cn.readCallbacks.push(()=>{e(t,r)})});cn.readCallbacks.push(e)},onwrite:function(e,t=!1){if(t)return new Promise((t,r)=>{cn.writeCallbacks.push(()=>{e(t,r)})});cn.writeCallbacks.push(e)},cycle:function(e,t,r){cn.onread(()=>{var n=e(r);if(n){var i=n=>{cn.onwrite(()=>{var i=t(n,r);if(i){var s=r=>{cn.cycle(e,t,r)};i instanceof window.Promise?i.then(s):s()}})};n instanceof window.Promise?n.then(i):i()}})}};cn._run();var pn=cn,hn=function(e,t,r=null){return pn.onwrite((n,i)=>{try{n(g(t)?t(e):ln(e,t,r))}catch(e){i(e)}},!0)},un=function(e,t,r=null,n=null){var i=h(t)?Object.keys(t):t;n=h(t)?r:n;var s=function(e,t,r="auto"){var n=e.getAttribute("style");return"all"===t&&(t=n.split(";").map(e=>e.split(":")[0])),rn(t,e=>(new RegExp(";[ ]*?"+e+":([^;]+);?","g").exec(";"+n)||["",""])[1].trim(),r)}(e,i);return hn(e,t,r).then(()=>function(e,t,r=null){return pn.onread((n,i)=>{try{n(g(t)?t(e):an(e,t,r))}catch(e){i(e)}},!0)}(e,n||i).then(t=>hn(e,s).then(()=>t)))},dn=function(e,t=[]){return W([{},e],(e,r,n)=>{if(!g(n[e]))return g(t)?t(e):!a(t)||!t.length||t.indexOf(e)>-1},!1,!1,!1)},fn=function(e){var t={};return e.split(";").filter(e=>e).forEach(e=>{e=e.split(":"),t[e[0].trim()]=e[1].trim()}),t},mn=function(e,t,r=!0){var n=a(e)?e.join("|"):e;if(!t&&vn[n])return vn[n];var i=[];return function(e,t){var r=document.styleSheets,n=function(t){try{for(var r=0;r<t.cssRules.length;r++){var n=t.cssRules[r];if(!0===e(n))return!0}}catch(e){}};if(t){for(var i=r.length-1;i>=0;i--)if(!0===n(r[i]))return!0}else for(i=0;i<r.length;i++)if(!0===n(r[i]))return!0}(t=>{if((t.type===window.CSSRule.KEYFRAMES_RULE||t.type===window.CSSRule[en.api.toUpperCase()+"_KEYFRAMES_RULE"])&&(a(e)?e:[e]).indexOf(t.name)>-1)return i=i.concat(i,function(e){for(var t=[],n=0;n<e.cssRules.length;n++){var i=e.cssRules[n],s=fn(i.cssText.replace(i.keyText,"").replace("{","").replace("}","").trim()),a=(i.keyText||" ").split(",").map(e=>"from"===e?0:"to"===e?1:parseInt(e)/100);if(r)for(gn(s,["animation-","transition-"]);a.length;){var o=dn(s);o.offset=a.shift(),t.push(o)}else s.offset=a.length>1?a:a[0],t.push(s)}return t.sort((e,t)=>e.offset===t.offset?0:e.offset>t.offset?1:-1)}(t)),!0},!0),vn[n]=i,i};const gn=function(e,t,r=""){a(r)?r.forEach(t=>gn(e,t)):(e[r+"timing-function"]&&(e.easing=e[r+"timing-function"],delete e[r+"timing-function"]),e[r+"fill-mode"]&&(e.fill=e[r+"fill-mode"],delete e[r+"fill-mode"]),e[r+"iteration-count"]&&(e.iterations=e[r+"iteration-count"],delete e[r+"iteration-count"],"infinite"===e.iterations&&(e.iterations=1/0)))},vn={};class bn{constructor(e,t,r={}){this.el=e,this.$={readyCallbacks:[],finishCallbacks:[],cancelCallbacks:[],params:r},r.fill=r.fill||"both","duration"in r||(r.duration=400),r.easing&&-1===["ease-in","ease-out","ease-in-out"].indexOf(r.easing)&&-1===r.easing.indexOf("(")&&(r.easing=function(e){e=e.indexOf("-")?e:Xr(e,"-");return window.getComputedStyle(document.body).getPropertyValue("--"+e)}(r.easing)||r.easing);var n={inset:["top","right","bottom","left"],margin:["top","right","bottom","left"],padding:["top","right","bottom","left"]};const i=e=>{e=e.slice();var t={},i={};v(e,(e,r)=>{v(n,(e,t)=>{r[e]&&(h(r[e])&&(r[e]=t.map(t=>r[e][t]).filter(e=>!l(e))),a(r[e])&&(r[e]=r[e].join(" ")))}),!r.transform||!h(r.transform)||r.transform instanceof sn||(r.transform=new sn(r.transform).toString()),function(e,...t){return t.forEach(t=>N(e,t)),e}(Object.keys(r),"offset","easing").forEach(e=>{on.includes(e)&&f(r[e])&&(r[e]+="px"),t[e]=void 0===t[e]?r[e]:t[e],i[e]=r[e]})});try{var s=this.el.animate(e,r)}catch(e){return void(this.$.error=e)}r.reverse&&s.reverse(),s.effect||(s.effect={}),s.effect.duration||(s.effect.duration=r.duration),s.onfinish=()=>{r.cancelForCss&&(s.cancel(),"forwards"!==r.fill&&"both"!==r.fill||ln(this.el,i)),this.$.finishCallbacks.forEach(e=>{e(this.el)})},s.oncancel=()=>{this.$.cancelCallbacks.forEach(e=>{e(this.el)})},this.$.anim=s,this.$.firstFrame=t,this.$.lastFrame=i,this.$.params=r,this.$.readyCallbacks.length&&this.$.readyCallbacks.forEach(e=>e(s,r,t,i))};g(t)?t(e,i):bn.createCallback(e,t,i,e=>{this.$.error=e})}get anim(){return this.$.anim}ready(e,t){this.$.error?t&&t(this.$.error):this.$.anim?e(this.$.anim,this.$.params,this.$.firstFrame,this.$.lastFrame):this.$.readyCallbacks.push(e)}onfinish(e){if(!g(e))throw new Error("Onfinish() accepts only a function.");return this.$.finishCallbacks.push(e),this}oncancel(e){if(!g(e))throw new Error("Oncancel() accepts only a function.");return this.$.cancelCallbacks.push(e),this}progress(){return this.$.anim?this.$.anim.currentTime/this.$.anim.effect.duration:0}seek(e){if(!w(e))throw new Error("Seek() accepts only a numeric value.");return this.ready((t,r)=>{var n=r.duration+(r.delay||0)+(r.endDelay||0);t.currentTime=Math.max(0,Math.min(e*n,n))}),this}reverse(){return this.ready(e=>e.reverse()),this}play(){return new Promise((e,t)=>{this.ready(r=>{r.play(),this.onfinish(()=>e(this)),this.oncancel(()=>t(this))},t)})}pause(){return this.ready(e=>e.pause()),this}finish(){return this.ready(e=>e.finish()),this}cancel(){return this.ready(e=>e.cancel()),this}static createCallback(e,t,r,n){var i=h(t)&&!Object.values(t).filter(e=>a(e)).length,s=a(t)&&t.length>1&&p(t[0]);if(i||s)pn.onread(()=>{s?(t.shift(),bn.createCallback(e,[an(e,Object.keys(t[0])),...t],r,n)):bn.createCallback(e,[an(e,Object.keys(t)),t],r,n)});else{if(o(t)){var l=t;!(t=mn(l)).length&&n&&n('Animation name "'+l+'" not found in any stylesheet!')}if(a(t)){var c=[];if(v(t,(e,t)=>{"auto"===t.height&&$(c,e),"auto"===t.width&&$(c,e)}),c.length)return void un(e,{width:"auto",height:"auto"},e=>e.getBoundingClientRect()).then(e=>{c.forEach(r=>{"auto"===t[r].width&&(t[r].width=e.width+"px"),"auto"===t[r].height&&(t[r].height=e.height+"px")}),r(t)})}r(t)}}}var yn=class{constructor(e=[],t={}){this.$={animations:[],finishCallbacks:[],cancelCallbacks:[],params:t},e.forEach(e=>{this.add(e)})}add(e){if(!(e instanceof bn))throw new Error("Argument#1 must be an Ani instance!");switch(this.$.animations.push(e),this.$.addCallback&&this.$.addCallback(e),this.$.playState){case"paused":e.pause();break;case"cancelled":e.cancel();break;case"finished":e.finish()}return this.$.reversed&&e.reverse(),this}remove(e){if(!(e instanceof bn))throw new Error("Argument#1 must be an Ani instance!");return N(this.$.animations,e),this.$.removeCallback&&this.$.removeCallback(e),this}onfinish(e){if(!g(e))throw new Error("Onfinish() accepts only a function.");return this.$.finishCallbacks.push(e),this}oncancel(e){if(!g(e))throw new Error("Oncancel() accepts only a function.");return this.$.cancelCallbacks.push(e),this}progress(){return this.$.animations.reduce((e,t)=>e.progress()+t.progress(),0)/this.$.animations.length}play(){return this.$.playState="playing",new Promise((e,t)=>{var r,n,i=()=>{r||(r=!0,this.$.finishCallbacks.forEach(e=>e()),e())},s=()=>{n||(n=!0,this.$.cancelCallbacks.forEach(e=>e()),t())},a=this.$.animations.length;this.$.animations.forEach(e=>{e.play().then(()=>{!--a>0&&i()}).catch(s)}),this.$.addCallback=e=>{"playing"===this.$.playState&&(a++,e.play().then(()=>{!--a>0&&i()}).catch(s))},this.$.removeCallback=e=>{a--}})}seek(e,t=[]){this.each(t=>t.seek(e),t)}reverse(e=[]){this.$.reversed=!this.$.reversed,this.each(e=>e.reverse(),e)}pause(e=[]){this.$.playState="paused",this.each(e=>e.pause(),e)}finish(e=[]){this.$.playState="finished",this.each(e=>e.finish(),e)}cancel(e=[]){this.$.playState="cancelled",this.each(e=>e.cancel(),e)}clear(e=[]){this.$.animations=this.$.animations.filter(t=>{if(!e||!u(e,!1).includes(t.el))return!1})}each(e,t=[]){this.$.animations.forEach(r=>{t&&u(t,!1).includes(r.el)||e(r)})}},wn=class{constructor(e=[],t={}){this.$={},this.$.entries=[],this.$.params=t,this.nowPlaying=new yn,e.forEach(e=>{this.add(e,t.timing)}),this.queue=[]}add(e,t={},r={},n=null,i=null){if(!this.$.entries.filter(t=>t.el===e).length){var s={el:e,effect:t,params:r,onfinish:n,oncancel:i};this.$.entries.push(s),this.nowPlayingAdd(s)}}remove(e){this.$.entries=this.$.entries.filter(t=>t.el!==e)}nowPlayingAdd(e){if(this.nowPlayingEffect){var t=(e,t,r,n)=>{var i=new bn(t.el,r,n);e.add(i),n.oneoff&&i.onfinish(()=>{e.remove(i),this.remove(t.el)}),t.onfinish&&i.onfinish(t.onfinish),t.oncancel&&i.oncancel(t.oncancel)},r=(e,n)=>{var i=n[0],s=p(i.effect)?this.nowPlayingEffect:i.effect,a=M({},this.nowPlayingParams,i.params);if(a.delay=a.delay||0,w(a.lag)||w(a.endLag)){var o=Nr(e.$.animations);if(o)return void o.ready((o,l)=>{w(a.lag)?a.delay+=l.delay+a.lag:a.delay+=l.delay+parseFloat(l.endDelay)+l.duration+a.endLag,a.delay-=w(o.currentTime)?o.currentTime:0,t(e,i,s,a),n.shift(),n.length&&r(e,n)})}t(e,i,s,a),n.shift(),n.length&&r(e,n)};this.queue.push(e),1===this.queue.length&&r(this.nowPlaying,this.queue)}}play(e={},t={}){return this.nowPlayingEffect&&(this.nowPlaying=new yn,this.queue=[]),this.nowPlayingEffect=e,this.nowPlayingParams=t,(t.reverseList?this.$.entries.slice().reverse():this.$.entries).forEach(e=>{t.except&&u(t.except,!1).includes(e.el)||t.only&&!u(t.only,!1).includes(e.el)||this.nowPlayingAdd(e)}),this.nowPlaying.play()}};class xn extends n.Route{constructor(e={},t={}){super(e,t),oe.observe(this,"current.active",e=>{if(e){if(e.current.active||e.current.activating){if("hidden"!==this.display)return oe.set(this,"display","hidden")}else if("minimized"!==this.display)return oe.set(this,"display","minimized")}else if("maximized"!==this.display)return oe.set(this,"display","maximized")},{observeDown:!0})}static createRoutes(e,t=xn){return super.createRoutes(e,t)}}var kn,En={engr:[{label:"CHTML",desc:"A suite of short specifications and technologies that bring a component architecture to the HTML language itself.",tags:["#ScopedHTML","#ScopedCSS","#ScopedJS","#HTMLTransport"],link1:["https://docs.web-native.dev/chtml/","DOCS"],link2:["https://github.com/web-native/chtml","GitHub"]},{label:"PlayUI",desc:"A resilient, jQuery-inspired DOM API and an intuitive UI manipulation library.",tags:["#AsynchronousDOM","#UIPhysics"],link1:["https://docs.web-native.dev/play-ui/","DOCS"],link2:["https://github.com/web-native/play-ui","GitHub"]},{label:"Observables",desc:"Application components and client-side APIs implemented as objects with observable properties.",tags:["#ReflexActions"],link1:["https://docs.web-native.dev/observables/","DOCS"],link2:["https://github.com/web-native/observables","GitHub"]},{label:"Reflex",desc:"A general-purpose reflection API for observing objects and arrays in JavaScript.",tags:["#ReflexActions"],link1:["https://docs.web-native.dev/reflex/","DOCS"],link2:["https://github.com/web-native/reflex","GitHub"]},{label:"JSEN",desc:"A general-purpose library for parsing JavaScript expressions that execute in user-defined scopes.",tags:["#scopedJS"],link1:["https://docs.web-native.dev/jsen/","DOCS"],link2:["https://github.com/web-native/jsen","GitHub"]},{label:"Commons",desc:"A thoughtful utilities library for JavaScript.",link1:["https://docs.web-native.dev/commons/","DOCS"],link2:["https://github.com/web-native/commons","GitHub"]}],evan:[{},{},{},{meta:{type:"article"},label:"I’m joining web-native!",desc:"Hey, Awesome! I am pleased to announce that I am joining Web-native as a Front-end Engineer and Developer Relations!🎉",link2:["https://medium.com/@raymondosy1/im-joining-web-native-c98b2cdc5540","Read article"],authors:[{name:"Raymond Akalonu",avatar:"https://miro.medium.com/fit/c/48/48/0*dx5wDBZDIOiMILkr.",link:"https://miro.medium.com/@raymondosy1"}]}]},Sn=new xn({active:!0,title:"Web-Native Home :: Web-Native",page:{title:"Finally, a Web-Native UI Framework!",engineeringSection:En.engr,evangelismSection:En.evan},subroutes:xn.createRoutes({about:{title:"About Web-Native",page:{title:"Finally, a Web-Native UI Framework!"}}})});Mr.ScopedJS.globals={$:window.WebNative.Firedom,document:document,console:console,alert:alert.bind(window),prompt:prompt.bind(window),confirm:confirm.bind(window),monetization:Hr.create("Monetization"),router:Hr.create("Router")},Dr.init(window),(kn=window).customElements.define("playui-ul",class extends kn.HTMLUListElement{constructor(){super();var e=new wn,t=new wn,r={lag:300,oneoff:!0,duration:600};e.play([{opacity:0,transform:{translate:["0","100"]}},{opacity:1,transform:{translate:["0","0"]}}],r),t.play([{opacity:0,transform:{translate:["0","-100"]}},{opacity:1,transform:{translate:["0","0"]}}],r),this.intersectionObserver=new kn.IntersectionObserver(r=>{r.forEach(r=>{r.isIntersecting&&(r.boundingClientRect.top<0?t.add(r.target):e.add(r.target))})},{rootMargin:"50px"})}sequenceAdd(e){this.intersectionObserver.observe(e)}},{extends:"ul"}),kn.customElements.define("playui-li",class extends kn.HTMLLIElement{connectedCallback(){this.parentNode.sequenceAdd&&this.parentNode.sequenceAdd(this)}},{extends:"li"}),Dr.ready(()=>{var e=window.document.querySelector("#app");oe.observe(e,(e,t,r)=>{},{observeDown:!0}),oe.observe(Sn,(e,t,r)=>{},{observeDown:!0}),Sn.route(0),e.bind(Sn)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvanMvaXNUeXBlRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvanMvaXNUeXBlT2JqZWN0LmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL2pzL2lzQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvanMvaXNTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvanMvaXNVbmRlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvanMvaXNOdWxsLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL2pzL2lzRW1wdHkuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvanMvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvYXJyL2Zyb20uanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvanMvaXNUeXBlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvb2JqL2Zyb20uanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvanMvaXNOdW1lcmljLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL2pzL2lzQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvanMvaXNGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9vYmovZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9pbnRlcm5hbC9FdmVudC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9pbnRlcm5hbC9RdWVyeUV2ZW50LmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL2pzL2lzTnVtYmVyLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL2pzL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvanMvaXNCb29sZWFuLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL29iai9ldmVuLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL29iai9jb21wYXJlQ2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvYXJyL2ludGVyc2VjdC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9pbnRlcm5hbC9GaXJlYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9pbnRlcm5hbC9GaXJlYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9pbnRlcm5hbC9UcmFwLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL2ludGVybmFsL1RyYXBCYXNlLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL2Fyci9wdXNoVW5pcXVlLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL29iai9nZXRBbGxQcm9wZXJ0eU5hbWVzLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL29iai9nZXRQcm90b3R5cGVDaGFpbi5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9vYmovbWVyZ2VDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9vYmovY29weS5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9vYmovbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvYXJyL3VuaXF1ZS5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9pbnRlcm5hbC9NdXRhdGlvbkV2ZW50LmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL2Fyci9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvaW50ZXJuYWwvT2JzZXJ2ZXJCYXNlLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL3Vub2JzZXJ2ZS5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy91bmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvanMvZ2V0VHlwZS5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9zdHIvYWZ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvb2JqL2dldC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9pbnRlcm5hbC9PYnNlcnZlci5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9hcnIvY3Jvc3NKb2luLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL29ic2VydmUuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvbGluay5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy90cmFuc2FjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9nZXQuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvYXJyL2FsbC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9oYXMuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvX3NldFByb3AuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvc2V0LmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL2luaXQuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvX2dldFByb3BzLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvdHJhcC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9kZWYuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvZGVsLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL2ludGVybmFsL0xpc3RlbmVyQmFzZS5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9pbnRlcm5hbC9MaXN0ZW5lci5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9idWlsZC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy91bnRyYXAuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvb3duS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9vbi5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9vZmYuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvdHJpZ2dlci5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNUeXBlT2JqZWN0LmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVtZXJpYy5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZ2V0QWxsUHJvcGVydHlOYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZ2V0UHJvdG90eXBlQ2hhaW4uanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3B1c2hVbmlxdWUuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL21lcmdlQ2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL21lcmdlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVsbC5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1VuZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pbnN0YW5jZW9mLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVtYmVyLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNCb29sZWFuLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9lYWNoLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9ldmVuLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9jb21wYXJlQ2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHJJbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvUmVmZXJlbmNlSW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0NhbGxJbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvRnVuY0ludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9JZkludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvSnNlbi5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0VtcHR5LmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZUFycmF5LmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mbGF0dGVuLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9maXJzdC5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvbGFzdC5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovY29weVBsYWluLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9MZXhlci5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvQ29udGV4dHMuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvd3JhcHBlZC5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvYWZ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL2JlZm9yZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvdW53cmFwLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci9iZWZvcmVMYXN0LmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0Fic3RyYWN0aW9uSW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0Fic3RyYWN0aW9uLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0FyckludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9BcnIuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvQXJndW1lbnRzSW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvdW5pcXVlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0Fzc2VydGlvbkludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9Bc3NlcnRpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvQXNzaWdubWVudEludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9Bc3NpZ25tZW50LmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0Jsb2NrSW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL1JldHVybkludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9CbG9jay5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9Cb29sSW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0Jvb2wuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvQ2FsbC5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9Db21wYXJpc29uSW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0NvbXBhcmlzb24uanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvQ29uZGl0aW9uSW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0NvbmRpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9EZWxldGlvbkludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9EZWxldGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9GdW5jLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0lmLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9pbnRlcnNlY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvTWF0aEludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9NYXRoLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL051bUludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9OdW0uanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvT2JqSW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL09iai5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9QcmVzZW5jZUludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9QcmVzZW5jZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9SZWZlcmVuY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvUmV0dXJuLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL1N0ckludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9TdHIuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9jaHRtbC9zcmMvc2NvcGVkLWh0bWwvRU5WLmpzIiwid2VicGFjazovLy8uLi9jaHRtbC9zcmMvc2NvcGVkLWh0bWwvU2NoZW1hLmpzIiwid2VicGFjazovLy8uLi9jaHRtbC9zcmMvc2NvcGVkLWh0bWwvU2NvcGVkSFRNTC5qcyIsIndlYnBhY2s6Ly8vLi4vY2h0bWwvc3JjL3Njb3BlZC1odG1sL2Rpc2Nvbm5lY3RlZENhbGxiYWNrLmpzIiwid2VicGFjazovLy8uLi9jaHRtbC9zcmMvc2NvcGVkLWh0bWwvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL2NodG1sL3NyYy9zY29wZWQtY3NzL0VOVi5qcyIsIndlYnBhY2s6Ly8vLi4vY2h0bWwvc3JjL3Njb3BlZC1jc3MvU2NvcGVkQ1NTLmpzIiwid2VicGFjazovLy8uLi9jaHRtbC9zcmMvc2NvcGVkLWNzcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9hcnIvYW55LmpzIiwid2VicGFjazovLy8uLi9jaHRtbC9zcmMvc2NvcGVkLWpzL1Njb3BlZEpTLmpzIiwid2VicGFjazovLy8uLi9jaHRtbC9zcmMvc2NvcGVkLWpzL1Njb3BlLmpzIiwid2VicGFjazovLy8uLi9jaHRtbC9zcmMvc2NvcGVkLWpzL0VOVi5qcyIsIndlYnBhY2s6Ly8vLi4vY2h0bWwvc3JjL3Njb3BlZC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vY2h0bWwvc3JjL2h0bWwtdHJhbnNwb3J0L0VOVi5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9zdHIvYmVmb3JlLmpzIiwid2VicGFjazovLy8uLi9jaHRtbC9zcmMvaHRtbC10cmFuc3BvcnQvcmVjb21wb3NlRGlyZWN0aXZlcy5qcyIsIndlYnBhY2s6Ly8vLi4vY2h0bWwvc3JjL2h0bWwtdHJhbnNwb3J0L3JlY29tcG9zZS5qcyIsIndlYnBhY2s6Ly8vLi4vY2h0bWwvc3JjL2h0bWwtdHJhbnNwb3J0L3JlY29tcG9zZU5vZGVzLmpzIiwid2VicGFjazovLy8uLi9jaHRtbC9zcmMvaHRtbC10cmFuc3BvcnQvTWF0cml4LmpzIiwid2VicGFjazovLy8uLi9jaHRtbC9zcmMvaHRtbC10cmFuc3BvcnQvY3JlYXRlQnVuZGxlTWF0cml4LmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL2Fyci9mb2xsb3dpbmcuanMiLCJ3ZWJwYWNrOi8vLy4uL2NodG1sL3NyYy9odG1sLXRyYW5zcG9ydC9IVE1MVHJhbnNwb3J0LmpzIiwid2VicGFjazovLy8uLi9jaHRtbC9zcmMvaHRtbC10cmFuc3BvcnQvcGFyc2VOYW1lc3BhY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2NodG1sL3NyYy9odG1sLXRyYW5zcG9ydC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vY2h0bWwvc3JjL2h0bWwtdHJhbnNwb3J0L2RlZmluZUJ1bmRsZUVsZW1lbnRzLmpzIiwid2VicGFjazovLy8uLi9jaHRtbC9zcmMvaHRtbC10cmFuc3BvcnQvZGVmaW5lSW1wb3J0RWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4uL2NodG1sL3NyYy9FTlYuanMiLCJ3ZWJwYWNrOi8vLy4uL2NodG1sL3NyYy9DaHRtbC5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9hcnIvZmlyc3QuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvYXJyL2xhc3QuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvc3RyL3Vud3JhcC5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9zdHIvYmVmb3JlTGFzdC5qcyIsIndlYnBhY2s6Ly8vLi4vb2JzZXJ2YWJsZXMvc3JjL0l0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4uL29ic2VydmFibGVzL3NyYy9Db2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uLi9vYnNlcnZhYmxlcy9zcmMvQ29sbGVjdGlvbkJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvc3RyL3dyYXBwZWQuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvYXJyL3ByZWNlZGluZy5qcyIsIndlYnBhY2s6Ly8vLi4vb2JzZXJ2YWJsZXMvc3JjL1JlZ2lzdHJ5LmpzIiwid2VicGFjazovLy8uLi9vYnNlcnZhYmxlcy9zcmMvbmF2L1JvdXRlLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL2pzL21peGluLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL2Fyci9zb3J0LmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL2Fyci9kaWZmZXJlbmNlLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL29iai93aXRoLmpzIiwid2VicGFjazovLy8uLi9vYnNlcnZhYmxlcy9zcmMvRU5WLmpzIiwid2VicGFjazovLy8uLi9vYnNlcnZhYmxlcy9zcmMvbmF2L1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi4vb2JzZXJ2YWJsZXMvc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9vYnNlcnZhYmxlcy9zcmMvbW9uZXkvTW9uZXRpemF0aW9uLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL3N0ci9mcm9tQ2FtZWwuanMiLCJ3ZWJwYWNrOi8vLy4uL3BsYXktdWkvc3JjL2Nzcy92ZW5kb3JQcmVmaXguanMiLCJ3ZWJwYWNrOi8vLy4uL3BsYXktdWkvc3JjL2Nzcy92ZW5kb3JpemUuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvc3RyL3RvQ2FtZWwuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvc3RyL3RvVGl0bGUuanMiLCJ3ZWJwYWNrOi8vLy4uL3BsYXktdWkvc3JjL2Nzcy9ydWxlQ2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vLy4uL3BsYXktdWkvc3JjL2Nzcy9UcmFuc2Zvcm1SdWxlLmpzIiwid2VicGFjazovLy8uLi9wbGF5LXVpL3NyYy9jc3MvcmVhZFN5bmMuanMiLCJ3ZWJwYWNrOi8vLy4uL3BsYXktdWkvc3JjL2Nzcy9hdXRvcHguanMiLCJ3ZWJwYWNrOi8vLy4uL3BsYXktdWkvc3JjL2Nzcy93cml0ZVN5bmMuanMiLCJ3ZWJwYWNrOi8vLy4uL3BsYXktdWkvc3JjL1JlZmxvdy5qcyIsIndlYnBhY2s6Ly8vLi4vcGxheS11aS9zcmMvY3NzL3dyaXRlQXN5bmMuanMiLCJ3ZWJwYWNrOi8vLy4uL3BsYXktdWkvc3JjL2Nzcy9yZWFkUmVuZGVyaW5nLmpzIiwid2VicGFjazovLy8uLi9wbGF5LXVpL3NyYy9jc3MvcmVhZElubGluZS5qcyIsIndlYnBhY2s6Ly8vLi4vcGxheS11aS9zcmMvY3NzL3JlYWRBc3luYy5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9vYmovY29weVBsYWluLmpzIiwid2VicGFjazovLy8uLi9wbGF5LXVpL3NyYy9jc3MvcGFyc2VSdWxlcy5qcyIsIndlYnBhY2s6Ly8vLi4vcGxheS11aS9zcmMvY3NzL3JlYWRLZXlmcmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL3BsYXktdWkvc3JjL2Nzcy9zdHlsZXNoZWV0UnVsZUNhbGxiYWNrLmpzIiwid2VicGFjazovLy8uLi9wbGF5LXVpL3NyYy9hbmkvQW5pLmpzIiwid2VicGFjazovLy8uLi9wbGF5LXVpL3NyYy9jc3MvdmFyUmVhZC5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9hcnIvZXhjbHVkZS5qcyIsIndlYnBhY2s6Ly8vLi4vcGxheS11aS9zcmMvYW5pL1RpbWVsaW5lLmpzIiwid2VicGFjazovLy8uLi9wbGF5LXVpL3NyYy9hbmkvU2VxdWVuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL1JvdXRlLmpzIiwid2VicGFjazovLy8uL2FwcC9kYXRhLmpzIiwid2VicGFjazovLy8uL2FwcC9jdXN0b20tZWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL2NsaWVudC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInZhbCIsIkFycmF5IiwiaXNBcnJheSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImtleXMiLCJjYXN0T2JqZWN0Iiwic2xpY2UiLCJ2YWx1ZXMiLCJvYmoiLCJmb3JFYWNoIiwiayIsImlzTmFOIiwidGVzdCIsIkZ1bmN0aW9uIiwidG9TdHJpbmciLCJyZXR1cm5WYWx1ZSIsImNhbGxiYWNrIiwicGFyc2VGbG9hdCIsInRhcmdldCIsImRldGFpbHMiLCJ0aGlzIiwiJCIsInByb3BhZ2F0aW9uU3RvcHBlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJwcm9taXNlc0luc3RhbmNlIiwicHJvbWlzZXMiLCJwcm9wIiwicHJvbWlzZSIsIlByb21pc2UiLCJFcnJvciIsInB1c2giLCJhbGwiLCJyc3BucyIsInByb21zIiwiaXNFdmVudCIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiRXZlbnQiLCJzdXBlciIsImdldFByb3RvdHlwZU9mIiwiX2V2ZW4iLCJvYmoxIiwib2JqMiIsImFzc2VydGlvbiIsImRlcHRoIiwib2JqMUtleXMiLCJvYmoyS2V5cyIsInJlc3VsdCIsImNvbnRuIiwidjEiLCJ0ZXN0UGFzcyIsInYyIiwibmV0Q29tcGFyaXNvbiIsImNvbnRyYXN0IiwicmV0dXJuT25GaXJzdEZhbHNlIiwiYXJyMiIsImFyciIsImZpbHRlciIsInZhbDEiLCJ2YWwyIiwiaW5kZXhPZiIsImRpc2Nvbm5lY3RlZCIsImZpcmVhYmxlcyIsImN1cnJlbnRseUZpcmluZ0V2ZW50cyIsImZpcmVhYmxlIiwidGFncyIsIl9maXJlYWJsZSIsInF1ZXJ5Iiwib2JzZXJ2ZXIiLCJvYnNlcnZlclBhcmFtcyIsInBhcmFtcyIsIm9ic2VydmVyVGFncyIsInF1ZXJ5UGFyYW1zIiwicXVlcnlUYWdzIiwiaGFuZGxlciIsInR5cGUiLCJCYXNlIiwiZmlyZWJhc2VzIiwiZmlyZWJhc2VLZXkiLCJzZXQiLCJGaXJlYWJsZSIsImV2dCIsIm5leHQiLCJyZWNpZXZlZCIsIkZpcmViYXNlIiwiZGVmYXVsdEhhbmRsZXIiLCJlIiwiaW5kZXgiLCJfYXJncyIsInRyYXAiLCJmaXJlIiwiYXJncyIsInBvcCIsImNyZWF0ZUZvclRhcmdldCIsImdldEZvclRhcmdldCIsIml0ZW1zIiwiaXRtIiwia2V5c0FsbCIsInVudGlsIiwicHJvdG90eXBhbENoYWluIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIm1lcmdlQ2FsbGJhY2siLCJvYmpzIiwiZGVlcFByb3BzIiwiaXNSZXBsYWNlIiwid2l0aFN5bWJvbHMiLCJzaGlmdCIsInZhbEF0T2JqMSIsInZhbEF0T2JqMiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInNlbGYiLCJkYXRhIiwiZmllbGRzIiwic3JjRXZ0IiwiZGF0YUV2ZW4iLCJvcmlnaW5hdGluZ1RhcmdldCIsIm9yaWdpbmF0aW5nVHlwZSIsIm9yaWdpbmF0aW5nRmllbGRzIiwib3JpZ2luYXRpbmdEYXRhIiwiX29yaWdpbmF0aW5nRGF0YSIsImZpZWxkIiwicGF0aCIsIl9wYXRoIiwib3JpZ2luYXRpbmdDcmVhdGVkIiwib3JpZ2luYXRpbmdEZWxldGVkIiwiX2RhdGEiLCJjcmVhdGVkIiwiZGVsZXRlZCIsImxpbWl0Iiwic3BsaWNlIiwiZmluZEZpcmVhYmxlcyIsImZpcmViYXNlIiwib3JpZ2luYWxDYWxsYmFjayIsInJlbW92ZUZpcmVhYmxlIiwidW5vYnNlcnZlIiwic2VhcmNoIiwic3ViamVjdCIsInBvcyIsImFmdGVyTGFzdCIsImxhc3RJbmRleE9mIiwic3Vic3RyIiwicmVjaWV2ZXIiLCJfY3R4dCIsImN0eHQiLCJfa2V5IiwiZXhpc3RzIiwiZmllbGRzQXJyYXkiLCJpc0R5bmFtaWNGaWVsZCIsInN0YXJ0c1dpdGgiLCJlbmRzV2l0aCIsImpvaW4iLCJkaWZmIiwiZmlyZUNhbGxiYWNrIiwiZmllbGREYXRhIiwicmVkdWNlIiwib3JpZ2luYXRpbmdGaWVsZCIsIl92YWx1ZSIsImZpZWxkUXVlcnkiLCJzcGxpdCIsImN1cnJlbnRWYWx1ZSIsInJlc3BvbnNlIiwicHJldlZhbHVlIiwiZHluYW1pY0ZpZWxkT3V0Y29tZXMiLCJvYnNlcnZlZEZpZWxkIiwicmVwbGFjZSIsImlucHV0T3JpZ2luYXRpbmdGaWVsZCIsImlucHV0T3JpZ2luYXRpbmdGaWVsZFNwbGl0Iiwib2JzZXJ2ZWREeW5hbWljRmllbGRPdXRjb21lIiwibWFwIiwic2VnIiwib2JzZXJ2ZVVwIiwib2JzZXJ2ZURvd24iLCJjdXJyVGFibGUiLCJjb2x1bW4iLCJuZXdUYWJsZSIsInJvdyIsIl9yb3ciLCJhZGRGaXJlYWJsZSIsIk9ic2VydmVyIiwib2JzZXJ2ZSIsImVudHJpZXMiLCJfZW50cmllcyIsImJhc2UiLCJNdXRhdGlvbkV2ZW50IiwiYnViYmxpbmciLCJjb250ZXh0IiwidGFyZ2V0cyIsInRhcmdldENvcHkiLCJzZXREYXRhIiwiX3NldERhdGEiLCJkZWxEYXRhIiwiX2RlbERhdGEiLCJjbnR4dCIsIm11dGF0aW9uQmFzZSIsImluaXRpYWxLZXlzIiwiY3VycmVudEtleXMiLCJjaGFuZ2VkS2V5cyIsImNvbmNhdCIsImluY2x1ZGVzIiwidW5saW5rIiwicmV0dXJuRXZlbnQiLCJ0cmFwQmFzZSIsImRlZmF1bHRHZXQiLCJRdWVyeUV2ZW50IiwidHJhbnNhY3Rpb24iLCJhcHBseSIsInByZXZUZXN0IiwiZGVmYXVsdEhhcyIsIl9zdGF0ZSIsImtleXNPclBheWxvYWQiLCJoYW5kbGVTZXQiLCJyZWxhdGVkIiwiZGVzY3JpcHRvciIsImRlZmluZSIsInN1Y2Nlc3MiLCJkZWZhdWx0U2V0IiwiX3N1Y2Nlc3MiLCJzdWNjZXNzU3RhdGVzIiwicGF5bG9hZEtleXMiLCJzdGF0ZSIsIl9zZXRQcm9wIiwib25HZXRGaXJlIiwib25TZXRGaXJlIiwiY3VycmVudERlc2NyaXB0b3IiLCJ3cml0YWJsZSIsIm5ld1ZhbHVlIiwiZGVmYXVsdEtleXMiLCJfa2V5cyIsIm93bktleXMiLCJfZ2V0UHJvcHMiLCJkZWZhdWx0RGVsIiwibGlzdGVuZXIiLCJTdGF0aWMiLCJidWlsZCIsIl9pbml0IiwidW50cmFwIiwiZGVmIiwiZGVsIiwiZGVsZXRlUHJvcGVydHkiLCJsaW5rIiwiaGFzIiwiaW5pdCIsIm9uIiwiTGlzdGVuZXIiLCJvZmYiLCJ0cmlnZ2VyIiwiY2xhc3NCIiwibWl4aW5UZXN0IiwiY2xhc3NBIiwicHJvdG90eXBlcyIsInByZXZBbnMiLCJjb25zdHJ1Y3RvciIsIkV4cHIiLCJqc2VuVHlwZSIsIlN1cGVyIiwiY29tbWVudHMiLCJtZXRhIiwidmFycyIsIkludGVyZmFjZSIsIkV4cHJJbnRlcmZhY2UiLCJjYWNoZSIsImV4cHIiLCJQYXJzZXJzIiwiX3BhcnNlZCIsInBhcnNlT25lIiwicGFyc2VycyIsImdyYW1tYXJzIiwicGFyc2VkIiwiYXNzZXJ0IiwiUGFyc2VyIiwicGFyc2UiLCJfZXhwciIsIl9QYXJzZXJzIiwiX3BhcmFtcyIsInN1YlN0bXQiLCJsb2RnZSIsIlJlZmVyZW5jZUludGVyZmFjZSIsIkNhbGxJbnRlcmZhY2UiLCJGdW5jSW50ZXJmYWNlIiwiSWZJbnRlcmZhY2UiLCJfdmFyIiwiZXhwbGFpbiIsIl9mbGF0dGVuIiwid2l0aE9iamVjdHMiLCJhY2MiLCJjb3VudCIsImZpcnN0cyIsImFtb3VudCIsInJldmVyc2UiLCJMZXhlciIsInN0ciIsImRlbGltcyIsIm9wdGlvbnMiLCJjb3B5UmVzdWx0IiwibmVzdGluZyIsIm1heERlcHRoIiwidG9rZW5zIiwibWF0Y2hlcyIsIm1hdGNoZXNpIiwiJGNhY2hlIiwiY2FjaGVkIiwibGV4IiwiJHN0ciIsIiRvcHRpb25zIiwiYmxvY2tzIiwiJGJsb2NrcyIsInF1b3RlcyIsIiRxdW90ZXMiLCIkY29tbWVudHMiLCJydW50aW1lIiwiX2V2YWxDaGFyc0F0IiwiY2hhcldpZHRoIiwiY29tbWVudFRlc3QiLCJxdW90ZVRlc3QiLCJuZXN0aW5nVGVzdCIsIm9wZW5Db21tZW50IiwiX3Rlc3RRdW90ZXMiLCJvcGVuUXVvdGUiLCJfdGVzdENvbW1lbnRzIiwiZW5kaW5nIiwiX3B1c2giLCJjaGFycyIsInN0YXJ0aW5nIiwiX3Rlc3ROZXN0aW5nIiwic3RvcENoYXIiLCJfdGVzdENoYXJzIiwic3RvcENoYXJzIiwic3RvcENoYXJGb3J3YXJkIiwibWF0Y2hlZERlbGltIiwicHJlc2VydmVEZWxpbXMiLCJxdW90ZSIsImJsb2NrIiwiTWF0aCIsIm1heCIsInRlc3RMaXN0IiwicmV0IiwidXNlUmVnZXgiLCJtYXRjaCIsIlJlZ0V4cCIsImNpIiwidG9Mb3dlckNhc2UiLCJpc05ld1NlcmllcyIsInNwbGl0U2VyaWVzIiwiU3RyaW5nIiwic3BsaXRTZXJpZXMyIiwicmVnUGFyc2UiLCJzdGFjayIsImxvY2FsIiwiJGxvY2FsIiwicHJvcHMiLCJhIiwiYiIsIl9oYXMiLCJtYWluIiwiZmluYWwiLCJsZXZlbCIsImNhbGxNYWluIiwiaGFuZGxlIiwiYmluZFRoaXMiLCJjb250eHRPYmoiLCJjb250eHRNZXRhIiwiYWR2YW5jZSIsIl9nZXQiLCJpbml0S2V5d29yZCIsIl9zZXQiLCJsb2NhbENvbnR4dE1ldGEiLCJwcm9wMiIsImNvbnRleHRPYmoyIiwiZm4iLCJleGVjIiwiZXhlY1Vua25vd24iLCJvcGVuaW5nVGFnIiwiY2xvc2luZ1RhZyIsImJlZm9yZUxhc3QiLCJBYnN0cmFjdGlvbiIsIkFic3RyYWN0aW9uSW50ZXJmYWNlIiwiZXZhbCIsInBhcnNlQ2FsbGJhY2siLCJBcnIiLCJBcnJJbnRlcmZhY2UiLCJleHBycyIsIm5ld0V4cHJzIiwiZXhwckEiLCJ1bmlxdWVTb0ZhciIsImV4cHJCIiwiZXZlbiIsInRyaW0iLCJBcmd1bWVudHMiLCJBcmd1bWVudHNJbnRlcmZhY2UiLCJsaXN0IiwiYXJnIiwiQXNzZXJ0aW9uIiwiQXNzZXJ0aW9uSW50ZXJmYWNlIiwibG9naWMiLCJvcGVyYXRvcnMiLCJ0b1VwcGVyQ2FzZSIsImlzT3IiLCJvciIsImlzTm9yIiwibm9yIiwiaXNBbmQiLCJhbmQiLCJpc05hbmQiLCJuYW5kIiwibGFzdFJlc3VsdCIsInRydWVzIiwiQXNzaWdubWVudCIsIkFzc2lnbm1lbnRJbnRlcmZhY2UiLCJyZWZlcmVuY2UiLCJvcGVyYXRvciIsImdldEV2YWwiLCJCbG9ja0ludGVyZmFjZSIsInN0bXRzIiwiZGVsaW0iLCJyZXN1bHRzIiwic3RtdCIsIlJldHVybkludGVyZmFjZSIsInByZXZDb250ZXh0IiwiZXZhbFJldHVybiIsInRlc3RCbG9ja0VuZCIsIkJvb2wiLCJCb29sSW50ZXJmYWNlIiwiQ2FsbCIsIkNvbXBhcmlzb24iLCJDb21wYXJpc29uSW50ZXJmYWNlIiwib3BlcmFuZDEiLCJvcGVyYW5kMiIsImNvbXBhcmUiLCJvcGVyIiwic3RyaWN0IiwiZXhhY3QiLCJpcyIsImlzTnVsbCIsImVxdWFsc1RvIiwic3RyaWN0bHlOb3RFcXVhbHNUbyIsIm5vdEVxdWFsc1RvIiwicmVsYXRpdmUiLCJsZXNzZXJUaGFuIiwiZ3JlYXRlclRoYW4iLCJsZXNzZXJUaGFuT3JFcXVhbHNUbyIsImdyZWF0ZXJUaGFuT3JFcXVhbHNUbyIsImJldHdlZW4iLCJwYXJ0aWFsIiwiY29udGFpbnMiLCJhbnkiLCJpbiIsIkNvbmRpdGlvbiIsIkNvbmRpdGlvbkludGVyZmFjZSIsIm9uVHJ1ZSIsIm9uRmFsc2UiLCJzcGxpdHMiLCJEZWxldGlvbiIsIkRlbGV0aW9uSW50ZXJmYWNlIiwicmVkIiwiRnVuYyIsInBhcmFtdGVycyIsInN0YXRlbWVudHMiLCJhcnJvd0Z1bmN0aW9uRm9ybWF0dGluZyIsInBhcmVudFBhcmFtcyIsIm93blBhcmFtcyIsIm5hbWVJblBhcmVudCIsIm5hbWVJblNlbGYiLCJkZWZhdWx0VmFsSW5QYXJlbnQiLCJkZWZhdWx0VmFsSW5TZWxmIiwic3VwIiwibmV3TWFpbkNvbnRleHQiLCJkZWZhdWx0VmFsIiwibmVzdGVkQ29udGV4dCIsImhlYWROb1dyYXAiLCJoZWFkIiwiYm9keU5vV3JhcCIsImJvZHkiLCJmdW5jSGVhZCIsImZ1bmNCb2R5IiwicGFyYW0iLCJwYXJhbVNwbGl0IiwiSWYiLCJuZXdDb250ZXh0Iiwib25UcnVlSXNCbG9jayIsIm9uRmFsc2VJc0Jsb2NrIiwicmVzdCIsIk1hdGhJbnRlcmZhY2UiLCJjdXJyZW50VG90YWwiLCJzdWIiLCJOdW0iLCJOdW1JbnRlcmZhY2UiLCJpbnQiLCJkZWMiLCJwYXJzZUludCIsIk9iaiIsIk9iakludGVyZmFjZSIsIl9lbnRyaWVzU3BsaXQiLCJlbnRyeSIsIlByZXNlbmNlIiwiUHJlc2VuY2VJbnRlcmZhY2UiLCJSZWZlcmVuY2UiLCJiYWNrdGlja3MiLCJzb3VyY2VDb250ZXh0IiwicGFydHMiLCJzdWJqZWN0Q29udGV4dCIsInNlcGFyYXRvciIsIm5hbWVTcGxpdCIsImlzQ29udGV4dCIsIlJldHVybiIsImV4cHJMYyIsIlN0ciIsIlN0ckludGVyZmFjZSIsIldpbmRvdyIsIlRyYXAiLCJyb290QXR0cmlidXRlIiwic2NvcGVkSWRBdHRyaWJ1dGUiLCJpZEhpbnRzQXR0cmlidXRlIiwic2NvcGVUcmVlUHJvcGVydHlOYW1lIiwiYWRkQ2FsbGJhY2siLCJTY2hlbWEiLCJzdGQiLCJodG1sIiwibW9kZWwiLCJzaW5nbGV0b24iLCJjYXB0aW9uIiwiY29sIiwiY29sZ3JvdXAiLCJkZCIsImltcGxpY2l0Um9sZSIsImR0IiwiZmlnY2FwdGlvbiIsImxlZ2VuZCIsImxpIiwib3B0Z3JvdXAiLCJvcHRpb24iLCJycCIsInJ0Iiwic291cmNlIiwic3VtbWFyeSIsInRyYWNrIiwidGJvZHkiLCJ0ZCIsInRmb290IiwidGhlYWQiLCJ0ciIsImFiYnIiLCJhZGRyZXNzIiwiYXJlYSIsImFydGljbGUiLCJhY2NlcHRhYmxlUm9sZXMiLCJhc2lkZSIsImF1ZGlvIiwiYmRpIiwiYmRvIiwiYmxvY2txdW90ZSIsImJyIiwiYnV0dG9uIiwiY2FudmFzIiwiY2l0ZSIsImNvZGUiLCJkYXRhbGlzdCIsImRmbiIsImRpYWxvZyIsImRpdiIsImRsIiwiZW0iLCJlbWJlZCIsImZpZWxkc2V0IiwiZmlndXJlIiwiZm9vdGVyIiwiZm9ybSIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsImhlYWRlciIsImhncm91cCIsImhyIiwiaWZyYW1lIiwiaW1nIiwiaW5wdXQiLCJpbnMiLCJrYmQiLCJsYWJlbCIsIm1hcmsiLCJtYXRoIiwibWVudSIsIm5hbWVzIiwibWV0ZXIiLCJuYXYiLCJub3NjcmlwdCIsIm9sIiwib3V0cHV0IiwicGljdHVyZSIsInByZSIsInByb2dyZXNzIiwicSIsInJ1YnkiLCJzYW1wIiwic2NyaXB0Iiwic2VjdGlvbiIsInNlbGVjdCIsInNsb3QiLCJzbWFsbCIsInNwYW4iLCJzdHJvbmciLCJzdHlsZSIsInN2ZyIsInRhYmxlIiwidGVtcGxhdGUiLCJ0ZXh0YXJlYSIsInRpbWUiLCJ0aXRsZSIsInUiLCJ1bCIsInZhciIsInZpZGVvIiwid2JyIiwiYXJpYSIsImJhbm5lciIsImNvbnRlbnRpbmZvIiwiY29tcGxlbWVudGFyeSIsIm5hdmlnYXRpb24iLCJsaXN0aXRlbSIsImVsIiwiZWxUYWdOYW1lIiwibm9kZU5hbWUiLCJleHBhbmRSdWxlcyIsInJvbGVJbmNsdXNpdmUiLCJlbFNjaGVtYSIsImN1cnJlbnRFbENhdGVnb3JpZXMiLCJoYXNBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJyb2xlIiwibm9kZSIsInZhbGlkIiwiY29udGV4dE1vZGVsIiwiSFRNTEVsZW1lbnQiLCJnZXRDb250ZW50TW9kZWxGb3IiLCJub2RlQ2F0ZWdvcmllcyIsImdldENhdGVnb3JpZXNGb3IiLCJhbGxvd2VkTm9kZSIsImRpc2FsbG93ZWROb2RlIiwic2NvcGUiLCJub2RlU2NoZW1hIiwiY2xvc2VzdCIsImNvbnRleHRDYXRlZ29yaWVzIiwiY3VycmVudCIsInBhcmVudE5vZGUiLCJhc3NlcnROb2RlQmVsb25nc0luQ29udGVudE1vZGVsIiwicnVsZXMiLCJybGVzIiwiY2F0ZWdvcmllcyIsInJ1bGUiLCJxdWVyeVNlbGVjdG9yIiwiaXNSb290Iiwic3RvcmUiLCJmaW5kIiwibm9kZXNIaW50IiwiYWRkIiwiaXNOb2RlIiwiX25vZGUiLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJjYWxsZWQiLCJtdXRhdGlvbnMiLCJyZW1vdmVkTm9kZXMiLCJjaGlsZExpc3QiLCJfcmVtb3ZlIiwibm9kZUxpc3QiLCJub2RlTmFtZXMiLCJmaW5kRXhwbGljaXQiLCJmaW5kSW1wbGljaXQiLCJfb2JqRnJvbSIsInNjb3BlZElEIiwiY2xvc2VzdFN1cGVyIiwiX21hdGNoZWROb2RlIiwiQ1NTRXNjYXBlIiwiQ1NTIiwiZXNjYXBlIiwiY2xvc2VzdFN1cGVyU2VsZWN0b3IiLCJub2RlU2VsZWN0b3IiLCJzaGFkb3dSb290IiwiaXNTYW1lTm9kZSIsInJlcXVlc3ROb2RlTmFtZSIsInRyaWVzIiwic2VsZWN0b3IiLCJ0YWduYW1lIiwidHJpZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJhc3NlcnROb2RlQmVsb25nc0luU2NvcGVBcyIsInNjaGVtYSIsIkVsZW1lbnQiLCJwcm94eVNjb3BlZE9iamVjdHMiLCJQcm94eSIsIlNjb3BlZENTUyIsIkFTVCIsInNjcmlwdEVsZW1lbnQiLCJiaW5kTWV0aG9kTmFtZSIsImluZXJ0Q29udGV4dHMiLCJhdXRvSGlkZSIsImJpbmRDYWxsYmFjayIsImdsb2JhbHMiLCJTY29wZWRKUyIsIm5vdGlmeSIsImdldEJhc2UiLCJ0ZXh0Q29udGVudCIsImFwcGx5QmluZGluZyIsInJlbW92ZSIsImRvY3VtZW50Iiwic2NyaXB0cyIsImlubmVydENvbnRleHQiLCJhZGRFdmVudExpc3RlbmVyIiwic2V0VGltZW91dCIsInJlYWR5U3RhdGUiLCJzdWJ0cmVlIiwiYmluZGluZyIsIl9zdXBlciIsIl9tYWluIiwiU2NvcGUiLCJfYmluZGluZyIsIlNjb3BlZEhUTUwiLCJuYW1lc3BhY2VBdHRyaWJ1dGUiLCJidW5kbGVFbGVtZW50IiwiaW1wb3J0RWxlbWVudCIsImtleVZhbEF0dHJpYnV0ZXMiLCJsaXN0QXR0cmlidXRlcyIsIm5vcmVjb21wb3NlQXR0cmlidXRlcyIsInJlY29tcG9zZUNhbGxiYWNrIiwibm9yZWNvbXBvc2UiLCJlbFRvIiwiZGlzcG9zaXRpb24iLCJlbEZyb20iLCJhcHBlbmRPclByZXBlbmQiLCJzY29wZWRIVE1MIiwiYl9hdHRyIiwiYV9hdHRyIiwiam9pbnRMaXN0Iiwic2V0QXR0cmlidXRlIiwiam9pbnREZWZzIiwiYXR0cmlidXRlcyIsImF0dHIiLCJlbFRvRGVmcyIsImNoaWxkcmVuIiwiZWxGcm9tRGVmcyIsInByZXBlbmQiLCJjbG9uZU5vZGUiLCJlbEZyb21OcyIsImVsVG9pc1Jvb3QiLCJyZWNvbXBvc2VEaXJlY3RpdmVzIiwicmVwbGFjZW1lbnROb2RlIiwic2xvdE5vZGUiLCJyb290U2VsZWN0b3IiLCJzbG90Tm9kZVNlbGVjdG9yIiwicmVwbGFjZVdpdGgiLCJhcHBlbmQiLCJyZWNvbXBvc2VOb2RlcyIsInNvdXJjZXMiLCJuYW1lc3BhY2UiLCJjYXJyeSIsImNvbGxlY3Rpb25zIiwibG9hZGluZ1NvdXJjZXMiLCJyZXMiLCJyZWoiLCJ0aGVuIiwibG9hZGVkIiwiX3NvdXJjZSIsInN1Yk1hdHJpeCIsIm5zS2V5IiwibnNBcnJheSIsIm5zRHJpbGwiLCJlbnRlciIsImZyb20iLCJsYXN0UmVmZXJlbmNlIiwiYWZ0ZXIiLCJsb29wIiwibmFtZXNwYWNlUGFyc2UiLCJyb2FkbWFwIiwibmFtZXNwYWNlU3RyIiwic3VibmFtZXNwYWNlIiwicGFyc2VOYW1lc3BhY2UiLCJzeW5jTGlzdENhbGxiYWNrIiwic3luY0l0ZW0iLCJpc0V4aXN0aW5nTm9kZSIsInVuYmluZCIsImNoYW5nZXMiLCJzeW5jIiwic3JjTW9kZWwiLCJub2RlTmFtZXNwYWNlQXJyYXkiLCJzcmNNb2RlbEtleXMiLCJjdXJyZW50Tm9kZU5hbWVzIiwiZXhpc3RpbmdOb2RlIiwic3JjSXRlbSIsImlzTmV3Tm9kZSIsIm5vZGVOYW1lc3BhY2VBcnJheUNvcHkiLCJub2RlRWwiLCJpbXBvcnQiLCJmb2xsb3dpbmciLCJfbm9kZU5hbWUiLCJiZWZvcmUiLCJjYXRjaCIsImJ1bmRsZXMiLCJuZXdOb2RlIiwiX25ld05vZGUiLCJyZXNvbHZlIiwiY2FwdHVyZSIsImNvbnRlbnRMb2FkZWRQcm9taXNlIiwiY3VzdG9tRWxlbWVudHMiLCJIVE1MVGVtcGxhdGVFbGVtZW50Iiwib2xkVmFsdWUiLCJsb2FkIiwic3JjIiwiY29udGVudCIsImNvbnNvbGUiLCJ3YXJuIiwiZmV0Y2giLCJvayIsInRleHQiLCJyZWplY3QiLCJzdGF0dXNUZXh0IiwiaW5uZXJIVE1MIiwiZGlzcGF0Y2hFdmVudCIsImJ1YmJsZXMiLCJlcnJvciIsImV4dGVuZHMiLCJfYnVuZGxlcyIsImJ1bmRsZU1hdHJpeCIsImJ1bmRsZUVsZW1lbnRzIiwiY3JlYXRlRWxlbWVudCIsImFudGljeWNsaWNCdW5kbGVzUXVlcnkiLCJidW5kbGUiLCJzdXBlckVsIiwiYnVuZGxlSW5kZXgiLCJfbmFtZXNwYWNlIiwicmVjb21wb3NlIiwibWVzc2FnZSIsImNyZWF0ZUJ1bmRsZU1hdHJpeCIsImltcG9ydHNSZWFkeSIsIkhUTUxUcmFuc3BvcnQiLCJwcm9jZXNzZWQiLCJhdHRlbXB0UmVzb2x2ZSIsInJlcGxhY2VtZW50IiwibmFtZXNwYWNlQXR0ciIsIl9fbmFtZXNwYWNlIiwicmVzb2x2ZWQiLCJhdHRhY2hTaGFkb3ciLCJpbm5uZXJUZXh0IiwicmVhZHkiLCJ3YWl0Rm9yQnVuZGxlcyIsIndhcm5lZEVhcmx5QnVuZGxlQWNjZXNzIiwiQ2h0bWwiLCJhY3RpdmUiLCJhY3RpdmF0aW5nIiwiZGVhY3RpdmF0aW5nIiwiaXRlbXNPZmZzZXQiLCJmaWxsIiwidGFrZVN0YXRzIiwic3RhdGVOYW1lIiwiaXNNdWx0aXBsZSIsInBhdGhUb1N0YXRlIiwiZ2V0SXRlbXNBcnJheSIsIml0ZW0iLCJzZXRBY3RpdmVTdGF0ZSIsImZpcnN0IiwibGFzdCIsInByZWNlZGluZyIsImVudHJ5Q2xhc3MiLCJJdGVtIiwiY29tcG9uZW50IiwicmVnaXN0cnkiLCJjb25zdHJ1dG9yIiwiaW5zdGFuY2UiLCJzaW5nbGV0b25JbnN0YW5jZSIsInNpbmdsZXRvbkluc3RhbmNlcyIsImluc3QiLCJUcmFwcyIsImNsYXNzZXMiLCJzdXBlcnNNYXAiLCJNaXhpbiIsIl9jbGFzcyIsInN1cGVycyIsInN1cGVyc1JldHVyblZhbHVlcyIsInN1cHIiLCJhY3RpdmVTdGF0ZSIsImFjdGl2ZUNhbGxiYWNrIiwiaW5pdENhbGxiYWNrIiwic3Vicm91dGluZ0tleXMiLCJzdWJyb3V0aW5nS2V5Iiwic3Vicm91dGluZ0tleUZvcndhcmQiLCJyb3V0ZXJJbnN0YW5jZSIsIlJlZ2lzdHJ5Iiwic3Vicm91dGluZ0tleVR5cGUiLCJyb3V0ZSIsIm93blBhdGgiLCJzdWJyb3V0aW5nS2V5VmFsIiwic3Vicm91dGVzIiwicm91dGVzIiwicm91dGVDbGFzcyIsImNyZWF0ZUVudHJpZXMiLCJfYXJyIiwic29ydCIsImxvY2FsZUNvbXBhcmUiLCJvcmRlciIsImVudHJpZXNPcktleSIsInBhdGhuYW1pbmciLCJnZXRQcm9wcyIsInVybE9iaiIsInVybFByb3BlcnRpZXMiLCJfc3RyaWN0RXZlbiIsInBhcnNlVXJsIiwidmFscyIsIl92YWxzIiwic2VhcmNobWFwIiwicGF0aG5hbWUiLCJwYXRobWFwIiwicGF0aHNwbGl0IiwiaHJlZiIsIl9zZWFyY2giLCJfc2VhcmNobWFwIiwiX3BhdGhuYW1lIiwiX3BhdGhtYXAiLCJfcGF0aHNwbGl0IiwiX2hyZWYiLCJpc1NlYXJjaG1hcFNhbWUiLCJmIiwidG9TZWFyY2giLCJ0b1NlYXJjaG1hcCIsImlzUGF0aG1hcFNhbWUiLCJpc1BhdGhzcGxpdFNhbWUiLCJ0b1BhdGhuYW1lIiwidG9QYXRobWFwIiwidG9QYXRoc3BsaXQiLCJvcmlnaW4iLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJwdXNoU3RhdGUiLCJoYXNoIiwic2Nyb2xsIiwic3BlZWQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzY3JvbGxCeSIsIm1pbiIsInNjcm9sbFRvSGFzaCIsInNjcm9sbEhlaWdodCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0b3AiLCJhbmNob3IiLCJlMiIsInJlcXVlc3QiLCJmb3J3YXJkIiwiYmFjayIsImdvIiwicGF0aG5hbWVPclBhdGhzcGxpdCIsInBhdGhBcnIiLCJwYXRoU3RyIiwiX3BhdGhuYW1lcyIsInBhdGhJdGVtIiwicGF0aG5hbWVPclBhdGhtYXAiLCJyZWZlcmVuY2VVcmwiLCJwYXRobWFwT3JQYXRoc3BsaXQiLCJyZWdpc3RlciIsIm1vbmV0aXphdGlvbiIsImRldGFpbCIsIm1vbmV0aXphdGlvbk1ldGEiLCJzdHlsZXMiLCJwcmVmaXgiLCJkZWxpbWl0ZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwiZG9jdW1lbnRFbGVtZW50IiwiT2xpbmsiLCJjc3MiLCJhcGkiLCJjYW1lbENhc2VkUHJvcCIsInR4dCIsImNoYXJBdCIsImZyb21TdGFydCIsInZlbmRvclByZWZpeCIsInZhbHNMaXN0IiwicHJvcHNMaXN0Iiwibm9ybWFsUHJvcCIsIndpdGhWZW5kb3JWZXJzaW9uIiwidmVuZG9yaXplIiwidmVuZG9yaXplZFByb3AiLCJjYWxsQ2FsbGJhY2siLCJUcmFuc2Zvcm1SdWxlIiwidHJhbnNmb3JtUnVsZXMiLCJyb3VuZCIsInIyZCIsInJhZGlhbnMiLCJkZWciLCJQSSIsInRyYW5zZm9ybVN0ciIsIldlYktpdENTU01hdHJpeCIsInJkaWdpdCIsInN0b20iLCJBIiwiQiIsIkMiLCJEIiwic2NhbGVYIiwic3FydCIsInNrZXciLCJzY2FsZVkiLCJ0cmFuc2xhdGUiLCJzY2FsZSIsInJvdGF0ZSIsImF0YW4yIiwiYXRhbiIsInBzdWVkbyIsInJ1bGVDYWxsYmFjayIsInJhd1Byb3AiLCJnZXRQcm9wZXJ0eVZhbHVlIiwibmFtZU9yUHJvcHMiLCJkZXN0cnVjdGFibGVzIiwiaW5zZXQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiZGVzdHJ1Y3RhYmxlUHJvcCIsIm1lYW5pbmciLCJhdXRvcHgiLCJSZWZsb3ciLCJyZWFkQ2FsbGJhY2tzIiwid3JpdGVDYWxsYmFja3MiLCJfcnVuIiwib25yZWFkIiwid2l0aFByb21pc2UiLCJvbndyaXRlIiwiY3ljbGUiLCJyZWFkIiwid3JpdGUiLCJwcmV2VHJhbnNhY3Rpb24iLCJyZWFkUmV0dXJuIiwiY2FsbFdyaXRlIiwid3JpdGVSZXR1cm4iLCJyZXBlYXRUcmFuc2FjdGlvbiIsIndyaXRlU3luYyIsInByb3BzVG9SZWFkIiwicmVhZENhbGxiYWNrIiwiaW5saW5lU2F2ZXBvaW50IiwicmVhZFN5bmMiLCJyZW5kZXJpbmciLCJfc3BsaXQiLCJjYWNoZUtleSIsIm5vQ2FjaGUiLCJzdHlsZXNoZWV0S2V5ZnJhbWVzQ2FjaGUiLCJhbGxLZXlmcmFtZXMiLCJzdHlsZXNoZWV0cyIsInN0eWxlU2hlZXRzIiwic3R5bGVzaGVldENhbGxiYWNrIiwic3R5bGVzaGVldCIsImNzc1J1bGVzIiwicnVsZURlZmluaXRpb24iLCJyZXZlcnNlZCIsInN0eWxlc2hlZXRSdWxlQ2FsbGJhY2siLCJDU1NSdWxlIiwiS0VZRlJBTUVTX1JVTEUiLCJrZXlmcmFtZXMiLCJrZXlmcmFtZVJ1bGUiLCJrZXlmcmFtZSIsInBhcnNlUnVsZXMiLCJjc3NUZXh0Iiwia2V5VGV4dCIsIm9mZnNldHMiLCJub3JtYWxpemUiLCJub3JtYWxpemVUb1dBQVBJIiwiX2tleWZyYW1lIiwib2Zmc2V0IiwicGFyc2VLZXlmcmFtZXMiLCJhbmltYXRpb25Qcm9wcyIsInByZWYiLCJlYXNpbmciLCJpdGVyYXRpb25zIiwiSW5maW5pdHkiLCJlZmZlY3QiLCJyZWFkeUNhbGxiYWNrcyIsImZpbmlzaENhbGxiYWNrcyIsImNhbmNlbENhbGxiYWNrcyIsImR1cmF0aW9uIiwiZmlyc3RGcmFtZSIsImxhc3RGcmFtZSIsInRyYW5zZm9ybSIsIml0bXMiLCJhbmltIiwiYW5pbWF0ZSIsIm9uZmluaXNoIiwiY2FuY2VsRm9yQ3NzIiwiY2FuY2VsIiwib25jYW5jZWwiLCJjcmVhdGVDYWxsYmFjayIsInN1Y2NlcyIsImN1cnJlbnRUaW1lIiwidG8iLCJ0b3RhbER1cmF0aW9uIiwiZGVsYXkiLCJlbmREZWxheSIsInBsYXkiLCJwYXVzZSIsImZpbmlzaCIsImlzT2JqZWN0QW5kT25seUxhc3RLZXlmcmFtZSIsInYiLCJpc0FycmF5QnV0RW1wdHlGaXJzdEtleWZyYW1lIiwiYW5pbWF0aW9uTmFtZSIsImtleWZyYW1lc1dpdGhBdXRvU2l6ZXMiLCJoZWlnaHQiLCJ3aWR0aCIsInJlYWRSZW5kZXJpbmciLCJhbmltYXRpb25zIiwicGxheVN0YXRlIiwicmVtb3ZlQ2FsbGJhY2siLCJhbHJlYWR5UmVzb2x2ZWQiLCJhbHJlYWR5UmVqZWN0ZWQiLCJoYW5kbGVGaW5pc2giLCJoYW5kbGVDYW5jZWwiLCJ0b3RhbCIsImV4Y2VwdCIsImVhY2giLCJzZWVrIiwibm93UGxheWluZyIsIlRpbWVsaW5lIiwidGltaW5nIiwicXVldWUiLCJub3dQbGF5aW5nQWRkIiwibm93UGxheWluZ0VmZmVjdCIsImNyZWF0ZUFuaW1hdGlvbiIsImFuaW1hdGlvbiIsIm9uZW9mZiIsImNvbXB1dGUiLCJub3dQbGF5aW5nUGFyYW1zIiwibGFnIiwiZW5kTGFnIiwibGFzdEFuaSIsInJldmVyc2VMaXN0Iiwib25seSIsIlJvdXRlIiwiYWN0aXZlU3Vicm91dGUiLCJkaXNwbGF5IiwiY3JlYXRlUm91dGVzIiwiZW5nciIsImRlc2MiLCJsaW5rMSIsImxpbmsyIiwiZXZhbiIsImF1dGhvcnMiLCJhdmF0YXIiLCJhcHAiLCJwYWdlIiwiZW5naW5lZXJpbmdTZWN0aW9uIiwiZXZhbmdlbGlzbVNlY3Rpb24iLCJhYm91dCIsIldlYk5hdGl2ZSIsIkZpcmVkb20iLCJhbGVydCIsInByb21wdCIsImNvbmZpcm0iLCJyb3V0ZXIiLCJIVE1MVUxpc3RFbGVtZW50Iiwic2VxdWVuY2VBIiwiU2VxdWVuY2UiLCJzZXF1ZW5jZUIiLCJvcGFjaXR5IiwiaW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImlzSW50ZXJzZWN0aW5nIiwiYm91bmRpbmdDbGllbnRSZWN0Iiwicm9vdE1hcmdpbiIsIkhUTUxMSUVsZW1lbnQiLCJzZXF1ZW5jZUFkZCIsImFwcEVsZW1lbnQiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdKRixFQUFPRCxRQUtmRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FBTyxLQVF2RHJCLEVBQW9Cc0IsRUFBSSxTQUFTRCxFQUFPRSxHQUV2QyxHQURVLEVBQVBBLElBQVVGLEVBQVFyQixFQUFvQnFCLElBQy9CLEVBQVBFLEVBQVUsT0FBT0YsRUFDcEIsR0FBVyxFQUFQRSxHQUE4QixpQkFBVkYsR0FBc0JBLEdBQVNBLEVBQU1HLFdBQVksT0FBT0gsRUFDaEYsSUFBSUksRUFBS1gsT0FBT1ksT0FBTyxN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QUFHQyxFQUFHelEsT0FFL0IsQ0FBQ3FGLGFBQWEsSUFDakIsR0FBT1EsUUFBUXE4QixHQUFLLENBQUMxeEIsRUFBR0MsRUFBR3pRLE9BR3hCLENBQUNxRixhQUFhLElBQ2pCNjhCLEdBQUkvUCxNQUFNLEdBQ1ZzUixFQUFXenBDLEtBQUtrb0MiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJmdW5jdGlvblwiLlxyXG4gKiBUaGlzIGhvbGRzIHRydWUgZm9yIGJvdGggcmVndWxhciBmdW5jdGlvbnMgYW5kIGNsYXNzZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVHlwZUZ1bmN0aW9uIGZyb20gJy4vaXNUeXBlRnVuY3Rpb24uanMnO1xyXG5cclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwib2JqZWN0XCIuXHJcbiAqIFRoaXMgaG9sZHMgdHJ1ZSBmb3IgYW55dGhpbmcgb2JqZWN0LCBpbmNsdWRpbmcgYnVpbHQtaW5zLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpIHx8ICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwpIHx8IF9pc1R5cGVGdW5jdGlvbih2YWwpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwiYXJyYXlcIi5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcInN0cmluZ1wiLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnICYmIHZhbCAhPT0gbnVsbDtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgdW5kZWZpbmVkIG9yIGlzIG9mIHR5cGUgXCJ1bmRlZmluZWRcIi5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiBhcmd1bWVudHMubGVuZ3RoICYmICh2YWwgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIHVuZGVmaW5lZCBvciBpcyBudWxsLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09ICcnO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzTnVsbCBmcm9tICcuL2lzTnVsbC5qcyc7XHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnLi9pc1VuZGVmaW5lZC5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJy4vaXNUeXBlT2JqZWN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgZW1wdHkgaW4gaXRzIG93biB0eXBlLlxyXG4gKiBUaGlzIGhvbGRzIHRydWUgZm9yIE5VTExzLCBVTkRFRklORUQsIEZBTFNFLCAwLFxyXG4gKiBvYmplY3RzIHdpdGhvdXQga2V5cywgZW1wdHkgYXJyYXlzLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIF9pc051bGwodmFsKSB8fCBfaXNVbmRlZmluZWQodmFsKSB8fCB2YWwgPT09IGZhbHNlIHx8IHZhbCA9PT0gMCBcclxuXHRcdHx8IChfaXNUeXBlT2JqZWN0KHZhbCkgJiYgIU9iamVjdC5rZXlzKHZhbCkubGVuZ3RoKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgcHVyZSBvYmplY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiAhQXJyYXkuaXNBcnJheSh2YWwpICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIHZhbDtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzVHlwZUFycmF5IGZyb20gJy4uL2pzL2lzVHlwZUFycmF5LmpzJztcclxuaW1wb3J0IF9pc0VtcHR5IGZyb20gJy4uL2pzL2lzRW1wdHkuanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJy4uL2pzL2lzT2JqZWN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiBDYXN0cyBhbiBhcnJheS1saWtlIG9iamVjdCB0byBhbiBhcnJheS5cclxuICpcclxuICogQHBhcmFtIG1peGVkIFx0dmFsXHJcbiAqIEBwYXJhbSBib29sXHQgXHRjYXN0T2JqZWN0XHJcbiAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCwgY2FzdE9iamVjdCA9IHRydWUpIHtcclxuXHRpZiAoX2lzQXJyYXkodmFsKSkge1xyXG5cdFx0cmV0dXJuIHZhbDtcclxuXHR9O1xyXG5cdGlmICghY2FzdE9iamVjdCAmJiBfaXNPYmplY3QodmFsKSkge1xyXG5cdFx0cmV0dXJuIFt2YWxdO1xyXG5cdH07XHJcblx0aWYgKHZhbCAhPT0gZmFsc2UgJiYgdmFsICE9PSAwICYmIF9pc0VtcHR5KHZhbCkpIHtcclxuXHRcdHJldHVybiBbXTtcclxuXHR9O1xyXG5cdGlmIChfaXNUeXBlQXJyYXkodmFsKSkge1xyXG5cdFx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHZhbCk7XHJcblx0fTtcclxuXHRpZiAoX2lzT2JqZWN0KHZhbCkpIHtcclxuXHRcdHJldHVybiBPYmplY3QudmFsdWVzKHZhbCk7XHJcblx0fTtcclxuXHRyZXR1cm4gW3ZhbF07XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSAnLi9pc1N0cmluZy5qcyc7XHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnLi9pc1VuZGVmaW5lZC5qcyc7XHJcblxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIFwiYXJyYXktbGlrZVwiLlxyXG4gKiBUaGlzIGhvbGRzIHRydWUgZm9yIGFueXRoaW5nIHRoYXQgaGFzIGEgbGVuZ3RoIHByb3BlcnR5LlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gIV9pc1N0cmluZyh2YWwpICYmICFfaXNVbmRlZmluZWQodmFsLmxlbmd0aCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc1N0cmluZyBmcm9tICcuLi9qcy9pc1N0cmluZy5qcyc7XHJcblxyXG4vKipcclxuICogUmV0dXJuIGFuIG9iamVjdCBmb3IgdGhlIGdpdmVuIHBhaXIocykgb2YgaW5wdXQuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmd8YXJyYXkgXHRcdFx0a2V5XHJcbiAqIEBwYXJhbSBtaXhlZHxhcnJheVx0XHRcdHZhbCBcclxuICpcclxuICogQHJldHVybiBvYmplY3RcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGtleSwgdmFsID0gbnVsbCkge1xyXG5cdHZhciBvYmogPSB7fTtcclxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xyXG5cdFx0aWYgKF9pc0FycmF5KGtleSkgJiYgX2lzQXJyYXkodmFsKSkge1xyXG5cdFx0XHRrZXkuZm9yRWFjaCgoaywgaSkgPT4gb2JqW2tdID0gdmFsW2ldKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdG9ialtrZXldID0gdmFsO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gb2JqO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwic3RyaW5nXCIgb3IgYSBudW1lcmljIHN0cmluZy5cclxuICogVGhpcyBob2xkcyB0cnVlIGZvciBib3RoIG51bWJlcnMgYW5kIG51bWVyaWMgc3RyaW5ncy5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiB2YWwgIT09IHRydWUgJiYgdmFsICE9PSBmYWxzZSAmJiB2YWwgIT09IG51bGwgJiYgdmFsICE9PSAnJyAmJiAhaXNOYU4odmFsICogMSk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNUeXBlRnVuY3Rpb24gZnJvbSAnLi9pc1R5cGVGdW5jdGlvbi5qcyc7XHJcblxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJjbGFzc1wiLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0IFx0XHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gX2lzVHlwZUZ1bmN0aW9uKHZhbCkgJiYgL15jbGFzc1xccz8vLnRlc3QoRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKSk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNUeXBlRnVuY3Rpb24gZnJvbSAnLi9pc1R5cGVGdW5jdGlvbi5qcyc7XHJcblxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJmdW5jdGlvblwiLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0IFx0XHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gX2lzVHlwZUZ1bmN0aW9uKHZhbCkgfHwgKHZhbCAmJiB7fS50b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IGZ1bmN0aW9uXScpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuLi9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICcuLi9qcy9pc051bWVyaWMuanMnO1xyXG5cclxuLyoqXHJcbiAqIExvb3BzIHRocnUgb2JqIGZsYXRseSB3aXRoIGEgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAqIFN0b3BzIHdoZW4gY2FsbGJhY2sgcmV0dXJucyBhIG5vbi11bmRlZmluZWQgdmFsdWUuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3QgXHRcdFx0b2JqIFx0XHRcdFRoZSBhcnJheSBvciBvYmplY3QgdG8gaXRlcmF0ZS5cclxuICogQHBhcmFtIGZ1bmN0aW9uIFx0XHRcdFx0Y2FsbGJhY2sgXHRcdFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cclxuICpcclxuICogQHJldHVybiBtaXhlZHxudWxsXHRcdFx0QW55IG5vbi1udWxsIHJldHVybiBmcm9tIGNhbGxiYWNrXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmosIGNhbGxiYWNrKSB7XHJcblx0dmFyIHJldHVyblZhbHVlID0gdW5kZWZpbmVkO1xyXG5cdGlmIChfaXNUeXBlT2JqZWN0KG9iaikpIHtcclxuXHRcdE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaCgoaywgaSkgPT4ge1xyXG5cdFx0XHRpZiAocmV0dXJuVmFsdWUgIT09IGZhbHNlKSB7XHJcblx0XHRcdFx0cmV0dXJuVmFsdWUgPSBjYWxsYmFjayhfaXNOdW1lcmljKGspID8gcGFyc2VGbG9hdChrKSA6IGssIG9ialtrXSwgaSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxuXHRyZXR1cm4gcmV0dXJuVmFsdWU7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1VuZGVmaW5lZC5qcyc7XHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc09iamVjdC5qcyc7XHJcbmltcG9ydCBfZWFjaCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9lYWNoLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIEV2ZW50IGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBJbml0aWFsaXplcyB0aGUgaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHRcdHRhcmdldFxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0XHRkZXRhaWxzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcih0YXJnZXQsIGRldGFpbHMgPSB7fSkge1xyXG5cdFx0dGhpcy4kID0ge307XHJcblx0XHR0aGlzLiQudGFyZ2V0ID0gdGFyZ2V0O1xyXG5cdFx0dGhpcy4kLmRldGFpbHMgPSBkZXRhaWxzO1xyXG5cdFx0dGhpcy4kLnByb3BhZ2F0aW9uU3RvcHBlZCA9IGZhbHNlO1xyXG5cdFx0dGhpcy4kLmRlZmF1bHRQcmV2ZW50ZWQgPSBmYWxzZTtcclxuXHRcdHRoaXMuJC5wcm9taXNlc0luc3RhbmNlID0gbnVsbDtcclxuXHRcdHRoaXMuJC5wcm9taXNlcyA9IFtdO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdF9lYWNoKGRldGFpbHMsIChwcm9wLCB2YWx1ZSkgPT4ge1xyXG5cdFx0XHRpZiAocHJvcCAhPT0gJyQnKSB7XHJcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIHByb3AsIHt2YWx1ZX0pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldHMgdGhlIFwidGFyZ2V0XCIgb2JqZWN0LlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBhcnJheXxvYmplY3RcclxuXHQgKi9cclxuXHRnZXQgdGFyZ2V0KCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuJC50YXJnZXQ7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBHZXRzIHRoZSBcImRldGFpbHNcIiBvYmplY3QuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG9iamVjdFxyXG5cdCAqL1xyXG5cdGdldCBkZXRhaWxzKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuJC5kZXRhaWxzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHQgKiBSRVNQT05TRSBIQU5ETEVSU1xyXG5cdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0ICovXHJcblxyXG5cdC8qKlxyXG5cdCAqIFN0b3BzIHRoZSBldm50IGZyb20gcmVhY2hpbmcgb3RoZXIgbGlzdGVuZXJzLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBib29sXHJcblx0ICovXHJcblx0c3RvcFByb3BhZ2F0aW9uKCkge1xyXG5cdFx0dGhpcy4kLnByb3BhZ2F0aW9uU3RvcHBlZCA9IHRydWU7XHJcblx0fVxyXG5cdFx0XHJcblx0LyoqXHJcblx0ICogKFJlYWRvbmx5KSB0ZWxscyBpZiBzdG9wUHJvcGFnYXRpb24oKSBoYXMgYmVlbiBjYWxsZWQuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGJvb2xcclxuXHQgKi9cclxuXHRnZXQgcHJvcGFnYXRpb25TdG9wcGVkKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuJC5wcm9wYWdhdGlvblN0b3BwZWQ7XHJcblx0fVxyXG5cdFx0XHJcblx0LyoqXHJcblx0ICogU2V0cyBhIGRpc3Bvc2l0aW9uIHRoYXQgYXNrcyBldmVudCBpbml0aWF0b3Igbm90IHRvXHJcblx0ICogcHJvY2VlZCB3aXRoIGRlZmF1bHQgYWN0aW9uLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0cHJldmVudERlZmF1bHQoKSB7XHJcblx0XHR0aGlzLiQuZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XHJcblx0fVxyXG5cdFx0XHJcblx0LyoqXHJcblx0ICogKFJlYWRvbmx5KSB0ZWxscyBpZiBwcmV2ZW50RGVmYXVsdCgpIGhhcyBiZWVuIGNhbGxlZC5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYm9vbFxyXG5cdCAqL1xyXG5cdGdldCBkZWZhdWx0UHJldmVudGVkKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuJC5kZWZhdWx0UHJldmVudGVkO1xyXG5cdH1cclxuXHRcdFxyXG5cdC8qKlxyXG5cdCAqIFNldHMgYSBQcm9taXNlIGRpc3Bvc2l0aW9uLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIFByb21pc2VcdHByb21pc2VcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdHByb21pc2UocHJvbWlzZSkge1xyXG5cdFx0aWYgKCEocHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignRXZlbnQucHJvbWlzZSgpIG11c3QgYmUgY2FsbGVkIHdpdGggYSBQcm9taXNlLicpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy4kLnByb21pc2VzLnB1c2gocHJvbWlzZSk7XHJcblx0XHR0aGlzLiQucHJvbWlzZXNJbnN0YW5jZSA9IG51bGw7XHJcblx0fVxyXG5cdFx0XHJcblx0LyoqXHJcblx0ICogKFJlYWRvbmx5KSByZXR1cm5zIGFsbCBwcm9taXNlcy5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gUHJvbWlzZXxudWxsXHJcblx0ICovXHJcblx0Z2V0IHByb21pc2VzKCkge1xyXG5cdFx0aWYgKCF0aGlzLiQucHJvbWlzZXNJbnN0YW5jZSAmJiB0aGlzLiQucHJvbWlzZXMubGVuZ3RoKSB7XHJcblx0XHRcdHRoaXMuJC5wcm9taXNlc0luc3RhbmNlID0gUHJvbWlzZS5hbGwodGhpcy4kLnByb21pc2VzKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLiQucHJvbWlzZXNJbnN0YW5jZTtcclxuXHR9XHJcblx0XHRcclxuXHQvKipcclxuXHQgKiBFdmFsdWF0ZXMgdGhlIGdpdmVuIGRpc3Bvc2l0aW9uIHZhbHVlIGFuZFxyXG5cdCAqIGNhbGxzIGFuIGFwcHJvcHJpYXRlIGRpc3Bvc2l0aW9uIG1ldGhvZC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbXMgbWl4ZWQgXHRyc3Buc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0cmVzcG9uc2UocnNwbnMpIHtcclxuXHRcdHZhciBwcm9tcztcclxuXHRcdHZhciBpc0V2ZW50ID0gX2lzT2JqZWN0KHJzcG5zKSAmJiAhX2lzVW5kZWZpbmVkKHJzcG5zLnByb3BhZ2F0aW9uU3RvcHBlZCkgJiYgIV9pc1VuZGVmaW5lZChyc3Bucy5kZWZhdWx0UHJldmVudGVkKVxyXG5cdFx0aWYgKChyc3BucyA9PT0gZmFsc2UpIHx8IChpc0V2ZW50ICYmIHJzcG5zLnByb3BhZ2F0aW9uU3RvcHBlZCkpIHtcclxuXHRcdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHRcdH0gZWxzZSBpZiAoKHJzcG5zID09PSBmYWxzZSkgfHwgKGlzRXZlbnQgJiYgcnNwbnMuZGVmYXVsdFByZXZlbnRlZCkpIHtcclxuXHRcdFx0dGhpcy5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0fSBlbHNlIGlmICgocnNwbnMgaW5zdGFuY2VvZiBQcm9taXNlICYmIChwcm9tcyA9IHJzcG5zKSlcclxuXHRcdHx8IChpc0V2ZW50ICYmIChwcm9tcyA9IHJzcG5zLnByb21pc2VzKSkpIHtcclxuXHRcdFx0dGhpcy5wcm9taXNlKHByb21zKTtcclxuXHRcdH1cclxuXHR9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV2ZW50IGZyb20gJy4vRXZlbnQuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgUXVlcnlFdmVudCBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIEV2ZW50IHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBJbml0aWFsaXplcyB0aGUgaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHRcdHRhcmdldFxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0XHRkZXRhaWxzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcih0YXJnZXQsIGRldGFpbHMgPSB7fSkge1xyXG5cdFx0c3VwZXIodGFyZ2V0LCBkZXRhaWxzKTtcclxuXHR9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcIm51bWJlclwiLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xyXG5cclxuLyoqXHJcbiAqIFRlbGxzIGlmIGFuIG9iamVjdCBpcyBkaXJlY3QgaW5zdGFuY2Ugb2YgT2JqZWN0LnByb3RvdHlwZS5cclxuICogUXVpdGUgdXNlZnVsIGluIGRpZmZlcmVudGlhdGluZyBuYXRpdmUgb2JqZWN0cyBhbmQgY2xhc3MgaW5zdGFuY2VzIGZyb20gcGxhaW4gb2JqZWN0cyAoe30pLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0IFx0b2JqXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqKSB7XHJcblx0cmV0dXJuIF9pc09iamVjdChvYmopICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBPYmplY3QucHJvdG90eXBlO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyB1bmRlZmluZWQgb3IgaXMgb2YgdHlwZSBcImJvb2xlYW5cIi5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiB2YWwgPT09IHRydWUgfHwgdmFsID09PSBmYWxzZTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc051bWJlciBmcm9tICcuLi9qcy9pc051bWJlci5qcyc7XHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICcuLi9qcy9pc09iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJy4uL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICcuLi9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9pc1BsYWluT2JqZWN0IGZyb20gJy4uL2pzL2lzUGxhaW5PYmplY3QuanMnO1xyXG5pbXBvcnQgX2NvbXBhcmVDYWxsYmFjayBmcm9tICcuL2NvbXBhcmVDYWxsYmFjay5qcyc7XHJcblxyXG4vKipcclxuICogQXNzZXJ0cyAobWVtYmVycyBvZikgdGhlIGZpcnN0IHZhbHVlIGFnYWluc3QgKG1lbWJlcnMgb2YpIHN1YnNlcXVlbnQgdmFsdWVzLlxyXG4gKiBBc3NlcnRpb24gY291bGQgYmUgVFJVRSwgRkFMU0UsIG9yIGN1c3RvbS5cclxuICpcclxuICogQHBhcmFtIG1peGVkIFx0XHRcdG9iajFcclxuICogQHBhcmFtIG1peGVkIFx0XHRcdG9iajJcclxuICogQHBhcmFtIGJvb2x8ZnVuY3Rpb25cdFx0YXNzZXJ0aW9uXHJcbiAqIEBwYXJhbSBpbnRcdFx0XHRcdGRlcHRoXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuY29uc3QgX2V2ZW4gPSBmdW5jdGlvbihvYmoxLCBvYmoyLCBhc3NlcnRpb24gPSB0cnVlLCBkZXB0aCA9IDEpIHtcclxuXHRpZiAoX2lzQXJyYXkob2JqMSkgJiYgX2lzQXJyYXkob2JqMikgJiYgb2JqMS5sZW5ndGggIT09IG9iajIubGVuZ3RoKSB7XHJcblx0XHRyZXR1cm4gIWFzc2VydGlvbjtcclxuXHR9XHJcblx0aWYgKF9pc09iamVjdChvYmoxKSAmJiBfaXNPYmplY3Qob2JqMikpIHtcclxuXHRcdHZhciBvYmoxS2V5cyA9IE9iamVjdC5rZXlzKG9iajEpO1xyXG5cdFx0dmFyIG9iajJLZXlzID0gT2JqZWN0LmtleXMob2JqMik7XHJcblx0XHRpZiAoIW9iajFLZXlzLmxlbmd0aCAmJiAhb2JqMktleXMubGVuZ3RoKSB7XHJcblx0XHRcdC8vIE9iamVjdHMgdGhhdCB3b24ndCBzaG93IGtleXMgbXVzdCBiZSBjb21wYXJlZCBieSBpbnN0YW5jZVxyXG5cdFx0XHQvLyBNYW55IG5hdGl2ZSBvYmplY3RzIHdvbid0LiBTbyB3ZSBjYW4ndCBqdWRnZSBieSBrZXlzIGFsb25lLlxyXG5cdFx0XHRyZXR1cm4gX2lzUGxhaW5PYmplY3Qob2JqMSkgJiYgX2lzUGxhaW5PYmplY3Qob2JqMikgXHJcblx0XHRcdFx0PyBhc3NlcnRpb25cclxuXHRcdFx0XHQ6IChvYmoxID09PSBvYmoyKSA9PT0gYXNzZXJ0aW9uO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCFfZXZlbihvYmoxS2V5cywgb2JqMktleXMpKSB7XHJcblx0XHRcdHJldHVybiAhYXNzZXJ0aW9uO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRpZiAoZGVwdGggPiAwICYmICgoX2lzQXJyYXkob2JqMSkgJiYgX2lzQXJyYXkob2JqMikpIHx8IChfaXNPYmplY3Qob2JqMSkgJiYgX2lzT2JqZWN0KG9iajIpKSkpIHtcclxuXHRcdHZhciByZXN1bHQgPSBfY29tcGFyZUNhbGxiYWNrKG9iajEsIG9iajIsICh2MSwgdjIpID0+IHtcclxuXHRcdFx0cmV0dXJuIF9ldmVuKHYxLCB2MiwgYXNzZXJ0aW9uLCBkZXB0aCAtIDEpO1xyXG5cdFx0fSwgZmFsc2UvKm5ldENvbXBhcmlzb24qLywgZmFsc2UvKmNvbnRyYXN0Ki8sIHRydWUvKnJldHVybk9uRmlyc3RGYWxzZSovKTtcclxuXHRcdHJldHVybiBfaXNBcnJheShyZXN1bHQpIFxyXG5cdFx0XHQ/IHJlc3VsdC5sZW5ndGggPT09IG9iajEubGVuZ3RoICYmIHJlc3VsdC5sZW5ndGggPT09IG9iajIubGVuZ3RoIFxyXG5cdFx0XHQ6IChfaXNPYmplY3QocmVzdWx0KSAmJiBfaXNPYmplY3Qob2JqMSkgXHJcblx0XHRcdFx0PyBPYmplY3Qua2V5cyhyZXN1bHQpLmxlbmd0aCA9PT0gT2JqZWN0LmtleXMob2JqMSkubGVuZ3RoICYmIE9iamVjdC5rZXlzKHJlc3VsdCkubGVuZ3RoID09PSAgT2JqZWN0LmtleXMob2JqMikubGVuZ3RoIFxyXG5cdFx0XHRcdDogcmVzdWx0KTtcclxuXHR9XHJcblx0cmV0dXJuIF9pc0Z1bmN0aW9uKGFzc2VydGlvbikgPyBhc3NlcnRpb24ob2JqMSwgb2JqMikgOiAoXHJcblx0XHRfaXNOdW1iZXIob2JqMSkgJiYgX2lzTnVtYmVyKG9iajIpICYmIGlzTmFOKG9iajEpICYmIGlzTmFOKG9iajIpIFxyXG5cdFx0XHQ/IGFzc2VydGlvbiBcclxuXHRcdFx0OiAob2JqMSA9PT0gb2JqMikgPT09IGFzc2VydGlvblxyXG5cdCk7XHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IF9ldmVuO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnLi4vanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuLi9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzQm9vbGVhbiBmcm9tICcuLi9qcy9pc0Jvb2xlYW4uanMnO1xyXG5pbXBvcnQgX2VhY2ggZnJvbSAnLi9lYWNoLmpzJztcclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBtYXRjaChlcykgYmV0d2VlbiAobWVtYmVycyBvZikgdHdvIHZhbHVlcztcclxuICogYXNzZXJ0aW9uIG9wdGlvbmFsbHkgY3VzdG9tLlxyXG4gKlxyXG4gKiBAcGFyYW0gbWl4ZWQgXHRcdFx0b2IxXHJcbiAqIEBwYXJhbSBtaXhlZCBcdFx0XHRvYmoyXHJcbiAqIEBwYXJhbSBzdHJpbmd8ZnVuY3Rpb25cdGFzc2VydGlvblxyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdFx0bmV0Q29tcGFyaXNvblxyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdFx0Y29udHJhc3RcclxuICogQHBhcmFtIGJvb2xcdFx0XHRcdHJldHVybk9uRmlyc3RGYWxzZVxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2x8YXJyYXl8b2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmoxLCBvYmoyLCBhc3NlcnRpb24gPSB0cnVlLCBuZXRDb21wYXJpc29uID0gdHJ1ZSwgY29udHJhc3QgPSBmYWxzZSwgcmV0dXJuT25GaXJzdEZhbHNlID0gZmFsc2UpIHtcclxuXHRpZiAoX2lzQXJyYXkob2JqMSkgJiYgX2lzQXJyYXkob2JqMikpIHtcclxuXHRcdHZhciByZXN1bHQgPSBbXTtcclxuXHRcdHZhciBjb250biA9IHRydWU7XHJcblx0XHRvYmoxLmZvckVhY2godjEgPT4ge1xyXG5cdFx0XHRpZiAoIWNvbnRuKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdHZhciB0ZXN0UGFzcyA9IGZhbHNlO1xyXG5cdFx0XHRfZWFjaChvYmoyLCAoaywgdjIpID0+IHtcclxuXHRcdFx0XHRpZiAoIXRlc3RQYXNzIHx8IChuZXRDb21wYXJpc29uICYmIF9pc1R5cGVPYmplY3QodjEpKSkge1xyXG5cdFx0XHRcdFx0dGVzdFBhc3MgPSBhc3NlcnRpb24odjEsIHYyKTtcclxuXHRcdFx0XHRcdGlmICgoX2lzQXJyYXkodGVzdFBhc3MpICYmICF0ZXN0UGFzcy5sZW5ndGgpIHx8IChfaXNPYmplY3QodGVzdFBhc3MpICYmICFPYmplY3Qua2V5cyh0ZXN0UGFzcykubGVuZ3RoKSkge1xyXG5cdFx0XHRcdFx0XHR0ZXN0UGFzcyA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKF9pc1R5cGVPYmplY3QodGVzdFBhc3MpICYmIG5ldENvbXBhcmlzb24pIHtcclxuXHRcdFx0XHRcdFx0Ly8gRnVydGhlciByZWN1cnNpb25zIHNob3VsZCB1c2UgdGhpcyB0ZXN0UGFzcyBhcyB2MVxyXG5cdFx0XHRcdFx0XHR2MSA9IHRlc3RQYXNzO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdGlmIChfaXNUeXBlT2JqZWN0KHRlc3RQYXNzKSkge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKG5ldENvbXBhcmlzb24gPyB0ZXN0UGFzcyA6IHYxKTtcclxuXHRcdFx0fSBlbHNlIGlmICghX2lzQm9vbGVhbih0ZXN0UGFzcykpIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaCh0ZXN0UGFzcyk7XHJcblx0XHRcdH0gZWxzZSBpZiAoKGNvbnRyYXN0ICYmICF0ZXN0UGFzcykgfHwgKCFjb250cmFzdCAmJiB0ZXN0UGFzcykpIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaCh2MSk7XHJcblx0XHRcdH0gZWxzZSBpZiAocmV0dXJuT25GaXJzdEZhbHNlKSB7XHJcblx0XHRcdFx0Y29udG4gPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHRcclxuXHRpZiAoX2lzT2JqZWN0KG9iajEpICYmIF9pc09iamVjdChvYmoyKSkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IHt9O1xyXG5cdFx0dmFyIGNvbnRuID0gdHJ1ZTtcclxuXHRcdE9iamVjdC5rZXlzKG9iajEpLmZvckVhY2goayA9PiB7XHJcblx0XHRcdGlmICghY29udG4pIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIHRlc3RQYXNzID0gYXNzZXJ0aW9uKG9iajFba10sIG9iajJba10pO1xyXG5cdFx0XHRpZiAoKF9pc0FycmF5KHRlc3RQYXNzKSAmJiAhdGVzdFBhc3MubGVuZ3RoKSB8fCAoX2lzT2JqZWN0KHRlc3RQYXNzKSAmJiAhT2JqZWN0LmtleXModGVzdFBhc3MpLmxlbmd0aCkpIHtcclxuXHRcdFx0XHR0ZXN0UGFzcyA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChfaXNUeXBlT2JqZWN0KHRlc3RQYXNzKSkge1xyXG5cdFx0XHRcdHJlc3VsdFtrXSA9IG5ldENvbXBhcmlzb24gPyB0ZXN0UGFzcyA6IG9iajFba107XHJcblx0XHRcdH0gZWxzZSBpZiAoIV9pc0Jvb2xlYW4odGVzdFBhc3MpKSB7XHJcblx0XHRcdFx0cmVzdWx0W2tdID0gdGVzdFBhc3M7XHJcblx0XHRcdH0gZWxzZSBpZiAoKGNvbnRyYXN0ICYmICF0ZXN0UGFzcykgfHwgKCFjb250cmFzdCAmJiB0ZXN0UGFzcykpIHtcclxuXHRcdFx0XHRyZXN1bHRba10gPSBvYmoxW2tdO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHJldHVybk9uRmlyc3RGYWxzZSkge1xyXG5cdFx0XHRcdGNvbnRuID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBpbnRlcnNlY3Rpb24gb2YgdHdvIGFycmF5cztcclxuICogb3B0aW9uYWxseSB1c2luZyBhIGN1c3RvbSBtYXRjaGluZyBmdW5jdGlvbi5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqIEBwYXJhbSBhcnJheVx0IFx0YXJyMlxyXG4gKiBAcGFyYW0gZnVuY3Rpb24gXHRjYWxsYmFja1xyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIGFycjIsIGNhbGxiYWNrID0gbnVsbCkge1xyXG5cdHJldHVybiAhX2lzQXJyYXkoYXJyMikgPyBbXSA6IGFyci5maWx0ZXIodmFsMSA9PiBjYWxsYmFjayBcclxuXHRcdD8gYXJyMi5maWx0ZXIodmFsMiA9PiBjYWxsYmFjayh2YWwxLCB2YWwyKSkubGVuZ3RoIFxyXG5cdFx0OiBhcnIyLmluZGV4T2YodmFsMSkgIT09IC0xXHJcblx0KTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIEZpcmVhYmxlIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBTZXRzIGEgXCJkaXNjb25uZWN0ZWRcIiBmbGFnIG9uIHRoZSBGaXJlYWJsZS5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGRpc2Nvbm5lY3QoKSB7XHJcblx0XHR0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XHJcblx0fVxyXG59OyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaW50ZXJzZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ludGVyc2VjdC5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IEZpcmVhYmxlIGZyb20gJy4vRmlyZWFibGUuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgRmlyZWJhc2UgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEluaXRpYWxpemVzIHRoZSBpbnN0YW5jZS5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0dGhpcy5maXJlYWJsZXMgPSBbXTtcclxuXHRcdHRoaXMuY3VycmVudGx5RmlyaW5nRXZlbnRzID0gW107XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEFkZHMgYW4gRmlyZWFibGUgaW5zdGFuY2VcclxuXHQgKiB3aXRoIG9wdGlvbmFsIHRhZ3MuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gRmlyZWFibGVcdFx0XHRmaXJlYWJsZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBGaXJlYWJsZVxyXG5cdCAqL1xyXG5cdGFkZEZpcmVhYmxlKGZpcmVhYmxlKSB7XHJcblx0XHR0aGlzLmZpcmVhYmxlcy5wdXNoKGZpcmVhYmxlKTtcclxuXHRcdHJldHVybiBmaXJlYWJsZTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogUmVtb3ZlcyBhbiBGaXJlYWJsZSBpbnN0YW5jZVxyXG5cdCAqIHdpdGggb3B0aW9uYWwgdGFncy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBGaXJlYWJsZVx0XHRcdGZpcmVhYmxlXHJcblx0ICogQHBhcmFtIGFycmF5XHRcdFx0XHR0YWdzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRyZW1vdmVGaXJlYWJsZShmaXJlYWJsZSwgdGFncyA9IFtdKSB7XHJcblx0XHR0aGlzLmZpcmVhYmxlcyA9IHRoaXMuZmlyZWFibGVzLmZpbHRlcihfZmlyZWFibGUgPT4gX2ZpcmVhYmxlICE9PSBmaXJlYWJsZSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEZpbmRzIHRoZSBPYnNlcnZlciBpbnN0YW5jZXNcclxuXHQgKiB3aXRoIHRoZSBnaXZlbiBxdWVyeSBwYXJhbWV0ZXJzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHRcdHF1ZXJ5XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGFycmF5XHJcblx0ICovXHJcblx0ZmluZEZpcmVhYmxlcyhxdWVyeSkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZmlyZWFibGVzLmZpbHRlcihvYnNlcnZlciA9PiB7XHJcblx0XHRcdHZhciBvYnNlcnZlclBhcmFtcyA9IG9ic2VydmVyLnBhcmFtcyB8fCB7fTtcclxuXHRcdFx0dmFyIG9ic2VydmVyVGFncyA9IG9ic2VydmVyUGFyYW1zLnRhZ3MgfHwgW107XHJcblx0XHRcdHZhciBxdWVyeVBhcmFtcyA9IHF1ZXJ5LnBhcmFtcyB8fCB7fTtcclxuXHRcdFx0dmFyIHF1ZXJ5VGFncyA9IHF1ZXJ5UGFyYW1zLnRhZ3MgfHwgW107XHJcblx0XHRcdHJldHVybiAoIXF1ZXJ5LmhhbmRsZXIgfHwgb2JzZXJ2ZXIuaGFuZGxlciA9PT0gcXVlcnkuaGFuZGxlcilcclxuXHRcdFx0XHQmJiAoIXF1ZXJ5UGFyYW1zLnR5cGUgfHwgb2JzZXJ2ZXJQYXJhbXMudHlwZSA9PT0gcXVlcnlQYXJhbXMudHlwZSlcclxuXHRcdFx0XHQmJiAoXHJcblx0XHRcdFx0XHQoIXF1ZXJ5VGFncy5sZW5ndGggJiYgIW9ic2VydmVyVGFncy5sZW5ndGgpIFxyXG5cdFx0XHRcdFx0fHwgX2ludGVyc2VjdChvYnNlcnZlclRhZ3MsIHF1ZXJ5VGFncykubGVuZ3RoID09PSBvYnNlcnZlclRhZ3MubGVuZ3RoXHJcblx0XHRcdFx0KTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBDcmVhdGUgYW4gb2JqZWN0J3MgZmlyZWJhc2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHRvYmplY3RcclxuXHQgKiBAcGFyYW0gc3RyaW5nXHRcdHR5cGVcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gRmlyZWJhc2VcclxuXHQgKi9cclxuXHRzdGF0aWMgY3JlYXRlRm9yVGFyZ2V0IChvYmplY3QsIHR5cGUsIEJhc2UpIHtcclxuXHRcdGlmIChvYmplY3QgJiYgX2lzVHlwZU9iamVjdChvYmplY3QpKSB7XHJcblx0XHRcdHZhciBmaXJlYmFzZXM7XHJcblx0XHRcdGlmICghKGZpcmViYXNlcyA9IG9iamVjdFtmaXJlYmFzZUtleV0pKSB7XHJcblx0XHRcdFx0ZmlyZWJhc2VzID0ge307XHJcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgZmlyZWJhc2VLZXksIHtcclxuXHRcdFx0XHRcdGdldDooKSA9PiBmaXJlYmFzZXMsXHJcblx0XHRcdFx0XHRzZXQ6dmFsdWUgPT4ge1xyXG5cdFx0XHRcdFx0XHRpZiAodmFsdWUgIT09IGZpcmViYXNlcykge1xyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignQXR0ZW1wdCB0byBvdmVyd3JpdGUgdGhlIFwiJyArIGZpcmViYXNlS2V5ICsgJ1wiIHNwZWNpYWwgcHJvcGVydHkhJyk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRlbnVtZXJhYmxlOmZhbHNlLFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdGZpcmViYXNlc1t0eXBlXSA9IHR5cGUgPT09ICdsaXN0ZW5lcnMnID8gbmV3IEJhc2Uob2JqZWN0KSA6IG5ldyBCYXNlO1xyXG5cdFx0XHRyZXR1cm4gZmlyZWJhc2VzW3R5cGVdO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBSZXR1cm5zIGFuIG9iamVjdCdzIGZpcmViYXNlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGFycmF5fG9iamVjdFx0b2JqZWN0XHJcblx0ICogQHBhcmFtIHN0cmluZ1x0XHR0eXBlXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIEZpcmViYXNlXHJcblx0ICovXHJcblx0c3RhdGljIGdldEZvclRhcmdldChvYmplY3QsIHR5cGUpIHtcclxuXHRcdHZhciBmaXJlYmFzZXM7XHJcblx0XHRpZiAob2JqZWN0ICYmIF9pc1R5cGVPYmplY3Qob2JqZWN0KSAmJiAoZmlyZWJhc2VzID0gb2JqZWN0W2ZpcmViYXNlS2V5XSkpIHtcclxuXHRcdFx0cmV0dXJuIGZpcmViYXNlc1t0eXBlXTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQHZhciBzdHJpbmdcclxuICovXHJcbmNvbnN0IGZpcmViYXNlS2V5ID0gJy5yZWZsZXgnO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCBRdWVyeUV2ZW50IGZyb20gJy4vUXVlcnlFdmVudC5qcyc7XHJcbmltcG9ydCBGaXJlYWJsZSBmcm9tICcuL0ZpcmVhYmxlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIFRyYXAgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBGaXJlYWJsZSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogSW5pdGlhbGl6ZXMgdGhlIGluc3RhbmNlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uXHRcdGhhbmRsZXJcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdHBhcmFtc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoaGFuZGxlciwgcGFyYW1zID0ge30pIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xyXG5cdFx0dGhpcy5wYXJhbXMgPSBwYXJhbXM7XHJcblxyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBDYWxscyB0aGUgb2JzZXJ2ZXIncyBoYW5kbGVyIGZ1bmN0aW9uXHJcblx0ICogb24gbWF0Y2hpbmcgd2l0aCB0aGUgZXZlbnQncyBmaWVsZHMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gTXV0YXRpb25FdmVudFx0XHRcdCBcdGV2dFxyXG5cdCAqIEBwYXJhbSBmdW5jdGlvblx0XHRcdFx0XHRuZXh0XHJcblx0ICogQHBhcmFtIG1peGVkXHRcdFx0XHRcdCBcdHJlY2lldmVkXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRmaXJlKGV2dCwgbmV4dCwgcmVjaWV2ZWQpIHtcclxuXHRcdGlmICh0aGlzLmRpc2Nvbm5lY3RlZCB8fCAodGhpcy5wYXJhbXMudHlwZSAmJiB0aGlzLnBhcmFtcy50eXBlICE9PSBldnQudHlwZSkpIHtcclxuXHRcdFx0cmV0dXJuIG5leHQoLi4uX2FyckZyb20oYXJndW1lbnRzKS5zbGljZSgyKSk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcy5oYW5kbGVyKGV2dCwgcmVjaWV2ZWQsIG5leHQpO1xyXG5cdH1cclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2V2ZW4gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZXZlbi5qcyc7XHJcbmltcG9ydCBRdWVyeUV2ZW50IGZyb20gJy4vUXVlcnlFdmVudC5qcyc7XHJcbmltcG9ydCBGaXJlYmFzZSBmcm9tICcuL0ZpcmViYXNlLmpzJztcclxuaW1wb3J0IFRyYXAgZnJvbSAnLi9UcmFwLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIFJlYWN0aXZlIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYXBCYXNlIGV4dGVuZHMgRmlyZWJhc2Uge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEZpcmVzIGFsbCBvYnNlcnZlcnMgd2l0aCB0aGUgZ2l2ZW4gZXZ0IChjaGFuZ2UpLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIEV2ZW50XHRcdFx0XHRldnRcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb25cdFx0XHRkZWZhdWx0SGFuZGxlclxyXG5cdCAqXHJcblx0ICogQHJldHVybiBtaXhlZFxyXG5cdCAqL1xyXG5cdGZpcmUoZXZ0LCBkZWZhdWx0SGFuZGxlciA9IG51bGwpIHtcclxuXHRcdGlmICh0aGlzLmN1cnJlbnRseUZpcmluZ0V2ZW50cy5maWx0ZXIoZSA9PiBlLnR5cGUgPT09IGV2dC50eXBlICYmIGUucXVlcnkgPT09IGV2dC5xdWVyeSkubGVuZ3RoKSB7XHJcblx0XHRcdHJldHVybiBkZWZhdWx0SGFuZGxlciA/IGRlZmF1bHRIYW5kbGVyKCkgOiB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0XHR0aGlzLmN1cnJlbnRseUZpcmluZ0V2ZW50cy5wdXNoKGV2dCk7XHJcblx0XHRjb25zdCBuZXh0ID0gKGluZGV4LCAuLi5fYXJncykgPT4ge1xyXG5cdFx0XHR2YXIgdHJhcCA9IHRoaXMuZmlyZWFibGVzW2luZGV4XTtcclxuXHRcdFx0aWYgKHRyYXApIHtcclxuXHRcdFx0XHRyZXR1cm4gdHJhcC5maXJlKGV2dCwgKC4uLmFyZ3MpID0+IHtcclxuXHRcdFx0XHRcdHJldHVybiBuZXh0KGluZGV4ICsgMSwgLi4uYXJncyk7XHJcblx0XHRcdFx0fS8qbmV4dCovLCAuLi5fYXJncyk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGRlZmF1bHRIYW5kbGVyID8gZGVmYXVsdEhhbmRsZXIoLi4uX2FyZ3MpIDogX2FyZ3NbMF07XHJcblx0XHR9O1xyXG5cdFx0dmFyIHZhbHVlID0gbmV4dCgwKTtcclxuXHRcdHRoaXMuY3VycmVudGx5RmlyaW5nRXZlbnRzLnBvcCgpO1xyXG5cdFx0cmV0dXJuIHZhbHVlO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBjcmVhdGVGb3JUYXJnZXQob2JqZWN0KSB7XHJcblx0XHRyZXR1cm4gc3VwZXIuY3JlYXRlRm9yVGFyZ2V0KG9iamVjdCwgJ3RyYXBzJywgVHJhcEJhc2UpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBnZXRGb3JUYXJnZXQob2JqZWN0KSB7XHJcblx0XHRyZXR1cm4gc3VwZXIuZ2V0Rm9yVGFyZ2V0KG9iamVjdCwgJ3RyYXBzJyk7XHJcblx0fVxyXG59OyIsIlxyXG4vKipcclxuICogQWRkcyBhbiBpdGVtIGlmIG5vdCBhbHJlYWR5IGV4aXN0LlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXkgXHRhcnJcclxuICogQHBhcmFtIGFycmF5XHQgXHQuLi5pdG1zXHJcbiAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFyciwgLi4uaXRlbXMpIHtcclxuXHRpdGVtcy5mb3JFYWNoKGl0bSA9PiB7XHJcblx0XHRpZiAoYXJyLmluZGV4T2YoaXRtKSA8IDApIHtcclxuXHRcdFx0YXJyLnB1c2goaXRtKTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHRyZXR1cm4gYXJyO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX3B1c2hVbmlxdWUgZnJvbSAnLi4vYXJyL3B1c2hVbmlxdWUuanMnO1xyXG5pbXBvcnQgX2dldFByb3RvdHlwZUNoYWluIGZyb20gJy4vZ2V0UHJvdG90eXBlQ2hhaW4uanMnO1xyXG5cclxuLyoqXHJcbiAqIEVhZ2VybHkgcmV0cmlldmVzIG9iamVjdCBtZW1iZXJzIGFsbCBkb3duIHRoZSBwcm90b3R5cGUgY2hhaW4uXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdG9ialxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHR1bnRpbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmosIHVudGlsKSB7XHJcblx0dmFyIGtleXNBbGwgPSBbXTtcclxuXHRfZ2V0UHJvdG90eXBlQ2hhaW4ob2JqLCB1bnRpbCkuZm9yRWFjaChvYmogPT4ge1xyXG5cdFx0X3B1c2hVbmlxdWUoa2V5c0FsbCwgLi4uT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKSk7XHJcblx0fSk7XHJcblx0cmV0dXJuIGtleXNBbGw7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBwcm90b3R5cGUgY2hhaW4uXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3QgXHRcdG9ialxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHR1bnRpbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iaiwgdW50aWwpIHtcclxuXHR1bnRpbCA9IHVudGlsIHx8IE9iamVjdC5wcm90b3R5cGU7XHJcblx0dW50aWwgPSB1bnRpbCAmJiAhX2lzQXJyYXkodW50aWwpID8gW3VudGlsXSA6IHVudGlsO1xyXG5cdC8vIFdlIGdldCB0aGUgY2hhaW4gb2YgaW5oZXJpdGFuY2VcclxuXHR2YXIgcHJvdG90eXBhbENoYWluID0gW107XHJcblx0dmFyIG9iaiA9IG9iajtcclxuXHR3aGlsZSgob2JqICYmICghdW50aWwgfHwgdW50aWwuaW5kZXhPZihvYmopIDwgMCkgJiYgb2JqLm5hbWUgIT09ICdkZWZhdWx0JykpIHtcclxuXHRcdHByb3RvdHlwYWxDaGFpbi5wdXNoKG9iaik7XHJcblx0XHRvYmogPSBvYmogPyBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA6IG51bGw7XHJcblx0fVxyXG5cdHJldHVybiBwcm90b3R5cGFsQ2hhaW47XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc0Z1bmN0aW9uIGZyb20gJy4uL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJy4uL2pzL2lzT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnLi4vanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc051bWVyaWMgZnJvbSAnLi4vanMvaXNOdW1lcmljLmpzJztcclxuaW1wb3J0IF9nZXRBbGxQcm9wZXJ0eU5hbWVzIGZyb20gJy4vZ2V0QWxsUHJvcGVydHlOYW1lcy5qcyc7XHJcblxyXG4vKipcclxuICAqIE1lcmdlcyB2YWx1ZXMgZnJvbSBzdWJzZXF1ZW50IGFycmF5cy9vYmplY3RzIGZpcnN0IGFycmF5L29iamVjdDtcclxuICAqIG9wdGlvbmFsbHkgcmVjdXJzaXZlXHJcbiAgKlxyXG4gICogQHBhcmFtIGFycmF5IC4uLm9ianNcclxuICAqXHJcbiAgKiBAcmV0dXJuIHZvaWRcclxuICAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZUNhbGxiYWNrKG9ianMsIGNhbGxiYWNrLCBkZWVwUHJvcHMgPSBmYWxzZSwgaXNSZXBsYWNlID0gZmFsc2UsIHdpdGhTeW1ib2xzID0gdHJ1ZSkge1xyXG5cdHZhciBkZXB0aCA9IDA7XHJcblx0dmFyIG9iajEgPSBvYmpzLnNoaWZ0KCk7XHJcblx0aWYgKF9pc051bWVyaWMob2JqMSkgfHwgb2JqMSA9PT0gdHJ1ZSB8fCBvYmoxID09PSBmYWxzZSkge1xyXG5cdFx0ZGVwdGggPSBvYmoxO1xyXG5cdFx0b2JqMSA9IG9ianMuc2hpZnQoKTtcclxuXHR9XHJcblx0aWYgKCFvYmpzLmxlbmd0aCkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdfbWVyZ2UoKSByZXF1aXJlcyB0d28gb3IgbW9yZSBhcnJheS9vYmplY3RzLicpO1xyXG5cdH1cclxuXHRvYmpzLmZvckVhY2goKG9iajIsIGkpID0+IHtcclxuXHRcdGlmICghX2lzVHlwZU9iamVjdChvYmoyKSAmJiAhX2lzRnVuY3Rpb24ob2JqMikpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0KGRlZXBQcm9wcyA/IF9nZXRBbGxQcm9wZXJ0eU5hbWVzKG9iajIpIDogT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqMikpLmZvckVhY2goa2V5ID0+IHtcclxuXHRcdFx0dmFyIHZhbEF0T2JqMSA9IG9iajFba2V5XTtcclxuXHRcdFx0dmFyIHZhbEF0T2JqMiA9IG9iajJba2V5XTtcclxuXHRcdFx0aWYgKCgoX2lzQXJyYXkodmFsQXRPYmoxKSAmJiBfaXNBcnJheSh2YWxBdE9iajIpKSB8fCAoX2lzT2JqZWN0KHZhbEF0T2JqMSkgJiYgX2lzT2JqZWN0KHZhbEF0T2JqMikpKSBcclxuXHRcdFx0JiYgKGRlcHRoID09PSB0cnVlIHx8IGRlcHRoID4gMCkpIHtcclxuXHRcdFx0XHQvLyBSRUNVUlNFLi4uXHJcblx0XHRcdFx0b2JqMVtrZXldID0gX2lzQXJyYXkodmFsQXRPYmoxKSAmJiBfaXNBcnJheSh2YWxBdE9iajIpID8gW10gOiB7fTtcclxuXHRcdFx0XHRtZXJnZUNhbGxiYWNrKFtfaXNOdW1lcmljKGRlcHRoKSA/IGRlcHRoIC0gMSA6IGRlcHRoLCBvYmoxW2tleV0sIHZhbEF0T2JqMSwgdmFsQXRPYmoyXSwgY2FsbGJhY2ssIGRlZXBQcm9wcywgaXNSZXBsYWNlLCB3aXRoU3ltYm9scyk7XHJcblx0XHRcdH0gZWxzZSBpZiAoY2FsbGJhY2soa2V5LCBvYmoxLCBvYmoyLCBpKSkge1xyXG5cdFx0XHRcdGlmIChfaXNBcnJheShvYmoxKSAmJiBfaXNBcnJheShvYmoyKSkge1xyXG5cdFx0XHRcdFx0aWYgKGlzUmVwbGFjZSkge1xyXG5cdFx0XHRcdFx0XHRvYmoxW2tleV0gPSB2YWxBdE9iajI7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRvYmoxLnB1c2godmFsQXRPYmoyKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Ly8gSW4gY2FzZSB3ZSdyZSBzZXR0aW5nIGEgcmVhZC1vbmx5IHByb3BlcnR5XHJcblx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHRpZiAod2l0aFN5bWJvbHMpIHtcclxuXHRcdFx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqMSwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iajIsIGtleSkpO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdG9iajFba2V5XSA9IG9iajJba2V5XTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSBjYXRjaChlKSB7fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSk7XHJcblx0cmV0dXJuIG9iajE7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc0Z1bmN0aW9uIGZyb20gJy4uL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICcuLi9qcy9pc051bWVyaWMuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuLi9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX21lcmdlQ2FsbGJhY2sgZnJvbSAnLi9tZXJnZUNhbGxiYWNrLmpzJztcclxuXHJcbi8qKlxyXG4gKiBDb3BpZXMgYW4gb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHRvYmpcclxuICogQHBhcmFtIGFycmF5XHRcdCBcdGZpbHRlclxyXG4gKlxyXG4gKiBAcmV0dXJuIG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqLCBmaWx0ZXIgPSBbXSwgd2l0aFN5bWJvbHMgPSB0cnVlKSB7XHJcblx0dmFyIGRlcHRoID0gMDtcclxuXHRpZiAoX2lzTnVtZXJpYyhhcmd1bWVudHNbMF0pICYmIF9pc1R5cGVPYmplY3QoYXJndW1lbnRzWzFdKSkge1xyXG5cdFx0ZGVwdGggPSBhcmd1bWVudHNbMF07XHJcblx0XHRvYmogPSBhcmd1bWVudHNbMV07XHJcblx0XHRmaWx0ZXIgPSBhcmd1bWVudHNbMl0gfHwgW107XHJcblx0fVxyXG5cdHJldHVybiBfbWVyZ2VDYWxsYmFjayhbZGVwdGgsIHt9LCBvYmpdLCAoa2V5LCBvYmoxLCBvYmoyKSA9PiB7XHJcblx0XHRyZXR1cm4gX2lzRnVuY3Rpb24oZmlsdGVyKSA/IGZpbHRlcihrZXkpIFxyXG5cdFx0XHQ6IChfaXNBcnJheShmaWx0ZXIpICYmIGZpbHRlci5sZW5ndGggPyBmaWx0ZXIuaW5kZXhPZihrZXkpID4gLTEgOiB0cnVlKTtcclxuXHR9LCBmYWxzZS8qZGVlcFByb3BzKi8sIGZhbHNlLyppc1JlcGxhY2UqLywgd2l0aFN5bWJvbHMpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX21lcmdlQ2FsbGJhY2sgZnJvbSAnLi9tZXJnZUNhbGxiYWNrLmpzJztcclxuXHJcbi8qKlxyXG4gICogTWVyZ2VzIHZhbHVlcyBmcm9tIHN1YnNlcXVlbnQgYXJyYXlzL29iamVjdHMgZmlyc3QgYXJyYXkvb2JqZWN0O1xyXG4gICogb3B0aW9uYWxseSByZWN1cnNpdmVcclxuICAqXHJcbiAgKiBAcGFyYW0gYXJyYXkgLi4ub2Jqc1xyXG4gICpcclxuICAqIEByZXR1cm4gdm9pZFxyXG4gICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKC4uLm9ianMpIHtcclxuXHRyZXR1cm4gX21lcmdlQ2FsbGJhY2sob2JqcywgKGssIG9iajEsIG9iajIpID0+IHtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0sIGZhbHNlLypkZWVwUHJvcHMqLywgZmFsc2UvKmlzUmVwbGFjZSovLCBmYWxzZS8qd2l0aFN5bWJvbHMqLyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogUmV0dXJucyBhIGxpc3Qgb2YgdW5pcXVlIGl0ZW1zLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXlcdCBcdFx0XHRcdGFyclxyXG4gKlx0ICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyKSB7XHJcblx0Y29uc3QgZGlzdGluY3QgPSAodmFsdWUsIGluZGV4LCBzZWxmKSA9PiB7XHJcblx0XHRyZXR1cm4gc2VsZi5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXg7XHJcblx0fTtcclxuXHRyZXR1cm4gYXJyLmZpbHRlcihkaXN0aW5jdCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfZXZlbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9ldmVuLmpzJztcclxuaW1wb3J0IEV2ZW50IGZyb20gJy4vRXZlbnQuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgTXV0YXRpb25FdmVudCBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIEV2ZW50IHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBJbml0aWFsaXplcyB0aGUgaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHRcdHRhcmdldFxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0XHRkZXRhaWxzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcih0YXJnZXQsIGRldGFpbHMgPSB7fSkge1xyXG5cdFx0aWYgKGRldGFpbHMuZGF0YSkge1xyXG5cdFx0XHRkZXRhaWxzLmZpZWxkcyA9IE9iamVjdC5rZXlzKGRldGFpbHMuZGF0YSk7XHJcblx0XHR9XHJcblx0XHRzdXBlcih0YXJnZXQsIGRldGFpbHMpO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdGlmICh0aGlzLnNyY0V2dCkge1xyXG5cdFx0XHR0aGlzLmRhdGFFdmVuID0gdGhpcy5zcmNFdnQuZGF0YUV2ZW47XHJcblx0XHRcdHRoaXMub3JpZ2luYXRpbmdUYXJnZXQgPSB0aGlzLnNyY0V2dC5vcmlnaW5hdGluZ1RhcmdldDtcclxuXHRcdFx0dGhpcy5vcmlnaW5hdGluZ1R5cGUgPSB0aGlzLnNyY0V2dC5vcmlnaW5hdGluZ1R5cGU7XHJcblx0XHRcdHRoaXMub3JpZ2luYXRpbmdGaWVsZHMgPSBbXTtcclxuXHRcdFx0dGhpcy5vcmlnaW5hdGluZ0RhdGEgPSB7fTtcclxuXHRcdFx0dGhpcy5fb3JpZ2luYXRpbmdEYXRhID0ge307XHJcblx0XHRcdHZhciBmaWVsZCA9IHRoaXMuZmllbGRzWzBdO1xyXG5cdFx0XHRPYmplY3Qua2V5cyh0aGlzLnNyY0V2dC5vcmlnaW5hdGluZ0RhdGEpLmZvckVhY2gocGF0aCA9PiB7XHJcblx0XHRcdFx0dmFyIF9wYXRoID0gZmllbGQgKyAnLicgKyBwYXRoO1xyXG5cdFx0XHRcdHRoaXMub3JpZ2luYXRpbmdGaWVsZHMucHVzaChfcGF0aCk7XHJcblx0XHRcdFx0dGhpcy5vcmlnaW5hdGluZ0RhdGFbX3BhdGhdID0gdGhpcy5zcmNFdnQub3JpZ2luYXRpbmdEYXRhW3BhdGhdO1xyXG5cdFx0XHRcdHRoaXMuX29yaWdpbmF0aW5nRGF0YVtfcGF0aF0gPSB0aGlzLnNyY0V2dC5fb3JpZ2luYXRpbmdEYXRhW3BhdGhdO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0dGhpcy5vcmlnaW5hdGluZ0NyZWF0ZWQgPSB0aGlzLnNyY0V2dC5vcmlnaW5hdGluZ0NyZWF0ZWQ7XHJcblx0XHRcdHRoaXMub3JpZ2luYXRpbmdEZWxldGVkID0gdGhpcy5zcmNFdnQub3JpZ2luYXRpbmdEZWxldGVkO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy5kYXRhRXZlbiA9IF9ldmVuKHRoaXMuZGF0YSwgdGhpcy5fZGF0YSk7XHJcblx0XHRcdHRoaXMub3JpZ2luYXRpbmdUYXJnZXQgPSB0aGlzLnRhcmdldDtcclxuXHRcdFx0dGhpcy5vcmlnaW5hdGluZ1R5cGUgPSB0aGlzLnR5cGU7XHJcblx0XHRcdHRoaXMub3JpZ2luYXRpbmdGaWVsZHMgPSB0aGlzLmZpZWxkcztcclxuXHRcdFx0dGhpcy5vcmlnaW5hdGluZ0RhdGEgPSB0aGlzLmRhdGE7XHJcblx0XHRcdHRoaXMuX29yaWdpbmF0aW5nRGF0YSA9IHRoaXMuX2RhdGE7XHJcblx0XHRcdHRoaXMub3JpZ2luYXRpbmdDcmVhdGVkID0gdGhpcy5jcmVhdGVkO1xyXG5cdFx0XHR0aGlzLm9yaWdpbmF0aW5nRGVsZXRlZCA9IHRoaXMuZGVsZXRlZDtcclxuXHRcdH1cclxuXHR9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBSZW1vdmVzIGluc3RhbmNlcyBvZiByZWZlcmVuY2UgdXAgdG8gPGxpbWl0PiB0aW1lcy5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqIEBwYXJhbSBtaXhlZFx0IFx0aXRtXHJcbiAqIEBwYXJhbSBpbnR8Ym9vbCBcdGxpbWl0XHJcbiAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFyciwgaXRtLCBsaW1pdCA9IGZhbHNlKSB7XHJcblx0dmFyIGkgPSBhcnIuaW5kZXhPZihpdG0pO1xyXG5cdHdoaWxlIChpID4gLTEgJiYgKGxpbWl0IHx8IGxpbWl0ID09PSBmYWxzZSkpIHtcclxuXHRcdGFyci5zcGxpY2UoaSwgMSk7XHJcblx0XHRpZiAobGltaXQgPiAwKSB7XHJcblx0XHRcdGxpbWl0IC0tO1xyXG5cdFx0fTtcclxuXHRcdGkgPSBhcnIuaW5kZXhPZihpdG0pO1xyXG5cdH07XHJcblx0cmV0dXJuIGFycjtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9ldmVuIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2V2ZW4uanMnO1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCBfaW50ZXJzZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ludGVyc2VjdC5qcyc7XHJcbmltcG9ydCBfY29uY2F0VW5pcXVlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2NvbmNhdFVuaXF1ZS5qcyc7XHJcbmltcG9ydCBfZXhjbHVkZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9leGNsdWRlLmpzJztcclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVW5kZWZpbmVkLmpzJztcclxuaW1wb3J0IF9pc051bGwgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bGwuanMnO1xyXG5pbXBvcnQgTXV0YXRpb25FdmVudCBmcm9tICcuL011dGF0aW9uRXZlbnQuanMnO1xyXG5pbXBvcnQgRmlyZWJhc2UgZnJvbSAnLi9GaXJlYmFzZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBSZWFjdGl2ZSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPYnNlcnZlckJhc2UgZXh0ZW5kcyBGaXJlYmFzZSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogRmluZHMgdGhlIE9ic2VydmVyIGluc3RhbmNlc1xyXG5cdCAqIHdpdGggdGhlIGdpdmVuIHF1ZXJ5IHBhcmFtZXRlcnMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdFx0cXVlcnlcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYXJyYXlcclxuXHQgKi9cclxuXHRmaW5kRmlyZWFibGVzKHF1ZXJ5KSB7XHJcblx0XHRyZXR1cm4gc3VwZXIuZmluZEZpcmVhYmxlcyhxdWVyeSkuZmlsdGVyKG9ic2VydmVyID0+IHtcclxuXHRcdFx0cmV0dXJuIF9pc051bGwocXVlcnkuZmllbGRzKSB8fCBfaXNVbmRlZmluZWQocXVlcnkuZmllbGRzKSB8fCBfZXZlbihfYXJyRnJvbShvYnNlcnZlci5maWVsZHMpLCBfYXJyRnJvbShxdWVyeS5maWVsZHMpKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBGaXJlcyBhbGwgb2JzZXJ2ZXJzIHdpdGggdGhlIGdpdmVuIGV2dCAoY2hhbmdlKS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBFdmVudFx0XHRcdFx0ZXZ0XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIEV2ZW50XHJcblx0ICovXHJcblx0ZmlyZShldnQpIHtcclxuXHRcdGlmICh0aGlzLmN1cnJlbnRseUZpcmluZ0V2ZW50cy5maWx0ZXIoZSA9PiBlLnR5cGUgPT09IGV2dC50eXBlICYmIGUuZmllbGRzID09PSBldnQuZmllbGRzKS5sZW5ndGgpIHtcclxuXHRcdFx0cmV0dXJuIGV2dDtcclxuXHRcdH1cclxuXHRcdHRoaXMuY3VycmVudGx5RmlyaW5nRXZlbnRzLnB1c2goZXZ0KTtcclxuXHRcdHRoaXMuZmlyZWFibGVzLmZvckVhY2gob2JzZXJ2ZXIgPT4ge1xyXG5cdFx0XHRpZiAoZXZ0LnByb3BhZ2F0aW9uU3RvcHBlZCB8fCAob2JzZXJ2ZXIucGFyYW1zLnR5cGUgJiYgb2JzZXJ2ZXIucGFyYW1zLnR5cGUgIT09IGV2dC50eXBlKSkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRvYnNlcnZlci5maXJlKGV2dCk7XHJcblx0XHR9KTtcclxuXHRcdHRoaXMuY3VycmVudGx5RmlyaW5nRXZlbnRzLnBvcCgpO1xyXG5cdFx0cmV0dXJuIGV2dDtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgY3JlYXRlRm9yVGFyZ2V0KG9iamVjdCkge1xyXG5cdFx0cmV0dXJuIHN1cGVyLmNyZWF0ZUZvclRhcmdldChvYmplY3QsICdvYnNlcnZlcnMnLCBPYnNlcnZlckJhc2UpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBnZXRGb3JUYXJnZXQob2JqZWN0KSB7XHJcblx0XHRyZXR1cm4gc3VwZXIuZ2V0Rm9yVGFyZ2V0KG9iamVjdCwgJ29ic2VydmVycycpO1xyXG5cdH1cclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzTnVsbCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVsbC5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1VuZGVmaW5lZC5qcyc7XHJcbmltcG9ydCBPYnNlcnZlckJhc2UgZnJvbSAnLi9pbnRlcm5hbC9PYnNlcnZlckJhc2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZXMgYW4gb2JzZXJ2ZXIgZnJvbSBhbiBvYmplY3QncyBmaXJlYmFzZS5cclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdFx0XHRcdFx0b2JqZWN0XHJcbiAqIEBwYXJhbSBzdHJpbmd8YXJyYXl8ZnVuY3Rpb25cdFx0ZmllbGRzXHJcbiAqIEBwYXJhbSBmdW5jdGlvblx0XHRcdFx0XHRvcmlnaW5hbENhbGxiYWNrXHJcbiAqIEBwYXJhbSBvYmplY3RcdFx0XHRcdFx0cGFyYW1zXHJcbiAqXHJcbiAqIEByZXR1cm4gdm9pZFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0LCBmaWVsZHMsIG9yaWdpbmFsQ2FsbGJhY2sgPSBudWxsLCBwYXJhbXMgPSB7fSkge1xyXG5cdGlmICghb2JqZWN0IHx8ICFfaXNUeXBlT2JqZWN0KG9iamVjdCkpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignT2JqZWN0IG11c3QgYmUgb2YgdHlwZSBvYmplY3QhJyk7XHJcblx0fVxyXG5cdGlmIChfaXNGdW5jdGlvbihmaWVsZHMpIHx8IF9pc051bGwoZmllbGRzKSB8fCBfaXNVbmRlZmluZWQoZmllbGRzKSkge1xyXG5cdFx0cGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBvcmlnaW5hbENhbGxiYWNrIDoge307XHJcblx0XHRvcmlnaW5hbENhbGxiYWNrID0gZmllbGRzO1xyXG5cdFx0ZmllbGRzID0gbnVsbDtcclxuXHR9XHJcblx0dmFyIGZpcmViYXNlO1xyXG5cdGlmIChmaXJlYmFzZSA9IE9ic2VydmVyQmFzZS5nZXRGb3JUYXJnZXQob2JqZWN0KSkge1xyXG5cdFx0ZmlyZWJhc2UuZmluZEZpcmVhYmxlcyh7aGFuZGxlcjpvcmlnaW5hbENhbGxiYWNrLCBmaWVsZHMsIHBhcmFtc30pLmZvckVhY2gob2JzZXJ2ZXIgPT4ge1xyXG5cdFx0XHRmaXJlYmFzZS5yZW1vdmVGaXJlYWJsZShvYnNlcnZlcik7XHJcblx0XHR9KTtcclxuXHR9XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IHVub2JzZXJ2ZSBmcm9tICcuL3Vub2JzZXJ2ZS5qcyc7XHJcblxyXG4vKipcclxuICogVW5idWJibGUgaGVscGVyXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdHRhcmdldFxyXG4gKiBAcGFyYW0gc3RyaW5nXHRcdGZpZWxkXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdG9iamVjdFxyXG4gKlxyXG4gKiBAcmV0dXJuIHZvaWRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldCwgZmllbGQsIG9iamVjdCkge1xyXG5cdHVub2JzZXJ2ZShvYmplY3QsIG51bGwsIHt0YWdzOlsnI2UtYnViYmxpbmcnLCBmaWVsZCwgdGFyZ2V0XX0pO1xyXG59XHJcbiIsIlxyXG4vKipcclxuICogUmV0dXJucyB0aGUgdmFsJ3MgdHlwZS5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHR5cGVvZiB2YWw7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogUmV0dXJuIHRoZSByZW1haW5kZXIgb2YgYSBzdHJpbmcgYWZ0ZXIgYSBnaXZlbiB2YWx1ZS5cclxuICpcclxuICogQHBhcmFtICBzdHJpbmcgIHN1YmplY3RcclxuICogQHBhcmFtICBzdHJpbmcgIHNlYXJjaFxyXG4gKiBAcGFyYW0gIGJvb2xcdCAgIGFmdGVyTGFzdFxyXG4gKlxyXG4gKiBAcmV0dXJuIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3ViamVjdCwgc2VhcmNoLCBhZnRlckxhc3QgPSBmYWxzZSkge1xyXG5cdGlmIChzZWFyY2ggPT0gJycpIHtcclxuXHRcdHJldHVybiBzdWJqZWN0O1xyXG5cdH1cclxuXHR2YXIgcG9zID0gYWZ0ZXJMYXN0ID8gc3ViamVjdC5sYXN0SW5kZXhPZihzZWFyY2gpIDogc3ViamVjdC5pbmRleE9mKHNlYXJjaCk7XHJcblx0aWYgKHBvcyA9PT0gLTEpIHtcclxuXHRcdHJldHVybiAnJztcclxuXHR9XHJcblx0cmV0dXJuIHN1YmplY3Quc3Vic3RyKHBvcyArIHNlYXJjaC5sZW5ndGgpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuLi9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJy4uL2pzL2lzVW5kZWZpbmVkLmpzJztcclxuaW1wb3J0IF9pc051bGwgZnJvbSAnLi4vanMvaXNOdWxsLmpzJztcclxuaW1wb3J0IF9hcnJGcm9tIGZyb20gJy4uL2Fyci9mcm9tLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXRyaWV2ZXMgdGhlIHZhbHVlIGF0IHRoZSBnaXZlbiBwYXRoLlxyXG4gKlxyXG4gKiBBIHJldHVybiB2YWx1ZSBvZiB1bmRlZmluZWQgaXMgYW1iaWd1b3VzLCBhbmQgY2FuIG1lYW4gZWl0aGVyIHRoYXQgdGhlXHJcbiAqIHBhdGggZG9lcyBub3QgZXhpc3QsIG9yIHRoYXQgdGhlIHBhdGggYWN0dWFsbHkgZXhpc3RzIGJ1dCB3aXRoIGEgdmFsdWUgb2YgdW5kZWZpbmVkLiBJZiBpdCBpcyByZXF1aXJlZCB0b1xyXG4gKiBrbm93IHdoZXRoZXIgdGhlIHBhdGggYWN0dWFsbHkgZXhpc3RzLCBwYXNzIGFuIG9iamVjdCBhcyBhIHRoaXJkIGFyZ3VtZW50LlxyXG4gKiBUaGlzIG9iamVjdCB3aWxsIGhhdmUgYW4gXCJleGlzdHNcIiBrZXkgc2V0IHRvIHRydWUvZmFsc2UuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3QgXHRcdFx0XHRjdHh0XHJcbiAqIEBwYXJhbSBhcnJheSBcdFx0XHRcdHBhdGhcclxuICogQHBhcmFtIG9iamVjdCBcdFx0XHRcdHRyYXBcclxuICogQHBhcmFtIG9iamVjdCBcdFx0XHRcdHJlY2lldmVyXHJcbiAqXHJcbiAqIEByZXR1cm4gbWl4ZWRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGN0eHQsIHBhdGgsIHRyYXAgPSB7fSwgcmVjaWV2ZXIgPSB7fSkge1xyXG5cdHBhdGggPSBfYXJyRnJvbShwYXRoKS5zbGljZSgpO1xyXG5cdHZhciBfY3R4dCA9IGN0eHQ7XHJcblx0d2hpbGUoIV9pc1VuZGVmaW5lZChfY3R4dCkgJiYgIV9pc051bGwoX2N0eHQpICYmIHBhdGgubGVuZ3RoKSB7XHJcblx0XHR2YXIgX2tleSA9IHBhdGguc2hpZnQoKTtcclxuXHRcdGlmICghKHRyYXAuZ2V0ID8gdHJhcC5nZXQoX2N0eHQsIF9rZXkpIDogKF9pc1R5cGVPYmplY3QoX2N0eHQpID8gX2tleSBpbiBfY3R4dCA6IF9jdHh0W19rZXldKSkpIHtcclxuXHRcdFx0cmVjaWV2ZXIuZXhpc3RzID0gZmFsc2U7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdF9jdHh0ID0gdHJhcC5nZXQgPyB0cmFwLmdldChfY3R4dCwgX2tleSkgOiBfY3R4dFtfa2V5XTtcclxuXHR9XHJcblx0cmVjaWV2ZXIuZXhpc3RzID0gdHJ1ZTtcclxuXHRyZXR1cm4gX2N0eHQ7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfY3Jvc3NKb2luIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Nyb3NzSm9pbi5qcyc7XHJcbmltcG9ydCBfcHVzaFVuaXF1ZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9wdXNoVW5pcXVlLmpzJztcclxuaW1wb3J0IF9hcnJGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Zyb20uanMnO1xyXG5pbXBvcnQgX3N0ckFmdGVyIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL2FmdGVyLmpzJztcclxuaW1wb3J0IF9pc1N0cmluZyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzU3RyaW5nLmpzJztcclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfY29tbW9uc0dldCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9nZXQuanMnO1xyXG5pbXBvcnQgRmlyZWFibGUgZnJvbSAnLi9GaXJlYWJsZS5qcyc7XHJcbmltcG9ydCBNdXRhdGlvbkV2ZW50IGZyb20gJy4vTXV0YXRpb25FdmVudC5qcyc7XHJcbmltcG9ydCByZWZsZXhHZXQgZnJvbSAnLi4vZ2V0LmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIE9ic2VydmVyIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgRmlyZWFibGUge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEluaXRpYWxpemVzIHRoZSBpbnN0YW5jZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBmdW5jdGlvblx0XHRoYW5kbGVyXHJcblx0ICogQHBhcmFtIHN0cmluZ3xhcnJheVx0ZmllbGRzXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHRwYXJhbXNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGhhbmRsZXIsIGZpZWxkcyA9IG51bGwsIHBhcmFtcyA9IHt9KSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcclxuXHRcdHRoaXMuZmllbGRzID0gZmllbGRzO1xyXG5cdFx0dGhpcy5wYXJhbXMgPSBwYXJhbXM7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0dGhpcy5maWVsZHNBcnJheSA9IF9hcnJGcm9tKHRoaXMuZmllbGRzKTtcclxuXHRcdHRoaXMuaXNEeW5hbWljRmllbGQgPSB0aGlzLmZpZWxkc0FycmF5LmZpbHRlcihcclxuXHRcdFx0ZmllbGQgPT4gZmllbGQuaW5kZXhPZignLi4nKSA+IC0xIHx8IGZpZWxkLnN0YXJ0c1dpdGgoJy4nKSB8fCBmaWVsZC5lbmRzV2l0aCgnLicpXHJcblx0XHQpLmxlbmd0aDtcclxuXHRcdGlmICh0aGlzLmlzRHluYW1pY0ZpZWxkICYmIHRoaXMuZmllbGRzQXJyYXkubGVuZ3RoID4gMSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ09ubHkgb25lIFwiRHluYW1pYyBGaWVsZFwiIG11c3QgYmUgb2JzZXJ2ZWQgYXQgYSB0aW1lISBcIicgKyB0aGlzLmZpZWxkc0FycmF5LmpvaW4oJywgJykgKyAnXCIgaGF2ZSBiZWVuIGJvdW5kIHRvZ2V0aGVyLicpO1xyXG5cdFx0fVxyXG5cclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQ2FsbHMgdGhlIG9ic2VydmVyJ3MgaGFuZGxlciBmdW5jdGlvblxyXG5cdCAqIG9uIG1hdGNoaW5nIHdpdGggdGhlIGV2ZW50J3MgZmllbGRzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIE11dGF0aW9uRXZlbnRcdFx0XHQgXHRldnRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGZpcmUoZXZ0KSB7XHJcblx0XHRpZiAodGhpcy5kaXNjb25uZWN0ZWQgfHwgKHRoaXMucGFyYW1zLnR5cGUgJiYgdGhpcy5wYXJhbXMudHlwZSAhPT0gZXZ0LnR5cGUpKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdGlmIChldnQuZGF0YUV2ZW4gJiYgdGhpcy5wYXJhbXMuZGlmZiAhPT0gZmFsc2UpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5maXJlQ2FsbGJhY2soZXZ0LCBmaWVsZHMgPT4ge1xyXG5cdFx0XHRpZiAoZmllbGRzKSB7XHJcblx0XHRcdFx0Ly8gQ2FsbCBsaXN0ZW5lci4uLlxyXG5cdFx0XHRcdHZhciBkYXRhID0gW107XHJcblx0XHRcdFx0dmFyIF9kYXRhID0gW107XHJcblx0XHRcdFx0aWYgKHRoaXMucGFyYW1zLmRhdGEgIT09IGZhbHNlKSB7XHJcblx0XHRcdFx0XHRmaWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XHJcblx0XHRcdFx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdFx0XHRcdC8vIFRoZSBORVcvT0xEIHZhbHVlcyBvZiB0aGUgY2hhbmdlIG9mIGZpZWxkIHdoaWNoIGNvdWxkIGJlIGEgcGF0aFxyXG5cdFx0XHRcdFx0XHR2YXIgZmllbGREYXRhID0gZXZ0Lm9yaWdpbmF0aW5nRmllbGRzLnJlZHVjZSgoZmllbGREYXRhLCBvcmlnaW5hdGluZ0ZpZWxkKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gU28gZmllbGQgaXMgdGhlIGV4YWN0IG9yaWdpbmF0aW5nRmllbGQgcGF0aD9cclxuXHRcdFx0XHRcdFx0XHR2YXIgdmFsdWUgPSBldnQub3JpZ2luYXRpbmdEYXRhW29yaWdpbmF0aW5nRmllbGRdO1xyXG5cdFx0XHRcdFx0XHRcdHZhciBfdmFsdWUgPSBldnQuX29yaWdpbmF0aW5nRGF0YVtvcmlnaW5hdGluZ0ZpZWxkXTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoIWZpZWxkRGF0YSAmJiBmaWVsZCA9PT0gb3JpZ2luYXRpbmdGaWVsZCkge1xyXG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIFt2YWx1ZSwgX3ZhbHVlXTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0Ly8gRmllbGQgbWF0Y2hlcywgYnV0IGlzIGRlZXBlciB0aGFuLCBvcmlnaW5hdGluZ0ZpZWxkIHBhdGg/XHJcblx0XHRcdFx0XHRcdFx0aWYgKCFmaWVsZERhdGEgJiYgKGZpZWxkICsgJy4nKS5zdGFydHNXaXRoKChvcmlnaW5hdGluZ0ZpZWxkICsgJy4nKSkpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHZhciBmaWVsZFF1ZXJ5ID0gX3N0ckFmdGVyKGZpZWxkLCBvcmlnaW5hdGluZ0ZpZWxkICsgJy4nKTtcclxuXHRcdFx0XHRcdFx0XHRcdHJldHVybiBbXHJcblx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vdGljZSB3ZSdyZSB1c2luZyBfY29tbW9uc0dldCB0byBkaWcgdGhlIHBhdGhcclxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gYnV0IHdpdGggcmVmbGV4R2V0IGFzIHRyYXAgZm9yIFwicmVhY3RpdmUgZ2V0dGluZ1wiXHJcblx0XHRcdFx0XHRcdFx0XHRcdF9jb21tb25zR2V0KHZhbHVlLCBmaWVsZFF1ZXJ5LnNwbGl0KCcuJyksIHtnZXQ6cmVmbGV4R2V0fSksXHJcblx0XHRcdFx0XHRcdFx0XHRcdF9jb21tb25zR2V0KF92YWx1ZSwgZmllbGRRdWVyeS5zcGxpdCgnLicpLCB7Z2V0OnJlZmxleEdldH0pXHJcblx0XHRcdFx0XHRcdFx0XHRdO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZmllbGREYXRhO1xyXG5cdFx0XHRcdFx0XHR9LCBudWxsKTtcclxuXHRcdFx0XHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0XHRcdFx0aWYgKGZpZWxkRGF0YSkge1xyXG5cdFx0XHRcdFx0XHRcdGRhdGEucHVzaChmaWVsZERhdGEuc2hpZnQoKSk7XHJcblx0XHRcdFx0XHRcdFx0X2RhdGEucHVzaChmaWVsZERhdGEuc2hpZnQoKSk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0dmFyIGN1cnJlbnRWYWx1ZSA9IF9jb21tb25zR2V0KGV2dC50YXJnZXQsIF9pc1N0cmluZyhmaWVsZCkgPyBmaWVsZC5zcGxpdCgnLicpIDogZmllbGQsIHtnZXQ6cmVmbGV4R2V0fSk7XHJcblx0XHRcdFx0XHRcdFx0ZGF0YS5wdXNoKGN1cnJlbnRWYWx1ZSk7XHJcblx0XHRcdFx0XHRcdFx0X2RhdGEucHVzaChjdXJyZW50VmFsdWUpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIF9pc0FycmF5KHRoaXMuZmllbGRzKSAvLyBOT1RFOndlJ3JlIGFza2luZyB0aGUgb3JpZ2luYWwgZm9ybWF0IVxyXG5cdFx0XHRcdFx0PyBldnQucmVzcG9uc2UodGhpcy5oYW5kbGVyKGRhdGEsIF9kYXRhLCBldnQpKVxyXG5cdFx0XHRcdFx0OiBldnQucmVzcG9uc2UodGhpcy5oYW5kbGVyKGRhdGFbMF0sIF9kYXRhWzBdLCBldnQpKTtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgZGF0YSA9IHt9O1xyXG5cdFx0XHR2YXIgX2RhdGEgPSB7fTtcclxuXHRcdFx0ZXZ0LmZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcclxuXHRcdFx0XHQvLyBSZW1lYmVyIHRoYXQgZXZ0Lm9yaWdpbmF0aW5nRGF0YSBtaWdodCBhY3R1YWxseSBiZSBidWJibGluZ1xyXG5cdFx0XHRcdC8vIGluIHdoaWNoIGNhc2Ugd2UgZG9uJ3QgZXhwZWN0IHRvIHNlZSBldmVudE5hbWUga2V5LlxyXG5cdFx0XHRcdHZhciBjdXJyZW50VmFsdWUgPSBmaWVsZCBpbiBldnQuZGF0YSBcclxuXHRcdFx0XHRcdD8gZXZ0LmRhdGFbZmllbGRdIFxyXG5cdFx0XHRcdFx0OiByZWZsZXhHZXQoZXZ0LnRhcmdldCwgZmllbGQpO1xyXG5cdFx0XHRcdHZhciBwcmV2VmFsdWUgPSBmaWVsZCBpbiBldnQuX2RhdGFcclxuXHRcdFx0XHRcdD8gZXZ0Ll9kYXRhW2ZpZWxkXSBcclxuXHRcdFx0XHRcdDogY3VycmVudFZhbHVlO1xyXG5cdFx0XHRcdGRhdGFbZmllbGRdID0gY3VycmVudFZhbHVlO1xyXG5cdFx0XHRcdF9kYXRhW2ZpZWxkXSA9IHByZXZWYWx1ZTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdC8vIENhbGwgbGlzdGVuZXIuLi5cclxuXHRcdFx0cmV0dXJuIGV2dC5yZXNwb25zZSh0aGlzLmhhbmRsZXIoZGF0YSwgX2RhdGEsIGV2dCkpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFZhbGlkYXRlcyBhIHByb3Bvc2VkIGZpcmUgb3BlcmF0aW9uLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIE11dGF0aW9uRXZlbnRcdFx0IFx0ZXZ0XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGJvb2xcclxuXHQgKi9cclxuXHRmaXJlQ2FsbGJhY2soZXZ0LCBjYWxsYmFjaykge1xyXG5cdFx0aWYgKHRoaXMuZmllbGRzQXJyYXkubGVuZ3RoKSB7XHJcblx0XHRcdHZhciBkeW5hbWljRmllbGRPdXRjb21lcyA9IFtdO1xyXG5cdFx0XHR2YXIgbWF0Y2hlcyA9IHRoaXMuZmllbGRzQXJyYXkuZmlsdGVyKChvYnNlcnZlZEZpZWxkLCBpKSA9PiB7XHJcblx0XHRcdFx0b2JzZXJ2ZWRGaWVsZCA9IF9pc1N0cmluZyhvYnNlcnZlZEZpZWxkKSBcclxuXHRcdFx0XHRcdD8gb2JzZXJ2ZWRGaWVsZC5yZXBsYWNlKC9gL2csICcnKVxyXG5cdFx0XHRcdFx0OiBvYnNlcnZlZEZpZWxkO1xyXG5cdFx0XHRcdGR5bmFtaWNGaWVsZE91dGNvbWVzW2ldID0gW107XHJcblx0XHRcdFx0Ly8gb25lIG9ic2VydmVkRmllbGQgY2FuIHR1cm4gb3V0IHRvIGJlIHR3byBpZiBkeW5hbWljXHJcblx0XHRcdFx0Ly8gYW5kIGV2dC5vcmlnaW5hdGluZ0ZpZWxkcyBpcyBtdWx0aXBsZVxyXG5cdFx0XHRcdHJldHVybiBldnQub3JpZ2luYXRpbmdGaWVsZHMuZmlsdGVyKGlucHV0T3JpZ2luYXRpbmdGaWVsZCA9PiB7XHJcblx0XHRcdFx0XHR2YXIgaW5wdXRPcmlnaW5hdGluZ0ZpZWxkU3BsaXQgPSBpbnB1dE9yaWdpbmF0aW5nRmllbGQuc3BsaXQoJy4nKTtcclxuXHRcdFx0XHRcdHZhciBvYnNlcnZlZER5bmFtaWNGaWVsZE91dGNvbWUgPSB0aGlzLmlzRHluYW1pY0ZpZWxkIFxyXG5cdFx0XHRcdFx0XHQ/IG9ic2VydmVkRmllbGQuc3BsaXQoJy4nKS5tYXAoKHNlZywgaykgPT4gc2VnIHx8IGlucHV0T3JpZ2luYXRpbmdGaWVsZFNwbGl0W2tdIHx8ICcnKS5qb2luKCcuJylcclxuXHRcdFx0XHRcdFx0OiBvYnNlcnZlZEZpZWxkO1xyXG5cdFx0XHRcdFx0X3B1c2hVbmlxdWUoZHluYW1pY0ZpZWxkT3V0Y29tZXNbaV0sIG9ic2VydmVkRHluYW1pY0ZpZWxkT3V0Y29tZSk7XHJcblx0XHRcdFx0XHRyZXR1cm4gKG9ic2VydmVkRHluYW1pY0ZpZWxkT3V0Y29tZSA9PT0gaW5wdXRPcmlnaW5hdGluZ0ZpZWxkICYmICFldnQuc3JjRXZ0XHJcblx0XHRcdFx0XHRcdHx8ICh0aGlzLnBhcmFtcy5vYnNlcnZlVXAgIT09IGZhbHNlICYmIChvYnNlcnZlZER5bmFtaWNGaWVsZE91dGNvbWUgKyAnLicpLnN0YXJ0c1dpdGgoaW5wdXRPcmlnaW5hdGluZ0ZpZWxkICsgJy4nKSlcclxuXHRcdFx0XHRcdFx0fHwgKHRoaXMucGFyYW1zLm9ic2VydmVEb3duICYmIChpbnB1dE9yaWdpbmF0aW5nRmllbGQgKyAnLicpLnN0YXJ0c1dpdGgob2JzZXJ2ZWREeW5hbWljRmllbGRPdXRjb21lICsgJy4nKSlcclxuXHRcdFx0XHRcdCkgJiYgKCF0aGlzLmlzRHluYW1pY0ZpZWxkIHx8ICFvYnNlcnZlZER5bmFtaWNGaWVsZE91dGNvbWUuc3BsaXQoJy4nKS5maWx0ZXIoc2VnID0+ICFzZWcpLmxlbmd0aCk7XHJcblx0XHRcdFx0fSkubGVuZ3RoO1xyXG5cdFx0XHR9KS5sZW5ndGg7XHJcblx0XHRcdGlmIChtYXRjaGVzKSB7XHJcblx0XHRcdFx0X2Nyb3NzSm9pbihkeW5hbWljRmllbGRPdXRjb21lcykuZm9yRWFjaChjYWxsYmFjayk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSBpZiAoIXRoaXMuZmllbGRzLyoqIGlmIHRoaXMuZmllbGRzQXJyYXkgaXMgZW1wdHkgYmVjYXVzZSB0aGlzLmZpZWxkcyBpcyBudWxsICovXHJcblx0XHRcdCYmICghZXZ0LnNyY0V2dCB8fCB0aGlzLnBhcmFtcy5vYnNlcnZlRG93bikpIHtcclxuXHRcdFx0Y2FsbGJhY2soKTtcclxuXHRcdH1cclxuXHR9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9hcnJGcm9tIGZyb20gJy4vZnJvbS5qcyc7XHJcblxyXG4vKipcclxuICogQWNjZXB0cyBhIGxpc3Qgb2YgY29sdW1uIGFuZCBqb2lucyB0aGVtIHRvIGEgdGFibGUuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheSBcdGFyclxyXG4gKlxyXG4gKiBAcmV0dXJuIG51bWJlclxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyKSB7XHJcblx0cmV0dXJuIGFyci5yZWR1Y2UoKGN1cnJUYWJsZSwgY29sdW1uKSA9PiB7XHJcblx0XHR2YXIgbmV3VGFibGUgPSBbXTtcclxuXHRcdGN1cnJUYWJsZS5mb3JFYWNoKHJvdyA9PiB7XHJcblx0XHRcdF9hcnJGcm9tKGNvbHVtbikuZm9yRWFjaChjb2x1bW4gPT4ge1xyXG5cdFx0XHRcdHZhciBfcm93ID0gcm93LnNsaWNlKCk7XHJcblx0XHRcdFx0X3Jvdy5wdXNoKGNvbHVtbik7XHJcblx0XHRcdFx0bmV3VGFibGUucHVzaChfcm93KTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiBuZXdUYWJsZTtcclxuXHR9LCBbW11dKTtcclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2dldFR5cGUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9nZXRUeXBlLmpzJztcclxuaW1wb3J0IE9ic2VydmVyQmFzZSBmcm9tICcuL2ludGVybmFsL09ic2VydmVyQmFzZS5qcyc7XHJcbmltcG9ydCBPYnNlcnZlciBmcm9tICcuL2ludGVybmFsL09ic2VydmVyLmpzJztcclxuXHJcbi8qKlxyXG4gKiBBZGRzIGFuIG9ic2VydmVyIHRvIGFuIG9iamVjdCdzIGZpcmViYXNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHRcdFx0XHRvYmplY3RcclxuICogQHBhcmFtIHN0cmluZ3xhcnJheXxmdW5jdGlvblx0XHRmaWVsZHNcclxuICogQHBhcmFtIGZ1bmN0aW9uXHRcdFx0XHRcdGNhbGxiYWNrXHJcbiAqIEBwYXJhbSBvYmplY3RcdFx0XHRcdFx0cGFyYW1zXHJcbiAqXHJcbiAqIEByZXR1cm4gT2JzZXJ2ZXJcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iamVjdCwgZmllbGRzLCBjYWxsYmFjayA9IG51bGwsIHBhcmFtcyA9IHt9KSB7XHJcblx0aWYgKCFvYmplY3QgfHwgIV9pc1R5cGVPYmplY3Qob2JqZWN0KSkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdPYmplY3QgbXVzdCBiZSBvZiB0eXBlIG9iamVjdCEnKTtcclxuXHR9XHJcblx0aWYgKF9pc0Z1bmN0aW9uKGZpZWxkcykpIHtcclxuXHRcdHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gY2FsbGJhY2sgOiB7fTtcclxuXHRcdGNhbGxiYWNrID0gZmllbGRzO1xyXG5cdFx0ZmllbGRzID0gbnVsbDtcclxuXHR9XHJcblx0aWYgKCFfaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignQ2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uOyBcIicgKyBfZ2V0VHlwZShjYWxsYmFjaykgKyAnXCIgZ2l2ZW4hJyk7XHJcblx0fVxyXG5cdHZhciBmaXJlYmFzZTtcclxuXHRpZiAoIShmaXJlYmFzZSA9IE9ic2VydmVyQmFzZS5nZXRGb3JUYXJnZXQob2JqZWN0KSkpIHtcclxuXHRcdGZpcmViYXNlID0gT2JzZXJ2ZXJCYXNlLmNyZWF0ZUZvclRhcmdldChvYmplY3QpO1xyXG5cdH1cclxuXHRyZXR1cm4gZmlyZWJhc2UuYWRkRmlyZWFibGUobmV3IE9ic2VydmVyKGNhbGxiYWNrLCBmaWVsZHMsIHBhcmFtcykpO1xyXG59XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfb2JqRnJvbSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9mcm9tLmpzJztcclxuaW1wb3J0IE11dGF0aW9uRXZlbnQgZnJvbSAnLi9pbnRlcm5hbC9NdXRhdGlvbkV2ZW50LmpzJztcclxuaW1wb3J0IE9ic2VydmVyQmFzZSBmcm9tICcuL2ludGVybmFsL09ic2VydmVyQmFzZS5qcyc7XHJcbmltcG9ydCBvYnNlcnZlIGZyb20gJy4vb2JzZXJ2ZS5qcyc7XHJcblxyXG4vKipcclxuICogQnViYmxlIGhlbHBlclxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHR0YXJnZXRcclxuICogQHBhcmFtIHN0cmluZ1x0XHRmaWVsZFxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHRvYmplY3RcclxuICpcclxuICogQHJldHVybiB2b2lkXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0YXJnZXQsIGZpZWxkLCBvYmplY3QpIHtcclxuXHR2YXIgZmlyZWJhc2U7XHJcblx0b2JzZXJ2ZShvYmplY3QsIChlbnRyaWVzLCBfZW50cmllcywgZSkgPT4ge1xyXG5cdFx0aWYgKGZpcmViYXNlID0gT2JzZXJ2ZXJCYXNlLmdldEZvclRhcmdldCh0YXJnZXQpKSB7XHJcblx0XHRcdHZhciBiYXNlID0gX29iakZyb20oZmllbGQsIG9iamVjdCk7XHJcblx0XHRcdHJldHVybiBmaXJlYmFzZS5maXJlKG5ldyBNdXRhdGlvbkV2ZW50KHRhcmdldCwge3R5cGU6ZS50eXBlLCBidWJibGluZzp0cnVlLCBkYXRhOmJhc2UsIF9kYXRhOmJhc2UsIHNyY0V2dDplfSkpO1xyXG5cdFx0fVxyXG5cdH0sIHtvYnNlcnZlRG93bjp0cnVlLCB0YWdzOlsnI2UtYnViYmxpbmcnLCBmaWVsZCwgdGFyZ2V0XX0pO1xyXG59XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfY29weSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9jb3B5LmpzJztcclxuaW1wb3J0IF9tZXJnZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9tZXJnZS5qcyc7XHJcbmltcG9ydCBfdW5pcXVlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3VuaXF1ZS5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBNdXRhdGlvbkV2ZW50IGZyb20gJy4vaW50ZXJuYWwvTXV0YXRpb25FdmVudC5qcyc7XHJcbmltcG9ydCBPYnNlcnZlckJhc2UgZnJvbSAnLi9pbnRlcm5hbC9PYnNlcnZlckJhc2UuanMnO1xyXG5pbXBvcnQgdW5saW5rIGZyb20gJy4vdW5saW5rLmpzJztcclxuaW1wb3J0IGxpbmsgZnJvbSAnLi9saW5rLmpzJztcclxuXHJcbi8qKlxyXG4gKiBFeGVjdXRlcyBhIGNhbGxiYWNrIGZ1bmN0aW9uIG9uIGEgdGFyZ2V0IGluIFwidHJhbnNhY3Rpb25cIiBtb2RlLlxyXG4gKiBGaXJlcyBhbnkgb2JzZXJ2ZXJzIHRoYXQgbWF5IGJlIGJvdW5kIHRvIHRhcmdldCBvbiByZWNvcmRlZCBjaGFuZ2VzLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXlcdFx0XHR0YXJnZXRzXHJcbiAqIEBwYXJhbSBmdW5jdGlvblx0XHRjYWxsYmFja1xyXG4gKiBAcGFyYW0gYXJyYXlcdFx0XHRrZXlzXHJcbiAqIEBwYXJhbSBib29sXHRcdFx0cmV0dXJuRXZlbnRcclxuICpcclxuICogQHJldHVybiBhcnJheXxFdmVudFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odGFyZ2V0cywgY2FsbGJhY2ssIGtleXMgPSBbXSwgcmV0dXJuRXZlbnQgPSBmYWxzZSkge1xyXG5cdHZhciBjb250ZXh0ID0gdGFyZ2V0cy5tYXAoKHRhcmdldCwgaSkgPT4ge1xyXG5cdFx0aWYgKCF0YXJnZXQgfHwgIV9pc1R5cGVPYmplY3QodGFyZ2V0KSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RhcmdldCBtdXN0IGJlIG9mIHR5cGUgb2JqZWN0IScpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHtcclxuXHRcdFx0dGFyZ2V0LFxyXG5cdFx0XHR0YXJnZXRDb3B5OiBfY29weSh0YXJnZXQsIGtleXMpLFxyXG5cdFx0XHRzZXREYXRhOiB7fSxcclxuXHRcdFx0X3NldERhdGE6IHt9LFxyXG5cdFx0XHRkZWxEYXRhOiB7fSwgXHJcblx0XHRcdF9kZWxEYXRhOiB7fSxcclxuXHRcdFx0Y3JlYXRlZDogW10sXHJcblx0XHRcdGRlbGV0ZWQ6IFtdLFxyXG5cdFx0fTtcclxuXHR9KTtcclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHR2YXIgcmVzdWx0ID0gY2FsbGJhY2soLi4udGFyZ2V0cyk7XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0Y29udGV4dC5tYXAoY250eHQgPT4ge1xyXG5cdFx0dmFyIGluaXRpYWxLZXlzID0gT2JqZWN0LmtleXMoY250eHQudGFyZ2V0Q29weSk7XHJcblx0XHR2YXIgY3VycmVudEtleXMgPSBPYmplY3Qua2V5cyhjbnR4dC50YXJnZXQpO1xyXG5cdFx0dmFyIGNoYW5nZWRLZXlzID0gX3VuaXF1ZShpbml0aWFsS2V5cy5jb25jYXQoY3VycmVudEtleXMpKS5maWx0ZXIoa2V5ID0+IHtcclxuXHRcdFx0aWYgKChrZXlzLmxlbmd0aCAmJiAha2V5cy5pbmNsdWRlcyhrZXkpKSBcclxuXHRcdFx0fHwgKF9pc0FycmF5KGNudHh0LnRhcmdldCkgJiYgKGtleSA9PT0gJ2xlbmd0aCcgfHwga2V5ID09PSAnLnJlZmxleCcpKSkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoIWN1cnJlbnRLZXlzLmluY2x1ZGVzKGtleSkpIHtcclxuXHRcdFx0XHRjbnR4dC5fZGVsRGF0YVtrZXldID0gY250eHQudGFyZ2V0Q29weVtrZXldO1xyXG5cdFx0XHRcdGNudHh0LmRlbERhdGFba2V5XSA9IHVuZGVmaW5lZDtcclxuXHRcdFx0XHRjbnR4dC5kZWxldGVkLnB1c2goa2V5KTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRjbnR4dC5fc2V0RGF0YVtrZXldID0gY250eHQudGFyZ2V0Q29weVtrZXldO1xyXG5cdFx0XHRcdGNudHh0LnNldERhdGFba2V5XSA9IGNudHh0LnRhcmdldFtrZXldO1xyXG5cdFx0XHRcdGlmICghaW5pdGlhbEtleXMuaW5jbHVkZXMoa2V5KSkge1xyXG5cdFx0XHRcdFx0Y250eHQuY3JlYXRlZC5wdXNoKGtleSk7XHJcblx0XHRcdFx0fSBcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoY250eHQudGFyZ2V0Q29weVtrZXldICE9PSBjbnR4dC50YXJnZXRba2V5XSkge1xyXG5cdFx0XHRcdC8vIFVub2JzZXJ2ZSBvdXRnb2luZyB2YWx1ZSBmb3IgYnViYmxpbmdcclxuXHRcdFx0XHRpZiAoY250eHQudGFyZ2V0Q29weVtrZXldICYmIF9pc1R5cGVPYmplY3QoY250eHQudGFyZ2V0Q29weVtrZXldKSkge1xyXG5cdFx0XHRcdFx0dW5saW5rKGNudHh0LnRhcmdldCwga2V5LCBjbnR4dC50YXJnZXRDb3B5W2tleV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQvLyBPYnNlcnZlIGluY29taW5nIHZhbHVlIGZvciBidWJibGluZ1xyXG5cdFx0XHRcdGlmIChjbnR4dC50YXJnZXRba2V5XSAmJiBfaXNUeXBlT2JqZWN0KGNudHh0LnRhcmdldFtrZXldKSkge1xyXG5cdFx0XHRcdFx0bGluayhjbnR4dC50YXJnZXQsIGtleSwgY250eHQudGFyZ2V0W2tleV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRkZWxldGUgY250eHQuc2V0RGF0YVtrZXldO1xyXG5cdFx0XHRkZWxldGUgY250eHQuX3NldERhdGFba2V5XTtcclxuXHRcdH0pO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHR2YXIgZXZ0LCBtdXRhdGlvbkJhc2U7XHJcblx0XHRpZiAoKG11dGF0aW9uQmFzZSA9IE9ic2VydmVyQmFzZS5nZXRGb3JUYXJnZXQoY250eHQudGFyZ2V0KSkgfHwgcmV0dXJuRXZlbnQpIHtcclxuXHRcdFx0ZXZ0ID0gbmV3IE11dGF0aW9uRXZlbnQoY250eHQudGFyZ2V0LCB7XHJcblx0XHRcdFx0dHlwZTondHJhbnNhY3Rpb24nLCBcclxuXHRcdFx0XHRkYXRhOl9tZXJnZShjbnR4dC5zZXREYXRhLCBjbnR4dC5kZWxEYXRhKSxcclxuXHRcdFx0XHRfZGF0YTpfbWVyZ2UoY250eHQuX3NldERhdGEsIGNudHh0Ll9kZWxEYXRhKSxcclxuXHRcdFx0XHRjcmVhdGVkOmNudHh0LmNyZWF0ZWQsXHJcblx0XHRcdFx0ZGVsZXRlZDpjbnR4dC5kZWxldGVkXHJcblx0XHRcdH0pO1xyXG5cdFx0XHRpZiAobXV0YXRpb25CYXNlKSB7XHJcblx0XHRcdFx0aWYgKE9iamVjdC5rZXlzKGNudHh0LmRlbERhdGEpLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0ZXZ0LnJlc3BvbnNlKG11dGF0aW9uQmFzZS5maXJlKFxyXG5cdFx0XHRcdFx0XHRuZXcgTXV0YXRpb25FdmVudChjbnR4dC50YXJnZXQsIHt0eXBlOidkZWwnLCBkYXRhOmNudHh0LmRlbERhdGEsIF9kYXRhOmNudHh0Ll9kZWxEYXRhLCBkZWxldGVkOmNudHh0LmRlbGV0ZWR9KVxyXG5cdFx0XHRcdFx0KSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmIChPYmplY3Qua2V5cyhjbnR4dC5zZXREYXRhKS5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdGV2dC5yZXNwb25zZShtdXRhdGlvbkJhc2UuZmlyZShcclxuXHRcdFx0XHRcdFx0bmV3IE11dGF0aW9uRXZlbnQoY250eHQudGFyZ2V0LCB7dHlwZTonc2V0JywgZGF0YTpjbnR4dC5zZXREYXRhLCBfZGF0YTpjbnR4dC5fc2V0RGF0YSwgY3JlYXRlZDpjbnR4dC5jcmVhdGVkfSlcclxuXHRcdFx0XHRcdCkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJldHVybkV2ZW50ID8gZXZ0IDogY2hhbmdlZEtleXM7XHJcblx0fSk7XHJcblx0cmV0dXJuIHJlc3VsdDtcclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX29iakZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZnJvbS5qcyc7XHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVtZXJpYy5qcyc7XHJcbmltcG9ydCBfaXNDbGFzcyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQ2xhc3MuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgUXVlcnlFdmVudCBmcm9tICcuL2ludGVybmFsL1F1ZXJ5RXZlbnQuanMnO1xyXG5pbXBvcnQgVHJhcEJhc2UgZnJvbSAnLi9pbnRlcm5hbC9UcmFwQmFzZS5qcyc7XHJcbmltcG9ydCB0cmFuc2FjdGlvbiBmcm9tICcuL3RyYW5zYWN0aW9uLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSdW5zIGEgXCJnZXRcIiBxdWVyeSBvcGVyYXRpb24gb24gYSB0YXJnZXQuXHJcbiAqIEZpcmVzIGFueSBzdWNoIHF1ZXJ5IG9ic2VydmVycyB0aGF0IG1heSBiZSBib3VuZCB0byB0YXJnZXQuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdHRhcmdldFxyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF5XHRrZXlzXHJcbiAqXHJcbiAqIEByZXR1cm4gbWl4ZWRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldCwga2V5cykge1xyXG5cdGlmICghdGFyZ2V0IHx8ICFfaXNUeXBlT2JqZWN0KHRhcmdldCkpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignVGFyZ2V0IG11c3QgYmUgb2YgdHlwZSBvYmplY3QhJyk7XHJcblx0fVxyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdC8vIEV4ZWN1dGUgYW55IFwiZ2V0XCIgdHJhcHMsIG90aGVyd2lzZSBcImdldFwiIHRoZSBkZWZhdWx0IHdheVxyXG5cdHZhciB2YWx1ZSwgdHJhcEJhc2UsIGRlZmF1bHRHZXQgPSBmdW5jdGlvbihfdmFsdWUpIHtcclxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gX3ZhbHVlIDogKF9pc0FycmF5KGtleXMpID8gX29iakZyb20oa2V5cywgdGFyZ2V0KSA6IHRhcmdldFtrZXlzXSk7XHJcblx0fTtcclxuXHRpZiAodHJhcEJhc2UgPSBUcmFwQmFzZS5nZXRGb3JUYXJnZXQodGFyZ2V0KSkge1xyXG5cdFx0dmFsdWUgPSB0cmFwQmFzZS5maXJlKG5ldyBRdWVyeUV2ZW50KHRhcmdldCwge3R5cGU6J2dldCcsIHF1ZXJ5OmtleXN9KSwgZGVmYXVsdEdldCk7XHJcblx0fSBlbHNlIHtcclxuXHRcdHZhbHVlID0gZGVmYXVsdEdldCgpO1xyXG5cdH1cclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHQvLyBFeGVjdXRlIGFycmF5IG1ldGhvZHMgaW4gXCJtdXRhdGlvblwiIG1vZGVcclxuXHRpZiAoX2lzQXJyYXkodGFyZ2V0KSAmJiAhX2lzTnVtZXJpYyhrZXlzKSAmJiBfaXNGdW5jdGlvbih2YWx1ZSkgJiYgIV9pc0NsYXNzKHZhbHVlKSkge1xyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJlZmxleEFycmF5TWV0aG9kV3JhcHBlciguLi5hcmdzKSB7XHJcblx0XHRcdHJldHVybiB0cmFuc2FjdGlvbihbdGFyZ2V0XSwgKCkgPT4ge1xyXG5cdFx0XHRcdHJldHVybiB2YWx1ZS5hcHBseSh0YXJnZXQsIGFyZ3MpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH07XHJcblx0fVxyXG5cdHJldHVybiB2YWx1ZTtcclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIEFMTCBpdGVtcyBwYXNzIHRoZSB0ZXN0LlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXkgXHRhcnJcclxuICogQHBhcmFtIGZ1bmN0aW9uIFx0Y2FsbGJhY2tcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIGNhbGxiYWNrKSB7XHJcblx0cmV0dXJuIGFyci5yZWR1Y2UoKHByZXZUZXN0LCBpdG0pID0+IHByZXZUZXN0ICYmIGNhbGxiYWNrKGl0bSksIHRydWUpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBRdWVyeUV2ZW50IGZyb20gJy4vaW50ZXJuYWwvUXVlcnlFdmVudC5qcyc7XHJcbmltcG9ydCBUcmFwQmFzZSBmcm9tICcuL2ludGVybmFsL1RyYXBCYXNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSdW5zIGFuIFwiaW5cIiBxdWVyeSBvcGVyYXRpb24gb24gYSB0YXJnZXQuXHJcbiAqIEZpcmVzIGFueSBzdWNoIHF1ZXJ5IG9ic2VydmVycyB0aGF0IG1heSBiZSBib3VuZCB0byB0YXJnZXQuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdHRhcmdldFxyXG4gKiBAcGFyYW0gc3RyaW5nXHRcdGtleVxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldCwga2V5KSB7XHJcblx0aWYgKCF0YXJnZXQgfHwgIV9pc1R5cGVPYmplY3QodGFyZ2V0KSkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdUYXJnZXQgbXVzdCBiZSBvZiB0eXBlIG9iamVjdCEnKTtcclxuXHR9XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0Ly8gRXhlY3V0ZSBhbnkgXCJoYXNcIiB0cmFwcywgb3RoZXJ3aXNlIFwidGVzdFwiIHRoZSBkZWZhdWx0IHdheVxyXG5cdHZhciB0cmFwQmFzZSwgZGVmYXVsdEhhcyA9IGZ1bmN0aW9uKF9zdGF0ZSkge1xyXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBfc3RhdGUgOiAoa2V5IGluIHRhcmdldCk7XHJcblx0fTtcclxuXHRpZiAodHJhcEJhc2UgPSBUcmFwQmFzZS5nZXRGb3JUYXJnZXQodGFyZ2V0KSkge1xyXG5cdFx0cmV0dXJuIHRyYXBCYXNlLmZpcmUobmV3IFF1ZXJ5RXZlbnQodGFyZ2V0LCB7dHlwZTonaGFzJywgcXVlcnk6a2V5fSksIGRlZmF1bHRIYXMpO1xyXG5cdH1cclxuXHRyZXR1cm4gZGVmYXVsdEhhcygpO1xyXG59XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfYXJyRnJvbSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mcm9tLmpzJztcclxuaW1wb3J0IF9hbGwgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvYWxsLmpzJztcclxuaW1wb3J0IF9pc1N0cmluZyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzU3RyaW5nLmpzJztcclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNOdW1iZXIgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bWJlci5qcyc7XHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc09iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IE11dGF0aW9uRXZlbnQgZnJvbSAnLi9pbnRlcm5hbC9NdXRhdGlvbkV2ZW50LmpzJztcclxuaW1wb3J0IFF1ZXJ5RXZlbnQgZnJvbSAnLi9pbnRlcm5hbC9RdWVyeUV2ZW50LmpzJztcclxuaW1wb3J0IE9ic2VydmVyQmFzZSBmcm9tICcuL2ludGVybmFsL09ic2VydmVyQmFzZS5qcyc7XHJcbmltcG9ydCBUcmFwQmFzZSBmcm9tICcuL2ludGVybmFsL1RyYXBCYXNlLmpzJztcclxuaW1wb3J0IHVubGluayBmcm9tICcuL3VubGluay5qcyc7XHJcbmltcG9ydCBsaW5rIGZyb20gJy4vbGluay5qcyc7XHJcbmltcG9ydCByZWZsZXhIYXMgZnJvbSAnLi9oYXMuanMnO1xyXG5cclxuLyoqXHJcbiAqIEV4ZWN1dGVzIGEgXCJfc2V0UHJvcFwiIHR5cGUgb2Ygb3BlcmF0aW9uIG9uIGEgdGFyZ2V0LlxyXG4gKiBGaXJlcyBhbnkgb2JzZXJ2ZXJzIGZvciB0aGUgc3BlY2lmaWMgdHlwZSB0aGF0IG1heSBiZSBib3VuZCB0byB0YXJnZXQuXHJcbiAqXHJcbiAqIEBwYXJhbSBib29sXHRcdFx0ZGVmaW5lXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdHRhcmdldFxyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF5XHRrZXlzT3JQYXlsb2FkXHJcbiAqIEBwYXJhbSBtaXhlZFx0XHRcdHZhbHVlXHJcbiAqIEBwYXJhbSBib29sXHRcdFx0cmV0dXJuRXZlbnRcclxuICpcclxuICogQHJldHVybiBib29sfEV2ZW50XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWZpbmUsIHRhcmdldCwga2V5c09yUGF5bG9hZCwgdmFsdWUgPSBudWxsLCByZXR1cm5FdmVudCA9IGZhbHNlKSB7XHJcblx0aWYgKCF0YXJnZXQgfHwgIV9pc1R5cGVPYmplY3QodGFyZ2V0KSkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdUYXJnZXQgbXVzdCBiZSBvZiB0eXBlIG9iamVjdCEnKTtcclxuXHR9XHJcblx0aWYgKF9pc09iamVjdChrZXlzT3JQYXlsb2FkKSkge1xyXG5cdFx0cmV0dXJuRXZlbnQgPSB2YWx1ZTtcclxuXHR9XHJcblx0dmFyIGtleXMgPSBrZXlzT3JQYXlsb2FkLCBfZGF0YSA9IHt9LCBkYXRhID0ge30sIGNyZWF0ZWQgPSBbXTtcclxuXHR2YXIgaGFuZGxlU2V0ID0gKGtleSwgdmFsdWUsIHJlbGF0ZWQpID0+IHtcclxuXHRcdF9kYXRhW2tleV0gPSB0YXJnZXRba2V5XTtcclxuXHRcdGlmICghcmVmbGV4SGFzKHRhcmdldCwga2V5KSkge1xyXG5cdFx0XHRjcmVhdGVkLnB1c2goa2V5KTtcclxuXHRcdH1cclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0dmFyIGRlc2NyaXB0b3I7XHJcblx0XHRpZiAoZGVmaW5lKSB7XHJcblx0XHRcdGRlc2NyaXB0b3IgPSB2YWx1ZSB8fCB7fTtcclxuXHRcdFx0dmFsdWUgPSBkZXNjcmlwdG9yLnZhbHVlO1xyXG5cdFx0fVxyXG5cdFx0Ly8gRXhlY3V0ZSBhbnkgXCJzZXRcIiB0cmFwcywgb3RoZXJ3aXNlIFwic2V0XCIgdGhlIGRlZmF1bHQgd2F5XHJcblx0XHR2YXIgc3VjY2VzcywgdHJhcEJhc2UsIGRlZmF1bHRTZXQgPSBmdW5jdGlvbihfc3VjY2Vzcykge1xyXG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcclxuXHRcdFx0XHRpZiAoZGVzY3JpcHRvcikge1xyXG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dGFyZ2V0W2tleV0gPSB2YWx1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIF9zdWNjZXNzO1xyXG5cdFx0fTtcclxuXHRcdGlmICh0cmFwQmFzZSA9IFRyYXBCYXNlLmdldEZvclRhcmdldCh0YXJnZXQpKSB7XHJcblx0XHRcdHZhciBkZXRhaWxzID0gZGVzY3JpcHRvciBcclxuXHRcdFx0XHQ/IHt0eXBlOidkZWYnLCBxdWVyeTprZXksIGRlc2NyaXB0b3IsIHJlbGF0ZWR9IFxyXG5cdFx0XHRcdDoge3R5cGU6J3NldCcsIHF1ZXJ5OmtleSwgdmFsdWUsIHJlbGF0ZWR9O1xyXG5cdFx0XHRzdWNjZXNzID0gdHJhcEJhc2UuZmlyZShuZXcgUXVlcnlFdmVudCh0YXJnZXQsIGRldGFpbHMpLCBkZWZhdWx0U2V0KTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHN1Y2Nlc3MgPSBkZWZhdWx0U2V0KCk7XHJcblx0XHR9XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdGlmIChzdWNjZXNzKSB7XHJcblx0XHRcdGRhdGFba2V5XSA9IHZhbHVlO1xyXG5cdFx0XHRpZiAoZGF0YVtrZXldICE9PSBfZGF0YVtrZXldKSB7XHJcblx0XHRcdFx0Ly8gVW5vYnNlcnZlIG91dGdvaW5nIHZhbHVlIGZvciBidWJibGluZ1xyXG5cdFx0XHRcdGlmIChfZGF0YVtrZXldICYmIF9pc1R5cGVPYmplY3QoX2RhdGFba2V5XSkpIHtcclxuXHRcdFx0XHRcdHVubGluayh0YXJnZXQsIGtleSwgX2RhdGFba2V5XSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdC8vIE9ic2VydmUgaW5jb21pbmcgdmFsdWUgZm9yIGJ1YmJsaW5nXHJcblx0XHRcdFx0aWYgKGRhdGFba2V5XSAmJiBfaXNUeXBlT2JqZWN0KGRhdGFba2V5XSkpIHtcclxuXHRcdFx0XHRcdGxpbmsodGFyZ2V0LCBrZXksIGRhdGFba2V5XSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGRlbGV0ZSBkYXRhW2tleV07XHJcblx0XHRcdFx0ZGVsZXRlIF9kYXRhW2tleV07XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGRlbGV0ZSBfZGF0YVtrZXldO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHN1Y2Nlc3M7XHJcblx0fTtcclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHR2YXIgc3VjY2Vzc1N0YXRlcyA9IFtdO1xyXG5cdGlmIChfaXNBcnJheShrZXlzKSB8fCAoKF9pc1N0cmluZyhrZXlzKSB8fCBfaXNOdW1iZXIoa2V5cykpICYmIChrZXlzID0gX2FyckZyb20oa2V5cykpKSkge1xyXG5cdFx0c3VjY2Vzc1N0YXRlcyA9IGtleXMubWFwKGtleSA9PiBoYW5kbGVTZXQoa2V5LCB2YWx1ZSwga2V5cykpXHJcblx0fSBlbHNlIGlmIChfaXNPYmplY3Qoa2V5c09yUGF5bG9hZCkpIHtcclxuXHRcdHZhciBwYXlsb2FkS2V5cyA9IE9iamVjdC5rZXlzKGtleXNPclBheWxvYWQpO1xyXG5cdFx0c3VjY2Vzc1N0YXRlcyA9IHBheWxvYWRLZXlzLm1hcChrZXkgPT4gaGFuZGxlU2V0KGtleSwga2V5c09yUGF5bG9hZFtrZXldLCBwYXlsb2FkS2V5cykpXHJcblx0fVxyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdHZhciBldnQsIG11dGF0aW9uQmFzZTtcclxuXHRpZiAoKG11dGF0aW9uQmFzZSA9IE9ic2VydmVyQmFzZS5nZXRGb3JUYXJnZXQodGFyZ2V0KSkgfHwgcmV0dXJuRXZlbnQpIHtcclxuXHRcdGV2dCA9IG5ldyBNdXRhdGlvbkV2ZW50KHRhcmdldCwge3R5cGU6J3NldCcsIGRhdGEsIF9kYXRhLCBjcmVhdGVkfSk7XHJcblx0XHRpZiAobXV0YXRpb25CYXNlKSB7XHJcblx0XHRcdG11dGF0aW9uQmFzZS5maXJlKGV2dCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiByZXR1cm5FdmVudCA/IGV2dCA6IF9hbGwoc3VjY2Vzc1N0YXRlcywgc3RhdGUgPT4gc3RhdGUpO1xyXG59XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfc2V0UHJvcCBmcm9tICcuL19zZXRQcm9wLmpzJztcclxuXHJcbi8qKlxyXG4gKiBFeGVjdXRlcyBhIFwic2V0XCIgb3BlcmF0aW9uIG9uIGEgdGFyZ2V0LlxyXG4gKiBGaXJlcyBhbnkgb2JzZXJ2ZXJzIHRoYXQgbWF5IGJlIGJvdW5kIHRvIHRhcmdldC5cclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdFx0dGFyZ2V0XHJcbiAqIEBwYXJhbSBzdHJpbmd8YXJyYXlcdGtleXNPclBheWxvYWRcclxuICogQHBhcmFtIG1peGVkXHRcdFx0dmFsdWVcclxuICogQHBhcmFtIGJvb2xcdFx0XHRyZXR1cm5FdmVudFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2x8RXZlbnRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldCwga2V5c09yUGF5bG9hZCwgdmFsdWUgPSBudWxsLCByZXR1cm5FdmVudCA9IGZhbHNlKSB7XHJcblx0cmV0dXJuIF9zZXRQcm9wKGZhbHNlLypkZWZpbmUqLywgLi4uYXJndW1lbnRzKTtcclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCByZWZsZXhHZXQgZnJvbSAnLi9nZXQuanMnO1xyXG5pbXBvcnQgcmVmbGV4U2V0IGZyb20gJy4vc2V0LmpzJztcclxuXHJcbi8qKlxyXG4gKiBJbml0aWFsaXplcyBcIlJlZmx4aXZlIGdldHRlci9zZXR0ZXJcIiB0cmFwcyBvbiB0aGUgdGFyZ2V0LlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHR0YXJnZXRcclxuICogQHBhcmFtIHN0cmluZ3xhcnJheVx0a2V5c1xyXG4gKlxyXG4gKiBAcmV0dXJuIHZvaWRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldCwga2V5cykge1xyXG5cdF9hcnJGcm9tKGtleXMpLmZvckVhY2goa2V5ID0+IHtcclxuXHRcdHZhciB2YWx1ZSA9IHRhcmdldFtrZXldLCBvbkdldEZpcmUsIG9uU2V0RmlyZTtcclxuXHRcdHZhciBjdXJyZW50RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpXHJcblx0XHR8fCB7ZW51bWVyYWJsZToga2V5IGluIHRhcmdldCA/IGZhbHNlLypleGlzdGluZyBidXQgaGlkZGVuKi8gOiB0cnVlfTtcclxuXHRcdGlmICgndmFsdWUnIGluIGN1cnJlbnREZXNjcmlwdG9yKSB7XHJcblx0XHRcdGRlbGV0ZSBjdXJyZW50RGVzY3JpcHRvci52YWx1ZTtcclxuXHRcdH1cclxuXHRcdGlmICgnd3JpdGFibGUnIGluIGN1cnJlbnREZXNjcmlwdG9yKSB7XHJcblx0XHRcdGRlbGV0ZSBjdXJyZW50RGVzY3JpcHRvci53cml0YWJsZTtcclxuXHRcdH1cclxuXHRcdGN1cnJlbnREZXNjcmlwdG9yLmdldCA9ICgpID0+IHtcclxuXHRcdFx0aWYgKG9uR2V0RmlyZSkge1xyXG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRvbkdldEZpcmUgPSB0cnVlO1xyXG5cdFx0XHR2YXIgX3ZhbHVlID0gcmVmbGV4R2V0KHRhcmdldCwga2V5KTtcclxuXHRcdFx0b25HZXRGaXJlID0gZmFsc2U7XHJcblx0XHRcdHJldHVybiBfdmFsdWU7XHJcblx0XHR9O1xyXG5cdFx0Y3VycmVudERlc2NyaXB0b3Iuc2V0ID0gbmV3VmFsdWUgPT4ge1xyXG5cdFx0XHRpZiAob25TZXRGaXJlKSB7XHJcblx0XHRcdFx0dmFsdWUgPSBuZXdWYWx1ZTtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRvblNldEZpcmUgPSB0cnVlO1xyXG5cdFx0XHR2YXIgcnNwbnMgPSByZWZsZXhTZXQodGFyZ2V0LCBrZXksIG5ld1ZhbHVlKTtcclxuXHRcdFx0b25TZXRGaXJlID0gZmFsc2U7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgY3VycmVudERlc2NyaXB0b3IpO1xyXG5cdH0pO1xyXG59XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IFF1ZXJ5RXZlbnQgZnJvbSAnLi9pbnRlcm5hbC9RdWVyeUV2ZW50LmpzJztcclxuaW1wb3J0IFRyYXBCYXNlIGZyb20gJy4vaW50ZXJuYWwvVHJhcEJhc2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIFJ1bnMgYSBcImdldFByb3BzXCIgdHlwZSBvZiBxdWVyeSBvcGVyYXRpb24gb24gYSB0YXJnZXQuXHJcbiAqIEZpcmVzIGFueSBvYnNlcnZlcnMgZm9yIHRoZSBzcGVjaWZpYyB0eXBlIHRoYXQgbWF5IGJlIGJvdW5kIHRvIHRhcmdldC5cclxuICpcclxuICogQHBhcmFtIGJvb2xcdFx0XHRvd25LZXlzXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdHRhcmdldFxyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvd25LZXlzLCB0YXJnZXQpIHtcclxuXHRpZiAoIXRhcmdldCB8fCAhX2lzVHlwZU9iamVjdCh0YXJnZXQpKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RhcmdldCBtdXN0IGJlIG9mIHR5cGUgb2JqZWN0IScpO1xyXG5cdH1cclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHQvLyBFeGVjdXRlIGFueSBcImtleXNcIiB0cmFwcywgb3RoZXJ3aXNlIFwidGVzdFwiIHRoZSBkZWZhdWx0IHdheVxyXG5cdHZhciB0cmFwQmFzZSwgZGVmYXVsdEtleXMgPSBmdW5jdGlvbihfa2V5cykge1xyXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBfa2V5cyA6IChcclxuXHRcdFx0b3duS2V5cyA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCkgOiBPYmplY3Qua2V5cyh0YXJnZXQpXHJcblx0XHQpO1xyXG5cdH07XHJcblx0aWYgKHRyYXBCYXNlID0gVHJhcEJhc2UuZ2V0Rm9yVGFyZ2V0KHRhcmdldCkpIHtcclxuXHRcdHJldHVybiB0cmFwQmFzZS5maXJlKG5ldyBRdWVyeUV2ZW50KHRhcmdldCwge3R5cGU6b3duS2V5cyA/ICdvd25LZXlzJyA6ICdrZXlzJ30pLCBkZWZhdWx0S2V5cyk7XHJcblx0fVxyXG5cdHJldHVybiBkZWZhdWx0S2V5cygpO1xyXG59XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfZ2V0UHJvcHMgZnJvbSAnLi9fZ2V0UHJvcHMuanMnO1xyXG5cclxuLyoqXHJcbiAqIFJ1bnMgYSBcImtleXNcIiBxdWVyeSBvcGVyYXRpb24gb24gYSB0YXJnZXQuXHJcbiAqIEZpcmVzIGFueSBzdWNoIHF1ZXJ5IG9ic2VydmVycyB0aGF0IG1heSBiZSBib3VuZCB0byB0YXJnZXQuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdHRhcmdldFxyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0YXJnZXQpIHtcclxuXHRyZXR1cm4gX2dldFByb3BzKGZhbHNlLypvd25LZXlzKi8sIC4uLmFyZ3VtZW50cyk7XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0Z1bmN0aW9uIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IF9nZXRUeXBlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvZ2V0VHlwZS5qcyc7XHJcbmltcG9ydCBUcmFwQmFzZSBmcm9tICcuL2ludGVybmFsL1RyYXBCYXNlLmpzJztcclxuaW1wb3J0IFRyYXAgZnJvbSAnLi9pbnRlcm5hbC9UcmFwLmpzJztcclxuXHJcbi8qKlxyXG4gKiBBZGRzIGEgdHJhcCB0byBhbiBvYmplY3QncyBmaXJlYmFzZS5cclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdFx0XHRcdFx0b2JqZWN0XHJcbiAqIEBwYXJhbSBmdW5jdGlvblx0XHRcdFx0XHRjYWxsYmFja1xyXG4gKiBAcGFyYW0gb2JqZWN0XHRcdFx0XHRcdHBhcmFtc1xyXG4gKlxyXG4gKiBAcmV0dXJuIFRyYXBcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iamVjdCwgY2FsbGJhY2ssIHBhcmFtcyA9IHt9KSB7XHJcblx0aWYgKCFvYmplY3QgfHwgIV9pc1R5cGVPYmplY3Qob2JqZWN0KSkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdPYmplY3QgbXVzdCBiZSBvZiB0eXBlIG9iamVjdCEnKTtcclxuXHR9XHJcblx0aWYgKCFfaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignQ2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uOyBcIicgKyBfZ2V0VHlwZShjYWxsYmFjaykgKyAnXCIgZ2l2ZW4hJyk7XHJcblx0fVxyXG5cdHZhciBmaXJlYmFzZTtcclxuXHRpZiAoIShmaXJlYmFzZSA9IFRyYXBCYXNlLmdldEZvclRhcmdldChvYmplY3QpKSkge1xyXG5cdFx0ZmlyZWJhc2UgPSBUcmFwQmFzZS5jcmVhdGVGb3JUYXJnZXQob2JqZWN0KTtcclxuXHR9XHJcblx0cmV0dXJuIGZpcmViYXNlLmFkZEZpcmVhYmxlKG5ldyBUcmFwKGNhbGxiYWNrLCBwYXJhbXMpKTtcclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX3NldFByb3AgZnJvbSAnLi9fc2V0UHJvcC5qcyc7XHJcblxyXG4vKipcclxuICogRXhlY3V0ZXMgYSBcInNldFwiIG9wZXJhdGlvbiBvbiBhIHRhcmdldC5cclxuICogRmlyZXMgYW55IG9ic2VydmVycyB0aGF0IG1heSBiZSBib3VuZCB0byB0YXJnZXQuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdHRhcmdldFxyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF5XHRrZXlzT3JQYXlsb2FkXHJcbiAqIEBwYXJhbSBtaXhlZFx0XHRcdHZhbHVlXHJcbiAqIEBwYXJhbSBib29sXHRcdFx0cmV0dXJuRXZlbnRcclxuICpcclxuICogQHJldHVybiBib29sfEV2ZW50XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0YXJnZXQsIGtleXNPclBheWxvYWQsIHZhbHVlID0gbnVsbCwgcmV0dXJuRXZlbnQgPSBmYWxzZSkge1xyXG5cdHJldHVybiBfc2V0UHJvcCh0cnVlLypkZWZpbmUqLywgLi4uYXJndW1lbnRzKTtcclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCBfYWxsIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2FsbC5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IE11dGF0aW9uRXZlbnQgZnJvbSAnLi9pbnRlcm5hbC9NdXRhdGlvbkV2ZW50LmpzJztcclxuaW1wb3J0IFF1ZXJ5RXZlbnQgZnJvbSAnLi9pbnRlcm5hbC9RdWVyeUV2ZW50LmpzJztcclxuaW1wb3J0IE9ic2VydmVyQmFzZSBmcm9tICcuL2ludGVybmFsL09ic2VydmVyQmFzZS5qcyc7XHJcbmltcG9ydCBUcmFwQmFzZSBmcm9tICcuL2ludGVybmFsL1RyYXBCYXNlLmpzJztcclxuaW1wb3J0IHVubGluayBmcm9tICcuL3VubGluay5qcyc7XHJcbmltcG9ydCByZWZsZXhIYXMgZnJvbSAnLi9oYXMuanMnO1xyXG5cclxuLyoqXHJcbiAqIEV4ZWN1dGVzIGEgXCJkZWxldGVcIiBvcGVyYXRpb24gb24gYSB0YXJnZXQuXHJcbiAqIEZpcmVzIGFueSBvYnNlcnZlcnMgdGhhdCBtYXkgYmUgYm91bmQgdG8gdGFyZ2V0LlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHR0YXJnZXRcclxuICogQHBhcmFtIHN0cmluZ3xhcnJheVx0a2V5c1xyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdHJldHVybkV2ZW50XHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbHxFdmVudFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odGFyZ2V0LCBrZXlzLCByZXR1cm5FdmVudCA9IGZhbHNlKSB7XHJcblx0aWYgKCF0YXJnZXQgfHwgIV9pc1R5cGVPYmplY3QodGFyZ2V0KSkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdUYXJnZXQgbXVzdCBiZSBvZiB0eXBlIG9iamVjdCEnKTtcclxuXHR9XHJcblx0dmFyIGtleXMgPSBfYXJyRnJvbShrZXlzKSwgX2RhdGEgPSB7fSwgZGF0YSA9IHt9LCBkZWxldGVkID0gW107XHJcblx0dmFyIHN1Y2Nlc3NTdGF0ZXMgPSBrZXlzLm1hcChrZXkgPT4ge1xyXG5cdFx0X2RhdGFba2V5XSA9IHRhcmdldFtrZXldO1xyXG5cdFx0aWYgKHJlZmxleEhhcyh0YXJnZXQsIGtleSkpIHtcclxuXHRcdFx0ZGVsZXRlZC5wdXNoKGtleSk7XHJcblx0XHR9XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdC8vIEV4ZWN1dGUgYW55IFwiZGVsXCIgdHJhcHMsIG90aGVyd2lzZSBcImRlbFwiIHRoZSBkZWZhdWx0IHdheVxyXG5cdFx0dmFyIHN1Y2Nlc3MsIHRyYXBCYXNlLCBkZWZhdWx0RGVsID0gZnVuY3Rpb24oX3N1Y2Nlc3MpIHtcclxuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XHJcblx0XHRcdFx0ZGVsZXRlIHRhcmdldFtrZXldO1xyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBfc3VjY2VzcztcclxuXHRcdH07XHJcblx0XHRpZiAodHJhcEJhc2UgPSBUcmFwQmFzZS5nZXRGb3JUYXJnZXQodGFyZ2V0KSkge1xyXG5cdFx0XHRzdWNjZXNzID0gdHJhcEJhc2UuZmlyZShuZXcgUXVlcnlFdmVudCh0YXJnZXQsIHt0eXBlOidkZWwnLCBxdWVyeTprZXksIHJlbGF0ZWQ6a2V5c30pLCBkZWZhdWx0RGVsKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHN1Y2Nlc3MgPSBkZWZhdWx0RGVsKCk7XHJcblx0XHR9XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdGlmIChzdWNjZXNzKSB7XHJcblx0XHRcdGRhdGFba2V5XSA9IHVuZGVmaW5lZDtcclxuXHRcdFx0Ly8gVW5vYnNlcnZlIG91dGdvaW5nIHZhbHVlIGZvciBidWJibGluZ1xyXG5cdFx0XHRpZiAoX2RhdGFba2V5XSAmJiBfaXNUeXBlT2JqZWN0KF9kYXRhW2tleV0pKSB7XHJcblx0XHRcdFx0dW5saW5rKHRhcmdldCwga2V5LCBfZGF0YVtrZXldKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHN1Y2Nlc3M7XHJcblx0fSk7XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0dmFyIGV2dCwgbXV0YXRpb25CYXNlO1xyXG5cdGlmICgobXV0YXRpb25CYXNlID0gT2JzZXJ2ZXJCYXNlLmdldEZvclRhcmdldCh0YXJnZXQpKSB8fCByZXR1cm5FdmVudCkge1xyXG5cdFx0ZXZ0ID0gbmV3IE11dGF0aW9uRXZlbnQodGFyZ2V0LCB7dHlwZTonZGVsJywgZGF0YSwgX2RhdGEsIGRlbGV0ZWR9KTtcclxuXHRcdGlmIChtdXRhdGlvbkJhc2UgJiYgT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoKSB7XHJcblx0XHRcdG11dGF0aW9uQmFzZS5maXJlKGV2dCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiByZXR1cm5FdmVudCA/IGV2dCA6IF9hbGwoc3VjY2Vzc1N0YXRlcywgc3RhdGUgPT4gc3RhdGUpO1xyXG59XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBGaXJlYmFzZSBmcm9tICcuL0ZpcmViYXNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIExpc3RlbmVyQmFzZSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlzdGVuZXJCYXNlIGV4dGVuZHMgRmlyZWJhc2Uge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEZpcmVzIGFsbCBvYnNlcnZlcnMgd2l0aCB0aGUgZ2l2ZW4gZXZ0IChjaGFuZ2UpLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIEV2ZW50XHRcdFx0XHRldnRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gRXZlbnRcclxuXHQgKi9cclxuXHRmaXJlKGV2dCkge1xyXG5cdFx0dGhpcy5maXJlYWJsZXMuZm9yRWFjaChsaXN0ZW5lciA9PiB7XHJcblx0XHRcdGlmIChldnQucHJvcGFnYXRpb25TdG9wcGVkKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdGxpc3RlbmVyLmZpcmUoZXZ0KTtcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIGV2dDtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgY3JlYXRlRm9yVGFyZ2V0KG9iamVjdCwgU3RhdGljID0gTGlzdGVuZXJCYXNlKSB7XHJcblx0XHRyZXR1cm4gc3VwZXIuY3JlYXRlRm9yVGFyZ2V0KG9iamVjdCwgJ2xpc3RlbmVycycsIFN0YXRpYyk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIGdldEZvclRhcmdldChvYmplY3QpIHtcclxuXHRcdHJldHVybiBzdXBlci5nZXRGb3JUYXJnZXQob2JqZWN0LCAnbGlzdGVuZXJzJyk7XHJcblx0fVxyXG59OyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBGaXJlYWJsZSBmcm9tICcuL0ZpcmVhYmxlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIExpc3RlbmVyIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIEZpcmVhYmxlIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBJbml0aWFsaXplcyB0aGUgaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb25cdFx0aGFuZGxlclxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0cGFyYW1zXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihoYW5kbGVyLCBwYXJhbXMgPSB7fSkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XHJcblx0XHR0aGlzLnBhcmFtcyA9IHBhcmFtcztcclxuXHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBDYWxscyB0aGUgb2JzZXJ2ZXIncyBoYW5kbGVyIGZ1bmN0aW9uXHJcblx0ICogb24gbWF0Y2hpbmcgd2l0aCB0aGUgZXZlbnQncyBmaWVsZHMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gTXV0YXRpb25FdmVudFx0XHRcdCBcdGV2dFxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0ZmlyZShldnQpIHtcclxuXHRcdGlmICh0aGlzLnBhcmFtcy50eXBlID09PSBldnQudHlwZSkge1xyXG5cdFx0XHRldnQucmVzcG9uc2UodGhpcy5oYW5kbGVyLmNhbGwodGhpcy50YXJnZXQsIGV2dC5lKSk7XHJcblx0XHR9XHJcblx0fVxyXG59OyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBidWlsZCBmcm9tICcuL2J1aWxkLmpzJztcclxuaW1wb3J0IG9ic2VydmUgZnJvbSAnLi9vYnNlcnZlLmpzJztcclxuaW1wb3J0IHVub2JzZXJ2ZSBmcm9tICcuL3Vub2JzZXJ2ZS5qcyc7XHJcbmltcG9ydCB0cmFwIGZyb20gJy4vdHJhcC5qcyc7XHJcbmltcG9ydCB1bnRyYXAgZnJvbSAnLi91bnRyYXAuanMnO1xyXG5pbXBvcnQgZGVmIGZyb20gJy4vZGVmLmpzJztcclxuaW1wb3J0IHNldCBmcm9tICcuL3NldC5qcyc7XHJcbmltcG9ydCBkZWwgZnJvbSAnLi9kZWwuanMnO1xyXG5pbXBvcnQgbGluayBmcm9tICcuL2xpbmsuanMnO1xyXG5pbXBvcnQgdW5saW5rIGZyb20gJy4vdW5saW5rLmpzJztcclxuaW1wb3J0IHRyYW5zYWN0aW9uIGZyb20gJy4vdHJhbnNhY3Rpb24uanMnO1xyXG5pbXBvcnQgZ2V0IGZyb20gJy4vZ2V0LmpzJztcclxuaW1wb3J0IGhhcyBmcm9tICcuL2hhcy5qcyc7XHJcbmltcG9ydCBpbml0IGZyb20gJy4vaW5pdC5qcyc7XHJcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XHJcbmltcG9ydCBvd25LZXlzIGZyb20gJy4vb3duS2V5cy5qcyc7XHJcbmltcG9ydCBvbiBmcm9tICcuL29uLmpzJztcclxuaW1wb3J0IG9mZiBmcm9tICcuL29mZi5qcyc7XHJcbmltcG9ydCB0cmlnZ2VyIGZyb20gJy4vdHJpZ2dlci5qcyc7XHJcbmltcG9ydCBNdXRhdGlvbkV2ZW50IGZyb20gJy4vaW50ZXJuYWwvTXV0YXRpb25FdmVudC5qcyc7XHJcbmltcG9ydCBRdWVyeUV2ZW50IGZyb20gJy4vaW50ZXJuYWwvUXVlcnlFdmVudC5qcyc7XHJcbmltcG9ydCBFdmVudCBmcm9tICcuL2ludGVybmFsL0V2ZW50LmpzJztcclxuXHJcbi8vIE5vdyB3ZSdsbCBtaW1pY2sgc3RhbmRhcmQgVHJhcCBwcm9wZXJ0aWVzXHJcbi8vIHNvIHRoYXQgY2FuIGJlIHVzZWQgYXMgc3RhbmRhcmQgVHJhcCBvdXQgb2YgdGhlIGJveC5cclxuY29uc3QgZGVsZXRlUHJvcGVydHkgPSBkZWw7XHJcbmNvbnN0IGRlZmluZVByb3BlcnR5ID0gZGVmO1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcblx0YnVpbGQsXHJcblx0b2JzZXJ2ZSxcclxuXHR1bm9ic2VydmUsXHJcblx0dHJhcCxcclxuXHR1bnRyYXAsXHJcblx0ZGVmLFxyXG5cdGRlZmluZVByb3BlcnR5LFxyXG5cdHNldCxcclxuXHRkZWwsXHJcblx0ZGVsZXRlUHJvcGVydHksXHJcblx0bGluayxcclxuXHR1bmxpbmssXHJcblx0dHJhbnNhY3Rpb24sXHJcblx0Z2V0LFxyXG5cdGhhcyxcclxuXHRpbml0LFxyXG5cdGtleXMsXHJcblx0b3duS2V5cyxcclxuXHRvbixcclxuXHRvZmYsXHJcblx0dHJpZ2dlcixcclxuXHQvLyBFdmVudHNcclxuXHRNdXRhdGlvbkV2ZW50LFxyXG5cdFF1ZXJ5RXZlbnQsXHJcblx0RXZlbnQsXHJcbn07IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgaW5pdCBmcm9tICcuL2luaXQuanMnO1xyXG5pbXBvcnQgcmVmbGV4S2V5cyBmcm9tICcuL2tleXMuanMnO1xyXG5pbXBvcnQgcmVmbGV4R2V0IGZyb20gJy4vZ2V0LmpzJztcclxuaW1wb3J0IGxpbmsgZnJvbSAnLi9saW5rLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZWN1cnNpdmVseSBcImNvbm5lY3RzXCIgYW4gb2JqZWN0J3MgbWVtYmVycyB0byB0aGUgb2JqZWN0XHJcbiAqIGZvciByZWZsZXggYWN0aW9ucy5cclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdFx0dGFyZ2V0XHJcbiAqIEBwYXJhbSBib29sXHRcdFx0X2luaXRcclxuICpcclxuICogQHJldHVybiB2b2lkXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZCh0YXJnZXQsIF9pbml0ID0gZmFsc2UpIHtcclxuXHRpZiAoIXRhcmdldCB8fCAhX2lzVHlwZU9iamVjdCh0YXJnZXQpKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RhcmdldCBtdXN0IGJlIG9mIHR5cGUgb2JqZWN0IScpO1xyXG5cdH1cclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHR2YXIga2V5cyA9IHJlZmxleEtleXModGFyZ2V0KTtcclxuXHRrZXlzLmZvckVhY2goa2V5ID0+IHtcclxuXHRcdHZhciB2YWx1ZSA9IHJlZmxleEdldCh0YXJnZXQsIGtleSk7XHJcblx0XHRpZiAoX2lzVHlwZU9iamVjdCh2YWx1ZSkgJiYgdmFsdWUpIHtcclxuXHRcdFx0bGluayh0YXJnZXQsIGtleSwgdmFsdWUpO1xyXG5cdFx0XHRidWlsZCh2YWx1ZSwgX2luaXQpO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG5cdGlmIChfaW5pdCkge1xyXG5cdFx0aW5pdCh0YXJnZXQsIGtleXMpO1xyXG5cdH1cclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBPYnNlcnZlckJhc2UgZnJvbSAnLi9pbnRlcm5hbC9PYnNlcnZlckJhc2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZXMgYSB0cmFwIGZyb20gYW4gb2JqZWN0J3MgZmlyZWJhc2UuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdFx0XHRcdG9iamVjdFxyXG4gKiBAcGFyYW0gZnVuY3Rpb25cdFx0XHRcdFx0b3JpZ2luYWxDYWxsYmFja1xyXG4gKiBAcGFyYW0gb2JqZWN0XHRcdFx0XHRcdHBhcmFtc1xyXG4gKlxyXG4gKiBAcmV0dXJuIHZvaWRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iamVjdCwgb3JpZ2luYWxDYWxsYmFjayA9IG51bGwsIHBhcmFtcyA9IHt9KSB7XHJcblx0aWYgKCFvYmplY3QgfHwgIV9pc1R5cGVPYmplY3Qob2JqZWN0KSkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdPYmplY3QgbXVzdCBiZSBvZiB0eXBlIG9iamVjdCEnKTtcclxuXHR9XHJcblx0dmFyIGZpcmViYXNlO1xyXG5cdGlmIChmaXJlYmFzZSA9IE9ic2VydmVyQmFzZS5nZXRGb3JUYXJnZXQob2JqZWN0KSkge1xyXG5cdFx0ZmlyZWJhc2UuZmluZEZpcmVhYmxlcyh7aGFuZGxlcjpvcmlnaW5hbENhbGxiYWNrLCBwYXJhbXN9KS5mb3JFYWNoKHRyYXAgPT4ge1xyXG5cdFx0XHRmaXJlYmFzZS5yZW1vdmVGaXJlYWJsZSh0cmFwKTtcclxuXHRcdH0pO1xyXG5cdH1cclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2dldFByb3BzIGZyb20gJy4vX2dldFByb3BzLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSdW5zIGEgXCJvd25LZXlzXCIgcXVlcnkgb3BlcmF0aW9uIG9uIGEgdGFyZ2V0LlxyXG4gKiBGaXJlcyBhbnkgc3VjaCBxdWVyeSBvYnNlcnZlcnMgdGhhdCBtYXkgYmUgYm91bmQgdG8gdGFyZ2V0LlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHR0YXJnZXRcclxuICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odGFyZ2V0KSB7XHJcblx0cmV0dXJuIF9nZXRQcm9wcyh0cnVlLypvd25LZXlzKi8sIC4uLmFyZ3VtZW50cyk7XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9tZXJnZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9tZXJnZS5qcyc7XHJcbmltcG9ydCBMaXN0ZW5lckJhc2UgZnJvbSAnLi9pbnRlcm5hbC9MaXN0ZW5lckJhc2UuanMnO1xyXG5pbXBvcnQgTGlzdGVuZXIgZnJvbSAnLi9pbnRlcm5hbC9MaXN0ZW5lci5qcyc7XHJcblxyXG4vKipcclxuICogQmluZHMgbGlzdGVuZXJzIHRvIGFuIGVsZW1lbnQncyBldmVudCBjb250cm9sbGVyLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0IFx0XHRcdFx0b2JqZWN0XHJcbiAqIEBwYXJhbSBzdHJpbmdcdFx0IFx0XHRcdHR5cGVcclxuICogQHBhcmFtIGZ1bmN0aW9uXHRcdCBcdFx0XHRjYWxsYmFja1xyXG4gKiBAcGFyYW0gb2JqZWN0XHRcdFx0XHRcdHBhcmFtc1xyXG4gKlxyXG4gKiBAcmV0dXJuIG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0LCB0eXBlLCBjYWxsYmFjaywgcGFyYW1zID0ge30pIHtcclxuXHR2YXIgZmlyZWJhc2U7XHJcblx0aWYgKCEoZmlyZWJhc2UgPSBMaXN0ZW5lckJhc2UuZ2V0Rm9yVGFyZ2V0KG9iamVjdCkpKSB7XHJcblx0XHRmaXJlYmFzZSA9IExpc3RlbmVyQmFzZS5jcmVhdGVGb3JUYXJnZXQob2JqZWN0KTtcclxuXHR9XHJcblx0cmV0dXJuIGZpcmViYXNlLmFkZEZpcmVhYmxlKG5ldyBMaXN0ZW5lcihjYWxsYmFjaywgX21lcmdlKHBhcmFtcywge3R5cGV9KSkpO1xyXG59OyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBMaXN0ZW5lckJhc2UgZnJvbSAnLi9pbnRlcm5hbC9MaXN0ZW5lckJhc2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIFVuYmluZHMgbGlzdGVuZXJzIGZyb20gYW4gZWxlbWVudCdzIGV2ZW50IGNvbnRyb2xsZXIuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3QgXHRcdFx0XHRvYmplY3RcclxuICogQHBhcmFtIHN0cmluZ1x0XHQgXHRcdFx0dHlwZVxyXG4gKiBAcGFyYW0gZnVuY3Rpb25cdFx0IFx0XHRcdG9yaWdpbmFsQ2FsbGJhY2tcclxuICogQHBhcmFtIG9iamVjdFx0XHRcdFx0XHRwYXJhbXNcclxuICpcclxuICogQHJldHVybiB2b2lkXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmplY3QsIHR5cGUsIG9yaWdpbmFsQ2FsbGJhY2sgPSBudWxsLCBwYXJhbXMgPSB7fSkge1xyXG5cdHZhciBmaXJlYmFzZTtcclxuXHRpZiAoZmlyZWJhc2UgPSBMaXN0ZW5lckJhc2UuZ2V0Rm9yVGFyZ2V0KG9iamVjdCkpIHtcclxuXHRcdGZpcmViYXNlLmZpbmRGaXJlYWJsZXMoe2hhbmRsZXI6b3JpZ2luYWxDYWxsYmFjaywgdHlwZSwgcGFyYW1zfSkuZm9yRWFjaChsaXN0ZW5lciA9PiB7XHJcblx0XHRcdGZpcmViYXNlLnJlbW92ZUZpcmVhYmxlKGxpc3RlbmVyKTtcclxuXHRcdH0pO1xyXG5cdH1cclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX21lcmdlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL21lcmdlLmpzJztcclxuaW1wb3J0IExpc3RlbmVyQmFzZSBmcm9tICcuL2ludGVybmFsL0xpc3RlbmVyQmFzZS5qcyc7XHJcbmltcG9ydCBFdmVudCBmcm9tICcuL2ludGVybmFsL0V2ZW50LmpzJztcclxuXHJcbi8qKlxyXG4gKiBGaXJlcyBhbiBldmVudCBvbiBhbiBvYmplY3QncyBsaXN0ZW5lckJhc2UuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3QgXHRcdFx0b2JqZWN0XHJcbiAqIEBwYXJhbSBzdHJpbmcgICAgICAgICAgICAgICAgdHlwZVxyXG4gKiBAcGFyYW0gb2JqZWN0ICAgICAgICAgICAgICAgIGRhdGFcclxuICpcclxuICogQHJldHVybiBFdmVudFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0LCB0eXBlLCBkYXRhID0ge30pIHtcclxuXHR2YXIgZmlyZWJhc2U7XHJcblx0aWYgKGZpcmViYXNlID0gTGlzdGVuZXJCYXNlLmdldEZvclRhcmdldChvYmplY3QpKSB7XHJcblx0XHRyZXR1cm4gZmlyZWJhc2UuZmlyZShuZXcgRXZlbnQob2JqZWN0LCBfbWVyZ2UoZGF0YSwge3R5cGV9KSkpO1xyXG5cdH1cclxufTsiLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwiYXJyYXlcIi5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcImZ1bmN0aW9uXCIuXHJcbiAqIFRoaXMgaG9sZHMgdHJ1ZSBmb3IgYm90aCByZWd1bGFyIGZ1bmN0aW9ucyBhbmQgY2xhc3Nlcy5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbic7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNUeXBlRnVuY3Rpb24gZnJvbSAnLi9pc1R5cGVGdW5jdGlvbi5qcyc7XHJcblxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJmdW5jdGlvblwiLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0IFx0XHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gX2lzVHlwZUZ1bmN0aW9uKHZhbCkgfHwgKHZhbCAmJiB7fS50b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IGZ1bmN0aW9uXScpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBwdXJlIG9iamVjdC5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuICFBcnJheS5pc0FycmF5KHZhbCkgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgJiYgdmFsO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVHlwZUZ1bmN0aW9uIGZyb20gJy4vaXNUeXBlRnVuY3Rpb24uanMnO1xyXG5cclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwib2JqZWN0XCIuXHJcbiAqIFRoaXMgaG9sZHMgdHJ1ZSBmb3IgYW55dGhpbmcgb2JqZWN0LCBpbmNsdWRpbmcgYnVpbHQtaW5zLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpIHx8ICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwpIHx8IF9pc1R5cGVGdW5jdGlvbih2YWwpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwic3RyaW5nXCIgb3IgYSBudW1lcmljIHN0cmluZy5cclxuICogVGhpcyBob2xkcyB0cnVlIGZvciBib3RoIG51bWJlcnMgYW5kIG51bWVyaWMgc3RyaW5ncy5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiB2YWwgIT09IHRydWUgJiYgdmFsICE9PSBmYWxzZSAmJiB2YWwgIT09IG51bGwgJiYgdmFsICE9PSAnJyAmJiAhaXNOYU4odmFsICogMSk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfcHVzaFVuaXF1ZSBmcm9tICcuLi9hcnIvcHVzaFVuaXF1ZS5qcyc7XHJcbmltcG9ydCBfZ2V0UHJvdG90eXBlQ2hhaW4gZnJvbSAnLi9nZXRQcm90b3R5cGVDaGFpbi5qcyc7XHJcblxyXG4vKipcclxuICogRWFnZXJseSByZXRyaWV2ZXMgb2JqZWN0IG1lbWJlcnMgYWxsIGRvd24gdGhlIHByb3RvdHlwZSBjaGFpbi5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0b2JqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHVudGlsXHJcbiAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iaiwgdW50aWwpIHtcclxuXHR2YXIga2V5c0FsbCA9IFtdO1xyXG5cdF9nZXRQcm90b3R5cGVDaGFpbihvYmosIHVudGlsKS5mb3JFYWNoKG9iaiA9PiB7XHJcblx0XHRfcHVzaFVuaXF1ZShrZXlzQWxsLCAuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopKTtcclxuXHR9KTtcclxuXHRyZXR1cm4ga2V5c0FsbDtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHByb3RvdHlwZSBjaGFpbi5cclxuICpcclxuICogQHBhcmFtIG9iamVjdCBcdFx0b2JqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHVudGlsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqLCB1bnRpbCkge1xyXG5cdHVudGlsID0gdW50aWwgfHwgT2JqZWN0LnByb3RvdHlwZTtcclxuXHR1bnRpbCA9IHVudGlsICYmICFfaXNBcnJheSh1bnRpbCkgPyBbdW50aWxdIDogdW50aWw7XHJcblx0Ly8gV2UgZ2V0IHRoZSBjaGFpbiBvZiBpbmhlcml0YW5jZVxyXG5cdHZhciBwcm90b3R5cGFsQ2hhaW4gPSBbXTtcclxuXHR2YXIgb2JqID0gb2JqO1xyXG5cdHdoaWxlKChvYmogJiYgKCF1bnRpbCB8fCB1bnRpbC5pbmRleE9mKG9iaikgPCAwKSAmJiBvYmoubmFtZSAhPT0gJ2RlZmF1bHQnKSkge1xyXG5cdFx0cHJvdG90eXBhbENoYWluLnB1c2gob2JqKTtcclxuXHRcdG9iaiA9IG9iaiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopIDogbnVsbDtcclxuXHR9XHJcblx0cmV0dXJuIHByb3RvdHlwYWxDaGFpbjtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBBZGRzIGFuIGl0ZW0gaWYgbm90IGFscmVhZHkgZXhpc3QuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheSBcdGFyclxyXG4gKiBAcGFyYW0gYXJyYXlcdCBcdC4uLml0bXNcclxuICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyLCAuLi5pdGVtcykge1xyXG5cdGl0ZW1zLmZvckVhY2goaXRtID0+IHtcclxuXHRcdGlmIChhcnIuaW5kZXhPZihpdG0pIDwgMCkge1xyXG5cdFx0XHRhcnIucHVzaChpdG0pO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG5cdHJldHVybiBhcnI7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc0Z1bmN0aW9uIGZyb20gJy4uL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJy4uL2pzL2lzT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnLi4vanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc051bWVyaWMgZnJvbSAnLi4vanMvaXNOdW1lcmljLmpzJztcclxuaW1wb3J0IF9nZXRBbGxQcm9wZXJ0eU5hbWVzIGZyb20gJy4vZ2V0QWxsUHJvcGVydHlOYW1lcy5qcyc7XHJcblxyXG4vKipcclxuICAqIE1lcmdlcyB2YWx1ZXMgZnJvbSBzdWJzZXF1ZW50IGFycmF5cy9vYmplY3RzIGZpcnN0IGFycmF5L29iamVjdDtcclxuICAqIG9wdGlvbmFsbHkgcmVjdXJzaXZlXHJcbiAgKlxyXG4gICogQHBhcmFtIGFycmF5IC4uLm9ianNcclxuICAqXHJcbiAgKiBAcmV0dXJuIHZvaWRcclxuICAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZUNhbGxiYWNrKG9ianMsIGNhbGxiYWNrLCBkZWVwUHJvcHMgPSBmYWxzZSwgaXNSZXBsYWNlID0gZmFsc2UsIHdpdGhTeW1ib2xzID0gdHJ1ZSkge1xyXG5cdHZhciBkZXB0aCA9IDA7XHJcblx0dmFyIG9iajEgPSBvYmpzLnNoaWZ0KCk7XHJcblx0aWYgKF9pc051bWVyaWMob2JqMSkgfHwgb2JqMSA9PT0gdHJ1ZSB8fCBvYmoxID09PSBmYWxzZSkge1xyXG5cdFx0ZGVwdGggPSBvYmoxO1xyXG5cdFx0b2JqMSA9IG9ianMuc2hpZnQoKTtcclxuXHR9XHJcblx0aWYgKCFvYmpzLmxlbmd0aCkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdfbWVyZ2UoKSByZXF1aXJlcyB0d28gb3IgbW9yZSBhcnJheS9vYmplY3RzLicpO1xyXG5cdH1cclxuXHRvYmpzLmZvckVhY2goKG9iajIsIGkpID0+IHtcclxuXHRcdGlmICghX2lzVHlwZU9iamVjdChvYmoyKSAmJiAhX2lzRnVuY3Rpb24ob2JqMikpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0KGRlZXBQcm9wcyA/IF9nZXRBbGxQcm9wZXJ0eU5hbWVzKG9iajIpIDogT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqMikpLmZvckVhY2goa2V5ID0+IHtcclxuXHRcdFx0dmFyIHZhbEF0T2JqMSA9IG9iajFba2V5XTtcclxuXHRcdFx0dmFyIHZhbEF0T2JqMiA9IG9iajJba2V5XTtcclxuXHRcdFx0aWYgKCgoX2lzQXJyYXkodmFsQXRPYmoxKSAmJiBfaXNBcnJheSh2YWxBdE9iajIpKSB8fCAoX2lzT2JqZWN0KHZhbEF0T2JqMSkgJiYgX2lzT2JqZWN0KHZhbEF0T2JqMikpKSBcclxuXHRcdFx0JiYgKGRlcHRoID09PSB0cnVlIHx8IGRlcHRoID4gMCkpIHtcclxuXHRcdFx0XHQvLyBSRUNVUlNFLi4uXHJcblx0XHRcdFx0b2JqMVtrZXldID0gX2lzQXJyYXkodmFsQXRPYmoxKSAmJiBfaXNBcnJheSh2YWxBdE9iajIpID8gW10gOiB7fTtcclxuXHRcdFx0XHRtZXJnZUNhbGxiYWNrKFtfaXNOdW1lcmljKGRlcHRoKSA/IGRlcHRoIC0gMSA6IGRlcHRoLCBvYmoxW2tleV0sIHZhbEF0T2JqMSwgdmFsQXRPYmoyXSwgY2FsbGJhY2ssIGRlZXBQcm9wcywgaXNSZXBsYWNlLCB3aXRoU3ltYm9scyk7XHJcblx0XHRcdH0gZWxzZSBpZiAoY2FsbGJhY2soa2V5LCBvYmoxLCBvYmoyLCBpKSkge1xyXG5cdFx0XHRcdGlmIChfaXNBcnJheShvYmoxKSAmJiBfaXNBcnJheShvYmoyKSkge1xyXG5cdFx0XHRcdFx0aWYgKGlzUmVwbGFjZSkge1xyXG5cdFx0XHRcdFx0XHRvYmoxW2tleV0gPSB2YWxBdE9iajI7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRvYmoxLnB1c2godmFsQXRPYmoyKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Ly8gSW4gY2FzZSB3ZSdyZSBzZXR0aW5nIGEgcmVhZC1vbmx5IHByb3BlcnR5XHJcblx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHRpZiAod2l0aFN5bWJvbHMpIHtcclxuXHRcdFx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqMSwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iajIsIGtleSkpO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdG9iajFba2V5XSA9IG9iajJba2V5XTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSBjYXRjaChlKSB7fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSk7XHJcblx0cmV0dXJuIG9iajE7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfbWVyZ2VDYWxsYmFjayBmcm9tICcuL21lcmdlQ2FsbGJhY2suanMnO1xyXG5cclxuLyoqXHJcbiAgKiBNZXJnZXMgdmFsdWVzIGZyb20gc3Vic2VxdWVudCBhcnJheXMvb2JqZWN0cyBmaXJzdCBhcnJheS9vYmplY3Q7XHJcbiAgKiBvcHRpb25hbGx5IHJlY3Vyc2l2ZVxyXG4gICpcclxuICAqIEBwYXJhbSBhcnJheSAuLi5vYmpzXHJcbiAgKlxyXG4gICogQHJldHVybiB2b2lkXHJcbiAgKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oLi4ub2Jqcykge1xyXG5cdHJldHVybiBfbWVyZ2VDYWxsYmFjayhvYmpzLCAoaywgb2JqMSwgb2JqMikgPT4ge1xyXG5cdFx0cmV0dXJuIHRydWU7XHJcblx0fSwgZmFsc2UvKmRlZXBQcm9wcyovLCBmYWxzZS8qaXNSZXBsYWNlKi8sIGZhbHNlLyp3aXRoU3ltYm9scyovKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgdW5kZWZpbmVkIG9yIGlzIG51bGwuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gdmFsID09PSBudWxsIHx8IHZhbCA9PT0gJyc7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIHVuZGVmaW5lZCBvciBpcyBvZiB0eXBlIFwidW5kZWZpbmVkXCIuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCAmJiAodmFsID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEluc3RhbmNlb2YgdGhhdCBzdXBwb3J0cyBvdXIgbXVsdGktaW5oZXJpdGFuY2UgaW1wbGVtZW50c3Rpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdG9iajFcclxuICogQHBhcmFtIG9iamVjdFx0IFx0Y2xhc3NCXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqLCBjbGFzc0IpIHtcclxuXHRpZiAoIW9iaikge1xyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHRpZiAob2JqIGluc3RhbmNlb2YgY2xhc3NCKSB7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblx0dmFyIG1peGluVGVzdCA9IGNsYXNzQSA9PiB7XHJcblx0XHR3aGlsZSAoY2xhc3NBICYmIGNsYXNzQSAhPT0gRnVuY3Rpb24ucHJvdG90eXBlKSB7XHJcblx0XHRcdGlmIChjbGFzc0EgPT09IGNsYXNzQiB8fCAoY2xhc3NBLnByb3RvdHlwZXMgJiYgY2xhc3NBLnByb3RvdHlwZXMucmVkdWNlKChwcmV2QW5zLCBwcm90b3R5cGUpID0+IHByZXZBbnMgfHwgKHByb3RvdHlwZSA9PT0gY2xhc3NCKSB8fCBtaXhpblRlc3QocHJvdG90eXBlKSwgZmFsc2UpKSkge1xyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNsYXNzQSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihjbGFzc0EpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH07XHJcblx0cmV0dXJuIG1peGluVGVzdChvYmouY29uc3RydWN0b3IpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwibnVtYmVyXCIuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XHJcblxyXG4vKipcclxuICogVGVsbHMgaWYgYW4gb2JqZWN0IGlzIGRpcmVjdCBpbnN0YW5jZSBvZiBPYmplY3QucHJvdG90eXBlLlxyXG4gKiBRdWl0ZSB1c2VmdWwgaW4gZGlmZmVyZW50aWF0aW5nIG5hdGl2ZSBvYmplY3RzIGFuZCBjbGFzcyBpbnN0YW5jZXMgZnJvbSBwbGFpbiBvYmplY3RzICh7fSkuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3QgXHRvYmpcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmopIHtcclxuXHRyZXR1cm4gX2lzT2JqZWN0KG9iaikgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IE9iamVjdC5wcm90b3R5cGU7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIHVuZGVmaW5lZCBvciBpcyBvZiB0eXBlIFwiYm9vbGVhblwiLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHZhbCA9PT0gdHJ1ZSB8fCB2YWwgPT09IGZhbHNlO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuLi9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICcuLi9qcy9pc051bWVyaWMuanMnO1xyXG5cclxuLyoqXHJcbiAqIExvb3BzIHRocnUgb2JqIGZsYXRseSB3aXRoIGEgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAqIFN0b3BzIHdoZW4gY2FsbGJhY2sgcmV0dXJucyBhIG5vbi11bmRlZmluZWQgdmFsdWUuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3QgXHRcdFx0b2JqIFx0XHRcdFRoZSBhcnJheSBvciBvYmplY3QgdG8gaXRlcmF0ZS5cclxuICogQHBhcmFtIGZ1bmN0aW9uIFx0XHRcdFx0Y2FsbGJhY2sgXHRcdFRoZSBjYWxsYmFjayBmdW5jdGlvbi5cclxuICpcclxuICogQHJldHVybiBtaXhlZHxudWxsXHRcdFx0QW55IG5vbi1udWxsIHJldHVybiBmcm9tIGNhbGxiYWNrXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmosIGNhbGxiYWNrKSB7XHJcblx0dmFyIHJldHVyblZhbHVlID0gdW5kZWZpbmVkO1xyXG5cdGlmIChfaXNUeXBlT2JqZWN0KG9iaikpIHtcclxuXHRcdE9iamVjdC5rZXlzKG9iaikuZm9yRWFjaCgoaywgaSkgPT4ge1xyXG5cdFx0XHRpZiAocmV0dXJuVmFsdWUgIT09IGZhbHNlKSB7XHJcblx0XHRcdFx0cmV0dXJuVmFsdWUgPSBjYWxsYmFjayhfaXNOdW1lcmljKGspID8gcGFyc2VGbG9hdChrKSA6IGssIG9ialtrXSwgaSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxuXHRyZXR1cm4gcmV0dXJuVmFsdWU7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNOdW1iZXIgZnJvbSAnLi4vanMvaXNOdW1iZXIuanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnLi4vanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuLi9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnLi4vanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBfaXNQbGFpbk9iamVjdCBmcm9tICcuLi9qcy9pc1BsYWluT2JqZWN0LmpzJztcclxuaW1wb3J0IF9jb21wYXJlQ2FsbGJhY2sgZnJvbSAnLi9jb21wYXJlQ2FsbGJhY2suanMnO1xyXG5cclxuLyoqXHJcbiAqIEFzc2VydHMgKG1lbWJlcnMgb2YpIHRoZSBmaXJzdCB2YWx1ZSBhZ2FpbnN0IChtZW1iZXJzIG9mKSBzdWJzZXF1ZW50IHZhbHVlcy5cclxuICogQXNzZXJ0aW9uIGNvdWxkIGJlIFRSVUUsIEZBTFNFLCBvciBjdXN0b20uXHJcbiAqXHJcbiAqIEBwYXJhbSBtaXhlZCBcdFx0XHRvYmoxXHJcbiAqIEBwYXJhbSBtaXhlZCBcdFx0XHRvYmoyXHJcbiAqIEBwYXJhbSBib29sfGZ1bmN0aW9uXHRcdGFzc2VydGlvblxyXG4gKiBAcGFyYW0gaW50XHRcdFx0XHRkZXB0aFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmNvbnN0IF9ldmVuID0gZnVuY3Rpb24ob2JqMSwgb2JqMiwgYXNzZXJ0aW9uID0gdHJ1ZSwgZGVwdGggPSAxKSB7XHJcblx0aWYgKF9pc0FycmF5KG9iajEpICYmIF9pc0FycmF5KG9iajIpICYmIG9iajEubGVuZ3RoICE9PSBvYmoyLmxlbmd0aCkge1xyXG5cdFx0cmV0dXJuICFhc3NlcnRpb247XHJcblx0fVxyXG5cdGlmIChfaXNPYmplY3Qob2JqMSkgJiYgX2lzT2JqZWN0KG9iajIpKSB7XHJcblx0XHR2YXIgb2JqMUtleXMgPSBPYmplY3Qua2V5cyhvYmoxKTtcclxuXHRcdHZhciBvYmoyS2V5cyA9IE9iamVjdC5rZXlzKG9iajIpO1xyXG5cdFx0aWYgKCFvYmoxS2V5cy5sZW5ndGggJiYgIW9iajJLZXlzLmxlbmd0aCkge1xyXG5cdFx0XHQvLyBPYmplY3RzIHRoYXQgd29uJ3Qgc2hvdyBrZXlzIG11c3QgYmUgY29tcGFyZWQgYnkgaW5zdGFuY2VcclxuXHRcdFx0Ly8gTWFueSBuYXRpdmUgb2JqZWN0cyB3b24ndC4gU28gd2UgY2FuJ3QganVkZ2UgYnkga2V5cyBhbG9uZS5cclxuXHRcdFx0cmV0dXJuIF9pc1BsYWluT2JqZWN0KG9iajEpICYmIF9pc1BsYWluT2JqZWN0KG9iajIpIFxyXG5cdFx0XHRcdD8gYXNzZXJ0aW9uXHJcblx0XHRcdFx0OiAob2JqMSA9PT0gb2JqMikgPT09IGFzc2VydGlvbjtcclxuXHRcdH1cclxuXHRcdGlmICghX2V2ZW4ob2JqMUtleXMsIG9iajJLZXlzKSkge1xyXG5cdFx0XHRyZXR1cm4gIWFzc2VydGlvbjtcclxuXHRcdH1cclxuXHR9XHJcblx0aWYgKGRlcHRoID4gMCAmJiAoKF9pc0FycmF5KG9iajEpICYmIF9pc0FycmF5KG9iajIpKSB8fCAoX2lzT2JqZWN0KG9iajEpICYmIF9pc09iamVjdChvYmoyKSkpKSB7XHJcblx0XHR2YXIgcmVzdWx0ID0gX2NvbXBhcmVDYWxsYmFjayhvYmoxLCBvYmoyLCAodjEsIHYyKSA9PiB7XHJcblx0XHRcdHJldHVybiBfZXZlbih2MSwgdjIsIGFzc2VydGlvbiwgZGVwdGggLSAxKTtcclxuXHRcdH0sIGZhbHNlLypuZXRDb21wYXJpc29uKi8sIGZhbHNlLypjb250cmFzdCovLCB0cnVlLypyZXR1cm5PbkZpcnN0RmFsc2UqLyk7XHJcblx0XHRyZXR1cm4gX2lzQXJyYXkocmVzdWx0KSBcclxuXHRcdFx0PyByZXN1bHQubGVuZ3RoID09PSBvYmoxLmxlbmd0aCAmJiByZXN1bHQubGVuZ3RoID09PSBvYmoyLmxlbmd0aCBcclxuXHRcdFx0OiAoX2lzT2JqZWN0KHJlc3VsdCkgJiYgX2lzT2JqZWN0KG9iajEpIFxyXG5cdFx0XHRcdD8gT2JqZWN0LmtleXMocmVzdWx0KS5sZW5ndGggPT09IE9iamVjdC5rZXlzKG9iajEpLmxlbmd0aCAmJiBPYmplY3Qua2V5cyhyZXN1bHQpLmxlbmd0aCA9PT0gIE9iamVjdC5rZXlzKG9iajIpLmxlbmd0aCBcclxuXHRcdFx0XHQ6IHJlc3VsdCk7XHJcblx0fVxyXG5cdHJldHVybiBfaXNGdW5jdGlvbihhc3NlcnRpb24pID8gYXNzZXJ0aW9uKG9iajEsIG9iajIpIDogKFxyXG5cdFx0X2lzTnVtYmVyKG9iajEpICYmIF9pc051bWJlcihvYmoyKSAmJiBpc05hTihvYmoxKSAmJiBpc05hTihvYmoyKSBcclxuXHRcdFx0PyBhc3NlcnRpb24gXHJcblx0XHRcdDogKG9iajEgPT09IG9iajIpID09PSBhc3NlcnRpb25cclxuXHQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBfZXZlbjtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJy4uL2pzL2lzT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnLi4vanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc0Jvb2xlYW4gZnJvbSAnLi4vanMvaXNCb29sZWFuLmpzJztcclxuaW1wb3J0IF9lYWNoIGZyb20gJy4vZWFjaC5qcyc7XHJcblxyXG4vKipcclxuICogR2V0cyB0aGUgbWF0Y2goZXMpIGJldHdlZW4gKG1lbWJlcnMgb2YpIHR3byB2YWx1ZXM7XHJcbiAqIGFzc2VydGlvbiBvcHRpb25hbGx5IGN1c3RvbS5cclxuICpcclxuICogQHBhcmFtIG1peGVkIFx0XHRcdG9iMVxyXG4gKiBAcGFyYW0gbWl4ZWQgXHRcdFx0b2JqMlxyXG4gKiBAcGFyYW0gc3RyaW5nfGZ1bmN0aW9uXHRhc3NlcnRpb25cclxuICogQHBhcmFtIGJvb2xcdFx0XHRcdG5ldENvbXBhcmlzb25cclxuICogQHBhcmFtIGJvb2xcdFx0XHRcdGNvbnRyYXN0XHJcbiAqIEBwYXJhbSBib29sXHRcdFx0XHRyZXR1cm5PbkZpcnN0RmFsc2VcclxuICpcclxuICogQHJldHVybiBib29sfGFycmF5fG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqMSwgb2JqMiwgYXNzZXJ0aW9uID0gdHJ1ZSwgbmV0Q29tcGFyaXNvbiA9IHRydWUsIGNvbnRyYXN0ID0gZmFsc2UsIHJldHVybk9uRmlyc3RGYWxzZSA9IGZhbHNlKSB7XHJcblx0aWYgKF9pc0FycmF5KG9iajEpICYmIF9pc0FycmF5KG9iajIpKSB7XHJcblx0XHR2YXIgcmVzdWx0ID0gW107XHJcblx0XHR2YXIgY29udG4gPSB0cnVlO1xyXG5cdFx0b2JqMS5mb3JFYWNoKHYxID0+IHtcclxuXHRcdFx0aWYgKCFjb250bikge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgdGVzdFBhc3MgPSBmYWxzZTtcclxuXHRcdFx0X2VhY2gob2JqMiwgKGssIHYyKSA9PiB7XHJcblx0XHRcdFx0aWYgKCF0ZXN0UGFzcyB8fCAobmV0Q29tcGFyaXNvbiAmJiBfaXNUeXBlT2JqZWN0KHYxKSkpIHtcclxuXHRcdFx0XHRcdHRlc3RQYXNzID0gYXNzZXJ0aW9uKHYxLCB2Mik7XHJcblx0XHRcdFx0XHRpZiAoKF9pc0FycmF5KHRlc3RQYXNzKSAmJiAhdGVzdFBhc3MubGVuZ3RoKSB8fCAoX2lzT2JqZWN0KHRlc3RQYXNzKSAmJiAhT2JqZWN0LmtleXModGVzdFBhc3MpLmxlbmd0aCkpIHtcclxuXHRcdFx0XHRcdFx0dGVzdFBhc3MgPSBmYWxzZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmIChfaXNUeXBlT2JqZWN0KHRlc3RQYXNzKSAmJiBuZXRDb21wYXJpc29uKSB7XHJcblx0XHRcdFx0XHRcdC8vIEZ1cnRoZXIgcmVjdXJzaW9ucyBzaG91bGQgdXNlIHRoaXMgdGVzdFBhc3MgYXMgdjFcclxuXHRcdFx0XHRcdFx0djEgPSB0ZXN0UGFzcztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRpZiAoX2lzVHlwZU9iamVjdCh0ZXN0UGFzcykpIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaChuZXRDb21wYXJpc29uID8gdGVzdFBhc3MgOiB2MSk7XHJcblx0XHRcdH0gZWxzZSBpZiAoIV9pc0Jvb2xlYW4odGVzdFBhc3MpKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2godGVzdFBhc3MpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKChjb250cmFzdCAmJiAhdGVzdFBhc3MpIHx8ICghY29udHJhc3QgJiYgdGVzdFBhc3MpKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2godjEpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHJldHVybk9uRmlyc3RGYWxzZSkge1xyXG5cdFx0XHRcdGNvbnRuID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblx0XHJcblx0aWYgKF9pc09iamVjdChvYmoxKSAmJiBfaXNPYmplY3Qob2JqMikpIHtcclxuXHRcdHZhciByZXN1bHQgPSB7fTtcclxuXHRcdHZhciBjb250biA9IHRydWU7XHJcblx0XHRPYmplY3Qua2V5cyhvYmoxKS5mb3JFYWNoKGsgPT4ge1xyXG5cdFx0XHRpZiAoIWNvbnRuKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdHZhciB0ZXN0UGFzcyA9IGFzc2VydGlvbihvYmoxW2tdLCBvYmoyW2tdKTtcclxuXHRcdFx0aWYgKChfaXNBcnJheSh0ZXN0UGFzcykgJiYgIXRlc3RQYXNzLmxlbmd0aCkgfHwgKF9pc09iamVjdCh0ZXN0UGFzcykgJiYgIU9iamVjdC5rZXlzKHRlc3RQYXNzKS5sZW5ndGgpKSB7XHJcblx0XHRcdFx0dGVzdFBhc3MgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoX2lzVHlwZU9iamVjdCh0ZXN0UGFzcykpIHtcclxuXHRcdFx0XHRyZXN1bHRba10gPSBuZXRDb21wYXJpc29uID8gdGVzdFBhc3MgOiBvYmoxW2tdO1xyXG5cdFx0XHR9IGVsc2UgaWYgKCFfaXNCb29sZWFuKHRlc3RQYXNzKSkge1xyXG5cdFx0XHRcdHJlc3VsdFtrXSA9IHRlc3RQYXNzO1xyXG5cdFx0XHR9IGVsc2UgaWYgKChjb250cmFzdCAmJiAhdGVzdFBhc3MpIHx8ICghY29udHJhc3QgJiYgdGVzdFBhc3MpKSB7XHJcblx0XHRcdFx0cmVzdWx0W2tdID0gb2JqMVtrXTtcclxuXHRcdFx0fSBlbHNlIGlmIChyZXR1cm5PbkZpcnN0RmFsc2UpIHtcclxuXHRcdFx0XHRjb250biA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2V2ZW4gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZXZlbi5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEV4cHJJbnRlcmZhY2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogQ29tcGFyZXMgdGhlIGN1cnJlbnQgaW5zdGFuY2Ugd2l0aCBhbm90aGVyIG9iamVjdC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3QgRXhwclxyXG5cdCAqXHJcblx0ICogQHJldHVybiBib29sXHJcblx0ICovXHJcblx0ZXZlbihFeHByKSB7XHJcblx0XHRpZiAoX2lzT2JqZWN0KEV4cHIpICYmIEV4cHIuanNlblR5cGUgPT09IHRoaXMuanNlblR5cGUpIHtcclxuXHRcdFx0cmV0dXJuIF9ldmVuKEV4cHIsIHRoaXMpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBJbmhlcml0cyBwcm9wZXJ0aWVzIGZyb20gYSBzdXBlciBFeHByLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIEV4cHJJbnRlcmZhY2UgU3VwZXJcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdGhpc1xyXG5cdCAqL1xyXG5cdGluaGVyaXQoU3VwZXIpIHtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBBZGRzIGNvbW1lbnRzIHRvIHRoZSBpbnN0YW5jZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmdcdCBjb21tZW50c1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB0aGlzXHJcblx0ICovXHJcblx0d2l0aENvbW1lbnRzKGNvbW1lbnRzKSB7XHJcblx0XHRpZiAoIXRoaXMubWV0YSkge1xyXG5cdFx0XHR0aGlzLm1ldGEgPSB7fTtcclxuXHRcdH1cclxuXHRcdHRoaXMubWV0YS5jb21tZW50cyA9IGNvbW1lbnRzO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEFkZHMgdmFyaWFibGVzIHRvIHRoZSBpbnN0YW5jZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBhcnJheVx0XHQgdmFyc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB0aGlzXHJcblx0ICovXHJcblx0d2l0aFZhcnModmFycykge1xyXG5cdFx0aWYgKCF0aGlzLm1ldGEpIHtcclxuXHRcdFx0dGhpcy5tZXRhID0ge307XHJcblx0XHR9XHJcblx0XHR0aGlzLm1ldGEudmFycyA9IHZhcnM7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogRXZhbHVhdGVzIHRoZSBleHByZXNzaW9uIGluc3RhbmNlIGZvciBhIHJlc3VsdCxcclxuXHQgKiBvcHRpb25hbGx5IGluIHRoZSBjb250ZXh0IG9mIGFuIG9iamVjdC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3QgY29udGV4dFxyXG5cdCAqXHJcblx0ICogQHJldHVybiBtaXhlZFxyXG5cdCAqL1xyXG5cdC8vZXZhbChjb250ZXh0ID0gbnVsbCwgdHJhcCA9IHt9KVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFNlcmlhbGl6ZXMgdGhlIGV4cHJlc3Npb24gaW5zdGFuY2UgYmFjayB0byBhIHN0cmluZyxcclxuXHQgKiBvcHRpb25hbGx5IGluIHRoZSBjb250ZXh0IG9mIGFuIG9iamVjdC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3QgY29udGV4dFxyXG5cdCAqXHJcblx0ICogQHJldHVybiBzdHJpbmdcclxuXHQgKi9cclxuXHQvL3RvU3RyaW5nKGNvbnRleHQgPSBudWxsKVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFNBdHRlbXB0cyB0byBwYXJzZSBhIHN0cmluZyBpbnRvIHRoZSBjbGFzcyBpbnN0YW5jZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmcgZXhwclxyXG5cdCAqIEBwYXJhbSBvYmplY3QgcGFyYW1zXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIEV4cHJJbnRlcmZhY2VcclxuXHQgKi9cclxuXHQvL3N0YXRpYyBwYXJzZShleHByLCBwYXJhbXMgPSB7fSlcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFJlZmVyZW5jZUludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEludGVyZmFjZSA9IGNsYXNzIGV4dGVuZHMgRXhwckludGVyZmFjZSB7fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVyZmFjZS5wcm90b3R5cGUsICdqc2VuVHlwZScsIHtcclxuXHRnZXQoKSB7IHJldHVybiAnUmVmZXJlbmNlJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIENhbGxJbnRlcmZhY2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBJbnRlcmZhY2UgPSBjbGFzcyBleHRlbmRzIEV4cHJJbnRlcmZhY2Uge307XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlcmZhY2UucHJvdG90eXBlLCAnanNlblR5cGUnLCB7XHJcblx0Z2V0KCkgeyByZXR1cm4gJ0NhbGxFeHByZXNzaW9uJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEZ1bmNJbnRlcmZhY2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBJbnRlcmZhY2UgPSBjbGFzcyBleHRlbmRzIEV4cHJJbnRlcmZhY2Uge307XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlcmZhY2UucHJvdG90eXBlLCAnanNlblR5cGUnLCB7XHJcblx0Z2V0KCkgeyByZXR1cm4gJ0Z1bmN0aW9uVHlwZSc7IH0sXHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCBJbnRlcmZhY2U7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBFeHBySW50ZXJmYWNlIGZyb20gJy4uL0V4cHJJbnRlcmZhY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBJZkludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEludGVyZmFjZSA9IGNsYXNzIGV4dGVuZHMgRXhwckludGVyZmFjZSB7fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVyZmFjZS5wcm90b3R5cGUsICdqc2VuVHlwZScsIHtcclxuXHRnZXQoKSB7IHJldHVybiAnSWZDb25kaXRpb25hbCc7IH0sXHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCBJbnRlcmZhY2U7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfbWVyZ2UgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovbWVyZ2UuanMnO1xyXG5pbXBvcnQgX2lzRW1wdHkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0VtcHR5LmpzJztcclxuaW1wb3J0IF9yZW1vdmUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvcmVtb3ZlLmpzJztcclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaW5zdGFuY2VvZiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2luc3RhbmNlb2YuanMnO1xyXG5pbXBvcnQgUmVmZXJlbmNlSW50ZXJmYWNlIGZyb20gJy4vRXhwci9SZWZlcmVuY2VJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgQ2FsbEludGVyZmFjZSBmcm9tICcuL0V4cHIvQ2FsbEludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBGdW5jSW50ZXJmYWNlIGZyb20gJy4vRXhwci9GdW5jSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IElmSW50ZXJmYWNlIGZyb20gJy4vRXhwci9JZkludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEpzZW4gKGJhc2UpIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5jb25zdCBjYWNoZSA9IHt9O1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBKc2VuIHtcclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgcGFyc2UoZXhwciwgUGFyc2VycywgcGFyYW1zID0ge30sIFN0YXRpYyA9IEpzZW4pIHtcclxuXHRcdGlmIChleHByLmxlbmd0aCkge1xyXG5cdFx0XHRpZiAoY2FjaGVbZXhwcl0pIHtcclxuXHRcdFx0XHR2YXIgX3BhcnNlZDtcclxuXHRcdFx0XHRpZiAoX3BhcnNlZCA9IEpzZW4ucGFyc2VPbmUoZXhwciwgY2FjaGVbZXhwcl0sIHBhcmFtcywgU3RhdGljKSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIF9wYXJzZWQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdHZhciBwYXJzZXJzID0gT2JqZWN0LnZhbHVlcyhQYXJzZXJzIHx8IFN0YXRpYy5ncmFtbWFycyk7XHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcGFyc2Vycy5sZW5ndGg7IGkgKyspIHtcclxuXHRcdFx0XHR2YXIgcGFyc2VkID0gSnNlbi5wYXJzZU9uZShleHByLCBwYXJzZXJzW2ldLCBwYXJhbXMsIFN0YXRpYyk7XHJcblx0XHRcdFx0aWYgKHBhcnNlZCkge1xyXG5cdFx0XHRcdFx0aWYgKCFQYXJzZXJzKSB7XHJcblx0XHRcdFx0XHRcdGNhY2hlW2V4cHJdID0gcGFyc2Vyc1tpXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiBwYXJzZWQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdGlmIChwYXJhbXMuYXNzZXJ0ID09PSBmYWxzZSkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1tTeW50YXggZXJyb3I6XSAnICsgZXhwcik7XHJcblx0XHR9XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cclxuXHRzdGF0aWMgcGFyc2VPbmUoZXhwciwgUGFyc2VyLCBwYXJhbXMgPSB7fSwgU3RhdGljID0gSnNlbikge1xyXG5cdFx0Ly8gRnJvbSB0aGlzIHBvaW50IGZvcndhcmQsIGFsbCB2YXJzIGlzIHdpdGhpbiBjdXJyZW50IHNjb3BlXHJcblx0XHR2YXIgdmFycyA9IFtdXHJcblx0XHR2YXIgcGFyc2VkID0gUGFyc2VyLnBhcnNlKGV4cHIsIChfZXhwciwgX1BhcnNlcnMsIF9wYXJhbXMgPSB7fSkgPT4ge1xyXG5cdFx0XHR2YXIgc3ViU3RtdCA9IEpzZW4ucGFyc2UoX2V4cHIsIF9QYXJzZXJzLCBfcGFyYW1zID8gX21lcmdlKHBhcmFtcywgX3BhcmFtcykgOiBwYXJhbXMsIFN0YXRpYyk7XHJcblx0XHRcdGlmIChfcGFyYW1zLmxvZGdlICE9PSBmYWxzZSkge1xyXG5cdFx0XHRcdGlmIChfaW5zdGFuY2VvZihzdWJTdG10LCBSZWZlcmVuY2VJbnRlcmZhY2UpIHx8IF9pbnN0YW5jZW9mKHN1YlN0bXQsIENhbGxJbnRlcmZhY2UpKSB7XHJcblx0XHRcdFx0XHR2YXJzLnB1c2goc3ViU3RtdCk7XHJcblx0XHRcdFx0fSBlbHNlIGlmIChzdWJTdG10ICYmICFfaW5zdGFuY2VvZihzdWJTdG10LCBGdW5jSW50ZXJmYWNlKSAmJiAhX2luc3RhbmNlb2Yoc3ViU3RtdCwgSWZJbnRlcmZhY2UpKSB7XHJcblx0XHRcdFx0XHRzdWJTdG10Lm1ldGEudmFycy5mb3JFYWNoKF92YXIgPT4gdmFycy5wdXNoKF92YXIpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIHN1YlN0bXQ7XHJcblx0XHR9KTtcclxuXHRcdC8vIEFkZC9yZW1vdmUgdmFycyB0byBzY29wZVxyXG5cdFx0aWYgKHBhcnNlZCkge1xyXG5cdFx0XHRpZiAoIXBhcnNlZC5tZXRhKSB7XHJcblx0XHRcdFx0cGFyc2VkLm1ldGEgPSB7fTtcclxuXHRcdFx0fVxyXG5cdFx0XHRwYXJzZWQubWV0YS52YXJzID0gdmFycztcclxuXHRcdFx0aWYgKF9pc0FycmF5KHBhcmFtcy5leHBsYWluKSkge1xyXG5cdFx0XHRcdHBhcmFtcy5leHBsYWluLnB1c2goZXhwciArICcgPj4tLS0tLS0tLS0tLS0tPj4gJyArIHBhcnNlZC5qc2VuVHlwZSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiBwYXJzZWQ7XHJcblx0fVxyXG59OyIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJzdHJpbmdcIi5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyAmJiB2YWwgIT09IG51bGw7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc1R5cGVBcnJheSBmcm9tICcuLi9qcy9pc1R5cGVBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNFbXB0eSBmcm9tICcuLi9qcy9pc0VtcHR5LmpzJztcclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICcuLi9qcy9pc09iamVjdC5qcyc7XHJcblxyXG4vKipcclxuICogQ2FzdHMgYW4gYXJyYXktbGlrZSBvYmplY3QgdG8gYW4gYXJyYXkuXHJcbiAqXHJcbiAqIEBwYXJhbSBtaXhlZCBcdHZhbFxyXG4gKiBAcGFyYW0gYm9vbFx0IFx0Y2FzdE9iamVjdFxyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwsIGNhc3RPYmplY3QgPSB0cnVlKSB7XHJcblx0aWYgKF9pc0FycmF5KHZhbCkpIHtcclxuXHRcdHJldHVybiB2YWw7XHJcblx0fTtcclxuXHRpZiAoIWNhc3RPYmplY3QgJiYgX2lzT2JqZWN0KHZhbCkpIHtcclxuXHRcdHJldHVybiBbdmFsXTtcclxuXHR9O1xyXG5cdGlmICh2YWwgIT09IGZhbHNlICYmIHZhbCAhPT0gMCAmJiBfaXNFbXB0eSh2YWwpKSB7XHJcblx0XHRyZXR1cm4gW107XHJcblx0fTtcclxuXHRpZiAoX2lzVHlwZUFycmF5KHZhbCkpIHtcclxuXHRcdHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh2YWwpO1xyXG5cdH07XHJcblx0aWYgKF9pc09iamVjdCh2YWwpKSB7XHJcblx0XHRyZXR1cm4gT2JqZWN0LnZhbHVlcyh2YWwpO1xyXG5cdH07XHJcblx0cmV0dXJuIFt2YWxdO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzTnVsbCBmcm9tICcuL2lzTnVsbC5qcyc7XHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnLi9pc1VuZGVmaW5lZC5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJy4vaXNUeXBlT2JqZWN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgZW1wdHkgaW4gaXRzIG93biB0eXBlLlxyXG4gKiBUaGlzIGhvbGRzIHRydWUgZm9yIE5VTExzLCBVTkRFRklORUQsIEZBTFNFLCAwLFxyXG4gKiBvYmplY3RzIHdpdGhvdXQga2V5cywgZW1wdHkgYXJyYXlzLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIF9pc051bGwodmFsKSB8fCBfaXNVbmRlZmluZWQodmFsKSB8fCB2YWwgPT09IGZhbHNlIHx8IHZhbCA9PT0gMCBcclxuXHRcdHx8IChfaXNUeXBlT2JqZWN0KHZhbCkgJiYgIU9iamVjdC5rZXlzKHZhbCkubGVuZ3RoKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1N0cmluZyBmcm9tICcuL2lzU3RyaW5nLmpzJztcclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICcuL2lzVW5kZWZpbmVkLmpzJztcclxuXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgXCJhcnJheS1saWtlXCIuXHJcbiAqIFRoaXMgaG9sZHMgdHJ1ZSBmb3IgYW55dGhpbmcgdGhhdCBoYXMgYSBsZW5ndGggcHJvcGVydHkuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiAhX2lzU3RyaW5nKHZhbCkgJiYgIV9pc1VuZGVmaW5lZCh2YWwubGVuZ3RoKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJy4uL2pzL2lzT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc051bWVyaWMgZnJvbSAnLi4vanMvaXNOdW1lcmljLmpzJztcclxuXHJcbi8qKlxyXG4gKiBGbGF0dGVucyBhIG5lc3RlZCBhcnJheSB0byB0aGUgZ2l2ZW4gZGVwdGguXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheSBcdGFyclxyXG4gKiBAcGFyYW0gaW50IFx0IFx0ZGVwdGhcclxuICogQHBhcmFtIGJvb2wgXHQgXHR3aXRoT2JqZWN0c1xyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5jb25zdCBfZmxhdHRlbiA9IGZ1bmN0aW9uKGFyciwgZGVwdGggPSAxLCB3aXRoT2JqZWN0cyA9IHRydWUpIHtcclxuXHRpZiAoIV9pc051bWVyaWMoZGVwdGgpIHx8IGRlcHRoIDw9IDApIHtcclxuXHRcdHJldHVybiBhcnI7XHJcblx0fTtcclxuXHRpZiAoIV9pc0FycmF5KGFycikgJiYgX2lzT2JqZWN0KGFycikgJiYgd2l0aE9iamVjdHMpIHtcclxuXHRcdGFyciA9IE9iamVjdC52YWx1ZXMoYXJyKTtcclxuXHR9O1xyXG5cdGlmICghX2lzQXJyYXkoYXJyKSkge1xyXG5cdFx0cmV0dXJuIGFycjtcclxuXHR9O1xyXG5cdHJldHVybiBhcnIucmVkdWNlKChhY2MsIHZhbCkgPT4gX2lzQXJyYXkodmFsKSB8fCAoX2lzT2JqZWN0KHZhbCkgJiYgd2l0aE9iamVjdHMpIFxyXG5cdFx0PyBhY2MuY29uY2F0KF9mbGF0dGVuKCFfaXNBcnJheSh2YWwpID8gT2JqZWN0LnZhbHVlcyh2YWwpIDogdmFsLCBkZXB0aCAtIDEsIHdpdGhPYmplY3RzKSkgXHJcblx0XHQ6IGFjYy5jb25jYXQodmFsKSwgW10pO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBfZmxhdHRlbjsiLCJcclxuLyoqXHJcbiAqIFJldHVybnMgVEhFIEZJUlNUIEVOVFJZIE9SIEEgTlVNQkVSIE9GIEVOVFJJRVMgY291bnRpbmcgZm9yd2FyZCBmcm9tIHRoZSBiZWdpbmluZy5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqIEBwYXJhbSBpbnRcdCBcdGFtb3VudFxyXG4gKlxyXG4gKiBAcmV0dXJuIG1peGVkfGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIGFtb3VudCA9IDEpIHtcclxuXHR2YXIgY291bnQgPSAwO1xyXG5cdGFyci5mb3JFYWNoKGl0bSA9PiB7XHJcblx0XHRjb3VudCArKztcclxuXHR9KTtcclxuXHR2YXIgZmlyc3RzID0gYXJyLnNsaWNlKGFyci5sZW5ndGggLSBjb3VudCwgYW1vdW50KTtcclxuXHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBmaXJzdHMgOiBmaXJzdHNbMF07XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfZmlyc3QgZnJvbSAnLi9maXJzdC5qcyc7XHJcblxyXG4vKipcclxuICogUmV0dXJucyBUSEUgTEFTVCBFTlRSWSBPUiBBIE5VTUJFUiBPRiBFTlRSSUVTIGNvdW50aW5nIGZvcndhcmQgdG8gdGhlIGVuZC5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqIEBwYXJhbSBpbnRcdCBcdGFtb3VudFxyXG4gKlxyXG4gKiBAcmV0dXJuIG1peGVkfGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIGFtb3VudCA9IDEpIHtcclxuXHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcclxuXHRcdD8gX2ZpcnN0KGFyci5zbGljZSgpLnJldmVyc2UoKSwgYW1vdW50KS5yZXZlcnNlKClcclxuXHRcdDogX2ZpcnN0KGFyci5zbGljZSgpLnJldmVyc2UoKSk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc0Z1bmN0aW9uIGZyb20gJy4uL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX21lcmdlQ2FsbGJhY2sgZnJvbSAnLi9tZXJnZUNhbGxiYWNrLmpzJztcclxuXHJcbi8qKlxyXG4gKiBDb3BpZXMgb25seSBwcm9wZXJ0aWVzIG9mIGFuIG9iamVjdC5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0b2JqXHJcbiAqIEBwYXJhbSBhcnJheVx0XHQgXHRvbmx5XHJcbiAqIEBwYXJhbSBhcnJheVx0XHQgXHRleGNlcHRcclxuICpcclxuICogQHJldHVybiBvYmplY3RcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iaiwgZmlsdGVyID0gW10pIHtcclxuXHRyZXR1cm4gX21lcmdlQ2FsbGJhY2soW3t9LCBvYmpdLCAoa2V5LCBvYmoxLCBvYmoyKSA9PiB7XHJcblx0XHRpZiAoIV9pc0Z1bmN0aW9uKG9iajJba2V5XSkpIHtcclxuXHRcdFx0cmV0dXJuIF9pc0Z1bmN0aW9uKGZpbHRlcikgPyBmaWx0ZXIoa2V5KSBcclxuXHRcdFx0XHQ6IChfaXNBcnJheShmaWx0ZXIpICYmIGZpbHRlci5sZW5ndGggPyBmaWx0ZXIuaW5kZXhPZihrZXkpID4gLTEgOiB0cnVlKTtcclxuXHRcdH1cclxuXHR9LCBmYWxzZS8qZGVlcFByb3BzKi8sIGZhbHNlLyppc1JlcGxhY2UqLywgZmFsc2UvKndpdGhTeW1ib2xzKi8pO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzU3RyaW5nIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNTdHJpbmcuanMnO1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNVbmRlZmluZWQuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9hcnJGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Zyb20uanMnO1xyXG5pbXBvcnQgX2ZsYXR0ZW4gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZmxhdHRlbi5qcyc7XHJcbmltcG9ydCBfZmlyc3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZmlyc3QuanMnO1xyXG5pbXBvcnQgX2xhc3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvbGFzdC5qcyc7XHJcbmltcG9ydCBfbWVyZ2UgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovbWVyZ2UuanMnO1xyXG5pbXBvcnQgX2V2ZW4gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZXZlbi5qcyc7XHJcbmltcG9ydCBfY29weVBsYWluIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2NvcHlQbGFpbi5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVE9LRU5JWkVSXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5cclxuY29uc3QgTGV4ZXIgPSBjbGFzcyB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIEZhY3RvcnkgbWV0aG9kLlxyXG5cdCAqXHJcblx0ICogSGFuZGxlcyBjYWNoaW5nLlxyXG5cdCAqXHJcblx0ICogQHNlZSBjb25zdHJ1Y3RvcigpXHJcblx0ICovXHJcblx0c3RhdGljIGxleChzdHIsIGRlbGltcywgb3B0aW9ucyA9IHt9KSB7XHJcblx0XHRpZiAoIV9pc1N0cmluZyhzdHIpKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignQXJndW1lbnQxIG11c3QgYmUgYSBzdHJpbmchJyk7XHJcblx0XHR9XHJcblx0XHR2YXIgY29weVJlc3VsdCA9IHJlc3VsdCA9PiB7XHJcblx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0ZGVsaW1zOiByZXN1bHQuZGVsaW1zLnNsaWNlKCksXHJcblx0XHRcdFx0b3B0aW9uczogX2NvcHlQbGFpbihyZXN1bHQub3B0aW9ucyksXHJcblx0XHRcdFx0bmVzdGluZzogcmVzdWx0Lm5lc3Rpbmcuc2xpY2UoKSxcclxuXHRcdFx0XHRtYXhEZXB0aDogcmVzdWx0Lm1heERlcHRoLFxyXG5cdFx0XHRcdGNvbW1lbnRzOiByZXN1bHQuY29tbWVudHMuc2xpY2UoKSxcclxuXHRcdFx0XHR0b2tlbnM6IHJlc3VsdC50b2tlbnMuc2xpY2UoKSxcclxuXHRcdFx0XHRtYXRjaGVzOiByZXN1bHQubWF0Y2hlcy5zbGljZSgpLFxyXG5cdFx0XHRcdG1hdGNoZXNpOiBfY29weVBsYWluKHJlc3VsdC5tYXRjaGVzaSksXHJcblx0XHRcdH07XHJcblx0XHR9O1xyXG5cdFx0Ly8gQVNLIENBQ0hFIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0aWYgKExleGVyLiRjYWNoZVtzdHJdICYmIG9wdGlvbnMuY2FjaGUgIT09IGZhbHNlKSB7XHJcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgTGV4ZXIuJGNhY2hlW3N0cl0ubGVuZ3RoOyBpICsrKSB7XHJcblx0XHRcdFx0dmFyIGNhY2hlZCA9IExleGVyLiRjYWNoZVtzdHJdW2ldO1xyXG5cdFx0XHRcdGlmIChfZXZlbihjYWNoZWQuZGVsaW1zLCBkZWxpbXMpKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gY29weVJlc3VsdChjYWNoZWQpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0Ly8gRlJFU0ggUEFSU0VcdCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHR2YXIgaW5zdGFuY2UgPSBuZXcgTGV4ZXIoc3RyLCBvcHRpb25zKTtcclxuXHRcdHZhciByZXN1bHQgPSBpbnN0YW5jZS5sZXgoZGVsaW1zKTtcclxuXHRcdC8vIFNBVkUgVE8gQ0FDSEUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0aWYgKG9wdGlvbnMuY2FjaGUgIT09IGZhbHNlKSB7XHJcblx0XHRcdExleGVyLiRjYWNoZVtzdHJdID0gTGV4ZXIuJGNhY2hlW3N0cl0gfHwgW107XHJcblx0XHRcdExleGVyLiRjYWNoZVtzdHJdLnB1c2gocmVzdWx0KTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBjb3B5UmVzdWx0KHJlc3VsdCk7XHJcblx0XHRcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEZhY3RvcnkgbWV0aG9kIGZvciAuc3BsaXQoKS5cclxuXHQgKlxyXG5cdCAqIEhhbmRsZXMgY2FjaGluZy5cclxuXHQgKlxyXG5cdCAqIEBzZWUgY29uc3RydWN0b3IoKVxyXG5cdCAqL1xyXG5cdHN0YXRpYyBzcGxpdChzdHIsIGRlbGltcywgb3B0aW9ucykge1xyXG5cdFx0cmV0dXJuIExleGVyLmxleChzdHIsIGRlbGltcywgb3B0aW9ucykudG9rZW5zO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRmFjdG9yeSBtZXRob2QgZm9yIC5tYXRjaCgpLlxyXG5cdCAqXHJcblx0ICogSGFuZGxlcyBjYWNoaW5nLlxyXG5cdCAqXHJcblx0ICogQHNlZSBjb25zdHJ1Y3RvcigpXHJcblx0ICovXHJcblx0c3RhdGljIG1hdGNoKHN0ciwgZGVsaW1zLCBvcHRpb25zKSB7XHJcblx0XHRyZXR1cm4gTGV4ZXIubGV4KHN0ciwgZGVsaW1zLCBvcHRpb25zKS5tYXRjaGVzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlcyBhIGxleGVyIGluc3RhbmNlIG9uIGEgc3RyaW5nIHdpdGggdGhlIGdpdmVuIG9wdGlvbnMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nIFx0c3RyXHJcblx0ICogQHBhcmFtIG9iamVjdFx0b3B0aW9uczpcclxuXHQgKiBAcGFyYW0gc3RyaW5nIFx0XHRibG9ja3NcdFx0XHRcdFRoZSBzdHJpbmdzIHRoYXQgYmVnaW4gYW5kIGVuZCBhIG5lc3RlZCBzdHJ1Y3R1cmVcclxuXHQgKiBAcGFyYW0gbnVtYmVyIFx0XHRsaW1pdFx0XHRcdFx0TWF4IHJlc3VsdHMgdG8gcmV0dXJuXHJcblx0ICogQHBhcmFtIHN0cmluZyBcdFx0YmFja3JlZmVyZW5jZVx0XHRBIGNoYXJhY3RlciBsaWtlIChcXCkgdGhhdCBwcmVmaXhlcyBub24tZGVsaW0gY2hhcmFjdGVyc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiBhcnJheVxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKHN0ciwgb3B0aW9ucykge1xyXG5cdFx0aWYgKCFfaXNTdHJpbmcoc3RyKSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0xleGVyIHJlcXVpcmVzIHRoZSBmaXJzdCBhcmd1bWVudCB0byBiZSBhIHN0cmluZy4nKTtcclxuXHRcdH1cclxuXHRcdHRoaXMuJHN0ciA9IHN0cjtcclxuXHRcdHRoaXMuJG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG5cdFx0aWYgKCF0aGlzLiRvcHRpb25zLmJsb2Nrcykge1xyXG5cdFx0XHR0aGlzLiRvcHRpb25zLmJsb2NrcyA9IExleGVyLiRibG9ja3M7XHJcblx0XHR9XHJcblx0XHRpZiAoIXRoaXMuJG9wdGlvbnMucXVvdGVzKSB7XHJcblx0XHRcdHRoaXMuJG9wdGlvbnMucXVvdGVzID0gTGV4ZXIuJHF1b3RlcztcclxuXHRcdH1cclxuXHRcdGlmICghdGhpcy4kb3B0aW9ucy5jb21tZW50cykge1xyXG5cdFx0XHR0aGlzLiRvcHRpb25zLmNvbW1lbnRzID0gTGV4ZXIuJGNvbW1lbnRzO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUGFyc2VzIHRoZSBpbnN0YW5jZSBzdHJpbmcgb24gdGhlIGdpdmVuIGRlbGltZXRlcnMuXHJcblx0ICpcclxuXHQgKiBUaGlzIG1ldGhvZCBzdXBwb3J0cyBzdGF0aWMgY2FsbGluZyxcclxuXHQgKiBpbiB3aGljaCBjYXNlIGEgc3RyaW5nIGlzIHJlcXVpcmVkIGFzIHRoZSBmaXJzdCBhcmd1bWVudC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmcgXHRzdHJcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRvcHRpb25zXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG9iamVjdFxyXG5cdCAqL1xyXG5cdGxleChkZWxpbXMsIG9wdGlvbnMpIHtcclxuXHRcdHZhciBydW50aW1lID0ge1xyXG5cdFx0XHRkZWxpbXM6IF9hcnJGcm9tKGRlbGltcyksXHJcblx0XHRcdG9wdGlvbnM6IF9tZXJnZSh0cnVlLCB7fSwgdGhpcy4kb3B0aW9ucywgb3B0aW9ucyB8fCB7fSksXHJcblx0XHRcdG5lc3Rpbmc6IFtdLFxyXG5cdFx0XHRtYXhEZXB0aDogMCxcclxuXHRcdFx0Y29tbWVudHM6IFtdLFxyXG5cdFx0XHR0b2tlbnM6IFtdLFxyXG5cdFx0XHRtYXRjaGVzOiBbXSxcclxuXHRcdFx0bWF0Y2hlc2k6IHt9LFxyXG5cdFx0fTtcclxuXHRcdC8vIEl0ZXJhdGUgb3ZlciBlYWNoIGNoYXJhY3Rlciwga2VlcCB0cmFjayBvZiBjdXJyZW50IHJvdyBhbmQgY29sdW1uIChvZiB0aGUgcmV0dXJuZWQgYXJyYXkpXHJcblx0XHR0aGlzLl9ldmFsQ2hhcnNBdChydW50aW1lLCAwKTtcclxuXHRcdGlmIChydW50aW1lLm5lc3RpbmcubGVuZ3RoKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignRXJyb3IgcGFyc2luZyB0aGUgc3RyaW5nOiAnICsgdGhpcy4kc3RyICsgJy4gVW50ZXJtaW5hdGVkIGJsb2NrczogJyArIF9mbGF0dGVuKHJ1bnRpbWUubmVzdGluZykuam9pbignLCAnKSArICcnKTtcclxuXHRcdH1cclxuXHRcdC8vIFJFVFVSTiBORVcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0cmV0dXJuIHJ1bnRpbWU7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBFeHByIGhlbHBlcjogZXZhbHVhdGVzIGFuZCBoYW5kbGVzIHRoZSBjaGFyYWN0ZXIgb24gdGhlIGN1cnJlbnQgY3Vyc29yLlxyXG5cdCAqIEFkdmFuY2VzIHRoZSBjdXJzb3IuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gb2JqZWN0IFx0cnVudGltZVxyXG5cdCAqIEBwYXJhbSBpbnRcdFx0aVxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0X2V2YWxDaGFyc0F0KHJ1bnRpbWUsIGkpIHtcclxuXHRcdGlmIChpID49IHRoaXMuJHN0ci5sZW5ndGgpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0dmFyIGNoYXJXaWR0aCA9IDE7XHJcblx0XHR2YXIgY29tbWVudFRlc3QgPSB7fSwgcXVvdGVUZXN0ID0ge30sIG5lc3RpbmdUZXN0ID0ge307XHJcblx0XHQvLyBRdW90ZXMgaW5zaWRlIGNvbW1lbnRzIG11c3QgYmUgaWdub3JlZFxyXG5cdFx0aWYgKCFydW50aW1lLm9wZW5Db21tZW50KSB7XHJcblx0XHRcdHF1b3RlVGVzdCA9IHRoaXMuX3Rlc3RRdW90ZXMocnVudGltZSwgaSk7XHJcblx0XHR9XHJcblx0XHQvLyBDb21tZW50cyBpbnNpZGUgcXVvdGVzIG11c3QgYmUgaWdub3JlZFxyXG5cdFx0aWYgKCFydW50aW1lLm9wZW5RdW90ZSkge1xyXG5cdFx0XHRjb21tZW50VGVzdCA9IHRoaXMuX3Rlc3RDb21tZW50cyhydW50aW1lLCBpKTtcclxuXHRcdH1cclxuXHRcdC8vIFNhdmUgY29tbWVudHNcclxuXHRcdGlmIChydW50aW1lLm9wZW5Db21tZW50IHx8IGNvbW1lbnRUZXN0LmVuZGluZykge1xyXG5cdFx0XHQvLyBTYXZlIG9ubHkgb3V0ZXIgY29tbWVudHNcclxuXHRcdFx0aWYgKCFydW50aW1lLm5lc3RpbmcubGVuZ3RoICYmICFuZXN0aW5nVGVzdC5lbmRpbmcpIHtcclxuXHRcdFx0XHR2YXIgY2hhcnMgPSBjb21tZW50VGVzdC5zdGFydGluZyB8fCBjb21tZW50VGVzdC5lbmRpbmcgfHwgdGhpcy4kc3RyW2ldO1xyXG5cdFx0XHRcdGNoYXJXaWR0aCA9IGNoYXJzLmxlbmd0aDtcclxuXHRcdFx0XHR0aGlzLl9wdXNoKHJ1bnRpbWUsIGNoYXJzLCAnY29tbWVudHMnLCBjb21tZW50VGVzdC5zdGFydGluZyk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhpcy5fcHVzaChydW50aW1lLCB0aGlzLiRzdHJbaV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2UgaWYgKHJ1bnRpbWUub3BlblF1b3RlIHx8IHF1b3RlVGVzdC5lbmRpbmcpIHtcclxuXHRcdFx0Ly8gWWVzIGFkZCBxdW90ZXNcclxuXHRcdFx0dGhpcy5fcHVzaChydW50aW1lLCB0aGlzLiRzdHJbaV0pO1xyXG5cdFx0fSBlbHNlIGlmIChydW50aW1lLm9wdGlvbnMubGltaXQgJiYgcnVudGltZS5tYXRjaGVzLmxlbmd0aCA9PT0gcnVudGltZS5vcHRpb25zLmxpbWl0KSB7XHJcblx0XHRcdHRoaXMuX3B1c2gocnVudGltZSwgdGhpcy4kc3RyW2ldKTtcclxuXHRcdFx0cmV0dXJuIHRoaXMuX2V2YWxDaGFyc0F0KHJ1bnRpbWUsIGkgKyAxKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIE5lc3RpbmcgdGFncyBpbnNpZGUgY29tbWVudHMgYW5kIHF1b3RlcyBoYXZlIGJlZW4gaWdub3JlZFxyXG5cdFx0XHRuZXN0aW5nVGVzdCA9IHRoaXMuX3Rlc3ROZXN0aW5nKHJ1bnRpbWUsIGkpO1xyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0Ly8gU1RPUCBPTiBUSElTIENIQVJBQ1RFUi4uLj9cclxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdHZhciBuZXN0aW5nVGVzdCA9IHRoaXMuX3Rlc3ROZXN0aW5nKHJ1bnRpbWUsIGkpO1xyXG5cdFx0XHQvLyBTVE9QIENIQVIoUyk/IGF0IHRvcCBsZXZlbD9cclxuXHRcdFx0dmFyIHN0b3BDaGFyID0gdGhpcy5fdGVzdENoYXJzKHJ1bnRpbWUub3B0aW9ucy5zdG9wQ2hhcnMgfHwgW10sIHJ1bnRpbWUsIGkpO1xyXG5cdFx0XHRpZiAoIXJ1bnRpbWUubmVzdGluZy5sZW5ndGggJiYgc3RvcENoYXIgIT09IGZhbHNlKSB7XHJcblx0XHRcdFx0cnVudGltZS5vcHRpb25zLnN0b3BDaGFyID0gc3RvcENoYXI7XHJcblx0XHRcdFx0cnVudGltZS5vcHRpb25zLnN0b3BDaGFyRm9yd2FyZCA9IHRoaXMuJHN0ci5zdWJzdHIoaSk7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHQvLyBNYXRjaCBhbmQgc3BsaXQgbm93Li4uXHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHRpZiAoIXJ1bnRpbWUuZGVsaW1zLmxlbmd0aCkge1xyXG5cdFx0XHRcdC8vIEJMT0NLLUJBU0VEIFNQTElUVElORy4uLlxyXG5cdFx0XHRcdGlmIChydW50aW1lLm5lc3RpbmcubGVuZ3RoID09PSAyICYmIG5lc3RpbmdUZXN0LnN0YXJ0aW5nKSB7XHJcblx0XHRcdFx0XHRydW50aW1lLm1hdGNoZXMucHVzaChudWxsKTtcclxuXHRcdFx0XHRcdHRoaXMuX3B1c2gocnVudGltZSwgbmVzdGluZ1Rlc3Quc3RhcnRpbmcpO1xyXG5cdFx0XHRcdFx0Y2hhcldpZHRoID0gbmVzdGluZ1Rlc3Quc3RhcnRpbmcubGVuZ3RoO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIXJ1bnRpbWUubmVzdGluZy5sZW5ndGggJiYgbmVzdGluZ1Rlc3QuZW5kaW5nKSB7XHJcblx0XHRcdFx0XHR0aGlzLl9wdXNoKHJ1bnRpbWUsIG5lc3RpbmdUZXN0LmVuZGluZyk7XHJcblx0XHRcdFx0XHRjaGFyV2lkdGggPSBuZXN0aW5nVGVzdC5lbmRpbmcubGVuZ3RoO1xyXG5cdFx0XHRcdFx0cnVudGltZS5tYXRjaGVzLnB1c2gobnVsbCk7XHJcblx0XHRcdFx0fSBlbHNlLypuby1uZXN0aW5nIGZsYWcqLyB7XHJcblx0XHRcdFx0XHR0aGlzLl9wdXNoKHJ1bnRpbWUsIHRoaXMuJHN0cltpXSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHRcdC8vIERFTElNUy1CQVNFRCBTUExJVFRJTkdcclxuXHRcdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0XHRpZiAoIXJ1bnRpbWUubmVzdGluZy5sZW5ndGggJiYgIW5lc3RpbmdUZXN0LmVuZGluZykge1xyXG5cdFx0XHRcdFx0Ly8gSW4gY2FzZSB0aGUgY2hhcnMgYXQgaW5kZXggMCBpcyBhIGRlbGltLFxyXG5cdFx0XHRcdFx0Ly8gdGhlIHJlc3VsdGluZyBzcGxpdCBzaG91bGQgZmlyc3QgaGF2ZSBhbiBlbXB0eSBzdHJpbmcsIGluc3RlYWQgb2YgdW5kZWZpbmVkXHJcblx0XHRcdFx0XHR0aGlzLl9wdXNoKHJ1bnRpbWUsICcnKTtcclxuXHRcdFx0XHRcdHZhciBtYXRjaGVkRGVsaW0gPSB0aGlzLl90ZXN0Q2hhcnMocnVudGltZS5kZWxpbXMsIHJ1bnRpbWUsIGkpO1xyXG5cdFx0XHRcdFx0aWYgKG1hdGNoZWREZWxpbSAhPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRcdFx0cnVudGltZS5tYXRjaGVzLnB1c2gobWF0Y2hlZERlbGltKTtcclxuXHRcdFx0XHRcdFx0cnVudGltZS5tYXRjaGVzaVtpXSA9IG1hdGNoZWREZWxpbTtcclxuXHRcdFx0XHRcdFx0Y2hhcldpZHRoID0gbWF0Y2hlZERlbGltLmxlbmd0aCB8fCAxO1xyXG5cdFx0XHRcdFx0XHRpZiAoIXJ1bnRpbWUub3B0aW9ucy5wcmVzZXJ2ZURlbGltcykge1xyXG5cdFx0XHRcdFx0XHRcdC8vIFRoZSBjdXJyZW50IGNoYXJhY3RlciBpcyBhIGRlbGltaXRlci4uLlxyXG5cdFx0XHRcdFx0XHRcdC8vIGFuZCBzaG91bGQgbm90IGdldCB0byBhcHBlbmRpbmcgdG8gdGhlIHNwbGl0IHNlcmllcyBkb3duIHRoZSBsaW5lXHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuX2V2YWxDaGFyc0F0KHJ1bnRpbWUsIGkgKyAobWF0Y2hlZERlbGltLmxlbmd0aCB8fCAxKSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHRoaXMuX3B1c2gocnVudGltZSwgbWF0Y2hlZERlbGltIHx8IHRoaXMuJHN0cltpXSk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHZhciBjaGFycyA9IG5lc3RpbmdUZXN0LnN0YXJ0aW5nIHx8IG5lc3RpbmdUZXN0LmVuZGluZyB8fCB0aGlzLiRzdHJbaV07XHJcblx0XHRcdFx0XHRjaGFyV2lkdGggPSBjaGFycy5sZW5ndGg7XHJcblx0XHRcdFx0XHR0aGlzLl9wdXNoKHJ1bnRpbWUsIGNoYXJzKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLl9ldmFsQ2hhcnNBdChydW50aW1lLCBpICsgY2hhcldpZHRoKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEV4cHIgaGVscGVyOiB0ZXN0cyBmb3IgYSBxdW90ZSBzdGFydC9lbmQgY2hhcmFjdGVyIG9uIHRoZSBjdXJyZW50IGN1cnNvci5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdHJ1bnRpbWVcclxuXHQgKiBAcGFyYW0gaW50XHRcdGlcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gb2JqZWN0XHJcblx0ICovXHJcblx0X3Rlc3RRdW90ZXMocnVudGltZSwgaSkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IHt9O1xyXG5cdFx0KHJ1bnRpbWUub3B0aW9ucy5xdW90ZXMgfHwgW10pLmZvckVhY2gocXVvdGUgPT4ge1xyXG5cdFx0XHRpZiAodGhpcy4kc3RyLnN1YnN0cihpLCAxKSA9PT0gcXVvdGUpIHtcclxuXHRcdFx0XHRpZiAoIXJ1bnRpbWUub3BlblF1b3RlKSB7XHJcblx0XHRcdFx0XHRydW50aW1lLm9wZW5RdW90ZSA9IHF1b3RlO1xyXG5cdFx0XHRcdFx0cmVzdWx0LnN0YXJ0aW5nID0gcXVvdGU7XHJcblx0XHRcdFx0fSBlbHNlIGlmIChxdW90ZSA9PT0gcnVudGltZS5vcGVuUXVvdGUpIHtcclxuXHRcdFx0XHRcdHJ1bnRpbWUub3BlblF1b3RlID0gZmFsc2U7XHJcblx0XHRcdFx0XHRyZXN1bHQuZW5kaW5nID0gcXVvdGU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBFeHByIGhlbHBlcjogdGVzdHMgZm9yIGEgY29tbWVudCBzdGFydC9lbmQgY2hhcmFjdGVyIG9uIHRoZSBjdXJyZW50IGN1cnNvci5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdHJ1bnRpbWVcclxuXHQgKiBAcGFyYW0gaW50XHRcdGlcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gb2JqZWN0XHJcblx0ICovXHJcblx0X3Rlc3RDb21tZW50cyhydW50aW1lLCBpKSB7XHJcblx0XHR2YXIgcmVzdWx0ID0ge307XHJcblx0XHQocnVudGltZS5vcHRpb25zLmNvbW1lbnRzIHx8IFtdKS5mb3JFYWNoKGJsb2NrID0+IHtcclxuXHRcdFx0aWYgKCFydW50aW1lLm9wZW5Db21tZW50KSB7XHJcblx0XHRcdFx0dmFyIHN0YXJ0aW5nID0gX2ZpcnN0KGJsb2NrKTtcclxuXHRcdFx0XHRpZiAodGhpcy4kc3RyLnN1YnN0cihpKS5zdGFydHNXaXRoKHN0YXJ0aW5nKSkge1xyXG5cdFx0XHRcdFx0cnVudGltZS5vcGVuQ29tbWVudCA9IGJsb2NrO1xyXG5cdFx0XHRcdFx0cmVzdWx0LnN0YXJ0aW5nID0gc3RhcnRpbmc7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2UgaWYgKF9sYXN0KGJsb2NrKSA9PT0gX2xhc3QocnVudGltZS5vcGVuQ29tbWVudCkpIHtcclxuXHRcdFx0XHR2YXIgZW5kaW5nID0gX2xhc3QoYmxvY2spO1xyXG5cdFx0XHRcdGlmICh0aGlzLiRzdHIuc3Vic3RyKGkpLnN0YXJ0c1dpdGgoZW5kaW5nKSkge1xyXG5cdFx0XHRcdFx0cnVudGltZS5vcGVuQ29tbWVudCA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0cmVzdWx0LmVuZGluZyA9IGVuZGluZztcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEV4cHIgaGVscGVyOiB0ZXN0cyBmb3IgYSBuZXN0aW5nIHN0YXJ0L2VuZCBjaGFyYWN0ZXIgb24gdGhlIGN1cnJlbnQgY3Vyc29yLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdFx0cnVudGltZVxyXG5cdCAqIEBwYXJhbSBpbnRcdFx0aVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBvYmplY3RcclxuXHQgKi9cclxuXHRfdGVzdE5lc3RpbmcocnVudGltZSwgaSkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IHt9O1xyXG5cdFx0KHJ1bnRpbWUub3B0aW9ucy5ibG9ja3MgfHwgW10pLmZvckVhY2goYmxvY2sgPT4ge1xyXG5cdFx0XHR2YXIgc3RhcnRpbmcgPSBfZmlyc3QoYmxvY2spO1xyXG5cdFx0XHRpZiAodGhpcy4kc3RyLnN1YnN0cihpKS5zdGFydHNXaXRoKHN0YXJ0aW5nKSkge1xyXG5cdFx0XHRcdHJ1bnRpbWUubmVzdGluZyA9IHJ1bnRpbWUubmVzdGluZy5jb25jYXQoW2Jsb2NrXSk7XHJcblx0XHRcdFx0cmVzdWx0LnN0YXJ0aW5nID0gc3RhcnRpbmc7XHJcblx0XHRcdH0gZWxzZSBpZiAocnVudGltZS5uZXN0aW5nLmxlbmd0aCAmJiBfbGFzdChibG9jaykgPT09IF9sYXN0KF9sYXN0KHJ1bnRpbWUubmVzdGluZykpKSB7XHJcblx0XHRcdFx0dmFyIGVuZGluZyA9IF9sYXN0KGJsb2NrKTtcclxuXHRcdFx0XHRpZiAodGhpcy4kc3RyLnN1YnN0cihpKS5zdGFydHNXaXRoKGVuZGluZykpIHtcclxuXHRcdFx0XHRcdHJ1bnRpbWUubmVzdGluZyA9IHJ1bnRpbWUubmVzdGluZy5zbGljZSgwLCAtMSk7XHJcblx0XHRcdFx0XHRyZXN1bHQuZW5kaW5nID0gZW5kaW5nO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRydW50aW1lLm1heERlcHRoID0gTWF0aC5tYXgocnVudGltZS5tYXhEZXB0aCwgcnVudGltZS5uZXN0aW5nLmxlbmd0aCk7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRXhwciBoZWxwZXI6IHRlc3RzIGZvciBhIGRlbGltaXRlciBvciBzdG9wIGNoYXJhY3RlciBvbiB0aGUgY3VycmVudCBjdXJzb3IuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gYXJyYXlcdFx0dGVzdExpc3RcclxuXHQgKiBAcGFyYW0gb2JqZWN0IFx0cnVudGltZVxyXG5cdCAqIEBwYXJhbSBpbnRcdFx0aVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBtaXhlZFxyXG5cdCAqL1xyXG5cdF90ZXN0Q2hhcnModGVzdExpc3QsIHJ1bnRpbWUsIGkpIHtcclxuXHRcdGZvciAodmFyIGsgPSAwOyBrIDwgdGVzdExpc3QubGVuZ3RoOyBrICsrKSB7XHJcblx0XHRcdHZhciB0ZXN0ID0gdGVzdExpc3Rba107XHJcblx0XHRcdGlmIChfaXNGdW5jdGlvbih0ZXN0KSkge1xyXG5cdFx0XHRcdHZhciByZXQgPSB0ZXN0KHRoaXMuJHN0ci5zdWJzdHIoMCwgaSksIHRoaXMuJHN0ci5zdWJzdHIoaSkpO1xyXG5cdFx0XHRcdGlmIChyZXQgIT09IGZhbHNlKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAocnVudGltZS5vcHRpb25zLnVzZVJlZ2V4KSB7XHJcblx0XHRcdFx0dmFyIG0gPSB0aGlzLiRzdHIuc3Vic3RyKGkpLm1hdGNoKG5ldyBSZWdFeHAoJ14nICsgdGVzdCwgcnVudGltZS5vcHRpb25zLnVzZVJlZ2V4ICE9PSB0cnVlID8gcnVudGltZS5vcHRpb25zLnVzZVJlZ2V4IDogJycpKTtcclxuXHRcdFx0XHRpZiAobSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIG1bMF07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGlmICgoIXJ1bnRpbWUub3B0aW9ucy5jaSAmJiB0aGlzLiRzdHIuc3Vic3RyKGksIHRlc3QubGVuZ3RoKSA9PT0gdGVzdClcclxuXHRcdFx0fHwgKHJ1bnRpbWUub3B0aW9ucy5jaSAmJiB0aGlzLiRzdHIuc3Vic3RyKGksIHRlc3QubGVuZ3RoKS50b0xvd2VyQ2FzZSgpID09PSB0ZXN0LnRvTG93ZXJDYXNlKCkpKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRlc3Q7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogRXhwciBoZWxwZXI6IHB1c2hlcyBhIGNoYXJhY3RlciBvciBzZXQgb2YgY2hhcmFjdGVycyBpbnRvIHRoZSBjdXJyZW50IHNwbGl0IHNlcmllcy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3QgXHRydW50aW1lXHJcblx0ICogQHBhcmFtIHN0cmluZ1x0Y2hhcnNcclxuXHQgKiBAcGFyYW0gc3RyaW5nXHR0YXJnZXRcclxuXHQgKiBAcGFyYW0gYm9vbFx0XHRpc05ld1Nlcmllc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0X3B1c2gocnVudGltZSwgY2hhcnMsIHRhcmdldCA9ICd0b2tlbnMnLCBpc05ld1NlcmllcyA9IGZhbHNlKSB7XHJcblx0XHR2YXIgc3BsaXRTZXJpZXMgPSBydW50aW1lLm1hdGNoZXMubGVuZ3RoO1xyXG5cdFx0aWYgKF9pc1VuZGVmaW5lZChydW50aW1lLnRva2Vuc1tzcGxpdFNlcmllc10pKSB7XHJcblx0XHRcdHJ1bnRpbWUudG9rZW5zW3NwbGl0U2VyaWVzXSA9ICcnO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmICh0YXJnZXQgPT09ICdjb21tZW50cycpIHtcclxuXHRcdFx0aWYgKCFydW50aW1lLnRva2Vuc1tzcGxpdFNlcmllc10uY29tbWVudHMpIHtcclxuXHRcdFx0XHRydW50aW1lLnRva2Vuc1tzcGxpdFNlcmllc10gPSBuZXcgU3RyaW5nKHJ1bnRpbWUudG9rZW5zW3NwbGl0U2VyaWVzXSk7XHJcblx0XHRcdFx0cnVudGltZS50b2tlbnNbc3BsaXRTZXJpZXNdLmNvbW1lbnRzID0gW107XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIHNwbGl0U2VyaWVzMiA9IHJ1bnRpbWUudG9rZW5zW3NwbGl0U2VyaWVzXS5jb21tZW50cy5sZW5ndGggLSAoIXJ1bnRpbWUudG9rZW5zW3NwbGl0U2VyaWVzXS5jb21tZW50cy5sZW5ndGggfHwgaXNOZXdTZXJpZXMgPyAwIDogMSk7XHJcblx0XHRcdHJ1bnRpbWUudG9rZW5zW3NwbGl0U2VyaWVzXS5jb21tZW50c1tzcGxpdFNlcmllczJdID0gKHJ1bnRpbWUudG9rZW5zW3NwbGl0U2VyaWVzXS5jb21tZW50c1tzcGxpdFNlcmllczJdIHx8ICcnKSArIGNoYXJzO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dmFyIGNvbW1lbnRzID0gcnVudGltZS50b2tlbnNbc3BsaXRTZXJpZXNdLmNvbW1lbnRzO1xyXG5cdFx0XHRydW50aW1lLnRva2Vuc1tzcGxpdFNlcmllc10gPSBuZXcgU3RyaW5nKHJ1bnRpbWUudG9rZW5zW3NwbGl0U2VyaWVzXSArIGNoYXJzKTtcclxuXHRcdFx0cnVudGltZS50b2tlbnNbc3BsaXRTZXJpZXNdLmNvbW1lbnRzID0gY29tbWVudHM7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTcGxpdHMgdGhlIGluc3RhbmNlIHN0cmluZyBvbiB0aGUgZ2l2ZW4gZGVsaW1ldGVycyBhbmQgcmV0dXJucyB0aGUgdG9rZW5zLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZyBcdHN0clxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdG9wdGlvbnNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYXJyYXlcclxuXHQgKi9cclxuXHRzcGxpdChzdHIsIGRlbGltcywgb3B0aW9ucykge1xyXG5cdFx0cmV0dXJuIHRoaXMubGV4KGRlbGltcywgb3B0aW9ucykudG9rZW5zO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBTcGxpdHMgdGhlIGluc3RhbmNlIHN0cmluZyBvbiB0aGUgZ2l2ZW4gZGVsaW1ldGVycyBhbmQgcmV0dXJucyB0aGUgbWF0Y2hlcy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmcgXHRzdHJcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRvcHRpb25zOlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBhcnJheVxyXG5cdCAqL1xyXG5cdG1hdGNoKHN0ciwgZGVsaW1zLCBvcHRpb25zKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5sZXgoZGVsaW1zLCBvcHRpb25zKS5tYXRjaGVzO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBQYXJzZXMgdGhlIGluc3RhbmNlIHN0cmluZyBvbiB0aGUgZ2l2ZW4gZGVsaW1ldGVycyB1c2luZyByZWdleC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmcgXHRzdHJcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRvcHRpb25zXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG9iamVjdFxyXG5cdCAqL1xyXG5cdHJlZ1BhcnNlKGRlbGltcywgb3B0aW9ucykge1xyXG5cdFx0cmV0dXJuIHRoaXMubGV4KGRlbGltcywgX21lcmdlKHt1c2VSZWdleDogdHJ1ZX0sIG9wdGlvbnMgfHwge30pKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogU3BsaXRzIHRoZSBpbnN0YW5jZSBzdHJpbmcgb24gdGhlIGdpdmVuIGRlbGltZXRlcnMgdXNpbmcgcmVnZXg7IHJldHVybnMgdGhlIHRva2Vucy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmcgXHRzdHJcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRvcHRpb25zXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGFycmF5XHJcblx0ICovXHJcblx0cmVnU3BsaXQoZGVsaW1zLCBvcHRpb25zKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5yZWdQYXJzZShkZWxpbXMsIG9wdGlvbnMpLnRva2VucztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogTWF0Y2hlcyB0aGUgaW5zdGFuY2Ugc3RyaW5nIG9uIHRoZSBnaXZlbiBkZWxpbWV0ZXJzIHVzaW5nIHJlZ2V4OyByZXR1cm5zIHRoZSBtYXRjaGVzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZyBcdHN0clxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdG9wdGlvbnNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYXJyYXlcclxuXHQgKi9cclxuXHRyZWdNYXRjaChkZWxpbXMsIG9wdGlvbnMpIHtcclxuXHRcdHJldHVybiB0aGlzLnJlZ1BhcnNlKGRlbGltcywgb3B0aW9ucykubWF0Y2hlcztcclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQHZhciBhcnJheVxyXG4gKi9cclxuTGV4ZXIuJGJsb2NrcyA9IFtbJygnLCAnKSddLCBbJ1snLCAnXSddLCBbJ3snLCAnfSddLF07XHJcblxyXG4vKipcclxuICogQHZhciBhcnJheVxyXG4gKi9cclxuTGV4ZXIuJHF1b3RlcyA9IFsnXCInLCBcIidcIiwgJ2AnLF07XHJcblxyXG4vKipcclxuICogQHZhciBhcnJheVxyXG4gKi9cclxuTGV4ZXIuJGNvbW1lbnRzID0gW1snLyonLCAnKi8nXSwgWycvLycsIFwiXFxuXCJdLF07XHJcblxyXG4vKipcclxuICogQHZhciBvYmplY3RcclxuICovXHJcbkxleGVyLiRjYWNoZSA9IHt9O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IExleGVyO1xyXG5cclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNVbmRlZmluZWQuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9pc0NsYXNzIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNDbGFzcy5qcyc7XHJcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1N0cmluZy5qcyc7XHJcbmltcG9ydCBfaXNOdWxsIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNOdWxsLmpzJztcclxuaW1wb3J0IF9pc051bWJlciBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVtYmVyLmpzJztcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29udGV4dHMge1xyXG5cclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIGEgbmV3IGNvbnRleHQgc3RhY2suXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHQgXHRwYXJhbXNcclxuXHQgKiBAcGFyYW0gaW50XHRcdCBcdHR5cGVcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gQ29udGV4dHNcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihzdGFjaywgdHlwZSA9IDEpIHtcclxuXHRcdHRoaXMuc3RhY2sgPSBzdGFjaztcclxuXHRcdHRoaXMudHlwZSA9IHR5cGU7XHJcblx0XHRpZiAoISgnbWFpbicgaW4gdGhpcy5zdGFjaykpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdBIFwibWFpblwiIGNvbnRleHQgbXVzdCBiZSBwcm92aWRlZCEnKTtcclxuXHRcdH1cclxuXHRcdGlmICh0aGlzLnN0YWNrLnN1cGVyKSB7XHJcblx0XHRcdHRoaXMuc3RhY2suc3VwZXIgPSBDb250ZXh0cy5jcmVhdGUodGhpcy5zdGFjay5zdXBlcik7XHJcblx0XHR9XHJcblx0XHR0aGlzLnN0YWNrLmxvY2FsID0gdGhpcy5zdGFjay5sb2NhbCB8fCB7fTtcclxuXHRcdHRoaXMuc3RhY2suJGxvY2FsID0gdGhpcy5zdGFjay4kbG9jYWwgfHwge307XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBCaW5kcyBhIGNhbGxiYWNrIHRvIGNoYW5nZXNcclxuXHQgKiB0aGF0IGhhcHBlbiBpbiB0aGUgY29udGV4dHMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nfGFycmF0IFx0XHRwcm9wc1xyXG5cdCAqIEBwYXJhbSBmdW5jdGlvblx0XHQgXHRjYWxsYmFja1xyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0IFx0b3B0aW9uc1xyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0IFx0dHJhcFxyXG5cdCAqXHJcblx0ICogQHJldHVybiBDb250ZXh0c1xyXG5cdCAqL1xyXG5cdG9ic2VydmUocHJvcHMsIGNhbGxiYWNrLCBvcHRpb25zLCB0cmFwID0ge30pIHtcclxuXHRcdGlmICh0cmFwLm9ic2VydmUgJiYgcHJvcHMubGVuZ3RoKSB7XHJcblx0XHRcdC8vIE9ic2VydmUgc3VwZXJcclxuXHRcdFx0Ly8gYnV0IGNoYW5nZXMgd2lsbCBiZSBibG9ja2VkIGlmIGFsbCB0aGUgYWZmZWN0ZWQgcHJvcHNcclxuXHRcdFx0Ly8gYXJlIGFsc28gaW4gbWFpbi5cclxuXHRcdFx0aWYgKHRoaXMuc3RhY2suc3VwZXIpIHtcclxuXHRcdFx0XHR0aGlzLnN0YWNrLnN1cGVyLm9ic2VydmUocHJvcHMsIChhLCBiLCBlKSA9PiB7XHJcblx0XHRcdFx0XHRpZiAoZS5maWVsZHMuZmlsdGVyKHByb3AgPT4gIV9oYXModGhpcy5zdGFjay5sb2NhbCwgcHJvcCwgdHJhcCkgJiYgIV9oYXModGhpcy5zdGFjay5tYWluLCBwcm9wLCB0cmFwKSkubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBjYWxsYmFjayhhLCBiLCBlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LCBvcHRpb25zLCB0cmFwKTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBPYnNlcnZlIG1haW4sIGZvciBzdXJlXHJcblx0XHRcdGlmIChfaXNUeXBlT2JqZWN0KHRoaXMuc3RhY2subWFpbikpIHtcclxuXHRcdFx0XHR0cmFwLm9ic2VydmUodGhpcy5zdGFjay5tYWluLCBwcm9wcywgKGEsIGIsIGUpID0+IHtcclxuXHRcdFx0XHRcdGlmIChlLmZpZWxkcy5maWx0ZXIocHJvcCA9PiAhX2hhcyh0aGlzLnN0YWNrLmxvY2FsLCBwcm9wLCB0cmFwKSkubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBjYWxsYmFjayhhLCBiLCBlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9LCBvcHRpb25zKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBVbmJpbmRzIGNhbGxiYWNrcyBwcmV2aW91c2x5IGJvdW5kXHJcblx0ICogd2l0aCBvYnNlcnZlKClcclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmd8YXJyYXQgXHRcdHByb3BzXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uXHRcdCBcdGNhbGxiYWNrXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHQgXHRvcHRpb25zXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHQgXHR0cmFwXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIENvbnRleHRzXHJcblx0ICovXHJcblx0dW5vYnNlcnZlKHByb3BzLCBjYWxsYmFjaywgb3B0aW9ucywgdHJhcCA9IHt9KSB7XHJcblx0XHRpZiAodHJhcC51bm9ic2VydmUpIHtcclxuXHRcdFx0aWYgKHRoaXMuc3RhY2suc3VwZXIpIHtcclxuXHRcdFx0XHR0aGlzLnN0YWNrLnN1cGVyLnVub2JzZXJ2ZShwcm9wcywgY2FsbGJhY2ssIG9wdGlvbnMsIHRyYXApO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIE9ic2VydmUgbWFpbiwgZm9yIHN1cmVcclxuXHRcdFx0aWYgKHRoaXMuc3RhY2subWFpbikge1xyXG5cdFx0XHRcdHRyYXAudW5vYnNlcnZlKHRoaXMuc3RhY2subWFpbiwgcHJvcHMsIGNhbGxiYWNrLCBvcHRpb25zKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBUcmllcyB0aGUgaGFuZGxlciBvbiB0aGUgZGlmZmVyZW50IGNvbnRleHRzIGluIHRoZSBzdGFjay5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmd8bnVtYmVyIFx0cHJvcFxyXG5cdCAqIEBwYXJhbSBmdW5jdGlvblx0XHQgXHRjYWxsYmFja1xyXG5cdCAqIEBwYXJhbSBmdW5jdGlvblx0XHQgXHRmaW5hbFxyXG5cdCAqXHJcblx0ICogQHJldHVybiBDb250ZXh0c1xyXG5cdCAqL1xyXG5cdGhhbmRsZShwcm9wLCBjYWxsYmFjaywgZmluYWwsIGxldmVsID0gMCkge1xyXG5cdFx0dmFyIGNhbGxNYWluID0gKCkgPT4ge1xyXG5cdFx0XHRyZXR1cm4gY2FsbGJhY2sodGhpcy5zdGFjay5tYWluLCBudWxsLCAoKSA9PiB7XHJcblx0XHRcdFx0aWYgKHRoaXMuc3RhY2suc3VwZXIpIHtcclxuXHRcdFx0XHRcdHJldHVybiB0aGlzLnN0YWNrLnN1cGVyLmhhbmRsZShwcm9wLCBjYWxsYmFjaywgZmluYWwsIGxldmVsICsgMSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmIChmaW5hbCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGZpbmFsKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCBsZXZlbCk7XHJcblx0XHR9O1xyXG5cdFx0Ly8gTm9ybWFsbHksIHdlIHdvdWxkIGJlZ2luIHdpdGggbG9jYWwuLi5cclxuXHRcdC8vIGJ1dCBubyBpZi4uLlxyXG5cdFx0aWYgKHByb3AgPT09ICd0b1N0cmluZycgJiYgdGhpcy5zdGFjay5sb2NhbC50b1N0cmluZyA9PT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZykge1xyXG5cdFx0XHRyZXR1cm4gY2FsbE1haW4oKTtcclxuXHRcdH1cclxuXHRcdC8vIENvbmRpdGlvbnMgYXJlIHJpZ2h0LCB3ZSBiZWdpbiB3aXRoIGxvY2FsXHJcblx0XHRyZXR1cm4gY2FsbGJhY2sodGhpcy5zdGFjay5sb2NhbCwgdGhpcy5zdGFjay4kbG9jYWwsIGNhbGxNYWluLCBsZXZlbCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBSZXR1cm5zIGEgcHJvcGVydHkncyB2YWx1ZSBmcm9tIHRoZSBmaXJzdCBwb3NzZXNzaW5nIGNvbnRleHQuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nfG51bWJlciBwcm9wXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHR0cmFwXHJcblx0ICogQHBhcmFtIGJvb2xcdFx0XHRiaW5kVGhpc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiBtaXhlZFxyXG5cdCAqL1xyXG5cdGdldChwcm9wLCB0cmFwID0ge30sIGJpbmRUaGlzID0gdHJ1ZSkge1xyXG5cdFx0aWYgKHByb3AgaW5zdGFuY2VvZiBTdHJpbmcpIHtcclxuXHRcdFx0Ly8gaW5jYXNlIHdlIHJlY2lldmVkIG5ldyBTdHJpbmcoKVxyXG5cdFx0XHRwcm9wID0gcHJvcCArICcnO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMuaGFuZGxlKHByb3AsIChjb250eHRPYmosIGNvbnR4dE1ldGEsIGFkdmFuY2UsIGxldmVsKSA9PiB7XHJcblx0XHRcdHZhciB2YWwgPSBfZ2V0KGNvbnR4dE9iaiwgcHJvcCwgdHJhcCk7XHJcblx0XHRcdC8vIGFza2luZyBmaXJzdCBtdWdodCBub3QgZ28gd2VsbCBnZW5lcmFsbHkgJiYgX2hhcyh0aGlzW2ldLCBwcm9wLCB0cmFwKVxyXG5cdFx0XHRpZiAoIV9pc1VuZGVmaW5lZCh2YWwpIHx8IF9oYXMoY29udHh0T2JqLCBwcm9wLCB0cmFwKSkge1xyXG5cdFx0XHRcdGlmIChfaXNGdW5jdGlvbih2YWwpICYmICFfaXNDbGFzcyh2YWwpICYmIGJpbmRUaGlzKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdmFsLmJpbmQoY29udHh0T2JqKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHZhbDtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gYWR2YW5jZSgpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFVwZGF0ZXMgYSBwcm9wZXJ0eSdzIHZhbHVlIGZyb20gdGhlIGZpcnN0IHBvc3Nlc3NpbmcgY29udGV4dC5cclxuXHQgKiBPciBhZGRzIGEgbmV3IGNvbnRleHQgdG8gc2V0IHRoZSBwcm9wZXJ0eS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmd8bnVtYmVyIHByb3BcclxuXHQgKiBAcGFyYW0gbWl4ZWRcdFx0XHR2YWxcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdHRyYXBcclxuXHQgKiBAcGFyYW0gYm9vbFx0XHRcdGluaXRLZXl3b3JkXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGJvb2xcclxuXHQgKi9cclxuXHRzZXQocHJvcCwgdmFsLCB0cmFwID0ge30sIGluaXRLZXl3b3JkID0gZmFsc2UpIHtcclxuXHRcdGlmICh0aGlzLnR5cGUgPT09IDIgJiYgaW5pdEtleXdvcmQgPT09ICd2YXInICYmIHRoaXMuc3RhY2suc3VwZXIpIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuc3RhY2suc3VwZXIuc2V0KHByb3AsIHZhbCwgdHJhcCwgaW5pdEtleXdvcmQpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHByb3AgaW5zdGFuY2VvZiBTdHJpbmcpIHtcclxuXHRcdFx0Ly8gaW5jYXNlIHdlIHJlY2lldmVkIG5ldyBTdHJpbmcoKVxyXG5cdFx0XHRwcm9wID0gcHJvcCArICcnO1xyXG5cdFx0fVxyXG5cdFx0Y29uc3QgX3NldCA9IChjbnR4dCwgcHJvcCwgdmFsLCB0cmFwKSA9PiB7XHJcblx0XHRcdGlmICh0cmFwLnNldCkge1xyXG5cdFx0XHRcdHJldHVybiB0cmFwLnNldChjbnR4dCwgcHJvcCwgdmFsKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRjbnR4dFtwcm9wXSA9IHZhbDtcclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9O1xyXG5cdFx0cmV0dXJuIHRoaXMuaGFuZGxlKGluaXRLZXl3b3JkID8gdHJ1ZSA6IHByb3AsIChjb250eHRPYmosIGxvY2FsQ29udHh0TWV0YSwgYWR2YW5jZSkgPT4ge1xyXG5cdFx0XHQvLyBXaGF0ZXZlciB0aGUgbGV2ZWwgb2YgbG9jYWxDb250ZXh0Li4uXHJcblx0XHRcdGlmIChsb2NhbENvbnR4dE1ldGEgJiYgbG9jYWxDb250eHRNZXRhW3Byb3BdID09PSAnY29uc3QnKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdDT05TVCAnICsgcHJvcCArICcgY2Fubm90IGJlIG1vZGlmaWVkIScpO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIFNldCB0aGlzIGxvY2FsbHksIHdlIHdvbnQgYmUgZ2V0dGluZyB0byBhZHZhbmNlKClcclxuXHRcdFx0aWYgKGluaXRLZXl3b3JkKSB7XHJcblx0XHRcdFx0aWYgKCFbJ3ZhcicsICdsZXQnLCAnY29uc3QnXS5pbmNsdWRlcyhpbml0S2V5d29yZCkpIHtcclxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignVW5yZWNvZ25pemVkIGRlY2xhcmF0b3I6ICcgKyBpbml0S2V5d29yZCArICchJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGxvY2FsQ29udHh0TWV0YVtwcm9wXSA9IGluaXRLZXl3b3JkO1xyXG5cdFx0XHRcdHJldHVybiBfc2V0KGNvbnR4dE9iaiwgcHJvcCwgdmFsLCB0cmFwKTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBGb3IgYW55IG90aGVyIGNvbnRleCwgaXQgbXVzdCBhbHJlYWR5IGV4aXN0c1xyXG5cdFx0XHRpZiAoX2hhcyhjb250eHRPYmosIHByb3AsIHRyYXApKSB7XHJcblx0XHRcdFx0cmV0dXJuIF9zZXQoY29udHh0T2JqLCBwcm9wLCB2YWwsIHRyYXApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBhZHZhbmNlKCk7XHJcblx0XHR9LCAoKSA9PiB7dGhyb3cgbmV3IEVycm9yKCdcIicgKyBwcm9wICsgJ1wiIGlzIHVuZGVmaW5lZCEnKTt9KTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogRGVsZXRlcyBhIHByb3BlcnR5IGZyb20gdGhlIGZpcnN0IHBvc3Nlc3NpbmcgY29udGV4dC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmd8bnVtYmVyIHByb3BcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdHRyYXBcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYm9vbFxyXG5cdCAqL1xyXG5cdGRlbChwcm9wLCB0cmFwID0ge30pIHtcclxuXHRcdGlmIChwcm9wIGluc3RhbmNlb2YgU3RyaW5nKSB7XHJcblx0XHRcdC8vIGluY2FzZSB3ZSByZWNpZXZlZCBuZXcgU3RyaW5nKClcclxuXHRcdFx0cHJvcCA9IHByb3AgKyAnJztcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLmhhbmRsZShwcm9wLCAoY29udHh0T2JqLCBjb250eHRNZXRhLCBhZHZhbmNlKSA9PiB7XHJcblx0XHRcdGlmIChfaGFzKGNvbnR4dE9iaiwgcHJvcCwgdHJhcCkpIHtcclxuXHRcdFx0XHRpZiAoY29udHh0TWV0YSkge1xyXG5cdFx0XHRcdFx0ZGVsZXRlIGNvbnR4dE1ldGFbcHJvcF07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmICh0cmFwLmRlbGV0ZVByb3BlcnR5IHx8IHRyYXAuZGVsKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gKHRyYXAuZGVsZXRlUHJvcGVydHkgfHwgdHJhcC5kZWwpKGNvbnR4dE9iaiwgcHJvcCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGRlbGV0ZSBjb250eHRPYmpbcHJvcF07XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGFkdmFuY2UoKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogVGVzdHMgaWYgYSBwcm9wZXJ0eSBleGlzdHMgaW4gYW55IGNvbnRleHQuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nfG51bWJlciBwcm9wXHJcblx0ICogQHBhcmFtIHN0cmluZ3xudW1iZXIgcHJvcDJcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdHRyYXBcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYm9vbFxyXG5cdCAqL1xyXG5cdGhhcyhwcm9wLCBwcm9wMiwgdHJhcCA9IHt9KSB7XHJcblx0XHRpZiAocHJvcCBpbnN0YW5jZW9mIFN0cmluZykge1xyXG5cdFx0XHQvLyBpbmNhc2Ugd2UgcmVjaWV2ZWQgbmV3IFN0cmluZygpXHJcblx0XHRcdHByb3AgPSBwcm9wICsgJyc7XHJcblx0XHR9XHJcblx0XHRpZiAocHJvcDIgaW5zdGFuY2VvZiBTdHJpbmcpIHtcclxuXHRcdFx0Ly8gaW5jYXNlIHdlIHJlY2lldmVkIG5ldyBTdHJpbmcoKVxyXG5cdFx0XHRwcm9wMiA9IHByb3AyICsgJyc7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcy5oYW5kbGUocHJvcCwgKGNvbnR4dE9iaiwgY29udHh0TWV0YSwgYWR2YW5jZSkgPT4ge1xyXG5cdFx0XHRpZiAoX2hhcyhjb250eHRPYmosIHByb3AsIHRyYXApKSB7XHJcblx0XHRcdFx0dmFyIGNvbnRleHRPYmoyID0gX2dldChjb250eHRPYmosIHByb3AsIHRyYXApO1xyXG5cdFx0XHRcdHJldHVybiBfaGFzKGNvbnRleHRPYmoyLCBwcm9wMiwgdHJhcCk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGFkdmFuY2UoKTtcclxuXHRcdH0sICgpID0+IHt0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIHByb3AgKyAnXCIgaXMgdW5kZWZpbmVkIScpO30pO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBUZXN0cyBpZiBhIHByb3BlcnR5IGV4aXN0cyBpbiBhbnkgY29udGV4dC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmd8bnVtYmVyIHByb3BcclxuXHQgKiBAcGFyYW0gYXJyYXlcdFx0XHRhcmdzXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHR0cmFwXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG1peGVkXHJcblx0ICovXHJcblx0ZXhlYyhwcm9wLCBhcmdzLCB0cmFwID0ge30pIHtcclxuXHRcdGlmIChwcm9wIGluc3RhbmNlb2YgU3RyaW5nKSB7XHJcblx0XHRcdC8vIGluY2FzZSB3ZSByZWNpZXZlZCBuZXcgU3RyaW5nKClcclxuXHRcdFx0cHJvcCA9IHByb3AgKyAnJztcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLmhhbmRsZShwcm9wLCAoY29udHh0T2JqLCBjb250eHRNZXRhLCBhZHZhbmNlKSA9PiB7XHJcblx0XHRcdHZhciBmbiA9IF9nZXQoY29udHh0T2JqLCBwcm9wLCB0cmFwKTtcclxuXHRcdFx0aWYgKCFfaXNVbmRlZmluZWQoZm4pIHx8IF9oYXMoY29udHh0T2JqLCBwcm9wLCB0cmFwKSkge1xyXG5cdFx0XHRcdGlmICghX2lzRnVuY3Rpb24oZm4pKSB7XHJcblx0XHRcdFx0XHRpZiAodHJhcC5leGVjKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiB0cmFwLmV4ZWMoY29udHh0T2JqLCBwcm9wLCBhcmdzKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignXCInICsgcHJvcCArICdcIiBpcyBub3QgYSBmdW5jdGlvbiEgKENhbGxlZCBvbiB0eXBlOiAnICsgdHlwZW9mIGNvbnR4dE9iaiArICcuKScpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAodHJhcC5hcHBseSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHRyYXAuYXBwbHkoZm4sIGNvbnR4dE9iaiwgYXJncyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiBmbi5hcHBseShjb250eHRPYmosIGFyZ3MpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBhZHZhbmNlKCk7XHJcblx0XHR9LCAoKSA9PiB7XHJcblx0XHRcdGlmICh0cmFwLmV4ZWNVbmtub3duKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRyYXAuZXhlY1Vua25vd24odGhpcywgcHJvcCwgYXJncyk7XHJcblx0XHRcdH1cclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdcIicgKyBwcm9wICsgJygpXCIgaXMgdW5kZWZpbmVkIScpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBGYWN0b3J5IG1ldGhvZCBmb3IgbWFraW5nIGEgQ29udGV4dHMgaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gYXJyYXl8b2JqZWN0IFx0Y250eHRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gQ29udGV4dHNcclxuXHQgKi9cclxuXHRzdGF0aWMgY3JlYXRlKGNudHh0KSB7XHJcblx0XHRyZXR1cm4gY250eHQgaW5zdGFuY2VvZiBDb250ZXh0cyA/IGNudHh0IDogbmV3IENvbnRleHRzKHtcclxuXHRcdFx0bWFpbjogY250eHQsXHJcblx0XHR9KTtcclxuXHR9XHJcbn07XHJcblxyXG5jb25zdCBfZ2V0ID0gKGNudHh0LCBwcm9wLCB0cmFwKSA9PiB0cmFwLmdldCAmJiBfaXNUeXBlT2JqZWN0KGNudHh0KSAmJiAhX2lzTnVsbChjbnR4dCkgPyB0cmFwLmdldChjbnR4dCwgcHJvcCkgXHJcblx0OiAoKF9pc1R5cGVPYmplY3QoY250eHQpIHx8IF9pc1N0cmluZyhjbnR4dCkgfHwgX2lzTnVtYmVyKGNudHh0KSkgJiYgIV9pc051bGwoY250eHQpID8gY250eHRbcHJvcF0gOiB1bmRlZmluZWQpO1xyXG5cclxuY29uc3QgX2hhcyA9IChjbnR4dCwgcHJvcCwgdHJhcCkgPT4gdHJhcC5oYXMgJiYgX2lzVHlwZU9iamVjdChjbnR4dCkgJiYgIV9pc051bGwoY250eHQpID8gdHJhcC5oYXMoY250eHQsIHByb3ApIDogKFxyXG5cdF9pc1R5cGVPYmplY3QoY250eHQpICYmICFfaXNOdWxsKGNudHh0KSA/IHByb3AgaW4gY250eHQgOiAhX2lzTnVsbChjbnR4dCkgJiYgIV9pc1VuZGVmaW5lZChjbnR4dFtwcm9wXSlcclxuKTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVHlwZUZ1bmN0aW9uIGZyb20gJy4vaXNUeXBlRnVuY3Rpb24uanMnO1xyXG5cclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwiY2xhc3NcIi5cclxuICpcclxuICogQHBhcmFtIG9iamVjdCBcdFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIF9pc1R5cGVGdW5jdGlvbih2YWwpICYmIC9eY2xhc3NcXHM/Ly50ZXN0KEZ1bmN0aW9uLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHRoZSBzdHJpbmcgaXMgd2FyYXBwZWQgd2l0aCB0aGUgZ2l2ZW4gb3BlbmluZyBhbmQgY2xvc2luZyB0YWdzLlxyXG4gKlxyXG4gKiBAcGFyYW0gIHN0cmluZyAgc3ViamVjdFxyXG4gKiBAcGFyYW0gIHN0cmluZyAgb3BlbmluZ1RhZ1xyXG4gKiBAcGFyYW0gIHN0cmluZyAgY2xvc2luZ1RhZ1xyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN1YmplY3QsIG9wZW5pbmdUYWcsIGNsb3NpbmdUYWcpIHtcclxuXHRyZXR1cm4gc3ViamVjdC5zdGFydHNXaXRoKG9wZW5pbmdUYWcpICYmIHN1YmplY3QuZW5kc1dpdGgoY2xvc2luZ1RhZyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogUmV0dXJuIHRoZSByZW1haW5kZXIgb2YgYSBzdHJpbmcgYWZ0ZXIgYSBnaXZlbiB2YWx1ZS5cclxuICpcclxuICogQHBhcmFtICBzdHJpbmcgIHN1YmplY3RcclxuICogQHBhcmFtICBzdHJpbmcgIHNlYXJjaFxyXG4gKiBAcGFyYW0gIGJvb2xcdCAgIGFmdGVyTGFzdFxyXG4gKlxyXG4gKiBAcmV0dXJuIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3ViamVjdCwgc2VhcmNoLCBhZnRlckxhc3QgPSBmYWxzZSkge1xyXG5cdGlmIChzZWFyY2ggPT0gJycpIHtcclxuXHRcdHJldHVybiBzdWJqZWN0O1xyXG5cdH1cclxuXHR2YXIgcG9zID0gYWZ0ZXJMYXN0ID8gc3ViamVjdC5sYXN0SW5kZXhPZihzZWFyY2gpIDogc3ViamVjdC5pbmRleE9mKHNlYXJjaCk7XHJcblx0aWYgKHBvcyA9PT0gLTEpIHtcclxuXHRcdHJldHVybiAnJztcclxuXHR9XHJcblx0cmV0dXJuIHN1YmplY3Quc3Vic3RyKHBvcyArIHNlYXJjaC5sZW5ndGgpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFJldHVybiB0aGUgcGFydCBvZiBhIHN0cmluZyBiZWZvcmUgYSBnaXZlbiB2YWx1ZS5cclxuICpcclxuICogQHBhcmFtICBzdHJpbmcgIHN1YmplY3RcclxuICogQHBhcmFtICBzdHJpbmcgIHNlYXJjaFxyXG4gKiBAcGFyYW0gIGJvb2xcdCAgIGJlZm9yZUxhc3RcclxuICpcclxuICogQHJldHVybiBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN1YmplY3QsIHNlYXJjaCwgYmVmb3JlTGFzdCA9IGZhbHNlKSB7XHJcblx0aWYgKHNlYXJjaCA9PSAnJykge1xyXG5cdFx0cmV0dXJuIHN1YmplY3Q7XHJcblx0fVxyXG5cdHZhciBwb3MgPSBiZWZvcmVMYXN0ID8gc3ViamVjdC5sYXN0SW5kZXhPZihzZWFyY2gpIDogc3ViamVjdC5pbmRleE9mKHNlYXJjaCk7XHJcblx0aWYgKHBvcyA9PT0gLTEpIHtcclxuXHRcdHJldHVybiBzdWJqZWN0O1xyXG5cdH1cclxuXHRyZXR1cm4gc3ViamVjdC5zdWJzdHIoMCwgcG9zKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9hZnRlciBmcm9tICcuL2FmdGVyLmpzJztcclxuaW1wb3J0IF9iZWZvcmVMYXN0IGZyb20gJy4vYmVmb3JlTGFzdC5qcyc7XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgc3RyaW5nIHdpdGhvdXQgdGhlIGdpdmVuIG9wZW5pbmcgYW5kIGNsb3NpbmcgdGFncy5cclxuICpcclxuICogQHBhcmFtICBzdHJpbmcgIHN1YmplY3RcclxuICogQHBhcmFtICBzdHJpbmcgIG9wZW5pbmdUYWdcclxuICogQHBhcmFtICBzdHJpbmcgIGNsb3NpbmdUYWdcclxuICpcclxuICogQHJldHVybiBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN1YmplY3QsIG9wZW5pbmdUYWcsIGNsb3NpbmdUYWcpIHtcclxuXHRyZXR1cm4gX2JlZm9yZUxhc3QoX2FmdGVyKHN1YmplY3QsIG9wZW5pbmdUYWcpLCBjbG9zaW5nVGFnKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9iZWZvcmUgZnJvbSAnLi9iZWZvcmUuanMnO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybiB0aGUgcGFydCBvZiBhIHN0cmluZyBiZWZvcmUgbGFzdCBvY2N1cmVuY2Ugb2YgYSBnaXZlbiB2YWx1ZS5cclxuICpcclxuICogQHBhcmFtICBzdHJpbmcgIHN1YmplY3RcclxuICogQHBhcmFtICBzdHJpbmcgIHNlYXJjaFxyXG4gKlxyXG4gKiBAcmV0dXJuIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3ViamVjdCwgc2VhcmNoKSB7XHJcblx0cmV0dXJuIF9iZWZvcmUoc3ViamVjdCwgc2VhcmNoLCB0cnVlKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEFic3RyYWN0aW9uSW50ZXJmYWNlXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBFeHBySW50ZXJmYWNlIHt9O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJmYWNlLnByb3RvdHlwZSwgJ2pzZW5UeXBlJywge1xyXG5cdGdldCgpIHsgcmV0dXJuICdBYnN0cmFjdGlvbic7IH0sXHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCBJbnRlcmZhY2U7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfd3JhcHBlZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci93cmFwcGVkLmpzJztcclxuaW1wb3J0IF91bndyYXAgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvdW53cmFwLmpzJztcclxuaW1wb3J0IEFic3RyYWN0aW9uSW50ZXJmYWNlIGZyb20gJy4vQWJzdHJhY3Rpb25JbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi4vTGV4ZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBBYnN0cmFjdGlvbiBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEFic3RyYWN0aW9uID0gY2xhc3MgZXh0ZW5kcyBBYnN0cmFjdGlvbkludGVyZmFjZSB7XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoZXhwcikge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMuZXhwciA9IGV4cHI7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGV2YWwoY29udGV4dCA9IG51bGwsIHRyYXAgPSB7fSkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZXhwci5ldmFsKGNvbnRleHQsIHRyYXApO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKGNvbnRleHQgPSBudWxsKSB7XHJcblx0XHRyZXR1cm4gJygnICsgdGhpcy5leHByLnRvU3RyaW5nKGNvbnRleHQpICsgJyknO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBBYnN0cmFjdGlvbikge1xyXG5cdFx0aWYgKF93cmFwcGVkKGV4cHIsICcoJywgJyknKSAmJiAhTGV4ZXIubWF0Y2goZXhwciwgWycgJ10pLmxlbmd0aCkge1xyXG5cdFx0XHRyZXR1cm4gbmV3IFN0YXRpYyhcclxuXHRcdFx0XHRwYXJzZUNhbGxiYWNrKF91bndyYXAoZXhwciwgJygnLCAnKScpKVxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgQWJzdHJhY3Rpb247XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBFeHBySW50ZXJmYWNlIGZyb20gJy4uL0V4cHJJbnRlcmZhY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBBcnJJbnRlcmZhY2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBJbnRlcmZhY2UgPSBjbGFzcyBleHRlbmRzIEV4cHJJbnRlcmZhY2Uge307XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlcmZhY2UucHJvdG90eXBlLCAnanNlblR5cGUnLCB7XHJcblx0Z2V0KCkgeyByZXR1cm4gJ0FycmF5VHlwZSc7IH0sXHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCBJbnRlcmZhY2U7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfd3JhcHBlZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci93cmFwcGVkLmpzJztcclxuaW1wb3J0IF91bndyYXAgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvdW53cmFwLmpzJztcclxuaW1wb3J0IEFyckludGVyZmFjZSBmcm9tICcuL0FyckludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEFycmF5IHV0aWxzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgQXJyID0gY2xhc3MgZXh0ZW5kcyBBcnJJbnRlcmZhY2Uge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoZXhwcnMpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLmV4cHJzID0gZXhwcnMgfHwgW107XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0aW5oZXJpdChTdXBlcikge1xyXG5cdFx0aWYgKFN1cGVyIGluc3RhbmNlb2YgQXJySW50ZXJmYWNlKSB7XHJcblx0XHRcdHZhciBuZXdFeHBycyA9IFN1cGVyLmV4cHJzLmZpbHRlcihleHByQSA9PiB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuZXhwcnMucmVkdWNlKCh1bmlxdWVTb0ZhciwgZXhwckIpID0+IHVuaXF1ZVNvRmFyICYmICFleHByQS5ldmVuKGV4cHJCKSwgdHJ1ZSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHR0aGlzLmV4cHJzID0gbmV3RXhwcnMuY29uY2F0KHRoaXMuZXhwcnMpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGV2YWwoY29udGV4dCA9IG51bGwsIHRyYXAgPSB7fSkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZXhwcnMubWFwKGV4cHIgPT4gZXhwci5ldmFsKGNvbnRleHQsIHRyYXApKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHR0b1N0cmluZyhjb250ZXh0ID0gbnVsbCkge1xyXG5cdFx0cmV0dXJuICdbJyArIHRoaXMuZXhwcnMubWFwKGV4cHIgPT4gZXhwci50b1N0cmluZyhjb250ZXh0KSkuam9pbignLCAnKSArICddJztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgcGFyc2UoZXhwciwgcGFyc2VDYWxsYmFjaywgU3RhdGljID0gQXJyKSB7XHJcblx0XHRpZiAoX3dyYXBwZWQoZXhwciwgJ1snLCAnXScpICYmICFMZXhlci5tYXRjaChleHByLnRyaW0oKSwgWycgJ10pLmxlbmd0aCkge1xyXG5cdFx0XHR2YXIgc3BsaXRzID0gTGV4ZXIuc3BsaXQoX3Vud3JhcChleHByLCAnWycsICddJyksIFsnLCddKVxyXG5cdFx0XHRcdC5tYXAobiA9PiBuLnRyaW0oKSkuZmlsdGVyKG4gPT4gbikubWFwKGV4cHIgPT4gcGFyc2VDYWxsYmFjayhleHByKSk7XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKHNwbGl0cyk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IEFycjtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEFyZ3VtZW50c0ludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEludGVyZmFjZSA9IGNsYXNzIGV4dGVuZHMgRXhwckludGVyZmFjZSB7fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVyZmFjZS5wcm90b3R5cGUsICdqc2VuVHlwZScsIHtcclxuXHRnZXQoKSB7IHJldHVybiAnQXJndW1lbnRzJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF93cmFwcGVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3dyYXBwZWQuanMnO1xyXG5pbXBvcnQgX3Vud3JhcCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci91bndyYXAuanMnO1xyXG5pbXBvcnQgQXJndW1lbnRzSW50ZXJmYWNlIGZyb20gJy4vQXJndW1lbnRzSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IExleGVyIGZyb20gJy4uL0xleGVyLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQXJndW1lbnRzIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgQXJndW1lbnRzID0gY2xhc3MgZXh0ZW5kcyBBcmd1bWVudHNJbnRlcmZhY2Uge1xyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGxpc3QgPSBbXSkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMubGlzdCA9IGxpc3Q7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGV2YWwoY29udGV4dCA9IG51bGwsIHRyYXAgPSB7fSkge1xyXG5cdFx0cmV0dXJuIHRoaXMubGlzdC5tYXAoYXJnID0+IGFyZy5ldmFsKGNvbnRleHQsIHRyYXApKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHR0b1N0cmluZyhjb250ZXh0ID0gbnVsbCkge1xyXG5cdFx0cmV0dXJuICcoJyArIHRoaXMubGlzdC5tYXAoYXJnID0+IGFyZy50b1N0cmluZyhjb250ZXh0KSkuam9pbignLCAnKSArICcpJztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgcGFyc2UoZXhwciwgcGFyc2VDYWxsYmFjaywgU3RhdGljID0gQXJndW1lbnRzKSB7XHJcblx0XHR2YXIgYXJnczsgZXhwciA9IGV4cHIudHJpbSgpO1xyXG5cdFx0aWYgKF93cmFwcGVkKGV4cHIsICcoJywgJyknKSAmJiAhTGV4ZXIubWF0Y2goZXhwciwgWycgJ10pLmxlbmd0aCkge1xyXG5cdFx0XHRyZXR1cm4gbmV3IFN0YXRpYyhcclxuXHRcdFx0XHRMZXhlci5zcGxpdChfdW53cmFwKGV4cHIsICcoJywgJyknKSwgWycsJ10pLm1hcChhcmcgPT4gcGFyc2VDYWxsYmFjayhhcmcudHJpbSgpKSlcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IEFyZ3VtZW50cztcclxuIiwiXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgbGlzdCBvZiB1bmlxdWUgaXRlbXMuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheVx0IFx0XHRcdFx0YXJyXHJcbiAqXHQgKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIpIHtcclxuXHRjb25zdCBkaXN0aW5jdCA9ICh2YWx1ZSwgaW5kZXgsIHNlbGYpID0+IHtcclxuXHRcdHJldHVybiBzZWxmLmluZGV4T2YodmFsdWUpID09PSBpbmRleDtcclxuXHR9O1xyXG5cdHJldHVybiBhcnIuZmlsdGVyKGRpc3RpbmN0KTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEFzc2VydGlvbkludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEludGVyZmFjZSA9IGNsYXNzIGV4dGVuZHMgRXhwckludGVyZmFjZSB7fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVyZmFjZS5wcm90b3R5cGUsICdqc2VuVHlwZScsIHtcclxuXHRnZXQoKSB7IHJldHVybiAnQXNzZXJ0aW9uRXhwcmVzc2lvbic7IH0sXHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCBJbnRlcmZhY2U7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfZmlyc3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZmlyc3QuanMnO1xyXG5pbXBvcnQgX2ZsYXR0ZW4gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZmxhdHRlbi5qcyc7XHJcbmltcG9ydCBfdW5pcXVlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3VuaXF1ZS5qcyc7XHJcbmltcG9ydCBBc3NlcnRpb25JbnRlcmZhY2UgZnJvbSAnLi9Bc3NlcnRpb25JbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi4vTGV4ZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBBc3NlcnRpb24gY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBBc3NlcnRpb24gPSBjbGFzcyBleHRlbmRzIEFzc2VydGlvbkludGVyZmFjZSB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoZXhwcnMsIGxvZ2ljKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5leHBycyA9IGV4cHJzO1xyXG5cdFx0dGhpcy5sb2dpYyA9IGxvZ2ljO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHQgZXZhbChjb250ZXh0ID0gbnVsbCwgdHJhcCA9IHt9KSB7XHJcblx0XHRpZiAodGhpcy5sb2dpYyA9PT0gJyEnKSB7XHJcblx0XHRcdHJldHVybiAhX2ZpcnN0KHRoaXMuZXhwcnMpLmV2YWwoY29udGV4dCwgdHJhcCk7XHJcblx0XHR9XHJcblx0XHR2YXIgb3BlcmF0b3JzID0gX2ZsYXR0ZW4oQXNzZXJ0aW9uLm9wZXJhdG9ycyk7XHJcblx0XHR2YXIgbG9naWMgPSAodGhpcy5sb2dpYyB8fCAnJykudHJpbSgpLnRvVXBwZXJDYXNlKCk7XHJcblx0XHR2YXIgaXNPciA9IGxvZ2ljID09PSAoQXNzZXJ0aW9uLm9wZXJhdG9ycy5vciB8fCAnJykudHJpbSgpLnRvVXBwZXJDYXNlKCk7XHJcblx0XHR2YXIgaXNOb3IgPSBsb2dpYyA9PT0gKEFzc2VydGlvbi5vcGVyYXRvcnMubm9yIHx8ICcnKS50cmltKCkudG9VcHBlckNhc2UoKTtcclxuXHRcdHZhciBpc0FuZCA9IGxvZ2ljID09PSAoQXNzZXJ0aW9uLm9wZXJhdG9ycy5hbmQgfHwgJycpLnRyaW0oKS50b1VwcGVyQ2FzZSgpO1xyXG5cdFx0dmFyIGlzTmFuZCA9IGxvZ2ljID09PSAoQXNzZXJ0aW9uLm9wZXJhdG9ycy5uYW5kIHx8ICcnKS50cmltKCkudG9VcHBlckNhc2UoKTtcclxuXHRcdHZhciBsYXN0UmVzdWx0ID0gdHJ1ZSwgdHJ1ZXMgPSAwO1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMuZXhwcnMubGVuZ3RoOyBpICsrKSB7XHJcblx0XHRcdGxhc3RSZXN1bHQgPSB0aGlzLmV4cHJzW2ldLmV2YWwoY29udGV4dCwgdHJhcCk7XHJcblx0XHRcdGlmIChpc0FuZCAmJiAhbGFzdFJlc3VsdCkge1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoaXNOYW5kICYmICFsYXN0UmVzdWx0KSB7XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKGlzT3IgJiYgbGFzdFJlc3VsdCkge1xyXG5cdFx0XHRcdHJldHVybiBsYXN0UmVzdWx0O1xyXG5cdFx0XHR9XHJcblx0XHRcdHRydWVzICs9IGxhc3RSZXN1bHQgPyAxIDogMDtcclxuXHRcdH1cclxuXHRcdGlmIChpc09yKSB7XHJcblx0XHRcdC8vIFdoaWNoIGlzIGZhbHNleSxcclxuXHRcdFx0Ly8gYnkgdmlydHVlIG9mIGdldHRpbmcgaGVyZVxyXG5cdFx0XHRyZXR1cm4gbGFzdFJlc3VsdDtcclxuXHRcdH1cclxuXHRcdGlmIChpc0FuZCB8fCBpc05hbmQpIHtcclxuXHRcdFx0Ly8gRm9yIEFORCBhbmQgTkFORCwgYWxsIGVudHJpZXMgbXVzdCBiZSB0cnVlIGJ5IG5vdyxcclxuXHRcdFx0Ly8gYnkgdmlydHVlIG9mIGdldHRpbmcgaGVyZS5cclxuXHRcdFx0Ly8gRm9yIEFORCwgdGhpcyBtZWFucyB0cnVlOyBmb3IgTkFORCwgZmFsc2VcclxuXHRcdFx0cmV0dXJuIGlzQW5kO1xyXG5cdFx0fVxyXG5cdFx0Ly8gRm9yIE5PUiwgYWxsIGVudHJpZXMgbmVlZCB0byBiZSBmYWxzZVxyXG5cdFx0cmV0dXJuIGlzTm9yICYmIHRydWVzID09PSAwO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdCB0b1N0cmluZyhjb250ZXh0ID0gbnVsbCkge1xyXG5cdFx0aWYgKHRoaXMubG9naWMgPT09ICchJykge1xyXG5cdFx0XHRyZXR1cm4gJyEnICsgX2ZpcnN0KHRoaXMuZXhwcnMpLnRvU3RyaW5nKGNvbnRleHQpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMuZXhwcnMubWFwKGV4cHIgPT4gZXhwci50b1N0cmluZyhjb250ZXh0KSkuam9pbignICcgKyB0aGlzLmxvZ2ljICsgJyAnKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgcGFyc2UoZXhwciwgcGFyc2VDYWxsYmFjaywgU3RhdGljID0gQXNzZXJ0aW9uKSB7XHJcblx0XHRpZiAoZXhwci5zdGFydHNXaXRoKCchJykpIHtcclxuXHRcdFx0cmV0dXJuIG5ldyBTdGF0aWMoXHJcblx0XHRcdFx0W3BhcnNlQ2FsbGJhY2soZXhwci5zdWJzdHIoMSkpXSxcclxuXHRcdFx0XHQnISdcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHRcdHZhciBwYXJzZSA9IExleGVyLmxleChleHByLCBfZmxhdHRlbihTdGF0aWMub3BlcmF0b3JzKSk7XHJcblx0XHRpZiAocGFyc2UudG9rZW5zLmxlbmd0aCA+IDEpIHtcclxuXHRcdFx0dmFyIGxvZ2ljID0gX3VuaXF1ZShwYXJzZS5tYXRjaGVzKTtcclxuXHRcdFx0aWYgKGxvZ2ljLmxlbmd0aCA+IDEpIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1wiQU5EXCIgYW5kIFwiT1JcIiBsb2dpYyBjYW5ub3QgYmUgYXNzZXJ0ZWQgaW4gdGhlIHNhbWUgZXhwcmVzc2lvbjogJyArIGV4cHIgKyAnIScpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKFxyXG5cdFx0XHRcdHBhcnNlLnRva2Vucy5tYXAoZXhwciA9PiBwYXJzZUNhbGxiYWNrKGV4cHIudHJpbSgpKSksXHJcblx0XHRcdFx0X2ZpcnN0KGxvZ2ljKVxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcHJvcCBvYmplY3RcclxuICovXHJcbkFzc2VydGlvbi5vcGVyYXRvcnMgPSB7XHJcblx0YW5kOiAnJiYnLFxyXG5cdG9yOiAnfHwnLFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBBc3NlcnRpb247XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBFeHBySW50ZXJmYWNlIGZyb20gJy4uL0V4cHJJbnRlcmZhY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBBc3NpZ25tZW50SW50ZXJmYWNlXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBFeHBySW50ZXJmYWNlIHt9O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJmYWNlLnByb3RvdHlwZSwgJ2pzZW5UeXBlJywge1xyXG5cdGdldCgpIHsgcmV0dXJuICdBc3NpZ25tZW50RXhwcmVzc2lvbic7IH0sXHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCBJbnRlcmZhY2U7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfbGFzdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9sYXN0LmpzJztcclxuaW1wb3J0IF9iZWZvcmUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvYmVmb3JlLmpzJztcclxuaW1wb3J0IF9hZnRlciBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci9hZnRlci5qcyc7XHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1VuZGVmaW5lZC5qcyc7XHJcbmltcG9ydCBBc3NpZ25tZW50SW50ZXJmYWNlIGZyb20gJy4vQXNzaWdubWVudEludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBSZWZlcmVuY2VJbnRlcmZhY2UgZnJvbSAnLi9SZWZlcmVuY2VJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgQ29udGV4dHMgZnJvbSAnLi4vQ29udGV4dHMuanMnO1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi4vTGV4ZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBBc3NpZ25tZW50IGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgQXNzaWdubWVudCA9IGNsYXNzIGV4dGVuZHMgQXNzaWdubWVudEludGVyZmFjZSB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoaW5pdEtleXdvcmQsIHJlZmVyZW5jZSwgdmFsLCBvcGVyYXRvciA9ICc9Jykge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMuaW5pdEtleXdvcmQgPSBpbml0S2V5d29yZDtcclxuXHRcdHRoaXMucmVmZXJlbmNlID0gcmVmZXJlbmNlO1xyXG5cdFx0dGhpcy52YWwgPSB2YWw7XHJcblx0XHR0aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGV2YWwoY29udGV4dCA9IG51bGwsIHRyYXAgPSB7fSkge1xyXG5cdFx0dmFyIHJlZmVyZW5jZSA9IHRoaXMucmVmZXJlbmNlLmdldEV2YWwoY29udGV4dCwgdHJhcCk7XHJcblx0XHR2YXIgdmFsID0gdGhpcy52YWwuZXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHRcdGlmICghX2lzVW5kZWZpbmVkKHJlZmVyZW5jZS5jb250ZXh0KSAmJiAhX2lzVW5kZWZpbmVkKHJlZmVyZW5jZS5uYW1lKSkge1xyXG5cdFx0XHRyZXR1cm4gQ29udGV4dHMuY3JlYXRlKHJlZmVyZW5jZS5jb250ZXh0KS5zZXQocmVmZXJlbmNlLm5hbWUsIHZhbCwgdHJhcCwgdGhpcy5pbml0S2V5d29yZCk7XHJcblx0XHR9XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIHRoaXMgKyAnXCIgaXMgdW5kZWZpbmVkIScpO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHR0b1N0cmluZyhjb250ZXh0ID0gbnVsbCkge1xyXG5cdFx0cmV0dXJuICh0aGlzLmluaXRLZXl3b3JkID8gdGhpcy5pbml0S2V5d29yZCArICcgJyA6ICcnKVxyXG5cdFx0XHQrIFt0aGlzLnJlZmVyZW5jZS50b1N0cmluZyhjb250ZXh0KSwgdGhpcy5vcGVyYXRvciwgdGhpcy52YWwudG9TdHJpbmcoY29udGV4dCldLmpvaW4oJyAnKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgcGFyc2UoZXhwciwgcGFyc2VDYWxsYmFjaywgU3RhdGljID0gQXNzaWdubWVudCkge1xyXG5cdFx0dmFyIHBhcnNlID0gTGV4ZXIubGV4KGV4cHIsIFN0YXRpYy5vcGVyYXRvcnMpO1xyXG5cdFx0aWYgKHBhcnNlLnRva2Vucy5sZW5ndGggPT09IDIpIHtcclxuXHRcdFx0dmFyIGluaXRLZXl3b3JkLCByZWZlcmVuY2UgPSBwYXJzZS50b2tlbnMuc2hpZnQoKS50cmltKCksIHZhbCA9IHBhcnNlLnRva2Vucy5zaGlmdCgpLnRyaW0oKTtcclxuXHRcdFx0aWYgKFsndmFyJywgJ2xldCcsICdjb25zdCddLmluY2x1ZGVzKF9iZWZvcmUocmVmZXJlbmNlLCAnICcpKSkge1xyXG5cdFx0XHRcdGluaXRLZXl3b3JkID0gX2JlZm9yZShyZWZlcmVuY2UsICcgJyk7XHJcblx0XHRcdFx0cmVmZXJlbmNlID0gX2FmdGVyKHJlZmVyZW5jZSwgJyAnKS50cmltKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCEoKHJlZmVyZW5jZSA9IHBhcnNlQ2FsbGJhY2socmVmZXJlbmNlLCBudWxsLCB7bG9kZ2U6IGZhbHNlfSkpIGluc3RhbmNlb2YgUmVmZXJlbmNlSW50ZXJmYWNlKSBcclxuXHRcdFx0fHwgISh2YWwgPSBwYXJzZUNhbGxiYWNrKHZhbCkpKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGFzc2lnbm1lbnQgZXhwcmVzc2lvbjogJyArIGV4cHIpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKGluaXRLZXl3b3JkLCByZWZlcmVuY2UsIHZhbCwgcGFyc2UubWF0Y2hlc1swXS50cmltKCkpO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcdFxyXG5cclxuLyoqXHJcbiAqIEBwcm9wIGFycmF5XHJcbiAqL1xyXG5Bc3NpZ25tZW50Lm9wZXJhdG9ycyA9IFsnID0gJ107XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IEFzc2lnbm1lbnQ7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBFeHBySW50ZXJmYWNlIGZyb20gJy4uL0V4cHJJbnRlcmZhY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBCbG9ja0ludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEludGVyZmFjZSA9IGNsYXNzIGV4dGVuZHMgRXhwckludGVyZmFjZSB7fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVyZmFjZS5wcm90b3R5cGUsICdqc2VuVHlwZScsIHtcclxuXHRnZXQoKSB7IHJldHVybiAnQmxvY2snOyB9LFxyXG59KTtcclxuZXhwb3J0IGRlZmF1bHQgSW50ZXJmYWNlO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRXhwckludGVyZmFjZSBmcm9tICcuLi9FeHBySW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogUmV0dXJuSW50ZXJmYWNlXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBFeHBySW50ZXJmYWNlIHt9O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJmYWNlLnByb3RvdHlwZSwgJ2pzZW5UeXBlJywge1xyXG5cdGdldCgpIHsgcmV0dXJuICdSZXR1cm5EaXJlY3RpdmUnOyB9LFxyXG59KTtcclxuZXhwb3J0IGRlZmF1bHQgSW50ZXJmYWNlO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX3VuaXF1ZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci91bmlxdWUuanMnO1xyXG5pbXBvcnQgX2JlZm9yZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci9iZWZvcmUuanMnO1xyXG5pbXBvcnQgX2ZsYXR0ZW4gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZmxhdHRlbi5qcyc7XHJcbmltcG9ydCBCbG9ja0ludGVyZmFjZSBmcm9tICcuL0Jsb2NrSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IFJldHVybkludGVyZmFjZSBmcm9tICcuL1JldHVybkludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBDb250ZXh0cyBmcm9tICcuLi9Db250ZXh0cy5qcyc7XHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEJsb2NrIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmxvY2sgZXh0ZW5kcyBCbG9ja0ludGVyZmFjZSB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3Ioc3RtdHMsIGRlbGltKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5zdG10cyA9IHN0bXRzIHx8IFtdO1xyXG5cdFx0dGhpcy5kZWxpbSA9IGRlbGltO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRldmFsKGNvbnRleHQgPSBudWxsLCB0cmFwID0ge30pIHtcclxuXHRcdC8vIEN1cnJlbnQhXHJcblx0XHRjb250ZXh0ID0gQ29udGV4dHMuY3JlYXRlKGNvbnRleHQpO1xyXG5cdFx0Ly8gU3RyaW5naWZpZXMgSlNFTiB2YXJzXHJcblx0XHR2YXIgc3RyaW5naWZ5RWFjaCA9IGxpc3QgPT4gX3VuaXF1ZShsaXN0Lm1hcChleHByID0+IF9iZWZvcmUoX2JlZm9yZShleHByLnRvU3RyaW5nKCksICdbJyksICcoJykpKTtcclxuXHJcblx0XHR2YXIgcmVzdWx0cyA9IFtdO1xyXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnN0bXRzLmxlbmd0aDsgaSArKykge1xyXG5cdFx0XHR2YXIgc3RtdCA9IHRoaXMuc3RtdHNbaV07XHJcblx0XHRcdGlmIChzdG10IGluc3RhbmNlb2YgUmV0dXJuSW50ZXJmYWNlKSB7XHJcblx0XHRcdFx0cmV0dXJuIHN0bXQuZXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXN1bHRzW2ldID0gc3RtdC5ldmFsKGNvbnRleHQsIHRyYXApO1xyXG5cdFx0XHQvLyBMZXRzIGJlIGNhbGxlZC4uLlxyXG5cdFx0XHR2YXIgcHJvcHMgPSBzdHJpbmdpZnlFYWNoKHN0bXQubWV0YS52YXJzKTtcclxuXHRcdFx0Ly9pZiAocHJvcHMubGVuZ3RoKVxyXG5cdFx0XHQoZnVuY3Rpb24oc3RtdCwgcHJvcHMsIHByZXZDb250ZXh0KSB7XHJcblx0XHRcdFx0Ly8gUHJldj9cclxuXHRcdFx0XHRpZiAoMCkge1xyXG5cdFx0XHRcdFx0Ly8gTGV0cyBiZSBjYWxsZWQuLi5cclxuXHRcdFx0XHRcdHByZXZDb250ZXh0LnVub2JzZXJ2ZShwcm9wcywgbnVsbC8qKiByZWdhcmRsZXNzIGNhbGxiYWNrICovLCB7XHJcblx0XHRcdFx0XHRcdHRhZ3M6IFsnI2Jsb2NrJywgc3RtdF0sXHJcblx0XHRcdFx0XHR9LCB0cmFwKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Y29udGV4dC5vYnNlcnZlKHByb3BzLCAoYSwgYiwgZSkgPT4ge1xyXG5cdFx0XHRcdFx0dmFyIGV2YWxSZXR1cm4gPSBzdG10LmV2YWwoY29udGV4dCwgdHJhcCk7XHJcblx0XHRcdFx0XHQvLyBJZiB0aGUgcmVzdWx0IG9mIHRoaXMgZXZhbHVhdGlvbiBpcyBmYWxzZSxcclxuXHRcdFx0XHRcdC8vIGUuc3RvcFByb3BhZ2F0aW9uIHdpbGwgYmUgY2FsbGVkIGFuZCBzdWJzZXF1ZW50IGV4cHJlc3Npb25zXHJcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBldmFsdWF0ZWQuIFNvIHdlIG11c3Qgbm90IGFsbG93IGZhbHNlIHRvIGJlIHJldHVybmVkLlxyXG5cdFx0XHRcdFx0Ly8gQWxsIGV4cHJlc3Npb25zIGFyZSBtZWFudCB0byBiZSBldmFsdWF0ZWQgaW4gcGFyYWxsZWwsIGluZGVwZW5kZW50IG9mIGVhY2ggb3RoZXIuXHJcblx0XHRcdFx0XHRpZiAoZXZhbFJldHVybiAhPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIGV2YWxSZXR1cm47XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSwge29ic2VydmVEb3duOiB0cnVlLCBkYXRhOiBmYWxzZSwgdGFnczogWycjYmxvY2snLCBzdG10XX0sIHRyYXApO1xyXG5cdFx0XHR9KShzdG10LCBwcm9wcywgdGhpcy5wcmV2Q29udGV4dCk7XHJcblx0XHR9XHJcblx0XHR0aGlzLnByZXZDb250ZXh0ID0gY29udGV4dDtcclxuXHRcdHJldHVybiByZXN1bHRzO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHR0b1N0cmluZyhjb250ZXh0ID0gbnVsbCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuc3RtdHMubWFwKHN0bXQgPT4gc3RtdC50b1N0cmluZyhjb250ZXh0KSkuam9pbih0aGlzLmRlbGltKTtcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IEJsb2NrKSB7XHJcblx0XHR2YXIgcGFyc2UgPSBMZXhlci5sZXgoZXhwciArICc7JywgX2ZsYXR0ZW4oU3RhdGljLm9wZXJhdG9ycykuY29uY2F0KFtCbG9jay50ZXN0QmxvY2tFbmRdKSk7XHJcblx0XHRpZiAocGFyc2UubWF0Y2hlcy5sZW5ndGgpIHtcclxuXHRcdFx0cmV0dXJuIG5ldyBTdGF0aWMoXHJcblx0XHRcdFx0cGFyc2UudG9rZW5zLm1hcChzdG10ID0+IHBhcnNlQ2FsbGJhY2soc3RtdC50cmltKCkpKS5maWx0ZXIoYSA9PiBhKSxcclxuXHRcdFx0XHRwYXJzZS5tYXRjaGVzWzBdLnRyaW0oKVxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0c3RhdGljIHRlc3RCbG9ja0VuZChhLCBiKSB7XHJcblx0XHQvLyBDYXNlcyBvZiBjb2RlIGJsb2NrcyB0aGF0IHdvbid0IGVuZCBpbiBcIjtcIlxyXG5cdFx0aWYgKGEuZW5kc1dpdGgoJ30nKSAmJiAhYi50cmltKCkuc3RhcnRzV2l0aCgnZWxzZScpKSB7XHJcblx0XHRcdHJldHVybiAnJztcclxuXHRcdH1cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQHByb3AgYXJyYXlcclxuICovXHJcbkJsb2NrLm9wZXJhdG9ycyA9IFtcclxuXHQnOycsXHJcblx0XCJcXHJcXG5cIixcclxuXTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEJvb2xJbnRlcmZhY2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBJbnRlcmZhY2UgPSBjbGFzcyBleHRlbmRzIEV4cHJJbnRlcmZhY2Uge307XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlcmZhY2UucHJvdG90eXBlLCAnanNlblR5cGUnLCB7XHJcblx0Z2V0KCkgeyByZXR1cm4gJ0Jvb2xlYW5UeXBlJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IExleGVyIGZyb20gJy4uL0xleGVyLmpzJztcclxuaW1wb3J0IEJvb2xJbnRlcmZhY2UgZnJvbSAnLi9Cb29sSW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQm9vbCAoYm9vbGVhbikgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBCb29sID0gY2xhc3MgZXh0ZW5kcyBCb29sSW50ZXJmYWNlIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKHN0YXRlKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5zdGF0ZSA9IHN0YXRlO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRldmFsKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuc3RhdGUudG9Mb3dlckNhc2UoKS50cmltKCkgPT09ICd0cnVlJztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHR0b1N0cmluZygpIHtcclxuXHRcdHJldHVybiB0aGlzLnN0YXRlO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBCb29sKSB7XHJcblx0XHR2YXIgZXhwciA9IGV4cHIudG9Mb3dlckNhc2UoKS50cmltKCk7XHJcblx0XHRpZiAoZXhwciA9PT0gJ3RydWUnIHx8IGV4cHIgPT09ICdmYWxzZScpIHtcclxuXHRcdFx0cmV0dXJuIG5ldyBTdGF0aWMoZXhwcik7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBCb29sO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNVbmRlZmluZWQuanMnO1xyXG5pbXBvcnQgUmVmZXJlbmNlSW50ZXJmYWNlIGZyb20gJy4vUmVmZXJlbmNlSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IENhbGxJbnRlcmZhY2UgZnJvbSAnLi9DYWxsSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IEFyZ3VtZW50cyBmcm9tICcuL0FyZ3VtZW50cy5qcyc7XHJcbmltcG9ydCBDb250ZXh0cyBmcm9tICcuLi9Db250ZXh0cy5qcyc7XHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIENhbGwgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBDYWxsID0gY2xhc3MgZXh0ZW5kcyBDYWxsSW50ZXJmYWNlIHtcclxuXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihyZWZlcmVuY2UsIGFyZ3MpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZTtcclxuXHRcdHRoaXMuYXJncyA9IGFyZ3M7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGV2YWwoY29udGV4dCA9IG51bGwsIHRyYXAgPSB7fSkge1xyXG5cdFx0XHR2YXIgcmVmZXJlbmNlID0gdGhpcy5yZWZlcmVuY2UuZ2V0RXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHRcdFx0dmFyIGFyZ3MgPSB0aGlzLmFyZ3MuZXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHRcdFx0aWYgKCFfaXNVbmRlZmluZWQocmVmZXJlbmNlLmNvbnRleHQpICYmICFfaXNVbmRlZmluZWQocmVmZXJlbmNlLm5hbWUpKSB7XHJcblx0XHRcdFx0cmV0dXJuIENvbnRleHRzLmNyZWF0ZShyZWZlcmVuY2UuY29udGV4dCkuZXhlYyhyZWZlcmVuY2UubmFtZSwgYXJncywgdHJhcCk7XHJcblx0XHRcdH1cclxuXHRcdHRyeSB7XHJcblx0XHR9IGNhdGNoKGUpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdbRXhlY3V0aW9uIEVycm9yXVsnICsgdGhpcyArICddOiAnICsgZS5tZXNzYWdlKTtcclxuXHRcdH1cclxuXHRcdHRocm93IG5ldyBFcnJvcignXCInICsgdGhpcyArICdcIiBpcyB1bmRlZmluZWQhJyk7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKGNvbnRleHQgPSBudWxsKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5yZWZlcmVuY2UudG9TdHJpbmcoY29udGV4dCkgKyB0aGlzLmFyZ3MudG9TdHJpbmcoY29udGV4dCk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IENhbGwpIHtcclxuXHRcdGlmICghZXhwci5zdGFydHNXaXRoKCcoJykgJiYgZXhwci5lbmRzV2l0aCgnKScpICYmICFMZXhlci5tYXRjaChleHByLCBbJyAnXSkubGVuZ3RoKSB7XHJcblx0XHRcdHZhciB0b2tlbnMgPSBMZXhlci5zcGxpdChleHByLCBbXSk7XHJcblx0XHRcdHZhciByZWZlcmVuY2UsIGFyZ3MgPSB0b2tlbnMucG9wKCk7XHJcblx0XHRcdGlmICghKChyZWZlcmVuY2UgPSBwYXJzZUNhbGxiYWNrKHRva2Vucy5qb2luKCcnKSwgbnVsbCwge2xvZGdlOiBmYWxzZX0pKSBpbnN0YW5jZW9mIFJlZmVyZW5jZUludGVyZmFjZSkgXHJcblx0XHRcdHx8ICEoYXJncyA9IHBhcnNlQ2FsbGJhY2soYXJncywgW0FyZ3VtZW50c10pKSkge1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjYWxsIGRpcmVjdGl2ZTogJyArIGV4cHIpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKHJlZmVyZW5jZSwgYXJncyk7XHJcblx0XHR9XHJcblx0fVxyXG59O1x0XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IENhbGw7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBFeHBySW50ZXJmYWNlIGZyb20gJy4uL0V4cHJJbnRlcmZhY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBDb21wYXJpc29uSW50ZXJmYWNlXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBFeHBySW50ZXJmYWNlIHt9O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJmYWNlLnByb3RvdHlwZSwgJ2pzZW5UeXBlJywge1xyXG5cdGdldCgpIHsgcmV0dXJuICdDb21wYXJpc29uRXhwcmVzc2lvbic7IH0sXHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCBJbnRlcmZhY2U7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfZmxhdHRlbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mbGF0dGVuLmpzJztcclxuaW1wb3J0IF9maXJzdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9maXJzdC5qcyc7XHJcbmltcG9ydCBfbGFzdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9sYXN0LmpzJztcclxuaW1wb3J0IF9kaWZmZXJlbmNlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2RpZmZlcmVuY2UuanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc1N0cmluZyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzU3RyaW5nLmpzJztcclxuaW1wb3J0IF9lYWNoIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2VhY2guanMnO1xyXG5pbXBvcnQgQ29tcGFyaXNvbkludGVyZmFjZSBmcm9tICcuL0NvbXBhcmlzb25JbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi4vTGV4ZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBDb21wYXJpc29uIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgQ29tcGFyaXNvbiA9IGNsYXNzIGV4dGVuZHMgQ29tcGFyaXNvbkludGVyZmFjZSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihvcGVyYW5kMSwgb3BlcmFuZDIsIG9wZXJhdG9yKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5vcGVyYW5kMSA9IG9wZXJhbmQxO1xyXG5cdFx0dGhpcy5vcGVyYW5kMiA9IG9wZXJhbmQyO1xyXG5cdFx0dGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRldmFsKGNvbnRleHQgPSBudWxsLCB0cmFwID0ge30pIHtcclxuXHRcdHJldHVybiBDb21wYXJpc29uLmNvbXBhcmUoXHJcblx0XHRcdHRoaXMub3BlcmFuZDEuZXZhbChjb250ZXh0LCB0cmFwKSwgXHJcblx0XHRcdHRoaXMub3BlcmFuZDIuZXZhbChjb250ZXh0LCB0cmFwKSwgXHJcblx0XHRcdHRoaXMub3BlcmF0b3JcclxuXHRcdCk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0dG9TdHJpbmcoY29udGV4dCA9IG51bGwpIHtcclxuXHRcdHJldHVybiBbXHJcblx0XHRcdHRoaXMub3BlcmFuZDEudG9TdHJpbmcoY29udGV4dCksIFxyXG5cdFx0XHR0aGlzLm9wZXJhdG9yLCBcclxuXHRcdFx0dGhpcy5vcGVyYW5kMi50b1N0cmluZyhjb250ZXh0KVxyXG5cdFx0XS5qb2luKCcgJyk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IENvbXBhcmlzb24pIHtcclxuXHRcdHZhciBvcGVyYXRvcnMgPSBfZmxhdHRlbihTdGF0aWMub3BlcmF0b3JzKS5tYXAob3BlciA9PiAnICcgKyBvcGVyICsgJyAnKTtcclxuXHRcdHZhciBwYXJzZSA9IExleGVyLmxleChleHByLCBvcGVyYXRvcnMpO1xyXG5cdFx0aWYgKHBhcnNlLnRva2Vucy5sZW5ndGggPiAxKSB7XHJcblx0XHRcdGlmIChwYXJzZS50b2tlbnMubGVuZ3RoID4gMikge1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignTWFsZm9ybWVkIFwiQ29tcGFyaXNvblwiIGV4cHJlc3Npb246ICcgKyBleHByICsgJyEnKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbmV3IFN0YXRpYyhcclxuXHRcdFx0XHRwYXJzZUNhbGxiYWNrKF9maXJzdChwYXJzZS50b2tlbnMpLnRyaW0oKSksXHJcblx0XHRcdFx0cGFyc2VDYWxsYmFjayhfbGFzdChwYXJzZS50b2tlbnMpLnRyaW0oKSksXHJcblx0XHRcdFx0cGFyc2UubWF0Y2hlc1swXS50cmltKClcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdCAqL1xyXG5cdCBcclxuXHQvKipcclxuXHQgKiBVc2UgdGhlIG9wZXJhdG9yIHR5cGUgdG8gY29tcGFyZSB0aGUgdHdvIG9wZXJhbmRzXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gbWl4ZWRcdFx0b3BlcmFuZDFcdFx0XHJcblx0ICogQHBhcmFtIG1peGVkXHRcdG9wZXJhbmQyXHRcdFxyXG5cdCAqIEBwYXJhbSBzdHJpbmcgXHRvcGVyYXRvclx0XHRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYm9vbFxyXG5cdCAqL1xyXG5cdHN0YXRpYyBjb21wYXJlKG9wZXJhbmQxLCBvcGVyYW5kMiwgb3BlcmF0b3IgPSAnPT0nKSB7XHJcblx0XHRpZiAoX2ZsYXR0ZW4oQ29tcGFyaXNvbi5vcGVyYXRvcnMpLmluZGV4T2Yob3BlcmF0b3IpID09PSAtMSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RoZSBvcGVyYXRvciBcIicgKyBvcGVyYXRvciArICdcIiBpcyBub3QgcmVjb2duaXplZC4nKTtcclxuXHRcdH1cclxuXHRcdHN3aXRjaChvcGVyYXRvcikge1xyXG5cdFx0XHRjYXNlICc9PT0nOlxyXG5cdFx0XHRcdHJldHVybiBvcGVyYW5kMSA9PT0gb3BlcmFuZDI7XHJcblx0XHRcdGNhc2UgJz09JzpcclxuXHRcdFx0Y2FzZSAnPSc6XHJcblx0XHRcdFx0cmV0dXJuIG9wZXJhbmQxID09IG9wZXJhbmQyO1xyXG5cdFx0XHRjYXNlICc+JzpcclxuXHRcdFx0XHRyZXR1cm4gb3BlcmFuZDEgPiBvcGVyYW5kMjtcclxuXHRcdFx0Y2FzZSAnPCc6XHJcblx0XHRcdFx0cmV0dXJuIG9wZXJhbmQxIDwgb3BlcmFuZDI7XHJcblx0XHRcdGNhc2UgJz49JzpcclxuXHRcdFx0XHRyZXR1cm4gb3BlcmFuZDEgPj0gb3BlcmFuZDI7XHJcblx0XHRcdGNhc2UgJzw9JzpcclxuXHRcdFx0XHRyZXR1cm4gb3BlcmFuZDEgPD0gb3BlcmFuZDI7XHJcblx0XHRcdGNhc2UgJyE9JzpcclxuXHRcdFx0XHRyZXR1cm4gb3BlcmFuZDEgIT0gb3BlcmFuZDI7XHJcblx0XHRcdGNhc2UgJyE9PSc6XHJcblx0XHRcdFx0cmV0dXJuIG9wZXJhbmQxICE9PSBvcGVyYW5kMjtcclxuXHRcdFx0Y2FzZSAnXj0nOlxyXG5cdFx0XHRcdHJldHVybiBfaXNTdHJpbmcob3BlcmFuZDEpICYmIG9wZXJhbmQxLnN0YXJ0c1dpdGgob3BlcmFuZDIpO1xyXG5cdFx0XHRjYXNlICckPSc6XHJcblx0XHRcdFx0cmV0dXJuIF9pc1N0cmluZyhvcGVyYW5kMSkgJiYgb3BlcmFuZDEuZW5kc1dpdGgob3BlcmFuZDIpO1xyXG5cdFx0XHRjYXNlICcqPSc6XHJcblx0XHRcdFx0Ly8gQ29udGFpbnNcclxuXHRcdFx0XHRyZXR1cm4gX2lzQXJyYXkob3BlcmFuZDIpIHx8IF9pc1N0cmluZyhvcGVyYW5kMikgPyBvcGVyYW5kMS5pbmRleE9mKG9wZXJhbmQyKSA+IC0xIDogZmFsc2U7XHJcblx0XHRcdGNhc2UgJ349JzpcclxuXHRcdFx0XHQvLyBDb250YWlucyB3b3JkXHJcblx0XHRcdFx0cmV0dXJuIF9pc1N0cmluZyhvcGVyYW5kMSkgJiYgX2lzU3RyaW5nKG9wZXJhbmQyKSAmJiAoJyAnICsgb3BlcmFuZDEgKyAnICcpLmluZGV4T2YoJyAnICsgb3BlcmFuZDIgKyAnICcpID4gLTE7XHJcblx0XHRcdGNhc2UgJz49PCc6IC8vIEJldHdlZW5cclxuXHRcdFx0XHQgaWYgKCEoX2lzQXJyYXkob3BlcmFuZDIpICYmIG9wZXJhbmQyLmxlbmd0aCA9PT0gMikpIHtcclxuXHRcdFx0XHRcdCB0aHJvdyBuZXcgRXJyb3IoJ0EgXFwnQmV0d2VlblxcJyBjb21wYXJpc29uIHJlcXVpcmVzIGFyZ3VtZW50IDIgdG8gYmUgYW4gYXJyYXkgb2YgZXhhY3RseSAyIHZhbHVlcy4nKTtcclxuXHRcdFx0XHQgfVxyXG5cdFx0XHRcdCByZXR1cm4gb3BlcmFuZDEgPj0gb3BlcmFuZDJbMF0gJiYgb3BlcmFuZDEgPD0gb3BlcmFuZDJbMV07XHJcblx0XHJcblx0XHRcdGNhc2UgJy8qKi8nOiAvLyBSZWdleFxyXG5cdFx0XHRcdHJldHVybiBvcGVyYW5kMi5tYXRjaChuZXcgUmVnRXhwKG9wZXJhbmQxKSk7XHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fVxyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQ29tcGFyZXMgdHdvIG9wZXJhbmRzIGZvciBkaWZmZXJlbmNlc1xyXG5cdCAqXHJcblx0ICogQHBhcmFtIG1peGVkXHRcdG9wZXJhbmQxXHRcdFxyXG5cdCAqIEBwYXJhbSBtaXhlZFx0XHRvcGVyYW5kMlx0XHRcclxuXHQgKiBAcGFyYW0gYm9vbFx0IFx0c3RyaWN0XHRcdFxyXG5cdCAqXHJcblx0ICogQHJldHVybiBib29sXHJcblx0ICovXHJcblx0c3RhdGljIGRpZmYob3BlcmFuZDEsIG9wZXJhbmQyLCBzdHJpY3QpIHtcclxuXHRcdHJldHVybiAhQ29tcGFyaXNvbi5jb21wYXJlKG9wZXJhbmQxLCBvcGVyYW5kMiwgc3RyaWN0ID8gJz09PScgOiAnPT0nKTtcclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQHByb3Agb2JqZWN0XHJcbiAqL1xyXG5Db21wYXJpc29uLm9wZXJhdG9ycyA9IHtcclxuXHRleGFjdDoge1xyXG5cdFx0aXM6ICc9PT0nLFxyXG5cdFx0aXNOdWxsOiAnPT09JyxcclxuXHRcdGVxdWFsc1RvOiAnPT0nLFxyXG5cdFx0c3RyaWN0bHlOb3RFcXVhbHNUbzogJyE9PScsXHJcblx0XHRub3RFcXVhbHNUbzogJyE9JyxcclxuXHR9LFxyXG5cdHJlbGF0aXZlOiB7XHJcblx0XHRsZXNzZXJUaGFuOiAnPCcsXHJcblx0XHRncmVhdGVyVGhhbjogJz4nLFxyXG5cdFx0bGVzc2VyVGhhbk9yRXF1YWxzVG86ICc8PScsXHJcblx0XHRncmVhdGVyVGhhbk9yRXF1YWxzVG86ICc+PScsXHJcblx0XHRiZXR3ZWVuOiAnPj08JyxcclxuXHR9LFxyXG5cdHBhcnRpYWw6IHtcclxuXHRcdHN0YXJ0c1dpdGg6ICdePScsXHJcblx0XHRlbmRzV2l0aDogJyQ9JyxcclxuXHRcdGNvbnRhaW5zOiAnKj0nLFxyXG5cdFx0YW55OiAnfj0nLFxyXG5cdFx0aW46ICd+PScsXHJcblx0XHRtYXRjaGVzOiAnLyoqLycsXHJcblx0fSxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgQ29tcGFyaXNvbjtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIENvbmRpdGlvbkludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEludGVyZmFjZSA9IGNsYXNzIGV4dGVuZHMgRXhwckludGVyZmFjZSB7fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVyZmFjZS5wcm90b3R5cGUsICdqc2VuVHlwZScsIHtcclxuXHRnZXQoKSB7IHJldHVybiAnVGVybmFyeUNvbmRpdGlvbmFsJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IExleGVyIGZyb20gJy4uL0xleGVyLmpzJztcclxuaW1wb3J0IENvbmRpdGlvbkludGVyZmFjZSBmcm9tICcuL0NvbmRpdGlvbkludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIENvbmRpdGlvbiBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IENvbmRpdGlvbiA9IGNsYXNzIGV4dGVuZHMgQ29uZGl0aW9uSW50ZXJmYWNlIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGFzc2VydGlvbiwgb25UcnVlLCBvbkZhbHNlKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5hc3NlcnRpb24gPSBhc3NlcnRpb247XHJcblx0XHR0aGlzLm9uVHJ1ZSA9IG9uVHJ1ZTtcclxuXHRcdHRoaXMub25GYWxzZSA9IG9uRmFsc2U7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGV2YWwoY29udGV4dCA9IG51bGwsIHRyYXAgPSB7fSkge1xyXG5cdFx0cmV0dXJuIHRoaXMuYXNzZXJ0aW9uLmV2YWwoY29udGV4dCwgdHJhcCkgXHJcblx0XHRcdD8gdGhpcy5vblRydWUuZXZhbChjb250ZXh0LCB0cmFwKSBcclxuXHRcdFx0OiB0aGlzLm9uRmFsc2UuZXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHR0b1N0cmluZyhjb250ZXh0ID0gbnVsbCkge1xyXG5cdFx0cmV0dXJuIFtcclxuXHRcdFx0dGhpcy5hc3NlcnRpb24udG9TdHJpbmcoY29udGV4dCksIFxyXG5cdFx0XHRDb25kaXRpb24ub3BlcmF0b3JzWzBdLCBcclxuXHRcdFx0dGhpcy5vblRydWUudG9TdHJpbmcoY29udGV4dCksXHJcblx0XHRcdENvbmRpdGlvbi5vcGVyYXRvcnNbMV0sIFxyXG5cdFx0XHR0aGlzLm9uRmFsc2UudG9TdHJpbmcoY29udGV4dClcclxuXHRcdF0uam9pbignICcpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBDb25kaXRpb24pIHtcclxuXHRcdHZhciBzcGxpdHMgPSBMZXhlci5zcGxpdChleHByLCBTdGF0aWMub3BlcmF0b3JzKTtcclxuXHRcdGlmIChzcGxpdHMubGVuZ3RoID4gMSkge1xyXG5cdFx0XHRpZiAoc3BsaXRzLmxlbmd0aCA9PT0gMikge1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignTWFsZm9ybWVkIHRlcm5hcnkgZXhwcmVzc2lvbjogJyArIGV4cHIgKyAnIScpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKFxyXG5cdFx0XHRcdHBhcnNlQ2FsbGJhY2soc3BsaXRzWzBdLnRyaW0oKSksXHJcblx0XHRcdFx0cGFyc2VDYWxsYmFjayhzcGxpdHNbMV0udHJpbSgpKSxcclxuXHRcdFx0XHRwYXJzZUNhbGxiYWNrKHNwbGl0c1syXS50cmltKCkpXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBwcm9wIG9iamVjdFxyXG4gKi9cclxuQ29uZGl0aW9uLm9wZXJhdG9ycyA9IFsnPycsICc6J107XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IENvbmRpdGlvbjtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIERlbGV0aW9uSW50ZXJmYWNlXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBFeHBySW50ZXJmYWNlIHt9O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJmYWNlLnByb3RvdHlwZSwgJ2pzZW5UeXBlJywge1xyXG5cdGdldCgpIHsgcmV0dXJuICdEZWxldGVFeHByZXNzaW9uJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9sYXN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2xhc3QuanMnO1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNVbmRlZmluZWQuanMnO1xyXG5pbXBvcnQgUmVmZXJlbmNlSW50ZXJmYWNlIGZyb20gJy4vUmVmZXJlbmNlSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IERlbGV0aW9uSW50ZXJmYWNlIGZyb20gJy4vRGVsZXRpb25JbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgQ29udGV4dHMgZnJvbSAnLi4vQ29udGV4dHMuanMnO1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi4vTGV4ZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBEZWxldGlvbiBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IERlbGV0aW9uID0gY2xhc3MgZXh0ZW5kcyBEZWxldGlvbkludGVyZmFjZSB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IocmVmZXJlbmNlLCBvcGVyYXRvciA9ICdkZWxldGUnKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5yZWZlcmVuY2UgPSByZWZlcmVuY2U7XHJcblx0XHR0aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGV2YWwoY29udGV4dCA9IG51bGwsIHRyYXAgPSB7fSkge1xyXG5cdFx0dmFyIHJlZmVyZW5jZSA9IHRoaXMucmVmZXJlbmNlLmdldEV2YWwoY29udGV4dCwgdHJhcCk7XHJcblx0XHRpZiAoIV9pc1VuZGVmaW5lZChyZWZlcmVuY2UuY29udGV4dCkgJiYgIV9pc1VuZGVmaW5lZChyZWZlcmVuY2UubmFtZSkpIHtcclxuXHRcdFx0cmV0dXJuIENvbnRleHRzLmNyZWF0ZShyZWZlcmVuY2UuY29udGV4dCkuZGVsKHJlZmVyZW5jZS5uYW1lLCB0cmFwKTtcclxuXHRcdH1cclxuXHRcdHRocm93IG5ldyBFcnJvcignXCInICsgdGhpcyArICdcIiBpcyB1bmRlZmluZWQhJyk7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKGNvbnRleHQgPSBudWxsKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vcGVyYXRvciArICcgJyArIHRoaXMucmVmZXJlbmNlLnRvU3RyaW5nKGNvbnRleHQpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBEZWxldGlvbikge1xyXG5cdFx0dmFyIHBhcnNlID0gTGV4ZXIubGV4KGV4cHIsIE9iamVjdC52YWx1ZXMoU3RhdGljLm9wZXJhdG9ycykpO1xyXG5cdFx0aWYgKHBhcnNlLm1hdGNoZXMubGVuZ3RoID09PSAxICYmIGV4cHIuc3RhcnRzV2l0aChwYXJzZS5tYXRjaGVzWzBdICsgJyAnKSkge1xyXG5cdFx0XHR2YXIgcmVmZXJlbmNlO1xyXG5cdFx0XHRpZiAoISgocmVmZXJlbmNlID0gcGFyc2VDYWxsYmFjayhwYXJzZS50b2tlbnMucG9wKCkudHJpbSgpKSkgaW5zdGFuY2VvZiBSZWZlcmVuY2VJbnRlcmZhY2UpKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGRlbGV0ZSBkaXJlY3RpdmU6ICcgKyBleHByKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbmV3IFN0YXRpYyhyZWZlcmVuY2UsIHBhcnNlLm1hdGNoZXNbMF0udHJpbSgpKTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHRcclxuXHJcbi8qKlxyXG4gKiBAcHJvcCBhcnJheVxyXG4gKi9cclxuRGVsZXRpb24ub3BlcmF0b3JzID0ge1xyXG5cdHJlZDogJ3JlZHVjZScsIFxyXG5cdGRlbDogJ2RlbGV0ZScsXHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IERlbGV0aW9uO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2NvcHkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovY29weS5qcyc7XHJcbmltcG9ydCBfZWFjaCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9lYWNoLmpzJztcclxuaW1wb3J0IF9mbGF0dGVuIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ZsYXR0ZW4uanMnO1xyXG5pbXBvcnQgX3dyYXBwZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvd3JhcHBlZC5qcyc7XHJcbmltcG9ydCBfdW53cmFwIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3Vud3JhcC5qcyc7XHJcbmltcG9ydCBGdW5jSW50ZXJmYWNlIGZyb20gJy4vRnVuY0ludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBDb250ZXh0cyBmcm9tICcuLi9Db250ZXh0cy5qcyc7XHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcbmltcG9ydCBCbG9jayBmcm9tICcuL0Jsb2NrLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogRnVuYyBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEZ1bmMgPSBjbGFzcyBleHRlbmRzIEZ1bmNJbnRlcmZhY2Uge1xyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKHBhcmFtdGVycywgc3RhdGVtZW50cywgYXJyb3dGdW5jdGlvbkZvcm1hdHRpbmcgPSB7fSkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMucGFyYW10ZXJzID0gcGFyYW10ZXJzIHx8IHt9O1xyXG5cdFx0dGhpcy5zdGF0ZW1lbnRzID0gc3RhdGVtZW50cztcclxuXHRcdHRoaXMuYXJyb3dGdW5jdGlvbkZvcm1hdHRpbmcgPSBhcnJvd0Z1bmN0aW9uRm9ybWF0dGluZztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRpbmhlcml0KFN1cGVyKSB7XHJcblx0XHRpZiAoU3VwZXIgaW5zdGFuY2VvZiBGdW5jSW50ZXJmYWNlKSB7XHJcblx0XHRcdHZhciBwYXJlbnRQYXJhbXMgPSBPYmplY3Qua2V5cyhTdXBlci5wYXJhbXRlcnMpO1xyXG5cdFx0XHR2YXIgb3duUGFyYW1zID0gT2JqZWN0LmtleXModGhpcy5wYXJhbXRlcnMpO1xyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IE1hdGgubWF4KG93blBhcmFtcy5sZW5ndGgsIHBhcmVudFBhcmFtcy5sZW5ndGgpOyBpICsrKSB7XHJcblx0XHRcdFx0dmFyIG5hbWVJblBhcmVudCA9IHBhcmVudFBhcmFtc1tpXTtcclxuXHRcdFx0XHR2YXIgbmFtZUluU2VsZiA9IG93blBhcmFtc1tpXTtcclxuXHRcdFx0XHRpZiAoIW5hbWVJblNlbGYgJiYgbmFtZUluUGFyZW50KSB7XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1BhcmFtZXRlciAjJyArIGkgKyAnICgnICsgbmFtZUluUGFyZW50ICsgJykgaW4gcGFyZW50IGZ1bmN0aW9uIG11c3QgYmUgaW1wbGVtZW50ZWQuJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmIChuYW1lSW5TZWxmICYmIG5hbWVJblBhcmVudCkge1xyXG5cdFx0XHRcdFx0dmFyIGRlZmF1bHRWYWxJblBhcmVudCA9IFN1cGVyLnBhcmFtdGVyc1tuYW1lSW5QYXJlbnRdO1xyXG5cdFx0XHRcdFx0dmFyIGRlZmF1bHRWYWxJblNlbGYgPSB0aGlzLnBhcmFtdGVyc1tuYW1lSW5TZWxmXTtcclxuXHRcdFx0XHRcdGlmIChkZWZhdWx0VmFsSW5TZWxmICYmICFkZWZhdWx0VmFsSW5QYXJlbnQpIHtcclxuXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdQYXJhbWV0ZXIgIycgKyBpICsgJyAoJyArIG5hbWVJblNlbGYgKyAnKSBtdXN0IG5vdCBoYXZlIGEgZGVmYXVsdCB2YWx1ZSBhcyBlc3RhYmxpc2hlZCBpbiBwYXJlbnQgZnVuY3Rpb24uJyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAoZGVmYXVsdFZhbEluU2VsZiAmJiBkZWZhdWx0VmFsSW5QYXJlbnQgJiYgZGVmYXVsdFZhbEluU2VsZi5qc2VuVHlwZSAhPT0gZGVmYXVsdFZhbEluUGFyZW50LmpzZW5UeXBlKSB7XHJcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignRGVmYXVsdCB2YWx1ZSBmb3IgcGFyYW1ldGVyICMnICsgaSArICcgKCcgKyBuYW1lSW5TZWxmICsgJykgbXVzdCBiZSBvZiB0eXBlICcgKyBkZWZhdWx0VmFsSW5QYXJlbnQuanNlblR5cGUgKyAnIGFzIGVzdGFibGlzaGVkIGluIHBhcmVudCBmdW5jdGlvbi4nKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0dGhpcy5zdXAgPSBTdXBlcjtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRldmFsKGNvbnRleHQgPSBudWxsLCB0cmFwID0ge30pIHtcclxuXHRcdHJldHVybiAoLi4uYXJncykgPT4ge1xyXG5cdFx0XHR2YXIgbmV3TWFpbkNvbnRleHQgPSB7fTtcclxuXHRcdFx0X2VhY2goT2JqZWN0LmtleXModGhpcy5wYXJhbXRlcnMpLCAoaSwgbmFtZSkgPT4ge1xyXG5cdFx0XHRcdHZhciBkZWZhdWx0VmFsID0gdGhpcy5wYXJhbXRlcnNbbmFtZV07XHJcblx0XHRcdFx0aWYgKGFyZ3MubGVuZ3RoIC0gMSA8IGkgJiYgIWRlZmF1bHRWYWwpIHtcclxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignVGhlIHBhcmFtZXRlciBcIicgKyBuYW1lICsgJ1wiIGlzIHJlcXVpcmVkLicpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRuZXdNYWluQ29udGV4dFtuYW1lXSA9IGFyZ3MubGVuZ3RoID4gaSBcclxuXHRcdFx0XHRcdD8gYXJnc1tpXSBcclxuXHRcdFx0XHRcdDogKHRoaXMucGFyYW10ZXJzW25hbWVdIFxyXG5cdFx0XHRcdFx0XHQ/IHRoaXMucGFyYW10ZXJzW25hbWVdLmV2YWwoY29udGV4dCwgdHJhcCkgXHJcblx0XHRcdFx0XHRcdDogbnVsbCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHQvLyBCdXQgdGhpcyBuZXdlciBjb250ZXh0IHNob3VsZCBjb21lIGZpcnN0XHJcblx0XHRcdHZhciBuZXN0ZWRDb250ZXh0ID0gbmV3IENvbnRleHRzKHttYWluOm5ld01haW5Db250ZXh0LCBzdXBlcjpjb250ZXh0fSk7XHJcblx0XHRcdHJldHVybiB0aGlzLnN0YXRlbWVudHMuZXZhbChuZXN0ZWRDb250ZXh0LCB0cmFwKTtcclxuXHRcdH07XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0dG9TdHJpbmcoY29udGV4dCA9IG51bGwpIHtcclxuXHRcdHZhciBwYXJhbXRlcnMgPSBbXTtcclxuXHRcdF9lYWNoKHRoaXMucGFyYW10ZXJzLCAobmFtZSwgdmFsdWUpID0+IHtcclxuXHRcdFx0cGFyYW10ZXJzLnB1c2gobmFtZSArICh2YWx1ZSA/ICc9JyArIHZhbHVlLnRvU3RyaW5nKGNvbnRleHQpIDogJycpKTtcclxuXHRcdH0pO1xyXG5cdFx0aWYgKHRoaXMuYXJyb3dGdW5jdGlvbkZvcm1hdHRpbmcpIHtcclxuXHRcdFx0dmFyIGhlYWROb1dyYXAgPSB0aGlzLmFycm93RnVuY3Rpb25Gb3JtYXR0aW5nLmhlYWQgPT09IGZhbHNlIHx8IChwYXJhbXRlcnMubGVuZ3RoID09PSAxICYmIHBhcmFtdGVyc1swXS5pbmRleE9mKCc9JykgPT09IC0xKTtcclxuXHRcdFx0dmFyIGJvZHlOb1dyYXAgPSB0aGlzLmFycm93RnVuY3Rpb25Gb3JtYXR0aW5nLmJvZHkgPT09IGZhbHNlXHJcblx0XHRcdHJldHVybiAoaGVhZE5vV3JhcCA/IHBhcmFtdGVyc1swXSA6ICcoJyArIHBhcmFtdGVycy5qb2luKCcsICcpICsgJyknKVxyXG5cdFx0XHQrICcgPT4gJyArIChib2R5Tm9XcmFwID8gdGhpcy5zdGF0ZW1lbnRzLnRvU3RyaW5nKGNvbnRleHQpIDogJ3snICsgdGhpcy5zdGF0ZW1lbnRzLnRvU3RyaW5nKGNvbnRleHQpICsgJ30nKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiAnZnVuY3Rpb24gKCcgKyBwYXJhbXRlcnMuam9pbignLCAnKSArICcpIHsnICsgdGhpcy5zdGF0ZW1lbnRzLnRvU3RyaW5nKGNvbnRleHQpICsgJ30nO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBGdW5jKSB7XHJcblx0XHRleHByID0gZXhwci50cmltKCk7XHJcblx0XHR2YXIgc3BsaXRzO1xyXG5cdFx0aWYgKGV4cHIuc3RhcnRzV2l0aCgnZnVuY3Rpb24nKSBcclxuXHRcdCYmIChzcGxpdHMgPSBMZXhlci5zcGxpdChleHByLCBbXSkuc2xpY2UoMSkuZmlsdGVyKGIgPT4gYi50cmltKCkpKSAmJiBzcGxpdHMubGVuZ3RoID09PSAyKSB7XHJcblx0XHRcdHZhciBhcnJvd0Z1bmN0aW9uRm9ybWF0dGluZyA9IGZhbHNlO1xyXG5cdFx0XHR2YXIgZnVuY0hlYWQgPSBfdW53cmFwKHNwbGl0cy5zaGlmdCgpLnRyaW0oKSwgJygnLCAnKScpO1xyXG5cdFx0XHR2YXIgZnVuY0JvZHkgPSBfdW53cmFwKHNwbGl0cy5zaGlmdCgpLnRyaW0oKSwgJ3snLCAnfScpO1xyXG5cdFx0fSBlbHNlIGlmICghZXhwci5zdGFydHNXaXRoKCdmdW5jdGlvbicpIFxyXG5cdFx0JiYgKHNwbGl0cyA9IExleGVyLnNwbGl0KGV4cHIsIFsnPT4nXSkpICYmIHNwbGl0cy5sZW5ndGggPT09IDIpIHtcclxuXHRcdFx0dmFyIGZ1bmNIZWFkID0gc3BsaXRzLnNoaWZ0KCkudHJpbSgpO1xyXG5cdFx0XHR2YXIgZnVuY0JvZHkgPSBzcGxpdHMuc2hpZnQoKS50cmltKCk7XHJcblx0XHRcdHZhciBhcnJvd0Z1bmN0aW9uRm9ybWF0dGluZyA9IHt9O1xyXG5cdFx0XHRpZiAoX3dyYXBwZWQoZnVuY0hlYWQsICcoJywgJyknKSkge1xyXG5cdFx0XHRcdGZ1bmNIZWFkID0gX3Vud3JhcChmdW5jSGVhZCwgJygnLCAnKScpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGFycm93RnVuY3Rpb25Gb3JtYXR0aW5nLmhlYWQgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoX3dyYXBwZWQoZnVuY0JvZHksICd7JywgJ30nKSkge1xyXG5cdFx0XHRcdGZ1bmNCb2R5ID0gX3Vud3JhcChmdW5jQm9keSwgJ3snLCAnfScpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGFycm93RnVuY3Rpb25Gb3JtYXR0aW5nLmJvZHkgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0dmFyIHBhcmFtdGVycyA9IHt9O1xyXG5cdFx0TGV4ZXIuc3BsaXQoZnVuY0hlYWQsIFsnLCddKS5mb3JFYWNoKHBhcmFtID0+IHtcclxuXHRcdFx0dmFyIHBhcmFtU3BsaXQgPSBwYXJhbS5zcGxpdCgnPScpO1xyXG5cdFx0XHRpZiAocGFyYW1TcGxpdFsxXSkge1xyXG5cdFx0XHRcdHBhcmFtdGVyc1twYXJhbVNwbGl0WzBdLnRyaW0oKV0gPSBwYXJzZUNhbGxiYWNrKHBhcmFtU3BsaXRbMV0udHJpbSgpLCBudWxsLCB7XHJcblx0XHRcdFx0XHQvLyBBbnkgdmFyYWlibGVzIHNob3VsZCBiZSBhZGRlZCB0byBwdWJsaWMgdmFyc1xyXG5cdFx0XHRcdFx0bWV0YTogbnVsbCxcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRwYXJhbXRlcnNbcGFyYW0udHJpbSgpXSA9IG51bGw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dmFyIGJsb2NrID0gcGFyc2VDYWxsYmFjayhmdW5jQm9keSwgW0Jsb2NrXSwge2Fzc2VydDpmYWxzZX0pIHx8IHBhcnNlQ2FsbGJhY2soZnVuY0JvZHksIG51bGwsIHtcclxuXHRcdFx0Ly8gQW55IHZhcmFpYmxlcyBzaG91bGQgYmUgYWRkZWQgdG8gcHVibGljIHZhcnNcclxuXHRcdFx0bWV0YTogbnVsbCxcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIG5ldyBTdGF0aWMoXHJcblx0XHRcdHBhcmFtdGVycyxcclxuXHRcdFx0YmxvY2suanNlblR5cGUgPT09ICdCbG9jaycgPyBibG9jayA6IG5ldyBCbG9jayhbYmxvY2tdKSxcclxuXHRcdFx0YXJyb3dGdW5jdGlvbkZvcm1hdHRpbmcsXHJcblx0XHQpO1xyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcHJvcCBvYmplY3RcclxuICovXHJcbkZ1bmMub3BlcmF0b3JzID0gWyc9PicsXTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgRnVuYzsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX3dyYXBwZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvd3JhcHBlZC5qcyc7XHJcbmltcG9ydCBfdW53cmFwIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3Vud3JhcC5qcyc7XHJcbmltcG9ydCBDb250ZXh0cyBmcm9tICcuLi9Db250ZXh0cy5qcyc7XHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcbmltcG9ydCBJZkludGVyZmFjZSBmcm9tICcuL0lmSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IEJsb2NrIGZyb20gJy4vQmxvY2suanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBDb25kaXRpb24gY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBJZiA9IGNsYXNzIGV4dGVuZHMgSWZJbnRlcmZhY2Uge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoYXNzZXJ0aW9uLCBvblRydWUsIG9uRmFsc2UsIHBhcmFtcyA9IHt9KSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5hc3NlcnRpb24gPSBhc3NlcnRpb247XHJcblx0XHR0aGlzLm9uVHJ1ZSA9IG9uVHJ1ZTtcclxuXHRcdHRoaXMub25GYWxzZSA9IG9uRmFsc2U7XHJcblx0XHR0aGlzLnBhcmFtcyA9IHBhcmFtcztcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0ZXZhbChjb250ZXh0ID0gbnVsbCwgdHJhcCA9IHt9KSB7XHJcbiAgICAgICAgdmFyIG5ld0NvbnRleHQgPSBuZXcgQ29udGV4dHMoe21haW46e30sIHN1cGVyOmNvbnRleHR9LCAyLyoqIHR5cGUgKi8pO1xyXG5cdFx0cmV0dXJuIHRoaXMuYXNzZXJ0aW9uLmV2YWwoY29udGV4dC8qKiBvcmlnaW5hbCBjb250ZXh0ICovLCB0cmFwKVxyXG5cdFx0XHQ/ICh0aGlzLm9uVHJ1ZSA/IHRoaXMub25UcnVlLmV2YWwobmV3Q29udGV4dCwgdHJhcCkgOiB1bmRlZmluZWQpXHJcblx0XHRcdDogKHRoaXMub25GYWxzZSA/IHRoaXMub25GYWxzZS5ldmFsKG5ld0NvbnRleHQsIHRyYXApIDogdW5kZWZpbmVkKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHR0b1N0cmluZyhjb250ZXh0ID0gbnVsbCkge1xyXG4gICAgICAgIHZhciBvblRydWUgPSB0aGlzLm9uVHJ1ZSAmJiB0aGlzLnBhcmFtcy5vblRydWVJc0Jsb2NrIFxyXG4gICAgICAgICAgICA/ICd7JyArIHRoaXMub25UcnVlLnRvU3RyaW5nKGNvbnRleHQpICsgJ30nIFxyXG4gICAgICAgICAgICA6ICh0aGlzLm9uVHJ1ZSA/IHRoaXMub25UcnVlLnRvU3RyaW5nKGNvbnRleHQpIDogJycpO1xyXG4gICAgICAgIHZhciBvbkZhbHNlID0gdGhpcy5vbkZhbHNlICYmIHRoaXMucGFyYW1zLm9uRmFsc2VJc0Jsb2NrIFxyXG4gICAgICAgICAgICA/ICd7JyArIHRoaXMub25GYWxzZS50b1N0cmluZyhjb250ZXh0KSArICd9JyBcclxuICAgICAgICAgICAgOiAodGhpcy5vbkZhbHNlID8gdGhpcy5vbkZhbHNlLnRvU3RyaW5nKGNvbnRleHQpIDogJycpO1xyXG5cdFx0cmV0dXJuICdpZiAoJyArIHRoaXMuYXNzZXJ0aW9uLnRvU3RyaW5nKGNvbnRleHQpICsgJyknICsgb25UcnVlICsgKG9uRmFsc2UgPyAnIGVsc2UgJyArIG9uRmFsc2UgOiAnJyk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IElmKSB7XHJcbiAgICAgICAgZXhwciA9IGV4cHIudHJpbSgpO1xyXG4gICAgICAgIHZhciBzcGxpdHM7XHJcbiAgICAgICAgaWYgKGV4cHIuc3RhcnRzV2l0aCgnaWYnKSBcclxuXHRcdCYmIChzcGxpdHMgPSBMZXhlci5zcGxpdChleHByLCBbXSwge2xpbWl0OjJ9LypJTVBPUlRBTlQqLykuc2xpY2UoMSkuZmlsdGVyKGIgPT4gYi50cmltKCkpKSAmJiBzcGxpdHMubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgIHZhciBhc3NlcnRpb24gPSBwYXJzZUNhbGxiYWNrKF91bndyYXAoc3BsaXRzLnNoaWZ0KCkudHJpbSgpLCAnKCcsICcpJykudHJpbSgpKTtcclxuICAgICAgICAgICAgdmFyIHJlc3QgPSBMZXhlci5zcGxpdChzcGxpdHMuc2hpZnQoKS50cmltKCksIFsnZWxzZSddLCB7bGltaXQ6MX0vKklNUE9SVEFOVCovKTtcclxuICAgICAgICAgICAgdmFyIG9uVHJ1ZSA9IHJlc3Quc2hpZnQoKS50cmltKCksIG9uVHJ1ZUlzQmxvY2ssIG9uRmFsc2UgPSAocmVzdC5zaGlmdCgpIHx8ICcnKS50cmltKCksIG9uRmFsc2VJc0Jsb2NrO1xyXG4gICAgICAgICAgICBpZiAoX3dyYXBwZWQob25UcnVlLCAneycsICd9JykpIHtcclxuICAgICAgICAgICAgICAgIC8vIFRoZSBicmFjZXMgZ2l2ZXMgdXMgdGhlIG9uVHJ1ZSBibG9ja1xyXG4gICAgICAgICAgICAgICAgb25UcnVlSXNCbG9jayA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBvblRydWUgPSBfdW53cmFwKG9uVHJ1ZSwgJ3snLCAnfScpLnRyaW0oKTtcclxuICAgICAgICAgICAgICAgIG9uVHJ1ZSA9IHBhcnNlQ2FsbGJhY2sob25UcnVlLCBbQmxvY2tdLCB7YXNzZXJ0OmZhbHNlLCBtZXRhOm51bGx9KSB8fCBwYXJzZUNhbGxiYWNrKG9uVHJ1ZSwgbnVsbCwge21ldGE6bnVsbH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgb25UcnVlID0gcGFyc2VDYWxsYmFjayhvblRydWUsIG51bGwsIHttZXRhOm51bGx9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAob25GYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF93cmFwcGVkKG9uRmFsc2UsICd7JywgJ30nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBicmFjZXMgZ2l2ZXMgdXMgdGhlIG9uVHJ1ZSBibG9ja1xyXG4gICAgICAgICAgICAgICAgICAgIG9uRmFsc2VJc0Jsb2NrID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBvbkZhbHNlID0gX3Vud3JhcChvbkZhbHNlLCAneycsICd9JykudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9uRmFsc2UgPSBwYXJzZUNhbGxiYWNrKG9uRmFsc2UsIFtCbG9ja10sIHthc3NlcnQ6ZmFsc2UsIG1ldGE6bnVsbH0pIHx8IHBhcnNlQ2FsbGJhY2sob25GYWxzZSwgbnVsbCwge21ldGE6bnVsbH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBvbkZhbHNlID0gcGFyc2VDYWxsYmFjayhvbkZhbHNlLCBudWxsLCB7bWV0YTpudWxsfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHRcdFx0cmV0dXJuIG5ldyBTdGF0aWMoXHJcbiAgICAgICAgICAgICAgICBhc3NlcnRpb24sIFxyXG4gICAgICAgICAgICAgICAgb25UcnVlID8gKG9uVHJ1ZS5qc2VuVHlwZSA9PT0gJ0Jsb2NrJyA/IG9uVHJ1ZSA6IG5ldyBCbG9jayhbb25UcnVlXSkpIDogbnVsbCwgXHJcbiAgICAgICAgICAgICAgICBvbkZhbHNlID8gKG9uRmFsc2UuanNlblR5cGUgPT09ICdCbG9jaycgPyBvbkZhbHNlIDogbmV3IEJsb2NrKFtvbkZhbHNlXSkpIDogbnVsbCwgXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgb25UcnVlSXNCbG9jayxcclxuICAgICAgICAgICAgICAgICAgICBvbkZhbHNlSXNCbG9jayxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgfVxyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgSWY7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBpbnRlcnNlY3Rpb24gb2YgdHdvIGFycmF5cztcclxuICogb3B0aW9uYWxseSB1c2luZyBhIGN1c3RvbSBtYXRjaGluZyBmdW5jdGlvbi5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqIEBwYXJhbSBhcnJheVx0IFx0YXJyMlxyXG4gKiBAcGFyYW0gZnVuY3Rpb24gXHRjYWxsYmFja1xyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIGFycjIsIGNhbGxiYWNrID0gbnVsbCkge1xyXG5cdHJldHVybiAhX2lzQXJyYXkoYXJyMikgPyBbXSA6IGFyci5maWx0ZXIodmFsMSA9PiBjYWxsYmFjayBcclxuXHRcdD8gYXJyMi5maWx0ZXIodmFsMiA9PiBjYWxsYmFjayh2YWwxLCB2YWwyKSkubGVuZ3RoIFxyXG5cdFx0OiBhcnIyLmluZGV4T2YodmFsMSkgIT09IC0xXHJcblx0KTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIE1hdGhJbnRlcmZhY2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBJbnRlcmZhY2UgPSBjbGFzcyBleHRlbmRzIEV4cHJJbnRlcmZhY2Uge307XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlcmZhY2UucHJvdG90eXBlLCAnanNlblR5cGUnLCB7XHJcblx0Z2V0KCkgeyByZXR1cm4gJ01hdGhFeHByZXNzaW9uJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc051bWVyaWMgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bWVyaWMuanMnO1xyXG5pbXBvcnQgX2ZsYXR0ZW4gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZmxhdHRlbi5qcyc7XHJcbmltcG9ydCBfaW50ZXJzZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ludGVyc2VjdC5qcyc7XHJcbmltcG9ydCBfdW5pcXVlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3VuaXF1ZS5qcyc7XHJcbmltcG9ydCBNYXRoSW50ZXJmYWNlIGZyb20gJy4vTWF0aEludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIE1hdGggY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBNYXRoID0gY2xhc3MgZXh0ZW5kcyBNYXRoSW50ZXJmYWNlIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKHZhbCwgZXhwcnMpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLnZhbCA9IHZhbDtcclxuXHRcdHRoaXMuZXhwcnMgPSBleHBycztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRldmFsKGNvbnRleHQgPSBudWxsLCB0cmFwID0ge30pIHtcclxuXHRcdHJldHVybiB0aGlzLmV4cHJzLnJlZHVjZSgoY3VycmVudFRvdGFsLCBleHByKSA9PiB7XHJcblx0XHRcdHZhciB2YWwgPSBleHByLnZhbC5ldmFsKGNvbnRleHQsIHRyYXApO1xyXG5cdFx0XHR2YXIgb3BlcmF0b3IgPSBleHByLm9wZXJhdG9yLnRyaW0oKTtcclxuXHRcdFx0aWYgKCghX2lzTnVtZXJpYyhjdXJyZW50VG90YWwpIHx8ICFfaXNOdW1lcmljKHZhbCkpICYmIG9wZXJhdG9yICE9PSAnKycpIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgTWF0aCBleHByZXNzaW9uOiAnICsgdGhpcy50b1N0cmluZygpICsgJyEnKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRzd2l0Y2gob3BlcmF0b3IpIHtcclxuXHRcdFx0XHRjYXNlICcrJzpcclxuXHRcdFx0XHRcdHJldHVybiBjdXJyZW50VG90YWwgKyB2YWw7XHJcblx0XHRcdFx0Y2FzZSAnLSc6XHJcblx0XHRcdFx0XHRyZXR1cm4gY3VycmVudFRvdGFsIC0gdmFsO1xyXG5cdFx0XHRcdGNhc2UgJyonOlxyXG5cdFx0XHRcdFx0cmV0dXJuIGN1cnJlbnRUb3RhbCAqIHZhbDtcclxuXHRcdFx0XHRjYXNlICcvJzpcclxuXHRcdFx0XHRcdHJldHVybiBjdXJyZW50VG90YWwgLyB2YWw7XHJcblx0XHRcdH1cclxuXHRcdH0sIHRoaXMudmFsLmV2YWwoY29udGV4dCwgdHJhcCkpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKGNvbnRleHQgPSBudWxsKSB7XHJcblx0XHRyZXR1cm4gW3RoaXMudmFsLnRvU3RyaW5nKGNvbnRleHQpXS5jb25jYXQoXHJcblx0XHRcdHRoaXMuZXhwcnMubWFwKGV4cHIgPT4gZXhwci5vcGVyYXRvciArICcgJyArIGV4cHIudmFsLnRvU3RyaW5nKGNvbnRleHQpKVxyXG5cdFx0KS5qb2luKCcgJyk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IE1hdGgpIHtcclxuXHRcdHZhciBwYXJzZSA9IExleGVyLmxleChleHByLCBfZmxhdHRlbihTdGF0aWMub3BlcmF0b3JzKSk7XHJcblx0XHRpZiAocGFyc2UudG9rZW5zLmxlbmd0aCA+IDEgJiYgcGFyc2UubWF0Y2hlcy5sZW5ndGggPT09IHBhcnNlLnRva2Vucy5sZW5ndGggLSAxKSB7XHJcblx0XHRcdHZhciBvcGVyYXRvcnMgPSBfdW5pcXVlKHBhcnNlLm1hdGNoZXMpO1xyXG5cdFx0XHRpZiAoX2ludGVyc2VjdChvcGVyYXRvcnMsIE1hdGgub3BlcmF0b3JzLnN1cCkubGVuZ3RoICYmIF9pbnRlcnNlY3Qob3BlcmF0b3JzLCBNYXRoLm9wZXJhdG9ycy5zdWIpLmxlbmd0aCkge1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignXCJBZGRpdGlvbi9zdWJ0cmFjdGlvblwiIGFuZCBcIm11bHRpcGxpY2F0aW9uL2RpdmlzaW9uXCIgb3BlcmF0b3JzIGNhbm5vdCBiZSB1c2VkIGluIHRoZSBzYW1lIGV4cHJlc3Npb246ICcgKyBleHByICsgJyEnKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbmV3IFN0YXRpYyhcclxuXHRcdFx0XHRwYXJzZUNhbGxiYWNrKHBhcnNlLnRva2Vucy5zaGlmdCgpLnRyaW0oKSksXHJcblx0XHRcdFx0cGFyc2UudG9rZW5zLm1hcCgoZXhwciwgaSkgPT4ge3JldHVybiB7XHJcblx0XHRcdFx0XHRvcGVyYXRvcjogcGFyc2UubWF0Y2hlc1tpXSxcclxuXHRcdFx0XHRcdHZhbDogcGFyc2VDYWxsYmFjayhleHByLnRyaW0oKSlcclxuXHRcdFx0XHR9O30pXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBwcm9wIG9iamVjdFxyXG4gKi9cclxuTWF0aC5vcGVyYXRvcnMgPSB7XHJcblx0c3VwOiBbJyonLCAnLyddLFxyXG5cdHN1YjogWycgKyAnLCAnIC0gJ10sXHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IE1hdGg7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBFeHBySW50ZXJmYWNlIGZyb20gJy4uL0V4cHJJbnRlcmZhY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBOdW1JbnRlcmZhY2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBJbnRlcmZhY2UgPSBjbGFzcyBleHRlbmRzIEV4cHJJbnRlcmZhY2Uge307XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlcmZhY2UucHJvdG90eXBlLCAnanNlblR5cGUnLCB7XHJcblx0Z2V0KCkgeyByZXR1cm4gJ051bWJlclR5cGUnOyB9LFxyXG59KTtcclxuZXhwb3J0IGRlZmF1bHQgSW50ZXJmYWNlO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVtZXJpYy5qcyc7XHJcbmltcG9ydCBOdW1JbnRlcmZhY2UgZnJvbSAnLi9OdW1JbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi4vTGV4ZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBOdW0gKG51bWJlcikgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBOdW0gPSBjbGFzcyBleHRlbmRzIE51bUludGVyZmFjZSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihpbnQsIGRlYyA9IDApIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLmludCA9IGludDtcclxuXHRcdHRoaXMuZGVjID0gZGVjO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRldmFsKCkge1xyXG5cdFx0cmV0dXJuIHBhcnNlRmxvYXQodGhpcy5pbnQgKyAodGhpcy5kZWMgPyAnLicgKyB0aGlzLmRlYyA6IG51bGwpKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHR0b1N0cmluZyhjb250ZXh0ID0gbnVsbCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuaW50ICsgKHRoaXMuZGVjID8gJy4nICsgdGhpcy5kZWMgOiBudWxsKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgcGFyc2UoZXhwciwgcGFyc2VDYWxsYmFjaywgU3RhdGljID0gTnVtKSB7XHJcblx0XHRpZiAoX2lzTnVtZXJpYyhleHByKSkge1xyXG5cdFx0XHR2YXIgZXhwciA9IGV4cHIuc3BsaXQoJy4nKTtcclxuXHRcdFx0cmV0dXJuIG5ldyBTdGF0aWMoXHJcblx0XHRcdFx0cGFyc2VJbnQoZXhwci5zaGlmdCgpKSxcclxuXHRcdFx0XHRwYXJzZUludChleHByLnNoaWZ0KCkpXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBOdW07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBFeHBySW50ZXJmYWNlIGZyb20gJy4uL0V4cHJJbnRlcmZhY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBPYmpJbnRlcmZhY2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBJbnRlcmZhY2UgPSBjbGFzcyBleHRlbmRzIEV4cHJJbnRlcmZhY2Uge307XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlcmZhY2UucHJvdG90eXBlLCAnanNlblR5cGUnLCB7XHJcblx0Z2V0KCkgeyByZXR1cm4gJ09iamVjdFR5cGUnOyB9LFxyXG59KTtcclxuZXhwb3J0IGRlZmF1bHQgSW50ZXJmYWNlO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX3dyYXBwZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvd3JhcHBlZC5qcyc7XHJcbmltcG9ydCBfdW53cmFwIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3Vud3JhcC5qcyc7XHJcbmltcG9ydCBfZmlyc3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZmlyc3QuanMnO1xyXG5pbXBvcnQgX2xhc3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvbGFzdC5qcyc7XHJcbmltcG9ydCBfZWFjaCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9lYWNoLmpzJztcclxuaW1wb3J0IE9iakludGVyZmFjZSBmcm9tICcuL09iakludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIE9iamVjdCB1dGlsc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IE9iaiA9IGNsYXNzIGV4dGVuZHMgT2JqSW50ZXJmYWNlIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGVudHJpZXMpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLmVudHJpZXMgPSBlbnRyaWVzIHx8IHt9O1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGluaGVyaXQoU3VwZXIpIHtcclxuXHRcdGlmIChTdXBlciBpbnN0YW5jZW9mIE9iakludGVyZmFjZSkge1xyXG5cdFx0XHRfZWFjaChTdXBlci5lbnRyaWVzLCAobmFtZSwgdmFsKSA9PiB7XHJcblx0XHRcdFx0aWYgKCEobmFtZSBpbiB0aGlzLmVudHJpZXMpKSB7XHJcblx0XHRcdFx0XHR0aGlzLmVudHJpZXNbbmFtZV0gPSB2YWw7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRldmFsKGNvbnRleHQgPSBudWxsLCB0cmFwID0ge30pIHtcclxuXHRcdHZhciBpdGVtcyA9IHt9O1xyXG5cdFx0X2VhY2godGhpcy5lbnRyaWVzLCAoa2V5LCBleHByKSA9PiB7XHJcblx0XHRcdGl0ZW1zW2tleV0gPSBleHByLmV2YWwoY29udGV4dCwgdHJhcCk7XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiBpdGVtcztcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0dG9TdHJpbmcoY29udGV4dCA9IG51bGwpIHtcclxuXHRcdHZhciBzdHIgPSBbXTtcclxuXHRcdF9lYWNoKHRoaXMuZW50cmllcywgKGtleSwgZXhwcikgPT4ge1xyXG5cdFx0XHRzdHIucHVzaChrZXkgKyBPYmoub3BlcmF0b3JzLnN1YiArIGV4cHIudG9TdHJpbmcoY29udGV4dCkpO1xyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gJ3snICsgc3RyLmpvaW4oT2JqLm9wZXJhdG9ycy5zdXApICsgJ30nO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBPYmopIHtcclxuXHRcdGlmIChfd3JhcHBlZChleHByLCAneycsICd9JykgJiYgIUxleGVyLm1hdGNoKGV4cHIudHJpbSgpLCBbJyAnXSkubGVuZ3RoKSB7XHJcblx0XHRcdHZhciBlbnRyaWVzID0ge307XHJcblx0XHRcdHZhciBfZW50cmllc1NwbGl0ID0gTGV4ZXIuc3BsaXQoX3Vud3JhcChleHByLCAneycsICd9JyksIFtPYmoub3BlcmF0b3JzLnN1cF0pXHJcblx0XHRcdFx0Lm1hcChuID0+IG4udHJpbSgpKS5maWx0ZXIobiA9PiBuKTtcclxuXHRcdFx0X2VhY2goX2VudHJpZXNTcGxpdCwgKGtleSwgZXhwcikgPT4ge1xyXG5cdFx0XHRcdHZhciBlbnRyeSA9IExleGVyLnNwbGl0KGV4cHIsIFtPYmoub3BlcmF0b3JzLnN1Yl0sIHtsaW1pdDoxfS8qSU1QT1JUQU5UKi8pO1xyXG5cdFx0XHRcdGVudHJpZXNbX2ZpcnN0KGVudHJ5KS50cmltKCldID0gcGFyc2VDYWxsYmFjayhfbGFzdChlbnRyeSkudHJpbSgpKTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKGVudHJpZXMpO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcHJvcCBvYmplY3RcclxuICovXHJcbk9iai5vcGVyYXRvcnMgPSB7XHJcblx0c3VwOiAnLCcsXHJcblx0c3ViOiAnOicsXHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IE9iajtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFByZXNlbmNlSW50ZXJmYWNlXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBFeHBySW50ZXJmYWNlIHt9O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJmYWNlLnByb3RvdHlwZSwgJ2pzZW5UeXBlJywge1xyXG5cdGdldCgpIHsgcmV0dXJuICdQcmVzZW5jZU9wZXJhdG9yJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9sYXN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2xhc3QuanMnO1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNVbmRlZmluZWQuanMnO1xyXG5pbXBvcnQgUHJlc2VuY2VJbnRlcmZhY2UgZnJvbSAnLi9QcmVzZW5jZUludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBSZWZlcmVuY2VJbnRlcmZhY2UgZnJvbSAnLi9SZWZlcmVuY2VJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgQ29udGV4dHMgZnJvbSAnLi4vQ29udGV4dHMuanMnO1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi4vTGV4ZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBQcmVzZW5jZSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IFByZXNlbmNlID0gY2xhc3MgZXh0ZW5kcyBQcmVzZW5jZUludGVyZmFjZSB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IocHJvcCwgcmVmZXJlbmNlLCBvcGVyYXRvciA9ICdpbicpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xyXG5cdFx0dGhpcy5yZWZlcmVuY2UgPSByZWZlcmVuY2U7XHJcblx0XHR0aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGV2YWwoY29udGV4dCA9IG51bGwsIHRyYXAgPSB7fSkge1xyXG5cdFx0dmFyIHJlZmVyZW5jZSA9IHRoaXMucmVmZXJlbmNlLmdldEV2YWwoY29udGV4dCwgdHJhcCk7XHJcblx0XHR2YXIgcHJvcCA9IHRoaXMucHJvcC5ldmFsKGNvbnRleHQsIHRyYXApO1xyXG5cdFx0aWYgKCFfaXNVbmRlZmluZWQocmVmZXJlbmNlLmNvbnRleHQpICYmICFfaXNVbmRlZmluZWQocmVmZXJlbmNlLm5hbWUpKSB7XHJcblx0XHRcdHJldHVybiBDb250ZXh0cy5jcmVhdGUocmVmZXJlbmNlLmNvbnRleHQpLmhhcyhyZWZlcmVuY2UubmFtZSwgcHJvcCwgdHJhcCk7XHJcblx0XHR9XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIHRoaXMgKyAnXCIgaXMgdW5kZWZpbmVkIScpO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHR0b1N0cmluZyhjb250ZXh0ID0gbnVsbCkge1xyXG5cdFx0cmV0dXJuIFt0aGlzLnByb3AudG9TdHJpbmcoY29udGV4dCksIHRoaXMub3BlcmF0b3IsIHRoaXMucmVmZXJlbmNlLnRvU3RyaW5nKGNvbnRleHQpXS5qb2luKCcgJyk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IFByZXNlbmNlKSB7XHJcblx0XHR2YXIgcGFyc2UgPSBMZXhlci5sZXgoZXhwciwgU3RhdGljLm9wZXJhdG9ycyk7XHJcblx0XHRpZiAocGFyc2UudG9rZW5zLmxlbmd0aCA9PT0gMikge1xyXG5cdFx0XHR2YXIgcHJvcCwgcmVmZXJlbmNlO1xyXG5cdFx0XHRpZiAoIShwcm9wID0gcGFyc2VDYWxsYmFjayhwYXJzZS50b2tlbnMuc2hpZnQoKS50cmltKCkpKVxyXG5cdFx0XHR8fCAhKChyZWZlcmVuY2UgPSBwYXJzZUNhbGxiYWNrKHBhcnNlLnRva2Vucy5zaGlmdCgpLnRyaW0oKSkpIGluc3RhbmNlb2YgUmVmZXJlbmNlSW50ZXJmYWNlKSkge1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCBwcmVzZW5jZSBjaGVjayBleHByZXNzaW9uOiAnICsgZXhwcik7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG5ldyBTdGF0aWMocHJvcCwgcmVmZXJlbmNlLCBwYXJzZS5tYXRjaGVzWzBdLnRyaW0oKSk7XHJcblx0XHR9XHJcblx0fVxyXG59O1x0XHJcblxyXG4vKipcclxuICogQHByb3AgYXJyYXlcclxuICovXHJcblByZXNlbmNlLm9wZXJhdG9ycyA9IFsnIGluICddO1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBQcmVzZW5jZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVW5kZWZpbmVkLmpzJztcclxuaW1wb3J0IF93cmFwcGVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3dyYXBwZWQuanMnO1xyXG5pbXBvcnQgX3Vud3JhcCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci91bndyYXAuanMnO1xyXG5pbXBvcnQgUmVmZXJlbmNlSW50ZXJmYWNlIGZyb20gJy4vUmVmZXJlbmNlSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBDb250ZXh0cyBmcm9tICcuLi9Db250ZXh0cy5qcyc7XHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFJlZmVyZW5jZSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IFJlZmVyZW5jZSA9IGNsYXNzIGV4dGVuZHMgUmVmZXJlbmNlSW50ZXJmYWNlIHtcclxuXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcihjb250ZXh0LCBuYW1lLCBiYWNrdGlja3MgPSBmYWxzZSkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcblx0XHR0aGlzLm5hbWUgPSBuYW1lO1xyXG5cdFx0dGhpcy5iYWNrdGlja3MgPSBiYWNrdGlja3M7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGdldEV2YWwoY29udGV4dCA9IG51bGwsIHRyYXAgPSB7fSkge1xyXG5cdFx0dmFyIHNvdXJjZUNvbnRleHQgPSBjb250ZXh0LCBuYW1lID0gdGhpcy5uYW1lO1xyXG5cdFx0aWYgKHRoaXMuY29udGV4dCkge1xyXG5cdFx0XHRpZiAobmFtZSBpbnN0YW5jZW9mIEV4cHJJbnRlcmZhY2UpIHtcclxuXHRcdFx0XHRuYW1lID0gbmFtZS5ldmFsKGNvbnRleHQsIHRyYXApO1xyXG5cdFx0XHR9XHJcblx0XHRcdHNvdXJjZUNvbnRleHQgPSB0aGlzLmNvbnRleHQuZXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB7Y29udGV4dDpzb3VyY2VDb250ZXh0LCBuYW1lOm5hbWUsfTtcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0ZXZhbChjb250ZXh0ID0gbnVsbCwgdHJhcCA9IHt9KSB7XHJcblx0XHR2YXIgcGFydHMgPSB0aGlzLmdldEV2YWwoY29udGV4dCwgdHJhcCk7XHJcblx0XHRpZiAoIV9pc1VuZGVmaW5lZChwYXJ0cy5jb250ZXh0KSAmJiAhX2lzVW5kZWZpbmVkKHBhcnRzLm5hbWUpKSB7XHJcblx0XHRcdHJldHVybiBDb250ZXh0cy5jcmVhdGUocGFydHMuY29udGV4dCkuZ2V0KHBhcnRzLm5hbWUsIHRyYXApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHR0b1N0cmluZyhjb250ZXh0ID0gbnVsbCkge1xyXG5cdFx0dmFyIG5hbWUgPSB0aGlzLm5hbWU7XHJcblx0XHRpZiAodGhpcy5jb250ZXh0KSB7XHJcblx0XHRcdHZhciBzdWJqZWN0Q29udGV4dCA9IHRoaXMuY29udGV4dC50b1N0cmluZyhjb250ZXh0KTtcclxuXHRcdFx0aWYgKG5hbWUgaW5zdGFuY2VvZiBFeHBySW50ZXJmYWNlKSB7XHJcblx0XHRcdFx0bmFtZSA9ICdbJyArIG5hbWUudG9TdHJpbmcoY29udGV4dCkgKyAnXSc7XHJcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5iYWNrdGlja3MpIHtcclxuXHRcdFx0XHRuYW1lID0gJ2AnICsgbmFtZSArICdgJztcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dmFyIHN1YmplY3RDb250ZXh0ID0gY29udGV4dDtcclxuXHRcdFx0aWYgKHRoaXMuYmFja3RpY2tzKSB7XHJcblx0XHRcdFx0bmFtZSA9ICdgJyArIG5hbWUgKyAnYCc7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiAoc3ViamVjdENvbnRleHQgfHwgJycpICsgKHN1YmplY3RDb250ZXh0ICYmICFuYW1lLnN0YXJ0c1dpdGgoJ1snKSA/IFJlZmVyZW5jZS5zZXBhcmF0b3IgOiAnJykgKyBuYW1lO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBSZWZlcmVuY2UpIHtcclxuXHRcdGlmICghTGV4ZXIubWF0Y2goZXhwci50cmltKCksIFsnICddKS5sZW5ndGgpIHtcclxuXHRcdFx0dmFyIHNwbGl0cyA9IExleGVyLnNwbGl0KGV4cHIsIFtdKTtcclxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdC8vIG5hbWUsIGZpcnN0XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHR2YXIgY29udGV4dCwgbmFtZSA9IHNwbGl0cy5wb3AoKSwgYmFja3RpY2tzO1xyXG5cdFx0XHR2YXIgbmFtZVNwbGl0ID0gTGV4ZXIuc3BsaXQobmFtZS50cmltKCksIFtTdGF0aWMuc2VwYXJhdG9yXSwge3ByZXNlcnZlRGVsaW1zOnRydWV9KTtcclxuXHRcdFx0aWYgKG5hbWVTcGxpdC5sZW5ndGggPiAxKSB7XHJcblx0XHRcdFx0bmFtZSA9IG5hbWVTcGxpdC5wb3AoKS5zdWJzdHIoMSk7XHJcblx0XHRcdFx0c3BsaXRzID0gc3BsaXRzLmNvbmNhdChuYW1lU3BsaXQpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChfd3JhcHBlZChuYW1lLCAnYCcsICdgJykpIHtcclxuXHRcdFx0XHRuYW1lID0gX3Vud3JhcChuYW1lLCAnYCcsICdgJyk7XHJcblx0XHRcdFx0YmFja3RpY2tzID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0Ly8gY29udGV4dCwgc2Vjb25kXHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHRpZiAoc3BsaXRzLmxlbmd0aCkge1xyXG5cdFx0XHRcdGNvbnRleHQgPSBwYXJzZUNhbGxiYWNrKHNwbGl0cy5qb2luKCcnKSk7XHJcblx0XHRcdFx0Y29udGV4dC5pc0NvbnRleHQgPSB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChfd3JhcHBlZChuYW1lLCAnWycsICddJykpIHtcclxuXHRcdFx0XHRpZiAoIWNvbnRleHQpIHtcclxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignSW52YWxpZCByZWZlcmVuY2U6ICcgKyBleHByICsgJyEnKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0bmFtZSA9IHBhcnNlQ2FsbGJhY2soX3Vud3JhcChuYW1lLCAnWycsICddJykpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKGNvbnRleHQsIG5hbWUsIGJhY2t0aWNrcyk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBwcm9wIHN0cmluZ1xyXG4gKi9cclxuUmVmZXJlbmNlLnNlcGFyYXRvciA9ICcuJztcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgUmVmZXJlbmNlO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi4vTGV4ZXIuanMnO1xyXG5pbXBvcnQgUmV0dXJuSW50ZXJmYWNlIGZyb20gJy4vUmV0dXJuSW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogUmV0IChyZXR1cm4pIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgUmV0dXJuID0gY2xhc3MgZXh0ZW5kcyBSZXR1cm5JbnRlcmZhY2Uge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoZXhwcikge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMuZXhwciA9IGV4cHI7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGV2YWwoY29udGV4dCA9IG51bGwsIHRyYXAgPSB7fSkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZXhwciA/IHRoaXMuZXhwci5ldmFsKGNvbnRleHQsIHRyYXApIDogdW5kZWZpbmVkO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKGNvbnRleHQgPSBudWxsKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5leHByID8gJ3JldHVybiAnICsgdGhpcy5leHByLnRvU3RyaW5nKGNvbnRleHQpIDogJ3JldHVybic7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHQgKi9cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgcGFyc2UoZXhwciwgcGFyc2VDYWxsYmFjaywgU3RhdGljID0gUmV0dXJuKSB7XHJcblx0XHR2YXIgZXhwckxjID0gZXhwci50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0aWYgKGV4cHJMYy5zdGFydHNXaXRoKCdyZXR1cm4gJykgfHwgZXhwckxjID09PSAncmV0dXJuJykge1xyXG5cdFx0XHRyZXR1cm4gbmV3IFN0YXRpYyhcclxuXHRcdFx0XHRwYXJzZUNhbGxiYWNrKGV4cHIuc3Vic3RyKDYpLnRyaW0oKSlcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IFJldHVybjtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFN0ckludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEludGVyZmFjZSA9IGNsYXNzIGV4dGVuZHMgRXhwckludGVyZmFjZSB7fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVyZmFjZS5wcm90b3R5cGUsICdqc2VuVHlwZScsIHtcclxuXHRnZXQoKSB7IHJldHVybiAnU3RyaW5nVHlwZSc7IH0sXHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCBJbnRlcmZhY2U7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfd3JhcHBlZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci93cmFwcGVkLmpzJztcclxuaW1wb3J0IF91bndyYXAgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvdW53cmFwLmpzJztcclxuaW1wb3J0IFN0ckludGVyZmFjZSBmcm9tICcuL1N0ckludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcbmltcG9ydCBCb29sIGZyb20gJy4vQm9vbC5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFN0cmluZyB1dGlsc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcblxyXG5jb25zdCBTdHIgPSBjbGFzcyBleHRlbmRzIFN0ckludGVyZmFjZSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihleHByLCBxdW90ZSkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMuZXhwciA9IGV4cHI7XHJcblx0XHR0aGlzLnF1b3RlID0gcXVvdGU7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGV2YWwoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5leHByO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMucXVvdGUgKyB0aGlzLmV4cHIgKyB0aGlzLnF1b3RlO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgcGFyc2UoZXhwciwgcGFyc2VDYWxsYmFjaywgU3RhdGljID0gU3RyKSB7XHJcblx0XHRleHByID0gZXhwci50cmltKCk7XHJcblx0XHRpZiAoKF93cmFwcGVkKGV4cHIsICdcIicsICdcIicpIHx8IF93cmFwcGVkKGV4cHIsIFwiJ1wiLCBcIidcIikpIFxyXG5cdFx0JiYgIUxleGVyLm1hdGNoKGV4cHIsIFsnICddKS5sZW5ndGgpIHtcclxuXHRcdFx0dmFyIHF1b3RlID0gX3dyYXBwZWQoZXhwciwgJ1wiJywgJ1wiJykgPyAnXCInIDogXCInXCI7XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKFxyXG5cdFx0XHRcdF91bndyYXAoZXhwciwgcXVvdGUsIHF1b3RlKSxcclxuXHRcdFx0XHRxdW90ZVxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgU3RyO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgSnNlbiBmcm9tICcuL0pzZW4uanMnO1xyXG5pbXBvcnQgRXhwckludGVyZmFjZSBmcm9tICcuL0V4cHJJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi9MZXhlci5qcyc7XHJcbmltcG9ydCBDb250ZXh0cyBmcm9tICcuL0NvbnRleHRzLmpzJztcclxuaW1wb3J0IEFic3RyYWN0aW9uIGZyb20gJy4vRXhwci9BYnN0cmFjdGlvbi5qcyc7XHJcbmltcG9ydCBBYnN0cmFjdGlvbkludGVyZmFjZSBmcm9tICcuL0V4cHIvQWJzdHJhY3Rpb25JbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgQXJyIGZyb20gJy4vRXhwci9BcnIuanMnO1xyXG5pbXBvcnQgQXJySW50ZXJmYWNlIGZyb20gJy4vRXhwci9BcnJJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgQXJndW1lbnRzIGZyb20gJy4vRXhwci9Bcmd1bWVudHMuanMnO1xyXG5pbXBvcnQgQXJndW1lbnRzSW50ZXJmYWNlIGZyb20gJy4vRXhwci9Bcmd1bWVudHNJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgQXNzZXJ0aW9uIGZyb20gJy4vRXhwci9Bc3NlcnRpb24uanMnO1xyXG5pbXBvcnQgQXNzZXJ0aW9uSW50ZXJmYWNlIGZyb20gJy4vRXhwci9Bc3NlcnRpb25JbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgQXNzaWdubWVudCBmcm9tICcuL0V4cHIvQXNzaWdubWVudC5qcyc7XHJcbmltcG9ydCBBc3NpZ25tZW50SW50ZXJmYWNlIGZyb20gJy4vRXhwci9Bc3NpZ25tZW50SW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IEJsb2NrIGZyb20gJy4vRXhwci9CbG9jay5qcyc7XHJcbmltcG9ydCBCbG9ja0ludGVyZmFjZSBmcm9tICcuL0V4cHIvQmxvY2tJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgQm9vbCBmcm9tICcuL0V4cHIvQm9vbC5qcyc7XHJcbmltcG9ydCBCb29sSW50ZXJmYWNlIGZyb20gJy4vRXhwci9Cb29sSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IENhbGwgZnJvbSAnLi9FeHByL0NhbGwuanMnO1xyXG5pbXBvcnQgQ2FsbEludGVyZmFjZSBmcm9tICcuL0V4cHIvQ2FsbEludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBDb21wYXJpc29uIGZyb20gJy4vRXhwci9Db21wYXJpc29uLmpzJztcclxuaW1wb3J0IENvbXBhcmlzb25JbnRlcmZhY2UgZnJvbSAnLi9FeHByL0NvbXBhcmlzb25JbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgQ29uZGl0aW9uIGZyb20gJy4vRXhwci9Db25kaXRpb24uanMnO1xyXG5pbXBvcnQgQ29uZGl0aW9uSW50ZXJmYWNlIGZyb20gJy4vRXhwci9Db25kaXRpb25JbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgRGVsZXRpb24gZnJvbSAnLi9FeHByL0RlbGV0aW9uLmpzJztcclxuaW1wb3J0IERlbGV0aW9uSW50ZXJmYWNlIGZyb20gJy4vRXhwci9EZWxldGlvbkludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBGdW5jIGZyb20gJy4vRXhwci9GdW5jLmpzJztcclxuaW1wb3J0IEZ1bmNJbnRlcmZhY2UgZnJvbSAnLi9FeHByL0Z1bmNJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgSWYgZnJvbSAnLi9FeHByL0lmLmpzJztcclxuaW1wb3J0IElmSW50ZXJmYWNlIGZyb20gJy4vRXhwci9JZkludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBNYXRoIGZyb20gJy4vRXhwci9NYXRoLmpzJztcclxuaW1wb3J0IE1hdGhJbnRlcmZhY2UgZnJvbSAnLi9FeHByL01hdGhJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgTnVtIGZyb20gJy4vRXhwci9OdW0uanMnO1xyXG5pbXBvcnQgTnVtSW50ZXJmYWNlIGZyb20gJy4vRXhwci9OdW1JbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgT2JqIGZyb20gJy4vRXhwci9PYmouanMnO1xyXG5pbXBvcnQgT2JqSW50ZXJmYWNlIGZyb20gJy4vRXhwci9PYmpJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgUHJlc2VuY2UgZnJvbSAnLi9FeHByL1ByZXNlbmNlLmpzJztcclxuaW1wb3J0IFByZXNlbmNlSW50ZXJmYWNlIGZyb20gJy4vRXhwci9QcmVzZW5jZUludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBSZWZlcmVuY2UgZnJvbSAnLi9FeHByL1JlZmVyZW5jZS5qcyc7XHJcbmltcG9ydCBSZWZlcmVuY2VJbnRlcmZhY2UgZnJvbSAnLi9FeHByL1JlZmVyZW5jZUludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBSZXR1cm4gZnJvbSAnLi9FeHByL1JldHVybi5qcyc7XHJcbmltcG9ydCBSZXR1cm5JbnRlcmZhY2UgZnJvbSAnLi9FeHByL1JldHVybkludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBTdHIgZnJvbSAnLi9FeHByL1N0ci5qcyc7XHJcbmltcG9ydCBTdHJJbnRlcmZhY2UgZnJvbSAnLi9FeHByL1N0ckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogQHZhciBvYmplY3RcclxuICovXHJcbkpzZW4uZ3JhbW1hcnMgPSB7XHJcblx0SWY6IElmLFx0XHRcdFx0XHRcdC8vIGlmIChjb25kaXRpb24pIGV4cHIxIGVsc2UgZXhwcmUyXHJcblx0Ly9CbG9jazogQmxvY2ssXHRcdFx0XHQvLyBmaWVsZDEgPSAzOyBmaWVsZDIgPSB2YWwyXHJcblx0UmV0dXJuOiBSZXR1cm4sXHRcdFx0XHQvLyByZXR1cm4gZmllbGQxXHJcblx0RGVsZXRpb246IERlbGV0aW9uLFx0XHRcdC8vIGRlbGV0ZSBmaWVsZDFcclxuXHRBc3NpZ25tZW50OiBBc3NpZ25tZW50LFx0XHQvLyBmaWVsZDFba2V5MV0ua2V5MiA9IGtcclxuXHRQcmVzZW5jZTogUHJlc2VuY2UsXHRcdFx0Ly8ga2V5MSBpbiBmaWVsZDFcclxuXHRGdW5jOiBGdW5jLFx0XHRcdFx0XHQvLyAoZmllbGQxLCBmaWVsZDIpID0+IHt9XHJcblx0QWJzdHJhY3Rpb246IEFic3RyYWN0aW9uLFx0Ly8gKGZpZWxkMSlcclxuXHRDb25kaXRpb246IENvbmRpdGlvbixcdFx0Ly8gZmllbGQxID4gZmllbGQyID8gdmFsMSA6IHZhbDJcclxuXHRBc3NlcnRpb246IEFzc2VydGlvbixcdFx0Ly8gIWZpZWxkMSAmJiBmaWVsZDJcclxuXHRDb21wYXJpc29uOiBDb21wYXJpc29uLFx0XHQvLyBmaWVsZDEgPiBmaWVsZDJcclxuXHRNYXRoOiBNYXRoLFx0XHRcdFx0XHQvLyBmaWVsZDEgKyBmaWVsZDJcclxuXHRBcnI6IEFycixcdFx0XHRcdFx0Ly8gW2ZpZWxkMSwgZmllbGQyXVxyXG5cdE9iajogT2JqLFx0XHRcdFx0XHQvLyB7ZmllbGQxOnZhbDEsIGZpZWxkMjp2YWwyfVxyXG5cdE51bTogTnVtLFx0XHRcdFx0XHQvLyBbMC05XVxyXG5cdFN0cjogU3RyLFx0XHRcdFx0XHQvLyBcIlwiXHJcblx0Qm9vbDogQm9vbCxcdFx0XHRcdFx0Ly8gdHJ1ZVxyXG5cdENhbGw6IENhbGwsXHRcdFx0XHRcdC8vIGZpZWxkMSgpXHJcblx0UmVmZXJlbmNlOiBSZWZlcmVuY2UsXHRcdC8vIGZpZWxkMVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQge1xyXG5cdEV4cHJJbnRlcmZhY2UsXHJcblx0TGV4ZXIsXHJcblx0Q29udGV4dHNcclxufTtcclxuZXhwb3J0IHtcclxuXHRBYnN0cmFjdGlvbixcclxuXHRBcnIsXHJcblx0QXJndW1lbnRzLFxyXG5cdEFzc2VydGlvbixcclxuXHRBc3NpZ25tZW50LFxyXG5cdEJsb2NrLFxyXG5cdEJvb2wsXHJcblx0Q2FsbCxcclxuXHRDb21wYXJpc29uLFxyXG5cdENvbmRpdGlvbixcclxuXHREZWxldGlvbixcclxuXHRGdW5jLFxyXG5cdElmLFxyXG5cdE1hdGgsXHJcblx0TnVtLFxyXG5cdE9iaixcclxuXHRQcmVzZW5jZSxcclxuXHRSZWZlcmVuY2UsXHJcblx0UmV0dXJuLFxyXG5cdFN0cixcclxufTtcclxuZXhwb3J0IHtcclxuXHRBYnN0cmFjdGlvbkludGVyZmFjZSxcclxuXHRBcnJJbnRlcmZhY2UsXHJcblx0QXJndW1lbnRzSW50ZXJmYWNlLFxyXG5cdEFzc2VydGlvbkludGVyZmFjZSxcclxuXHRBc3NpZ25tZW50SW50ZXJmYWNlLFxyXG5cdEJsb2NrSW50ZXJmYWNlLFxyXG5cdEJvb2xJbnRlcmZhY2UsXHJcblx0Q2FsbEludGVyZmFjZSxcclxuXHRDb21wYXJpc29uSW50ZXJmYWNlLFxyXG5cdENvbmRpdGlvbkludGVyZmFjZSxcclxuXHREZWxldGlvbkludGVyZmFjZSxcclxuXHRGdW5jSW50ZXJmYWNlLFxyXG5cdElmSW50ZXJmYWNlLFxyXG5cdE1hdGhJbnRlcmZhY2UsXHJcblx0TnVtSW50ZXJmYWNlLFxyXG5cdE9iakludGVyZmFjZSxcclxuXHRQcmVzZW5jZUludGVyZmFjZSxcclxuXHRSZWZlcmVuY2VJbnRlcmZhY2UsXHJcblx0UmV0dXJuSW50ZXJmYWNlLFxyXG5cdFN0ckludGVyZmFjZSxcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgSnNlbjtcclxuIiwiXHJcbi8qKlxyXG4gKiBXZSBleHBlY3QgdGhlIGZvbGxvd2luZyBoZXJlXHJcbiAqL1xyXG5jb25zdCBFTlYgPSB7XHJcbiAgICBXaW5kb3c6IG51bGwsXHJcbiAgICBUcmFwOiBudWxsLFxyXG4gICAgcGFyYW1zOiB7XHJcbiAgICAgICAgcm9vdEF0dHJpYnV0ZTogJ3Jvb3QnLFxyXG4gICAgICAgIHNjb3BlZElkQXR0cmlidXRlOiAnc2NvcGVkOmlkJyxcclxuICAgICAgICBpZEhpbnRzQXR0cmlidXRlOiAnc2NvcGUtaGludCcsXHJcbiAgICAgICAgc2NvcGVUcmVlUHJvcGVydHlOYW1lOiAnc2NvcGVUcmVlJyxcclxuICAgICAgICBhZGRDYWxsYmFjazogbnVsbCxcclxuICAgIH0sXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgRU5WOyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc09iamVjdC5qcyc7XHJcbmltcG9ydCBfcHVzaFVuaXF1ZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9wdXNoVW5pcXVlLmpzJztcclxuaW1wb3J0IF9pbnRlcnNlY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvaW50ZXJzZWN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIEhUTUwgQ29udGV4dCBNb2RlbCBTY2hlbWEuXHJcbiAqIEBzZWUgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG4vKipcclxuICogQG9iamVjdFxyXG4gKi9cclxuY29uc3QgU2NoZW1hID0ge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBvYmplY3RcclxuXHQgKi9cclxuXHRzdGQ6IHtcclxuXHRcdC8qKlxyXG5cdFx0ICogQHVuY2F0ZWdvcml6ZWRcclxuXHRcdCAqL1xyXG5cdFx0aHRtbDoge1xyXG5cdFx0XHR0eXBlOiBbJyNzZWN0aW9uaW5nLXJvb3QnXSxcclxuXHRcdFx0bW9kZWw6IFsnaGVhZCcsICdib2R5J10sXHJcblx0XHRcdHNpbmdsZXRvbjogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHRjYXB0aW9uOiB7XHJcblx0XHRcdG1vZGVsOiBbJyNmbG93JywgJyF0YWJsZSddLFxyXG5cdFx0XHRzaW5nbGV0b246IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0Y29sOiB7XHJcblx0XHRcdG1vZGVsOiBbJyNub3RoaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0Y29sZ3JvdXA6IHtcclxuXHRcdFx0bW9kZWw6IFt7J2NvbGdyb3VwW3NwYW5dJzogWycjbm90aGluZyddfSwgeyc6bm90KGNvbGdyb3VwW3NwYW5dKSc6IFsnY29sJywgJ3RlbXBsYXRlJ119XSxcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdGRkOiB7XHJcblx0XHRcdG1vZGVsOiBbJyNmbG93J10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ2RlZmluaXRpb24nLFxyXG5cdFx0fSxcclxuXHRcdGR0OiB7XHJcblx0XHRcdG1vZGVsOiBbJyNmbG93JywgJyEjaGVhZGluZycsICchI3NlY3Rpb25pbmcnLCAnIWhlYWRlcicsICchZm9vdGVyJ10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ3Rlcm0nLFxyXG5cdFx0fSxcclxuXHRcdGZpZ2NhcHRpb246IHtcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnXSxcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdGhlYWQ6IHtcclxuXHRcdFx0bW9kZWw6IFsnI21ldGFkYXRhJ10sXHJcblx0XHRcdHNpbmdsZXRvbjogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHRsZWdlbmQ6IHtcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHRcdHNpbmdsZXRvbjogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHRsaToge1xyXG5cdFx0XHRtb2RlbDogWycjZmxvdyddLFxyXG5cdFx0XHRpbXBsaWNpdFJvbGU6ICdsaXN0aXRlbScsXHJcblx0XHR9LFxyXG5cdFx0b3B0Z3JvdXA6IHtcclxuXHRcdFx0bW9kZWw6IFsnb3B0aW9uJywgJyNzY3JpcHQtc3VwcG9ydGluZyddLFxyXG5cdFx0XHRpbXBsaWNpdFJvbGU6ICdncm91cCcsXHJcblx0XHR9LFxyXG5cdFx0b3B0aW9uOiB7XHJcblx0XHRcdG1vZGVsOiBbeydvcHRpb25bbGFiZWxdW3ZhbHVlXSc6IFsnI25vdGhpbmcnXX0sIHsnb3B0aW9uW2xhYmVsXTpub3Qob3B0aW9uW3ZhbHVlXSknOiBbJyN0ZXh0J119LCB7Jzpub3Qob3B0aW9uW2xhYmVsXSknOiBbJyN0ZXh0J119XSxcclxuXHRcdH0sXHJcblx0XHRwYXJhbToge1xyXG5cdFx0XHRtb2RlbDogWycjbm90aGluZyddLFxyXG5cdFx0fSxcclxuXHRcdHJwOiB7XHJcblx0XHRcdG1vZGVsOiBbJyN0ZXh0J10sXHJcblx0XHR9LFxyXG5cdFx0cnQ6IHtcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0c291cmNlOiB7XHJcblx0XHRcdG1vZGVsOiBbJyNub3RoaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0c3VtbWFyeToge1xyXG5cdFx0XHQvKmNvbXBsaWNhdGVkKi9cclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJywgJyNoZWFkaW5nJ10sXHJcblx0XHRcdHNpbmdsZXRvbjogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHR0cmFjazoge1xyXG5cdFx0XHRtb2RlbDogWycjbm90aGluZyddLFxyXG5cdFx0fSxcclxuXHRcdHRib2R5OiB7XHJcblx0XHRcdG1vZGVsOiBbJyNzY3JpcHQtc3VwcG9ydGluZycsICd0ciddLFxyXG5cdFx0fSxcclxuXHRcdHRkOiB7XHJcblx0XHRcdG1vZGVsOiBbJyNmbG93JywgJyEjaGVhZGluZycsICchI3NlY3Rpb25pbmcnLCAnIWhlYWRlcicsICchZm9vdGVyJ10sXHJcblx0XHR9LFxyXG5cdFx0dGZvb3Q6IHtcclxuXHRcdFx0bW9kZWw6IFsndHInLCAnI3NjcmlwdC1zdXBwb3J0aW5nJ10sXHJcblx0XHRcdHNpbmdsZXRvbjogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHR0aGVhZDoge1xyXG5cdFx0XHRtb2RlbDogWyd0cicsICcjc2NyaXB0LXN1cHBvcnRpbmcnXSxcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdHRyOiB7XHJcblx0XHRcdG1vZGVsOiBbJyNzY3JpcHQtc3VwcG9ydGluZycsICd0ZCcsICd0aCddLFxyXG5cdFx0fSxcclxuXHRcdC8qKlxyXG5cdFx0ICogQGNhdGVnb3JpemVkXHJcblx0XHQgKi9cclxuXHRcdGE6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnLCB7J2FbaHJlZl0nOiBbJyNpbnRlcmFjdGl2ZScsICcjcGFscGFibGUnXX1dLCBcclxuXHRcdFx0bW9kZWw6IFsnI3RyYW5zcGFyZW50JywgJyEjaW50ZXJhY3RpdmUnLCAnIWEnXSxcclxuXHRcdH0sXHJcblx0XHRhYmJyOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJywgJyNwaHJhc2luZyddLFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnLF0sXHJcblx0XHR9LFxyXG5cdFx0YWRkcmVzczoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnLCAnISNoZWFkaW5nJywgJyEjc2VjdGlvbmluZycsICchaGVhZGVyJywgJyFmb290ZXInLCAnIWFkZHJlc3MnLF0sXHJcblx0XHR9LFxyXG5cdFx0Ly8gSWYgYSBjaGlsZCBvZiA8bWFwPlxyXG5cdFx0YXJlYToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZyddLCBcclxuXHRcdFx0bW9kZWw6IFsnI25vdGhpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRhcnRpY2xlOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJywgJyNzZWN0aW9uaW5nLWNvbnRlbnQnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNmbG93J10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ2FydGljbGUnLFxyXG5cdFx0XHRhY2NlcHRhYmxlUm9sZXM6IFsnYXBwbGljYXRpb24nLCAnYXJ0aWNsZScsICdkb2N1bWVudCcsICdtYWluJyxdLFxyXG5cdFx0fSxcclxuXHRcdGFzaWRlOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJywgJyNzZWN0aW9uaW5nLWNvbnRlbnQnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNmbG93J10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ2NvbXBsZW1lbnRhcnknLFxyXG5cdFx0XHRhY2NlcHRhYmxlUm9sZXM6IFsnY29tcGxlbWVudGFyeScsICdub3RlJywgJ3NlYXJjaCcsXSxcclxuXHRcdH0sXHJcblx0XHRhdWRpbzoge1xyXG5cdFx0XHR0eXBlOiBbJyNlbWJlZGRlZCcsICcjZmxvdycsICcjcGhyYXNpbmcnLCB7J2F1ZGlvW2NvbnRyb2xzXSc6IFsnI2ludGVyYWN0aXZlJywgJyNwYWxwYWJsZSddfV0sIFxyXG5cdFx0XHRtb2RlbDogWycjdHJhbnNwYXJlbnQnLCAnISNtZWRpYScsICd0cmFjaycsIHsnOm5vdChhdWRpb1tzcmNdKSc6IFsnc291cmNlJ119XSxcclxuXHRcdH0sXHJcblx0XHRiOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJywgJyNwaHJhc2luZyddLFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRiYXNlOiB7XHJcblx0XHRcdHR5cGU6IFsnI21ldGFkYXRhJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNub3RoaW5nJ10sXHJcblx0XHRcdHNpbmdsZXRvbjogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHRiZGk6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnLCAnI3BocmFzaW5nJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdGJkbzoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwYWxwYWJsZScsICcjcGhyYXNpbmcnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0YmxvY2txdW90ZToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwYWxwYWJsZScsICcjc2VjdGlvbmluZy1yb290J10sXHJcblx0XHRcdG1vZGVsOiBbJyNmbG93J10sXHJcblx0XHR9LFxyXG5cdFx0Ym9keToge1xyXG5cdFx0XHR0eXBlOiBbJyNzZWN0aW9uaW5nLXJvb3QnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNmbG93JywgJ0BiYW5uZXInLCAnQGNvbnRlbnRpbmZvJywgJ0Bjb21wbGVtZW50YXJ5JywgJ0BtYWluJ10sXHJcblx0XHRcdHNpbmdsZXRvbjogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHRicjoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZyddLCBcclxuXHRcdFx0bW9kZWw6IFsnI25vdGhpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRidXR0b246IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjaW50ZXJhY3RpdmUnLCAnI3BhbHBhYmxlJywgJyNwaHJhc2luZyddLCBcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJywgJyEjaW50ZXJhY3RpdmUnXSxcclxuXHRcdH0sXHJcblx0XHRjYW52YXM6IHtcclxuXHRcdFx0dHlwZTogWycjZW1iZWRkZWQnLCAnI2Zsb3cnLCAnI3BhbHBhYmxlJywgJyNwaHJhc2luZyddLCBcclxuXHRcdFx0bW9kZWw6IFsnI3RyYW5zcGFyZW50JywgJyEjaW50ZXJhY3RpdmUnLCAnYScsICdpbWdbdXNlbWFwXScsICdidXR0b24nLCAnaW5wdXRbdHlwZT1cImJ1dHRvblwiXScsICdpbnB1dFt0eXBlPVwicmFkaW9cIl0nLCAnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJywgJ3NlbGVjdFttdWx0aXBsZV0nLCAnc2VsZWN0W3NpemU+PTFdJywgLypoYXMgdGFiaW5kZXggYnV0IG5vdCAjaW50ZXJhY3RpdmUqLydbdGFiaW5kZXhdISNpbnRlcmFjdGl2ZSddLFxyXG5cdFx0fSxcclxuXHRcdGNpdGU6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnLCAnI3BocmFzaW5nJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdGNvZGU6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnLCAnI3BocmFzaW5nJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdGRhdGE6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnLCAnI3BocmFzaW5nJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdGRhdGFsaXN0OiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZycsICcjc2NyaXB0LXN1cHBvcnRpbmcnLCAnb3B0aW9uJ10sXHJcblx0XHR9LFxyXG5cdFx0ZGVsOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJ10sXHJcblx0XHRcdG1vZGVsOiBbJyN0cmFuc3BhcmVudCddLFxyXG5cdFx0fSxcclxuXHRcdGRldGFpbHM6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjaW50ZXJhY3RpdmUnLCAnI3BhbHBhYmxlJywgJyNzZWN0aW9uaW5nLXJvb3QnXSxcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnLCAnc3VtbWFyeSddLFxyXG5cdFx0fSxcclxuXHRcdGRmbjoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwYWxwYWJsZScsICcjcGhyYXNpbmcnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJywgJyFkZm4nXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAndGVybScsXHJcblx0XHR9LFxyXG5cdFx0ZGlhbG9nOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3NlY3Rpb25pbmctcm9vdCddLFxyXG5cdFx0XHRtb2RlbDogWycjZmxvdyddLFxyXG5cdFx0XHRpbXBsaWNpdFJvbGU6ICdkaWFsb2cnLFxyXG5cdFx0fSxcclxuXHRcdGRpdjoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwYWxwYWJsZSddLFxyXG5cdFx0XHQvKmNvbXBsaWNhdGVkKi9cclxuXHRcdFx0bW9kZWw6IFt7J2RsID4gZGl2JzogWydkdCcsICdkZCddfSwge2Rpdi8qVE9ETyc6bm90KGRsID4gZGl2KScqLzogWycjZmxvdyddfV0sXHJcblx0XHR9LFxyXG5cdFx0ZGw6IHtcclxuXHRcdFx0Lypjb21wbGljYXRlZCovXHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAvKns6Y29udGFpbnMoPiAqIG5hbWUtdmFsdWUgZ3JvdXApOiBbJyNwYWxwYWJsZSddfSovXSxcclxuXHRcdFx0Lypjb21wbGljYXRlZCovXHJcblx0XHRcdG1vZGVsOiBbJyNzY3JpcHQtc3VwcG9ydGluZycsICdkbCcsICdkdCcsICdkaXYnXSxcclxuXHRcdH0sXHJcblx0XHRlbToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwYWxwYWJsZScsICcjcGhyYXNpbmcnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0ZW1iZWQ6IHtcclxuXHRcdFx0dHlwZTogWycjZW1iZWRkZWQnLCAnI2Zsb3cnLCAnI3BocmFzaW5nJywgJyNpbnRlcmFjdGl2ZScsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNub3RoaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0ZmllbGRzZXQ6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjc2VjdGlvbmluZy1yb290JywgJyNwYWxwYWJsZSddLFxyXG5cdFx0XHRtb2RlbDogWydsZWdlbmQnLCAnI2Zsb3cnXSxcclxuXHRcdH0sXHJcblx0XHRmaWd1cmU6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjc2VjdGlvbmluZy1yb290JywgJyNwYWxwYWJsZSddLFxyXG5cdFx0XHRtb2RlbDogWycjZmxvdycsICdmaWdjYXB0aW9uJ10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ2ZpZ3VyZScsXHJcblx0XHR9LFxyXG5cdFx0Zm9vdGVyOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNmbG93JywgJyFoZWFkZXInLCAnIWZvb3RlciddLFxyXG5cdFx0XHRhY2NlcHRhYmxlUm9sZXM6IFsnY29udGVudGluZm8nLF0sXHJcblx0XHRcdHNpbmdsZXRvbjogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHRmb3JtOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNmbG93JywgJyFmb3JtJ10sXHJcblx0XHR9LFxyXG5cdFx0aDE6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjaGVhZGluZycsICcjcGFscGFibGUnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ2hlYWRpbmcnLFxyXG5cdFx0fSxcclxuXHRcdGgyOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI2hlYWRpbmcnLCAnI3BhbHBhYmxlJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0XHRpbXBsaWNpdFJvbGU6ICdoZWFkaW5nJyxcclxuXHRcdH0sXHJcblx0XHRoMzoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNoZWFkaW5nJywgJyNwYWxwYWJsZSddLFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAnaGVhZGluZycsXHJcblx0XHR9LFxyXG5cdFx0aDQ6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjaGVhZGluZycsICcjcGFscGFibGUnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ2hlYWRpbmcnLFxyXG5cdFx0fSxcclxuXHRcdGg1OiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI2hlYWRpbmcnLCAnI3BhbHBhYmxlJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0XHRpbXBsaWNpdFJvbGU6ICdoZWFkaW5nJyxcclxuXHRcdH0sXHJcblx0XHRoNjoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNoZWFkaW5nJywgJyNwYWxwYWJsZSddLFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAnaGVhZGluZycsXHJcblx0XHR9LFxyXG5cdFx0aGVhZGVyOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNmbG93JywgJyFoZWFkZXInLCAnIWZvb3RlciddLFxyXG5cdFx0XHRhY2NlcHRhYmxlUm9sZXM6IFsnYmFubmVyJyxdLFxyXG5cdFx0XHRzaW5nbGV0b246IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0aGdyb3VwOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI2hlYWRpbmcnLCAnI3BhbHBhYmxlJ10sXHJcblx0XHRcdG1vZGVsOiBbJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJyNzY3JpcHQtc3VwcG9ydGluZyddLFxyXG5cdFx0fSxcclxuXHRcdGhyOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnXSxcclxuXHRcdFx0bW9kZWw6IFsnI25vdGhpbmcnXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAnc2VwYXJhdG9yJyxcclxuXHRcdH0sXHJcblx0XHRpOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJywgJyNwaHJhc2luZyddLFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRpZnJhbWU6IHtcclxuXHRcdFx0dHlwZTogWycjZW1iZWRkZWQnLCAnI2Zsb3cnLCAnI3BocmFzaW5nJywgJyNpbnRlcmFjdGl2ZScsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNub3RoaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0aW1nOiB7XHJcblx0XHRcdHR5cGU6IFsnI2VtYmVkZGVkJywgJyNmbG93JywgJyNwaHJhc2luZycsIHsnaW1nW3VzZW1hcF0nOiBbJyNpbnRlcmFjdGl2ZScsICcjcGFscGFibGUnXX1dLCBcclxuXHRcdFx0bW9kZWw6IFsnI25vdGhpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRpbnB1dDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsIHsnaW5wdXQ6bm90KFt0eXBlIT1cImhpZGRlblwiXSknOiBbJyNpbnRlcmFjdGl2ZScsICcjcGFscGFibGUnXX1dLCBcclxuXHRcdFx0bW9kZWw6IFsnI25vdGhpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRpbnM6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjdHJhbnNwYXJlbnQnXSxcclxuXHRcdH0sXHJcblx0XHRrYmQ6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRsYWJlbDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjaW50ZXJhY3RpdmUnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnLCAnIWxhYmVsJ10sXHJcblx0XHR9LFxyXG5cdFx0bGluazoge1xyXG5cdFx0XHR0eXBlOiBbJyNtZXRhZGF0YScsIHsnYm9keSBsaW5rJzogWycjZmxvdycsICcjcGhyYXNpbmcnXX1dLCBcclxuXHRcdFx0bW9kZWw6IFsnI25vdGhpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRtYWluOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjZmxvdyddLFxyXG5cdFx0XHRpbXBsaWNpdFJvbGU6ICdtYWluJyxcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdG1hcDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyN0cmFuc3BhcmVudCddLFxyXG5cdFx0fSxcclxuXHRcdG1hcms6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjdHJhbnNwYXJlbnQnXSxcclxuXHRcdH0sXHJcblx0XHRtYXRoOiB7XHJcblx0XHRcdHR5cGU6IFsnI2VtYmVkZGVkJywgJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdC8qY29tcGxpY2F0ZWQqL1xyXG5cdFx0XHRtb2RlbDogW10sXHJcblx0XHR9LFxyXG5cdFx0bWVudToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93Jywgeyc6Y29udGFpbnMoPiBsaSknOiBbJyNwYWxwYWJsZSddfV0sIFxyXG5cdFx0XHRtb2RlbDogWycjc2NyaXB0LXN1cHBvcnRpbmcnLCAnbGknXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAnbGlzdCcsXHJcblx0XHR9LFxyXG5cdFx0bWV0YToge1xyXG5cdFx0XHR0eXBlOiBbJyNtZXRhZGF0YScsIHsnbWV0YVtpdGVtcHJvcF0nOiBbJyNmbG93JywgJyNwaHJhc2luZyddfV0sIFxyXG5cdFx0XHRtb2RlbDogWycjbm90aGluZyddLFxyXG5cdFx0XHRuYW1lczogWydhcHBsaWNhdGlvbi1uYW1lJywgJ2F1dGhvcicsICdkZXNjcmlwdGlvbicsICdnZW5lcmF0b3InLCAna2V5d29yZHMnLCAncmVmZXJyZXInLCAndGhlbWUtY29sb3InXSxcclxuXHRcdH0sXHJcblx0XHRtZXRlcjoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNsYWJlbGFibGUnLCAnI3BocmFzaW5nJywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJywgJyFtZXRlciddLFxyXG5cdFx0fSxcclxuXHRcdG5hdjoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNzZWN0aW9uaW5nLWNvbnRlbnQnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjZmxvdyddLFxyXG5cdFx0XHRpbXBsaWNpdFJvbGU6ICduYXZpZ2F0aW9uJyxcclxuXHRcdFx0YWNjZXB0YWJsZVJvbGVzOiBbJ25hdmlnYXRpb24nLF0sXHJcblx0XHR9LFxyXG5cdFx0bm9zY3JpcHQ6IHtcclxuXHRcdFx0dHlwZTogWycjbWV0YWRhdGEnLCAnI2Zsb3cnLCAnI3BocmFzaW5nJ10sIFxyXG5cdFx0XHRtb2RlbDogW3snaGVhZCBsaW5rJzogWydzdHlsZScsICdtZXRhJywgJ2xpbmsnXX0sIHsnOm5vdChoZWFkIGxpbmspJzogWycjdHJhbnNwYXJlbnQnLCAnIW5vc2NyaXB0J119XSxcclxuXHRcdH0sXHJcblx0XHRvYmplY3Q6IHtcclxuXHRcdFx0dHlwZTogWycjZW1iZWRkZWQnLCAnI2Zsb3cnLCAnI3BocmFzaW5nJywgeydvYmplY3RbdXNlbWFwXSc6IFsnI2ludGVyYWN0aXZlJywgJyNwYWxwYWJsZSddfV0sIFxyXG5cdFx0XHRtb2RlbDogWycjdHJhbnNwYXJlbnQnLCAncGFyYW0nXSxcclxuXHRcdH0sXHJcblx0XHRvbDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93Jywgeyc6Y29udGFpbnMoPiBsaSknOiBbJyNwYWxwYWJsZSddfV0sIFxyXG5cdFx0XHRtb2RlbDogWycjc2NyaXB0LXN1cHBvcnRpbmcnLCAnbGknXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAnbGlzdCcsXHJcblx0XHR9LFxyXG5cdFx0b3V0cHV0OiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI2xhYmVsYWJsZScsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnLCAnIW1ldGVyJ10sXHJcblx0XHR9LFxyXG5cdFx0cDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0cGljdHVyZToge1xyXG5cdFx0XHR0eXBlOiBbJyNlbWJlZGRlZCcsICcjZmxvdycsICcjcGhyYXNpbmcnXSwgXHJcblx0XHRcdG1vZGVsOiBbJ3NvdXJjZScsICdpbWcnLCAnI2FjcmlwdC1zdXBwb3J0aW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0cHJlOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRwcm9ncmVzczoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNsYWJlbGFibGUnLCAnI3BocmFzaW5nJywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJywgJyFwcm9ncmVzcyddLFxyXG5cdFx0fSxcclxuXHRcdHE6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRydWJ5OiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJywgJyNwYWxwYWJsZSddLFxyXG5cdFx0XHQvKmNvbXBsaWNhdGVkKi8gXHJcblx0XHRcdG1vZGVsOiBbJ3JwJywgJ3J0J10sXHJcblx0XHR9LFxyXG5cdFx0czoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdHNhbXA6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRzY3JpcHQ6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjbWV0YWRhdGEnLCAnI3BocmFzaW5nJywgJyNhY3JpcHQtc3VwcG9ydGluZyddLCBcclxuXHRcdFx0bW9kZWw6IFt7J3NjcmlwdFtzcmNdJzogW119XSxcclxuXHRcdH0sXHJcblx0XHRzZWN0aW9uOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3NlY3Rpb25pbmctY29udGVudCcsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNmbG93J10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ3JlZ2lvbicsXHJcblx0XHRcdGFjY2VwdGFibGVSb2xlczogWydhbGVydCcsICdhbGVydGRpYWxvZycsICdhcHBsaWNhdGlvbicsICdjb250ZW50aW5mbycsICdkaWFsb2cnLCAnZG9jdW1lbnQnLCAnbG9nJywgJ21haW4nLCAnbWFycXVlZScsICdyZWdpb24nLCAnc2VhcmNoJywgJ3N0YXR1cycsXSxcclxuXHRcdH0sXHJcblx0XHRzZWxlY3Q6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjaW50ZXJhY3RpdmUnLCAnI2xhYmVsYWJsZScsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWydvcHRpb24nLCAnb3B0Z3JvdXAnLCAnI2FjcmlwdC1zdXBwb3J0aW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0c2xvdDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZyddLCBcclxuXHRcdFx0bW9kZWw6IFsnI3RyYW5zcGFyZW50J10sXHJcblx0XHR9LFxyXG5cdFx0c21hbGw6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRzcGFuOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0c3Ryb25nOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0c3R5bGU6IHtcclxuXHRcdFx0dHlwZTogWycjbWV0YWRhdGEnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3RleHQnXSxcclxuXHRcdH0sXHJcblx0XHRzdWI6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRzdXA6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRzdmc6IHtcclxuXHRcdFx0dHlwZTogWycjZW1iZWRkZWQnLCAnI2Zsb3cnLCAnI3BocmFzaW5nJywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0Lypjb21wbGljYXRlZCovXHJcblx0XHRcdG1vZGVsOiBbXSxcclxuXHRcdH0sXHJcblx0XHR0YWJsZToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFsnY2FwdGlvbicsICdjb2xncm91cCcsICd0aGVhZCcsICd0Ym9keScsICd0cicsICd0Zm9vdCcsICcjc2NyaXB0LXN1cHBvcnRpbmcnXSxcclxuXHRcdH0sXHJcblx0XHR0ZDoge1xyXG5cdFx0XHR0eXBlOiBbJyNzZWN0aW9uaW5nLXJvb3QnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNmbG93J10sXHJcblx0XHR9LFxyXG5cdFx0dGVtcGxhdGU6IHtcclxuXHRcdFx0dHlwZTogWycjbWV0YWRhdGEnLCAnI2Zsb3cnLCAnI3BocmFzaW5nJywgJyNzY3JpcHQtc3VwcG9ydGluZyddLCBcclxuXHRcdFx0bW9kZWw6IFsnI25vdGhpbmcnXSxcclxuXHRcdH0sXHJcblx0XHR0ZXh0YXJlYToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNpbnRlcmFjdGl2ZScsICcjbGFiZWxhYmxlJywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyN0ZXh0J10sXHJcblx0XHR9LFxyXG5cdFx0dGltZToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbeyd0aW1lW2RhdGV0aW1lXSc6IFsnI3BocmFzaW5nJ119LCB7Jzpub3QodGltZVtkYXRldGltZV0pJzogWycjdGV4dCddfV0sXHJcblx0XHR9LFxyXG5cdFx0dGl0bGU6IHtcclxuXHRcdFx0dHlwZTogWycjbWV0YWRhdGEnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3RleHQnXSxcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdHU6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHR1bDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93Jywgeyc6Y29udGFpbnMoPiBsaSknOiBbJyNwYWxwYWJsZSddfV0sIFxyXG5cdFx0XHRtb2RlbDogWycjc2NyaXB0LXN1cHBvcnRpbmcnLCAnbGknXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAnbGlzdCcsXHJcblx0XHR9LFxyXG5cdFx0dmFyOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0dmlkZW86IHtcclxuXHRcdFx0dHlwZTogWycjZW1iZWRkZWQnLCAnI2Zsb3cnLCAnI3BocmFzaW5nJywgeyd2aWRlb1tjb250cm9sc10nOiBbJyNpbnRlcmFjdGl2ZScsICcjcGFscGFibGUnXX1dLCBcclxuXHRcdFx0bW9kZWw6IFsnI3RyYW5zcGFyZW50JywgJyEjbWVkaWEnLCAndHJhY2snLCB7Jzpub3QodmlkZW9bc3JjXSknOiBbJ3NvdXJjZSddfV0sXHJcblx0XHR9LFxyXG5cdFx0d2JyOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjbm90aGluZyddLFxyXG5cdFx0fSxcclxuXHR9LFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBvYmplY3RcclxuXHQgKi9cclxuXHRhcmlhOiB7XHJcblx0XHRiYW5uZXI6IHtcclxuXHRcdFx0dHlwZTogWydAYmFubmVyJ10sIFxyXG5cdFx0XHRzaW5nbGV0b246IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0Y29udGVudGluZm86IHtcclxuXHRcdFx0dHlwZTogWydAY29udGVudGluZm8nXSwgXHJcblx0XHRcdHNpbmdsZXRvbjogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHRjb21wbGVtZW50YXJ5OiB7XHJcblx0XHRcdHR5cGU6IFsnQGNvbXBsZW1lbnRhcnknXSwgXHJcblx0XHRcdHNpbmdsZXRvbjogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHRuYXZpZ2F0aW9uOiB7XHJcblx0XHRcdHR5cGU6IFsnQG5hdmlnYXRpb24nXSwgXHJcblx0XHRcdHNpbmdsZXRvbjogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHRsaXN0OiB7XHJcblx0XHRcdHR5cGU6IFsnQGxpc3QnXSwgXHJcblx0XHR9LFxyXG5cdFx0bGlzdGl0ZW06IHtcclxuXHRcdFx0dHlwZTogWydAbGlzdGl0ZW0nXSwgXHJcblx0XHR9LFxyXG5cdH0sXHJcblx0XHJcblx0LyoqXHJcblx0ICogUmV0dXJucyB0aGUgc2VtYW50aWMgY29udGVudCBtb2RlbCBmb3IgdGhlIGdpdmVuIGVsZW1lbnQuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gSFRNTEVsZW1lbnRcdFx0XHRcdGVsXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGFycmF5XHJcblx0ICovXHJcblx0Z2V0Q29udGVudE1vZGVsRm9yKGVsKSB7IFxyXG5cdFx0dmFyIGVsVGFnTmFtZSA9IGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHRyZXR1cm4gU2NoZW1hLnN0ZFtlbFRhZ05hbWVdID8gU2NoZW1hLmV4cGFuZFJ1bGVzKGVsLCBTY2hlbWEuc3RkW2VsVGFnTmFtZV0ubW9kZWwgfHwgW10pIDogW107XHJcblx0fSxcclxuXHRcclxuXHQvKipcclxuXHQgKiBSZXR1cm5zIHRoZSBzZW1hbnRpYyBjYXRlZ29yaWVzIGZvciB0aGUgZ2l2ZW4gZWxlbWVudC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBIVE1MRWxlbWVudFx0XHRcdFx0ZWxcclxuXHQgKiBAcGFyYW0gYm9vbFx0XHRcdFx0XHRcdHJvbGVJbmNsdXNpdmVcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYXJyYXlcclxuXHQgKi9cclxuXHRnZXRDYXRlZ29yaWVzRm9yKGVsLCByb2xlSW5jbHVzaXZlID0gdHJ1ZSkge1xyXG5cdFx0dmFyIGVsVGFnTmFtZSA9IGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0XHR2YXIgZWxTY2hlbWEgPSBTY2hlbWEuc3RkW2VsVGFnTmFtZV0gfHwgU2NoZW1hLmFyaWFbZWxUYWdOYW1lXSB8fCB7fTtcclxuXHRcdHZhciBjdXJyZW50RWxDYXRlZ29yaWVzID0gW107XHJcblx0XHRpZiAocm9sZUluY2x1c2l2ZSAmJiAhZWwubm9kZU5hbWUuc3RhcnRzV2l0aCgnIycpIFxyXG5cdFx0JiYgKGVsLmhhc0F0dHJpYnV0ZSgncm9sZScpIHx8IGVsU2NoZW1hLmltcGxpY2l0Um9sZSkpIHtcclxuXHRcdFx0Ly8gQ3VycmVudCBlbCdzIGltcGxpYWJsZS9hY2NlcHRhYmxlIHJvbGVzXHJcblx0XHRcdC8vIChUaGVzZSB0YWtlIHByZWNlZGVuY2Ugb3ZlciBuYXRpdmUgc2VtYW50aWNzKVxyXG5cdFx0XHRpZiAoZWwuaGFzQXR0cmlidXRlKCdyb2xlJykpIHtcclxuXHRcdFx0XHR2YXIgZGVmaW5lZFJvbGVzID0gZWwuZ2V0QXR0cmlidXRlKCdyb2xlJykuc3BsaXQoJyAnKTtcclxuXHRcdFx0XHRlbC5nZXRBdHRyaWJ1dGUoJ3JvbGUnKS5zcGxpdCgnICcpLmZvckVhY2gocm9sZSA9PiB7XHJcblx0XHRcdFx0XHRpZiAoZWxTY2hlbWEgJiYgZWxTY2hlbWEuYWNjZXB0YWJsZVJvbGVzICYmICFlbFNjaGVtYS5hY2NlcHRhYmxlUm9sZXMuaW5jbHVkZXMocm9sZSkpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cm9sZSA9IHJvbGUudHJpbSgpO1xyXG5cdFx0XHRcdFx0Y3VycmVudEVsQ2F0ZWdvcmllcy5wdXNoKCdAJyArIHJvbGUpO1xyXG5cdFx0XHRcdFx0aWYgKFNjaGVtYS5hcmlhW3JvbGVdICYmIFNjaGVtYS5hcmlhW3JvbGVdLnR5cGUpIHtcclxuXHRcdFx0XHRcdFx0Y3VycmVudEVsQ2F0ZWdvcmllcyA9IGN1cnJlbnRFbENhdGVnb3JpZXMuY29uY2F0KFNjaGVtYS5leHBhbmRSdWxlcyhlbCwgU2NoZW1hLmFyaWFbcm9sZV0udHlwZSB8fCBbXSkpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9IGVsc2UgaWYgKGVsU2NoZW1hLmltcGxpY2l0Um9sZSkge1xyXG5cdFx0XHRcdF9wdXNoVW5pcXVlKGN1cnJlbnRFbENhdGVnb3JpZXMsICdAJyArIGVsU2NoZW1hLmltcGxpY2l0Um9sZSwgZWxUYWdOYW1lKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gQ3VycmVudCBub2RlJ3MgY2F0ZWdvcmllcy90YWduYW1lXHJcblx0XHRcdHZhciBjdXJyZW50RWxDYXRlZ29yaWVzID0gX3B1c2hVbmlxdWUoU2NoZW1hLmV4cGFuZFJ1bGVzKGVsLCBlbFNjaGVtYS50eXBlIHx8IFtdKSwgZWxUYWdOYW1lKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBjdXJyZW50RWxDYXRlZ29yaWVzO1xyXG5cdH0sXHJcblxyXG5cdC8qKlxyXG5cdCAqIFZhbGlkYXRlcyB0aGF0IHRoZSBnaXZlbiBub2RlIGJlbG9uZ3MgaW4gdGhlIGNvbnRleHQncyBjb250ZW50IG1vZGVsXHJcblx0ICogZ29pbmcgYnkgdGhlIHNlbWFudGljc1xyXG5cdCAqXHJcblx0ICogQHBhcmFtIEhUTUxFbGVtZW50XHRcdFx0XHRjb250ZXh0XHJcblx0ICogQHBhcmFtIEhUTUxFbGVtZW50XHRcdFx0XHRub2RlXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGJvb2xcclxuXHQgKi9cclxuXHRhc3NlcnROb2RlQmVsb25nc0luQ29udGVudE1vZGVsKGNvbnRleHQsIG5vZGUpIHtcclxuXHRcdHZhciBjb250ZXh0TW9kZWwgPSBjb250ZXh0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgXHJcblx0XHRcdD8gU2NoZW1hLmdldENvbnRlbnRNb2RlbEZvcihjb250ZXh0KVxyXG5cdFx0XHQ6IGNvbnRleHQ7XHJcblx0XHR2YXIgbm9kZUNhdGVnb3JpZXMgPSBub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgXHJcblx0XHRcdD8gU2NoZW1hLmdldENhdGVnb3JpZXNGb3Iobm9kZSlcclxuXHRcdFx0OiBub2RlO1xyXG5cdFx0aWYgKF9pbnRlcnNlY3QoY29udGV4dE1vZGVsLCBbJyNub3RoaW5nJywgJyN0ZXh0J10pLmxlbmd0aCkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0XHR2YXIgdmFsaWQ7XHJcblx0XHQvLyBTbyBjdXJyZW50IGNvbnRlbnQgbW9kZWwgaGFzIHRvIGxpc3QgZWl0aGVyIHRoaXMgbm9kZSdzIGNhdGVnb3JpZXMsXHJcblx0XHQvLyB0YWduYW1lLCBvciBpbXBsaWFibGUvYWNjZXB0YWJsZSByb2xlc1xyXG5cdFx0Y29udGV4dE1vZGVsLmZvckVhY2goYWxsb3dlZE5vZGUgPT4ge1xyXG5cdFx0XHRpZiAoYWxsb3dlZE5vZGUuc3RhcnRzV2l0aCgnIScpKSB7XHJcblx0XHRcdFx0dmFyIGRpc2FsbG93ZWROb2RlID0gYWxsb3dlZE5vZGUuc3Vic3RyKDEpO1xyXG5cdFx0XHRcdGlmIChub2RlQ2F0ZWdvcmllcy5pbmNsdWRlcyhkaXNhbGxvd2VkTm9kZSkpIHtcclxuXHRcdFx0XHRcdHZhbGlkID0gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2UgaWYgKHZhbGlkICE9PSBmYWxzZSkge1xyXG5cdFx0XHRcdGlmIChub2RlQ2F0ZWdvcmllcy5pbmNsdWRlcyhhbGxvd2VkTm9kZSkpIHtcclxuXHRcdFx0XHRcdHZhbGlkID0gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIHZhbGlkICYmIHRydWU7XHJcblx0fSxcclxuXHJcblx0LyoqXHJcblx0ICogVmFsaWRhdGVzIHRoYXQgdGhlIGdpdmVuIG5vZGUgaXMgYXNzb2NpYXRlZCB0byB0aGUgY29udGV4dCBkaXJlY3RseVxyXG5cdCAqIGdvaW5nIGJ5IHRoZSBzZW1hbnRpY3NcclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBIVE1MRWxlbWVudFx0XHRcdFx0c2NvcGVcclxuXHQgKiBAcGFyYW0gSFRNTEVsZW1lbnRcdFx0XHRcdG5vZGVcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdFx0XHRcdG5vZGVTY2hlbWFcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYm9vbFxyXG5cdCAqL1xyXG5cdGFzc2VydE5vZGVCZWxvbmdzSW5TY29wZUFzKHNjb3BlLCBub2RlLCBub2RlU2NoZW1hID0gbnVsbCkge1xyXG5cdFx0dmFyIGNvbnRleHRDYXRlZ29yaWVzID0gU2NoZW1hLmdldENhdGVnb3JpZXNGb3Ioc2NvcGUpO1xyXG5cdFx0dmFyIGNsb3Nlc3QsIGN1cnJlbnQgPSBub2RlLCBub2RlTW9kZWw7XHJcblx0XHR3aGlsZSAoIWNsb3Nlc3QgJiYgKGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudE5vZGUpKSB7XHJcblx0XHRcdGlmIChfaW50ZXJzZWN0KGNvbnRleHRDYXRlZ29yaWVzLCBTY2hlbWEuZ2V0Q2F0ZWdvcmllc0ZvcihjdXJyZW50KSkubGVuZ3RoXHJcblx0XHRcdFx0JiYgU2NoZW1hLmFzc2VydE5vZGVCZWxvbmdzSW5Db250ZW50TW9kZWwoY3VycmVudCwgbm9kZVNjaGVtYSA/IChub2RlU2NoZW1hLnR5cGUgfHwgbm9kZSkgOiBub2RlKVxyXG5cdFx0XHQpIHtcclxuXHRcdFx0XHRjbG9zZXN0ID0gY3VycmVudDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGNsb3Nlc3QgPT09IHNjb3BlO1xyXG5cdH0sXHJcblx0XHJcblx0LyoqXHJcblx0ICogRmxhdHRlbnMgdGhlIHNjaGVtYSBydWxlcyBmb3IgdGhlIGdpdmVuIGVsZW1lbnQuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gSFRNTEVsZW1lbnRcdFx0XHRcdGVsXHJcblx0ICogQHBhcmFtIGFycmF5XHRcdFx0XHRcdFx0cnVsZXNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYXJyYXlcclxuXHQgKi9cclxuXHRleHBhbmRSdWxlcyhlbCwgcnVsZXMpIHtcclxuXHRcdHZhciBybGVzID0gcnVsZXMucmVkdWNlKChjYXRlZ29yaWVzLCBydWxlKSA9PiB7XHJcblx0XHRcdGlmIChfaXNPYmplY3QocnVsZSkpIHtcclxuXHRcdFx0XHRpZiAoZWwubWF0Y2hlcyhPYmplY3Qua2V5cyhydWxlKVswXSkpIHtcclxuXHRcdFx0XHRcdGNhdGVnb3JpZXMgPSBjYXRlZ29yaWVzLmNvbmNhdChPYmplY3QudmFsdWVzKHJ1bGUpWzBdKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y2F0ZWdvcmllcy5wdXNoKHJ1bGUpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBjYXRlZ29yaWVzO1xyXG5cdFx0fSwgW10pO1xyXG5cdFx0aWYgKHJsZXMuaW5jbHVkZXMoJyNzZWN0aW9uaW5nLXJvb3QnKSkge1xyXG5cdFx0XHRybGVzLnB1c2goJyNzZWN0aW9uaW5nLWNvbnRlbnQnKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBybGVzO1xyXG5cdH0sXHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IFNjaGVtYTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNOdW1lcmljIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNOdW1lcmljLmpzJztcclxuaW1wb3J0IF9hcnJGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Zyb20uanMnO1xyXG5pbXBvcnQgX2VhY2ggZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZWFjaC5qcyc7XHJcbmltcG9ydCBkaXNjb25uZWN0ZWRDYWxsYmFjayBmcm9tICcuL2Rpc2Nvbm5lY3RlZENhbGxiYWNrLmpzJztcclxuaW1wb3J0IFNjaGVtYSBmcm9tICcuL1NjaGVtYS5qcyc7XHJcbmltcG9ydCBFTlYgZnJvbSAnLi9FTlYuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgQ2h0bWwgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY29wZWRIVE1MIHtcclxuXHJcblx0LyoqXHJcblx0ICogSW5pdGlhbGl6ZXMgdGhlIG5ldyBDaHRtbCBpbnN0YW5jZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBkb2N1bWVudHxIVE1MRWxlbWVudFx0ZWxcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGVsKSB7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX2VsJywge3ZhbHVlOmVsfSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2VsJywge1xyXG5cdFx0XHR2YWx1ZTplbC5ub2RlTmFtZSA9PT0gJyNkb2N1bWVudCcgPyBlbC5xdWVyeVNlbGVjdG9yKCdodG1sJykgOiBlbCxcclxuXHRcdH0pO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuZWwsICcuc2NvcGVkSFRNTCcsIHt2YWx1ZTogdGhpc30pO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBST0xFU1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tXHJcblx0XHRcclxuXHRcdHRoaXMuaXNSb290ID0gZWwuaGFzQXR0cmlidXRlKEVOVi5wYXJhbXMucm9vdEF0dHJpYnV0ZSk7XHJcblx0XHRcclxuXHRcdC8vIC0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gVFJFRVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tXHJcblx0XHRcclxuXHRcdGNvbnN0IHN0b3JlID0ge307XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3N0b3JlJywge3ZhbHVlOnN0b3JlfSk7XHJcblx0XHRpZiAoRU5WLlRyYXApIHtcclxuXHRcdFx0aWYgKEVOVi5UcmFwLnRyYXApIHtcclxuXHRcdFx0XHRFTlYuVHJhcC50cmFwKHN0b3JlLCAoZSwgcmVjaWV2ZWQsIG5leHQpID0+IHtcclxuXHRcdFx0XHRcdHJldHVybiBuZXh0KHJlY2lldmVkIHx8IHRoaXMuZmluZChlLnF1ZXJ5KSk7XHJcblx0XHRcdFx0fSwge3R5cGU6J2dldCd9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoRU5WLlRyYXAubGluaykge1xyXG5cdFx0XHRcdEVOVi5UcmFwLmxpbmsodGhpcy5lbCwgRU5WLnBhcmFtcy5zY29wZVRyZWVQcm9wZXJ0eU5hbWUsIHRoaXMuc3RvcmUpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChFTlYuVHJhcC5pbml0KSB7XHJcblx0XHRcdFx0Ly8gVGhlIGZvbGxvd2luZyBub2RlcywgYmVpbmcgcHJlbGlzdGVkLFxyXG5cdFx0XHRcdC8vIGNhbiBiZSBhY2Nlc3NlZCBkeW5hbWljYWxseVxyXG5cdFx0XHRcdGNvbnN0IG5vZGVzSGludCA9IChlbC5nZXRBdHRyaWJ1dGUoRU5WLnBhcmFtcy5pZEhpbnRzQXR0cmlidXRlKSB8fCAnJylcclxuXHRcdFx0XHRcdC5zcGxpdCgnICcpLm1hcChyID0+IHIudHJpbSgpKS5maWx0ZXIociA9PiByKTtcclxuXHRcdFx0XHRFTlYuVHJhcC5pbml0KHRoaXMuc3RvcmUsIG5vZGVzSGludCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQWRkcyBhIG5vZGUgaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nfGludFx0IG5vZGVOYW1lXHJcblx0ICogQHBhcmFtIG1peGVkXHRcdFx0IG5vZGVcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gRWxlbWVudFxyXG5cdCAqL1xyXG5cdGFkZChub2RlTmFtZSwgbm9kZSkge1xyXG5cdFx0dmFyIGFkZCA9ICh0YXJnZXQsIGtleSwgbm9kZSwgaXNOb2RlID0gZmFsc2UpID0+IHtcclxuXHRcdFx0dmFyIF9ub2RlID0gbm9kZTtcclxuXHRcdFx0aWYgKGlzTm9kZSkge1xyXG5cdFx0XHRcdGlmIChFTlYucGFyYW1zLmFkZENhbGxiYWNrKSB7XHJcblx0XHRcdFx0XHRfbm9kZSA9IEVOVi5wYXJhbXMuYWRkQ2FsbGJhY2soX25vZGUsIHRoaXMpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRuZXcgU2NvcGVkSFRNTChfbm9kZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gU2V0IHdpdGggdHJhcD9cclxuXHRcdFx0aWYgKEVOVi5UcmFwICYmIEVOVi5UcmFwLnNldCkge1xyXG5cdFx0XHRcdEVOVi5UcmFwLnNldCh0YXJnZXQsIGtleSwgX25vZGUpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKF9pc0FycmF5KHRhcmdldCkpIHtcclxuXHRcdFx0XHR0YXJnZXQucHVzaChfbm9kZSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGFyZ2V0W2tleV0gPSBfbm9kZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoaXNOb2RlKSB7XHJcblx0XHRcdFx0Ly8gV2UnbGwgcmVtb3ZlIGZyb20gdHJlZSBhdCB0aGVcclxuXHRcdFx0XHQvLyB0aW1lIGl0IGxlYXZlcyB0aGUgRE9NXHJcblx0XHRcdFx0ZGlzY29ubmVjdGVkQ2FsbGJhY2sobm9kZSwgKCkgPT4ge1xyXG5cdFx0XHRcdFx0aWYgKEVOVi5UcmFwICYmIEVOVi5UcmFwLmRlbGV0ZVByb3BlcnR5KSB7XHJcblx0XHRcdFx0XHRcdEVOVi5UcmFwLmRlbGV0ZVByb3BlcnR5KHRhcmdldCwga2V5KTtcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoX2lzQXJyYXkodGFyZ2V0KSkge1xyXG5cdFx0XHRcdFx0XHRfcmVtb3ZlKHRhcmdldCwgX25vZGUpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0ZGVsZXRlIHRhcmdldFtrZXldO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBub2RlO1xyXG5cdFx0fTtcclxuXHRcdGlmIChfaXNBcnJheShub2RlKSkge1xyXG5cdFx0XHR2YXIgbm9kZUxpc3QgPSBbXTtcclxuXHRcdFx0bm9kZS5mb3JFYWNoKChfbm9kZSwgaSkgPT4gYWRkKG5vZGVMaXN0LCBpLCBfbm9kZSwgdHJ1ZS8qKiBpc05vZGUgKi8pKTtcclxuXHRcdFx0YWRkKHRoaXMuc3RvcmUsIG5vZGVOYW1lLCBub2RlTGlzdCk7XHJcblx0XHRcdHJldHVybiBub2RlTGlzdDtcclxuXHRcdH1cclxuXHRcdHJldHVybiBhZGQodGhpcy5zdG9yZSwgbm9kZU5hbWUsIG5vZGUsIHRydWUvKiogaXNOb2RlICovKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldHMgYSBub2RlIG9yIGxpc3Qgb2Ygbm9kZXMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nfGludHxhcnJheVx0IG5vZGVOYW1lc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiBDaHRtbHxhcnJheXxvYmplY3RcclxuXHQgKi9cclxuXHRmaW5kKG5vZGVOYW1lcykge1xyXG5cdFx0X2FyckZyb20obm9kZU5hbWVzKS5mb3JFYWNoKG5vZGVOYW1lID0+IHtcclxuXHRcdFx0aWYgKHRoaXMuc3RvcmVbbm9kZU5hbWVdKSB7XHJcblx0XHRcdFx0Ly8gQXJyYXlzIG11c3Qgbm90IGJlIHJldXNlZCFcclxuXHRcdFx0XHQvLyBUaGVpciBzb3VyY2VzIG9mIG5vZGVzIGNhbnQgYmUgZ3VhcmFudGVlZCB0byBiZSBzYW1lLlxyXG5cdFx0XHRcdC8vIHRoaXMuc3RvcmVbbm9kZU5hbWVdIGNvdWxkIGFsc28gYmUgYW4gZW1wdHkgZ2V0dGVyL3NldHRlclxyXG5cdFx0XHRcdC8vIFNvIHRoZSBpbnN0YW5jZW9mIGlzIHRoZSB3YXkgdG8gZ28gZm9yIGJvdGggcHJvYmxlbXNcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5zdG9yZVtub2RlTmFtZV07XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIG5vZGU7XHJcblx0XHRcdGlmICgobm9kZSA9IHRoaXMuZmluZEV4cGxpY2l0KG5vZGVOYW1lKSlcclxuXHRcdFx0fHwgKG5vZGUgPSB0aGlzLmZpbmRJbXBsaWNpdChub2RlTmFtZSkpKSB7XHJcblx0XHRcdFx0dGhpcy5hZGQobm9kZU5hbWUsIG5vZGUpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiBfaXNBcnJheShub2RlTmFtZXMpID8gX29iakZyb20obm9kZU5hbWVzLCB0aGlzLnN0b3JlKSA6IHRoaXMuc3RvcmVbbm9kZU5hbWVzXTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQXR0ZW1wdHMgdG8gcmVzb2x2ZSBhIG5vZGUgZnJvbSBleHBsaWNpdCB0cmVlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZ1x0XHRcdFx0c2NvcGVkSURcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gSFRNTEVsZW1lbnRcclxuXHQgKi9cclxuXHRmaW5kRXhwbGljaXQoc2NvcGVkSUQpIHtcclxuXHRcdC8vIElmIGdpdmVuIGEgcm9sZWNhc2UsIHdlIGNhbiBwZXJmb3JtIGEgcXVlcnkgaWYgd2UgdW5kZXJzdGFuZCB0aGUgc2VtYW50aWNzLlxyXG5cdFx0aWYgKHRoaXMuaXNSb290KSB7XHJcblx0XHRcdC8vIEZpbmQgbWF0Y2hlcy4uLlxyXG5cdFx0XHR2YXIgQ1NTRXNjYXBlID0gRU5WLldpbmRvdy5DU1MgPyBFTlYuV2luZG93LkNTUy5lc2NhcGUgOiBzdHIgPT4gc3RyO1xyXG5cdFx0XHR2YXIgY2xvc2VzdFN1cGVyU2VsZWN0b3IgPSAnWycgKyBDU1NFc2NhcGUoRU5WLnBhcmFtcy5yb290QXR0cmlidXRlKSArICddJztcclxuXHRcdFx0dmFyIG5vZGVTZWxlY3RvciA9ICdbJyArIENTU0VzY2FwZShFTlYucGFyYW1zLnNjb3BlZElkQXR0cmlidXRlKSArICc9XCInICsgc2NvcGVkSUQgKyAnXCJdJztcclxuXHRcdFx0dmFyIGNsb3Nlc3RTdXBlciwgX21hdGNoZWROb2RlO1xyXG5cdFx0XHRpZiAoKF9tYXRjaGVkTm9kZSA9ICh0aGlzLmVsLnNoYWRvd1Jvb3QgfHwgdGhpcy5lbCkucXVlcnlTZWxlY3Rvcihub2RlU2VsZWN0b3IpKVxyXG5cdFx0XHQvLyBJZiB0aGlzLmVsIGhhcyBhIHNoYWRvd1Jvb3QsIHdlIGRvbid0IGV4cGVjdCBfbWF0Y2hlZE5vZGUgdG8gYmUgYWJsZSB0byBmaW5kIGlzIHN1cGVyUm9sZSBlbGVtZW50LlxyXG5cdFx0XHQvLyBJZiBpdCBmaW5kcyBvbmUsIHRoZW4gaXRzIG5vdCBmb3IgdGhlIGN1cnJlbiBzdXBlclJvbGUgZWxlbWVudC5cclxuXHRcdFx0JiYgKCh0aGlzLmVsLnNoYWRvd1Jvb3QgJiYgIShfbWF0Y2hlZE5vZGUucGFyZW50Tm9kZS5jbG9zZXN0ICYmIF9tYXRjaGVkTm9kZS5wYXJlbnROb2RlLmNsb3Nlc3QoY2xvc2VzdFN1cGVyU2VsZWN0b3IpKSlcclxuXHRcdFx0Ly8gX21hdGNoZWROb2RlIG11c3QgZmluZCB0aGlzLmVsIGFzIGl0cyBzdXBlclJvbGUgZWxlbWVudCB0byBxdWFsaWZ5LlxyXG5cdFx0XHRcdHx8ICghdGhpcy5lbC5zaGFkb3dSb290ICYmIF9tYXRjaGVkTm9kZS5wYXJlbnROb2RlICYmIChjbG9zZXN0U3VwZXIgPSBfbWF0Y2hlZE5vZGUucGFyZW50Tm9kZS5jbG9zZXN0KGNsb3Nlc3RTdXBlclNlbGVjdG9yKSkgJiYgY2xvc2VzdFN1cGVyLmlzU2FtZU5vZGUodGhpcy5lbCkpXHJcblx0XHRcdCkpIHtcclxuXHRcdFx0XHRyZXR1cm4gX21hdGNoZWROb2RlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEF0dGVtcHRzIHRvIHJlc29sdmUgYSBub2RlIGZyb20gaW1wbGljaXQgdHJlZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmdcdFx0XHRcdHJlcXVlc3ROb2RlTmFtZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBIVE1MRWxlbWVudHxhcnJheVxyXG5cdCAqL1xyXG5cdGZpbmRJbXBsaWNpdChyZXF1ZXN0Tm9kZU5hbWUpIHtcclxuXHRcdGlmIChfaXNOdW1lcmljKHJlcXVlc3ROb2RlTmFtZSkgfHwgcmVxdWVzdE5vZGVOYW1lLm1hdGNoKC9bXmEtekEtWjAtOVxcLV0vKSkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHQvLyBVc2UgU2NoZW1hLi4uXHJcblx0XHR2YXIgbm9kZVNjaGVtYSwgbm9kZVNlbGVjdG9yID0gW107XHJcblx0XHR2YXIgdHJpZXMgPSBbXTtcclxuXHRcdGlmIChTY2hlbWEuYXJpYVtyZXF1ZXN0Tm9kZU5hbWVdKSB7XHJcblx0XHRcdHRyaWVzLnB1c2goe1xyXG5cdFx0XHRcdFNjaGVtYTogU2NoZW1hLmFyaWFbcmVxdWVzdE5vZGVOYW1lXSxcclxuXHRcdFx0XHRzZWxlY3RvcjogWydbcm9sZT1cIicgKyByZXF1ZXN0Tm9kZU5hbWUgKyAnXCJdJ10sXHJcblx0XHRcdH0pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dHJpZXMucHVzaCh7XHJcblx0XHRcdFx0U2NoZW1hOiBTY2hlbWEuc3RkW3JlcXVlc3ROb2RlTmFtZV0gfHwgU2NoZW1hLmFyaWFbcmVxdWVzdE5vZGVOYW1lXSxcclxuXHRcdFx0XHRzZWxlY3RvcjogW3JlcXVlc3ROb2RlTmFtZSwgJ1tyb2xlPVwiJyArIHJlcXVlc3ROb2RlTmFtZSArICdcIl0nXSxcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0XHRfZWFjaChTY2hlbWEuc3RkLCAodGFnbmFtZSwgU2NoZW1hKSA9PiB7XHJcblx0XHRcdGlmIChTY2hlbWEuaW1wbGljaXRSb2xlID09PSByZXF1ZXN0Tm9kZU5hbWUpIHtcclxuXHRcdFx0XHR0cmllcy5wdXNoKHtcclxuXHRcdFx0XHRcdFNjaGVtYTogU2NoZW1hLFxyXG5cdFx0XHRcdFx0c2VsZWN0b3I6IFt0YWduYW1lXSxcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHR2YXIgbWF0Y2hlcyA9IG51bGw7XHJcblx0XHR0cmllcy5mb3JFYWNoKHRyaWUgPT4ge1xyXG5cdFx0XHQodGhpcy5lbC5zaGFkb3dSb290IHx8IHRoaXMuZWwpLnF1ZXJ5U2VsZWN0b3JBbGwodHJpZS5zZWxlY3Rvci5qb2luKCcsJykpLmZvckVhY2gobm9kZSA9PiB7XHJcblx0XHRcdFx0aWYgKFNjaGVtYS5hc3NlcnROb2RlQmVsb25nc0luU2NvcGVBcyh0aGlzLmVsLCBub2RlLCB0cmllLnNjaGVtYSkpIHtcclxuXHRcdFx0XHRcdGlmICh0cmllLnNjaGVtYSAmJiB0cmllLnNjaGVtYS5zaW5nbGV0b24pIHtcclxuXHRcdFx0XHRcdFx0bWF0Y2hlcyA9IG5vZGU7XHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCFtYXRjaGVzIHx8IF9pc0FycmF5KG1hdGNoZXMpKSB7XHJcblx0XHRcdFx0XHRcdG1hdGNoZXMgPSBtYXRjaGVzIHx8IFtdO1xyXG5cdFx0XHRcdFx0XHRtYXRjaGVzLnB1c2gobm9kZSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0aWYgKCFtYXRjaGVzICYmIHRyaWUuc2NoZW1hICYmICF0cmllLnNjaGVtYS5zaW5nbGV0b24pIHtcclxuXHRcdFx0XHRtYXRjaGVzID0gW107XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIG1hdGNoZXM7XHJcblx0fVxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCBFTlYgZnJvbSAnLi9FTlYuanMnO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBNdXRhdGlvbk9ic2VydmVyIHRoYXQgZmlyZXMgd2hlblxyXG4gKiB0aGUgZWxlbWVudCBsZWF2ZXMgdGhlIERPTS5cclxuICpcclxuICogQHBhcmFtIHN0cmluZ1x0XHRcdFx0XHRcdGlucHV0XHJcbiAqIEBwYXJhbSBmdW5jdGlvblx0XHRcdFx0XHRcdGNhbGxiYWNrXHJcbiAqXHJcbiAqIEByZXR1cm4gdm9pZFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlzY29ubmVjdGVkQ2FsbGJhY2soZWwsIGNhbGxiYWNrKSB7XHJcblx0aWYgKGVsLnBhcmVudE5vZGUgJiYgRU5WLldpbmRvdy5NdXRhdGlvbk9ic2VydmVyKSB7XHJcblx0XHR2YXIgY2FsbGVkID0gZmFsc2U7XHJcblx0XHR2YXIgb2JzZXJ2ZXIgPSBuZXcgRU5WLldpbmRvdy5NdXRhdGlvbk9ic2VydmVyKG11dGF0aW9ucyA9PiB7XHJcblx0XHRcdG11dGF0aW9ucy5mb3JFYWNoKG0gPT4ge1xyXG5cdFx0XHRcdGlmICghY2FsbGVkICYmIF9hcnJGcm9tKG0ucmVtb3ZlZE5vZGVzKS5pbmNsdWRlcyhlbCkpIHtcclxuXHRcdFx0XHRcdGNhbGxlZCA9IHRydWU7XHJcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHRcdG9ic2VydmVyLm9ic2VydmUoZWwucGFyZW50Tm9kZSwge2NoaWxkTGlzdDp0cnVlfSk7XHJcblx0XHRkaXNjb25uZWN0ZWRDYWxsYmFjayhlbC5wYXJlbnROb2RlLCAoKSA9PiB7XHJcblx0XHRcdGlmICghY2FsbGVkKSB7XHJcblx0XHRcdFx0Y2FsbGVkID0gdHJ1ZTtcclxuXHRcdFx0XHRjYWxsYmFjaygpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBSZWZsZXggZnJvbSAnQHdlYi1uYXRpdmUtanMvcmVmbGV4JztcclxuaW1wb3J0IFNjb3BlZEhUTUwgZnJvbSAnLi9TY29wZWRIVE1MLmpzJztcclxuaW1wb3J0IFNjaGVtYSBmcm9tICcuL1NjaGVtYS5qcyc7XHJcbmltcG9ydCBFTlYgZnJvbSAnLi9FTlYuanMnO1xyXG5cclxuLyoqXHJcbiAqIEBpbml0XHJcbiAqL1xyXG5TY29wZWRIVE1MLmluaXQgPSBmdW5jdGlvbihXaW5kb3csIFRyYXAgPSBSZWZsZXgpIHtcclxuICAgIEVOVi5XaW5kb3cgPSBXaW5kb3c7XHJcbiAgICBFTlYuVHJhcCA9IFRyYXA7XHJcbiAgICAvLyBEZWZpbmVcclxuICAgIGlmICghRU5WLldpbmRvdyB8fCAhKCdFbGVtZW50JyBpbiBFTlYuV2luZG93KSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIFwiRWxlbWVudFwiIGNsYXNzIG5vdCBmb3VuZCBpbiBnbG9iYWwgY29udGV4dCEnKTtcclxuICAgIH1cclxuICAgIGlmIChFTlYucGFyYW1zLnNjb3BlVHJlZVByb3BlcnR5TmFtZSBpbiBFTlYuV2luZG93LkVsZW1lbnQucHJvdG90eXBlKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgXCJFbGVtZW50XCIgY2xhc3MgYWxyZWFkeSBoYXMgYSBcIicgKyBFTlYucGFyYW1zLnNjb3BlVHJlZVByb3BlcnR5TmFtZSArICdcIiBwcm9wZXJ0eSEnKTtcclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFTlYuV2luZG93LkVsZW1lbnQucHJvdG90eXBlLCBFTlYucGFyYW1zLnNjb3BlVHJlZVByb3BlcnR5TmFtZSwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpc1snLnNjb3BlZEhUTUwnXSkge1xyXG4gICAgICAgICAgICAgICAgbmV3IFNjb3BlZEhUTUwodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKEVOVi5wYXJhbXMucHJveHlTY29wZWRPYmplY3RzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRU5WLlRyYXAgPyBuZXcgUHJveHkodGhpc1snLnNjb3BlZEhUTUwnXS5zdG9yZSwgRU5WLlRyYXApIDogbmV3IFByb3h5KHRoaXNbJy5zY29wZWRIVE1MJ10uc3RvcmUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzWycuc2NvcGVkSFRNTCddLnN0b3JlO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQge1xyXG4gICAgU2NvcGVkSFRNTCBhcyBkZWZhdWx0LFxyXG4gICAgU2NoZW1hLFxyXG4gICAgRU5WLFxyXG59IiwiXHJcbi8qKlxyXG4gKiBXZSBleHBlY3QgdGhlIGZvbGxvd2luZyBoZXJlXHJcbiAqL1xyXG5jb25zdCBFTlYgPSB7XHJcbiAgICBXaW5kb3c6IG51bGwsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgRU5WOyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBFTlYgZnJvbSAnLi9FTlYuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgU2NvcGVkQ1NTIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgU2NvcGVkQ1NTIGZyb20gJy4vU2NvcGVkQ1NTLmpzJztcclxuaW1wb3J0IEVOViBmcm9tICcuL0VOVi5qcyc7XHJcblxyXG4vKipcclxuICogQGluaXRcclxuICovXHJcblNjb3BlZENTUy5pbml0ID0gZnVuY3Rpb24oV2luZG93LCkge1xyXG4gICAgRU5WLldpbmRvdyA9IFdpbmRvdztcclxufVxyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQge1xyXG4gICAgU2NvcGVkQ1NTIGFzIGRlZmF1bHQsXHJcbiAgICBFTlYsXHJcbn0iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIEFOWSBpdGVtcyBwYXNzIHRoZSB0ZXN0LlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXkgXHRhcnJcclxuICogQHBhcmFtIGZ1bmN0aW9uIFx0Y2FsbGJhY2tcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIGNhbGxiYWNrKSB7XHJcblx0cmV0dXJuIGFyci5yZWR1Y2UoKHByZXZUZXN0LCBpdG0pID0+IHByZXZUZXN0IHx8IGNhbGxiYWNrKGl0bSksIGZhbHNlKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9tZXJnZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9tZXJnZSc7XHJcbmltcG9ydCBKU0VOLCB7QmxvY2t9IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2pzZW4nO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgU2NvcGVkSlMgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XHJcbiAgICBzdGF0aWMgcGFyc2Uoc2NyaXB0LCBwYXJhbXMgPSB7fSkge1xyXG4gICAgICAgIHZhciBBU1Q7XHJcbiAgICAgICAgaWYgKCEoQVNUID0gSlNFTi5wYXJzZShzY3JpcHQsIFtCbG9ja10sIF9tZXJnZSh7YXNzZXJ0OmZhbHNlfSwgcGFyYW1zKSkpKSB7XHJcbiAgICAgICAgICAgIEFTVCA9IG5ldyBCbG9jayhbSlNFTi5wYXJzZShzY3JpcHQsIG51bGwsIHBhcmFtcyldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIEFTVDtcclxuICAgIH1cclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IHtDb250ZXh0c30gZnJvbSAnQHdlYi1uYXRpdmUtanMvanNlbic7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBDb250ZXh0cyBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmV4cG9ydCBkZWZhdWx0IENvbnRleHRzO1xyXG4iLCJcclxuLyoqXHJcbiAqIFdlIGV4cGVjdCB0aGUgZm9sbG93aW5nIGhlcmVcclxuICovXHJcbmNvbnN0IEVOViA9IHtcclxuICAgIFdpbmRvdzogbnVsbCxcclxuICAgIFRyYXA6IG51bGwsXHJcbiAgICBwYXJhbXM6IHtcclxuICAgICAgICBzY3JpcHRFbGVtZW50OiAnc2NyaXB0W3R5cGU9XCJ0ZXh0L3Njb3BlZC1qc1wiXScsXHJcbiAgICAgICAgYmluZE1ldGhvZE5hbWU6ICdiaW5kJyxcclxuICAgICAgICBpbmVydENvbnRleHRzOiBbXSxcclxuICAgICAgICBhdXRvSGlkZTogdHJ1ZSxcclxuICAgICAgICBiaW5kQ2FsbGJhY2s6IG51bGwsXHJcbiAgICB9LFxyXG4gICAgZ2xvYmFsczoge30sXHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IEVOVjsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgUmVmbGV4IGZyb20gJ0B3ZWItbmF0aXZlLWpzL3JlZmxleCc7XHJcbmltcG9ydCBfYXJyRnJvbSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mcm9tLmpzJztcclxuaW1wb3J0IF9hbnkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvYW55LmpzJztcclxuaW1wb3J0IF9pc0Z1bmN0aW9uIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBTY29wZWRKUyBmcm9tICcuL1Njb3BlZEpTLmpzJztcclxuaW1wb3J0IFNjb3BlIGZyb20gJy4vU2NvcGUuanMnO1xyXG5pbXBvcnQgRU5WIGZyb20gJy4vRU5WLmpzJztcclxuXHJcbi8qKlxyXG4gKiBAaW5pdFxyXG4gKi9cclxuU2NvcGVkSlMuaW5pdCA9IGZ1bmN0aW9uKFdpbmRvdywgVHJhcCA9IFJlZmxleCkge1xyXG4gICAgRU5WLldpbmRvdyA9IFdpbmRvdztcclxuICAgIEVOVi5UcmFwID0gVHJhcDtcclxuXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAvLyBDYXB0dXJlIHNjcmlwdHNcclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIGNvbnN0IHNjcmlwdEVsZW1lbnRzQ2FsbGJhY2sgPSBjYWxsYmFjayA9PiB7XHJcbiAgICAgICAgdmFyIG5vdGlmeSA9ICgpID0+IHF1ZXJ5KCkuZm9yRWFjaChjYWxsYmFjayk7XHJcbiAgICAgICAgdmFyIHF1ZXJ5ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gX2FyckZyb20oRU5WLldpbmRvdy5kb2N1bWVudC5zY3JpcHRzKVxyXG4gICAgICAgICAgICAuZmlsdGVyKHNjcmlwdCA9PiBzY3JpcHQubWF0Y2hlcyhFTlYucGFyYW1zLnNjcmlwdEVsZW1lbnQpICYmICFzY3JpcHRbJy5zY29wZWRKUy1zY29vcGVkJ10gJiYgIV9hbnkoRU5WLnBhcmFtcy5pbmVydENvbnRleHRzLCBpbm5lcnRDb250ZXh0ID0+IHNjcmlwdC5jbG9zZXN0KGlubmVydENvbnRleHQpKSlcclxuICAgICAgICAgICAgLm1hcChzY3JpcHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2NyaXB0Wycuc2NvcGVkSlMtc2Nvb3BlZCddID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzY3JpcHQ7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gRG9jdW1lbnQtcmVhZGluZXNzXHJcbiAgICAgICAgRU5WLldpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4gc2V0VGltZW91dChub3RpZnksIDApLCBmYWxzZSk7XHJcbiAgICAgICAgRU5WLldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4gc2V0VGltZW91dChub3RpZnksIDApLCBmYWxzZSk7XHJcbiAgICAgICAgaWYgKEVOVi5XaW5kb3cuZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xyXG4gICAgICAgICAgICBub3RpZnkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gT24gbmV3IHNjcmlwdHNcclxuICAgICAgICBpZiAoRU5WLldpbmRvdyAmJiBFTlYuV2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgdmFyIG9ic2VydmVyID0gbmV3IEVOVi5XaW5kb3cuTXV0YXRpb25PYnNlcnZlcigoKSA9PiBub3RpZnkoKSk7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUoRU5WLldpbmRvdy5kb2N1bWVudCwge2NoaWxkTGlzdDogdHJ1ZSwgc3VidHJlZTogdHJ1ZSx9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIC8vIFJ1blxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgc2NyaXB0RWxlbWVudHNDYWxsYmFjayhzY3JpcHRFbGVtZW50ID0+IHtcclxuICAgICAgICB2YXIgc2NyaXB0O1xyXG4gICAgICAgIGlmIChnZXRCYXNlKHNjcmlwdEVsZW1lbnQucGFyZW50Tm9kZSkuQVNUKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQW4gZWxlbWVudCBtdXN0IG9ubHkgaGF2ZSBvbmUgc2NvcGVkSlMgaW5zdGFuY2UhJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghKHNjcmlwdCA9IChzY3JpcHRFbGVtZW50LnRleHRDb250ZW50IHx8ICcnKS50cmltKCkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgIC8vIFBhcnNlXHJcbiAgICAgICAgIGdldEJhc2Uoc2NyaXB0RWxlbWVudC5wYXJlbnROb2RlKS5BU1QgPSBTY29wZWRKUy5wYXJzZShzY3JpcHQpO1xyXG4gICAgICAgICBhcHBseUJpbmRpbmcoc2NyaXB0RWxlbWVudC5wYXJlbnROb2RlKTtcclxuICAgICAgICAvLyBSZW1vdmVcclxuICAgICAgICBpZiAoRU5WLnBhcmFtcy5hdXRvSGlkZSkge1xyXG4gICAgICAgICAgICBzY3JpcHRFbGVtZW50LnJlbW92ZSgpO1xyXG4gICAgICAgIH0gXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAvLyBIZWxwZXJzXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICB2YXIgZ2V0QmFzZSA9IGZ1bmN0aW9uKHRhcmdldCkge1xyXG4gICAgICAgIGlmICghdGFyZ2V0Wycuc2NvcGVkSlMnXSkge1xyXG4gICAgICAgICAgICB2YXIgYmFzZSA9IHt9O1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCAnLnNjb3BlZEpTJywge1xyXG4gICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYmFzZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldFsnLnNjb3BlZEpTJ107XHJcbiAgICB9O1xyXG4gICAgdmFyIGFwcGx5QmluZGluZyA9IGZ1bmN0aW9uKHRhcmdldCkge1xyXG4gICAgICAgIGlmIChnZXRCYXNlKHRhcmdldCkuQVNUKSB7XHJcbiAgICAgICAgICAgIHZhciBiaW5kaW5nID0gZ2V0QmFzZSh0YXJnZXQpLmJpbmRpbmcgfHwge307XHJcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tXHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSBldmFsIHNjb3BlLi4uXHJcbiAgICAgICAgICAgIHZhciBfc3VwZXIgPSB7XHJcbiAgICAgICAgICAgICAgICBtYWluOiB7fSwgXHJcbiAgICAgICAgICAgICAgICBzdXBlcjogRU5WLmdsb2JhbHMsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmIChFTlYuVHJhcCkge1xyXG4gICAgICAgICAgICAgICAgRU5WLlRyYXAuc2V0KF9zdXBlci5tYWluLCAndGhpcycsIHRhcmdldCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfc3VwZXIubWFpblsndGhpcyddID0gdGFyZ2V0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBfbWFpbiA9IHtcclxuICAgICAgICAgICAgICAgIG1haW46IGJpbmRpbmcsIFxyXG4gICAgICAgICAgICAgICAgc3VwZXI6IG5ldyBTY29wZShfc3VwZXIpLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB2YXIgc2NvcGUgPSBuZXcgU2NvcGUoX21haW4pO1xyXG4gICAgICAgICAgICAvLyAtLS0tLS0tLVxyXG4gICAgICAgICAgICB2YXIgcmV0dXJuVmFsdWUgPSBnZXRCYXNlKHRhcmdldCkuQVNULmV2YWwoc2NvcGUsIEVOVi5UcmFwKTtcclxuICAgICAgICAgICAgaWYgKF9pc0Z1bmN0aW9uKHJldHVyblZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsdWUoYmluZGluZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIC8vIERlZmluZSB0aGUgYmluZCgpIG1ldGhvZFxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgIGlmICghRU5WLldpbmRvdyB8fCAhKCdFbGVtZW50JyBpbiBFTlYuV2luZG93KSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIFwiRWxlbWVudFwiIGNsYXNzIG5vdCBmb3VuZCBpbiBnbG9iYWwgY29udGV4dCEnKTtcclxuICAgIH1cclxuICAgIGlmIChFTlYucGFyYW1zLmJpbmRNZXRob2ROYW1lIGluIEVOVi5XaW5kb3cuRWxlbWVudC5wcm90b3R5cGUpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBcIkVsZW1lbnRcIiBjbGFzcyBhbHJlYWR5IGhhcyBhIFwiJyArIEVOVi5wYXJhbXMuYmluZE1ldGhvZE5hbWUgKyAnXCIgcHJvcGVydHkhJyk7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRU5WLldpbmRvdy5FbGVtZW50LnByb3RvdHlwZSwgRU5WLnBhcmFtcy5iaW5kTWV0aG9kTmFtZSwge1xyXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbihiaW5kaW5nKSB7XHJcbiAgICAgICAgICAgIHZhciBfYmluZGluZyA9IGdldEJhc2UodGhpcykuYmluZGluZztcclxuICAgICAgICAgICAgZ2V0QmFzZSh0aGlzKS5iaW5kaW5nID0gYmluZGluZztcclxuICAgICAgICAgICAgYXBwbHlCaW5kaW5nKHRoaXMpO1xyXG4gICAgICAgICAgICBpZiAoRU5WLnBhcmFtcy5iaW5kQ2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIEVOVi5wYXJhbXMuYmluZENhbGxiYWNrKHRoaXMsIGJpbmRpbmcsIF9iaW5kaW5nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQge1xyXG4gICAgU2NvcGVkSlMgYXMgZGVmYXVsdCxcclxuICAgIEVOVixcclxufSIsIlxyXG4vKipcclxuICogV2UgZXhwZWN0IHRoZSBmb2xsb3dpbmcgaGVyZVxyXG4gKi9cclxuY29uc3QgRU5WID0ge1xyXG4gICAgV2luZG93OiBudWxsLFxyXG4gICAgVHJhcDogbnVsbCxcclxuICAgIFNjb3BlZEhUTUw6IG51bGwsXHJcbiAgICBTY29wZWRKUzogbnVsbCxcclxuICAgIHBhcmFtczoge1xyXG4gICAgICAgIG5hbWVzcGFjZUF0dHJpYnV0ZTogJ25hbWVzcGFjZScsXHJcbiAgICAgICAgYnVuZGxlRWxlbWVudDogJ2h0bWwtYnVuZGxlJyxcclxuICAgICAgICBpbXBvcnRFbGVtZW50OiAnaHRtbC1pbXBvcnQnLFxyXG4gICAgICAgIGtleVZhbEF0dHJpYnV0ZXM6IFtdLFxyXG4gICAgICAgIGxpc3RBdHRyaWJ1dGVzOiBbXSxcclxuICAgICAgICBub3JlY29tcG9zZUF0dHJpYnV0ZXM6IFsnbm9jb21wb3NlJywgJ3NoYWRvdycsXSxcclxuICAgICAgICByZWNvbXBvc2VDYWxsYmFjazogbnVsbCxcclxuICAgIH0sXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgRU5WOyIsIlxyXG4vKipcclxuICogUmV0dXJuIHRoZSBwYXJ0IG9mIGEgc3RyaW5nIGJlZm9yZSBhIGdpdmVuIHZhbHVlLlxyXG4gKlxyXG4gKiBAcGFyYW0gIHN0cmluZyAgc3ViamVjdFxyXG4gKiBAcGFyYW0gIHN0cmluZyAgc2VhcmNoXHJcbiAqIEBwYXJhbSAgYm9vbFx0ICAgYmVmb3JlTGFzdFxyXG4gKlxyXG4gKiBAcmV0dXJuIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3ViamVjdCwgc2VhcmNoLCBiZWZvcmVMYXN0ID0gZmFsc2UpIHtcclxuXHRpZiAoc2VhcmNoID09ICcnKSB7XHJcblx0XHRyZXR1cm4gc3ViamVjdDtcclxuXHR9XHJcblx0dmFyIHBvcyA9IGJlZm9yZUxhc3QgPyBzdWJqZWN0Lmxhc3RJbmRleE9mKHNlYXJjaCkgOiBzdWJqZWN0LmluZGV4T2Yoc2VhcmNoKTtcclxuXHRpZiAocG9zID09PSAtMSkge1xyXG5cdFx0cmV0dXJuIHN1YmplY3Q7XHJcblx0fVxyXG5cdHJldHVybiBzdWJqZWN0LnN1YnN0cigwLCBwb3MpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCBfdW5pcXVlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3VuaXF1ZS5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzU3RyaW5nIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNTdHJpbmcuanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IEVOViBmcm9tICcuL0VOVi5qcyc7XHJcblxyXG4vKipcclxuICogQ29tcG9zZXMgZGVmaW5pdGlvbnMgZnJvbSBlbEZyb20gaW50byBlbFRvLlxyXG4gKlxyXG4gKiBAcGFyYW0gSFRNTEVsZW1lbnRcdFx0XHRcdGVsRnJvbVxyXG4gKiBAcGFyYW0gSFRNTEVsZW1lbnRcdFx0XHRcdGVsVG9cclxuICogQHBhcmFtIHN0cmluZ1x0XHRcdFx0XHRhcHBlbmRPclByZXBlbmRcclxuICogQHBhcmFtIGFycmF5XHRcdFx0XHRcdFx0bm9yZWNvbXBvc2VcclxuICpcclxuICogQHJldHVybiBIVE1MRWxlbWVudFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZWxGcm9tLCBlbFRvLCBhcHBlbmRPclByZXBlbmQsIG5vcmVjb21wb3NlID0gW10pIHtcclxuXHRub3JlY29tcG9zZSA9IG5vcmVjb21wb3NlLmNvbmNhdChbRU5WLnBhcmFtcy5uYW1lc3BhY2VBdHRyaWJ1dGUsIC4uLkVOVi5wYXJhbXMubm9yZWNvbXBvc2VBdHRyaWJ1dGVzXSk7XHJcblx0aWYgKGVsVG8uaGFzQXR0cmlidXRlKCdub3JlY29tcG9zZScpKSB7XHJcblx0XHRub3JlY29tcG9zZSA9IG5vcmVjb21wb3NlLmNvbmNhdCgoZWxUby5nZXRBdHRyaWJ1dGUoJ25vcmVjb21wb3NlJykgfHwgJyonKS5zcGxpdCgnICcpLm1hcCh2YWwgPT4gdmFsLnRyaW0oKSkpO1xyXG5cdH1cclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0Ly8gQ3VzdG9tIENvbXBvc2l0aW9uLi4uXHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdGlmIChfaXNGdW5jdGlvbihFTlYucGFyYW1zLnJlY29tcG9zZUNhbGxiYWNrKSkge1xyXG5cdFx0dmFyIGRpc3Bvc2l0aW9uID0gRU5WLnBhcmFtcy5yZWNvbXBvc2VDYWxsYmFjayhlbEZyb20sIGVsVG8sIGFwcGVuZE9yUHJlcGVuZCwgbm9yZWNvbXBvc2UpO1xyXG5cdFx0aWYgKGRpc3Bvc2l0aW9uID09PSBmYWxzZSkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9IGVsc2UgaWYgKF9pc1N0cmluZyhkaXNwb3NpdGlvbikgfHwgX2lzQXJyYXkoZGlzcG9zaXRpb24pKSB7XHJcblx0XHRcdG5vcmVjb21wb3NlID0gbm9yZWNvbXBvc2UuY29uY2F0KGRpc3Bvc2l0aW9uKTtcclxuXHRcdH1cclxuXHR9XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdC8vIE1lcmdlIGxpc3QgYXR0cmlidXRlcy4uLlxyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHR2YXIgbGlzdEF0dHJpYnV0ZXMgPSBFTlYucGFyYW1zLmxpc3RBdHRyaWJ1dGVzLmNvbmNhdChbJ3JvbGUnLCAnY2xhc3MnXSk7XHJcblx0aWYgKEVOVi5zY29wZWRIVE1MKSB7XHJcblx0XHRsaXN0QXR0cmlidXRlcyA9IGxpc3RBdHRyaWJ1dGVzLmNvbmNhdChbRU5WLlNjb3BlZEhUTUwucGFyYW1zLmlkSGludHNBdHRyaWJ1dGVdKTtcclxuXHR9XHJcblx0X3VuaXF1ZShsaXN0QXR0cmlidXRlcykuZm9yRWFjaCh0eXBlID0+IHtcclxuXHRcdHZhciBiX2F0dHIsIGFfYXR0cjtcclxuXHRcdGlmICghbm9yZWNvbXBvc2UuaW5jbHVkZXModHlwZSkgJiYgIW5vcmVjb21wb3NlLmluY2x1ZGVzKCcqJykgJiYgKGJfYXR0ciA9IGVsRnJvbS5nZXRBdHRyaWJ1dGUodHlwZSkpKSB7XHJcblx0XHRcdGlmIChhX2F0dHIgPSBlbFRvLmdldEF0dHJpYnV0ZSh0eXBlKSkge1xyXG5cdFx0XHRcdHZhciBqb2ludExpc3QgPSBhcHBlbmRPclByZXBlbmQgPT09ICdwcmVwZW5kJyA/IFtiX2F0dHIsIGFfYXR0cl0gOiBbYV9hdHRyLCBiX2F0dHJdO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHZhciBqb2ludExpc3QgPSBbYl9hdHRyXTtcclxuXHRcdFx0fVxyXG5cdFx0XHRlbFRvLnNldEF0dHJpYnV0ZSh0eXBlLCBfdW5pcXVlKGpvaW50TGlzdC5qb2luKCcgJykuc3BsaXQoJyAnKS5tYXAociA9PiByLnRyaW0oKSkpLmpvaW4oJyAnKSk7XHJcblx0XHRcdG5vcmVjb21wb3NlLnB1c2godHlwZSk7XHJcblx0XHR9XHJcblx0fSk7XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdC8vIE1lcmdlIGtleS92YWwgYXR0cmlidXRlcy4uLlxyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRfdW5pcXVlKEVOVi5wYXJhbXMua2V5VmFsQXR0cmlidXRlcy5jb25jYXQoJ3N0eWxlJykpLmZvckVhY2godHlwZSA9PiB7XHJcblx0XHR2YXIgYl9hdHRyLCBhX2F0dHI7XHJcblx0XHRpZiAoIW5vcmVjb21wb3NlLmluY2x1ZGVzKHR5cGUpICYmICFub3JlY29tcG9zZS5pbmNsdWRlcygnKicpICYmIChiX2F0dHIgPSBlbEZyb20uZ2V0QXR0cmlidXRlKHR5cGUpKSkge1xyXG5cdFx0XHRpZiAoYV9hdHRyID0gZWxUby5nZXRBdHRyaWJ1dGUodHlwZSkpIHtcclxuXHRcdFx0XHR2YXIgam9pbnREZWZzID0gYXBwZW5kT3JQcmVwZW5kID09PSAncHJlcGVuZCcgPyBbYl9hdHRyLCBhX2F0dHJdIDogW2FfYXR0ciwgYl9hdHRyXTtcclxuXHRcdFx0XHRpZiAoIWpvaW50RGVmc1swXS50cmltKCkuZW5kc1dpdGgoJzsnKSkge1xyXG5cdFx0XHRcdFx0am9pbnREZWZzWzBdID0gam9pbnREZWZzWzBdICsgJzsnO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR2YXIgam9pbnREZWZzID0gW2JfYXR0cl07XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxUby5zZXRBdHRyaWJ1dGUodHlwZSwgam9pbnREZWZzLmpvaW4oJyAnKSk7XHJcblx0XHRcdG5vcmVjb21wb3NlLnB1c2godHlwZSk7XHJcblx0XHR9XHJcblx0fSk7XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdC8vIFBvcnQgYWxsIG90aGVyIGF0dHJpYnV0ZXMuLi5cclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbEZyb20uYXR0cmlidXRlcy5sZW5ndGg7IGkgKyspIHtcclxuXHRcdHZhciBhdHRyID0gZWxGcm9tLmF0dHJpYnV0ZXNbaV07XHJcblx0XHRpZiAoIW5vcmVjb21wb3NlLmluY2x1ZGVzKGF0dHIubmFtZSkgJiYgIW5vcmVjb21wb3NlLmluY2x1ZGVzKCcqJykgXHJcblx0XHQmJiAoIWVsVG8uaGFzQXR0cmlidXRlKGF0dHIubmFtZSkgfHwgW0VOVi5TY29wZWRIVE1MLnBhcmFtcy5yb290QXR0cmlidXRlLCBFTlYuU2NvcGVkSFRNTC5wYXJhbXMuc2NvcGVkSWRBdHRyaWJ1dGUsXS5pbmNsdWRlcyhhdHRyLm5hbWUpKSkge1xyXG5cdFx0XHRlbFRvLnNldEF0dHJpYnV0ZShhdHRyLm5hbWUsIGF0dHIudmFsdWUpO1xyXG5cdFx0XHRub3JlY29tcG9zZS5wdXNoKGF0dHIubmFtZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHQvLyBGb3IgZGF0YSBibG9ja3MuLi5cclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0aWYgKCFub3JlY29tcG9zZS5pbmNsdWRlcygnLS1zY29wZWQtanMnKSAmJiAhbm9yZWNvbXBvc2UuaW5jbHVkZXMoJyonKSAmJiBFTlYuU2NvcGVkSlMpIHtcclxuXHRcdHZhciBlbFRvRGVmcyA9IF9hcnJGcm9tKChlbFRvLnNoYWRvd1Jvb3QgfHwgZWxUbykuY2hpbGRyZW4pXHJcblx0XHRcdC5maWx0ZXIobm9kZSA9PiBub2RlLm1hdGNoZXMoRU5WLlNjb3BlZEpTLnBhcmFtcy5zY3JpcHRFbGVtZW50KSk7XHJcblx0XHR2YXIgZWxGcm9tRGVmcyA9IF9hcnJGcm9tKChlbEZyb20uc2hhZG93Um9vdCB8fCBlbEZyb20pLmNoaWxkcmVuKVxyXG5cdFx0XHQuZmlsdGVyKG5vZGUgPT4gbm9kZS5tYXRjaGVzKEVOVi5TY29wZWRKUy5wYXJhbXMuc2NyaXB0RWxlbWVudCkpO1xyXG5cdFx0aWYgKGVsRnJvbURlZnMubGVuZ3RoKSB7XHJcblx0XHRcdGlmIChlbFRvRGVmcy5sZW5ndGgpIHtcclxuXHRcdFx0XHRlbFRvRGVmc1swXVthcHBlbmRPclByZXBlbmRdKGVsRnJvbURlZnNbMF0udGV4dENvbnRlbnQpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGVsVG8ucHJlcGVuZChlbEZyb21EZWZzWzBdLmNsb25lTm9kZSh0cnVlKSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIGVsVG87XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCByZWNvbXBvc2VOb2RlcyBmcm9tICcuL3JlY29tcG9zZU5vZGVzLmpzJztcclxuaW1wb3J0IHJlY29tcG9zZURpcmVjdGl2ZXMgZnJvbSAnLi9yZWNvbXBvc2VEaXJlY3RpdmVzLmpzJztcclxuaW1wb3J0IEVOViBmcm9tICcuL0VOVi5qcyc7XHJcblxyXG4vKipcclxuICogQ29tcG9zZXMgYSBjb21wb25lbnQgZnJvbSBhIHN1cGVyIGNvbXBvbmVudC5cclxuICpcclxuICogQWxsIGRlZmluaXRpb25zIHdpbGwgYmUgaW5oZXJpdGVkLlxyXG4gKiBJZiB0aGUgaWRlYSBpcyB0byBpbXBvcnQsIHRoZSBzdXBlciBjb21wb25lbnQncyBlbGVtZW50IHdpbGwgYmUgcmV0dXJuZWQsXHJcbiAqIChPbiBpbXBvcnQsIG5vZGVzIGluIGNvbXBvbmVudCAoYXMgZGVmaW5lZCwgaWYpIHdpbGwgYmUgdXBsb2FkZWQgaW50byBzbG90cyBpbiB0aGUgc3VwZXIgY29tcG9uZW50LilcclxuICpcclxuICogQHBhcmFtIEhUTUxFbGVtZW50XHRcdFx0XHRlbFRvXHJcbiAqIEBwYXJhbSBIVE1MRWxlbWVudFx0XHRcdFx0ZWxGcm9tXHJcbiAqXHJcbiAqIEByZXR1cm4gSFRNTEVsZW1lbnRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVsRnJvbSwgZWxUbykge1xyXG5cdGlmIChlbFRvLm1hdGNoZXMoRU5WLnBhcmFtcy5pbXBvcnRFbGVtZW50KSkge1xyXG5cdFx0cmV0dXJuIHJlY29tcG9zZU5vZGVzKGVsVG8vKmZyb20gaW1wb3J0IGFjdHVhbGx5Ki8sIGVsRnJvbS8qdG8gZWxlbWVudCBhY3R1YWxseSovKTtcclxuXHR9XHJcblx0Ly8gV2Ugd2lsbCBhcHBlbmQgZGVmcyBmcm9tIHRoZSBlbEZyb20gaW50byBlbFRvXHJcblx0cmV0dXJuIHJlY29tcG9zZURpcmVjdGl2ZXMoZWxGcm9tLCBlbFRvLCAncHJlcGVuZCcpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCByZWNvbXBvc2VEaXJlY3RpdmVzIGZyb20gJy4vcmVjb21wb3NlRGlyZWN0aXZlcy5qcyc7XHJcbmltcG9ydCBFTlYgZnJvbSAnLi9FTlYuanMnO1xyXG5cdFxyXG4vKipcclxuICogQ29tcG9zZXMgYSBjb21wb25lbnQgZnJvbSBhIHN1cGVyIGNvbXBvbmVudC5cclxuICpcclxuICogQWxsIGRlZmluaXRpb25zIHdpbGwgYmUgaW5oZXJpdGVkLlxyXG4gKiBJZiB0aGUgaWRlYSBpcyB0byBpbXBvcnQsIHRoZSBzdXBlciBjb21wb25lbnQncyBlbGVtZW50IHdpbGwgYmUgcmV0dXJuZWQsXHJcbiAqIChPbiBpbXBvcnQsIG5vZGVzIGluIGNvbXBvbmVudCAoYXMgZGVmaW5lZCwgaWYpIHdpbGwgYmUgdXBsb2FkZWQgaW50byBzbG90cyBpbiB0aGUgc3VwZXIgY29tcG9uZW50LilcclxuICpcclxuICogQHBhcmFtIEhUTUxFbGVtZW50XHRcdFx0XHRlbEZyb21cclxuICogQHBhcmFtIEhUTUxFbGVtZW50XHRcdFx0XHRlbFRvXHJcbiAqXHJcbiAqIEByZXR1cm4gSFRNTEVsZW1lbnRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVsRnJvbSwgZWxUbykge1xyXG5cdGVsVG8gPSBlbFRvLmNsb25lTm9kZSh0cnVlKTtcclxuXHR2YXIgZWxGcm9tTnMgPSBlbEZyb20uZ2V0QXR0cmlidXRlKEVOVi5wYXJhbXMubmFtZXNwYWNlQXR0cmlidXRlKTtcclxuXHR2YXIgZWxUb2lzUm9vdCA9IEVOVi5TY29wZWRIVE1MICYmIGVsVG8uaGFzQXR0cmlidXRlKEVOVi5TY29wZWRIVE1MLnBhcmFtcy5yb290QXR0cmlidXRlKTtcclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0Ly8gU28gd2UgY29uY2F0KCkgdGhlIHJvbGUgYXR0cmlidXRlXHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdGVsVG8uc2V0QXR0cmlidXRlKEVOVi5wYXJhbXMubmFtZXNwYWNlQXR0cmlidXRlLCBlbEZyb21Ocyk7XHJcblx0Ly8gV2Ugd2lsbCBwcmVwZW5kIGRlZnMgZnJvbSB0aGUgZWxGcm9tIGludG8gZWxUb1xyXG5cdHJlY29tcG9zZURpcmVjdGl2ZXMoZWxGcm9tLCBlbFRvLCAnYXBwZW5kJyk7XHJcblx0aWYgKCFFTlYuU2NvcGVkSFRNTCkge1xyXG5cdFx0cmV0dXJuIGVsVG87XHJcblx0fVxyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHQvLyBVcGxvYWQgbm9kZXMgaW50byBlbFRvIGp1c3QgdGhlIHdheSBzbG90cyB3b3JrIGluIFdlYiBDb21wb29uZW50c1xyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRfYXJyRnJvbSgoZWxGcm9tLnNoYWRvd1Jvb3QgfHwgZWxGcm9tKS5jaGlsZHJlbikuZm9yRWFjaCgocmVwbGFjZW1lbnROb2RlLCBpKSA9PiB7XHJcblx0XHRpZiAoRU5WLlNjb3BlZEpTICYmIHJlcGxhY2VtZW50Tm9kZS5tYXRjaGVzKEVOVi5TY29wZWRKUy5wYXJhbXMuc2NyaXB0RWxlbWVudCkpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0cmVwbGFjZW1lbnROb2RlID0gcmVwbGFjZW1lbnROb2RlLmNsb25lTm9kZSh0cnVlKTtcclxuXHRcdHZhciBzY29wZWRJRCwgQ1NTRXNjYXBlID0gRU5WLldpbmRvdy5DU1MgPyBFTlYuV2luZG93LkNTUy5lc2NhcGUgOiBzdHIgPT4gc3RyO1xyXG5cdFx0aWYgKGVsVG9pc1Jvb3QgJiYgKHNjb3BlZElEID0gcmVwbGFjZW1lbnROb2RlLmdldEF0dHJpYnV0ZShFTlYuU2NvcGVkSFRNTC5wYXJhbXMuc2NvcGVkSWRBdHRyaWJ1dGUpKSkge1xyXG5cdFx0XHR2YXIgc2xvdE5vZGUsXHJcblx0XHRcdFx0cm9vdFNlbGVjdG9yID0gJ1snICsgQ1NTRXNjYXBlKEVOVi5TY29wZWRIVE1MLnBhcmFtcy5yb290QXR0cmlidXRlKSArICddJyxcclxuXHRcdFx0XHRzbG90Tm9kZVNlbGVjdG9yID0gJ1snICsgQ1NTRXNjYXBlKEVOVi5TY29wZWRIVE1MLnBhcmFtcy5zY29wZWRJZEF0dHJpYnV0ZSkgKyAnPVwiJyArIHNjb3BlZElEICsgJ1wiXSc7XHJcblx0XHRcdGlmICgoZWxUby5zaGFkb3dSb290ICYmIChzbG90Tm9kZSA9IGVsVG8uc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKHNsb3ROb2RlU2VsZWN0b3IpKSlcclxuXHRcdFx0fHwgKChzbG90Tm9kZSA9IGVsVG8ucXVlcnlTZWxlY3RvcihzbG90Tm9kZVNlbGVjdG9yKSkgJiYgc2xvdE5vZGUucGFyZW50Tm9kZS5jbG9zZXN0KHJvb3RTZWxlY3RvcikgPT09IGVsVG8pKSB7XHJcblx0XHRcdFx0Ly8gV2Ugd2lsbCBwcmVwZW5kIGRlZnMgZnJvbSB0aGUgc2xvdCBub2RlIGludG8gcmVwbGFjZW1lbnQgbm9kZVxyXG5cdFx0XHRcdHJlY29tcG9zZURpcmVjdGl2ZXMoc2xvdE5vZGUsIHJlcGxhY2VtZW50Tm9kZSwgJ3ByZXBlbmQnKTtcclxuXHRcdFx0XHQvLyBQb3J0IHRvIHRhcmdldC4uLlxyXG5cdFx0XHRcdHNsb3ROb2RlLnJlcGxhY2VXaXRoKHJlcGxhY2VtZW50Tm9kZSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly90aHJvdyBuZXcgRXJyb3IoJ0NvbXBvc2l0aW9uIEVycm9yOiBOb2RlICMnICsgaSArICcgKGF0ICcgKyBlbEZyb21OcyArICcpIG11c3QgbWF0Y2ggZXhhY3RseSBvbmUgdGFyZ2V0Tm9kZSBpbiAnICsgZWxUb05zICsgJyEgKCcgKyBzbG90Tm9kZXMubGVuZ3RoICsgJyBtYXRjaGVkKScpO1xyXG5cdFx0XHRcdGVsVG8uYXBwZW5kKHJlcGxhY2VtZW50Tm9kZSk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGVsVG8uYXBwZW5kKHJlcGxhY2VtZW50Tm9kZSk7XHJcblx0XHR9XHJcblx0fSk7XHJcblx0cmV0dXJuIGVsVG87XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfYXJyRnJvbSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mcm9tLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIE1hdHJpeCBsb2FkZXJcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXRyaXgge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgYSBuZXcgTWF0cml4IGluc3RhbmNlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGFycmF5IFx0XHRcdHNvdXJjZXNcclxuXHQgKiBAcGFyYW0gc3RyaW5nfGFycmF5IFx0XHRuYW1lc3BhY2VcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb24gXHRcdFx0Z2V0dGVyXHJcblx0ICogQHBhcmFtIE1hdHJpeEludGVyZmFjZVx0Y2FycnlcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdGhpc1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKHNvdXJjZXMsIG5hbWVzcGFjZSwgZ2V0dGVyLCBjYXJyeSA9IG51bGwpIHtcclxuXHRcdHRoaXMubmFtZXNwYWNlID0gX2FyckZyb20obmFtZXNwYWNlKTtcclxuXHRcdHRoaXMuZ2V0dGVyID0gZ2V0dGVyO1xyXG5cdFx0dGhpcy5jYXJyeSA9IGNhcnJ5O1xyXG5cdFx0dGhpcy5jb2xsZWN0aW9ucyA9IHt9O1xyXG5cdFx0dGhpcy52YWx1ZTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHR0aGlzLnNvdXJjZXMgPSBbXTtcclxuXHRcdHRoaXMubG9hZGluZ1NvdXJjZXMgPSBuZXcgUHJvbWlzZSgocmVzLCByZWopID0+IHtcclxuXHRcdFx0dmFyIGxvYWRpbmdTb3VyY2VzID0gW107XHJcblx0XHRcdF9hcnJGcm9tKHNvdXJjZXMpLmZvckVhY2goc291cmNlID0+IHtcclxuXHRcdFx0XHRpZiAoc291cmNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xyXG5cdFx0XHRcdFx0bG9hZGluZ1NvdXJjZXMucHVzaChzb3VyY2UpO1xyXG5cdFx0XHRcdFx0c291cmNlLnRoZW4obG9hZGVkID0+IHtcclxuXHRcdFx0XHRcdFx0bG9hZGluZ1NvdXJjZXMgPSBsb2FkaW5nU291cmNlcy5maWx0ZXIoX3NvdXJjZSA9PiBfc291cmNlICE9PSBzb3VyY2UpO1xyXG5cdFx0XHRcdFx0XHR0aGlzLnNvdXJjZXMucHVzaChsb2FkZWQpO1xyXG5cdFx0XHRcdFx0XHRpZiAoIWxvYWRpbmdTb3VyY2VzLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0XHRcdHJlcygpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9ICBlbHNlIHtcclxuXHRcdFx0XHRcdHRoaXMuc291cmNlcy5wdXNoKHNvdXJjZSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0aWYgKCFsb2FkaW5nU291cmNlcy5sZW5ndGgpIHtcclxuXHRcdFx0XHRyZXMoKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHRcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEVudGVycyBpbnRvIGEgc3ViIGNvbGxlY3Rpb24gaWYgZXhpc3RzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZyBcdFx0XHRuYW1lXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIE1hdHJpeEludGVyZmFjZVxyXG5cdCAqL1xyXG5cdGVudGVyKG5hbWUpIHtcclxuXHRcdGlmICghKG5hbWUgaW4gdGhpcy5jb2xsZWN0aW9ucykpIHtcclxuXHRcdFx0dGhpcy5jb2xsZWN0aW9uc1tuYW1lXSA9IG5ldyBNYXRyaXgoXHJcblx0XHRcdFx0dGhpcy5zb3VyY2VzLCBcclxuXHRcdFx0XHR0aGlzLm5hbWVzcGFjZS5jb25jYXQobmFtZSksXHJcblx0XHRcdFx0dGhpcy5nZXR0ZXIsXHJcblx0XHRcdFx0dGhpcyBcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLmNvbGxlY3Rpb25zW25hbWVdO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogTGVhdmVzIHRoZSBjdXJyZW50IGN1cnJlbnQgY29sbGVjdGlvbiBpbnRvIHRoZSBzdXBlciBjb2xsZWN0aW9uIGlmIGV4aXN0cy5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gTWF0cml4SW50ZXJmYWNlXHJcblx0ICovXHJcblx0bGVhdmUoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5jYXJyeTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIExhenktbG9hZHMgYSBwcm9wZXJ0eSBmcm9tIHNvdXJjZXMuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG1peGVkXHJcblx0ICovXHJcblx0Z2V0KCkge1xyXG5cdFx0aWYgKCF0aGlzLnZhbHVlKSB7XHJcblx0XHRcdHZhciBuYW1lc3BhY2UgPSB0aGlzLm5hbWVzcGFjZS5zbGljZSgpO1xyXG5cdFx0XHR2YXIgdmFsdWUgPSB0aGlzLmNhcnJ5ID8gdGhpcy5jYXJyeS5nZXQoKSA6IG51bGw7XHJcblx0XHRcdHRoaXMuc291cmNlcy5mb3JFYWNoKChzb3VyY2UsIGkpID0+IHtcclxuXHRcdFx0XHRpZiAodmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKG51bGwsIHNvdXJjZSwgbmFtZXNwYWNlLCB2YWx1ZSwgaSkpIHtcclxuXHRcdFx0XHRcdHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMudmFsdWU7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEZpbmRzIHRoZSBtb3N0LXNwZWNpZmljIG1vZHVsZSBmb3IgdGhlIGdpdmVuIG5hbWVzcGFjZSBmcm9tIHNvdXJjZXMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RpbmdcdFx0XHRcdFx0bmFtZXNwYWNlXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG9iamVjdFxyXG5cdCAqL1xyXG5cdGZpbmQobmFtZXNwYWNlKSB7XHJcblx0XHR2YXIgbnNBcnJheSA9IG5hbWVzcGFjZS5zcGxpdCgnLycpO1xyXG5cdFx0dmFyIHN1Yk1hdHJpeCwgbnNLZXksIG5zRHJpbGwgPSB0aGlzO1xyXG5cdFx0d2hpbGUoKG5zS2V5ID0gbnNBcnJheS5zaGlmdCgpKSAmJiAobnNEcmlsbCA9IG5zRHJpbGwuZW50ZXIobnNLZXkpKSkge1xyXG5cdFx0XHRzdWJNYXRyaXggPSBuc0RyaWxsOyBcclxuXHRcdH1cclxuXHRcdC8vIENsb25lIG5vdy4uLlxyXG5cdFx0dmFyIGVsID0gc3ViTWF0cml4LmdldCgpO1xyXG5cdFx0aWYgKGVsKSB7XHJcblx0XHRcdHJldHVybiBlbC5jbG9uZU5vZGUodHJ1ZSk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCByZWNvbXBvc2UgZnJvbSAnLi9yZWNvbXBvc2UuanMnO1xyXG5pbXBvcnQgTWF0cml4IGZyb20gJy4vTWF0cml4LmpzJztcclxuaW1wb3J0IEVOViBmcm9tICcuL0VOVi5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBjbGllbnQtYnVpbGQgZW50cnlcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihidW5kbGVFbGVtZW50cykge1xyXG5cdC8vIENvbnZlcnQgcmF3IHRlbXBsYXRlc1xyXG5cdGJ1bmRsZUVsZW1lbnRzID0gYnVuZGxlRWxlbWVudHMubWFwKGIgPT4ge1xyXG5cdFx0aWYgKCEoYiBpbnN0YW5jZW9mIFByb21pc2UpICYmICEoYiBpbnN0YW5jZW9mIEVOVi5XaW5kb3cuSFRNTFRlbXBsYXRlRWxlbWVudCkpIHtcclxuXHRcdFx0dmFyIHRlbXBsYXRlID0gRU5WLldpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xyXG5cdFx0XHR0ZW1wbGF0ZS5pbm5lckhUTUwgPSBiLnRvU3RyaW5nKCk7XHJcblx0XHRcdGIgPSB0ZW1wbGF0ZTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBiO1xyXG5cdH0pO1xyXG5cdC8vIEluc3RhbnRpYXRlIE1hdHJpeFxyXG5cdGNvbnN0IGFudGljeWNsaWNCdW5kbGVzUXVlcnkgPSBbXTtcclxuXHRjb25zdCBidW5kbGVNYXRyaXggPSBuZXcgTWF0cml4KGJ1bmRsZUVsZW1lbnRzLypzb3VyY2VzKi8sIFtdLypuYW1lc3BhY2UqLywgKGJ1bmRsZSwgbmFtZXNwYWNlLCBzdXBlckVsLCBidW5kbGVJbmRleCkgPT4ge1xyXG5cdFx0dmFyIF9uYW1lc3BhY2UgPSBuYW1lc3BhY2Uuam9pbignLycpO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBJcyB0aGUgY3VycmVudCBpbXBvcnQgcHJvY2VzcyB0cnlpbmcgdG8gYmUgY3ljbGljP1xyXG5cdFx0Ly8gV2UgbW92ZSBvbmUtbGV2ZWwgdXAgdGhlIG5hbWVzcGFjZSBoaWVyYXJjaHkuXHJcblx0XHRpZiAoYW50aWN5Y2xpY0J1bmRsZXNRdWVyeS5pbmNsdWRlcyhfbmFtZXNwYWNlKSkge1xyXG5cdFx0XHRyZXR1cm4gYnVuZGxlTWF0cml4LmZpbmQobmFtZXNwYWNlLnNsaWNlKDAsIC0xKS5qb2luKCcvJykpO1xyXG5cdFx0fVxyXG5cdFx0YW50aWN5Y2xpY0J1bmRsZXNRdWVyeS5wdXNoKF9uYW1lc3BhY2UpO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBXZSBxdWVyeSBub3cuLi5cclxuXHRcdHZhciBDU1NFc2NhcGUgPSBFTlYuV2luZG93LkNTUyBcclxuXHRcdFx0PyBFTlYuV2luZG93LkNTUy5lc2NhcGUgXHJcblx0XHRcdDogc3RyID0+IHN0cjtcclxuXHRcdHZhciBlbCA9IF9hcnJGcm9tKGJ1bmRsZS5jb250ZW50LmNoaWxkcmVuKS5maWx0ZXIobm9kZSA9PiBub2RlLm1hdGNoZXMoJ1snICsgQ1NTRXNjYXBlKEVOVi5wYXJhbXMubmFtZXNwYWNlQXR0cmlidXRlKSArICc9XCInICsgX25hbWVzcGFjZSArICdcIl0nKSlbMF07XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdGlmIChlbCAmJiBzdXBlckVsKSB7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0dmFyIG5vcmVjb21wb3NlID0gW107XHJcblx0XHRcdFx0aWYgKGJ1bmRsZS5oYXNBdHRyaWJ1dGUoJ25vcmVjb21wb3NlJykpIHtcclxuXHRcdFx0XHRcdG5vcmVjb21wb3NlID0gKGJ1bmRsZS5nZXRBdHRyaWJ1dGUoJ25vcmVjb21wb3NlJykgfHwgJyonKS5zcGxpdCgnICcpLm1hcCh2YWwgPT4gdmFsLnRyaW0oKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGVsID0gcmVjb21wb3NlKHN1cGVyRWwsIGVsLCAncHJlcGVuZCcsIG5vcmVjb21wb3NlKTtcclxuXHRcdFx0fSBjYXRjaChlKSB7XHJcblx0XHRcdFx0Y29uc29sZS5lcnJvcignW0luaGVyaXRhbmNlIGVycm9yIGF0IHNvdXJjZSAjJyArIGJ1bmRsZUluZGV4ICsgJ106ICcgKyBlLm1lc3NhZ2UpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGFudGljeWNsaWNCdW5kbGVzUXVlcnkucG9wKCk7XHJcblx0XHRcdHJldHVybiBlbDtcclxuXHRcdH1cclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gVXBkYXRlIGN5Y2xpY2lzbS4uLiBsb2xcclxuXHRcdGFudGljeWNsaWNCdW5kbGVzUXVlcnkucG9wKCk7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdC8vIElmIHRoZXJlIHdhcyBubyBtb2R1bGUgd2l0aCB0aGUgcmVxdWVzdGVkIG5hbWVzcGFjZVxyXG5cdFx0Ly8gd2UgcmV0dXJuIHRoZSBzdXBlciBtb2R1bGVcclxuXHRcdHJldHVybiBlbCA/IGVsLmNsb25lTm9kZSh0cnVlKSA6IChcclxuXHRcdFx0c3VwZXJFbCA/IHN1cGVyRWwuY2xvbmVOb2RlKHRydWUpIDogbnVsbFxyXG5cdFx0KTtcclxuXHR9LypnZXR0ZXIqLyk7XHJcblx0XHJcblx0cmV0dXJuIGJ1bmRsZU1hdHJpeDtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICcuLi9qcy9pc1VuZGVmaW5lZC5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICcuLi9qcy9pc0Z1bmN0aW9uLmpzJztcclxuXHJcbi8qKlxyXG4gKiAxLiBSZXR1cm5zIHRoZSBFTlRSWSBmb2xsb3dpbmcgKGVpdGhlciB0aGUgRklSU1Qgb3IgdGhlIExBU1QgaW5zdGFuY2Ugb2YpIHRoZSByZWZlcmVuY2UuXHJcbiAqIDIuIFJldHVybnMgQSBOVU1CRVIgT0YgRU5UUklFUyBjb3VudGluZyBmb3J3YXJkcyBmcm9tIChlaXRoZXIgdGhlIEZJUlNUIG9yIHRoZSBMQVNUIGluc3RhbmNlIG9mKSB0aGUgZ2l2ZW4gcmVmZXJlbmNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXkgXHRcdGFyclxyXG4gKiBAcGFyYW0gbWl4ZWRcdCBcdFx0cmVmZXJlbmNlXHJcbiAqIEBwYXJhbSBpbnR8Ym9vbCBcdFx0bGVuZ3RoXHJcbiAqIEBwYXJhbSBib29sfGZ1bmN0aW9uXHQgbG9vcFxyXG4gKiBAcGFyYW0gYm9vbFx0IFx0XHRsYXN0UmVmZXJlbmNlXHJcbiAqXHJcbiAqIEByZXR1cm4gbWl4ZWR8YXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFyciwgcmVmZXJlbmNlLCBsZW5ndGggPSBmYWxzZSwgbG9vcCA9IGZhbHNlLCBsYXN0UmVmZXJlbmNlID0gZmFsc2UpIHtcclxuXHRpZiAoYXJyLmluZGV4T2YocmVmZXJlbmNlKSA9PT0gLTEpIHtcclxuXHRcdHJldHVybiBsZW5ndGggPyBbXSA6IHVuZGVmaW5lZDtcclxuXHR9XHJcblx0dmFyIGFtb3VudCA9IGxlbmd0aCA9PT0gdHJ1ZSA/IGFyci5sZW5ndGggLSAxIDogKGxlbmd0aCA9PT0gZmFsc2UgPyAxIDogbGVuZ3RoKTtcclxuXHR2YXIgZnJvbSA9IGxhc3RSZWZlcmVuY2UgPyBhcnIubGFzdEluZGV4T2YocmVmZXJlbmNlKSArIDEgOiBhcnIuaW5kZXhPZihyZWZlcmVuY2UpICsgMTtcclxuXHR2YXIgYWZ0ZXIgPSAhX2lzVW5kZWZpbmVkKHJlZmVyZW5jZSkgPyBhcnIuc2xpY2UoZnJvbSwgZnJvbSArIGFtb3VudCkgOiBbXTtcclxuXHRpZiAobG9vcCAmJiBhZnRlci5sZW5ndGggPCBhbW91bnQgJiYgYWZ0ZXIubGVuZ3RoIDwgYXJyLmxlbmd0aCkge1xyXG5cdFx0aWYgKCFfaXNGdW5jdGlvbihsb29wKSB8fCBsb29wKGFtb3VudCAtIGFmdGVyLmxlbmd0aCkpIHtcclxuXHRcdFx0YWZ0ZXIgPSBhZnRlci5jb25jYXQoYXJyLnNsaWNlKDAsIGFtb3VudCAtIGFmdGVyLmxlbmd0aCkpO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0cmV0dXJuIGxlbmd0aCA/IGFmdGVyIDogYWZ0ZXJbMF07XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBKc2VuIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2pzZW4nO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVtZXJpYy5qcyc7XHJcbmltcG9ydCBfdW5pcXVlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3VuaXF1ZS5qcyc7XHJcbmltcG9ydCBfZm9sbG93aW5nIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ZvbGxvd2luZy5qcyc7XHJcbmltcG9ydCBwYXJzZU5hbWVzcGFjZSBmcm9tICcuL3BhcnNlTmFtZXNwYWNlLmpzJztcclxuaW1wb3J0IEVOViBmcm9tICcuL0VOVi5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBIVE1MVHJhbnNwb3J0IGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSFRNTFRyYW5zcG9ydCB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIGNhcHR1cmUoZWwsIGJpbmRpbmcsIF9iaW5kaW5nKSB7XHJcblx0XHRjb25zdCBuYW1lc3BhY2VQYXJzZSA9IHBhcnNlTmFtZXNwYWNlKGVsLmdldEF0dHJpYnV0ZShFTlYucGFyYW1zLm5hbWVzcGFjZUF0dHJpYnV0ZSkgfHwgJycpO1xyXG5cdFx0Y29uc3Qgc3luY0xpc3RDYWxsYmFjayA9IEVOVi5zeW5jTGlzdENhbGxiYWNrIHx8IGZ1bmN0aW9uKG5vZGVOYW1lLCBub2RlLCBzeW5jSXRlbSwgaXNFeGlzdGluZ05vZGUgPSBmYWxzZSkge1xyXG5cdFx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcclxuXHRcdFx0XHRyZXR1cm4gbm9kZS5iaW5kKHN5bmNJdGVtKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXR1cm4gbm9kZS51bmJpbmQoKTtcclxuXHRcdFx0fVxyXG5cdFx0fTtcclxuXHRcdGlmIChuYW1lc3BhY2VQYXJzZS5zdWJuYW1lc3BhY2UpIHtcclxuXHRcdFx0aWYgKF9pc1R5cGVPYmplY3QoYmluZGluZykgJiYgYmluZGluZykge1xyXG5cdFx0XHRcdC8vIE1pcnJvclxyXG5cdFx0XHRcdEVOVi5UcmFwLm9ic2VydmUoYmluZGluZywgY2hhbmdlcyA9PiB7XHJcblx0XHRcdFx0XHRyZXR1cm4gSFRNTFRyYW5zcG9ydC5zeW5jKGVsLCBiaW5kaW5nLCBuYW1lc3BhY2VQYXJzZS5zdWJuYW1lc3BhY2UsIHN5bmNMaXN0Q2FsbGJhY2spO1xyXG5cdFx0XHRcdH0sIHt0YWdzOlsnI0hUTUxUcmFuc3BvcnQtc3luYycsIGVsXX0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChfaXNUeXBlT2JqZWN0KF9iaW5kaW5nKSAmJiBfYmluZGluZykge1xyXG5cdFx0XHRcdC8vIFVubWlycm9yXHJcblx0XHRcdFx0RU5WLlRyYXAudW5vYnNlcnZlKF9iaW5kaW5nLCBudWxsLCBudWxsLCB7dGFnczpbJyNIVE1MVHJhbnNwb3J0LXN5bmMnLCBlbF19KTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBJbml0aWFsIFN5bmMuLi5cclxuXHRcdFx0cmV0dXJuIEhUTUxUcmFuc3BvcnQuc3luYyhlbCwgYmluZGluZyB8fCB7fSwgbmFtZXNwYWNlUGFyc2Uuc3VibmFtZXNwYWNlLCBzeW5jTGlzdENhbGxiYWNrKTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQmluZHMgYSAocmVhY3RpdmUpIGxpc3QgY29udGV4dCB0byB0aGUgaW5zdGFuY2UuXHJcblx0ICogQ2hpbGRub2RlcyB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY3JlYXRlZC9yZW1vdmVkIHBlciBrZXkuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gRWxlbWVudCBcdFx0ZWxcclxuXHQgKiBAcGFyYW0gYXJyYXkgXHRcdHNyY01vZGVsXHJcblx0ICogQHBhcmFtIHN0cmluZyBcdFx0c3VibmFtZXNwYWNlXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uIFx0XHRzeW5jTGlzdENhbGxiYWNrXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIEVOVi5UcmFwLk11dGF0aW9uRXZlbnRcclxuXHQgKi9cclxuXHRzdGF0aWMgc3luYyhlbCwgc3JjTW9kZWwsIHN1Ym5hbWVzcGFjZSwgc3luY0xpc3RDYWxsYmFjayA9IG51bGwpIHtcclxuXHRcdHZhciBzY29wZWRIVE1MID0gZWxbJy5zY29wZWRIVE1MJ107XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLVxyXG5cdFx0dmFyIG5vZGVOYW1lc3BhY2VBcnJheSA9IHN1Ym5hbWVzcGFjZS5zcGxpdCgnLy8nKTtcclxuXHRcdC8vIENyZWF0ZSBhIG5hbWVzcGFjZSBoYXNoLi4uXHJcblx0XHRpZiAobm9kZU5hbWVzcGFjZUFycmF5WzBdLmluZGV4T2YoJ1snKSA+IC0xKSB7XHJcblx0XHRcdG5vZGVOYW1lc3BhY2VBcnJheVswXSA9ICdcIicgKyBub2RlTmFtZXNwYWNlQXJyYXlbMF0ucmVwbGFjZSgvXFxbL2csICdcIiArICcpLnJlcGxhY2UoL1xcXS9nLCAnICsgXCInKSArICdcIic7XHJcblx0XHR9XHJcblx0XHR2YXIgc3JjTW9kZWxLZXlzID0gRU5WLlRyYXAua2V5cyhzcmNNb2RlbCk7XHJcblx0XHR2YXIgY3VycmVudE5vZGVOYW1lcyA9IEVOVi5UcmFwLmtleXMoc2NvcGVkSFRNTC5zdG9yZSk7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLVxyXG5cdFx0dmFyIGUgPSBuZXcgRU5WLlRyYXAuTXV0YXRpb25FdmVudChlbCwge3R5cGU6J3JlbW9kZWxsaW5nJ30pO1xyXG5cdFx0X3VuaXF1ZShzcmNNb2RlbEtleXMuY29uY2F0KGN1cnJlbnROb2RlTmFtZXMpKS5mb3JFYWNoKG5vZGVOYW1lID0+IHtcclxuXHRcdFx0bm9kZU5hbWUgPSBfaXNOdW1lcmljKG5vZGVOYW1lKSA/IHBhcnNlSW50KG5vZGVOYW1lKSA6IG5vZGVOYW1lO1xyXG5cdFx0XHR2YXIgZXhpc3RpbmdOb2RlID0gc2NvcGVkSFRNTC5maW5kKG5vZGVOYW1lKTtcclxuXHRcdFx0dmFyIHJzcG5zO1xyXG5cdFx0XHRpZiAoRU5WLlRyYXAuaGFzKHNyY01vZGVsLCBub2RlTmFtZSkpIHtcclxuXHRcdFx0XHR2YXIgc3JjSXRlbSA9IEVOVi5UcmFwLmdldChzcmNNb2RlbCwgbm9kZU5hbWUpLCBpc05ld05vZGUgPSBmYWxzZTtcclxuXHRcdFx0XHRpZiAoIWV4aXN0aW5nTm9kZSkge1xyXG5cdFx0XHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0XHRcdHZhciBub2RlTmFtZXNwYWNlQXJyYXlDb3B5ID0gbm9kZU5hbWVzcGFjZUFycmF5LnNsaWNlKCk7XHJcblx0XHRcdFx0XHRpZiAobm9kZU5hbWVzcGFjZUFycmF5Q29weVswXS5pbmRleE9mKCdcIicpID4gLTEpIHtcclxuXHRcdFx0XHRcdFx0bm9kZU5hbWVzcGFjZUFycmF5Q29weVswXSA9IG5vZGVOYW1lc3BhY2VBcnJheUNvcHlbMF0ucmVwbGFjZSgvXCIgXFwrICBcXCsgXCIvZywgbm9kZU5hbWUpO1xyXG5cdFx0XHRcdFx0XHRub2RlTmFtZXNwYWNlQXJyYXlDb3B5WzBdID0gSnNlbi5wYXJzZShub2RlTmFtZXNwYWNlQXJyYXlDb3B5WzBdKS5ldmFsKHNyY0l0ZW0pO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0dmFyIG5vZGVFbCA9IEhUTUxUcmFuc3BvcnQuaW1wb3J0KG5vZGVOYW1lc3BhY2VBcnJheUNvcHkuam9pbignLy8nKSk7XHJcblx0XHRcdFx0XHQvLyAtLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHRcdFx0aWYgKG5vZGVFbCkge1xyXG5cdFx0XHRcdFx0XHR2YXIgZm9sbG93aW5nID0gX2ZvbGxvd2luZyhzcmNNb2RlbEtleXMsIG5vZGVOYW1lICsgJycvKm51bWVyaWMgbm9kZU5hbWUgbmVlZHMgdGhpcyovLCB0cnVlLypsZW5ndGgqLylcclxuXHRcdFx0XHRcdFx0XHQucmVkdWNlKChjbG9zZXN0LCBfbm9kZU5hbWUpID0+IGNsb3Nlc3QgfHwgc2NvcGVkSFRNTC5maW5kKF9ub2RlTmFtZSksIG51bGwpO1xyXG5cdFx0XHRcdFx0XHRpZiAoZm9sbG93aW5nKSB7XHJcblx0XHRcdFx0XHRcdFx0Zm9sbG93aW5nLmJlZm9yZShub2RlRWwpO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdGVsLmFwcGVuZChub2RlRWwpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGV4aXN0aW5nTm9kZSA9IHNjb3BlZEhUTUwuYWRkKG5vZGVOYW1lLCBub2RlRWwpO1xyXG5cdFx0XHRcdFx0XHRpc05ld05vZGUgPSB0cnVlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAoZXhpc3RpbmdOb2RlKSB7XHJcblx0XHRcdFx0XHRpZiAoX2lzRnVuY3Rpb24oc3luY0xpc3RDYWxsYmFjaykpIHtcclxuXHRcdFx0XHRcdFx0cnNwbnMgPSBzeW5jTGlzdENhbGxiYWNrKG5vZGVOYW1lLCBleGlzdGluZ05vZGUsIHNyY0l0ZW0sIGlzTmV3Tm9kZSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2UgaWYgKGV4aXN0aW5nTm9kZSkge1xyXG5cdFx0XHRcdGlmIChfaXNGdW5jdGlvbihzeW5jTGlzdENhbGxiYWNrKSkge1xyXG5cdFx0XHRcdFx0cnNwbnMgPSBzeW5jTGlzdENhbGxiYWNrKG5vZGVOYW1lLCBleGlzdGluZ05vZGUpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR2YXIgcmVtb3ZlID0gKCkgPT4ge1xyXG5cdFx0XHRcdFx0ZXhpc3RpbmdOb2RlLnJlbW92ZSgpO1xyXG5cdFx0XHRcdH07XHJcblx0XHRcdFx0aWYgKHJzcG5zIGluc3RhbmNlb2YgUHJvbWlzZSkge1xyXG5cdFx0XHRcdFx0cnNwbnMudGhlbihyZW1vdmUpLmNhdGNoKHJlbW92ZSk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHJlbW92ZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRlLnJlc3BvbnNlKHJzcG5zKTtcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIGU7XHJcblx0fVxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2JlZm9yZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci9iZWZvcmUuanMnO1xyXG5pbXBvcnQgX2FmdGVyIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL2FmdGVyLmpzJztcclxuXHJcblxyXG4vKipcclxuICogUGFyc2VzIGFuIGVsZW1lbnQncyBDSFRNTCBuYW1lc3BhY2UuXHJcbiAqIFRoaXMgZXhwbGFpbnMgaG93IGFuIGVsZW1lbnQncyBuYW1lc3BhY2UgaXMgdXNlZCBpbiBDSFRNTC5cclxuICpcclxuICogQHBhcmFtIHN0cmluZ1x0XHRcdFx0XHRuYW1lc3BhY2VTdHJcclxuICpcclxuICogQHJldHVybiBvYmplY3RcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWVzcGFjZVN0cikge1xyXG5cdHZhciBuYW1lc3BhY2VQYXJzZSA9IHtyb2FkbWFwOm5hbWVzcGFjZVN0cn07XHJcblx0aWYgKG5hbWVzcGFjZVBhcnNlLnJvYWRtYXApIHtcclxuXHRcdG5hbWVzcGFjZVBhcnNlLm5hbWVzcGFjZSA9IF9iZWZvcmUobmFtZXNwYWNlUGFyc2Uucm9hZG1hcCwgJy8vJyk7XHJcblx0XHRuYW1lc3BhY2VQYXJzZS5zdWJuYW1lc3BhY2UgPSBfYWZ0ZXIobmFtZXNwYWNlUGFyc2Uucm9hZG1hcCwgJy8vJyk7XHJcblx0XHQvLyBJbiBjYXNlIHRoaXMgaXMgdGhlIC8vLyBzcG90Li4uXHJcblx0XHRpZiAobmFtZXNwYWNlUGFyc2Uuc3VibmFtZXNwYWNlLnN0YXJ0c1dpdGgoJy8nKSkge1xyXG5cdFx0XHRuYW1lc3BhY2VQYXJzZS5zdWJuYW1lc3BhY2UgPSBfYWZ0ZXIobmFtZXNwYWNlUGFyc2Uuc3VibmFtZXNwYWNlLCAnLycpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKG5hbWVzcGFjZVBhcnNlLnN1Ym5hbWVzcGFjZS5lbmRzV2l0aCgnLy8nKSAmJiBuYW1lc3BhY2VQYXJzZS5zdWJuYW1lc3BhY2UuaW5kZXhPZignLy8vJykgPT09IC0xKSB7XHJcblx0XHRcdG5hbWVzcGFjZVBhcnNlLnN1Ym5hbWVzcGFjZSA9IG5hbWVzcGFjZVBhcnNlLnN1Ym5hbWVzcGFjZSArIG5hbWVzcGFjZVBhcnNlLm5hbWVzcGFjZSArICcvLyc7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBuYW1lc3BhY2VQYXJzZTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IFJlZmxleCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9yZWZsZXgnO1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgZGVmaW5lQnVuZGxlRWxlbWVudHMgZnJvbSAnLi9kZWZpbmVCdW5kbGVFbGVtZW50cy5qcyc7XHJcbmltcG9ydCBkZWZpbmVJbXBvcnRFbGVtZW50cyBmcm9tICcuL2RlZmluZUltcG9ydEVsZW1lbnRzLmpzJztcclxuaW1wb3J0IGNyZWF0ZUJ1bmRsZU1hdHJpeCBmcm9tICcuL2NyZWF0ZUJ1bmRsZU1hdHJpeC5qcyc7XHJcbmltcG9ydCBIVE1MVHJhbnNwb3J0IGZyb20gJy4vSFRNTFRyYW5zcG9ydC5qcyc7XHJcbmltcG9ydCBFTlYgZnJvbSAnLi9FTlYuanMnO1xyXG5cclxuLyoqXHJcbiAqIFRoZSBcImluaXRcIiBmdW5jdGlvbi5cclxuICogR2l2ZXMgQ0hUTUwgYSBnbG9iYWwgd2luZG93IGNvbnRleHRcclxuICogYW5kIGxldHMgaXQgcGVyZm9ybSBvdGhlciBuZWNlc3NhcnkgaW5pdGlhbGl6YXRpb25zLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHRcdFdpbmRvd1xyXG4gKiBAcGFyYW0gb2JqZWN0XHRcdFRyYXBcclxuICogQHBhcmFtIGFycmF5XHRcdFx0YnVuZGxlc1xyXG4gKlxyXG4gKiBAcmV0dXJuIHZvaWRcclxuICovXHJcbkhUTUxUcmFuc3BvcnQuaW5pdCA9IGZ1bmN0aW9uKFdpbmRvdywgVHJhcCA9IFJlZmxleCwgYnVuZGxlcyA9IFtdKSB7XHJcbiAgICBFTlYuV2luZG93ID0gV2luZG93O1xyXG4gICAgRU5WLlRyYXAgPSBUcmFwO1xyXG5cclxuICAgIC8vIFRyYXAgQ0hUTUwgbmV3IG5vZGVzXHJcbiAgICBpZiAoRU5WLlNjb3BlZEhUTUwpIHtcclxuICAgICAgICBFTlYuU2NvcGVkSFRNTC5wYXJhbXMuYWRkQ2FsbGJhY2sgPSAobmV3Tm9kZSwgc2NvcGVkSFRNTCkgPT4ge1xyXG4gICAgICAgICAgICB2YXIgX25ld05vZGU7XHJcbiAgICAgICAgICAgIGlmIChuZXdOb2RlLm1hdGNoZXMoRU5WLnBhcmFtcy5pbXBvcnRFbGVtZW50KSAmJiAoX25ld05vZGUgPSBuZXdOb2RlLnJlc29sdmUoKSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfbmV3Tm9kZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3Tm9kZTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgLy8gU2V0dXAgc3luY1xyXG4gICAgaWYgKEVOVi5TY29wZWRKUyAmJiBFTlYuVHJhcCAmJiBFTlYuVHJhcC5vYnNlcnZlKSB7XHJcbiAgICAgICAgRU5WLlNjb3BlZEpTLnBhcmFtcy5iaW5kQ2FsbGJhY2sgPSBIVE1MVHJhbnNwb3J0LmNhcHR1cmU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAvLyBIVE1MVHJhbnNwb3J0LmNvbnRlbnRMb2FkZWRQcm9taXNlXHJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIEhUTUxUcmFuc3BvcnQuY29udGVudExvYWRlZFByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICBpZiAoRU5WLldpbmRvdy5kb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmUoKTsgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBFTlYuV2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCByZXNvbHZlLCBmYWxzZSk7XHJcbiAgICAgICAgRU5WLldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgcmVzb2x2ZSwgZmFsc2UpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAvLyBFTlYuYnVuZGxlc1xyXG4gICAgLy8gSFRNTFRyYW5zcG9ydC5sb2FkaW5nQnVuZGxlc1Byb21pc2VcclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgZGVmaW5lQnVuZGxlRWxlbWVudHMoKTtcclxuICAgIEhUTUxUcmFuc3BvcnQuY29udGVudExvYWRlZFByb21pc2UudGhlbigoKSA9PiB7XHJcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICBpZiAoX2lzRnVuY3Rpb24oYnVuZGxlcykpIHtcclxuICAgICAgICAgICAgYnVuZGxlcyA9IGJ1bmRsZXMoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKCFidW5kbGVzIHx8ICFidW5kbGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB2YXIgX2J1bmRsZXMgPSBfYXJyRnJvbShFTlYuV2luZG93LmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3RlbXBsYXRlW2lzPVwiJyArIEVOVi5wYXJhbXMuYnVuZGxlRWxlbWVudCArICdcIl0nKSkucmV2ZXJzZSgpO1xyXG4gICAgICAgICAgICBidW5kbGVzID0gX2J1bmRsZXMubWFwKGIgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGIuaGFzQXR0cmlidXRlKCdzcmMnKSAmJiAhYi5jb250ZW50LmNoaWxkcmVuLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYi5hZGRFdmVudExpc3RlbmVyKCdidW5kbGVsb2Fkc3VjY2VzcycsICgpID0+IHJlc29sdmUoYikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiLmFkZEV2ZW50TGlzdGVuZXIoJ2J1bmRsZWxvYWRlcnJvcicsICgpID0+IHJlc29sdmUoYikpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIEhUTUxUcmFuc3BvcnQuYnVuZGxlTWF0cml4ID0gY3JlYXRlQnVuZGxlTWF0cml4KGJ1bmRsZXMpO1xyXG4gICAgICAgIEhUTUxUcmFuc3BvcnQuYnVuZGxlTWF0cml4LmxvYWRpbmdTb3VyY2VzLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBNdXN0IGNvbWUgYmVmb3JlIHJlc29sdmVBdXRvSW1wb3J0cygpXHJcbiAgICAgICAgICAgIC8vIHNvIHRoYXQgcmVzb2x2ZUF1dG9JbXBvcnRzIGNhbGxzIHdvbid0IHRocm93IGVycm9yc1xyXG4gICAgICAgICAgICBIVE1MVHJhbnNwb3J0LmltcG9ydHNSZWFkeSA9IHRydWU7XHJcbiAgICAgICAgfSk7XHRcclxuICAgICAgICBkZWZpbmVJbXBvcnRFbGVtZW50cyhIVE1MVHJhbnNwb3J0KTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRoZSBcInJlYWR5XCIgZnVuY3Rpb24uXHJcbiAqIENhbGxzIHVzIHdoZW4gaXQgYmVjb21lcyBzYWZlIHRvIHJ1biBidW5kbGUtcmVsYXRlZCBjb2RlLlxyXG4gKlxyXG4gKiBAcGFyYW0gZnVuY3Rpb25cdFx0XHRjYWxsYmFja1xyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdFx0d2FpdEZvckJ1bmRsZXNcclxuICpcclxuICogQHJldHVybiB2b2lkXHJcbiAqL1xyXG5IVE1MVHJhbnNwb3J0LnJlYWR5ID0gZnVuY3Rpb24oY2FsbGJhY2ssIHdhaXRGb3JCdW5kbGVzID0gdHJ1ZSkge1xyXG4gICAgSFRNTFRyYW5zcG9ydC5jb250ZW50TG9hZGVkUHJvbWlzZS50aGVuKCgpID0+IHtcclxuICAgICAgICBpZiAoIXdhaXRGb3JCdW5kbGVzKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7IHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgSFRNTFRyYW5zcG9ydC5idW5kbGVNYXRyaXgubG9hZGluZ1NvdXJjZXMudGhlbihjYWxsYmFjayk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBJbXBvcnRzIGEgbW9kdWxlIGZyb20gYnVuZGxlcy5cclxuICpcclxuICogQHBhcmFtIHN0cmluZ1x0XHRcdFx0XHRcdG5hbWVzcGFjZVxyXG4gKlxyXG4gKiBAcmV0dXJuIEhUTUxFbGVtZW50XHJcbiAqL1xyXG5IVE1MVHJhbnNwb3J0LmltcG9ydCA9IGZ1bmN0aW9uKG5hbWVzcGFjZSkge1xyXG4gICAgaWYgKEhUTUxUcmFuc3BvcnQuYnVuZGxlTWF0cml4KSB7XHJcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgLy8gSXMgc29tZW9uZSB0cnlpbmcgdG8gaW1wb3J0IHdoaWxlIGJ1bmRsZXMgYXJlIHN0aWxsIGxvYWRpbmc/XHJcbiAgICAgICAgaWYgKCFIVE1MVHJhbnNwb3J0LmltcG9ydHNSZWFkeSAmJiAhSFRNTFRyYW5zcG9ydC53YXJuZWRFYXJseUJ1bmRsZUFjY2Vzcykge1xyXG4gICAgICAgICAgICBIVE1MVHJhbnNwb3J0Lndhcm5lZEVhcmx5QnVuZGxlQWNjZXNzID0gdHJ1ZTtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdSZW1vdGUgYnVuZGxlcyBhcmUgc3RpbGwgbG9hZGluZyBhdCB0aGlzIHRpbWUhIFlvdSBzaG91bGQgcHJvYmFiYmx5IHdyYXAgYnVuZGxlLWRlcGVuZGVudCBjb2RlIHdpdGhpbiBIVE1MVHJhbnNwb3J0LnJlYWR5KGNhbGxiYWNrWywgdHJ1ZS8qd2FpdEZvckJ1bmRsZXMqL10pLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gSFRNTFRyYW5zcG9ydC5idW5kbGVNYXRyaXguZmluZChuYW1lc3BhY2UpO1xyXG4gICAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQge1xyXG4gICAgSFRNTFRyYW5zcG9ydCBhcyBkZWZhdWx0LFxyXG4gICAgRU5WLFxyXG59IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEVOViBmcm9tICcuL0VOVi5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBjbGllbnQtYnVpbGQgZW50cnlcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBEZWZpbmUgdGhlIGN1c3RvbWl6ZWQgYnVpbHQtaW4gdGVtcGxhdGUgZWxlbWVudFxyXG5cdCAqIHRoYXQgc3VwcG9ydHMgcmVtb3RlIGNvbnRlbnQuXHJcblx0ICovXHJcblx0RU5WLldpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoRU5WLnBhcmFtcy5idW5kbGVFbGVtZW50LCBjbGFzcyBleHRlbmRzIEVOVi5XaW5kb3cuSFRNTFRlbXBsYXRlRWxlbWVudCB7XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFRoaXMgaGFuZGxlcyBib3RoIHRyaWdnZXJzIHJlbW90ZSBsb2FkaW5nXHJcblx0XHQgKiB3aGVuIHNvIGRlZmluZWQuXHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHN0cmluZ1x0bmFtZVxyXG5cdFx0ICogQHBhcmFtIHN0cmluZ1x0b2xkVmFsdWVcclxuXHRcdCAqIEBwYXJhbSBzdHJpbmdcdG5ld1ZhbHVlXHJcblx0XHQgKlxyXG5cdFx0ICogQHJldHVybiB2b2lkXHJcblx0XHQgKi9cclxuXHRcdGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcclxuXHRcdFx0aWYgKG5ld1ZhbHVlKSB7XHJcblx0XHRcdFx0dGhpcy5sb2FkKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQXR0ZW1wdCB0byBsb2FkIHJlbW90ZSBjb250ZW50IGlmIHNvIGRlZmluZWQuXHJcblx0XHQgKlxyXG5cdFx0ICogQHJldHVybiB2b2lkXHJcblx0XHQgKi9cclxuXHRcdGxvYWQoKSB7XHJcblx0XHRcdHZhciBzcmMgPSB0aGlzLmdldEF0dHJpYnV0ZSgnc3JjJyk7XHJcblx0XHRcdGlmIChzcmMgJiYgdGhpcy5jb250ZW50LmNoaWxkcmVuLmxlbmd0aCkge1xyXG5cdFx0XHRcdGNvbnNvbGUud2FybignQSBDSFRNTCBidW5kbGUgbXVzdCBkZWZpbmUgb25seSBlaXRoZXIgYSByZW1vdGUgY29udGVudCBvciBsb2NhbCBjb250ZW50ISBCdW5kbGUgaWdub3JlZC4nKTtcclxuXHRcdFx0fSBlbHNlIGlmIChzcmMpIHtcclxuXHRcdFx0XHQvLyBNaXNzaW5nIGluIGpzZG9tXHJcblx0XHRcdFx0aWYgKEVOVi5XaW5kb3cuZmV0Y2gpIHtcclxuXHRcdFx0XHRcdEVOVi5XaW5kb3cuZmV0Y2goc3JjKS50aGVuKHJlc3BvbnNlID0+IHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLm9rID8gcmVzcG9uc2UudGV4dCgpIDogUHJvbWlzZS5yZWplY3QocmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcblx0XHRcdFx0XHR9KS50aGVuKGNvbnRlbnQgPT4ge1xyXG5cdFx0XHRcdFx0XHR0aGlzLmlubmVySFRNTCA9IGNvbnRlbnQ7XHJcblx0XHRcdFx0XHRcdC8vIERpc3BhdGNoIHRoZSBldmVudC5cclxuXHRcdFx0XHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFTlYuV2luZG93LkV2ZW50KCdidW5kbGVsb2Fkc3VjY2VzcycsIHtcclxuXHRcdFx0XHRcdFx0XHRidWJibGVzOnRydWUsXHJcblx0XHRcdFx0XHRcdH0pKTtcclxuXHRcdFx0XHRcdH0pLmNhdGNoKGVycm9yID0+IHtcclxuXHRcdFx0XHRcdFx0Ly8gRGlzcGF0Y2ggdGhlIGV2ZW50LlxyXG5cdFx0XHRcdFx0XHRjb25zb2xlLndhcm4oJ0Vycm9yIGZldGNoaW5nIHRoZSBidW5kbGUgYXQgJyArIHNyYyArICcuICgnICsgZXJyb3IgKyAnKScpO1xyXG5cdFx0XHRcdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEVOVi5XaW5kb3cuRXZlbnQoJ2J1bmRsZWxvYWRlcnJvcicsIHtcclxuXHRcdFx0XHRcdFx0XHRidWJibGVzOnRydWUsXHJcblx0XHRcdFx0XHRcdH0pKTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIGV2ZW50IHdpbGwgZmlyZSBCRUZPUkUgdGhlIGNvZGUgdGhhdCBiaW5kcyB0byBpdFxyXG5cdFx0XHRcdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEVOVi5XaW5kb3cuRXZlbnQoJ2J1bmRsZWxvYWRzdWNjZXNzJywge1xyXG5cdFx0XHRcdFx0XHRcdGJ1YmJsZXM6dHJ1ZSxcclxuXHRcdFx0XHRcdFx0fSkpO1xyXG5cdFx0XHRcdFx0fSwgMCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFRoZSBhdHRyaWJ1dGVzIHdlIHdhbnQgdG8gb2JzZXJ2ZS5cclxuXHRcdCAqXHJcblx0XHQgKiBAcmV0dXJuIGFycmF5XHJcblx0XHQgKi9cclxuXHRcdHN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCkge1xyXG5cdFx0XHRyZXR1cm4gWydzcmMnXTtcclxuXHRcdH1cclxuXHR9LCB7ZXh0ZW5kczogJ3RlbXBsYXRlJ30pO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2JlZm9yZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci9iZWZvcmUuanMnO1xyXG5pbXBvcnQgcmVjb21wb3NlIGZyb20gJy4vcmVjb21wb3NlLmpzJztcclxuaW1wb3J0IEVOViBmcm9tICcuL0VOVi5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBjbGllbnQtYnVpbGQgZW50cnlcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihIVE1MVHJhbnNwb3J0KSB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIERlZmluZSB0aGUgY3VzdG9tIGltcG9ydCBlbGVtZW50XHJcblx0ICovXHJcblx0RU5WLldpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUoRU5WLnBhcmFtcy5pbXBvcnRFbGVtZW50LCBjbGFzcyBleHRlbmRzIEVOVi5XaW5kb3cuSFRNTEVsZW1lbnQge1xyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBUZXN0cyBpZiBjb25kaXRpb25zIGFyZSByaWdodCB0byByZXNvbHZlIHRoZSBpbXBvcnQuXHJcblx0XHQgKlxyXG5cdFx0ICogQHJldHVybiBib29sXHJcblx0XHQgKi9cclxuXHRcdGF0dGVtcHRSZXNvbHZlKCkge1xyXG5cdFx0XHRpZiAoIXRoaXMuaGFzQXR0cmlidXRlKCdvbmRlbWFuZCcpICYmICF0aGlzLmNsb3Nlc3QoJ3RlbXBsYXRlJykgJiYgIXRoaXMuY2xvc2VzdChFTlYucGFyYW1zLmltcG9ydEVsZW1lbnQgKyAnW29uZGVtYW5kXScpKSB7XHJcblx0XHRcdFx0SFRNTFRyYW5zcG9ydC5idW5kbGVNYXRyaXgubG9hZGluZ1NvdXJjZXMudGhlbigoKSA9PiB7XHJcblx0XHRcdFx0XHR0aGlzLnJlc29sdmUoKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBUaGlzIHRyaWdnZXJzIHNlbGYtcmVwbGFjZW1lbnRcclxuXHRcdCAqIHdoZW4gc28gZGVmaW5lZC5cclxuXHRcdCAqXHJcblx0XHQgKiBAcmV0dXJuIHZvaWRcclxuXHRcdCAqL1xyXG5cdFx0Y29ubmVjdGVkQ2FsbGJhY2soKSB7XHJcblx0XHRcdHRoaXMucHJvY2Vzc2VkID0gZmFsc2U7XHJcblx0XHRcdHRoaXMuYXR0ZW1wdFJlc29sdmUoKTtcclxuXHRcdH1cclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVGhpcyB0cmlnZ2VycyBzZWxmLXJlcGxhY2VtZW50XHJcblx0XHQgKiB3aGVuIHNvIGRlZmluZWQuXHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHN0cmluZ1x0bmFtZVxyXG5cdFx0ICogQHBhcmFtIHN0cmluZ1x0b2xkVmFsdWVcclxuXHRcdCAqIEBwYXJhbSBzdHJpbmdcdG5ld1ZhbHVlXHJcblx0XHQgKlxyXG5cdFx0ICogQHJldHVybiB2b2lkXHJcblx0XHQgKi9cclxuXHRcdGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcclxuXHRcdFx0dGhpcy5hdHRlbXB0UmVzb2x2ZSgpO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBBdHRlbXB0IHNlbGYtcmVwbGFjZW1lbnQgaWYgc28gZGVmaW5lZC5cclxuXHRcdCAqXHJcblx0XHQgKiBAcmV0dXJuIHZvaWRcclxuXHRcdCAqL1xyXG5cdFx0cmVzb2x2ZSgpIHtcclxuXHRcdFx0aWYgKCF0aGlzLnBhcmVudE5vZGUpIHtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIHJlcGxhY2VtZW50LCBuYW1lc3BhY2UsIG5hbWVzcGFjZUF0dHIgPSBFTlYucGFyYW1zLm5hbWVzcGFjZUF0dHJpYnV0ZTtcclxuXHRcdFx0aWYgKChuYW1lc3BhY2UgPSBfYmVmb3JlKHRoaXMuZ2V0QXR0cmlidXRlKG5hbWVzcGFjZUF0dHIpIHx8ICcnLCAnLy8nKSlcclxuXHRcdFx0JiYgKG5hbWVzcGFjZSAhPT0gdGhpcy5fX25hbWVzcGFjZSkpIHtcclxuXHRcdFx0XHRpZiAoIUhUTUxUcmFuc3BvcnQuYnVuZGxlTWF0cml4IHx8ICEocmVwbGFjZW1lbnQgPSBIVE1MVHJhbnNwb3J0LmltcG9ydChuYW1lc3BhY2UpKSkge1xyXG5cdFx0XHRcdFx0dGhpcy5pbm5uZXJUZXh0ID0gJ05vIGVsZW1lbnQgZm91bmQgb24gdGhlIG5hbWVzcGFjZSBcIicgKyBuYW1lc3BhY2UgKyAnXCIhJztcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dGhpcy5fX25hbWVzcGFjZSA9IG5hbWVzcGFjZTtcclxuXHRcdFx0XHRcdHZhciByZXNvbHZlZCA9IHJlY29tcG9zZShyZXBsYWNlbWVudCwgdGhpcyk7XHJcblx0XHRcdFx0XHRpZiAodGhpcy5oYXNBdHRyaWJ1dGUoJ3NoYWRvdycpKSB7XHJcblx0XHRcdFx0XHRcdGlmICghdGhpcy5wYXJlbnROb2RlLnNoYWRvd1Jvb3QpIHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuYXR0YWNoU2hhZG93KHttb2RlOiAnb3Blbid9KTtcclxuXHRcdFx0XHRcdFx0fSBcclxuXHRcdFx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLnNoYWRvd1Jvb3QuYXBwZW5kKHJlc29sdmVkKTtcclxuXHRcdFx0XHRcdFx0dGhpcy5yZW1vdmUoKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHRoaXMucmVwbGFjZVdpdGgocmVzb2x2ZWQpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0cmVzb2x2ZWQuc2V0QXR0cmlidXRlKCdhdXRvaW1wb3J0ZWQnLCAndHJ1ZScpO1xyXG5cdFx0XHRcdFx0cmVzb2x2ZWQuZGlzcGF0Y2hFdmVudChuZXcgRU5WLldpbmRvdy5FdmVudCgnaW1wb3J0ZWQnLCB7XHJcblx0XHRcdFx0XHRcdGJ1YmJsZXM6dHJ1ZSxcclxuXHRcdFx0XHRcdH0pKTtcclxuXHRcdFx0XHRcdHJldHVybiByZXNvbHZlZDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVGhlIGF0dHJpYnV0ZXMgd2Ugd2FudCB0byBvYnNlcnZlLlxyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm4gYXJyYXlcclxuXHRcdCAqL1xyXG5cdFx0c3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XHJcblx0XHRcdHJldHVybiBbJ29uZGVtYW5kJywgRU5WLnBhcmFtcy5uYW1lc3BhY2VBdHRyaWJ1dGVdO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgU0NPUEVEX0hUTUxfRU5WIGZyb20gJy4vc2NvcGVkLWh0bWwvRU5WLmpzJztcclxuaW1wb3J0IFNDT1BFRF9KU19FTlYgZnJvbSAnLi9zY29wZWQtanMvRU5WLmpzJztcclxuaW1wb3J0IEhUTUxfVFJBTlNQT1JUX0VOViBmcm9tICcuL2h0bWwtdHJhbnNwb3J0L0VOVi5qcyc7XHJcblxyXG5TQ09QRURfSlNfRU5WLnBhcmFtcy5pbmVydENvbnRleHRzLnB1c2goSFRNTF9UUkFOU1BPUlRfRU5WLnBhcmFtcy5pbXBvcnRFbGVtZW50KTtcclxuLy8gRGVmYXVsdCBjb21tb24gVHJhcFxyXG5IVE1MX1RSQU5TUE9SVF9FTlYuU2NvcGVkSFRNTCA9IFNDT1BFRF9IVE1MX0VOVjtcclxuSFRNTF9UUkFOU1BPUlRfRU5WLlNjb3BlZEpTID0gU0NPUEVEX0pTX0VOVjtcclxuLy8gSW5kaXZpZHVhbCBBY2Nlc3NcclxuY29uc3QgRU5WID0ge1xyXG4gICAgU2NvcGVkSFRNTDogU0NPUEVEX0hUTUxfRU5WLFxyXG4gICAgU2NvcGVkSlM6IFNDT1BFRF9KU19FTlYsXHJcbiAgICBIVE1MVHJhbnNwb3J0OiBIVE1MX1RSQU5TUE9SVF9FTlYsXHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IEVOVjsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgU2NvcGVkSFRNTCBmcm9tICcuL3Njb3BlZC1odG1sL2luZGV4LmpzJztcclxuaW1wb3J0IFNjb3BlZENTUyBmcm9tICcuL3Njb3BlZC1jc3MvaW5kZXguanMnO1xyXG5pbXBvcnQgU2NvcGVkSlMgZnJvbSAnLi9zY29wZWQtanMvaW5kZXguanMnO1xyXG5pbXBvcnQgSFRNTFRyYW5zcG9ydCBmcm9tICcuL2h0bWwtdHJhbnNwb3J0L2luZGV4LmpzJztcclxuaW1wb3J0IEVOViBmcm9tICcuL0VOVi5qcyc7XHJcblxyXG4vKipcclxuICogQGluaXRcclxuICovXHJcbmNvbnN0IENodG1sID0ge1xyXG5cdGluaXQ6IGZ1bmN0aW9uKFdpbmRvdykge1xyXG5cdFx0U2NvcGVkSFRNTC5pbml0KFdpbmRvdyk7XHJcblx0XHRTY29wZWRDU1MuaW5pdChXaW5kb3cpO1xyXG5cdFx0U2NvcGVkSlMuaW5pdChXaW5kb3cpO1xyXG5cdFx0SFRNTFRyYW5zcG9ydC5pbml0KFdpbmRvdyk7XHJcblx0fSxcclxuXHRyZWFkeTogSFRNTFRyYW5zcG9ydC5yZWFkeSxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IHtcclxuICAgIENodG1sIGFzIGRlZmF1bHQsXHJcblx0U2NvcGVkSFRNTCxcclxuXHRTY29wZWRDU1MsXHJcblx0U2NvcGVkSlMsXHJcblx0SFRNTFRyYW5zcG9ydCxcclxuICAgIEVOVixcclxufTsiLCJcclxuLyoqXHJcbiAqIFJldHVybnMgVEhFIEZJUlNUIEVOVFJZIE9SIEEgTlVNQkVSIE9GIEVOVFJJRVMgY291bnRpbmcgZm9yd2FyZCBmcm9tIHRoZSBiZWdpbmluZy5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqIEBwYXJhbSBpbnRcdCBcdGFtb3VudFxyXG4gKlxyXG4gKiBAcmV0dXJuIG1peGVkfGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIGFtb3VudCA9IDEpIHtcclxuXHR2YXIgY291bnQgPSAwO1xyXG5cdGFyci5mb3JFYWNoKGl0bSA9PiB7XHJcblx0XHRjb3VudCArKztcclxuXHR9KTtcclxuXHR2YXIgZmlyc3RzID0gYXJyLnNsaWNlKGFyci5sZW5ndGggLSBjb3VudCwgYW1vdW50KTtcclxuXHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBmaXJzdHMgOiBmaXJzdHNbMF07XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfZmlyc3QgZnJvbSAnLi9maXJzdC5qcyc7XHJcblxyXG4vKipcclxuICogUmV0dXJucyBUSEUgTEFTVCBFTlRSWSBPUiBBIE5VTUJFUiBPRiBFTlRSSUVTIGNvdW50aW5nIGZvcndhcmQgdG8gdGhlIGVuZC5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqIEBwYXJhbSBpbnRcdCBcdGFtb3VudFxyXG4gKlxyXG4gKiBAcmV0dXJuIG1peGVkfGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIGFtb3VudCA9IDEpIHtcclxuXHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcclxuXHRcdD8gX2ZpcnN0KGFyci5zbGljZSgpLnJldmVyc2UoKSwgYW1vdW50KS5yZXZlcnNlKClcclxuXHRcdDogX2ZpcnN0KGFyci5zbGljZSgpLnJldmVyc2UoKSk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfYWZ0ZXIgZnJvbSAnLi9hZnRlci5qcyc7XHJcbmltcG9ydCBfYmVmb3JlTGFzdCBmcm9tICcuL2JlZm9yZUxhc3QuanMnO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHN0cmluZyB3aXRob3V0IHRoZSBnaXZlbiBvcGVuaW5nIGFuZCBjbG9zaW5nIHRhZ3MuXHJcbiAqXHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzdWJqZWN0XHJcbiAqIEBwYXJhbSAgc3RyaW5nICBvcGVuaW5nVGFnXHJcbiAqIEBwYXJhbSAgc3RyaW5nICBjbG9zaW5nVGFnXHJcbiAqXHJcbiAqIEByZXR1cm4gc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdWJqZWN0LCBvcGVuaW5nVGFnLCBjbG9zaW5nVGFnKSB7XHJcblx0cmV0dXJuIF9iZWZvcmVMYXN0KF9hZnRlcihzdWJqZWN0LCBvcGVuaW5nVGFnKSwgY2xvc2luZ1RhZyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfYmVmb3JlIGZyb20gJy4vYmVmb3JlLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gdGhlIHBhcnQgb2YgYSBzdHJpbmcgYmVmb3JlIGxhc3Qgb2NjdXJlbmNlIG9mIGEgZ2l2ZW4gdmFsdWUuXHJcbiAqXHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzdWJqZWN0XHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzZWFyY2hcclxuICpcclxuICogQHJldHVybiBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN1YmplY3QsIHNlYXJjaCkge1xyXG5cdHJldHVybiBfYmVmb3JlKHN1YmplY3QsIHNlYXJjaCwgdHJ1ZSk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBSZWZsZXggZnJvbSAnQHdlYi1uYXRpdmUtanMvcmVmbGV4JztcclxuaW1wb3J0IF9lYWNoIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2VhY2guanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgRnJhbWUgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqXHJcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIGdpdmVuIHJvdXRlIGFuZCBtYW5hZ2VzXHJcbiAqIGl0cyBzdWItcm91dGUuXHJcbiAqL1xyXG5cdFx0XHRcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xyXG5cclxuXHQvKipcclxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IEl0ZW0uXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdFx0XHRlbnRyaWVzXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHRcdFx0cGFyYW1zXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihlbnRyaWVzID0ge30pIHtcclxuXHRcdF9lYWNoKGVudHJpZXMsIChrZXksIHZhbHVlKSA9PiB7XHJcblx0XHRcdFJlZmxleC5zZXQodGhpcywga2V5LCB2YWx1ZSk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENvbnRyb2xzIHRoZSBGcmFtZSdzIGFjdGl2ZSBzdGF0ZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBib29sXHRcdFx0XHRzdGF0ZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBFdmVudFxyXG5cdCAqL1xyXG5cdHNldEFjdGl2ZVN0YXRlKHN0YXRlID0gdHJ1ZSkge1xyXG5cdFx0aWYgKHRoaXMuYWN0aXZlICE9PSBzdGF0ZSkge1xyXG5cdFx0XHR2YXIgZSA9IFJlZmxleC5zZXQodGhpcywgIXN0YXRlID8gJ2RlYWN0aXZhdGluZycgOiAnYWN0aXZhdGluZycsIHRydWUsIHRydWUvKnJldHVybkV2ZW50Ki8pO1xyXG5cdFx0XHRpZiAoZS5wcm9taXNlcykge1xyXG5cdFx0XHRcdGUucHJvbWlzZXMudGhlbigoKSA9PiB7XHJcblx0XHRcdFx0XHRSZWZsZXguc2V0KHRoaXMsICFzdGF0ZSA/IHtkZWFjdGl2YXRpbmc6ZmFsc2UsIGFjdGl2ZTpmYWxzZX0gOiB7YWN0aXZhdGluZzpmYWxzZSwgYWN0aXZlOnRydWV9LCB0cnVlLypyZXR1cm5FdmVudCovKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRyZXR1cm4gZTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXR1cm4gUmVmbGV4LnNldCh0aGlzLCAhc3RhdGUgPyB7ZGVhY3RpdmF0aW5nOmZhbHNlLCBhY3RpdmU6ZmFsc2V9IDoge2FjdGl2YXRpbmc6ZmFsc2UsIGFjdGl2ZTp0cnVlfSwgdHJ1ZS8qcmV0dXJuRXZlbnQqLyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IFJlZmxleCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9yZWZsZXgnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc0VtcHR5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNFbXB0eS5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzQ2xhc3MgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0NsYXNzLmpzJztcclxuaW1wb3J0IF9hcnJGaXJzdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9maXJzdC5qcyc7XHJcbmltcG9ydCBfYXJyTGFzdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9sYXN0LmpzJztcclxuaW1wb3J0IF9mb2xsb3dpbmcgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZm9sbG93aW5nLmpzJztcclxuaW1wb3J0IF9wcmVjZWRpbmcgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvcHJlY2VkaW5nLmpzJztcclxuaW1wb3J0IF9lYWNoIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2VhY2guanMnO1xyXG5pbXBvcnQgQ29sbGVjdGlvbkJhc2UgZnJvbSAnLi9Db2xsZWN0aW9uQmFzZS5qcyc7XHJcbmltcG9ydCBJdGVtIGZyb20gJy4vSXRlbS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBMaXN0IGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuXHRcdFx0XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgQ29sbGVjdGlvbkJhc2Uge1xyXG5cclxuXHQvKipcclxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IExpc3QgaW5zdGFuY2UuXHJcblx0ICogU3ViLXZpZXdzIG1heSBhbHNvIGJlIGxpc3RlZC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBhcnJheXxvYmplY3RcdFx0XHRpdGVtc1xyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0XHRcdHBhcmFtc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoaXRlbXMgPSB7fSwgcGFyYW1zID0ge30pIHtcclxuXHRcdGlmICghcGFyYW1zLnRha2VTdGF0cykge1xyXG5cdFx0XHRwYXJhbXMudGFrZVN0YXRzID0gW107XHJcblx0XHR9XHJcblx0XHRpZiAoIXBhcmFtcy50YWtlU3RhdHMuaW5jbHVkZXMoJ2FjdGl2ZScpKSB7XHJcblx0XHRcdHBhcmFtcy50YWtlU3RhdHMucHVzaCgnYWN0aXZlJyk7XHJcblx0XHR9XHJcblx0XHRpZiAoIXBhcmFtcy50YWtlU3RhdHMuaW5jbHVkZXMoJ2FjdGl2YXRpbmcnKSkge1xyXG5cdFx0XHRwYXJhbXMudGFrZVN0YXRzLnB1c2goJ2FjdGl2YXRpbmcnKTtcclxuXHRcdH1cclxuXHRcdGlmICghcGFyYW1zLnRha2VTdGF0cy5pbmNsdWRlcygnZGVhY3RpdmF0aW5nJykpIHtcclxuXHRcdFx0cGFyYW1zLnRha2VTdGF0cy5wdXNoKCdkZWFjdGl2YXRpbmcnKTtcclxuXHRcdH1cclxuXHRcdHN1cGVyKHt9LCBwYXJhbXMpO1xyXG5cdFx0UmVmbGV4Lm9ic2VydmUodGhpcywgdGhpcy5wYXJhbXMuaXRlbXNPZmZzZXQgKyAnLi5hY3RpdmF0aW5nJywgYWN0aXZhdGluZyA9PiB7XHJcblx0XHRcdGlmIChhY3RpdmF0aW5nKSB7XHJcblx0XHRcdFx0dGhpcy5nZXRJdGVtc0FycmF5KCkuZm9yRWFjaChpdGVtID0+IHtcclxuXHRcdFx0XHRcdGlmIChpdGVtLmFjdGl2ZSA9PT0gdHJ1ZSAmJiAhaXRlbS5hY3RpdmF0aW5nKSB7XHJcblx0XHRcdFx0XHRcdGl0ZW0uc2V0QWN0aXZlU3RhdGUoZmFsc2UpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHRoaXMuZmlsbChpdGVtcyk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBBZHZhbmNlcyB0aGUgbGlzdCdzIHNlbGVjdGVkbmVzcyB0byB0aGVcclxuXHQgKiBmaXJzdCBpdGVtLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkfUV2ZW50XHJcblx0ICovXHJcblx0c2VsZWN0U3RhcnQoKSB7XHJcblx0XHR2YXIgZmlyc3QsIGl0ZW1zID0gdGhpcy5nZXRJdGVtc0FycmF5KCk7XHJcblx0XHRpZiAoIV9pc0VtcHR5KGl0ZW1zKSAmJiAoZmlyc3QgPSBfYXJyRmlyc3QoaXRlbXMpKSkge1xyXG5cdFx0XHRyZXR1cm4gZmlyc3Quc2V0QWN0aXZlU3RhdGUodHJ1ZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBBZHZhbmNlcyB0aGUgbGlzdCdzIHNlbGVjdGVkbmVzcyB0byB0aGVcclxuXHQgKiBsYXN0IGl0ZW0uXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWR9RXZlbnRcclxuXHQgKi9cclxuXHRzZWxlY3RFbmQoKSB7XHJcblx0XHR2YXIgbGFzdCwgaXRlbXMgPSB0aGlzLmdldEl0ZW1zQXJyYXkoKTtcclxuXHRcdGlmICghX2lzRW1wdHkoaXRlbXMpICYmIChsYXN0ID0gX2Fyckxhc3QoaXRlbXMpKSkge1xyXG5cdFx0XHRyZXR1cm4gbGFzdC5zZXRBY3RpdmVTdGF0ZSh0cnVlKTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQWR2YW5jZXMgdGhlIGxpc3QncyBzZWxlY3RlZG5lc3MgdG8gdGhlXHJcblx0ICogaXRlbSBwcmVjZWRpbmcgdGhlIGN1cnJlbnQgY3VycmVudC5hY3RpdmUuXHJcblx0ICogU2VsZWN0cyB0aGUgbGFzdCBpdGVtIGlmIGxvb3BhYmxlIGFuZCBubyBjdXJyZW50LmFjdGl2ZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBib29sfGZ1bmN0aW9uXHRsb29wXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWR9RXZlbnRcclxuXHQgKi9cclxuXHRzZWxlY3RQcmV2KGxvb3AgPSBmYWxzZSkge1xyXG5cdFx0dmFyIHByZWNlZGluZywgaXRlbXMgPSB0aGlzLmdldEl0ZW1zQXJyYXkoKTtcclxuXHRcdGlmIChfaXNFbXB0eShpdGVtcykpIHtcclxuXHRcdFx0aWYgKF9pc0Z1bmN0aW9uKGxvb3ApKSB7XHJcblx0XHRcdFx0bG9vcCgpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdGlmICh0aGlzLmN1cnJlbnQuYWN0aXZlKSB7XHJcblx0XHRcdHByZWNlZGluZyA9IF9wcmVjZWRpbmcoaXRlbXMsIHRoaXMuY3VycmVudC5hY3RpdmUsIGZhbHNlLypsZW5ndGgqLywgbG9vcCk7XHJcblx0XHR9IGVsc2UgaWYgKGxvb3AgJiYgKCFfaXNGdW5jdGlvbihsb29wKSB8fCBsb29wKDApKSkge1xyXG5cdFx0XHRwcmVjZWRpbmcgPSBfYXJyTGFzdChpdGVtcyk7XHJcblx0XHR9XHJcblx0XHRpZiAocHJlY2VkaW5nKSB7XHJcblx0XHRcdHJldHVybiBwcmVjZWRpbmcuc2V0QWN0aXZlU3RhdGUodHJ1ZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBBZHZhbmNlcyB0aGUgbGlzdCdzIHNlbGVjdGVkbmVzcyB0byB0aGVcclxuXHQgKiBpdGVtIGZvbGxvd2luZyB0aGUgY3VycmVudCBjdXJyZW50LmFjdGl2ZS5cclxuXHQgKiBTZWxlY3RzIHRoZSBmaXJzdCBpdGVtIGlmIGxvb3BhYmxlIGFuZCBubyBjdXJyZW50LmFjdGl2ZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBib29sfGZ1bmN0aW9uXHRsb29wXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWR9RXZlbnRcclxuXHQgKi9cclxuXHRzZWxlY3ROZXh0KGxvb3AgPSBmYWxzZSkge1xyXG5cdFx0dmFyIGZvbGxvd2luZywgaXRlbXMgPSB0aGlzLmdldEl0ZW1zQXJyYXkoKTtcclxuXHRcdGlmIChfaXNFbXB0eShpdGVtcykpIHtcclxuXHRcdFx0aWYgKF9pc0Z1bmN0aW9uKGxvb3ApKSB7XHJcblx0XHRcdFx0bG9vcCgpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdGlmICh0aGlzLmN1cnJlbnQuYWN0aXZlKSB7XHJcblx0XHRcdGZvbGxvd2luZyA9IF9mb2xsb3dpbmcoaXRlbXMsIHRoaXMuY3VycmVudC5hY3RpdmUsIGZhbHNlLypsZW5ndGgqLywgbG9vcCk7XHJcblx0XHR9IGVsc2UgaWYgKGxvb3AgJiYgKCFfaXNGdW5jdGlvbihsb29wKSB8fCBsb29wKDApKSkge1xyXG5cdFx0XHRmb2xsb3dpbmcgPSBfYXJyRmlyc3QoaXRlbXMpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGZvbGxvd2luZykge1xyXG5cdFx0XHRyZXR1cm4gZm9sbG93aW5nLnNldEFjdGl2ZVN0YXRlKHRydWUpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQWR2YW5jZXMgdGhlIGxpc3QncyBzZWxlY3RlZG5lc3MgdG8gYSByYW5kb20gaXRlbS5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZH1FdmVudFxyXG5cdCAqL1xyXG5cdHNlbGVjdFJhbmQoKSB7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBBZHZhbmNlcyB0aGUgbGlzdCdzIHNlbGVjdGVkbmVzcyB0byBhIGl0ZW0uXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG9iamVjdFxyXG5cdCAqL1xyXG5cdGZpbHRlcigpIHtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEFkdmFuY2VzIHRoZSBsaXN0J3Mgc2VsZWN0ZWRuZXNzIHRvIGEgaXRlbS5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gb2JqZWN0XHJcblx0ICovXHJcblx0c29ydCgpIHtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQ3JlYXRlcyBlbnRyaWVzIGZyb20gZGVjbGFyYXRpb25zLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdHxhcnJheVx0XHRcdGVudHJpZXNcclxuXHQgKiBAcGFyYW0gb2JqZWN0fGZ1bmN0aW9uXHRcdGVudHJ5Q2xhc3NcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gb2JqZWN0fGFycmF5XHJcblx0ICovXHJcblx0c3RhdGljIGNyZWF0ZUVudHJpZXMoZW50cmllcywgZW50cnlDbGFzcyA9IEl0ZW0pIHtcclxuXHRcdHZhciBfZW50cmllcyA9IF9pc0FycmF5KGVudHJpZXMpID8gW10gOiB7fTtcclxuXHRcdF9lYWNoKGVudHJpZXMsIChuYW1lLCBlbnRyeSkgPT4ge1xyXG5cdFx0XHRlbnRyeSA9IGVudHJ5IGluc3RhbmNlb2YgZW50cnlDbGFzcyA/IGVudHJ5XHJcblx0XHRcdFx0OiAoX2lzQ2xhc3MoZW50cnlDbGFzcykgPyBuZXcgZW50cnlDbGFzcyhlbnRyeSlcclxuXHRcdFx0XHRcdDogKF9pc0Z1bmN0aW9uKGVudHJ5Q2xhc3MpID8gZW50cnlDbGFzcyhlbnRyeSkgXHJcblx0XHRcdFx0XHRcdDogZW50cnkpKTtcclxuXHRcdFx0UmVmbGV4LnNldChfZW50cmllcywgbmFtZSwgZW50cnkpO1xyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gX2VudHJpZXM7XHJcblx0fVxyXG59OyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBSZWZsZXggZnJvbSAnQHdlYi1uYXRpdmUtanMvcmVmbGV4JztcclxuaW1wb3J0IF9lYWNoIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2VhY2guanMnO1xyXG5pbXBvcnQgX3JlbW92ZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9yZW1vdmUuanMnO1xyXG5pbXBvcnQgX3B1c2hVbmlxdWUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvcHVzaFVuaXF1ZS5qcyc7XHJcbmltcG9ydCBfdW5pcXVlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3VuaXF1ZS5qcyc7XHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX3dyYXBwZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvd3JhcHBlZC5qcyc7XHJcbmltcG9ydCBfdW53cmFwIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3Vud3JhcC5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBMaXN0IGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuXHRcdFx0XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuXHJcblx0LyoqXHJcblx0ICogQ29uc3RpdHV0ZXMgdGhlIHRoaXMgY29udGV4dCBmb3Igc3ViY2xhc3Nlcy5cclxuXHQgKiBBZGRzIGl0ZW1zIHRvIHRoZSBjb2xsZWN0aW9uLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHRcdFx0aXRlbXNcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdFx0XHRwYXJhbXNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGl0ZW1zID0ge30sIHBhcmFtcyA9IHt9KSB7XHJcblx0XHR0aGlzLnBhcmFtcyA9IHBhcmFtcztcclxuXHRcdGlmICghdGhpcy5wYXJhbXMuaXRlbXNPZmZzZXQpIHtcclxuXHRcdFx0dGhpcy5wYXJhbXMuaXRlbXNPZmZzZXQgPSAnZW50cmllcyc7XHJcblx0XHR9XHJcblx0XHR0aGlzLmZpbGwoaXRlbXMpO1xyXG5cdFx0Ly8gUmVjb3JkIHNhdGVzXHJcblx0XHRSZWZsZXguc2V0KHRoaXMsICdjdXJyZW50Jywge30pO1xyXG5cdFx0X3VuaXF1ZShwYXJhbXMudGFrZVN0YXRzIHx8IFtdKS5mb3JFYWNoKHN0YXRlTmFtZSA9PiB7XHJcblx0XHRcdHZhciBpc011bHRpcGxlO1xyXG5cdFx0XHRpZiAoX3dyYXBwZWQoc3RhdGVOYW1lLCAnWycsICddJykpIHtcclxuXHRcdFx0XHRpc011bHRpcGxlID0gdHJ1ZTtcclxuXHRcdFx0XHRzdGF0ZU5hbWUgPSBfdW53cmFwKHN0YXRlTmFtZSwgJ1snLCAnXScpO1xyXG5cdFx0XHRcdC8vIEluaXRpYWxpemUgdGhlIHNwZWNpZmljIGNvbGxhdGlvblxyXG5cdFx0XHRcdHRoaXMuY3VycmVudFtzdGF0ZU5hbWVdID0gW107XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gT2JzZXJ2ZSB0aGUgc2F0ZVxyXG5cdFx0XHR2YXIgcGF0aFRvU3RhdGUgPSB0aGlzLnBhcmFtcy5pdGVtc09mZnNldCArICcuLicgKyBzdGF0ZU5hbWU7XHJcblx0XHRcdFJlZmxleC5vYnNlcnZlKHRoaXMsIHBhdGhUb1N0YXRlLCAoc3RhdGUsIF9zdGF0ZSwgZSkgPT4ge1xyXG5cdFx0XHRcdGlmIChzdGF0ZSA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdFx0aWYgKGlzTXVsdGlwbGUpIHtcclxuXHRcdFx0XHRcdFx0Ly8gQWRkIHRvIGEgY29sbGVjdGlvbj9cclxuXHRcdFx0XHRcdFx0X3B1c2hVbmlxdWUodGhpcy5jdXJyZW50W3N0YXRlTmFtZV0sIGUub3JpZ2luYXRpbmdUYXJnZXQpO1xyXG5cdFx0XHRcdFx0XHRSZWZsZXguc2V0KHRoaXMuY3VycmVudCwgc3RhdGVOYW1lLCB0aGlzLmN1cnJlbnRbc3RhdGVOYW1lXSk7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRSZWZsZXguc2V0KHRoaXMuY3VycmVudCwgc3RhdGVOYW1lLCBlLm9yaWdpbmF0aW5nVGFyZ2V0KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2UgaWYgKHN0YXRlID09PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0aWYgKGlzTXVsdGlwbGUpIHtcclxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGZyb20gYSBjb2xsZWN0aW9uP1xyXG5cdFx0XHRcdFx0XHRfcmVtb3ZlKHRoaXMuY3VycmVudFtzdGF0ZU5hbWVdLCBlLm9yaWdpbmF0aW5nVGFyZ2V0KTtcclxuXHRcdFx0XHRcdFx0UmVmbGV4LnNldCh0aGlzLmN1cnJlbnQsIHN0YXRlTmFtZSwgdGhpcy5jdXJyZW50W3N0YXRlTmFtZV0pO1xyXG5cdFx0XHRcdFx0fSBlbHNlIGlmICh0aGlzLmN1cnJlbnRbc3RhdGVOYW1lXSA9PT0gZS5vcmlnaW5hdGluZ1RhcmdldCkge1xyXG5cdFx0XHRcdFx0XHRSZWZsZXguZGVsKHRoaXMuY3VycmVudCwgc3RhdGVOYW1lKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBGaWxscyB0aGUgY29sbGVjdGlvbnMgd2l0aCBlbnRyaWVzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdHxhcnJheVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBvYmplY3RcclxuXHQgKi9cclxuXHRmaWxsKGVudHJpZXMpIHtcclxuXHRcdF9lYWNoKGVudHJpZXMsIChrZXksIHZhbHVlKSA9PiB7XHJcblx0XHRcdFJlZmxleC5zZXQodGhpcywga2V5LCB2YWx1ZSk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJldHVybnMgdGhlIGxpc3Qgb2YgaXRlbXMgY2FzdCB0byBhcnJheS5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYXJyYXlcclxuXHQgKi9cclxuXHRnZXRJdGVtc0FycmF5KCkge1xyXG5cdFx0dmFyIGl0ZW1zID0gdGhpc1t0aGlzLnBhcmFtcy5pdGVtc09mZnNldF07XHJcblx0XHRyZXR1cm4gX2lzQXJyYXkoaXRlbXMpID8gaXRlbXMgOiAoaXRlbXMgPyBPYmplY3QudmFsdWVzKGl0ZW1zKSA6IFtdKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEFkdmFuY2VzIHRoZSBsaXN0J3Mgc2VsZWN0ZWRuZXNzIHRvIGEgaXRlbS5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gb2JqZWN0XHJcblx0ICovXHJcblx0ZmlsdGVyKCkge1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQWR2YW5jZXMgdGhlIGxpc3QncyBzZWxlY3RlZG5lc3MgdG8gYSBpdGVtLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBvYmplY3RcclxuXHQgKi9cclxuXHRzb3J0KCkge1xyXG5cdH1cclxufTsiLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHRoZSBzdHJpbmcgaXMgd2FyYXBwZWQgd2l0aCB0aGUgZ2l2ZW4gb3BlbmluZyBhbmQgY2xvc2luZyB0YWdzLlxyXG4gKlxyXG4gKiBAcGFyYW0gIHN0cmluZyAgc3ViamVjdFxyXG4gKiBAcGFyYW0gIHN0cmluZyAgb3BlbmluZ1RhZ1xyXG4gKiBAcGFyYW0gIHN0cmluZyAgY2xvc2luZ1RhZ1xyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN1YmplY3QsIG9wZW5pbmdUYWcsIGNsb3NpbmdUYWcpIHtcclxuXHRyZXR1cm4gc3ViamVjdC5zdGFydHNXaXRoKG9wZW5pbmdUYWcpICYmIHN1YmplY3QuZW5kc1dpdGgoY2xvc2luZ1RhZyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnLi4vanMvaXNVbmRlZmluZWQuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnLi4vanMvaXNGdW5jdGlvbi5qcyc7XHJcblxyXG4vKipcclxuICogMS4gUmV0dXJucyB0aGUgRU5UUlkgcHJlY2VkaW5nIChlaXRoZXIgdGhlIEZJUlNUIG9yIHRoZSBMQVNUIGluc3RhbmNlIG9mKSB0aGUgcmVmZXJlbmNlLlxyXG4gKiAyLiBSZXR1cm5zIEEgTlVNQkVSIE9GIEVOVFJJRVMgY291bnRpbmcgYmFja3dhcmRzIGZyb20gKGVpdGhlciB0aGUgRklSU1Qgb3IgdGhlIExBU1QgaW5zdGFuY2Ugb2YpIHRoZSBnaXZlbiByZWZlcmVuY2UuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheSBcdFx0YXJyXHJcbiAqIEBwYXJhbSBtaXhlZFx0IFx0XHRyZWZlcmVuY2VcclxuICogQHBhcmFtIGludHxib29sIFx0XHRsZW5ndGhcclxuICogQHBhcmFtIGJvb2x8ZnVuY3Rpb25cdGxvb3BcclxuICogQHBhcmFtIGJvb2xcdCBcdFx0bGFzdFJlZmVyZW5jZVxyXG4gKlxyXG4gKiBAcmV0dXJuIG1peGVkfGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIHJlZmVyZW5jZSwgbGVuZ3RoID0gZmFsc2UsIGxvb3AgPSBmYWxzZSwgbGFzdFJlZmVyZW5jZSA9IGZhbHNlKSB7XHJcblx0aWYgKGFyci5pbmRleE9mKHJlZmVyZW5jZSkgPT09IC0xKSB7XHJcblx0XHRyZXR1cm4gbGVuZ3RoID8gW10gOiB1bmRlZmluZWQ7XHJcblx0fVxyXG5cdHZhciBhbW91bnQgPSBsZW5ndGggPT09IHRydWUgPyBhcnIubGVuZ3RoIC0gMSA6IChsZW5ndGggPT09IGZhbHNlID8gMSA6IGxlbmd0aCk7XHJcblx0dmFyIGFyciA9IGFyci5zbGljZSgpLnJldmVyc2UoKTtcclxuXHR2YXIgZnJvbSA9IGxhc3RSZWZlcmVuY2UgPyBhcnIubGFzdEluZGV4T2YocmVmZXJlbmNlKSArIDEgOiBhcnIuaW5kZXhPZihyZWZlcmVuY2UpICsgMTtcclxuXHR2YXIgYmVmb3JlID0gIV9pc1VuZGVmaW5lZChyZWZlcmVuY2UpID8gYXJyLnNsaWNlKGZyb20sIGZyb20gKyBhbW91bnQpIDogW107XHJcblx0aWYgKGxvb3AgJiYgYmVmb3JlLmxlbmd0aCA8IGFtb3VudCAmJiBiZWZvcmUubGVuZ3RoIDwgYXJyLmxlbmd0aCkge1xyXG5cdFx0aWYgKCFfaXNGdW5jdGlvbihsb29wKSB8fCBsb29wKGFtb3VudCAtIGJlZm9yZS5sZW5ndGgpKSB7XHJcblx0XHRcdGJlZm9yZSA9IGJlZm9yZS5jb25jYXQoYXJyLnNsaWNlKDAsIGFtb3VudCAtIGJlZm9yZS5sZW5ndGgpKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cdHJldHVybiBsZW5ndGggPyBiZWZvcmUgOiBiZWZvcmVbMF07XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNDbGFzcyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQ2xhc3MuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9pbnRlcnNlY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvaW50ZXJzZWN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIFJlZ2lzdHJ5IGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKlxyXG4gKiBUaGlzIGNsYXNzIHByb3ZpZGVzIHdpbmRvdy1saWtlIGZ1bmN0aW9uYWxpdHkgYXMgYSBjb21wb25lbnQuXHJcbiAqL1xyXG5cdFx0XHRcclxuZXhwb3J0IGRlZmF1bHQge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFJlZ2lzdGVycyBhIGxvZ2ljYWwgY29tcG9uZW50LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZ1x0XHRcdFx0bmFtZVxyXG5cdCAqIEBwYXJhbSBDb21wb25lbnR8ZnVuY3Rpb25cdGNvbXBvbmVudFxyXG5cdCAqIEBwYXJhbSBib29sfHN0cmluZ1x0XHRcdHNpbmdsZXRvblxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0cmVnaXN0ZXIobmFtZSwgY29tcG9uZW50LCBzaW5nbGV0b24gPSBmYWxzZSkge1xyXG5cdFx0cmVnaXN0cnlbbmFtZV0gPSB7Y29tcG9uZW50LCBzaW5nbGV0b259O1xyXG5cdH0sXHJcblxyXG5cdC8qKlxyXG5cdCAqIEZpbmRzIGFuZCBpbnN0YW50aWF0ZXMgYSByZWdpc3RlcmVkIGNvbXBvbmVudC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmdcdFx0XHRcdG5hbWVcclxuXHQgKiBAcGFyYW0gYXJyYXlcdFx0XHRcdFx0Li4uYXJnc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiBDb21wb25lbnRcclxuXHQgKi9cclxuXHRjcmVhdGUobmFtZSwgLi4uYXJncykge1xyXG5cdFx0dmFyIGNvbnN0cnV0b3IsIGluc3RhbmNlO1xyXG5cdFx0aWYgKGNvbnN0cnV0b3IgPSByZWdpc3RyeVtuYW1lXSkge1xyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0aWYgKGNvbnN0cnV0b3Iuc2luZ2xldG9uSW5zdGFuY2UpIHtcclxuXHRcdFx0XHRyZXR1cm4gY29uc3RydXRvci5zaW5nbGV0b25JbnN0YW5jZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoY29uc3RydXRvci5zaW5nbGV0b24gPT09ICdhdXRvJyAmJiBjb25zdHJ1dG9yLnNpbmdsZXRvbkluc3RhbmNlcykge1xyXG5cdFx0XHRcdHZhciBpbnN0ID0gY29uc3RydXRvci5zaW5nbGV0b25JbnN0YW5jZXMuZmlsdGVyKGluc3QgPT4ge1xyXG5cdFx0XHRcdFx0cmV0dXJuIF9pbnRlcnNlY3QoYXJncywgaW5zdC5hcmdzKS5sZW5ndGggPT09IGFyZ3MubGVuZ3RoXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0aWYgKGluc3QubGVuZ3RoID09PSAxKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gaW5zdFswXS5pbnN0YW5jZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdGlmIChfaXNDbGFzcyhjb25zdHJ1dG9yLmNvbXBvbmVudCkpIHtcclxuXHRcdFx0XHRpbnN0YW5jZSA9IG5ldyBjb25zdHJ1dG9yLmNvbXBvbmVudCguLi5hcmdzKTtcclxuXHRcdFx0fSBlbHNlIGlmIChfaXNGdW5jdGlvbihjb25zdHJ1dG9yLmNvbXBvbmVudCkpIHtcclxuXHRcdFx0XHRpbnN0YW5jZSA9IGNvbnN0cnV0b3IuY29tcG9uZW50KC4uLmFyZ3MpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGluc3RhbmNlID0gY29uc3RydXRvci5jb21wb25lbnQ7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdGlmIChjb25zdHJ1dG9yLnNpbmdsZXRvbiA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdGNvbnN0cnV0b3Iuc2luZ2xldG9uSW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuXHRcdFx0fSBlbHNlIGlmIChjb25zdHJ1dG9yLnNpbmdsZXRvbiA9PT0gJ2F1dG8nKSB7XHJcblx0XHRcdFx0Y29uc3RydXRvci5zaW5nbGV0b25JbnN0YW5jZXMgPSBjb25zdHJ1dG9yLnNpbmdsZXRvbkluc3RhbmNlcyB8fCBbXTtcclxuXHRcdFx0XHRjb25zdHJ1dG9yLnNpbmdsZXRvbkluc3RhbmNlcy5wdXNoKHtcclxuXHRcdFx0XHRcdGluc3RhbmNlLFxyXG5cdFx0XHRcdFx0YXJncyxcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0cmV0dXJuIGluc3RhbmNlO1xyXG5cdFx0fVxyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdUaGUgXCInICsgbmFtZSArICdcIiBjb21wb25lbnQgaXMgbm90IGRlZmluZWQgaW4gcmVnaXN0cnkhJyk7XHJcblx0fSxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHJcbiAqL1xyXG5jb25zdCByZWdpc3RyeSA9IHt9O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgUmVmbGV4IGZyb20gJ0B3ZWItbmF0aXZlLWpzL3JlZmxleCc7XHJcbmltcG9ydCBfZWFjaCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9lYWNoLmpzJztcclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNOdWxsIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNOdWxsLmpzJztcclxuaW1wb3J0IF9pc051bWVyaWMgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bWVyaWMuanMnO1xyXG5pbXBvcnQgX21peGluIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvbWl4aW4uanMnO1xyXG5pbXBvcnQgUmVnaXN0cnkgZnJvbSAnLi4vUmVnaXN0cnkuanMnO1xyXG5pbXBvcnQgQ29sbGVjdGlvbiBmcm9tICcuLi9Db2xsZWN0aW9uLmpzJztcclxuaW1wb3J0IEl0ZW0gZnJvbSAnLi4vSXRlbS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBSb3V0ZSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICpcclxuICogVGhpcyBjbGFzcyByZXByZXNlbnRzIGEgZ2l2ZW4gcm91dGUgYW5kIG1hbmFnZXNcclxuICogaXRzIHN1Yi1yb3V0ZS5cclxuICovXHJcblx0XHRcdFxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb3V0ZSBleHRlbmRzIF9taXhpbihJdGVtLCBDb2xsZWN0aW9uKSB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgUm91dGUgaW5zdGFuY2UuXHJcblx0ICogU3ViLXZpZXdzIG1heSBhbHNvIGJlIGxpc3RlZC5cclxuXHQgKlxyXG5cdCAqIEl0cyBjb250ZW50IGNvdWxkIGVpdGhlciBiZSBzdGF0aWMgb3IgcmVtb3RlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHRcdFx0c3RhdGVcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdFx0XHRwYXJhbXNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGl0ZW1zID0ge30sIHBhcmFtcyA9IHt9KSB7XHJcblx0XHRwYXJhbXMuaXRlbXNPZmZzZXQgPSAnc3Vicm91dGVzJztcclxuXHRcdHN1cGVyKGl0ZW1zLCBwYXJhbXMpO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdC8vIE9ic2VydmUgdGhlIFJvdXRlJ3Mgcm91dGUtc2xvdFxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFJlZmxleC5vYnNlcnZlKHRoaXMsICdhY3RpdmUnLCBhY3RpdmVTdGF0ZSA9PiB7XHJcblx0XHRcdGlmIChhY3RpdmVTdGF0ZSA9PT0gdHJ1ZSAmJiB0aGlzLmFjdGl2ZUNhbGxiYWNrKSB7XHJcblx0XHRcdFx0dGhpcy5hY3RpdmVDYWxsYmFjaygpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0aWYgKHRoaXMuaW5pdENhbGxiYWNrKSB7XHJcblx0XHRcdHRoaXMuaW5pdENhbGxiYWNrKCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBCaW5kcyBzdWJyb3V0ZXMgdG8gYSByb3V0ZSBwYXRoIHNsb3QuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gaW50fGFycmF5XHRcdFx0c3Vicm91dGluZ0tleXNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cclxuXHRyb3V0ZShzdWJyb3V0aW5nS2V5cyA9IG51bGwpIHtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdHZhciBzdWJyb3V0aW5nS2V5LCBzdWJyb3V0aW5nS2V5Rm9yd2FyZDtcclxuXHRcdGlmIChfaXNBcnJheShzdWJyb3V0aW5nS2V5cykpIHtcclxuXHRcdFx0c3Vicm91dGluZ0tleSA9IHN1YnJvdXRpbmdLZXlzLnNoaWZ0KCk7XHJcblx0XHRcdHN1YnJvdXRpbmdLZXlGb3J3YXJkID0gc3Vicm91dGluZ0tleXM7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRzdWJyb3V0aW5nS2V5ID0gc3Vicm91dGluZ0tleXM7XHJcblx0XHRcdHN1YnJvdXRpbmdLZXlGb3J3YXJkID0gX2lzTnVtZXJpYyhzdWJyb3V0aW5nS2V5KSBcclxuXHRcdFx0XHQ/IHBhcnNlSW50KHN1YnJvdXRpbmdLZXlzKSArIDEgXHJcblx0XHRcdFx0OiBudWxsO1xyXG5cdFx0fVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0dmFyIHJvdXRlckluc3RhbmNlID0gUmVnaXN0cnkuY3JlYXRlKCdSb3V0ZXInKTtcclxuXHRcdHZhciBzdWJyb3V0aW5nS2V5VHlwZSA9ICdwYXRobWFwJztcclxuXHRcdGlmIChfaXNOdW1lcmljKHN1YnJvdXRpbmdLZXkpKSB7XHJcblx0XHRcdHN1YnJvdXRpbmdLZXkgPSBwYXJzZUludChzdWJyb3V0aW5nS2V5KTtcclxuXHRcdFx0c3Vicm91dGluZ0tleVR5cGUgPSAncGF0aHNwbGl0JztcclxuXHRcdH1cclxuXHRcdHZhciByb3V0ZSA9IHBhdGggPT4ge1xyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0aWYgKHRoaXMuYWN0aXZlIHx8IHRoaXMuYWN0aXZhdGluZykge1xyXG5cdFx0XHRcdHZhciBvd25QYXRoID0gW107XHJcblx0XHRcdFx0X2VhY2gocGF0aCwgKGtleSwgdmFsKSA9PiB7XHJcblx0XHRcdFx0XHRpZiAoa2V5ID09PSBzdWJyb3V0aW5nS2V5KSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdG93blBhdGgucHVzaCh2YWwpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFJlZmxleC5zZXQodGhpcywgJ293blBhdGgnLCBvd25QYXRoLmpvaW4oJy8nKSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0UmVmbGV4LmRlbCh0aGlzLCAnb3duUGF0aCcpO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHR2YXIgc3Vicm91dGluZ0tleVZhbCA9IHBhdGhbc3Vicm91dGluZ0tleV07XHJcblx0XHRcdGlmICgodGhpcy5hY3RpdmUgfHwgdGhpcy5hY3RpdmF0aW5nKSAmJiB0aGlzLnN1YnJvdXRlcyAmJiBzdWJyb3V0aW5nS2V5VmFsKSB7XHJcblx0XHRcdFx0aWYgKHRoaXMuc3Vicm91dGVzW3N1YnJvdXRpbmdLZXlWYWxdKSB7XHJcblx0XHRcdFx0XHRpZiAoIXRoaXMuc3Vicm91dGVzW3N1YnJvdXRpbmdLZXlWYWxdLmFjdGl2ZSAmJiAhdGhpcy5zdWJyb3V0ZXNbc3Vicm91dGluZ0tleVZhbF0uYWN0aXZhdGluZykge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5zdWJyb3V0ZXNbc3Vicm91dGluZ0tleVZhbF0uc2V0QWN0aXZlU3RhdGUodHJ1ZSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBlbHNlIGlmICghX2lzTnVsbChzdWJyb3V0aW5nS2V5cykpIHtcclxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignNDA0OiAnICsgc3Vicm91dGluZ0tleVZhbCwgdGhpcy5zdWJyb3V0aW5nS2V5KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5jdXJyZW50LmFjdGl2ZSkge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmN1cnJlbnQuYWN0aXZlLnNldEFjdGl2ZVN0YXRlKGZhbHNlKTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdH07XHJcblx0XHRyb3V0ZShyb3V0ZXJJbnN0YW5jZVtzdWJyb3V0aW5nS2V5VHlwZV0pO1xyXG5cdFx0UmVmbGV4Lm9ic2VydmUocm91dGVySW5zdGFuY2UsIHN1YnJvdXRpbmdLZXlUeXBlLCByb3V0ZSk7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHR0aGlzLmdldEl0ZW1zQXJyYXkoKS5mb3JFYWNoKHJvdXRlID0+IHJvdXRlLnJvdXRlKHN1YnJvdXRpbmdLZXlGb3J3YXJkKSk7XHJcblxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlcyBSb3V0ZXMgZnJvbSBkZWNsYXJhdGlvbnMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gb2JqZWN0fGFycmF5XHRcdFx0cm91dGVzXHJcblx0ICogQHBhcmFtIG9iamVjdHxmdW5jdGlvblx0XHRyb3V0ZUNsYXNzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG9iamVjdHxhcnJheVxyXG5cdCAqL1xyXG5cdHN0YXRpYyBjcmVhdGVSb3V0ZXMocm91dGVzLCByb3V0ZUNsYXNzID0gUm91dGUpIHtcclxuXHRcdHJldHVybiBzdXBlci5jcmVhdGVFbnRyaWVzKHJvdXRlcywgcm91dGVDbGFzcyk7XHJcblx0fVxyXG59OyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9hcnJMYXN0IGZyb20gJy4uL2Fyci9sYXN0LmpzJztcclxuaW1wb3J0IF9tZXJnZUNhbGxiYWNrIGZyb20gJy4uL29iai9tZXJnZUNhbGxiYWNrLmpzJztcclxuaW1wb3J0IF9lYWNoIGZyb20gJy4uL29iai9lYWNoLmpzJztcclxuXHJcbi8qKlxyXG4gKiBBIG11bHRpLWluaGVyaXRhbmNlIGltcGxlbWVudHN0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXlcdCBcdC4uLmNsYXNzZXNcclxuICpcclxuICogQHJldHVybiBvYmplY3RcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKC4uLmNsYXNzZXMpIHtcclxuXHRcclxuXHR2YXIgVHJhcHMgPSB7fTtcclxuXHR2YXIgUmV0cm5EaXJlY3RpdmUgPSAnbGFzdCc7XHJcblx0aWYgKF9pc0FycmF5KGFyZ3VtZW50c1swXSkpIHtcclxuXHRcdGNsYXNzZXMgPSBhcmd1bWVudHNbMF07XHJcblx0XHRUcmFwcyA9IGFyZ3VtZW50c1sxXTtcclxuXHRcdGlmIChhcmd1bWVudHNbMl0pIHtcclxuXHRcdFx0UmV0cm5EaXJlY3RpdmUgPSBhcmd1bWVudHNbMl07XHJcblx0XHR9XHJcblx0fVxyXG5cdHZhciBCYXNlID0gX2Fyckxhc3QoY2xhc3Nlcyk7XHJcblx0dmFyIHN1cGVyc01hcCA9IHt9O1xyXG5cdHZhciBNaXhpbiA9IGNsYXNzIGV4dGVuZHMgQmFzZSB7XHJcblx0XHRjb25zdHJ1Y3RvciguLi5hcmdzKSB7XHJcblx0XHRcdHN1cGVyKC4uLmFyZ3MpO1xyXG5cdFx0fVxyXG5cdH07XHJcblx0Ly8gQSB0cmFwIGZvciBfaW5zdGFuY2VvZigpXHJcblx0TWl4aW4ucHJvdG90eXBlcyA9IGNsYXNzZXM7XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0Ly8gRXh0ZW5kIChtZXJnZSkgcHJvcGVydGllcyBidXQga2VlcCBtZXRob2RzXHJcblx0Y2xhc3Nlcy5mb3JFYWNoKF9jbGFzcyA9PiB7XHJcblx0XHQvLyBDb3B5IGNvbnN0IG1lbWJlcnNcclxuXHRcdF9tZXJnZUNhbGxiYWNrKFtNaXhpbiwgX2NsYXNzXSwgKGtleSwgb2JqMSwgb2JqMikgPT4gWyduYW1lJywgJ3Byb3RvdHlwZScsICdwcm90b3R5cGVzJywgJ2xlbmd0aCddLmluZGV4T2Yoa2V5KSA9PT0gLTEpO1xyXG5cdFx0X21lcmdlQ2FsbGJhY2soW01peGluLnByb3RvdHlwZSwgX2NsYXNzLnByb3RvdHlwZV0sIChrZXksIG9iajEsIG9iajIpID0+IHtcclxuXHRcdFx0aWYgKFsncHJvdG90eXBlJywgJ3Byb3RvdHlwZXMnXS5pbmRleE9mKGtleSkgPT09IC0xKSB7XHJcblx0XHRcdFx0aWYgKF9pc0Z1bmN0aW9uKG9iajJba2V5XSkpIHtcclxuXHRcdFx0XHRcdGlmIChfaXNBcnJheShzdXBlcnNNYXBba2V5XSkpIHtcclxuXHRcdFx0XHRcdFx0c3VwZXJzTWFwW2tleV0ucHVzaChvYmoyW2tleV0pO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0c3VwZXJzTWFwW2tleV0gPSBbb2JqMltrZXldXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0fSwgdHJ1ZS8qZGVlcFByb3BzKi8pO1xyXG5cdH0pO1xyXG5cdC8vIEV4dGVuZCAocHJveHkpIG1ldGhvZHNcclxuXHRfZWFjaChzdXBlcnNNYXAsIChuYW1lLCBzdXBlcnMpID0+IHtcclxuXHRcdGlmIChuYW1lID09PSAnY29uc3RydWN0b3InKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdC8vIE5PVEU6IHRoaXMgbXVzdCBub3QgYmUgZGVmaW5lZCBhcyBhbiBhcnJvdyBmdW5jdGlvblxyXG5cdFx0Ly8gZm9yIHRoZSBiZW5lZml0IG9mIHRoZSBcInRoaXNcIi5cclxuXHRcdE1peGluLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcclxuXHRcdFx0aWYgKE9iamVjdC5oYXNPd25Qcm9wZXJ0eShUcmFwcywgbmFtZSkgJiYgX2lzRnVuY3Rpb24oVHJhcHNbbmFtZV0pKSB7XHJcblx0XHRcdFx0Ly8gV3JhcCBhIGNhbGwgdG8gdGhlIHRyYXAuLi5cclxuXHRcdFx0XHQvLyBTbyBtaXhpbiBzdXBlcnMgYXJlIHBhc3NlZCB0byB0cmFwc1xyXG5cdFx0XHRcdHJldHVybiBUcmFwc1tuYW1lXS5jYWxsKHRoaXMsIHN1cGVycywgLi4uYXJncyk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8gQ2FsbCBlYWNoIHN1cGVyIGFuZCByZXR1cm5cclxuXHRcdFx0XHQvLyB0aGUgbGFzdCBvbmUncyByZXR1cm4gdmFsdWVcclxuXHRcdFx0XHR2YXIgc3VwZXJzUmV0dXJuVmFsdWVzID0gW107XHJcblx0XHRcdFx0c3VwZXJzLmZvckVhY2goc3VwciA9PiB7XHJcblx0XHRcdFx0XHRzdXBlcnNSZXR1cm5WYWx1ZXMucHVzaChzdXByLmNhbGwodGhpcywgLi4uYXJncykpO1xyXG5cdFx0XHRcdH0pXHJcblx0XHRcdFx0cmV0dXJuIF9hcnJMYXN0KHN1cGVyc1JldHVyblZhbHVlcyk7XHJcblx0XHRcdH1cclxuXHRcdH07XHJcblx0fSk7XHJcblx0cmV0dXJuIE1peGluO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzU3RyaW5nIGZyb20gJy4uL2pzL2lzU3RyaW5nLmpzJztcclxuXHJcbi8qKlxyXG4gKiBTb3J0cyBhIGxpc3QgcGVyZm9ybWFudGx5LlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXlcdCBcdFx0XHRcdFx0YXJyXHJcbiAqIEBwYXJhbSBzdHJpbmdcdCBcdFx0XHRcdG9yZGVyXHRcdFx0QVNDfERFU0MgXHJcbiAqIEBwYXJhbSBmdW5jdGlvblx0XHRcdFx0XHRjYWxsYmFja1xyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIG9yZGVyLCBjYWxsYmFjayA9IG51bGwpIHtcclxuXHR2YXIgX2FyciA9IFtdO1xyXG5cdC8vIE1ha2UgYSBzaGFsbG93IGNvcHlcclxuXHR2YXIgbGVuZ3RoID0gYXJyLmxlbmd0aDtcclxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArKykge1xyXG5cdFx0X2Fyci5wdXNoKHtpbmRleDogaSwgdmFsdWU6IGNhbGxiYWNrID8gY2FsbGJhY2soYXJyW2ldKSA6IGFycltpXX0pO1xyXG5cdH07XHJcblx0X2Fyci5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcclxuXHRcdC8vIFVzaW5nIGxvY2FsZUNvbXBhcmUgaWYgcG9zc2libGVcclxuXHRcdGlmIChfaXNTdHJpbmcoYS52YWx1ZSkgJiYgXCJcIi5sb2NhbGVDb21wYXJlKSB7XHJcblx0XHRcdHJldHVybiBhLnZhbHVlLmxvY2FsZUNvbXBhcmUoYi52YWx1ZSk7XHJcblx0XHR9O1xyXG5cdFx0cmV0dXJuIGEudmFsdWUgPT09IGIudmFsdWUgPyAwIDogYS52YWx1ZSA+IGIudmFsdWUgPyAxIDogLTE7XHJcblx0fSk7XHJcblx0aWYgKChvcmRlciB8fCAnJykudHJpbSgpLnRvTG93ZXJDYXNlKCkgPT09ICdkZXNjJykge1xyXG5cdFx0X2FyciA9IF9hcnIucmV2ZXJzZSgpO1xyXG5cdH07XHJcblx0Ly8gRmlsbCB0aGUgb3JkZXIgd2l0aCBhY3R1YWwgdmFsdWVzXHJcblx0cmV0dXJuIF9hcnIubWFwKGl0bSA9PiBhcnJbaXRtLmluZGV4XSk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlIG9mIHR3byBhcnJheXM7XHJcbiAqIG9wdGlvbmFsbHkgdXNpbmcgYSBjdXN0b20gbWF0Y2hpbmcgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheSBcdGFyclxyXG4gKiBAcGFyYW0gYXJyYXlcdCBcdGFycjJcclxuICogQHBhcmFtIGZ1bmN0aW9uIFx0Y2FsbGJhY2tcclxuICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyLCBhcnIyLCBjYWxsYmFjayA9IG51bGwpIHtcclxuXHRyZXR1cm4gIV9pc0FycmF5KGFycjIpID8gW10gOiBhcnIuZmlsdGVyKHZhbDEgPT4gY2FsbGJhY2sgXHJcblx0XHQ/IGFycjIuZmlsdGVyKHZhbDIgPT4gY2FsbGJhY2sodmFsMSwgdmFsMikpLmxlbmd0aCBcclxuXHRcdDogYXJyMi5pbmRleE9mKHZhbDEpID09PSAtMVxyXG5cdCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnLi4vanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2Zyb20gZnJvbSAnLi9mcm9tLmpzJztcclxuaW1wb3J0IF9tZXJnZSBmcm9tICcuL21lcmdlLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gdGhlIGlucHV0IG9iamVjdCB3aXRoIGFkZGl0aW9uYWwgZW50cmllcy5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0XHRcdG9ialxyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF5IFx0XHRcdGVudHJpZXNPcktleVxyXG4gKiBAcGFyYW0gbWl4ZWR8YXJyYXlcdFx0XHR2YWwgXHJcbiAqXHJcbiAqIEByZXR1cm4gb2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmosIGVudHJpZXNPcktleSwgdmFsID0gbnVsbCkge1xyXG5cdHJldHVybiBfbWVyZ2Uob2JqLCBfaXNPYmplY3QoZW50cmllc09yS2V5KSA/IGVudHJpZXNPcktleSA6IF9mcm9tKGVudHJpZXNPcktleSwgdmFsKSk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogRW52aXJvbm1lbnRhbFxyXG4gKiB2YXJpYWJsZXNcclxuICovXHJcbmNvbnN0IEVOViA9IHtcclxuXHRwYXJhbXM6IHtcclxuXHRcdHBhdGhuYW1pbmc6IHtcclxuXHRcdFx0Jy8nOiBbJ25hbWUnLCAnaWQnLF0sXHJcblx0XHR9LFxyXG5cdH0sXHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IEVOVjsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgUmVmbGV4IGZyb20gJ0B3ZWItbmF0aXZlLWpzL3JlZmxleCc7XHJcbmltcG9ydCBfc29ydCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9zb3J0LmpzJztcclxuaW1wb3J0IF9hcnJGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Zyb20uanMnO1xyXG5pbXBvcnQgX2RpZmZlcmVuY2UgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZGlmZmVyZW5jZS5qcyc7XHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzU3RyaW5nIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNTdHJpbmcuanMnO1xyXG5pbXBvcnQgX2lzRW1wdHkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0VtcHR5LmpzJztcclxuaW1wb3J0IF9jb3B5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2NvcHkuanMnO1xyXG5pbXBvcnQgX3dpdGggZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovd2l0aC5qcyc7XHJcbmltcG9ydCBFTlYgZnJvbSAnLi4vRU5WLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIFJvdXRlciBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICpcclxuICogVGhpcyBjbGFzcyBwcm92aWRlcyBhZGRpdGlvbmFsIGZ1bmN0aW9uYWxpdHkgb3ZlclxyXG4gKiB0aGUgbmF0aXZlIHdpbmRvdy5kb2N1bWVudC5oaXN0b3J5IG9iamVjdCBhbmQgdGhlIFwib25wb3BzdGF0ZVwiIGV2ZW50LlxyXG4gKi9cclxuXHRcdFx0XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvdXRlciB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgUm91dGVyIGluc3RhbmNlLiBUeXBpY2FsbHksXHJcblx0ICogb25seSBvbmUgaW5zdGFuY2Ugd291bGQgYmUgbmVlZGVkIGFwcC13aWRlLiBTbyBhbiBzaG91bGRcclxuXHQgKiBiZSB1c2VkIGFzIGEgc2luZ2xldG9uLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gSGVscGVyc1xyXG5cdFx0dmFyIGdldFByb3BzID0gKHVybE9iaiwgc3RhdGUgPSBudWxsKSA9PiB7XHJcblx0XHRcdHVybE9iaiA9IF9jb3B5KHVybE9iaiwgdXJsUHJvcGVydGllcywgZmFsc2UvKndpdGhTeW1ib2xzKi8pO1xyXG5cdFx0XHRyZXR1cm4gc3RhdGUgPyBfd2l0aCh1cmxPYmosICdzdGF0ZScsIHN0YXRlKSA6IHVybE9iajtcclxuXHRcdH07XHJcblx0XHR2YXIgX3N0cmljdEV2ZW4gPSAoYSwgYikgPT4ge1xyXG5cdFx0XHRpZiAoX2lzT2JqZWN0KGEpICYmIF9pc09iamVjdChiKSkge1xyXG5cdFx0XHRcdHJldHVybiBfc3RyaWN0RXZlbihPYmplY3Qua2V5cyhhKSwgT2JqZWN0LmtleXMoYikpIFxyXG5cdFx0XHRcdCYmIF9zdHJpY3RFdmVuKE9iamVjdC52YWx1ZXMoYSksIE9iamVjdC52YWx1ZXMoYikpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChfaXNBcnJheShhKSAmJiBfaXNBcnJheShiKSkge1xyXG5cdFx0XHRcdHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggXHJcblx0XHRcdFx0JiYgYS5yZWR1Y2UoKHJlY2lldmVkLCBpdGVtLCBpKSA9PiByZWNpZXZlZCAmJiBpdGVtID09PSBiW2ldLCB0cnVlKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gYSA9PT0gYjtcclxuXHRcdH07XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gU2V0dGluZyB0aGUgXCJocmVmXCIgcHJvcGVydGllcyBtdXN0IGFsc28gcHVibGlzaFxyXG5cdFx0Ly8gYWxsIHRoZSBvdGhlciBwcm9wZXJ0aWVzIGluIHVybFByb3BlcnRpZXNcclxuXHRcdFJlZmxleC50cmFwKHRoaXMsIChlLCByZWNpZXZlZCwgbmV4dCkgPT4ge1xyXG5cdFx0XHRpZiAoZS5xdWVyeSA9PT0gJ2hyZWYnICYmIF9kaWZmZXJlbmNlKHVybFByb3BlcnRpZXMsIGUucmVsYXRlZCkubGVuZ3RoKSB7XHJcblx0XHRcdFx0dmFyIHVybE9iaiA9IFJvdXRlci5wYXJzZVVybChlLnZhbHVlKTtcclxuXHRcdFx0XHRSZWZsZXguc2V0KHRoaXMsIHVybE9iaik7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBuZXh0KCk7XHJcblx0XHR9LCB7dHlwZTonc2V0J30pO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdC8vIFdoZW4gYW55IG9uZSBvZiB0aGVzZSBwcm9wZXJ0aWVzIGNoYW5nZSxcclxuXHRcdC8vIHRoZSBvdGhlcnMgYXJlIGF1dG9tYXRpY2FsbHkgZGVyaXZlZFxyXG5cdFx0UmVmbGV4Lm9ic2VydmUodGhpcywgWydzZWFyY2gnLCAnc2VhcmNobWFwJywgJ3BhdGhuYW1lJywgJ3BhdGhtYXAnLCAncGF0aHNwbGl0JywgJ2hyZWYnXSwgKHZhbHMsIF92YWxzLCBlKSA9PiB7XHJcblx0XHRcdHZhciBbc2VhcmNoLCBzZWFyY2htYXAsIHBhdGhuYW1lLCBwYXRobWFwLCBwYXRoc3BsaXQsIGhyZWZdID0gdmFscztcclxuXHRcdFx0dmFyIFtfc2VhcmNoLCBfc2VhcmNobWFwLCBfcGF0aG5hbWUsIF9wYXRobWFwLCBfcGF0aHNwbGl0LCBfaHJlZl0gPSBfdmFscztcclxuXHRcdFx0aWYgKGUub3JpZ2luYXRpbmdDcmVhdGVkICYmIGUub3JpZ2luYXRpbmdDcmVhdGVkLmluZGV4T2YoJ3NlYXJjaG1hcCcpID4gLTEpIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIHVybE9iaiA9IHt9O1xyXG5cdFx0XHQvLyAtLS0tLS0tLS0tXHJcblx0XHRcdHZhciBpc1NlYXJjaG1hcFNhbWUgPSAhZS5vcmlnaW5hdGluZ0ZpZWxkcy5maWx0ZXIoZiA9PiBmLnN0YXJ0c1dpdGgoJ3NlYXJjaG1hcC4nKSkubGVuZ3RoICYmIF9zdHJpY3RFdmVuKHNlYXJjaG1hcCwgX3NlYXJjaG1hcCk7XHJcblx0XHRcdGlmIChzZWFyY2ggPT09IF9zZWFyY2ggJiYgIWlzU2VhcmNobWFwU2FtZSkge1xyXG5cdFx0XHRcdC8vIFwic2VhcmNobWFwXCIgd2FzIHVwZGF0ZWQuIFNvIHdlIHVwZGF0ZSBcInNlYXJjaFwiXHJcblx0XHRcdFx0dXJsT2JqLnNlYXJjaCA9IFJvdXRlci50b1NlYXJjaChzZWFyY2htYXApO1xyXG5cdFx0XHRcdGlmICh1cmxPYmouc2VhcmNoID09PSB0aGlzLnNlYXJjaCkge1xyXG5cdFx0XHRcdFx0ZGVsZXRlIHVybE9iai5zZWFyY2g7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChzZWFyY2ggIT09IF9zZWFyY2ggJiYgaXNTZWFyY2htYXBTYW1lKSB7XHJcblx0XHRcdFx0Ly8gXCJzZWFyY2hcIiB3YXMgdXBkYXRlZC4gU28gd2UgdXBkYXRlIFwic2VhcmNobWFwXCJcclxuXHRcdFx0XHR1cmxPYmouc2VhcmNobWFwID0gUm91dGVyLnRvU2VhcmNobWFwKHNlYXJjaCk7XHJcblx0XHRcdFx0aWYgKF9zdHJpY3RFdmVuKHVybE9iai5zZWFyY2htYXAsIHRoaXMuc2VhcmNobWFwKSkge1xyXG5cdFx0XHRcdFx0ZGVsZXRlIHVybE9iai5zZWFyY2htYXA7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdC8vIC0tLS0tLS0tLS1cclxuXHRcdFx0dmFyIGlzUGF0aG1hcFNhbWUgPSAhZS5vcmlnaW5hdGluZ0ZpZWxkcy5maWx0ZXIoZiA9PiBmLnN0YXJ0c1dpdGgoJ3BhdGhtYXAuJykpLmxlbmd0aCAmJiBfc3RyaWN0RXZlbihwYXRobWFwLCBfcGF0aG1hcCk7XHJcblx0XHRcdHZhciBpc1BhdGhzcGxpdFNhbWUgPSAhZS5vcmlnaW5hdGluZ0ZpZWxkcy5maWx0ZXIoZiA9PiBmLnN0YXJ0c1dpdGgoJ3BhdGhzcGxpdC4nKSkubGVuZ3RoICYmIF9zdHJpY3RFdmVuKHBhdGhzcGxpdCwgX3BhdGhzcGxpdCk7XHJcblx0XHRcdGlmIChwYXRobmFtZSA9PT0gX3BhdGhuYW1lICYmICghaXNQYXRobWFwU2FtZSB8fCAhaXNQYXRoc3BsaXRTYW1lKSkge1xyXG5cdFx0XHRcdC8vIFdlIHVwZGF0ZSBcInBhdGhuYW1lXCIgZnJvbSB0aGUgbmV3IFwicGF0aG1hcFwiL1wicGF0aHNwbGl0XCJcclxuXHRcdFx0XHR1cmxPYmoucGF0aG5hbWUgPSBSb3V0ZXIudG9QYXRobmFtZSghaXNQYXRoc3BsaXRTYW1lID8gcGF0aHNwbGl0IDogcGF0aG1hcCwgdGhpcy5wYXRobmFtZS8qcmVmZXJlbmNlVXJsKi8pO1xyXG5cdFx0XHRcdGlmICh1cmxPYmoucGF0aG5hbWUgPT09IHRoaXMucGF0aG5hbWUpIHtcclxuXHRcdFx0XHRcdGRlbGV0ZSB1cmxPYmoucGF0aG5hbWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChpc1BhdGhtYXBTYW1lICYmIChwYXRobmFtZSAhPT0gX3BhdGhuYW1lIHx8ICFpc1BhdGhzcGxpdFNhbWUpKSB7XHJcblx0XHRcdFx0Ly8gV2UgdXBkYXRlIFwicGF0aG1hcFwiIGZyb20gdGhlIG5ldyBcInBhdGhuYW1lXCIvXCJwYXRoc3BsaXRcIlxyXG5cdFx0XHRcdHVybE9iai5wYXRobWFwID0gUm91dGVyLnRvUGF0aG1hcChwYXRobmFtZSAhPT0gX3BhdGhuYW1lID8gcGF0aG5hbWUgOiBwYXRoc3BsaXQpO1xyXG5cdFx0XHRcdGlmIChfc3RyaWN0RXZlbih1cmxPYmoucGF0aG1hcCwgdGhpcy5wYXRobWFwKSkge1xyXG5cdFx0XHRcdFx0ZGVsZXRlIHVybE9iai5wYXRobWFwO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoaXNQYXRoc3BsaXRTYW1lICYmIChwYXRobmFtZSAhPT0gX3BhdGhuYW1lIHx8ICFpc1BhdGhtYXBTYW1lKSkge1xyXG5cdFx0XHRcdC8vIFdlIHVwZGF0ZSBcInBhdGhzcGxpdFwiIGZyb20gdGhlIG5ldyBcInBhdGhuYW1lXCIvXCJwYXRobWFwXCJcclxuXHRcdFx0XHR1cmxPYmoucGF0aHNwbGl0ID0gUm91dGVyLnRvUGF0aHNwbGl0KHBhdGhuYW1lICE9PSBfcGF0aG5hbWUgPyBwYXRobmFtZSA6IHBhdGhtYXAsIHRoaXMucGF0aG5hbWUvKnJlZmVyZW5jZVVybCovKTtcclxuXHRcdFx0XHRpZiAoX3N0cmljdEV2ZW4odXJsT2JqLnBhdGhzcGxpdCwgdGhpcy5wYXRoc3BsaXQpKSB7XHJcblx0XHRcdFx0XHRkZWxldGUgdXJsT2JqLnBhdGhzcGxpdDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gLS0tLS0tLS0tLVxyXG5cdFx0XHRpZiAoaHJlZiA9PT0gX2hyZWYgJiYgIV9pc0VtcHR5KHVybE9iaikpIHtcclxuXHRcdFx0XHQvLyBXZSB1cGRhdGUgXCJocmVmXCIgZnJvbSB0aGUgbmV3IGNvbXBvbmVudCB2YWx1ZXNcclxuXHRcdFx0XHR1cmxPYmouaHJlZiA9IHRoaXMub3JpZ2luO1xyXG5cdFx0XHRcdHVybE9iai5ocmVmICs9IHVybE9iai5wYXRobmFtZS8qaWYgcGF0aG1hcCBvciBwYXRoc3BsaXQgd2FzIHRoZSBjaGFuZ2UqLyB8fCBwYXRobmFtZS8qd2hldGhlciBvciBub3QgcGF0aG5hbWUgd2FzIHRoZSBjaGFuZ2UqLztcclxuXHRcdFx0XHR1cmxPYmouaHJlZiArPSB1cmxPYmouc2VhcmNoLyppZiBzZWFyY2htYXAgd2FzIHRoZSBjaGFuZ2UqLyB8fCBzZWFyY2gvKndoZXRoZXIgb3Igbm90IHNlYXJjaCB3YXMgdGhlIGNoYW5nZSovIHx8ICcnO1xyXG5cdFx0XHRcdGlmICh1cmxPYmouaHJlZiA9PT0gdGhpcy5ocmVmKSB7XHJcblx0XHRcdFx0XHRkZWxldGUgdXJsT2JqLmhyZWY7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2UgaWYgKF9pc0VtcHR5KHVybE9iaikgJiYgaHJlZiAhPT0gX2hyZWYpIHtcclxuXHRcdFx0XHQvLyBXZSB1cGRhdGUgY29tcG9uZW50IHZhbHVlcyBmcm9tIHRoZSBuZXcgXCJocmVmXCJcclxuXHRcdFx0XHR1cmxPYmogPSBSb3V0ZXIucGFyc2VVcmwoaHJlZik7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCFfaXNFbXB0eSh1cmxPYmopKSB7XHJcblx0XHRcdFx0cmV0dXJuIFJlZmxleC5zZXQodGhpcywgdXJsT2JqLCB0cnVlLypyZXR1cm5FdmVudCovKTtcclxuXHRcdFx0fVxyXG5cdFx0fSwge29ic2VydmVEb3duOnRydWUvKmZvciBwYXRobWFwL3BhdGhzcGxpdC9zZWFyY2htYXAgdXBkYXRlcyovfSk7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gU3luZGljYXRlIGNoYW5nZXMgdG9cclxuXHRcdC8vIHRoZSBicm93c2VyO3MgbG9jYXRpb24gYmFyXHJcblx0XHRSZWZsZXgub2JzZXJ2ZSh0aGlzLCAnaHJlZicsIGhyZWYgPT4ge1xyXG5cdFx0XHRpZiAoaHJlZiA9PT0gd2luZG93LmRvY3VtZW50LmxvY2F0aW9uLmhyZWYpIHtcclxuXHRcdFx0XHR3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUodGhpcy5zdGF0ZSwgJycsIGhyZWYpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSh0aGlzLnN0YXRlLCAnJywgaHJlZik7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0UmVmbGV4Lm9ic2VydmUodGhpcywgJ2hhc2gnLCBoYXNoID0+IHtcclxuXHRcdH0pO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdC8vIFRoaXMgZXZlbnQgaXMgdHJpZ2dlcmVkIGJ5XHJcblx0XHQvLyBlaXRoZXIgdGhlIGJyb3dzZXIgYmFjayBidXR0b24sXHJcblx0XHQvLyB0aGUgd2luZG93Lmhpc3RvcnkuYmFjaygpLFxyXG5cdFx0Ly8gdGhlIHdpbmRvdy5oaXN0b3J5LmZvcndhcmQoKSxcclxuXHRcdC8vIG9yIHRoZSB3aW5kb3cuaGlzdG9yeS5nbygpIGFjdGlvbi5cclxuXHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGUgPT4ge1xyXG5cdFx0XHQvLyBOZWVkZWQgdG8gYWxvdyB3aW5kb3cuZG9jdW1lbnQubG9jYXRpb25cclxuXHRcdFx0Ly8gdG8gdXBkYXRlIHRvIHdpbmRvdy5sb2NhdGlvblxyXG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0UmVmbGV4LnNldCh0aGlzLCBnZXRQcm9wcyh3aW5kb3cuZG9jdW1lbnQubG9jYXRpb24sIHdpbmRvdy5oaXN0b3J5LnN0YXRlKSk7XHJcblx0XHRcdH0sIDApO1xyXG5cdFx0fSk7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0dmFyIHNjcm9sbCA9IChsZW5ndGgsIHNwZWVkID0gMTApID0+IHtcclxuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcblx0XHRcdFx0aWYgKGxlbmd0aCA+IDApIHtcclxuXHRcdFx0XHRcdHdpbmRvdy5zY3JvbGxCeSgwLCBzcGVlZCk7XHJcblx0XHRcdFx0XHRzY3JvbGwoTWF0aC5tYXgobGVuZ3RoIC0gc3BlZWQsIDApKTtcclxuXHRcdFx0XHR9IGVsc2UgaWYgKGxlbmd0aCA8IDApIHtcclxuXHRcdFx0XHRcdHdpbmRvdy5zY3JvbGxCeSgwLCAtIHNwZWVkKTtcclxuXHRcdFx0XHRcdHNjcm9sbChNYXRoLm1pbihsZW5ndGggKyBzcGVlZCwgMCkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9O1xyXG5cdFx0dmFyIHNjcm9sbFRvSGFzaCA9IGhhc2ggPT4gIHtcclxuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xyXG5cdFx0XHRcdHZhciB0YXJnZXQgPSBfYXJyRnJvbSh3aW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChoYXNoKSkuZmlsdGVyKHRhcmdldCA9PiB0YXJnZXQuc2Nyb2xsSGVpZ2h0KVswXTtcclxuXHRcdFx0XHRpZiAodGFyZ2V0KSB7XHJcblx0XHRcdFx0XHR2YXIgcmVjdCA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHRcdFx0XHRcdHNjcm9sbChyZWN0LnRvcCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LCAwKTtcclxuXHRcdH07XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gQ2FwdHVyZSBhbGwgbGluay1jbGlja3NcclxuXHRcdC8vIGFuZCBmaXJlIHRvIHRoaXMgcm91dGVyLlxyXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XHJcblx0XHRcdHZhciBhbmNob3IsIGhyZWYsIHRhcmdldDtcclxuXHRcdFx0aWYgKChhbmNob3IgPSBlLnRhcmdldC5jbG9zZXN0KCdhJykpIFxyXG5cdFx0XHQmJiAoaHJlZiA9IGFuY2hvci5ocmVmKVxyXG5cdFx0XHQmJiAoIWFuY2hvci5vcmlnaW4gfHwgYW5jaG9yLm9yaWdpbiA9PT0gdGhpcy5vcmlnaW4pKSB7XHJcblx0XHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdFx0XHRcdHZhciBlMiA9IHRoaXMucm91dGUoaHJlZiwgbnVsbCwgYW5jaG9yLmdldEF0dHJpYnV0ZSgndGFyZ2V0JykpO1xyXG5cdFx0XHRcdGlmIChhbmNob3IuaGFzaCkge1xyXG5cdFx0XHRcdFx0c2Nyb2xsVG9IYXNoKGFuY2hvci5oYXNoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKGUyICYmIGUyLmRlZmF1bHRQcmV2ZW50ZWQpIHtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdC8vIFN0YXJ0dXAgcHJvcGVydGllc1xyXG5cdFx0aWYgKCF0aGlzLmhyZWYpIHtcclxuXHRcdFx0Ly8gU3RhcnR1cCByb3V0ZVxyXG5cdFx0XHRSZWZsZXguc2V0KHRoaXMsIGdldFByb3BzKHdpbmRvdy5kb2N1bWVudC5sb2NhdGlvbikpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCF0aGlzLnN0YXRlICYmIHdpbmRvdy5oaXN0b3J5KSB7XHJcblx0XHRcdC8vIFN0YXJ0dXAgc3RhdGVcclxuXHRcdFx0UmVmbGV4LnNldCh0aGlzLCAnc3RhdGUnLCB3aW5kb3cuaGlzdG9yeS5zdGF0ZSk7XHJcblx0XHR9XHJcblx0XHRpZiAod2luZG93LmRvY3VtZW50LmxvY2F0aW9uLmhhc2gpIHtcclxuXHRcdFx0c2Nyb2xsVG9IYXNoKHdpbmRvdy5kb2N1bWVudC5sb2NhdGlvbi5oYXNoKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNldHMgbmV3IFVSTCBhbmQgc3RhdGUgZGF0YSBhbmQgZmlyZXMgdGhlIGNoYW5nZS5cclxuXHQgKlxyXG5cdCAqIEZvciB0aGUgYmVuZWZpdCBvZiBjYWxsaW5nIG9ic2VydmVycyBhbmQgYWNjZXNzaW5nIGxpc3RlbmVycycgZGlzcG9zaXRpb24sXHJcblx0ICogdGhpcyBmdW5jdGlvbiBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkIG9mIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSgpIGFuZCB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoKS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmcgXHRocmVmXHJcblx0ICogQHBhcmFtIG9iamVjdCBcdHJlcXVlc3RcclxuXHQgKiBAcGFyYW0gc3RyaW5nIFx0dGFyZ2V0XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIFVzZXJFdmVudFxyXG5cdCAqL1xyXG5cdHJvdXRlKGhyZWYsIHJlcXVlc3QgPSBudWxsLCB0YXJnZXQgPSBudWxsKSB7XHJcblx0XHR2YXIgdXJsT2JqID0ge2hyZWZ9O1xyXG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XHJcblx0XHRcdHVybE9iai5yZXF1ZXN0ID0gcmVxdWVzdDtcclxuXHRcdH1cclxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMikge1xyXG5cdFx0XHR1cmxPYmoudGFyZ2V0ID0gdGFyZ2V0O1xyXG5cdFx0fVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdHJldHVybiBSZWZsZXguc2V0KHRoaXMsIHVybE9iaiwgdHJ1ZS8qcmV0dXJuRXZlbnQqLyk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFVwZGF0ZXMgdGhlIGN1cnJlbnQgdXJsIHdpdGggbmV3IHN0YXRlIGRhdGEuXHJcblx0ICpcclxuXHQgKiBGb3IgdGhlIGJlbmVmaXQgb2YgY2FsbGluZyBvYnNlcnZlcnMgYW5kIGFjY2Vzc2luZyBsaXN0ZW5lcnMnIGRpc3Bvc2l0aW9uLFxyXG5cdCAqIHRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIHVzZWQgaW5zdGVhZCBvZiB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoKS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3QgXHRzdGF0ZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBVc2VyRXZlbnRcclxuXHQgKi9cclxuXHR1cGRhdGUoc3RhdGUpIHtcclxuXHRcdHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZShzdGF0ZSwgJycsIHdpbmRvdy5kb2N1bWVudC5sb2NhdGlvbik7XHJcblx0XHRyZXR1cm4gUmVmbGV4LnNldCh0aGlzLCAnc3RhdGUnLCBzdGF0ZSwgdHJ1ZS8qcmV0dXJuRXZlbnQqLyk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBGb3J3YXJkcyB0byBhIHZpc2l0ZWQgcm91dGUgdXNpbmcgd2luZG93Lmhpc3RvcnkuZm9yd2FyZCgpXHJcblx0ICpcclxuXHQgKiBUaGlzIGZ1bmN0aW9uIGV2ZW50dWFsbHkgY2FsbHMgb2JzZXJ2ZXJzIHZpYSBcInBvcHN0YXRlXCIgZXZlbnQgYm91bmQgaW4gdGhlIGNvbnN0cnVjdG9yLlxyXG5cdCAqIEJ1dCB0aGlzIHdvbid0IHJldHVybiBhIFByb21pc2UgYXMgUm91dGVyLnJvdXRlKCkgd291bGQuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRmb3J3YXJkKCkge1xyXG5cdFx0d2luZG93Lmhpc3RvcnkuZm9yd2FyZCgpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUmV0dXJucyB0byBhIHByZXZpb3VzIHJvdXRlIHVzaW5nIHdpbmRvdy5oaXN0b3J5LmJhY2soKVxyXG5cdCAqXHJcblx0ICogVGhpcyBmdW5jdGlvbiBldmVudHVhbGx5IGNhbGxzIG9ic2VydmVycyB2aWEgXCJwb3BzdGF0ZVwiIGV2ZW50IGJvdW5kIGluIHRoZSBjb25zdHJ1Y3Rvci5cclxuXHQgKiBCdXQgdGhpcyB3b24ndCByZXR1cm4gYSBQcm9taXNlIGFzIFJvdXRlci5yb3V0ZSgpIHdvdWxkLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0YmFjaygpIHtcclxuXHRcdHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdvZXMgdG8gYSBzcGVjaWZpYyBoaXN0b3J5IGVudHJ5IHVzaW5nIHdpbmRvdy5oaXN0b3J5LmdvKClcclxuXHQgKlxyXG5cdCAqIFRoaXMgZnVuY3Rpb24gZXZlbnR1YWxseSBjYWxscyBvYnNlcnZlcnMgdmlhIFwicG9wc3RhdGVcIiBldmVudCBib3VuZCBpbiB0aGUgY29uc3RydWN0b3IuXHJcblx0ICogQnV0IHRoaXMgd29uJ3QgcmV0dXJuIGEgUHJvbWlzZSBhcyBSb3V0ZXIucm91dGUoKSB3b3VsZC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBpbnQga2V5XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRnbyhrZXkpIHtcclxuXHRcdHdpbmRvdy5oaXN0b3J5LmdvKGtleSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBUZWxscyBpZiB0aGUgZ2l2ZW4gVVJMIG1hdGNoZXMgdGhlIHJvdXRlcidzIGN1cnJlbnQgVVJMXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nXHRcdFx0aHJlZlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBib29sXHJcblx0ICovXHJcblx0bWF0Y2hlcyhocmVmKSB7XHJcblx0XHR2YXIgdXJsT2JqID0gUm91dGVyLnBhcnNlVXJsKGhyZWYpO1xyXG5cdFx0cmV0dXJuICh0aGlzLmhyZWYgKyAnLycpLnN0YXJ0c1dpdGgoIXVybE9iai5ocmVmLmVuZHNXaXRoKCcvJykgPyB1cmxPYmouaHJlZiArICcvJyA6IHVybE9iai5ocmVmKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFBhcnNlcyBhbiBVUkwgYW5kIHJldHVybnMgaXRzIHByb3BlcnRpZXNcclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmdcdFx0XHRocmVmXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG9iamVjdFxyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZVVybChocmVmKSB7XHJcblx0XHR2YXIgYSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XHJcblx0XHRhLmhyZWYgPSBocmVmO1xyXG5cdFx0cmV0dXJuIHVybFByb3BlcnRpZXMucmVkdWNlKChvYmosIHByb3ApID0+IF93aXRoKG9iaiwgcHJvcCwgYVtwcm9wXSksIHt9KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFBhcnNlcyB0aGUgaW5wdXQgc2VhcmNoIHN0cmluZyBpbnRvIGEgbmFtZWQgbWFwXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nXHRcdFx0c2VhcmNoXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG9iamVjdFxyXG5cdCAqL1xyXG5cdHN0YXRpYyB0b1NlYXJjaG1hcChzZWFyY2gpIHtcclxuXHRcdHZhciBxdWVyeUFyciA9IChzZWFyY2guc3RhcnRzV2l0aCgnPycpID8gc2VhcmNoLnN1YnN0cigxKSA6IHNlYXJjaClcclxuXHRcdFx0LnNwbGl0KCcmJykuZmlsdGVyKHN0ciA9PiBzdHIpLm1hcChzdHIgPT4gc3RyLnNwbGl0KCc9JykubWFwKHN0ciA9PiBzdHIudHJpbSgpKSk7XHJcblx0XHRyZXR1cm4gcXVlcnlBcnIucmVkdWNlKChyZWNpZXZlZCwgcSkgPT4gX3dpdGgocmVjaWV2ZWQsIHFbMF0sIHFbMV0pLCB7fSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTdHJpbmdpZmllcyB0aGUgaW5wdXQgc2VhcmNobWFwIHRvIHNlYXJjaCBzdHJpbmcuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdFx0c2VhcmNobWFwXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHN0cmluZ1xyXG5cdCAqL1xyXG5cdHN0YXRpYyB0b1NlYXJjaChzZWFyY2htYXApIHtcclxuXHRcdHJldHVybiBPYmplY3Qua2V5cyhzZWFyY2htYXApLmxlbmd0aCBcclxuXHRcdFx0PyAnPycgKyBPYmplY3Qua2V5cyhzZWFyY2htYXApLm1hcChrID0+IGsgKyAnPScgKyBzZWFyY2htYXBba10pLmpvaW4oJyYnKVxyXG5cdFx0XHQ6ICcnO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUGFyc2VzIHRoZSBpbnB1dCBwYXRoIGFuZCByZXR1cm5zIGl0cyBwYXJ0cyBuYW1lZFxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZ3xhcnJheVx0XHRcdHBhdGhuYW1lT3JQYXRoc3BsaXRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gb2JqZWN0XHJcblx0ICovXHJcblx0c3RhdGljIHRvUGF0aG1hcChwYXRobmFtZU9yUGF0aHNwbGl0KSB7XHJcblx0XHR2YXIgcGF0aEFyciA9IF9pc1N0cmluZyhwYXRobmFtZU9yUGF0aHNwbGl0KSA/IHBhdGhuYW1lT3JQYXRoc3BsaXQuc3BsaXQoJy8nKS5maWx0ZXIoayA9PiBrKSA6IHBhdGhuYW1lT3JQYXRoc3BsaXQ7XHJcblx0XHR2YXIgcGF0aFN0ciA9IF9pc1N0cmluZyhwYXRobmFtZU9yUGF0aHNwbGl0KSA/IHBhdGhuYW1lT3JQYXRoc3BsaXQgOiAnLycgKyBwYXRoQXJyLmpvaW4oJy8nKSArICcvJztcclxuXHRcdHZhciBwYXRobmFtaW5nID0gX3NvcnQoT2JqZWN0LmtleXMoRU5WLnBhcmFtcy5wYXRobmFtaW5nKSwgJ2Rlc2MnKS5yZWR1Y2UoKF9wYXRobmFtZXMsIF9wYXRoKSA9PiB7XHJcblx0XHRcdHJldHVybiBfcGF0aG5hbWVzIHx8ICgocGF0aFN0ciArICcvJykuc3RhcnRzV2l0aChfcGF0aCA9PT0gJy8nID8gX3BhdGggOiAnLycgKyBfcGF0aC5zcGxpdCgnLycpLmZpbHRlcihrID0+IGspLmpvaW4oJy8nKSArICcvJykgPyBFTlYucGFyYW1zLnBhdGhuYW1pbmdbX3BhdGhdIDogbnVsbCk7XHJcblx0XHR9LCBudWxsKTtcclxuXHRcdHJldHVybiAhcGF0aG5hbWluZyA/IHt9IDogcGF0aEFyci5yZWR1Y2UoKG9iaiwgcGF0aEl0ZW0sIGkpID0+IHBhdGhuYW1pbmdbaV0gPyBfd2l0aChvYmosIHBhdGhuYW1pbmdbaV0sIHBhdGhJdGVtKSA6IG9iaiwge30pO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUGFyc2VzIHRoZSBpbnB1dCBwYXRoIGFuZCByZXR1cm5zIGl0cyBwYXJ0cyB1bm5hbWVkXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nfG9iamVjdFx0XHRcdHBhdGhuYW1lT3JQYXRobWFwXHJcblx0ICogQHBhcmFtIHN0cmluZ1x0XHRcdFx0cmVmZXJlbmNlVXJsXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGFycmF5XHJcblx0ICovXHJcblx0c3RhdGljIHRvUGF0aHNwbGl0KHBhdGhuYW1lT3JQYXRobWFwLCByZWZlcmVuY2VVcmwgPSBudWxsKSB7XHJcblx0XHRpZiAoX2lzU3RyaW5nKHBhdGhuYW1lT3JQYXRobWFwKSkge1xyXG5cdFx0XHRyZXR1cm4gcGF0aG5hbWVPclBhdGhtYXAuc3BsaXQoJy8nKS5maWx0ZXIoayA9PiBrKTtcclxuXHRcdH1cclxuXHRcdGlmICghcmVmZXJlbmNlVXJsKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignQSBcInJlZmVyZW5jZVVybFwiIG11c3QgYmUgZ2l2ZW4gdG8gcHJvcGVybHkgZGV0ZXJtaW5lIGEgcGF0aC1uYW1pbmcgc2NoZW1lLicpO1xyXG5cdFx0fVxyXG5cdFx0dmFyIHBhdGhuYW1pbmcgPSBfc29ydChPYmplY3Qua2V5cyhFTlYucGFyYW1zLnBhdGhuYW1pbmcpLCAnZGVzYycpLnJlZHVjZSgoX3BhdGhuYW1lcywgX3BhdGgpID0+IHtcclxuXHRcdFx0cmV0dXJuIF9wYXRobmFtZXMgfHwgKChyZWZlcmVuY2VVcmwgKyAnLycpLnN0YXJ0c1dpdGgoX3BhdGggPT09ICcvJyA/IF9wYXRoIDogJy8nICsgX3BhdGguc3BsaXQoJy8nKS5maWx0ZXIoayA9PiBrKS5qb2luKCcvJykgKyAnLycpID8gRU5WLnBhcmFtcy5wYXRobmFtaW5nW19wYXRoXSA6IG51bGwpO1xyXG5cdFx0fSwgbnVsbCk7XHJcblx0XHRpZiAoX2RpZmZlcmVuY2UoT2JqZWN0LmtleXMocGF0aG5hbWVPclBhdGhtYXApLCBwYXRobmFtaW5nKS5sZW5ndGgpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdUaGUgZ2l2ZW4gcGF0aG1hcCBjb250YWlucyBrZXlzICgnICsgT2JqZWN0LmtleXMocGF0aG5hbWVPclBhdGhtYXApLmpvaW4oJywgJykgKyAnKSBub3QgcmVjb2duaXplZCBieSB0aGUgaW1wbGllZCBwYXRoLW5hbWluZyBzY2hlbWUgKCcgKyBwYXRobmFtaW5nLmpvaW4oJywgJykgKyAnKScpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuICFwYXRobmFtaW5nID8gW10gOiBwYXRobmFtaW5nLm1hcChuYW1lID0+IHBhdGhuYW1lT3JQYXRobWFwW25hbWVdKS5maWx0ZXIoYSA9PiBhKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFN0cmluZ2lmaWVzIHRoZSBpbnB1dCBwYXRobWFwIG9yIHBhdGhzcGxpdCB0byBhIHN0cmluZ1xyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdHxhcnJheVx0XHRcdHBhdGhtYXBPclBhdGhzcGxpdFxyXG5cdCAqIEBwYXJhbSBzdHJpbmdcdFx0XHRcdHJlZmVyZW5jZVVybFxyXG5cdCAqXHJcblx0ICogQHJldHVybiBzdHJpbmdcclxuXHQgKi9cclxuXHRzdGF0aWMgdG9QYXRobmFtZShwYXRobWFwT3JQYXRoc3BsaXQsIHJlZmVyZW5jZVVybCA9IG51bGwpIHtcclxuXHRcdGlmIChfaXNPYmplY3QocGF0aG1hcE9yUGF0aHNwbGl0KSkge1xyXG5cdFx0XHRpZiAoIXJlZmVyZW5jZVVybCkge1xyXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignQSBcInJlZmVyZW5jZVVybFwiIG11c3QgYmUgZ2l2ZW4gdG8gcHJvcGVybHkgZGV0ZXJtaW5lIGEgcGF0aC1uYW1pbmcgc2NoZW1lLicpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHBhdGhtYXBPclBhdGhzcGxpdCA9IFJvdXRlci50b1BhdGhzcGxpdChwYXRobWFwT3JQYXRoc3BsaXQsIHJlZmVyZW5jZVVybCk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gJy8nICsgcGF0aG1hcE9yUGF0aHNwbGl0LmpvaW4oJy8nKSArICcvJztcclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogVGhlc2UgYXJlIHN0YW5kYXJkXHJcbiAqIGFuZCBzaG91bGRudCcvY2FuJ3QgYmUgbW9kaWZpZWRcclxuICpcclxuICogQGFycmF5XHJcbiAqL1xyXG5jb25zdCB1cmxQcm9wZXJ0aWVzID0gW1xyXG5cdCdoYXNoJyxcclxuXHQnaG9zdCcsXHJcblx0J2hvc3RuYW1lJyxcclxuXHQnaHJlZicsXHJcblx0J29yaWdpbicsXHJcblx0J3BhdGhuYW1lJyxcclxuXHQncG9ydCcsXHJcblx0J3Byb3RvY29sJyxcclxuXHQnc2VhcmNoJyxcclxuXTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgUmVmbGV4IGZyb20gJ0B3ZWItbmF0aXZlLWpzL3JlZmxleCc7XHJcbmltcG9ydCAqIGFzIEZvcm0gZnJvbSAnLi9mb3JtL2luZGV4LmpzJztcclxuaW1wb3J0ICogYXMgTmF2IGZyb20gJy4vbmF2L2luZGV4LmpzJztcclxuaW1wb3J0ICogYXMgTW9uZXkgZnJvbSAnLi9tb25leS9pbmRleC5qcyc7XHJcbmltcG9ydCBDb2xsZWN0aW9uIGZyb20gJy4vQ29sbGVjdGlvbi5qcyc7XHJcbmltcG9ydCBJdGVtIGZyb20gJy4vSXRlbS5qcyc7XHJcbmltcG9ydCBSZWdpc3RyeSBmcm9tICcuL1JlZ2lzdHJ5LmpzJztcclxuaW1wb3J0IEVOViBmcm9tICcuL0VOVi5qcyc7XHJcblxyXG5SZWdpc3RyeS5yZWdpc3RlcignUm91dGVyJywgTmF2LlJvdXRlciwgdHJ1ZSk7XHJcblJlZ2lzdHJ5LnJlZ2lzdGVyKCdNb25ldGl6YXRpb24nLCBNb25leS5Nb25ldGl6YXRpb24sIHRydWUpO1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQge1xyXG5cdFJlZmxleCxcclxuXHRGb3JtLFxyXG5cdE5hdixcclxuXHRNb25leSxcclxuXHRDb2xsZWN0aW9uLFxyXG5cdEl0ZW0sXHJcblx0UmVnaXN0cnksXHJcblx0RU5WLFxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgUmVmbGV4IGZyb20gJ0B3ZWItbmF0aXZlLWpzL3JlZmxleCc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBSb3V0ZXIgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqXHJcbiAqIFRoaXMgY2xhc3MgcHJvdmlkZXMgYWRkaXRpb25hbCBmdW5jdGlvbmFsaXR5IG92ZXJcclxuICogdGhlIG5hdGl2ZSB3aW5kb3cuZG9jdW1lbnQubW9uZXRpemF0aW9uIEFQSVxyXG4gKi9cclxuXHRcdFx0XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vbmV0aXphdGlvbiB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgUm91dGVyIGluc3RhbmNlLiBUeXBpY2FsbHksXHJcblx0ICogb25seSBvbmUgaW5zdGFuY2Ugd291bGQgYmUgbmVlZGVkIGFwcC13aWRlLiBTbyBhbiBzaG91bGRcclxuXHQgKiBiZSB1c2VkIGFzIGEgc2luZ2xldG9uLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdmFyIG1vbmV0aXphdGlvbiA9IHdpbmRvdy5kb2N1bWVudC5tb25ldGl6YXRpb247XHJcbiAgICAgICAgaWYgKCFtb25ldGl6YXRpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBTdGFydHVwIHJvdXRlXHJcbiAgICAgICAgUmVmbGV4LnNldCh0aGlzLCAnc3RhdGUnLCBtb25ldGl6YXRpb24uc3RhdGUpO1xyXG4gICAgICAgIC8vIE9ic2VydmVyc1xyXG4gICAgICAgIG1vbmV0aXphdGlvbi5hZGRFdmVudExpc3RlbmVyKCdtb25ldGl6YXRpb25wZW5kaW5nJywgZSA9PiB7XHJcbiAgICAgICAgICAgIFJlZmxleC5zZXQodGhpcywge1xyXG4gICAgICAgICAgICAgICAgc3RhdGU6ICdwZW5kaW5nJyxcclxuICAgICAgICAgICAgICAgIGRldGFpbDogZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbW9uZXRpemF0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vbmV0aXphdGlvbnN0YXJ0JywgZSA9PiB7XHJcbiAgICAgICAgICAgIFJlZmxleC5zZXQodGhpcywge1xyXG4gICAgICAgICAgICAgICAgc3RhdGU6ICdzdGFydGVkJyxcclxuICAgICAgICAgICAgICAgIGRldGFpbDogZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbW9uZXRpemF0aW9uLmFkZEV2ZW50TGlzdGVuZXIoJ21vbmV0aXphdGlvbnN0b3AnLCBlID0+IHtcclxuICAgICAgICAgICAgUmVmbGV4LnNldCh0aGlzLCB7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZTogJ3N0b3BwZWQnLFxyXG4gICAgICAgICAgICAgICAgZGV0YWlsOiBlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBtb25ldGl6YXRpb24uYWRkRXZlbnRMaXN0ZW5lcignbW9uZXRpemF0aW9ucHJvZ3Jlc3MnLCBlID0+IHtcclxuICAgICAgICAgICAgUmVmbGV4LnNldCh0aGlzLCB7XHJcbiAgICAgICAgICAgICAgICBwcm9ncmVzczogZSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBJbml0aWFsaXplcyBhIG5ldyBtb25ldGl6YXRpb24gc3RyZWFtIGJ5IGFkZGluZyBhIG1ldGEgdGFnXHJcbiAgICAgKiB0byB0aGUgZG9jdW1lbnQuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIFVzZXJFdmVudFxyXG5cdCAqL1xyXG5cdHN0YXJ0KCkge1xyXG5cdFx0aWYgKCF3aW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignbWV0YVtuYW1lPVwibW9uZXRpemF0aW9uXCJdJykpIHtcclxuICAgICAgICAgICAgdmFyIG1vbmV0aXphdGlvbk1ldGEgPSAnPG1ldGEgbmFtZT1cIm1vbmV0aXphdGlvblwiIGNvbnRlbnQ9XCIkZGRkZGQuZ2dnZ2dnLnR0dHR0XCIgLz4nO1xyXG5cdFx0XHR3aW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZCcpLmFwcGVuZChtb25ldGl6YXRpb25NZXRhKTtcclxuXHRcdH1cclxuICAgIH1cclxuICAgIFxyXG5cdC8qKlxyXG5cdCAqIFN0b3BzIGFuIG9uZ29pbmcgbW9uZXRpemF0aW9uIHN0cmVhbSBieSByZW1vdmluZyBhIG1ldGEgdGFnXHJcbiAgICAgKiBmcm9tIHRoZSBkb2N1bWVudC5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gVXNlckV2ZW50XHJcblx0ICovXHJcblx0c3RvcCgpIHtcclxuICAgICAgICB2YXIgbW9uZXRpemF0aW9uTWV0YTtcclxuXHRcdGlmICgobW9uZXRpemF0aW9uTWV0YSA9IHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9XCJtb25ldGl6YXRpb25cIl0nKSkpIHtcclxuICAgICAgICAgICAgbW9uZXRpemF0aW9uTWV0YS5yZW1vdmUoKTtcclxuXHRcdH1cclxuXHR9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBTcGxpdHMgYSBjYW1lbC1jYXNlZCBzdHJpbmcuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHRzdHJcclxuICogQHBhcmFtIHN0cmluZyBcdGRlbGltaXRlclxyXG4gKlxyXG4gKiBAcmV0dXJuIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RyLCBkZWxpbWl0ZXIpIHtcclxuXHRyZXR1cm4gc3RyID09PSB1bmRlZmluZWQgPyAnJyA6IHN0ci5zcGxpdCgvKD89W0EtWl0pLykuam9pbihkZWxpbWl0ZXIgPyBkZWxpbWl0ZXIgOiAnICcpOyAvLyBwb3NpdGl2ZSBsb29rYWhlYWQgdG8ga2VlcCB0aGUgY2FwaXRhbCBsZXR0ZXJzXHJcbn07XHJcbiIsIlxyXG4vKipcclxuKiBUaGUgdmVuZG9yIHByZWZpeCBpbiBkaWZmZXJlbnQgZm9ybWF0LlxyXG4qXHJcbiogQHBhcmFtIG9iamVjdFxyXG4qL1xyXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24oKSB7XHJcblx0dmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgJycpO1xyXG5cdHZhciBwcmVmaXggPSAoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoc3R5bGVzKS5qb2luKCcnKS5tYXRjaCgvLShtb3p8d2Via2l0fG1zKS0vKSB8fCBzdHlsZXMuT2xpbmsgPT09ICcnICYmIFsnJywgJ28nXSlbMV07XHJcblx0dmFyIGFwaSA9ICgnV2ViS2l0fE1venxNc3xPJykubWF0Y2gobmV3IFJlZ0V4cCgnKCcgKyBwcmVmaXggKyAnKScsICdpJykpWzFdO1xyXG5cdHJldHVybiB7cHJlZml4OnByZWZpeCwgY3NzOictJyArIHByZWZpeCArICctJywgYXBpOmFwaSx9O1xyXG59KSgpOyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfZnJvbUNhbWVsIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL2Zyb21DYW1lbC5qcyc7XHJcbmltcG9ydCBfdG9DYW1lbCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci90b0NhbWVsLmpzJztcclxuaW1wb3J0IHZlbmRvclByZWZpeCBmcm9tICcuL3ZlbmRvclByZWZpeC5qcyc7XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgdmVuZG9yLXNwZWNpZmljIGNzcyBwcm9wZXJ0eSBpZiBzdXBwb3J0ZWQuIE5VTEwgaWYgbm90LlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0cHJvcFxyXG4gKlxyXG4gKiBAcmV0dXJuIHN0cmluZ3xOVUxMXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwcm9wKSB7XHJcblx0dmFyIGNhbWVsQ2FzZWRQcm9wID0gX3RvQ2FtZWwocHJvcCwgdHJ1ZSk7XHJcblx0aWYgKHZlbmRvclByZWZpeC5hcGkgKyBjYW1lbENhc2VkUHJvcCBpbiBkb2N1bWVudC5ib2R5LnN0eWxlKSB7XHJcblx0XHRyZXR1cm4gdmVuZG9yUHJlZml4LmNzcyArIF9mcm9tQ2FtZWwocHJvcCwgJy0nKTtcclxuXHR9XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfdG9UaXRsZSBmcm9tICcuL3RvVGl0bGUuanMnO1xyXG5cclxuLyoqXHJcbiAqIE1ha2VzIGEgc3RyaW5nIGNhbWVsLWNhc2VkLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0c3RyXHJcbiAqIEBwYXJhbSBib29sXHQgXHRmcm9tU3RhcnRcclxuICpcclxuICogQHJldHVybiBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ciwgZnJvbVN0YXJ0KSB7XHJcblx0Ly8gTWFrZSBkaXN0aW5nIHdvcmRzXHJcblx0c3RyID0gX3RvVGl0bGUoc3RyLnJlcGxhY2UoLy0vZywgJyAnKSkucmVwbGFjZSgvIC9nLCAnJyk7XHJcblx0cmV0dXJuIGZyb21TdGFydCA/IHN0ciA6IHN0clswXS50b0xvd2VyQ2FzZSgpICsgc3RyLnN1YnN0cigxKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBhIHN0cmluZyB0byB0aXRsZSBjYXNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0c3RyXHJcbiAqIEBwYXJhbSBib29sIFx0XHRzdHJpY3RcclxuICpcclxuICogQHJldHVybiBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ciwgc3RyaWN0KSB7XHJcblx0aWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XHJcblx0XHRyZXR1cm4gc3RyO1xyXG5cdH1cclxuXHRyZXR1cm4gc3RyLnJlcGxhY2UoL1xcd1xcUyovZywgIGZ1bmN0aW9uKHR4dCkgeyByZXR1cm4gdHh0LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgKCh0eXBlb2Ygc3RyaWN0ICE9PSB1bmRlZmluZWQgJiYgc3RyaWN0KSA/IHR4dC5zdWJzdHIoMSkudG9Mb3dlckNhc2UoKSA6IHR4dC5zdWJzdHIoMSkpOyB9KVxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCBfZnJvbUNhbWVsIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL2Zyb21DYW1lbC5qcyc7XHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2VhY2ggZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZWFjaC5qcyc7XHJcbmltcG9ydCB2ZW5kb3JpemUgZnJvbSAnLi92ZW5kb3JpemUuanMnO1xyXG5cclxuLyoqXHJcbiAqIExvb3BzIHRocnUgYWxsIGtleXMgaW4gcHJvcHMgY2FsbHMgY2FsbGJhY2sgdG8gb2J0YWluIHRoZWlyIHZhbHVlLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF5XHRcdHByb3BzXHJcbiAqIEBwYXJhbSBmdW5jdGlvblx0XHRcdGNhbGxiYWNrXHJcbiAqIEBwYXJhbSBib29sXHRcdFx0XHR3aXRoVmVuZG9yVmVyc2lvblxyXG4gKlxyXG4gKiBAcmV0dXJuIE5VTEx8Ym9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocHJvcHMsIGNhbGxiYWNrLCB3aXRoVmVuZG9yVmVyc2lvbikge1xyXG5cdHZhciB2YWxzTGlzdCA9IHt9O1xyXG5cdHZhciBwcm9wc0xpc3QgPSBfYXJyRnJvbShwcm9wcyk7XHJcblx0dmFyIGNhbGxDYWxsYmFjayA9IChpLCBwcm9wKSA9PiB7XHJcblx0XHQvLyBXZSB1c2UgdGhlIGtleSBhcyBnaXZlbiwgYnV0IHdlIG9idGFpbiB2YWx1ZSB3aXRoXHJcblx0XHQvLyBXZSBzdXBwb3J0IGNhbWVsIGNhc2VzLCBidXQgcmV0dXJuIHRoZWlyIG5vcm1hbGl6ZWQgdmVyc2lvbnNcclxuXHRcdHZhciBub3JtYWxQcm9wID0gX2Zyb21DYW1lbChwcm9wLCAnLScpLnRvTG93ZXJDYXNlKCk7XHJcblx0XHQvLyBXaXRoIHZlbmRvciB2ZXJpc29uP1xyXG5cdFx0Ly8gV2Ugc2V0IHRoZSB2ZW5kb3IgdmVyc2lvbiBmaXJzdCBpZiBzdXBwb3J0IGZvciB0aGlzIHByb3BlcnR5XHJcblx0XHRpZiAod2l0aFZlbmRvclZlcnNpb24gPT09ICdhdXRvJykge1xyXG5cdFx0XHR2YWxzTGlzdFtub3JtYWxQcm9wXSA9IGNhbGxiYWNrKHZlbmRvcml6ZShub3JtYWxQcm9wKSB8fCBub3JtYWxQcm9wLCBwcm9wc0xpc3RbaV0pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0aWYgKHdpdGhWZW5kb3JWZXJzaW9uKSB7XHJcblx0XHRcdFx0dmFyIHZlbmRvcml6ZWRQcm9wID0gdmVuZG9yaXplKG5vcm1hbFByb3ApO1xyXG5cdFx0XHRcdGlmICh2ZW5kb3JpemVkUHJvcCkge1xyXG5cdFx0XHRcdFx0dmFsc0xpc3RbdmVuZG9yaXplZFByb3BdID0gY2FsbGJhY2sodmVuZG9yaXplZFByb3AsIHByb3BzTGlzdFtpXSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHZhbHNMaXN0W25vcm1hbFByb3BdID0gY2FsbGJhY2sobm9ybWFsUHJvcCwgcHJvcHNMaXN0W2ldKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cdF9lYWNoKHByb3BzTGlzdCwgKGksIHByb3ApID0+IHtcclxuXHRcdGNhbGxDYWxsYmFjayhpLCBwcm9wKTtcclxuXHR9KTtcclxuXHRyZXR1cm4gX2lzQXJyYXkocHJvcHMpIHx8IHdpdGhWZW5kb3JWZXJzaW9uIHx8IHByb3BzID09PSAnc2l6ZScgfHwgcHJvcHMgPT09ICdvZmZzZXRzJyBcclxuXHRcdD8gdmFsc0xpc3QgXHJcblx0XHQ6IHZhbHNMaXN0W3Byb3BzXTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9lYWNoIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2VhY2guanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc051bWVyaWMgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bWVyaWMuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgbGl0dGxlIHRyYW5zZm9ybSB1dGlsaXR5IGNsYXNzXHJcbiAqIGFuZCBzdHJpbmdpZnllciBjbGFzc2VzLlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcbmNvbnN0IFRyYW5zZm9ybVJ1bGUgPSBjbGFzcyB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogQ3JlYXRlcyBhIG5ldyBUcmFuc2Zvcm1SdWxlIGluc3RhbmNlXHJcblx0ICogYW5kIGVhY2ggcnVsZSdzIGFwcHJvcHJpYXRlIGNsYXNzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHQgdHJhbnNmb3JtUnVsZXNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdGhpc1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKHRyYW5zZm9ybVJ1bGVzKSB7XHJcblx0XHRfZWFjaCh0cmFuc2Zvcm1SdWxlcywgKHJ1bGUsIHZhbHVlKSA9PiB7XHJcblx0XHRcdGlmIChbJ3JvdGF0ZScsICdzY2FsZScsICdza2V3JywgJ3RyYW5zbGF0ZSddLmluY2x1ZGVzKHJ1bGUpKSB7XHJcblx0XHRcdFx0dGhpc1tydWxlXSA9IF9pc0FycmF5KHZhbHVlKVxyXG5cdFx0XHRcdFx0PyBuZXcgVHJhbnNmb3JtUnVsZVtydWxlXSguLi52YWx1ZSlcclxuXHRcdFx0XHRcdDogbmV3IFRyYW5zZm9ybVJ1bGVbcnVsZV0odmFsdWUpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogU3RyaW5naWZpZXMgdGhlIHRyYW5zZm9ybVJ1bGVzIGluIGEgQ1NTLWNvbXBhdGlibGUgZm9ybWF0LlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBzdHJpbmdcclxuXHQgKi9cclxuXHR0b1N0cmluZygpIHtcclxuXHRcdHJldHVybiBbJ3JvdGF0ZScsICdzY2FsZScsICdza2V3JywgJ3RyYW5zbGF0ZSddLnJlZHVjZShcclxuXHRcdFx0KHN0ciwgcnVsZSkgPT4gc3RyICsgKHRoaXNbcnVsZV0gJiYgdGhpc1tydWxlXS5sZW5ndGggPyAnICcgKyB0aGlzW3J1bGVdIDogJycpLCAnJ1xyXG5cdFx0KS50cmltKCk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFVubWF0cml4OiBwYXJzZSB0aGUgdmFsdWVzIG9mIHRoZSBtYXRyaXhcclxuXHQgKlxyXG5cdCAqIEFsZ29yaXRobSBmcm9tOlxyXG5cdCAqXHJcblx0ICogaHR0cHM6Ly9naXRodWIuY29tL21hdHRoZXdtdWVsbGVyL3VubWF0cml4L2Jsb2IvbWFzdGVyL2luZGV4LmpzXHJcblx0ICogQHNlZSBodHRwOi8vaGcubW96aWxsYS5vcmcvbW96aWxsYS1jZW50cmFsL2ZpbGUvN2NiM2U5Nzk1ZDA0L2xheW91dC9zdHlsZS9uc1N0eWxlQW5pbWF0aW9uLmNwcFxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZyBcdCBzdHJcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4ge09iamVjdH1cclxuXHQgKi9cclxuXHRzdGF0aWMgcGFyc2Uoc3RyKSB7XHJcblx0XHQvLyBTdHJpbmcgdG8gbWF0cml4XHJcblx0XHR2YXIgc3RvbSA9IGZ1bmN0aW9uKHRyYW5zZm9ybVN0cikge1xyXG5cdFx0XHR2YXIgbSA9IFtdO1xyXG5cdFx0XHRpZiAod2luZG93LldlYktpdENTU01hdHJpeCkge1xyXG5cdFx0XHRcdG0gPSBuZXcgd2luZG93LldlYktpdENTU01hdHJpeCh0cmFuc2Zvcm1TdHIpO1xyXG5cdFx0XHRcdHJldHVybiBbbS5hLCBtLmIsIG0uYywgbS5kLCBtLmUsIG0uZl07XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIHJkaWdpdCA9IC9bXFxkXFwuXFwtXSsvZztcclxuXHRcdFx0dmFyIG47XHJcblx0XHRcdHdoaWxlKG4gPSByZGlnaXQuZXhlYyh0cmFuc2Zvcm1TdHIpKSB7XHJcblx0XHRcdFx0bS5wdXNoKCtuKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbTtcclxuXHRcdH07XHJcblx0XHQvLyBSb3VuZCB0byB0aGUgbmVhcmVzdCBodW5kcmVkdGhcclxuXHRcdHZhciByb3VuZCA9IGZ1bmN0aW9uKG4pIHtcclxuXHRcdFx0cmV0dXJuIE1hdGgucm91bmQobiAqIDEwMCkgLyAxMDA7XHJcblx0XHR9O1xyXG5cdFx0Ly8gUmFkaWFucyB0byBkZWdyZWVzXHJcblx0XHR2YXIgcjJkID0gZnVuY3Rpb24ocmFkaWFucykge1xyXG5cdFx0XHR2YXIgZGVnID0gcmFkaWFucyAqIDE4MCAvIE1hdGguUEk7XHJcblx0XHRcdHJldHVybiByb3VuZChkZWcpO1xyXG5cdFx0fTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0dmFyIG0gPSBzdG9tKHN0cik7XHJcblx0XHR2YXIgQSA9IG1bMF07XHJcblx0XHR2YXIgQiA9IG1bMV07XHJcblx0XHR2YXIgQyA9IG1bMl07XHJcblx0XHR2YXIgRCA9IG1bM107XHJcblx0XHRpZiAoQSAqIEQgPT0gQiAqIEMpIHRocm93IG5ldyBFcnJvcignRHJhbWF0aWMucGFyc2VUcmFuc2Zvcm06IG1hdHJpeCBpcyBzaW5ndWxhcicpO1xyXG5cdFx0Ly8gc3RlcCAoMylcclxuXHRcdHZhciBzY2FsZVggPSBNYXRoLnNxcnQoQSAqIEEgKyBCICogQik7XHJcblx0XHRBIC89IHNjYWxlWDtcclxuXHRcdEIgLz0gc2NhbGVYO1xyXG5cdFx0Ly8gc3RlcCAoNClcclxuXHRcdHZhciBza2V3ID0gQSAqIEMgKyBCICogRDtcclxuXHRcdEMgLT0gQSAqIHNrZXc7XHJcblx0XHREIC09IEIgKiBza2V3O1xyXG5cdFx0Ly8gc3RlcCAoNSlcclxuXHRcdHZhciBzY2FsZVkgPSBNYXRoLnNxcnQoQyAqIEMgKyBEICogRCk7XHJcblx0XHRDIC89IHNjYWxlWTtcclxuXHRcdEQgLz0gc2NhbGVZO1xyXG5cdFx0c2tldyAvPSBzY2FsZVk7XHJcblx0XHQvLyBzdGVwICg2KVxyXG5cdFx0aWYgKCBBICogRCA8IEIgKiBDICkge1xyXG5cdFx0XHRBID0gLUE7XHJcblx0XHRcdEIgPSAtQjtcclxuXHRcdFx0c2tldyA9IC1za2V3O1xyXG5cdFx0XHRzY2FsZVggPSAtc2NhbGVYO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG5ldyBUcmFuc2Zvcm1SdWxlKHtcclxuXHRcdFx0dHJhbnNsYXRlOiBbLyp4Ki9tWzRdLCAvKnkqL21bNV0sXSxcclxuXHRcdFx0c2NhbGU6IFsvKngqL3JvdW5kKHNjYWxlWCksIC8qeSovcm91bmQoc2NhbGVZKSxdLFxyXG5cdFx0XHRyb3RhdGU6IHIyZChNYXRoLmF0YW4yKEIsIEEpKSxcclxuXHRcdFx0c2tldzogcjJkKE1hdGguYXRhbihza2V3KSksXHJcblx0XHR9KTtcclxuXHR9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS1cclxuICogVGhlIFwicm90YXRlXCIgdmFsdWUgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuVHJhbnNmb3JtUnVsZS5yb3RhdGUgPSBjbGFzcyBleHRlbmRzIEFycmF5IHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBSZXR1cm5zIFwicm90YXRlXCIgdmFsdWVzIGFzIGEgQ1NTIGZ1bmN0aW9uXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHN0cmluZ1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKCkge1xyXG5cdFx0dmFyIHZhbHVlcyA9IHRoaXMubWFwKHZhbCA9PiBfaXNOdW1lcmljKHZhbCkgPyB2YWwgKyAnZGVnJyA6IHZhbCk7XHJcblx0XHRyZXR1cm4gJ3JvdGF0ZSgnICsgdmFsdWVzLmpvaW4oJywgJykgKyAnKSc7XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS1cclxuICogVGhlIFwic2NhbGVcIiBhcnJheSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5UcmFuc2Zvcm1SdWxlLnNjYWxlID0gY2xhc3MgZXh0ZW5kcyBBcnJheSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogUmV0dXJucyBcInNjYWxlXCIgdmFsdWVzIGFzIGEgQ1NTIGZ1bmN0aW9uXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHN0cmluZ1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKCkge1xyXG5cdFx0cmV0dXJuICdzY2FsZSgnICsgdGhpcy5qb2luKCcsICcpICsgJyknO1xyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBcInNrZXdcIiBhcnJheSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5UcmFuc2Zvcm1SdWxlLnNrZXcgPSBjbGFzcyBleHRlbmRzIEFycmF5IHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBSZXR1cm5zIFwic2tld1wiIHZhbHVlcyBhcyBhIENTUyBmdW5jdGlvblxyXG5cdCAqXHJcblx0ICogQHJldHVybiBzdHJpbmdcclxuXHQgKi9cclxuXHR0b1N0cmluZygpIHtcclxuXHRcdHZhciB2YWx1ZXMgPSB0aGlzLm1hcCh2YWwgPT4gX2lzTnVtZXJpYyh2YWwpID8gdmFsICsgJ2RlZycgOiB2YWwpO1xyXG5cdFx0cmV0dXJuICdza2V3KCcgKyB2YWx1ZXMuam9pbignLCAnKSArICcpJztcclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgXCJ0cmFuc2xhdGVcIiBhcnJheSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5UcmFuc2Zvcm1SdWxlLnRyYW5zbGF0ZSA9IGNsYXNzIGV4dGVuZHMgQXJyYXkge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFJldHVybnMgXCJ0cmFuc2xhdGVcIiB2YWx1ZXMgYXMgYSBDU1MgZnVuY3Rpb25cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gc3RyaW5nXHJcblx0ICovXHJcblx0dG9TdHJpbmcoKSB7XHJcblx0XHR2YXIgdmFsdWVzID0gdGhpcy5tYXAodmFsID0+IF9pc051bWVyaWModmFsKSA/IHZhbCArICdweCcgOiB2YWwpO1xyXG5cdFx0cmV0dXJuICd0cmFuc2xhdGUoJyArIHZhbHVlcy5qb2luKCcsICcpICsgJyknO1xyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgVHJhbnNmb3JtUnVsZTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgcnVsZUNhbGxiYWNrIGZyb20gJy4vcnVsZUNhbGxiYWNrLmpzJztcclxuaW1wb3J0IFRyYW5zZm9ybVJ1bGUgZnJvbSAnLi9UcmFuc2Zvcm1SdWxlLmpzJztcclxuaW1wb3J0IHZlbmRvcml6ZSBmcm9tICcuL3ZlbmRvcml6ZS5qcyc7XHJcblxyXG4vKipcclxuICogUmV0dXJucyBjb21wdXRlZCBDU1MgcHJvcGVydGllcy5cclxuICpcclxuICogQHBhcmFtIEhUTUxFbGVtZW50XHRcdGVsXHJcbiAqIEBwYXJhbSBzdHJpbmd8YXJyYXlcdFx0cHJvcHNcclxuICogQHBhcmFtIHN0cmluZ1x0XHRcdHBzdWVkb1xyXG4gKlxyXG4gKiBAcmV0dXJuIG9iamVjdHxzdHJpbmdcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVsLCBwcm9wcywgcHN1ZWRvID0gbnVsbCkge1xyXG5cdHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBwc3VlZG8pLCByZWN0O1xyXG5cdHJldHVybiBydWxlQ2FsbGJhY2socHJvcHMsIChwcm9wLCByYXdQcm9wKSA9PiB7XHJcblx0XHR2YXIgdmFsID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSh2ZW5kb3JpemUocHJvcCkgfHwgcHJvcCk7XHJcblx0XHRpZiAoKHByb3AgPT09ICd3aWR0aCcgfHwgcHJvcCA9PT0gJ2hlaWdodCcpICYmIHZhbCA9PT0gJycpIHtcclxuXHRcdFx0dmFsID0gJzBweCc7XHJcblx0XHR9XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gV2UgcmV0dXJuIGFuIG9iamVjdCBmb3IgdGhlIFwidHJhbnNmb3JtXCIgcHJvcGVydHlcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRpZiAocHJvcCA9PT0gJ3RyYW5zZm9ybScpIHtcclxuXHRcdFx0dmFsID0gVHJhbnNmb3JtUnVsZS5wYXJzZSh2YWwpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHZhbDtcclxuXHR9LCBmYWxzZS8qd2l0aFZlbmRvclZlcnNpb24qLyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQ1NTIHByb3BlcnRpZXMgdGhhdCBtdXN0IGhhdmUgYSBkZWZhdWx0IHBpeGVsIHVuaXQuXHJcbiAqXHJcbiAqIEB2YXIgYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IFsnd2lkdGgnLCAnaGVpZ2h0JywgJ3RvcCcsICdsZWZ0JywgJ3JpZ2h0JywgJ2JvdHRvbScsXHJcblx0J3BhZGRpbmcnLCAncGFkZGluZy10b3AnLCAncGFkZGluZy1sZWZ0JywgJ3BhZGRpbmctcmlnaHQnLCAncGFkZGluZy1ib3R0b20nLFxyXG5cdCdtYXJnaW4nLCAnbWFyZ2luLXRvcCcsICdtYXJnaW4tbGVmdCcsICdtYXJnaW4tcmlnaHQnLCAnbWFyZ2luLWJvdHRvbScsXHJcblx0J2JvcmRlci13aWR0aCcsICdib3JkZXItdG9wLXdpZHRoJywgJ2JvcmRlci1sZWZ0LXdpZHRoJywgJ2JvcmRlci1yaWdodC13aWR0aCcsICdib3JkZXItYm90dG9tLXdpZHRoJyxcclxuXHQnb3V0bGluZS13aWR0aCcsICdvdXRsaW5lLXRvcC13aWR0aCcsICdvdXRsaW5lLWxlZnQtd2lkdGgnLCAnb3V0bGluZS1yaWdodC13aWR0aCcsICdvdXRsaW5lLWJvdHRvbS13aWR0aCcsXHJcbl07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1N0cmluZy5qcyc7XHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNVbmRlZmluZWQuanMnO1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVtZXJpYy5qcyc7XHJcbmltcG9ydCBfb2JqRnJvbSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9mcm9tLmpzJztcclxuaW1wb3J0IF9lYWNoIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2VhY2guanMnO1xyXG5pbXBvcnQgVHJhbnNmb3JtUnVsZSBmcm9tICcuL1RyYW5zZm9ybVJ1bGUuanMnO1xyXG5pbXBvcnQgcnVsZUNhbGxiYWNrIGZyb20gJy4vcnVsZUNhbGxiYWNrLmpzJztcclxuaW1wb3J0IGF1dG9weCBmcm9tICcuL2F1dG9weC5qcyc7XHJcblxyXG4vKipcclxuICogU2V0cyBuZXcgQ1NTIHByb3BlcnRpZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSBIVE1MRWxlbWVudFx0XHRlbFxyXG4gKiBAcGFyYW0gc3RyaW5nfG9iamVjdFx0XHRuYW1lT3JQcm9wc1xyXG4gKiBAcGFyYW0gc3RyaW5nfG51bWJlclx0XHR2YWxcclxuICpcclxuICogQHJldHVybiBIVE1MRWxlbWVudFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZWwsIG5hbWVPclByb3BzLCB2YWwgPSBudWxsKSB7XHJcblx0bmFtZU9yUHJvcHMgPSBfaXNTdHJpbmcobmFtZU9yUHJvcHMpXHJcblx0XHQ/IF9vYmpGcm9tKG5hbWVPclByb3BzLCB2YWwpXHJcblx0XHQ6IG5hbWVPclByb3BzO1xyXG5cdHZhciBkZXN0cnVjdGFibGVzID0ge1xyXG5cdFx0aW5zZXQ6IFsndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10sXHJcblx0XHRtYXJnaW46IFsndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10sXHJcblx0XHRwYWRkaW5nOiBbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLFxyXG5cdH07XHJcblx0cnVsZUNhbGxiYWNrKE9iamVjdC5rZXlzKG5hbWVPclByb3BzKSwgKHByb3AsIHJhd1Byb3ApID0+IHtcclxuXHRcdHZhciB2YWwgPSBuYW1lT3JQcm9wc1tyYXdQcm9wXTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBXZSBjYW4gZGVzdHVjdHVyZSB0aGluZ3MgbGlrZSBcImluc2V0XCIoXCJsZWZ0XCIsIFwidG9wXCIsIFwicmlnaHRcIiwgXCJib3R0b21cIiksIGV0Y1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdF9lYWNoKGRlc3RydWN0YWJsZXMsIChkZXN0cnVjdGFibGVQcm9wLCBtZWFuaW5nKSA9PiB7XHJcblx0XHRcdGlmIChwcm9wID09PSBkZXN0cnVjdGFibGVQcm9wKSB7XHJcblx0XHRcdFx0aWYgKF9pc09iamVjdCh2YWwpKSB7XHJcblx0XHRcdFx0XHR2YWwgPSBtZWFuaW5nLm1hcChrZXkgPT4gdmFsW2tleV0pLmZpbHRlcih2YWwgPT4gIV9pc1VuZGVmaW5lZCh2YWwpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKF9pc0FycmF5KHZhbCkpIHtcclxuXHRcdFx0XHRcdHZhbCA9IHZhbC5qb2luKCcgJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBXZSBhY2NlcHQgYW4gb2JqZWN0IGZvciB0aGUgXCJ0cmFuc2Zvcm1cIiBwcm9wZXJ0eVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdGlmIChwcm9wID09PSAndHJhbnNmb3JtJyAmJiBfaXNPYmplY3QodmFsKSAmJiAhKHZhbCBpbnN0YW5jZW9mIFRyYW5zZm9ybVJ1bGUpKSB7XHJcblx0XHRcdHZhbCA9IChuZXcgVHJhbnNmb3JtUnVsZSh2YWwpKS50b1N0cmluZygpO1xyXG5cdFx0fVxyXG5cdFx0ZWwuc3R5bGVbcHJvcF0gPSBhdXRvcHguaW5jbHVkZXMocHJvcCkgJiYgX2lzTnVtZXJpYyh2YWwpXHJcblx0XHRcdD8gdmFsICsgJ3B4J1xyXG5cdFx0XHQ6IHZhbDtcclxuXHR9LCAnYXV0bycvKndpdGhWZW5kb3JWZXJzaW9uKi8pO1xyXG5cdHJldHVybiBlbDtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9lYWNoIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2VhY2guanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBCaW5kcyBjYWxsYmFja3MgdG8gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKClcclxuICogdG8gY3JlYXRlIGEgY2VudHJhbCBcInJlYWQvd3JpdGVcIiBwaGFzZXMgZm9yIERPTSBhY2Nlc3MuXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuXHRcdFx0XHJcbmNvbnN0IFJlZmxvdyA9IHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBIb2xkcyBhbGwgY2FsbGJhY2tzIGJvdW5kIHRvIHRoZSBcInJlYWRcIiBwaGFzZS5cclxuXHQgKlxyXG5cdCAqIEB2YXIgYXJyYXlcclxuXHQgKi9cclxuXHRyZWFkQ2FsbGJhY2tzOiBbXSxcclxuXHRcclxuXHQvKipcclxuXHQgKiBIb2xkcyBhbGwgY2FsbGJhY2tzIGJvdW5kIHRvIHRoZSBcIndyaXRlXCIgcGhhc2UuXHJcblx0ICpcclxuXHQgKiBAdmFyIGFycmF5XHJcblx0ICovXHJcblx0d3JpdGVDYWxsYmFja3M6IFtdLFxyXG5cclxuXHQvKipcclxuXHQgKiBTdGFydHMgdGhlIGxvb3AuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHRoaXNcclxuXHQgKi9cclxuXHRfcnVuOiBmdW5jdGlvbigpIHtcclxuXHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcblx0XHRcdFJlZmxvdy5yZWFkQ2FsbGJhY2tzLmZvckVhY2goKGNhbGxiYWNrLCBpKSA9PiB7XHJcblx0XHRcdFx0aWYgKGNhbGxiYWNrICYmICFjYWxsYmFjaygpKSB7XHJcblx0XHRcdFx0XHRSZWZsb3cucmVhZENhbGxiYWNrc1tpXSA9IG51bGw7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0UmVmbG93LndyaXRlQ2FsbGJhY2tzLmZvckVhY2goKGNhbGxiYWNrLCBpKSA9PiB7XHJcblx0XHRcdFx0aWYgKGNhbGxiYWNrICYmICFjYWxsYmFjaygpKSB7XHJcblx0XHRcdFx0XHRSZWZsb3cud3JpdGVDYWxsYmFja3NbaV0gPSBudWxsO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdFJlZmxvdy5fcnVuKCk7XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEJpbmRzIGEgY2FsbGJhY2sgdG8gdGhlIFwicmVhZFwiIHBoYXNlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uIFx0Y2FsbGJhY2tcclxuXHQgKiBAcGFyYW0gYm9vbFx0XHR3aXRoUHJvbWlzZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0b25yZWFkOiBmdW5jdGlvbihjYWxsYmFjaywgd2l0aFByb21pc2UgPSBmYWxzZSkge1xyXG5cdFx0aWYgKHdpdGhQcm9taXNlKSB7XHJcblx0XHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRcdFx0UmVmbG93LnJlYWRDYWxsYmFja3MucHVzaCgoKSA9PiB7XHJcblx0XHRcdFx0XHRjYWxsYmFjayhyZXNvbHZlLCByZWplY3QpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHRcdFJlZmxvdy5yZWFkQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xyXG5cdH0sXHJcblx0XHJcblx0LyoqXHJcblx0ICogQmluZHMgYSBjYWxsYmFjayB0byB0aGUgXCJ3cml0ZVwiIHBoYXNlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uIFx0Y2FsbGJhY2tcclxuXHQgKiBAcGFyYW0gYm9vbFx0XHR3aXRoUHJvbWlzZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0b253cml0ZTogZnVuY3Rpb24oY2FsbGJhY2ssIHdpdGhQcm9taXNlID0gZmFsc2UpIHtcclxuXHRcdGlmICh3aXRoUHJvbWlzZSkge1xyXG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0XHRcdFJlZmxvdy53cml0ZUNhbGxiYWNrcy5wdXNoKCgpID0+IHtcclxuXHRcdFx0XHRcdGNhbGxiYWNrKHJlc29sdmUsIHJlamVjdCk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdFx0UmVmbG93LndyaXRlQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xyXG5cdH0sXHJcblx0XHJcblx0LyoqXHJcblx0ICogQSBzcGVjaWFsIGNvbnN0cnVjdCBmb3IgRE9NIG1hbmlwdWxhdGlvbnMgdGhhdCBzcGFuXHJcblx0ICogb25lIG9yIG1vcmUgcmVhZC93cml0ZSBjeWNsZXMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb24gXHRyZWFkXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uIFx0d3JpdGVcclxuXHQgKiBAcGFyYW0gbWl4ZWRcdFx0cHJldlRyYW5zYWN0aW9uXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWR8bWl4ZWRcclxuXHQgKi9cclxuXHRjeWNsZTogZnVuY3Rpb24ocmVhZCwgd3JpdGUsIHByZXZUcmFuc2FjdGlvbikge1xyXG5cdFx0UmVmbG93Lm9ucmVhZCgoKSA9PiB7XHJcblx0XHRcdC8vIFJlY29yZCBpbml0aWFsIHZhbHVlc1xyXG5cdFx0XHR2YXIgcmVhZFJldHVybiA9IHJlYWQocHJldlRyYW5zYWN0aW9uKTtcclxuXHRcdFx0aWYgKHJlYWRSZXR1cm4pIHtcclxuXHRcdFx0XHQvLyBDYWxsIGVyaXRlLCB0aGUgdHJhbnNhdGlvblxyXG5cdFx0XHRcdHZhciBjYWxsV3JpdGUgPSAocmVhZFJldHVybikgPT4ge1xyXG5cdFx0XHRcdFx0UmVmbG93Lm9ud3JpdGUoKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHR2YXIgd3JpdGVSZXR1cm4gPSB3cml0ZShyZWFkUmV0dXJuLCBwcmV2VHJhbnNhY3Rpb24pO1xyXG5cdFx0XHRcdFx0XHRpZiAod3JpdGVSZXR1cm4pIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBSZXBlYXQgdHJhbnNhY3Rpb25cclxuXHRcdFx0XHRcdFx0XHR2YXIgcmVwZWF0VHJhbnNhY3Rpb24gPSAod3JpdGVSZXR1cm4pID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdFJlZmxvdy5jeWNsZShyZWFkLCB3cml0ZSwgd3JpdGVSZXR1cm4pO1xyXG5cdFx0XHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdFx0XHRcdFx0Ly8gSWYgXCJ3cml0ZVwiIHJldHVybnMgYSBwcm9taXNlLCB3ZSB3YWl0IHVudGlsIGl0IGlzIHJlc29sdmVkXHJcblx0XHRcdFx0XHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdFx0XHRcdFx0aWYgKHdyaXRlUmV0dXJuIGluc3RhbmNlb2Ygd2luZG93LlByb21pc2UpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHdyaXRlUmV0dXJuLnRoZW4ocmVwZWF0VHJhbnNhY3Rpb24pO1xyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXBlYXRUcmFuc2FjdGlvbigpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0XHQvLyBJZiBcInJlYWRcIiByZXR1cm5zIGEgcHJvbWlzZSwgd2Ugd2FpdCB1bnRpbCBpdCBpcyByZXNvbHZlZFxyXG5cdFx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHRcdGlmIChyZWFkUmV0dXJuIGluc3RhbmNlb2Ygd2luZG93LlByb21pc2UpIHtcclxuXHRcdFx0XHRcdHJlYWRSZXR1cm4udGhlbihjYWxsV3JpdGUpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRjYWxsV3JpdGUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0sXHJcbn07XHJcblJlZmxvdy5fcnVuKCk7XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IFJlZmxvdzsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IHdyaXRlU3luYyBmcm9tICcuL3dyaXRlU3luYy5qcyc7XHJcbmltcG9ydCBSZWZsb3cgZnJvbSAnLi4vUmVmbG93LmpzJztcclxuXHJcbi8qKlxyXG4gKiBUaGUgYXN5bmMgdHlwZSBvZiB3cml0ZVN5bmMoKS5cclxuICpcclxuICogQHNlZSBjc3NXcml0ZSgpXHJcbiAqXHJcbiAqIEByZXR1cm4gUHJvbWlzZVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZWwsIG5hbWVPclByb3BzLCB2YWwgPSBudWxsKSB7XHJcblx0cmV0dXJuIFJlZmxvdy5vbndyaXRlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdHJlc29sdmUoX2lzRnVuY3Rpb24obmFtZU9yUHJvcHMpID8gbmFtZU9yUHJvcHMoZWwpIDogd3JpdGVTeW5jKGVsLCBuYW1lT3JQcm9wcywgdmFsKSk7XHJcblx0XHR9IGNhdGNoKGUpIHtcclxuXHRcdFx0cmVqZWN0KGUpO1xyXG5cdFx0fVxyXG5cdH0sIHRydWUvKndpdGhQcm9taXNlKi8pO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgY3NzUmVhZElubGluZSBmcm9tICcuL3JlYWRJbmxpbmUuanMnO1xyXG5pbXBvcnQgY3NzUmVhZEFzeW5jIGZyb20gJy4vcmVhZEFzeW5jLmpzJztcclxuaW1wb3J0IGNzc1dyaXRlQXN5bmMgZnJvbSAnLi93cml0ZUFzeW5jLmpzJztcclxuXHJcbi8qKlxyXG4gKiBBcHBsaWVzIHNvbWUgQ1NTIHdpdGhpbiBhIHRyYW5zYWN0aW9uLCBnZXRzIGNvbXB1dGVkIHZhbHVlcyBmb3IgdXNlIGJlZm9yZSByb2xsaW5nIGJhY2suXHJcbiAqIElmIGEgY2FsbGJhY2sgaXMgcHJvdmlkZWQsIGl0IHN5bmNlcyB0aGUgZW50aXJlIG9wZXJhdGlvbiB3aXRoIFJlZmxvdydzIG5vcm1hbCByZWFkL3dyaXRlIGN5Y2xlcy5cclxuICpcclxuICogQHBhcmFtIEhUTUxFbGVtZW50XHRcdGVsIFxyXG4gKiBAcGFyYW0gc3RyaW5nfG9iamVjdFx0XHRuYW1lT3JQcm9wc1xyXG4gKiBAcGFyYW0gc3RyaW5nfG51bWJlclx0XHR2YWxcclxuICogQHBhcmFtIGZ1bmN0aW9uXHRcdFx0cmVhZENhbGxiYWNrXHJcbiAqXHJcbiAqIEByZXR1cm4gUHJvbWlzZVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZWwsIG5hbWVPclByb3BzLCB2YWwgPSBudWxsLCByZWFkQ2FsbGJhY2sgPSBudWxsKSB7XHJcblx0dmFyIHByb3BzVG9SZWFkID0gX2lzT2JqZWN0KG5hbWVPclByb3BzKSA/IE9iamVjdC5rZXlzKG5hbWVPclByb3BzKSA6IG5hbWVPclByb3BzO1xyXG5cdHJlYWRDYWxsYmFjayA9IF9pc09iamVjdChuYW1lT3JQcm9wcykgPyB2YWwgOiByZWFkQ2FsbGJhY2s7XHJcblx0Ly8gLS0tLS0tLS0tLS0tLVxyXG5cdHZhciBpbmxpbmVTYXZlcG9pbnQgPSBjc3NSZWFkSW5saW5lKGVsLCBwcm9wc1RvUmVhZCk7XHJcblx0cmV0dXJuIGNzc1dyaXRlQXN5bmMoZWwsIG5hbWVPclByb3BzLCB2YWwpLnRoZW4oKCkgPT4ge1xyXG5cdFx0cmV0dXJuIGNzc1JlYWRBc3luYyhlbCwgcmVhZENhbGxiYWNrIHx8IHByb3BzVG9SZWFkKS50aGVuKHJlbmRlcmluZyA9PiB7XHJcblx0XHRcdC8vIFdlIHJldHVybiB0aGUgcmVuZGVyaW5nIGluIGEgcHJvbWlzZVxyXG5cdFx0XHRyZXR1cm4gY3NzV3JpdGVBc3luYyhlbCwgaW5saW5lU2F2ZXBvaW50KS50aGVuKCgpID0+IHtcclxuXHRcdFx0XHRyZXR1cm4gcmVuZGVyaW5nO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cdH0pO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgcnVsZUNhbGxiYWNrIGZyb20gJy4vcnVsZUNhbGxiYWNrLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGlubGluZS1vbmx5IENTUyBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0gSFRNTEVsZW1lbnRcdFx0ZWxcclxuICogQHBhcmFtIHN0cmluZ3xvYmplY3RcdFx0cHJvcFxyXG4gKiBAcGFyYW0gYm9vbHxzdHJpbmdcdFx0d2l0aFZlbmRvclZlcnNpb25zXHJcbiAqXHJcbiAqIEByZXR1cm4gbWl4ZWRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVsLCBwcm9wcywgd2l0aFZlbmRvclZlcnNpb24gPSAnYXV0bycpIHtcclxuXHR2YXIgc3R5bGUgPSBlbC5nZXRBdHRyaWJ1dGUoJ3N0eWxlJyk7XHJcblx0aWYgKHByb3BzID09PSAnYWxsJykge1xyXG5cdFx0cHJvcHMgPSBzdHlsZS5zcGxpdCgnOycpLm1hcChzdHIgPT4gc3RyLnNwbGl0KCc6JylbMF0pO1xyXG5cdH1cclxuXHRyZXR1cm4gcnVsZUNhbGxiYWNrKHByb3BzLCBwcm9wID0+IHtcclxuXHRcdHZhciByZWdleCA9IG5ldyBSZWdFeHAoJztbIF0qPycgKyBwcm9wICsgJzooW147XSspOz8nLCAnZycpO1xyXG5cdFx0cmV0dXJuIChyZWdleC5leGVjKCc7JyArIHN0eWxlKSB8fCBbJycsICcnXSlbMV0udHJpbSgpO1xyXG5cdH0sIHdpdGhWZW5kb3JWZXJzaW9uKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0Z1bmN0aW9uIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCByZWFkU3luYyBmcm9tICcuL3JlYWRTeW5jLmpzJztcclxuaW1wb3J0IFJlZmxvdyBmcm9tICcuLi9SZWZsb3cuanMnO1xyXG5cclxuLyoqXHJcbiAqIFRoZSBhc3luYyB0eXBlIG9mIHJlYWRTeW5jKCkuXHJcbiAqXHJcbiAqIEBzZWUgcmVhZFN5bmMoKVxyXG4gKlxyXG4gKiBAcmV0dXJuIFByb21pc2VcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVsLCBwcm9wcywgcHN1ZWRvID0gbnVsbCkge1xyXG5cdHJldHVybiBSZWZsb3cub25yZWFkKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdHJlc29sdmUoX2lzRnVuY3Rpb24ocHJvcHMpID8gcHJvcHMoZWwpIDogcmVhZFN5bmMoZWwsIHByb3BzLCBwc3VlZG8pKTtcclxuXHRcdH0gY2F0Y2goZSkge1xyXG5cdFx0XHRyZWplY3QoZSk7XHJcblx0XHR9XHJcblx0fSwgdHJ1ZS8qd2l0aFByb21pc2UqLyk7XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnLi4vanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBfbWVyZ2VDYWxsYmFjayBmcm9tICcuL21lcmdlQ2FsbGJhY2suanMnO1xyXG5cclxuLyoqXHJcbiAqIENvcGllcyBvbmx5IHByb3BlcnRpZXMgb2YgYW4gb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHRvYmpcclxuICogQHBhcmFtIGFycmF5XHRcdCBcdG9ubHlcclxuICogQHBhcmFtIGFycmF5XHRcdCBcdGV4Y2VwdFxyXG4gKlxyXG4gKiBAcmV0dXJuIG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqLCBmaWx0ZXIgPSBbXSkge1xyXG5cdHJldHVybiBfbWVyZ2VDYWxsYmFjayhbe30sIG9ial0sIChrZXksIG9iajEsIG9iajIpID0+IHtcclxuXHRcdGlmICghX2lzRnVuY3Rpb24ob2JqMltrZXldKSkge1xyXG5cdFx0XHRyZXR1cm4gX2lzRnVuY3Rpb24oZmlsdGVyKSA/IGZpbHRlcihrZXkpIFxyXG5cdFx0XHRcdDogKF9pc0FycmF5KGZpbHRlcikgJiYgZmlsdGVyLmxlbmd0aCA/IGZpbHRlci5pbmRleE9mKGtleSkgPiAtMSA6IHRydWUpO1xyXG5cdFx0fVxyXG5cdH0sIGZhbHNlLypkZWVwUHJvcHMqLywgZmFsc2UvKmlzUmVwbGFjZSovLCBmYWxzZS8qd2l0aFN5bWJvbHMqLyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogSGVscGVyIG1ldGhvZDogcGFyc2VzIGEgQ1NTIHN0cmluZyBpbnRvIGFuIGFzc29jaWF0aXZlIGFycmF5LlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nXHQgXHRjc3NcclxuICpcclxuICogQHJldHVybiBvYmplY3RcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNzcykge1xyXG5cdHZhciBfc3BsaXQgPSB7fTtcclxuXHRjc3Muc3BsaXQoJzsnKS5maWx0ZXIociA9PiByKS5mb3JFYWNoKHJ1bGUgPT4ge1xyXG5cdFx0cnVsZSA9IHJ1bGUuc3BsaXQoJzonKTtcclxuXHRcdF9zcGxpdFtydWxlWzBdLnRyaW0oKV0gPSBydWxlWzFdLnRyaW0oKTtcclxuXHR9KTtcclxuXHRyZXR1cm4gX3NwbGl0O1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2NvcHlQbGFpbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9jb3B5UGxhaW4uanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IHN0eWxlc2hlZXRSdWxlQ2FsbGJhY2sgZnJvbSAnLi9zdHlsZXNoZWV0UnVsZUNhbGxiYWNrLmpzJztcclxuaW1wb3J0IHJ1bGVDYWxsYmFjayBmcm9tICcuL3J1bGVDYWxsYmFjay5qcyc7XHJcbmltcG9ydCB2ZW5kb3JQcmVmaXggZnJvbSAnLi92ZW5kb3JQcmVmaXguanMnO1xyXG5pbXBvcnQgcGFyc2VSdWxlcyBmcm9tICcuL3BhcnNlUnVsZXMuanMnO1xyXG5cclxuLyoqXHJcbiAqIEZJbmRzIHRoZSBrZXlmcmFtZXMgb2YgdGhlIGdpdmVuIGFuaW1hdGlvbiBuYW1lKHMpIGFjcm9zcyBhbGwgc3R5bGVzaGVldHMuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmd8YXJyYXlcdFx0bmFtZVxyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdFx0bm9DYWNoZVxyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdFx0bm9ybWFsaXplXHJcbiAqXHJcbiAqIEByZXR1cm4gTlVMTHxib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBub0NhY2hlLCBub3JtYWxpemUgPSB0cnVlKSB7XHJcblx0Ly8gQXNrIGNhY2hlIGZpcnN0Li4uXHJcblx0dmFyIGNhY2hlS2V5ID0gX2lzQXJyYXkobmFtZSkgPyBuYW1lLmpvaW4oJ3wnKSA6IG5hbWU7XHJcblx0aWYgKCFub0NhY2hlICYmIHN0eWxlc2hlZXRLZXlmcmFtZXNDYWNoZVtjYWNoZUtleV0pIHtcclxuXHRcdHJldHVybiBzdHlsZXNoZWV0S2V5ZnJhbWVzQ2FjaGVbY2FjaGVLZXldO1xyXG5cdH1cclxuXHQvLyBQYXJzZSBrZXlmcmFtZXMgcnVsZVxyXG5cdHZhciBwYXJzZUtleWZyYW1lcyA9IGZ1bmN0aW9uKHJ1bGVEZWZpbml0aW9uKSB7XHJcblx0XHR2YXIga2V5ZnJhbWVzID0gW107XHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVEZWZpbml0aW9uLmNzc1J1bGVzLmxlbmd0aDsgaSArKykge1xyXG5cdFx0XHR2YXIga2V5ZnJhbWVSdWxlID0gcnVsZURlZmluaXRpb24uY3NzUnVsZXNbaV07XHJcblx0XHRcdHZhciBrZXlmcmFtZSA9IHBhcnNlUnVsZXMoa2V5ZnJhbWVSdWxlLmNzc1RleHQucmVwbGFjZShrZXlmcmFtZVJ1bGUua2V5VGV4dCwgJycpLnJlcGxhY2UoJ3snLCAnJykucmVwbGFjZSgnfScsICcnKS50cmltKCkpO1xyXG5cdFx0XHR2YXIgb2Zmc2V0cyA9IChrZXlmcmFtZVJ1bGUua2V5VGV4dCB8fCAnICcpLnNwbGl0KCcsJykubWFwKGtleSA9PiBrZXkgPT09ICdmcm9tJyA/IDAgOiAoa2V5ID09PSAndG8nID8gMSA6IChwYXJzZUludChrZXkpIC8gMTAwKSkpO1xyXG5cdFx0XHRpZiAobm9ybWFsaXplKSB7XHJcblx0XHRcdFx0bm9ybWFsaXplVG9XQUFQSShrZXlmcmFtZSwgWydhbmltYXRpb24tJywgJ3RyYW5zaXRpb24tJ10pO1xyXG5cdFx0XHRcdHdoaWxlKG9mZnNldHMubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHR2YXIgX2tleWZyYW1lID0gX2NvcHlQbGFpbihrZXlmcmFtZSk7XHJcblx0XHRcdFx0XHRfa2V5ZnJhbWUub2Zmc2V0ID0gb2Zmc2V0cy5zaGlmdCgpO1xyXG5cdFx0XHRcdFx0a2V5ZnJhbWVzLnB1c2goX2tleWZyYW1lKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0a2V5ZnJhbWUub2Zmc2V0ID0gb2Zmc2V0cy5sZW5ndGggPiAxID8gb2Zmc2V0cyA6IG9mZnNldHNbMF07XHJcblx0XHRcdFx0a2V5ZnJhbWVzLnB1c2goa2V5ZnJhbWUpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4ga2V5ZnJhbWVzLnNvcnQoKGEsIGIpID0+IGEub2Zmc2V0ID09PSBiLm9mZnNldCA/IDAgOiBhLm9mZnNldCA+IGIub2Zmc2V0ID8gMSA6IC0xKTtcclxuXHR9O1xyXG5cdC8vIEZpbmQga2V5ZnJhbWVzXHJcblx0dmFyIGFsbEtleWZyYW1lcyA9IFtdO1xyXG5cdHN0eWxlc2hlZXRSdWxlQ2FsbGJhY2socnVsZURlZmluaXRpb24gPT4ge1xyXG5cdFx0aWYgKChydWxlRGVmaW5pdGlvbi50eXBlID09PSB3aW5kb3cuQ1NTUnVsZS5LRVlGUkFNRVNfUlVMRSB8fCBydWxlRGVmaW5pdGlvbi50eXBlID09PSB3aW5kb3cuQ1NTUnVsZVt2ZW5kb3JQcmVmaXguYXBpLnRvVXBwZXJDYXNlKCkgKyAnX0tFWUZSQU1FU19SVUxFJ10pXHJcblx0XHQmJiAoX2lzQXJyYXkobmFtZSkgPyBuYW1lIDogW25hbWVdKS5pbmRleE9mKHJ1bGVEZWZpbml0aW9uLm5hbWUpID4gLTEpIHtcclxuXHRcdFx0YWxsS2V5ZnJhbWVzID0gYWxsS2V5ZnJhbWVzLmNvbmNhdChhbGxLZXlmcmFtZXMsIHBhcnNlS2V5ZnJhbWVzKHJ1bGVEZWZpbml0aW9uKSk7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fVxyXG5cdH0sIHRydWUvKnJldmVyc2VkKi8pO1xyXG5cdC8vIFNhdmVcclxuXHRzdHlsZXNoZWV0S2V5ZnJhbWVzQ2FjaGVbY2FjaGVLZXldID0gYWxsS2V5ZnJhbWVzO1xyXG5cdHJldHVybiBhbGxLZXlmcmFtZXM7XHJcbn07XHJcblxyXG4vKipcclxuICogTm9ybWFsaXplcyBDU1MgYW5pbWF0aW9uIHByb3BlcnRpZXMgdG8gV0FBUEkgY29tcGF0aWJsZSBwcm9wZXJ0aWVzXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdFx0XHRhbmltYXRpb25Qcm9wc1xyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF1XHRcdHByZWZpeFxyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF1XHRcdG9mZnNldFxyXG4gKlxyXG4gKiBAcmV0dXJuIG51bGxcclxuICovXHJcbmNvbnN0IG5vcm1hbGl6ZVRvV0FBUEkgPSBmdW5jdGlvbihhbmltYXRpb25Qcm9wcywgb2Zmc2V0LCBwcmVmaXggPSAnJykge1xyXG5cdGlmIChfaXNBcnJheShwcmVmaXgpKSB7XHJcblx0XHRwcmVmaXguZm9yRWFjaChwcmVmID0+IG5vcm1hbGl6ZVRvV0FBUEkoYW5pbWF0aW9uUHJvcHMsIHByZWYpKTtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblx0aWYgKGFuaW1hdGlvblByb3BzW3ByZWZpeCArICd0aW1pbmctZnVuY3Rpb24nXSkge1xyXG5cdFx0YW5pbWF0aW9uUHJvcHMuZWFzaW5nID0gYW5pbWF0aW9uUHJvcHNbcHJlZml4ICsgJ3RpbWluZy1mdW5jdGlvbiddO1xyXG5cdFx0ZGVsZXRlIGFuaW1hdGlvblByb3BzW3ByZWZpeCArICd0aW1pbmctZnVuY3Rpb24nXTtcclxuXHR9XHJcblx0aWYgKGFuaW1hdGlvblByb3BzW3ByZWZpeCArICdmaWxsLW1vZGUnXSkge1xyXG5cdFx0YW5pbWF0aW9uUHJvcHMuZmlsbCA9IGFuaW1hdGlvblByb3BzW3ByZWZpeCArICdmaWxsLW1vZGUnXTtcclxuXHRcdGRlbGV0ZSBhbmltYXRpb25Qcm9wc1twcmVmaXggKyAnZmlsbC1tb2RlJ107XHJcblx0fVxyXG5cdGlmIChhbmltYXRpb25Qcm9wc1twcmVmaXggKyAnaXRlcmF0aW9uLWNvdW50J10pIHtcclxuXHRcdGFuaW1hdGlvblByb3BzLml0ZXJhdGlvbnMgPSBhbmltYXRpb25Qcm9wc1twcmVmaXggKyAnaXRlcmF0aW9uLWNvdW50J107XHJcblx0XHRkZWxldGUgYW5pbWF0aW9uUHJvcHNbcHJlZml4ICsgJ2l0ZXJhdGlvbi1jb3VudCddO1xyXG5cdFx0aWYgKGFuaW1hdGlvblByb3BzLml0ZXJhdGlvbnMgPT09ICdpbmZpbml0ZScpIHtcclxuXHRcdFx0YW5pbWF0aW9uUHJvcHMuaXRlcmF0aW9ucyA9IEluZmluaXR5O1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHRcclxuLyoqXHJcbiAqIEB2YXIgb2JqZWN0XHJcbiAqL1xyXG5jb25zdCBzdHlsZXNoZWV0S2V5ZnJhbWVzQ2FjaGUgPSB7fTtcclxuIiwiXHJcbi8qKlxyXG4gKiBMb29wcyB0aHJ1IGFsbCBydWxlcyBpbiBhbGwgc3R5bGVzaGVldHMgKGluIHJldmVyc2Ugb3JkZXIgcG9zc2libGUpLlxyXG4gKlxyXG4gKiBAcGFyYW0gZnVuY3Rpb25cdFx0XHRjYWxsYmFja1xyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdFx0cmV2ZXJzZWRcclxuICpcclxuICogQHJldHVybiBOVUxMfGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCByZXZlcnNlZCkge1xyXG5cdHZhciBzdHlsZXNoZWV0cyA9IGRvY3VtZW50LnN0eWxlU2hlZXRzO1xyXG5cdHZhciBzdHlsZXNoZWV0Q2FsbGJhY2sgPSBmdW5jdGlvbihzdHlsZXNoZWV0KSB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRmb3IgKHZhciBrID0gMDsgayA8IHN0eWxlc2hlZXQuY3NzUnVsZXMubGVuZ3RoOyBrICsrKSB7XHJcblx0XHRcdFx0dmFyIHJ1bGVEZWZpbml0aW9uID0gc3R5bGVzaGVldC5jc3NSdWxlc1trXTtcclxuXHRcdFx0XHRpZiAoY2FsbGJhY2socnVsZURlZmluaXRpb24pID09PSB0cnVlKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0gY2F0Y2ggKGUpIHt9XHJcblx0fVxyXG5cdGlmIChyZXZlcnNlZCkge1xyXG5cdFx0Zm9yICh2YXIgaSA9IHN0eWxlc2hlZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtLSkge1xyXG5cdFx0XHRpZiAoc3R5bGVzaGVldENhbGxiYWNrKHN0eWxlc2hlZXRzW2ldKSA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSBlbHNlIHtcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzaGVldHMubGVuZ3RoOyBpICsrKSB7XHJcblx0XHRcdGlmIChzdHlsZXNoZWV0Q2FsbGJhY2soc3R5bGVzaGVldHNbaV0pID09PSB0cnVlKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfZWFjaCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9lYWNoLmpzJztcclxuaW1wb3J0IF9leGNsdWRlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2V4Y2x1ZGUuanMnO1xyXG5pbXBvcnQgX3B1c2hVbmlxdWUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvcHVzaFVuaXF1ZS5qcyc7XHJcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1N0cmluZy5qcyc7XHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzTnVtYmVyIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNOdW1iZXIuanMnO1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVtZXJpYy5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzRW1wdHkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0VtcHR5LmpzJztcclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVW5kZWZpbmVkLmpzJztcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbmltcG9ydCByZWFkU3luYyBmcm9tICcuLi9jc3MvcmVhZFN5bmMuanMnO1xyXG5pbXBvcnQgd3JpdGVTeW5jIGZyb20gJy4uL2Nzcy93cml0ZVN5bmMuanMnO1xyXG5pbXBvcnQgcmVhZFJlbmRlcmluZyBmcm9tICcuLi9jc3MvcmVhZFJlbmRlcmluZy5qcyc7XHJcbmltcG9ydCByZWFkU3luY0tleWZyYW1lcyBmcm9tICcuLi9jc3MvcmVhZEtleWZyYW1lcy5qcyc7XHJcbmltcG9ydCBjc3NWYXJSZWFkIGZyb20gJy4uL2Nzcy92YXJSZWFkLmpzJztcclxuaW1wb3J0IGNzc0F1dG9weCBmcm9tICcuLi9jc3MvYXV0b3B4LmpzJztcclxuaW1wb3J0IFRyYW5zZm9ybVJ1bGUgZnJvbSAnLi4vY3NzL1RyYW5zZm9ybVJ1bGUuanMnO1xyXG5pbXBvcnQgUmVmbG93IGZyb20gJy4uL1JlZmxvdy5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBFbGVtZW50IHV0aWxpdHkgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5cdFx0XHRcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQW5pIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIGFuIGFtaWF0aW9uIGZyb21cclxuXHQgKiBhbnkgb2Yga2V5ZnJhbWVzLCBDU1Mga2V5ZnJhbWUgbmFtZSwgb3IgQ1NTIG9iamVjdC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBET01Ob2RlXHRcdFx0XHRlbFxyXG5cdCAqIEBwYXJhbSBhcnJheXxvYmplY3R8c3RyaW5nXHRlZmZlY3RcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdFx0XHRwYXJhbXNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdGhpc1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGVsLCBlZmZlY3QsIHBhcmFtcyA9IHt9KSB7XHJcblx0XHQvLyBQcml2YXRlIHByb3BlcnRpZXNcclxuXHRcdHRoaXMuZWwgPSBlbDtcclxuXHRcdHRoaXMuJCA9IHtcclxuXHRcdFx0cmVhZHlDYWxsYmFja3M6IFtdLFxyXG5cdFx0XHRmaW5pc2hDYWxsYmFja3M6IFtdLFxyXG5cdFx0XHRjYW5jZWxDYWxsYmFja3M6IFtdLFxyXG5cdFx0XHRwYXJhbXM6IHBhcmFtcyxcclxuXHRcdH07XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gTm9ybWFsaXplIHBhcmFtcy4uLlxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdHBhcmFtcy5maWxsID0gcGFyYW1zLmZpbGwgfHwgJ2JvdGgnO1xyXG5cdFx0aWYgKCEoJ2R1cmF0aW9uJyBpbiBwYXJhbXMpKSB7XHJcblx0XHRcdHBhcmFtcy5kdXJhdGlvbiA9IDQwMDtcclxuXHRcdH1cclxuXHRcdC8vIENvbnZlcnQgY2VydGFpbiBlYXNpbmcgc3RyaW5ncyB0byBiZWl6aWVyIGN1cnZlc1xyXG5cdFx0aWYgKHBhcmFtcy5lYXNpbmcgJiYgWydlYXNlLWluJywgJ2Vhc2Utb3V0JywgJ2Vhc2UtaW4tb3V0J10uaW5kZXhPZihwYXJhbXMuZWFzaW5nKSA9PT0gLTEgJiYgcGFyYW1zLmVhc2luZy5pbmRleE9mKCcoJykgPT09IC0xKSB7XHJcblx0XHRcdC8vIE5hdGl2ZSBlYXNpbmdzLCBjdXN0b20gY3ViaWMtYmV6aWVycywgb3IgRHJhbWF0aWMncyBjdWJpYy1iZXppZXJzXHJcblx0XHRcdHBhcmFtcy5lYXNpbmcgPSBjc3NWYXJSZWFkKHBhcmFtcy5lYXNpbmcpIHx8IHBhcmFtcy5lYXNpbmc7XHJcblx0XHR9XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gTm9ybWFsaXplIGtleWZyYW1lcy4uLlxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdHZhciBkZXN0cnVjdGFibGVzID0ge1xyXG5cdFx0XHRpbnNldDogWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXSxcclxuXHRcdFx0bWFyZ2luOiBbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLFxyXG5cdFx0XHRwYWRkaW5nOiBbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLFxyXG5cdFx0fTtcclxuXHRcdGNvbnN0IGluaXQgPSBrZXlmcmFtZXMgPT4ge1xyXG5cdFx0XHRrZXlmcmFtZXMgPSBrZXlmcmFtZXMuc2xpY2UoKTtcclxuXHRcdFx0Ly8gTWluZSBvdXQgZW5kLXN0YXRlIHByb3BlcnRpZXNcclxuXHRcdFx0dmFyIGZpcnN0RnJhbWUgPSB7fTtcclxuXHRcdFx0dmFyIGxhc3RGcmFtZSA9IHt9O1xyXG5cdFx0XHRfZWFjaChrZXlmcmFtZXMsIChpLCBrZXlmcmFtZSkgPT4ge1xyXG5cdFx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdFx0Ly8gV2UgY2FuIGRlc3R1Y3R1cmUgdGhpbmdzIGxpa2UgXCJpbnNldFwiKFwibGVmdFwiLCBcInRvcFwiLCBcInJpZ2h0XCIsIFwiYm90dG9tXCIpLCBldGNcclxuXHRcdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHRcdF9lYWNoKGRlc3RydWN0YWJsZXMsIChkZXN0cnVjdGFibGVQcm9wLCBtZWFuaW5nKSA9PiB7XHJcblx0XHRcdFx0XHRpZiAoa2V5ZnJhbWVbZGVzdHJ1Y3RhYmxlUHJvcF0pIHtcclxuXHRcdFx0XHRcdFx0aWYgKF9pc09iamVjdChrZXlmcmFtZVtkZXN0cnVjdGFibGVQcm9wXSkpIHtcclxuXHRcdFx0XHRcdFx0XHRrZXlmcmFtZVtkZXN0cnVjdGFibGVQcm9wXSA9IG1lYW5pbmcubWFwKGtleSA9PiBrZXlmcmFtZVtkZXN0cnVjdGFibGVQcm9wXVtrZXldKS5maWx0ZXIodmFsID0+ICFfaXNVbmRlZmluZWQodmFsKSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aWYgKF9pc0FycmF5KGtleWZyYW1lW2Rlc3RydWN0YWJsZVByb3BdKSkge1xyXG5cdFx0XHRcdFx0XHRcdGtleWZyYW1lW2Rlc3RydWN0YWJsZVByb3BdID0ga2V5ZnJhbWVbZGVzdHJ1Y3RhYmxlUHJvcF0uam9pbignICcpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0XHQvLyBXZSBhY2NlcHQgYW4gb2JqZWN0IGZvciB0aGUgXCJ0cmFuc2Zvcm1cIiBwcm9wZXJ0eVxyXG5cdFx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdFx0aWYgKGtleWZyYW1lLnRyYW5zZm9ybSAmJiBfaXNPYmplY3Qoa2V5ZnJhbWUudHJhbnNmb3JtKSAmJiAhKGtleWZyYW1lLnRyYW5zZm9ybSBpbnN0YW5jZW9mIFRyYW5zZm9ybVJ1bGUpKSB7XHJcblx0XHRcdFx0XHRrZXlmcmFtZS50cmFuc2Zvcm0gPSAobmV3IFRyYW5zZm9ybVJ1bGUoa2V5ZnJhbWUudHJhbnNmb3JtKSkudG9TdHJpbmcoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Ly8gTWFyc2hhbCBvdXQgaXRzIHByb3BlcnRpZXNcclxuXHRcdFx0XHRfZXhjbHVkZShPYmplY3Qua2V5cyhrZXlmcmFtZSksICdvZmZzZXQnLCAnZWFzaW5nJykuZm9yRWFjaChwcm9wID0+IHtcclxuXHRcdFx0XHRcdC8vIEF1dG8tcHhcclxuXHRcdFx0XHRcdGlmIChjc3NBdXRvcHguaW5jbHVkZXMocHJvcCkgJiYgX2lzTnVtZXJpYyhrZXlmcmFtZVtwcm9wXSkpIHtcclxuXHRcdFx0XHRcdFx0a2V5ZnJhbWVbcHJvcF0gKz0gJ3B4JztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdC8vIFNhdmUgbGFzdCBzZWVuIHZhbHVlIG9mIHRoaXMgcHJvcGVydHlcclxuXHRcdFx0XHRcdC8vIGFjcm9zcyBhbGwga2V5ZnJhbWVzLi4uXHJcblx0XHRcdFx0XHRmaXJzdEZyYW1lW3Byb3BdID0gdHlwZW9mIGZpcnN0RnJhbWVbcHJvcF0gPT09ICd1bmRlZmluZWQnID8ga2V5ZnJhbWVbcHJvcF0gOiBmaXJzdEZyYW1lW3Byb3BdO1xyXG5cdFx0XHRcdFx0bGFzdEZyYW1lW3Byb3BdID0ga2V5ZnJhbWVbcHJvcF07XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHQvLyBUaGUgYW5pbWF0aW9uLi4uXHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0dmFyIGFuaW0gPSB0aGlzLmVsLmFuaW1hdGUoa2V5ZnJhbWVzLCBwYXJhbXMpO1xyXG5cdFx0XHR9IGNhdGNoKGUpIHtcclxuXHRcdFx0XHR0aGlzLiQuZXJyb3IgPSBlO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBSZXZlcnNlXHJcblx0XHRcdGlmIChwYXJhbXMucmV2ZXJzZSkge1xyXG5cdFx0XHRcdGFuaW0ucmV2ZXJzZSgpO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIEEgbGl0dGxlIHBvbGlmeWxsXHJcblx0XHRcdGlmICghYW5pbS5lZmZlY3QpIHtcclxuXHRcdFx0XHRhbmltLmVmZmVjdCA9IHt9O1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICghYW5pbS5lZmZlY3QuZHVyYXRpb24pIHtcclxuXHRcdFx0XHRhbmltLmVmZmVjdC5kdXJhdGlvbiA9IHBhcmFtcy5kdXJhdGlvbjtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHQvLyBcIm9uZmluaXNoXCIgYW5kIFwib25jYW5jZWxcIiBsaXN0ZW5lclxyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHRhbmltLm9uZmluaXNoID0gKCkgPT4ge1xyXG5cdFx0XHRcdC8vIEFzIGdldHRlciwgYXMgaXQgd2VyZVxyXG5cdFx0XHRcdGlmIChwYXJhbXMuY2FuY2VsRm9yQ3NzKSB7XHJcblx0XHRcdFx0XHRhbmltLmNhbmNlbCgpO1xyXG5cdFx0XHRcdFx0aWYgKHBhcmFtcy5maWxsID09PSAnZm9yd2FyZHMnIHx8IHBhcmFtcy5maWxsID09PSAnYm90aCcpIHtcclxuXHRcdFx0XHRcdFx0d3JpdGVTeW5jKHRoaXMuZWwsIGxhc3RGcmFtZSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHRoaXMuJC5maW5pc2hDYWxsYmFja3MuZm9yRWFjaChjYWxsYmFjayA9PiB7XHJcblx0XHRcdFx0XHRjYWxsYmFjayh0aGlzLmVsKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fTtcclxuXHRcdFx0Ly8gb25jYW5jZWwgbGlzdGVuZXJcclxuXHRcdFx0YW5pbS5vbmNhbmNlbCA9ICgpID0+IHtcclxuXHRcdFx0XHQvLyBBcyBnZXR0ZXIsIGFzIGl0IHdlcmVcclxuXHRcdFx0XHR0aGlzLiQuY2FuY2VsQ2FsbGJhY2tzLmZvckVhY2goY2FsbGJhY2sgPT4ge1xyXG5cdFx0XHRcdFx0Y2FsbGJhY2sodGhpcy5lbCk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH07XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0dGhpcy4kLmFuaW0gPSBhbmltO1xyXG5cdFx0XHR0aGlzLiQuZmlyc3RGcmFtZSA9IGZpcnN0RnJhbWU7XHJcblx0XHRcdHRoaXMuJC5sYXN0RnJhbWUgPSBsYXN0RnJhbWU7XHJcblx0XHRcdHRoaXMuJC5wYXJhbXMgPSBwYXJhbXM7XHJcblx0XHRcdGlmICh0aGlzLiQucmVhZHlDYWxsYmFja3MubGVuZ3RoKSB7XHJcblx0XHRcdFx0dGhpcy4kLnJlYWR5Q2FsbGJhY2tzLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soYW5pbSwgcGFyYW1zLCBmaXJzdEZyYW1lLCBsYXN0RnJhbWUpKTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHR9O1xyXG5cdFx0aWYgKF9pc0Z1bmN0aW9uKGVmZmVjdCkpIHtcclxuXHRcdFx0ZWZmZWN0KGVsLCBpbml0KTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdEFuaS5jcmVhdGVDYWxsYmFjayhlbCwgZWZmZWN0LCBpbml0LCBlcnJvciA9PiB7XHJcblx0XHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHRcdHRoaXMuJC5lcnJvciA9IGVycm9yO1xyXG5cdFx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFx0XHJcblx0LyoqXHJcblx0ICogUmV0dXJucyB0aGUgYW5pbWF0aW9uLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBBbmltYXRpb25cclxuXHQgKi9cclxuXHRnZXQgYW5pbSgpIHtcclxuXHRcdHJldHVybiB0aGlzLiQuYW5pbTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQW5pbWF0aW9uLXJlYWR5IGNhbGxiYWNrLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uXHRcdHN1Y2Nlc1xyXG5cdCAqIEBwYXJhbSBmdW5jdGlvblx0XHRlcnJvclxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0cmVhZHkoc3VjY2VzLCBlcnJvcikge1xyXG5cdFx0aWYgKHRoaXMuJC5lcnJvcikge1xyXG5cdFx0XHRpZiAoZXJyb3IpIHtcclxuXHRcdFx0XHRlcnJvcih0aGlzLiQuZXJyb3IpO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2UgaWYgKHRoaXMuJC5hbmltKSB7XHJcblx0XHRcdHN1Y2Nlcyh0aGlzLiQuYW5pbSwgdGhpcy4kLnBhcmFtcywgdGhpcy4kLmZpcnN0RnJhbWUsIHRoaXMuJC5sYXN0RnJhbWUpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy4kLnJlYWR5Q2FsbGJhY2tzLnB1c2goc3VjY2VzKTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQmluZHMgYSBmdW5jdGlvbiB0byB0aGUgXCJvbmZpbmlzaFwiIGV2ZW50LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uIGNhbGxiYWNrXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHRoaXNcclxuXHQgKlxyXG5cdCAqL1xyXG5cdG9uZmluaXNoKGNhbGxiYWNrKSB7XHJcblx0XHRpZiAoIV9pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJPbmZpbmlzaCgpIGFjY2VwdHMgb25seSBhIGZ1bmN0aW9uLlwiKTtcclxuXHRcdH1cclxuXHRcdHRoaXMuJC5maW5pc2hDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQmluZHMgYSBmdW5jdGlvbiB0byB0aGUgXCJvbmNhbmNlbFwiIGV2ZW50LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uIGNhbGxiYWNrXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHRoaXNcclxuXHQgKlxyXG5cdCAqL1xyXG5cdG9uY2FuY2VsKGNhbGxiYWNrKSB7XHJcblx0XHRpZiAoIV9pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJPbmNhbmNlbCgpIGFjY2VwdHMgb25seSBhIGZ1bmN0aW9uLlwiKTtcclxuXHRcdH1cclxuXHRcdHRoaXMuJC5jYW5jZWxDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogUmV0dXJucyB0aGUgYW5pbWF0aW9uJ3MgcHJvZ3Jlc3MuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG51bWJlclxyXG5cdCAqL1xyXG5cdHByb2dyZXNzKCkge1xyXG5cdFx0aWYgKHRoaXMuJC5hbmltKSB7XHJcblx0XHRcdHJldHVybiB0aGlzLiQuYW5pbS5jdXJyZW50VGltZSAvIHRoaXMuJC5hbmltLmVmZmVjdC5kdXJhdGlvbjtcclxuXHRcdH1cclxuXHRcdHJldHVybiAwO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBTZWVrcyB0aGUgYW5pbWF0aW9uIHRvIGEgdGltZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBudW1iZXIgdG9cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdGhpc1xyXG5cdCAqL1xyXG5cdHNlZWsodG8pIHtcclxuXHRcdGlmICghX2lzTnVtYmVyKHRvKSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJTZWVrKCkgYWNjZXB0cyBvbmx5IGEgbnVtZXJpYyB2YWx1ZS5cIik7XHJcblx0XHR9XHJcblx0XHR0aGlzLnJlYWR5KChhbmltLCBwYXJhbXMpID0+IHtcclxuXHRcdFx0dmFyIHRvdGFsRHVyYXRpb24gPSBwYXJhbXMuZHVyYXRpb24gKyAocGFyYW1zLmRlbGF5IHx8IDApICsgKHBhcmFtcy5lbmREZWxheSB8fCAwKTtcclxuXHRcdFx0YW5pbS5jdXJyZW50VGltZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKHRvICogdG90YWxEdXJhdGlvbiwgdG90YWxEdXJhdGlvbikpO1xyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJldmVyc2VzIHRoZSBhbmltYXRpb24uXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHRoaXNcclxuXHQgKi9cclxuXHRyZXZlcnNlKCkge1xyXG5cdFx0dGhpcy5yZWFkeShhbmltID0+IGFuaW0ucmV2ZXJzZSgpKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBQbGF5cyB0aGUgYW5pbWF0aW9uLlxyXG5cdCAqIFJldHVybnMgYW4gXCJvbmZpbmlzaFwiIHByb21pc2UuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIFByb21pc2VcclxuXHQgKi9cclxuXHRwbGF5KCkge1xyXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdFx0dGhpcy5yZWFkeShhbmltID0+IHtcclxuXHRcdFx0XHRhbmltLnBsYXkoKTtcclxuXHRcdFx0XHR0aGlzLm9uZmluaXNoKCgpID0+IHJlc29sdmUodGhpcykpO1xyXG5cdFx0XHRcdHRoaXMub25jYW5jZWwoKCkgPT4gcmVqZWN0KHRoaXMpKTtcclxuXHRcdFx0fSwgcmVqZWN0KTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBQYXVzZXMgdGhlIGFuaW1hdGlvbi5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdGhpc1xyXG5cdCAqL1xyXG5cdHBhdXNlKCkge1xyXG5cdFx0dGhpcy5yZWFkeShhbmltID0+IGFuaW0ucGF1c2UoKSk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogRmluaXNoZXMgdGhlIGFuaW1hdGlvbi5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdGhpc1xyXG5cdCAqL1xyXG5cdGZpbmlzaCgpIHtcclxuXHRcdHRoaXMucmVhZHkoYW5pbSA9PiBhbmltLmZpbmlzaCgpKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBDYW5jZWxzIHRoZSBhbmltYXRpb24uXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHRoaXNcclxuXHQgKi9cclxuXHRjYW5jZWwoKSB7XHJcblx0XHR0aGlzLnJlYWR5KGFuaW0gPT4gYW5pbS5jYW5jZWwoKSk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogUmVzb2x2ZXMgdGhlIGdpdmVuIGVmZmVjdCBpbnRvIHZhbGlkIGtleWZyYW1lcy5cclxuXHQgKlxyXG5cdCAqIEVmZmVjdCBjYW4gYmUgQ1NTIGFuaW1hdGlvbiBuYW1lLFxyXG5cdCAqIG9yIGFuIG9iamVjdCBvZiBDU1MgcHJvcGVydGllcyB0aGF0IHJlcHJlc2VudCB0aGUgZW5kIGtleWZyYW1lLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIERPTU5vZGVcdFx0XHRcdGVsXHJcblx0ICogQHBhcmFtIGFycmF5fG9iamVjdHxzdHJpbmdcdGVmZmVjdFxyXG5cdCAqIEBwYXJhbSBmdW5jdGlvblx0XHRcdFx0cmVhZHlcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb25cdFx0XHRcdGVycm9yXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRzdGF0aWMgY3JlYXRlQ2FsbGJhY2soZWwsIGVmZmVjdCwgcmVhZHksIGVycm9yKSB7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gUmVzb2x2ZSBmaXJzdEZyYW1lIGZyb20gY3VycmVudCBzdGF0ZT9cclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHR2YXIgaXNPYmplY3RBbmRPbmx5TGFzdEtleWZyYW1lID0gX2lzT2JqZWN0KGVmZmVjdCkgJiYgIU9iamVjdC52YWx1ZXMoZWZmZWN0KS5maWx0ZXIodiA9PiBfaXNBcnJheSh2KSkubGVuZ3RoO1xyXG5cdFx0dmFyIGlzQXJyYXlCdXRFbXB0eUZpcnN0S2V5ZnJhbWUgPSBfaXNBcnJheShlZmZlY3QpICYmIGVmZmVjdC5sZW5ndGggPiAxICYmIF9pc0VtcHR5KGVmZmVjdFswXSk7XHJcblx0XHRpZiAoaXNPYmplY3RBbmRPbmx5TGFzdEtleWZyYW1lIHx8IGlzQXJyYXlCdXRFbXB0eUZpcnN0S2V5ZnJhbWUpIHtcclxuXHRcdFx0Ly8gR2V0IGZpcnN0IGtleWZyYW1lIGZyb20gY3VycmVudCBzdGF0ZVxyXG5cdFx0XHRSZWZsb3cub25yZWFkKCgpID0+IHtcclxuXHRcdFx0XHRpZiAoaXNBcnJheUJ1dEVtcHR5Rmlyc3RLZXlmcmFtZSkge1xyXG5cdFx0XHRcdFx0ZWZmZWN0LnNoaWZ0KCk7XHJcblx0XHRcdFx0XHRBbmkuY3JlYXRlQ2FsbGJhY2soZWwsIFtyZWFkU3luYyhlbCwgT2JqZWN0LmtleXMoZWZmZWN0WzBdKSksIC4uLmVmZmVjdF0sIHJlYWR5LCBlcnJvcik7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdEFuaS5jcmVhdGVDYWxsYmFjayhlbCwgW3JlYWRTeW5jKGVsLCBPYmplY3Qua2V5cyhlZmZlY3QpKSwgZWZmZWN0XSwgcmVhZHksIGVycm9yKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gQ3JlYXRlIGtleWZyYW1lcyBmcm9tIENTUyBhbmltYXRpb24gbmFtZS4uLlxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdGlmIChfaXNTdHJpbmcoZWZmZWN0KSkge1xyXG5cdFx0XHQvLyBSZXRyaWV2ZSBrZXlmcmFtZXMgb2YgdGhlIGdpdmVuIGFuaW1hdGlvbiBuYW1lIGZyb20gY3NzXHJcblx0XHRcdHZhciBhbmltYXRpb25OYW1lID0gZWZmZWN0O1xyXG5cdFx0XHRlZmZlY3QgPSByZWFkU3luY0tleWZyYW1lcyhhbmltYXRpb25OYW1lKTtcclxuXHRcdFx0aWYgKCFlZmZlY3QubGVuZ3RoICYmIGVycm9yKSB7XHJcblx0XHRcdFx0ZXJyb3IoJ0FuaW1hdGlvbiBuYW1lIFwiJyArIGFuaW1hdGlvbk5hbWUgKyAnXCIgbm90IGZvdW5kIGluIGFueSBzdHlsZXNoZWV0IScpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gUmVzb2x2ZSBhdXRvIHBpeGVscy4uLlxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdGlmIChfaXNBcnJheShlZmZlY3QpKSB7XHJcblx0XHRcdHZhciBrZXlmcmFtZXNXaXRoQXV0b1NpemVzID0gW107XHJcblx0XHRcdF9lYWNoKGVmZmVjdCwgKGksIGtleWZyYW1lKSA9PiB7XHJcblx0XHRcdFx0Ly8gV2UgY2FuIGFuaW1hdGUgdG8gYXV0byB3aWR0aCBhbmQgaGVpZ2h0XHJcblx0XHRcdFx0aWYgKGtleWZyYW1lLmhlaWdodCA9PT0gJ2F1dG8nKSB7XHJcblx0XHRcdFx0XHRfcHVzaFVuaXF1ZShrZXlmcmFtZXNXaXRoQXV0b1NpemVzLCBpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKGtleWZyYW1lLndpZHRoID09PSAnYXV0bycpIHtcclxuXHRcdFx0XHRcdF9wdXNoVW5pcXVlKGtleWZyYW1lc1dpdGhBdXRvU2l6ZXMsIGkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdGlmIChrZXlmcmFtZXNXaXRoQXV0b1NpemVzLmxlbmd0aCkge1xyXG5cdFx0XHRcdC8vIGFwcGx5KCkgd2lsbCBiZSBjYWxsZWQgd2hlbiByZWFkeVxyXG5cdFx0XHRcdC8vIFdlIHJldHVybiByZWFkUmVuZGVyaW5nKCksIHdoaWNoIGluIGl0c2VsZiByZXR1cm5zIHRoZSByZXR1cm4gb2YgYXBwbHkoKVxyXG5cdFx0XHRcdHJlYWRSZW5kZXJpbmcoZWwsIHt3aWR0aDonYXV0bycsIGhlaWdodDonYXV0byd9LCBlbCA9PiBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSkudGhlbihyZXN1bHQgPT4ge1xyXG5cdFx0XHRcdFx0a2V5ZnJhbWVzV2l0aEF1dG9TaXplcy5mb3JFYWNoKGkgPT4ge1xyXG5cdFx0XHRcdFx0XHRpZiAoZWZmZWN0W2ldLndpZHRoID09PSAnYXV0bycpIHtcclxuXHRcdFx0XHRcdFx0XHRlZmZlY3RbaV0ud2lkdGggPSByZXN1bHQud2lkdGggKyAncHgnO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGlmIChlZmZlY3RbaV0uaGVpZ2h0ID09PSAnYXV0bycpIHtcclxuXHRcdFx0XHRcdFx0XHRlZmZlY3RbaV0uaGVpZ2h0ID0gcmVzdWx0LmhlaWdodCArICdweCc7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0cmVhZHkoZWZmZWN0KTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBSZXR1cm4gcmVzdWx0Li4uXHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gV2UgcmV0dXJuIHRoZSByZXR1cm4gb2Ygc3VjY2VzcygpXHJcblx0XHRyZWFkeShlZmZlY3QpO1xyXG5cdH1cclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2Zyb21DYW1lbCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci9mcm9tQ2FtZWwuanMnO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgcHJlc2V0IGVhc2luZyBmdW5jdGlvbnMgZnJvbSBDU1MgdmFyaWFibGVzLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0bmFtZVxyXG4gKlxyXG4gKiBAcmV0dXJuIHN0cmluZ3xOVUxMXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XHJcblx0dmFyIG5hbWUgPSAhbmFtZS5pbmRleE9mKCctJykgPyBfZnJvbUNhbWVsKG5hbWUsICctJykgOiBuYW1lO1xyXG5cdHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5KS5nZXRQcm9wZXJ0eVZhbHVlKCctLScgKyBuYW1lKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9yZW1vdmUgZnJvbSAnLi9yZW1vdmUuanMnO1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZXMgYWxsIGluc3RhbmNlcyBvZiBlYWNoIGl0ZW0uXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheSBcdGFyclxyXG4gKiBAcGFyYW0gYXJyYXlcdCBcdGl0bXNcclxuICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyLCAuLi5pdG1zKSB7XHJcblx0aXRtcy5mb3JFYWNoKGl0bSA9PiBfcmVtb3ZlKGFyciwgaXRtKSk7XHJcblx0cmV0dXJuIGFycjtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCBfcmVtb3ZlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3JlbW92ZS5qcyc7XHJcbmltcG9ydCBBbmkgZnJvbSAnLi9BbmkuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSB0aW1lbGluZSBjbGFzc1xyXG4gKiBmb3Igd29ya2luZyB3aXRoIG11bHRpcGxlIGFuaW1hdGlvbnMuXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG4gXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIGFuIGFtaWF0aW9uIGZyb20ga2V5ZnJhbWVzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGFycmF5XHRcdFx0XHRcdGFuaW1hdGlvbnNcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdFx0XHRwYXJhbXNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdGhpc1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGFuaW1hdGlvbnMgPSBbXSwgcGFyYW1zID0ge30pIHtcclxuXHRcdC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG5cdFx0dGhpcy4kID0ge1xyXG5cdFx0XHRhbmltYXRpb25zOiBbXSxcclxuXHRcdFx0ZmluaXNoQ2FsbGJhY2tzOiBbXSxcclxuXHRcdFx0Y2FuY2VsQ2FsbGJhY2tzOiBbXSxcclxuXHRcdFx0cGFyYW1zOiBwYXJhbXMsXHJcblx0XHR9O1xyXG5cdFx0YW5pbWF0aW9ucy5mb3JFYWNoKGFuaW0gPT4ge1xyXG5cdFx0XHR0aGlzLmFkZChhbmltKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQWRkcyBhbiBhbmltYXRpb24gaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gQW5pXHRcdFx0IGFuaW1cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdGhpc1xyXG5cdCAqL1xyXG5cdGFkZChhbmltKSB7XHJcblx0XHRpZiAoIShhbmltIGluc3RhbmNlb2YgQW5pKSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0FyZ3VtZW50IzEgbXVzdCBiZSBhbiBBbmkgaW5zdGFuY2UhJyk7XHJcblx0XHR9XHJcblx0XHR0aGlzLiQuYW5pbWF0aW9ucy5wdXNoKGFuaW0pO1xyXG5cdFx0XHJcblx0XHRpZiAodGhpcy4kLmFkZENhbGxiYWNrKSB7XHJcblx0XHRcdHRoaXMuJC5hZGRDYWxsYmFjayhhbmltKTtcclxuXHRcdH1cclxuXHRcdHN3aXRjaCh0aGlzLiQucGxheVN0YXRlKSB7XHJcblx0XHRcdGNhc2UgJ3BhdXNlZCc6XHJcblx0XHRcdFx0YW5pbS5wYXVzZSgpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdFx0Y2FzZSAnY2FuY2VsbGVkJzpcclxuXHRcdFx0XHRhbmltLmNhbmNlbCgpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdFx0Y2FzZSAnZmluaXNoZWQnOlxyXG5cdFx0XHRcdGFuaW0uZmluaXNoKCk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHRoaXMuJC5yZXZlcnNlZCkge1xyXG5cdFx0XHRhbmltLnJldmVyc2UoKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBSZW1vdmVzIGFuIGFuaW1hdGlvbiBpbnN0YW5jZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBBbmlcdFx0XHQgYW5pbVxyXG5cdCAqXHJcblx0ICogQHJldHVybiB0aGlzXHJcblx0ICovXHJcblx0cmVtb3ZlKGFuaW0pIHtcclxuXHRcdGlmICghKGFuaW0gaW5zdGFuY2VvZiBBbmkpKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignQXJndW1lbnQjMSBtdXN0IGJlIGFuIEFuaSBpbnN0YW5jZSEnKTtcclxuXHRcdH1cclxuXHRcdF9yZW1vdmUodGhpcy4kLmFuaW1hdGlvbnMsIGFuaW0pO1xyXG5cdFx0aWYgKHRoaXMuJC5yZW1vdmVDYWxsYmFjaykge1xyXG5cdFx0XHR0aGlzLiQucmVtb3ZlQ2FsbGJhY2soYW5pbSk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQmluZHMgYSBmdW5jdGlvbiB0byB0aGUgXCJvbmZpbmlzaFwiIGV2ZW50LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uIGNhbGxiYWNrXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHRoaXNcclxuXHQgKlxyXG5cdCAqL1xyXG5cdG9uZmluaXNoKGNhbGxiYWNrKSB7XHJcblx0XHRpZiAoIV9pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJPbmZpbmlzaCgpIGFjY2VwdHMgb25seSBhIGZ1bmN0aW9uLlwiKTtcclxuXHRcdH1cclxuXHRcdHRoaXMuJC5maW5pc2hDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQmluZHMgYSBmdW5jdGlvbiB0byB0aGUgXCJvbmNhbmNlbFwiIGV2ZW50LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uIGNhbGxiYWNrXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHRoaXNcclxuXHQgKlxyXG5cdCAqL1xyXG5cdG9uY2FuY2VsKGNhbGxiYWNrKSB7XHJcblx0XHRpZiAoIV9pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJPbmNhbmNlbCgpIGFjY2VwdHMgb25seSBhIGZ1bmN0aW9uLlwiKTtcclxuXHRcdH1cclxuXHRcdHRoaXMuJC5jYW5jZWxDYWxsYmFja3MucHVzaChjYWxsYmFjayk7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogUmV0dXJucyB0aGUgYXZlcmFnZSBvZiBhbGwgYW5pbWF0aW9uJ3MgcHJvZ3Jlc3MuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG51bWJlclxyXG5cdCAqL1xyXG5cdHByb2dyZXNzKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuJC5hbmltYXRpb25zLnJlZHVjZSgoYSwgYikgPT4gYS5wcm9ncmVzcygpICsgYi5wcm9ncmVzcygpLCAwKSAvIHRoaXMuJC5hbmltYXRpb25zLmxlbmd0aDtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogUGxheXMgYWxsIGFuaW1hdGlvbnMuXHJcblx0ICogUmV0dXJucyBhbiBcIm9uZmluaXNoXCIgcHJvbWlzZS5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gUHJvbWlzZVxyXG5cdCAqL1xyXG5cdHBsYXkoKSB7XHJcblx0XHR0aGlzLiQucGxheVN0YXRlID0gJ3BsYXlpbmcnO1xyXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0dmFyIGFscmVhZHlSZXNvbHZlZCwgYWxyZWFkeVJlamVjdGVkO1xyXG5cdFx0XHR2YXIgaGFuZGxlRmluaXNoID0gKCkgPT4ge1xyXG5cdFx0XHRcdGlmICghYWxyZWFkeVJlc29sdmVkKSB7XHJcblx0XHRcdFx0XHRhbHJlYWR5UmVzb2x2ZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0dGhpcy4kLmZpbmlzaENhbGxiYWNrcy5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKCkpO1xyXG5cdFx0XHRcdFx0cmVzKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cdFx0XHR2YXIgaGFuZGxlQ2FuY2VsID0gKCkgPT4ge1xyXG5cdFx0XHRcdGlmICghYWxyZWFkeVJlamVjdGVkKSB7XHJcblx0XHRcdFx0XHRhbHJlYWR5UmVqZWN0ZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0dGhpcy4kLmNhbmNlbENhbGxiYWNrcy5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKCkpO1xyXG5cdFx0XHRcdFx0cmVqKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9O1xyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0dmFyIHRvdGFsID0gdGhpcy4kLmFuaW1hdGlvbnMubGVuZ3RoO1xyXG5cdFx0XHR0aGlzLiQuYW5pbWF0aW9ucy5mb3JFYWNoKGFuaW0gPT4ge1xyXG5cdFx0XHRcdGFuaW0ucGxheSgpLnRoZW4oKCkgPT4ge1xyXG5cdFx0XHRcdFx0dG90YWwgLS07XHJcblx0XHRcdFx0XHRpZiAoIXRvdGFsID4gMCkge1xyXG5cdFx0XHRcdFx0XHRoYW5kbGVGaW5pc2goKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KS5jYXRjaChoYW5kbGVDYW5jZWwpO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0dGhpcy4kLmFkZENhbGxiYWNrID0gZW50cnkgPT4ge1xyXG5cdFx0XHRcdGlmICh0aGlzLiQucGxheVN0YXRlID09PSAncGxheWluZycpIHtcclxuXHRcdFx0XHRcdHRvdGFsICsrO1xyXG5cdFx0XHRcdFx0ZW50cnkucGxheSgpLnRoZW4oKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHR0b3RhbCAtLTtcclxuXHRcdFx0XHRcdFx0aWYgKCF0b3RhbCA+IDApIHtcclxuXHRcdFx0XHRcdFx0XHRoYW5kbGVGaW5pc2goKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSkuY2F0Y2goaGFuZGxlQ2FuY2VsKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblx0XHRcdHRoaXMuJC5yZW1vdmVDYWxsYmFjayA9IGVudHJ5ID0+IHtcclxuXHRcdFx0XHR0b3RhbCAtLTtcclxuXHRcdFx0fTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRcdFxyXG5cdC8qKlxyXG5cdCAqIFNlZWtzIGFsbCBhbmltYXRpb25zIHRvIGEgdGltZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBpbnQgXHRcdHRvXHJcblx0ICogQHBhcmFtIGFycmF5XHRcdGV4Y2VwdFxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0c2Vlayh0bywgZXhjZXB0ID0gW10pIHtcclxuXHRcdC8vIFRoZSB2YWxpZGl0eSBvZiB0aGUgXCJ0b1wiIGlucHV0IGlzIGhhbmRsZWQgYnkgZWFjaCBhbmltLi4uXHJcbiAgICAgICAgdGhpcy5lYWNoKGFuaW0gPT4gYW5pbS5zZWVrKHRvKSwgZXhjZXB0KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJldmVyc2VzIGFsbCBhbmltYXRpb25zLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGFycmF5XHRcdGV4Y2VwdFxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0cmV2ZXJzZShleGNlcHQgPSBbXSkge1xyXG5cdFx0dGhpcy4kLnJldmVyc2VkID0gdGhpcy4kLnJldmVyc2VkID8gZmFsc2UgOiB0cnVlO1xyXG4gICAgICAgIHRoaXMuZWFjaChhbmltID0+IGFuaW0ucmV2ZXJzZSgpLCBleGNlcHQpO1xyXG5cdH1cclxuXHQvKipcclxuXHQgKiBQYXVzZXMgYWxsIGFuaW1hdGlvbnMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gYXJyYXlcdFx0ZXhjZXB0XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRwYXVzZShleGNlcHQgPSBbXSkge1xyXG5cdFx0dGhpcy4kLnBsYXlTdGF0ZSA9ICdwYXVzZWQnO1xyXG4gICAgICAgIHRoaXMuZWFjaChhbmltID0+IGFuaW0ucGF1c2UoKSwgZXhjZXB0KTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogRmluaXNoZXMgYWxsIGFuaW1hdGlvbnMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gYXJyYXlcdFx0ZXhjZXB0XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGZpbmlzaChleGNlcHQgPSBbXSkge1xyXG5cdFx0dGhpcy4kLnBsYXlTdGF0ZSA9ICdmaW5pc2hlZCc7XHJcbiAgICAgICAgdGhpcy5lYWNoKGFuaW0gPT4gYW5pbS5maW5pc2goKSwgZXhjZXB0KTtcclxuXHR9XHJcblx0ICAgIFx0XHJcblx0LyoqXHJcblx0ICogQ2FuY2VscyBhbGwgZWZmZWN0cy5cclxuXHQgXHJcblx0ICogQHBhcmFtIGFycmF5XHRcdGV4Y2VwdFxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0Y2FuY2VsKGV4Y2VwdCA9IFtdKSB7XHJcblx0XHR0aGlzLiQucGxheVN0YXRlID0gJ2NhbmNlbGxlZCc7XHJcbiAgICAgICAgdGhpcy5lYWNoKGFuaW0gPT4gYW5pbS5jYW5jZWwoKSwgZXhjZXB0KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENsZWFycyBhbGwgYW5pbWF0aW9ucy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBhcnJheVx0XHRleGNlcHRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGNsZWFyKGV4Y2VwdCA9IFtdKSB7XHJcblx0XHR0aGlzLiQuYW5pbWF0aW9ucyA9IHRoaXMuJC5hbmltYXRpb25zLmZpbHRlcihhbmltID0+IHtcclxuXHRcdFx0aWYgKCFleGNlcHQgfHwgIV9hcnJGcm9tKGV4Y2VwdCwgZmFsc2UvKmNhc3RPYmplY3QqLykuaW5jbHVkZXMoYW5pbS5lbCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBMb29wcyB0aHJ1IGVudHJpZXMsIHNlbGVjdGl2ZWx5LlxyXG5cdCBcclxuXHQgKiBAcGFyYW0gYXJyYXlcdFx0ZXhjZXB0XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRlYWNoKGNhbGxiYWNrLCBleGNlcHQgPSBbXSkge1xyXG4gICAgICAgIHRoaXMuJC5hbmltYXRpb25zLmZvckVhY2goYW5pbSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghZXhjZXB0IHx8ICFfYXJyRnJvbShleGNlcHQsIGZhbHNlLypjYXN0T2JqZWN0Ki8pLmluY2x1ZGVzKGFuaW0uZWwpKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhhbmltKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59OyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBBbmkgZnJvbSAnLi9BbmkuanMnO1xyXG5pbXBvcnQgVGltZWxpbmUgZnJvbSAnLi9UaW1lbGluZS5qcyc7XHJcbmltcG9ydCBfYXJyRnJvbSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mcm9tLmpzJztcclxuaW1wb3J0IF9hcnJMYXN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2xhc3QuanMnO1xyXG5pbXBvcnQgX21lcmdlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL21lcmdlLmpzJztcclxuaW1wb3J0IF9pc051bWJlciBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVtYmVyLmpzJztcclxuaW1wb3J0IF9pc0VtcHR5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNFbXB0eS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEEgYmFzZSBjbGFzcyBmb3IgT2JzZXJ2ZXIgaW1wbGVtZW50YXRpb25zLlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogQWNjZXB0cyBlbGVtZW50cyAodGFyZ2V0cykgYW5kIG9wdGlvbnMgZm9yLFxyXG5cdCAqIGFuZCBjcmVhdGVzIHRoZSwgT2JzZXJ2ZXIgaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gYXJyYXkgICAgIFx0ZW50cmllc1xyXG5cdCAqIEBwYXJhbSBvYmplY3QgXHRcdG9wdGlvbnNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGVudHJpZXMgPSBbXSwgcGFyYW1zID0ge30pIHtcclxuXHRcdHRoaXMuJCA9IHt9O1xyXG4gICAgICAgIHRoaXMuJC5lbnRyaWVzID0gW107XHJcbiAgICAgICAgdGhpcy4kLnBhcmFtcyA9IHBhcmFtcztcclxuICAgICAgICB0aGlzLm5vd1BsYXlpbmcgPSBuZXcgVGltZWxpbmU7XHJcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIGVudHJpZXMuZm9yRWFjaChlbCA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkKGVsLCBwYXJhbXMudGltaW5nKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnF1ZXVlID0gW107XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEFkZGEgYSBuZXcgZW50cnkgdG8gdGhlIHRpbWVsaW5lLlxyXG5cdCAqIE9wdGlvbmFsbHkgYWNjZXB0cyBhIHRpbWluZyBmb3IgdGhlIHNwZWNpZmljIGVudHJ5LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIEhUTUxFbGVtZW50IFx0ICAgIGVsXHJcblx0ICogQHBhcmFtIHBiamVjdCAgICAgICAgXHRlZmZlY3RcclxuXHQgKiBAcGFyYW0gcGJqZWN0IFx0ICAgICAgICBwYXJhbXNcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb24gICAgICAgIFx0b25maW5pc2hcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb24gICAgICAgIFx0b25jYW5jZWxcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGFkZChlbCwgZWZmZWN0ID0ge30sIHBhcmFtcyA9IHt9LCBvbmZpbmlzaCA9IG51bGwsIG9uY2FuY2VsID0gbnVsbCkge1xyXG4gICAgICAgIGlmICghdGhpcy4kLmVudHJpZXMuZmlsdGVyKGVudHJ5ID0+IGVudHJ5LmVsID09PSBlbCkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHZhciBlbnRyeSA9IHtlbCwgZWZmZWN0LCBwYXJhbXMsIG9uZmluaXNoLCBvbmNhbmNlbH07XHJcbiAgICAgICAgICAgIHRoaXMuJC5lbnRyaWVzLnB1c2goZW50cnkpO1xyXG4gICAgICAgICAgICB0aGlzLm5vd1BsYXlpbmdBZGQoZW50cnkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cdFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFJlbW92ZXMgYW4gZW50cnkgZnJvbSB0aGUgdGltZWxpbmUuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gSFRNTEVsZW1lbnQgXHQgICAgZWxcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdHJlbW92ZShlbCkge1xyXG4gICAgICAgIHRoaXMuJC5lbnRyaWVzID0gdGhpcy4kLmVudHJpZXMuZmlsdGVyKGVudHJ5ID0+IGVudHJ5LmVsICE9PSBlbCk7XHJcbiAgICB9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEFkZGEgYSBxdWFsaWZpZWQgZW50cnkgdG8gdGhlIG5vd1BsYXlpbmcuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gb2JqZWN0IFx0ICAgICBlbnRyeVxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0bm93UGxheWluZ0FkZChlbnRyeSkge1xyXG4gICAgICAgIGlmICghdGhpcy5ub3dQbGF5aW5nRWZmZWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgdmFyIGNyZWF0ZUFuaW1hdGlvbiA9IChub3dQbGF5aW5nLCBlbnRyeSwgZWZmZWN0LCBwYXJhbXMpID0+IHtcclxuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IG5ldyBBbmkoZW50cnkuZWwsIGVmZmVjdCwgcGFyYW1zKTtcclxuICAgICAgICAgICAgbm93UGxheWluZy5hZGQoYW5pbWF0aW9uKTtcclxuICAgICAgICAgICAgaWYgKHBhcmFtcy5vbmVvZmYpIHtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5vbmZpbmlzaCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm93UGxheWluZy5yZW1vdmUoYW5pbWF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZShlbnRyeS5lbCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZW50cnkub25maW5pc2gpIHtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5vbmZpbmlzaChlbnRyeS5vbmZpbmlzaCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZW50cnkub25jYW5jZWwpIHtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5vbmNhbmNlbChlbnRyeS5vbmNhbmNlbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIHZhciBjb21wdXRlID0gKG5vd1BsYXlpbmcsIHF1ZXVlKSA9PiB7XHJcbiAgICAgICAgICAgIHZhciBlbnRyeSA9IHF1ZXVlWzBdO1xyXG4gICAgICAgICAgICB2YXIgZWZmZWN0ID0gIV9pc0VtcHR5KGVudHJ5LmVmZmVjdCkgPyBlbnRyeS5lZmZlY3QgOiB0aGlzLm5vd1BsYXlpbmdFZmZlY3Q7XHJcbiAgICAgICAgICAgIHZhciBwYXJhbXMgPSBfbWVyZ2Uoe30sIHRoaXMubm93UGxheWluZ1BhcmFtcywgZW50cnkucGFyYW1zKTtcclxuICAgICAgICAgICAgcGFyYW1zLmRlbGF5ID0gKHBhcmFtcy5kZWxheSB8fCAwKTtcclxuICAgICAgICAgICAgaWYgKF9pc051bWJlcihwYXJhbXMubGFnKSB8fCBfaXNOdW1iZXIocGFyYW1zLmVuZExhZykpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsYXN0QW5pID0gX2Fyckxhc3Qobm93UGxheWluZy4kLmFuaW1hdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxhc3RBbmkpIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXN0QW5pLnJlYWR5KChhbmltLCBfcGFyYW1zKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXNOdW1iZXIocGFyYW1zLmxhZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5kZWxheSArPSBfcGFyYW1zLmRlbGF5ICsgcGFyYW1zLmxhZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5kZWxheSArPSBfcGFyYW1zLmRlbGF5ICsgcGFyc2VGbG9hdChfcGFyYW1zLmVuZERlbGF5KSArIF9wYXJhbXMuZHVyYXRpb24gKyBwYXJhbXMuZW5kTGFnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5kZWxheSAtPSBfaXNOdW1iZXIoYW5pbS5jdXJyZW50VGltZSkgPyBhbmltLmN1cnJlbnRUaW1lIDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlQW5pbWF0aW9uKG5vd1BsYXlpbmcsIGVudHJ5LCBlZmZlY3QsIHBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVldWUuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcHV0ZShub3dQbGF5aW5nLCBxdWV1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3JlYXRlQW5pbWF0aW9uKG5vd1BsYXlpbmcsIGVudHJ5LCBlZmZlY3QsIHBhcmFtcyk7XHJcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICAgICAgcXVldWUuc2hpZnQoKTtcclxuICAgICAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY29tcHV0ZShub3dQbGF5aW5nLCBxdWV1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMucXVldWUucHVzaChlbnRyeSk7XHJcbiAgICAgICAgaWYgKHRoaXMucXVldWUubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIGNvbXB1dGUodGhpcy5ub3dQbGF5aW5nLCB0aGlzLnF1ZXVlKTtcclxuICAgICAgICB9XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFBsYXlzIGFuIGVmZmVjdC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3R8YXJyYXkgIGVmZmVjdFxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0cGFyYW1zXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIFByb21pc2VcclxuXHQgKi9cclxuXHRwbGF5KGVmZmVjdCA9IHt9LCBwYXJhbXMgPSB7fSkge1xyXG4gICAgICAgIC8vIE9uZ29pbmcgYW5pbWF0aW9uP1xyXG4gICAgICAgIC8vIENsZWFyIG9ubHkgb24gc3Vic2VxdWVudCBjYWxsIHRvIHRoaXMgbWV0aG9kXHJcbiAgICAgICAgaWYgKHRoaXMubm93UGxheWluZ0VmZmVjdCkge1xyXG4gICAgICAgICAgICB0aGlzLm5vd1BsYXlpbmcgPSBuZXcgVGltZWxpbmU7XHJcbiAgICAgICAgICAgIHRoaXMucXVldWUgPSBbXTtcclxuICAgICAgIH1cclxuICAgICAgICB0aGlzLm5vd1BsYXlpbmdFZmZlY3QgPSBlZmZlY3Q7XHJcbiAgICAgICAgdGhpcy5ub3dQbGF5aW5nUGFyYW1zID0gcGFyYW1zO1xyXG4gICAgICAgIC8vIENyZWF0ZSBuZXcgcGxheWxpc3RcclxuICAgICAgICB2YXIgZW50cmllcyA9IHBhcmFtcy5yZXZlcnNlTGlzdCA/IHRoaXMuJC5lbnRyaWVzLnNsaWNlKCkucmV2ZXJzZSgpIDogdGhpcy4kLmVudHJpZXM7XHJcbiAgICAgICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcclxuICAgICAgICAgICAgaWYgKCghcGFyYW1zLmV4Y2VwdCB8fCAhX2FyckZyb20ocGFyYW1zLmV4Y2VwdCwgZmFsc2UvKmNhc3RPYmplY3QqLykuaW5jbHVkZXMoZW50cnkuZWwpKVxyXG4gICAgICAgICAgICAmJiAoIXBhcmFtcy5vbmx5IHx8IF9hcnJGcm9tKHBhcmFtcy5vbmx5LCBmYWxzZS8qY2FzdE9iamVjdCovKS5pbmNsdWRlcyhlbnRyeS5lbCkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vd1BsYXlpbmdBZGQoZW50cnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm93UGxheWluZy5wbGF5KCk7XHJcbiAgICB9XHJcblxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQge05hdiwgUmVmbGV4fSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9vYnNlcnZhYmxlcyc7XHJcblxyXG4gZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGUgZXh0ZW5kcyBOYXYuUm91dGUge1xyXG5cclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGl0ZW1zID0ge30sIHBhcmFtcyA9IHt9KSB7XHJcbiAgICAgICAgc3VwZXIoaXRlbXMsIHBhcmFtcyk7XHJcbiAgICAgICAgUmVmbGV4Lm9ic2VydmUodGhpcywgJ2N1cnJlbnQuYWN0aXZlJywgYWN0aXZlU3Vicm91dGUgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYWN0aXZlU3Vicm91dGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhY3RpdmVTdWJyb3V0ZS5jdXJyZW50LmFjdGl2ZSB8fCBhY3RpdmVTdWJyb3V0ZS5jdXJyZW50LmFjdGl2YXRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kaXNwbGF5ICE9PSAnaGlkZGVuJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGV4LnNldCh0aGlzLCAnZGlzcGxheScsICdoaWRkZW4nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZGlzcGxheSAhPT0gJ21pbmltaXplZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGV4LnNldCh0aGlzLCAnZGlzcGxheScsICdtaW5pbWl6ZWQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRpc3BsYXkgIT09ICdtYXhpbWl6ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUmVmbGV4LnNldCh0aGlzLCAnZGlzcGxheScsICdtYXhpbWl6ZWQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHtvYnNlcnZlRG93bjp0cnVlfSk7XHJcbiAgICB9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgUm91dGVzIGZyb20gZGVjbGFyYXRpb25zLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdHxhcnJheVx0XHRcdHJvdXRlc1xyXG5cdCAqIEBwYXJhbSBvYmplY3R8ZnVuY3Rpb25cdFx0cm91dGVDbGFzc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiBvYmplY3R8YXJyYXlcclxuXHQgKi9cclxuXHRzdGF0aWMgY3JlYXRlUm91dGVzKHJvdXRlcywgcm91dGVDbGFzcyA9IFJvdXRlKSB7XHJcblx0XHRyZXR1cm4gc3VwZXIuY3JlYXRlUm91dGVzKHJvdXRlcywgcm91dGVDbGFzcyk7XHJcblx0fVxyXG59OyIsIlxyXG4vKipcclxuICogQXBwLXdpZGUgZGF0YVxyXG4gKi9cclxuY29uc3QgZGF0YSA9IHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbnRlbnQgZm9yIHRoZSBlbmdpbmVlcmluZyBzZWN0aW9uXHJcbiAgICAgKi9cclxuICAgIGVuZ3I6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxhYmVsOiAnQ0hUTUwnLFxyXG4gICAgICAgICAgICBkZXNjOiAnQSBzdWl0ZSBvZiBzaG9ydCBzcGVjaWZpY2F0aW9ucyBhbmQgdGVjaG5vbG9naWVzIHRoYXQgYnJpbmcgYSBjb21wb25lbnQgYXJjaGl0ZWN0dXJlIHRvIHRoZSBIVE1MIGxhbmd1YWdlIGl0c2VsZi4nLFxyXG4gICAgICAgICAgICB0YWdzOiBbJyNTY29wZWRIVE1MJywgJyNTY29wZWRDU1MnLCAnI1Njb3BlZEpTJywgJyNIVE1MVHJhbnNwb3J0J10sXHJcbiAgICAgICAgICAgIGxpbmsxOiBbJ2h0dHBzOi8vZG9jcy53ZWItbmF0aXZlLmRldi9jaHRtbC8nLCAnRE9DUycsXSxcclxuICAgICAgICAgICAgbGluazI6IFsnaHR0cHM6Ly9naXRodWIuY29tL3dlYi1uYXRpdmUvY2h0bWwnLCAnR2l0SHViJyxdLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsYWJlbDogJ1BsYXlVSScsXHJcbiAgICAgICAgICAgIGRlc2M6ICdBIHJlc2lsaWVudCwgalF1ZXJ5LWluc3BpcmVkIERPTSBBUEkgYW5kIGFuIGludHVpdGl2ZSBVSSBtYW5pcHVsYXRpb24gbGlicmFyeS4nLFxyXG4gICAgICAgICAgICB0YWdzOiBbJyNBc3luY2hyb25vdXNET00nLCAnI1VJUGh5c2ljcyddLFxyXG4gICAgICAgICAgICBsaW5rMTogWydodHRwczovL2RvY3Mud2ViLW5hdGl2ZS5kZXYvcGxheS11aS8nLCAnRE9DUycsXSxcclxuICAgICAgICAgICAgbGluazI6IFsnaHR0cHM6Ly9naXRodWIuY29tL3dlYi1uYXRpdmUvcGxheS11aScsICdHaXRIdWInLF0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxhYmVsOiAnT2JzZXJ2YWJsZXMnLFxyXG4gICAgICAgICAgICBkZXNjOiAnQXBwbGljYXRpb24gY29tcG9uZW50cyBhbmQgY2xpZW50LXNpZGUgQVBJcyBpbXBsZW1lbnRlZCBhcyBvYmplY3RzIHdpdGggb2JzZXJ2YWJsZSBwcm9wZXJ0aWVzLicsXHJcbiAgICAgICAgICAgIHRhZ3M6IFsnI1JlZmxleEFjdGlvbnMnXSxcclxuICAgICAgICAgICAgbGluazE6IFsnaHR0cHM6Ly9kb2NzLndlYi1uYXRpdmUuZGV2L29ic2VydmFibGVzLycsICdET0NTJyxdLFxyXG4gICAgICAgICAgICBsaW5rMjogWydodHRwczovL2dpdGh1Yi5jb20vd2ViLW5hdGl2ZS9vYnNlcnZhYmxlcycsICdHaXRIdWInLF0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGxhYmVsOiAnUmVmbGV4JyxcclxuICAgICAgICAgICAgZGVzYzogJ0EgZ2VuZXJhbC1wdXJwb3NlIHJlZmxlY3Rpb24gQVBJIGZvciBvYnNlcnZpbmcgb2JqZWN0cyBhbmQgYXJyYXlzIGluIEphdmFTY3JpcHQuJyxcclxuICAgICAgICAgICAgdGFnczogWycjUmVmbGV4QWN0aW9ucyddLFxyXG4gICAgICAgICAgICBsaW5rMTogWydodHRwczovL2RvY3Mud2ViLW5hdGl2ZS5kZXYvcmVmbGV4LycsICdET0NTJyxdLFxyXG4gICAgICAgICAgICBsaW5rMjogWydodHRwczovL2dpdGh1Yi5jb20vd2ViLW5hdGl2ZS9yZWZsZXgnLCAnR2l0SHViJyxdLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsYWJlbDogJ0pTRU4nLFxyXG4gICAgICAgICAgICBkZXNjOiAnQSBnZW5lcmFsLXB1cnBvc2UgbGlicmFyeSBmb3IgcGFyc2luZyBKYXZhU2NyaXB0IGV4cHJlc3Npb25zIHRoYXQgZXhlY3V0ZSBpbiB1c2VyLWRlZmluZWQgc2NvcGVzLicsXHJcbiAgICAgICAgICAgIHRhZ3M6IFsnI3Njb3BlZEpTJ10sXHJcbiAgICAgICAgICAgIGxpbmsxOiBbJ2h0dHBzOi8vZG9jcy53ZWItbmF0aXZlLmRldi9qc2VuLycsICdET0NTJyxdLFxyXG4gICAgICAgICAgICBsaW5rMjogWydodHRwczovL2dpdGh1Yi5jb20vd2ViLW5hdGl2ZS9qc2VuJywgJ0dpdEh1YicsXSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgbGFiZWw6ICdDb21tb25zJyxcclxuICAgICAgICAgICAgZGVzYzogJ0EgdGhvdWdodGZ1bCB1dGlsaXRpZXMgbGlicmFyeSBmb3IgSmF2YVNjcmlwdC4nLFxyXG4gICAgICAgICAgICBsaW5rMTogWydodHRwczovL2RvY3Mud2ViLW5hdGl2ZS5kZXYvY29tbW9ucy8nLCAnRE9DUycsXSxcclxuICAgICAgICAgICAgbGluazI6IFsnaHR0cHM6Ly9naXRodWIuY29tL3dlYi1uYXRpdmUvY29tbW9ucycsICdHaXRIdWInLF0sXHJcbiAgICAgICAgfSxcclxuICAgIF0sXHJcbiAgICBcclxuICAgIC8qKlxyXG4gICAgICogQ29udGVudCBmb3IgdGhlIGV2YW5nZWxpc20gc2VjdGlvblxyXG4gICAgICovXHJcbiAgICBldmFuOiBbXHJcbiAgICAgICAge30sXHJcbiAgICAgICAge30sXHJcbiAgICAgICAge30sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBtZXRhOiB7dHlwZTogJ2FydGljbGUnfSxcclxuICAgICAgICAgICAgbGFiZWw6ICdJ4oCZbSBqb2luaW5nIHdlYi1uYXRpdmUhJywgXHJcbiAgICAgICAgICAgIGRlc2M6ICdIZXksIEF3ZXNvbWUhIEkgYW0gcGxlYXNlZCB0byBhbm5vdW5jZSB0aGF0IEkgYW0gam9pbmluZyBXZWItbmF0aXZlIGFzIGEgRnJvbnQtZW5kIEVuZ2luZWVyIGFuZCBEZXZlbG9wZXIgUmVsYXRpb25zIfCfjoknLCBcclxuICAgICAgICAgICAgbGluazI6IFsnaHR0cHM6Ly9tZWRpdW0uY29tL0ByYXltb25kb3N5MS9pbS1qb2luaW5nLXdlYi1uYXRpdmUtYzk4YjJjZGM1NTQwJywgJ1JlYWQgYXJ0aWNsZScsXSxcclxuICAgICAgICAgICAgYXV0aG9yczogW3tcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdSYXltb25kIEFrYWxvbnUnLFxyXG4gICAgICAgICAgICAgICAgYXZhdGFyOiAnaHR0cHM6Ly9taXJvLm1lZGl1bS5jb20vZml0L2MvNDgvNDgvMCpkeDV3REJaRElPaU1JTGtyLicsXHJcbiAgICAgICAgICAgICAgICBsaW5rOiAnaHR0cHM6Ly9taXJvLm1lZGl1bS5jb20vQHJheW1vbmRvc3kxJyxcclxuICAgICAgICAgICAgfSxdLFxyXG4gICAgICAgIH0sXHJcbiAgICBdLFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBkYXRhOyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBTZXF1ZW5jZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9wbGF5LXVpL3NyYy9hbmkvU2VxdWVuY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgY2xpZW50LWJ1aWxkIGVudHJ5XHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oV2luZG93KSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogRGVmaW5lIHRoZSBjdXN0b21pemVkIGJ1aWx0LWluIFVMIGVsZW1lbnRcclxuXHQgKi9cclxuXHRXaW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdwbGF5dWktdWwnLCBjbGFzcyBleHRlbmRzIFdpbmRvdy5IVE1MVUxpc3RFbGVtZW50IHtcclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogRXN0YWJsaXNoIGEgY29tbW9uIFRpbWVsaW5lLlxyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm4gdm9pZFxyXG5cdFx0ICovXHJcblx0XHRjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAgICAgc3VwZXIoKTtcclxuXHRcdFx0dmFyIHNlcXVlbmNlQSA9IG5ldyBTZXF1ZW5jZTtcclxuXHRcdFx0dmFyIHNlcXVlbmNlQiA9IG5ldyBTZXF1ZW5jZTtcclxuXHRcdFx0dmFyIHBhcmFtcyA9IHtsYWc6IDMwMCwgb25lb2ZmOiB0cnVlLCBkdXJhdGlvbjogNjAwfTtcclxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgICAgICBzZXF1ZW5jZUEucGxheShbe1xyXG5cdFx0XHRcdG9wYWNpdHk6IDAsXHJcblx0XHRcdFx0dHJhbnNmb3JtOiB7XHJcblx0XHRcdFx0XHR0cmFuc2xhdGU6IFsnMCcsICcxMDAnXSxcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHtcclxuXHRcdFx0XHRvcGFjaXR5OiAxLFxyXG5cdFx0XHRcdHRyYW5zZm9ybToge1xyXG5cdFx0XHRcdFx0dHJhbnNsYXRlOiBbJzAnLCAnMCddLFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fV0sIHBhcmFtcyk7XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgICAgIHNlcXVlbmNlQi5wbGF5KFt7XHJcblx0XHRcdFx0b3BhY2l0eTogMCxcclxuXHRcdFx0XHR0cmFuc2Zvcm06IHtcclxuXHRcdFx0XHRcdHRyYW5zbGF0ZTogWycwJywgJy0xMDAnXSxcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIHtcclxuXHRcdFx0XHRvcGFjaXR5OiAxLFxyXG5cdFx0XHRcdHRyYW5zZm9ybToge1xyXG5cdFx0XHRcdFx0dHJhbnNsYXRlOiBbJzAnLCAnMCddLFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fV0sIHBhcmFtcyk7XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdHRoaXMuaW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSBuZXcgV2luZG93LkludGVyc2VjdGlvbk9ic2VydmVyKGVudHJpZXMgPT4ge1xyXG5cdFx0XHRcdGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XHJcblx0XHRcdFx0XHRpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcclxuXHRcdFx0XHRcdFx0aWYgKGVudHJ5LmJvdW5kaW5nQ2xpZW50UmVjdC50b3AgPCAwKSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gVG9wLXRvLWJvdHRvbSBtb3Rpb25cclxuXHRcdFx0XHRcdFx0XHRzZXF1ZW5jZUIuYWRkKGVudHJ5LnRhcmdldCk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0Ly8gQm90dG9tLXRvLXRvcCBtb3Rpb25cclxuXHRcdFx0XHRcdFx0XHRzZXF1ZW5jZUEuYWRkKGVudHJ5LnRhcmdldCk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSwge3Jvb3RNYXJnaW46ICc1MHB4J30pO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBBZGRzIGFuIGVsZW1lbnQgdG8gdGhlIHNlcXVlbmNlLlxyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSBIVE1MRWxlbWVudCBlbFxyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm4gdm9pZFxyXG5cdFx0ICovXHJcblx0XHRzZXF1ZW5jZUFkZChlbCkge1xyXG5cdFx0XHR0aGlzLmludGVyc2VjdGlvbk9ic2VydmVyLm9ic2VydmUoZWwpO1xyXG5cdFx0fVxyXG5cclxuICAgIH0sIHtleHRlbmRzOiAndWwnfSk7XHJcbiAgICBcclxuICAgIFx0XHJcblx0LyoqXHJcblx0ICogRGVmaW5lIHRoZSBjdXN0b21pemVkIGJ1aWx0LWluIFVMIGVsZW1lbnRcclxuXHQgKi9cclxuXHRXaW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdwbGF5dWktbGknLCBjbGFzcyBleHRlbmRzIFdpbmRvdy5IVE1MTElFbGVtZW50IHtcclxuXHRcdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBUaGlzIHRyaWdnZXJzIHNlbGYtcmVwbGFjZW1lbnRcclxuXHRcdCAqIHdoZW4gc28gZGVmaW5lZC5cclxuXHRcdCAqXHJcblx0XHQgKiBAcmV0dXJuIHZvaWRcclxuXHRcdCAqL1xyXG5cdFx0Y29ubmVjdGVkQ2FsbGJhY2soKSB7XHJcblx0XHRcdGlmICh0aGlzLnBhcmVudE5vZGUuc2VxdWVuY2VBZGQpIHtcclxuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuc2VxdWVuY2VBZGQodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuXHRcdH1cclxuXHJcblx0fSwge2V4dGVuZHM6ICdsaSd9KTtcclxufTtcclxuIiwiXHJcbmltcG9ydCBDaHRtbCwge1JlZmxleCwgRU5WfSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jaHRtbCc7XHJcbmltcG9ydCB7UmVnaXN0cnl9IGZyb20gJ0B3ZWItbmF0aXZlLWpzL29ic2VydmFibGVzJztcclxuaW1wb3J0IENFIGZyb20gJy4vY3VzdG9tLWVsZW1lbnRzLmpzJztcclxuaW1wb3J0IFJvdXRlIGZyb20gJy4vUm91dGUnO1xyXG5pbXBvcnQgZGF0YSBmcm9tICcuL2RhdGEuanMnO1xyXG5cclxudmFyIGFwcCA9IG5ldyBSb3V0ZSh7XHJcbiAgICBhY3RpdmU6IHRydWUsXHJcbiAgICB0aXRsZTonV2ViLU5hdGl2ZSBIb21lIDo6IFdlYi1OYXRpdmUnLFxyXG4gICAgcGFnZToge1xyXG4gICAgICAgIHRpdGxlOidGaW5hbGx5LCBhIFdlYi1OYXRpdmUgVUkgRnJhbWV3b3JrIScsXHJcbiAgICAgICAgZW5naW5lZXJpbmdTZWN0aW9uOiBkYXRhLmVuZ3IsXHJcbiAgICAgICAgZXZhbmdlbGlzbVNlY3Rpb246IGRhdGEuZXZhbixcclxuICAgIH0sXHJcbiAgICBzdWJyb3V0ZXM6IFJvdXRlLmNyZWF0ZVJvdXRlcyh7XHJcbiAgICAgICAgYWJvdXQ6IHtcclxuICAgICAgICAgICAgdGl0bGU6ICdBYm91dCBXZWItTmF0aXZlJyxcclxuICAgICAgICAgICAgcGFnZToge1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdGaW5hbGx5LCBhIFdlYi1OYXRpdmUgVUkgRnJhbWV3b3JrIScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgIH0pLFxyXG59KTtcclxuXHJcbkVOVi5TY29wZWRKUy5nbG9iYWxzID0ge1xyXG4gICAgJDogd2luZG93LldlYk5hdGl2ZS5GaXJlZG9tLFxyXG4gICAgZG9jdW1lbnQ6IGRvY3VtZW50LFxyXG4gICAgY29uc29sZTogY29uc29sZSxcclxuICAgIGFsZXJ0OiBhbGVydC5iaW5kKHdpbmRvdyksXHJcbiAgICBwcm9tcHQ6IHByb21wdC5iaW5kKHdpbmRvdyksXHJcbiAgICBjb25maXJtOiBjb25maXJtLmJpbmQod2luZG93KSxcclxuICAgIG1vbmV0aXphdGlvbjogUmVnaXN0cnkuY3JlYXRlKCdNb25ldGl6YXRpb24nKSxcclxuICAgIHJvdXRlcjogUmVnaXN0cnkuY3JlYXRlKCdSb3V0ZXInKSxcclxufTtcclxuQ2h0bWwuaW5pdCh3aW5kb3cpO1xyXG5DRSh3aW5kb3cpO1xyXG5DaHRtbC5yZWFkeSgoKSA9PiB7XHJcbiAgICB2YXIgYXBwRWxlbWVudCA9IHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYXBwJyk7XHJcbiAgICBSZWZsZXgub2JzZXJ2ZShhcHBFbGVtZW50LCAoYSwgYiwgZSkgPT4ge1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coZS5vcmlnaW5hdGluZ0ZpZWxkcyk7XHJcbiAgICB9LCB7b2JzZXJ2ZURvd246IHRydWV9KTtcclxuICAgIFJlZmxleC5vYnNlcnZlKGFwcCwgKGEsIGIsIGUpID0+IHtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKGUub3JpZ2luYXRpbmdGaWVsZHMpO1xyXG4gICAgICAgIC8vY29uc29sZS5sb2coYXBwLmN1cnJlbnQuYWN0aXZlKTtcclxuICAgIH0sIHtvYnNlcnZlRG93bjogdHJ1ZX0pO1xyXG4gICAgYXBwLnJvdXRlKDApO1xyXG4gICAgYXBwRWxlbWVudC5iaW5kKGFwcCk7XHJcbn0pO1xyXG5cdCJdLCJzb3VyY2VSb290IjoiIn0=