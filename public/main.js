!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);var n=function(t){return Array.isArray(t)||"object"==typeof t},i=function(t){return Array.isArray(t)},s=function(t){return"string"==typeof t},a=function(t){return arguments.length&&(void 0===t||void 0===t)},o=function(t){return null===t||""===t},l=function(t){return!Array.isArray(t)&&"object"==typeof t&&t},c=function(t,e=!0){return i(t)?t:!e&&l(t)?[t]:!1!==t&&0!==t&&function(t){return o(t)||a(t)||!1===t||0===t||n(t)&&!Object.keys(t).length}(t)?[]:function(t){return!s(t)&&!a(t.length)}(t)?Array.prototype.slice.call(t):l(t)?Object.values(t):[t]},h=function(t,e=null){var r={};return 2===arguments.length&&(s(t)?r[t]=e:i(t)&&i(e)&&t.forEach((t,n)=>r[t]=e[n])),r},p=function(t){return!0!==t&&!1!==t&&null!==t&&""!==t&&!isNaN(1*t)},u=function(t){return function(t){return"function"==typeof t}(t)||t&&"[object function]"==={}.toString.call(t)},f=function(t,e){var r=void 0;return n(t)&&Object.keys(t).forEach((n,i)=>{!1!==r&&(r=e(p(n)?parseFloat(n):n,t[n],i))}),r},d=class{constructor(t,e={}){this.$={},this.$.target=t,this.$.details=e,this.$.propagationStopped=!1,this.$.defaultPrevented=!1,this.$.promisesInstance=null,this.$.promises=[],f(e,(t,e)=>{"$"!==t&&Object.defineProperty(this,t,{value:e})})}get target(){return this.$.target}get details(){return this.$.details}stopPropagation(){this.$.propagationStopped=!0}get propagationStopped(){return this.$.propagationStopped}preventDefault(){this.$.defaultPrevented=!0}get defaultPrevented(){return this.$.defaultPrevented}promise(t){if(!(t instanceof Promise))throw new Error("Event.promise() must be called with a Promise.");this.$.promises.push(t),this.$.promisesInstance=null}get promises(){return!this.$.promisesInstance&&this.$.promises.length&&(this.$.promisesInstance=Promise.all(this.$.promises)),this.$.promisesInstance}response(t){var e,r=l(t)&&!a(t.propagationStopped)&&!a(t.defaultPrevented);!1===t||r&&t.propagationStopped?this.stopPropagation():!1===t||r&&t.defaultPrevented?this.preventDefault():(t instanceof Promise&&(e=t)||r&&(e=t.promises))&&this.promise(e)}},g=class extends d{constructor(t,e={}){super(t,e)}},m=function(t){return"number"==typeof t},v=function(t){return l(t)&&Object.getPrototypeOf(t)===Object.prototype},y=function(t){return!0===t||!1===t};const b=function(t,e,r=!0,s=1){if(i(t)&&i(e)&&t.length!==e.length)return!r;if(l(t)&&l(e)){var a=Object.keys(t),o=Object.keys(e);if(!a.length&&!o.length)return v(t)&&v(e)?r:t===e===r;if(!b(a,o))return!r}if(s>0&&(i(t)&&i(e)||l(t)&&l(e))){var c=function(t,e,r=!0,s=!0,a=!1,o=!1){if(i(t)&&i(e)){var c=[],h=!0;return t.forEach(t=>{if(h){var p=!1;f(e,(e,a)=>{(!p||s&&n(t))&&(p=r(t,a),(i(p)&&!p.length||l(p)&&!Object.keys(p).length)&&(p=!1),n(p)&&s&&(t=p))}),n(p)?c.push(s?p:t):y(p)?a&&!p||!a&&p?c.push(t):o&&(h=!1):c.push(p)}}),c}if(l(t)&&l(e)){c={},h=!0;return Object.keys(t).forEach(p=>{if(h){var u=r(t[p],e[p]);(i(u)&&!u.length||l(u)&&!Object.keys(u).length)&&(u=!1),n(u)?c[p]=s?u:t[p]:y(u)?a&&!u||!a&&u?c[p]=t[p]:o&&(h=!1):c[p]=u}}),c}}(t,e,(t,e)=>b(t,e,r,s-1),!1,!1,!0);return i(c)?c.length===t.length&&c.length===e.length:l(c)&&l(t)?Object.keys(c).length===Object.keys(t).length&&Object.keys(c).length===Object.keys(e).length:c}return u(r)?r(t,e):m(t)&&m(e)&&isNaN(t)&&isNaN(e)?r:t===e===r};var w=b,x=class{disconnect(){this.disconnected=!0}},E=class{constructor(){this.fireables=[],this.currentlyFiringEvents=[]}addFireable(t){return this.fireables.push(t),t}removeFireable(t,e=[]){this.fireables=this.fireables.filter(e=>e!==t)}findFireables(t){return this.fireables.filter(e=>!(t.handler&&e.handler!==t.handler||t.params&&(t.params.type&&e.params.type!==t.params.type||t.params.tags&&function(t,e,r=null){return i(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1!==e.indexOf(t)):[]}(e.params.tags||[],t.params.tags).length!==t.params.tags.length)))}static createForTarget(t,e,r){var i;if(t&&n(t))return(i=t[O])||(i={},Object.defineProperty(t,O,{get:()=>i,set:t=>{if(t!==i)throw new Error('Attempt to overwrite the "'+O+'" special property!')},enumerable:!1})),i[e]="listeners"===e?new r(t):new r,i[e]}static getForTarget(t,e){var r;if(t&&n(t)&&(r=t[O]))return r[e]}};const O="< r e f l e x >";class j extends E{fire(t,e=null){if(this.currentlyFiringEvents.filter(e=>e.type===t.type&&e.query===t.query).length)return e?e():void 0;this.currentlyFiringEvents.push(t);const r=(n,...i)=>{var s=this.fireables[n];return s?s.fire(t,(...t)=>r(n+1,...t),...i):e?e(...i):i[0]};var n=r(0);return this.currentlyFiringEvents.pop(),n}static createForTarget(t){return super.createForTarget(t,"traps",j)}static getForTarget(t){return super.getForTarget(t,"traps")}}var k=function(t,...e){return e.forEach(e=>{t.indexOf(e)<0&&t.push(e)}),t},S=function(t,e){var r=[];return function(t,e){e=(e=e||Object.prototype)&&!i(e)?[e]:e;var r=[];for(t=t;t&&(!e||e.indexOf(t)<0)&&"default"!==t.name;)r.push(t),t=t?Object.getPrototypeOf(t):null;return r}(t,e).forEach(t=>{k(r,...Object.getOwnPropertyNames(t))}),r};function T(t,e,r=!1,s=!1,a=!0){var o=0,c=t.shift();if((p(c)||!0===c||!1===c)&&(o=c,c=t.shift()),!t.length)throw new Error("_merge() requires two or more array/objects.");return t.forEach((t,h)=>{(n(t)||u(t))&&(r?S(t):Object.getOwnPropertyNames(t)).forEach(n=>{var u=c[n],f=t[n];if((i(u)&&i(f)||l(u)&&l(f))&&(!0===o||o>0))c[n]=i(u)&&i(f)?[]:{},T([p(o)?o-1:o,c[n],u,f],e,r,s,a);else if(e(n,c,t,h))if(i(c)&&i(t))s?c[n]=f:c.push(f);else try{a?Object.defineProperty(c,n,Object.getOwnPropertyDescriptor(t,n)):c[n]=t[n]}catch(t){}})}),c}var F=function(t,e=[],r=!0){var s=0;return p(arguments[0])&&n(arguments[1])&&(s=arguments[0],t=arguments[1],e=arguments[2]||[]),T([s,{},t],(t,r,n)=>u(e)?e(t):!i(e)||!e.length||e.indexOf(t)>-1,!1,!1,r)},C=function(...t){return T(t,(t,e,r)=>!0,!1,!1,!1)},P=class extends d{constructor(t,e={}){if(e.data&&(e.fields=Object.keys(e.data)),super(t,e),this.srcEvt){this.dataEven=this.srcEvt.dataEven,this.originatingTarget=this.srcEvt.originatingTarget,this.originatingType=this.srcEvt.originatingType,this.originatingFields=[],this.originatingData={},this._originatingData={};var r=this.fields[0];Object.keys(this.srcEvt.originatingData).forEach(t=>{var e=r+"."+t;this.originatingFields.push(e),this.originatingData[e]=this.srcEvt.originatingData[t],this._originatingData[e]=this.srcEvt._originatingData[t]}),this.originatingCreated=this.srcEvt.originatingCreated,this.originatingDeleted=this.srcEvt.originatingDeleted}else this.dataEven=w(this.data,this._data),this.originatingTarget=this.target,this.originatingType=this.type,this.originatingFields=this.fields,this.originatingData=this.data,this._originatingData=this._data,this.originatingCreated=this.created,this.originatingDeleted=this.deleted}};class $ extends E{findFireables(t){return super.findFireables(t).filter(e=>o(t.fields)||a(t.fields)||w(c(e.fields),c(t.fields)))}fire(t){return this.currentlyFiringEvents.filter(e=>e.type===t.type&&e.fields===t.fields).length||(this.currentlyFiringEvents.push(t),this.fireables.forEach(e=>{t.propagationStopped||e.params.type&&e.params.type!==t.type||e.fire(t)}),this.currentlyFiringEvents.pop()),t}static createForTarget(t){return super.createForTarget(t,"observers",$)}static getForTarget(t){return super.getForTarget(t,"observers")}}var A=function(t,e,r=null,i={}){if(!t||!n(t))throw new Error("Object must be of type object!");var s;(u(e)||o(e)||a(e))&&(i=arguments.length>2?r:{},r=e,e=null),(s=$.getForTarget(t))&&s.findFireables({handler:r,fields:e,params:i}).forEach(t=>{s.removeFireable(t)})},_=function(t,e,r){A(r,null,{tags:["#e-bubbling",e,t]})},D=function(t){return typeof t},M=function(t,e,r={},i={}){e=c(e).slice();for(var s=t;!a(s)&&!o(s)&&e.length;){var l=e.shift();if(!(r.get?r.get(s,l):n(s)?l in s:s[l]))return void(i.exists=!1);s=r.get?r.get(s,l):s[l]}return i.exists=!0,s},N=class extends x{constructor(t,e=null,r={}){if(super(),this.handler=t,this.fields=e,this.params=r,this.fieldsArray=c(this.fields),this.isDynamicField=this.fieldsArray.filter(t=>t.indexOf("..")>-1||t.startsWith(".")||t.endsWith(".")).length,this.isDynamicField&&this.fieldsArray.length>1)throw new Error('Only one "Dynamic Field" must be observed at a time! "'+this.fieldsArray.join(", ")+'" have been bound together.')}fire(t){this.disconnected||this.params.type&&this.params.type!==t.type||t.dataEven&&!1!==this.params.diff||this.fireCallback(t,e=>{if(e){var r=[],n=[];return e.forEach(e=>{var i=t.originatingFields.reduce((r,n)=>{var i=t.originatingData[n],s=t._originatingData[n];if(!r&&e===n)return[i,s];if(!r&&(e+".").startsWith(n+".")){var a=function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?"":t.substr(n+e.length)}(e,n+".");return[M(i,a.split("."),{get:q}),M(s,a.split("."),{get:q})]}return r},null);if(i)r.push(i.shift()),n.push(i.shift());else{var a=M(t.target,s(e)?e.split("."):e,{get:q});r.push(a),n.push(a)}}),i(this.fields)?t.response(this.handler(r,n,t)):t.response(this.handler(r[0],n[0],t))}r={},n={};return t.fields.forEach(e=>{var i=e in t.data?t.data[e]:q(t.target,e),s=e in t._data?t._data[e]:i;r[e]=i,n[e]=s}),t.response(this.handler(r,n,t))})}fireCallback(t,e){if(this.fieldsArray.length){var r=[];this.fieldsArray.filter((e,n)=>(e=s(e)?e.replace(/`/g,""):e,r[n]=[],t.originatingFields.filter(i=>{var s=i.split("."),a=this.isDynamicField?e.split(".").map((t,e)=>t||s[e]||"").join("."):e;return k(r[n],a),(a===i&&!t.srcEvt||!1!==this.params.observeUp&&(a+".").startsWith(i+".")||this.params.observeDown&&(i+".").startsWith(a+"."))&&(!this.isDynamicField||!a.split(".").filter(t=>!t).length)}).length)).length&&(n=r,n.reduce((t,e)=>{var r=[];return t.forEach(t=>{c(e).forEach(e=>{var n=t.slice();n.push(e),r.push(n)})}),r},[[]])).forEach(e)}else t.srcEvt&&!this.params.observeDown||e();var n}},R=function(t,e,r=null,i={}){if(!t||!n(t))throw new Error("Object must be of type object!");if(u(e)&&(i=arguments.length>2?r:{},r=e,e=null),!u(r))throw new Error('Callback must be a function; "'+D(r)+'" given!');var s;return(s=$.getForTarget(t))||(s=$.createForTarget(t)),s.addFireable(new N(r,e,i))},I=function(t,e,r){var n;R(r,(i,s,a)=>{if(n=$.getForTarget(t)){var o=h(e,r);return n.fire(new P(t,{type:a.type,bubbling:!0,data:o,_data:o,srcEvt:a}))}},{observeDown:!0,tags:["#e-bubbling",e,t]})},W=function(t,e,r=[],s=!1){var a=t.map((t,e)=>{if(!t||!n(t))throw new Error("Target must be of type object!");return{target:t,targetCopy:F(t,r),setData:{},_setData:{},delData:{},_delData:{},created:[],deleted:[]}}),o=e(...t);return a.map(t=>{var e,a,o,l=Object.keys(t.targetCopy),c=Object.keys(t.target),h=(e=l.concat(c),e.filter((t,e,r)=>r.indexOf(t)===e)).filter(e=>{if(!(r.length&&!r.includes(e)||i(t.target)&&("length"===e||"< r e f l e x >"===e))){if(c.includes(e)?(t._setData[e]=t.targetCopy[e],t.setData[e]=t.target[e],l.includes(e)||t.created.push(e)):(t._delData[e]=t.targetCopy[e],t.delData[e]=void 0,t.deleted.push(e)),t.targetCopy[e]!==t.target[e])return t.targetCopy[e]&&n(t.targetCopy[e])&&_(t.target,e,t.targetCopy[e]),t.target[e]&&n(t.target[e])&&I(t.target,e,t.target[e]),!0;delete t.setData[e],delete t._setData[e]}});return((o=$.getForTarget(t.target))||s)&&(a=new P(t.target,{type:"transaction",data:C(t.setData,t.delData),_data:C(t._setData,t._delData),created:t.created,deleted:t.deleted}),o&&(Object.keys(t.delData).length&&a.response(o.fire(new P(t.target,{type:"del",data:t.delData,_data:t._delData,deleted:t.deleted}))),Object.keys(t.setData).length&&a.response(o.fire(new P(t.target,{type:"set",data:t.setData,_data:t._setData,created:t.created}))))),s?a:h}),o},q=function(t,e){if(!t||!n(t))throw new Error("Target must be of type object!");var r,s,a=function(r){return arguments.length?r:i(e)?h(e,t):t[e]};return r=(s=j.getForTarget(t))?s.fire(new g(t,{type:"get",query:e}),a):a(),i(t)&&!p(e)&&u(r)?function(...e){return W([t],()=>r.apply(t,e))}:r},L=function(t,e){return t.reduce((t,r)=>t&&e(r),!0)},z=function(t,e){if(!t||!n(t))throw new Error("Target must be of type object!");var r,i=function(r){return arguments.length?r:e in t};return(r=j.getForTarget(t))?r.fire(new g(t,{type:"has",query:e}),i):i()},B=function(t,e,r,a=null,o=!1){if(!e||!n(e))throw new Error("Target must be of type object!");l(r)&&(o=a);var h,p,u=r,f={},d={},v=[],y=(r,i,s)=>{var a;f[r]=e[r],z(e,r)||v.push(r),t&&(i=(a=i||{}).value);var o,l,c=function(t){return arguments.length?t:(a?Object.defineProperty(e,r,a):e[r]=i,!0)};if(l=j.getForTarget(e)){var h=a?{type:"def",query:r,descriptor:a,related:s}:{type:"set",query:r,value:i,related:s};o=l.fire(new g(e,h),c)}else o=c();return o?(d[r]=i,d[r]!==f[r]?(f[r]&&n(f[r])&&_(e,r,f[r]),d[r]&&n(d[r])&&I(e,r,d[r])):(delete d[r],delete f[r])):delete f[r],o},b=[];if(i(u)||(s(u)||m(u))&&(u=c(u)))b=u.map(t=>y(t,a,u));else if(l(r)){var w=Object.keys(r);b=w.map(t=>y(t,r[t],w))}return((p=$.getForTarget(e))||o)&&(h=new P(e,{type:"set",data:d,_data:f,created:v}),p&&p.fire(h)),o?h:L(b,t=>t)},U=function(t,e,r=null,n=!1){return B(!1,...arguments)};class H extends E{fire(t){return this.fireables.forEach(e=>{t.propagationStopped||e.fire(t)}),t}static createForTarget(t,e=H){return super.createForTarget(t,"listeners",e)}static getForTarget(t){return super.getForTarget(t,"listeners")}}var K=class extends x{constructor(t,e={}){super(),this.handler=t,this.params=e}fire(t){this.params.type===t.type&&t.response(this.handler.call(this.target,t.e))}},Y=function(t,e,r=null,n={}){var i;(i=H.getForTarget(t))&&i.findFireables({handler:r,type:e,params:n}).forEach(t=>{i.removeFireable(t)})},X=function(t,e,r={}){var n;if(n=H.getForTarget(t))return n.fire(new d(t,C(r,{type:e})))};var Q=R,V=U,J=function(t){return"string"==typeof t},Z=function(t,e,r=null){for(var n=[],i=t.length,s=0;s<i;s++)n.push({index:s,value:r?r(t[s]):t[s]});return n.sort((function(t,e){return J(t.value)&&"".localeCompare?t.value.localeCompare(e.value):t.value===e.value?0:t.value>e.value?1:-1})),"desc"===(e||"").trim().toLowerCase()&&(n=n.reverse()),n.map(e=>t[e.index])},G=function(t){return Array.isArray(t)},tt=function(t,e,r=null){return G(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1===e.indexOf(t)):[]},et=function(t){return!Array.isArray(t)&&"object"==typeof t&&t},rt=function(t){return null===t||""===t},nt=function(t){return arguments.length&&(void 0===t||void 0===t)},it=function(t){return Array.isArray(t)||"object"==typeof t},st=function(t){return rt(t)||nt(t)||!1===t||0===t||it(t)&&!Object.keys(t).length},at=function(t){return"function"==typeof t},ot=function(t){return at(t)||t&&"[object function]"==={}.toString.call(t)},lt=function(t){return!0!==t&&!1!==t&&null!==t&&""!==t&&!isNaN(1*t)},ct=function(t,...e){return e.forEach(e=>{t.indexOf(e)<0&&t.push(e)}),t},ht=function(t,e){var r=[];return function(t,e){e=(e=e||Object.prototype)&&!G(e)?[e]:e;var r=[];for(t=t;t&&(!e||e.indexOf(t)<0)&&"default"!==t.name;)r.push(t),t=t?Object.getPrototypeOf(t):null;return r}(t,e).forEach(t=>{ct(r,...Object.getOwnPropertyNames(t))}),r};function pt(t,e,r=!1,n=!1,i=!0){var s=0,a=t.shift();if((lt(a)||!0===a||!1===a)&&(s=a,a=t.shift()),!t.length)throw new Error("_merge() requires two or more array/objects.");return t.forEach((t,o)=>{(it(t)||ot(t))&&(r?ht(t):Object.getOwnPropertyNames(t)).forEach(l=>{var c=a[l],h=t[l];if((G(c)&&G(h)||et(c)&&et(h))&&(!0===s||s>0))a[l]=G(c)&&G(h)?[]:{},pt([lt(s)?s-1:s,a[l],c,h],e,r,n,i);else if(e(l,a,t,o))if(G(a)&&G(t))n?a[l]=h:a.push(h);else try{i?Object.defineProperty(a,l,Object.getOwnPropertyDescriptor(t,l)):a[l]=t[l]}catch(t){}})}),a}var ut=function(t,e=[],r=!0){var n=0;return lt(arguments[0])&&it(arguments[1])&&(n=arguments[0],t=arguments[1],e=arguments[2]||[]),pt([n,{},t],(t,r,n)=>ot(e)?e(t):!G(e)||!e.length||e.indexOf(t)>-1,!1,!1,r)},ft=function(t,e=null){var r={};return 2===arguments.length&&(J(t)?r[t]=e:G(t)&&G(e)&&t.forEach((t,n)=>r[t]=e[n])),r},dt=function(...t){return pt(t,(t,e,r)=>!0,!1,!1,!1)},gt=function(t,e,r=null){return dt(t,et(e)?e:ft(e,r))},mt=function(t){return Array.isArray(t)},vt=function(t){return"string"==typeof t},yt=function(t){return arguments.length&&(void 0===t||void 0===t)},bt=function(t){return Array.isArray(t)||"object"==typeof t},wt=function(t){return!Array.isArray(t)&&"object"==typeof t&&t},xt=function(t,e=!0){return mt(t)?t:!e&&wt(t)?[t]:!1!==t&&0!==t&&function(t){return function(t){return null===t||""===t}(t)||yt(t)||!1===t||0===t||bt(t)&&!Object.keys(t).length}(t)?[]:function(t){return!vt(t)&&!yt(t.length)}(t)?Array.prototype.slice.call(t):wt(t)?Object.values(t):[t]},Et=function(t){return Array.isArray(t)},Ot=function(t){return function(t){return"function"==typeof t}(t)||t&&"[object function]"==={}.toString.call(t)},jt=function(t){return!Array.isArray(t)&&"object"==typeof t&&t},kt=function(t){return Array.isArray(t)||"object"==typeof t},St=function(t){return!0!==t&&!1!==t&&null!==t&&""!==t&&!isNaN(1*t)},Tt=function(t,e){var r=[];return function(t,e){e=(e=e||Object.prototype)&&!Et(e)?[e]:e;var r=[];for(t=t;t&&(!e||e.indexOf(t)<0)&&"default"!==t.name;)r.push(t),t=t?Object.getPrototypeOf(t):null;return r}(t,e).forEach(t=>{!function(t,...e){e.forEach(e=>{t.indexOf(e)<0&&t.push(e)})}(r,...Object.getOwnPropertyNames(t))}),r};function Ft(t,e,r=!1,n=!1,i=!0){var s=0,a=t.shift();if((St(a)||!0===a||!1===a)&&(s=a,a=t.shift()),!t.length)throw new Error("_merge() requires two or more array/objects.");return t.forEach((t,o)=>{(kt(t)||Ot(t))&&(r?Tt(t):Object.getOwnPropertyNames(t)).forEach(l=>{var c=a[l],h=t[l];if((Et(c)&&Et(h)||jt(c)&&jt(h))&&(!0===s||s>0))a[l]=Et(c)&&Et(h)?[]:{},Ft([St(s)?s-1:s,a[l],c,h],e,r,n,i);else if(e(l,a,t,o))if(Et(a)&&Et(t))n?a[l]=h:a.push(h);else try{i?Object.defineProperty(a,l,Object.getOwnPropertyDescriptor(t,l)):a[l]=t[l]}catch(t){}})}),a}var Ct=function(...t){return Ft(t,(t,e,r)=>!0,!1,!1,!1)},Pt=function(t,e,r=!1){for(var n=t.indexOf(e);n>-1&&(r||!1===r);)t.splice(n,1),r>0&&r--,n=t.indexOf(e);return t},$t=function(t,e){if(!t)return!1;if(t instanceof e)return!0;var r=t=>{for(;t&&t!==Function.prototype;){if(t===e||t.prototypes&&t.prototypes.reduce((t,n)=>t||n===e||r(n),!1))return!0;t=Object.getPrototypeOf(t)}return!1};return r(t.constructor)},At=function(t){return"number"==typeof t},_t=function(t){return jt(t)&&Object.getPrototypeOf(t)===Object.prototype},Dt=function(t){return!0===t||!1===t},Mt=function(t,e){var r=void 0;return kt(t)&&Object.keys(t).forEach((n,i)=>{!1!==r&&(r=e(St(n)?parseFloat(n):n,t[n],i))}),r};const Nt=function(t,e,r=!0,n=1){if(Et(t)&&Et(e)&&t.length!==e.length)return!r;if(jt(t)&&jt(e)){var i=Object.keys(t),s=Object.keys(e);if(!i.length&&!s.length)return _t(t)&&_t(e)?r:t===e===r;if(!Nt(i,s))return!r}if(n>0&&(Et(t)&&Et(e)||jt(t)&&jt(e))){var a=function(t,e,r=!0,n=!0,i=!1,s=!1){if(Et(t)&&Et(e)){var a=[],o=!0;return t.forEach(t=>{if(o){var l=!1;Mt(e,(e,i)=>{(!l||n&&kt(t))&&(l=r(t,i),(Et(l)&&!l.length||jt(l)&&!Object.keys(l).length)&&(l=!1),kt(l)&&n&&(t=l))}),kt(l)?a.push(n?l:t):Dt(l)?i&&!l||!i&&l?a.push(t):s&&(o=!1):a.push(l)}}),a}if(jt(t)&&jt(e)){a={},o=!0;return Object.keys(t).forEach(l=>{if(o){var c=r(t[l],e[l]);(Et(c)&&!c.length||jt(c)&&!Object.keys(c).length)&&(c=!1),kt(c)?a[l]=n?c:t[l]:Dt(c)?i&&!c||!i&&c?a[l]=t[l]:s&&(o=!1):a[l]=c}}),a}}(t,e,(t,e)=>Nt(t,e,r,n-1),!1,!1,!0);return Et(a)?a.length===t.length&&a.length===e.length:jt(a)&&jt(t)?Object.keys(a).length===Object.keys(t).length&&Object.keys(a).length===Object.keys(e).length:a}return Ot(r)?r(t,e):At(t)&&At(e)&&isNaN(t)&&isNaN(e)?r:t===e===r};var Rt=Nt,It=class{even(t){return!(!jt(t)||t.jsenType!==this.jsenType)&&Rt(t,this)}inherit(t){return this}withComments(t){return this.meta||(this.meta={}),this.meta.comments=t,this}withVars(t){return this.meta||(this.meta={}),this.meta.vars=t,this}};const Wt=class extends It{};Object.defineProperty(Wt.prototype,"jsenType",{get:()=>"Reference"});var qt=Wt;const Lt=class extends It{};Object.defineProperty(Lt.prototype,"jsenType",{get:()=>"CallExpression"});var zt=Lt;const Bt=class extends It{};Object.defineProperty(Bt.prototype,"jsenType",{get:()=>"FunctionType"});var Ut=Bt;const Ht=class{static parse(t,e,r={},n=Ht){if(r.meta||(r.meta={vars:[],_vars:[]}),t.length){for(var i=Object.values(e||n.grammars),s=0;s<i.length;s++){var a=r.meta&&Et(r.meta.vars)?r.meta.vars.length:0,o=i[s].parse(t,(t,e,i={})=>Ht.parse(t,e,i?Ct(r,i):r,n));if(o){if(o.meta||(o.meta={}),$t(o,Ut)){var l=r.meta.vars.splice(a);r.meta._vars=r.meta._vars.concat(l),o.meta._vars=l}else o.meta.vars=r.meta.vars.slice(a);($t(o,qt)||$t(o,zt))&&(Pt(o.meta.vars,o.context),Pt(r.meta.vars,o.context),r.meta.vars.push(o))}if(o&&Et(r.explain)&&r.explain.push(t+" >>-------------\x3e> "+o.jsenType),o)return o}if(!1===r.assert)return;throw new Error("[Syntax error:] "+t)}}};var Kt=Ht,Yt=function(t){return"string"==typeof t},Xt=function(t){return arguments.length&&(void 0===t||void 0===t)},Qt=function(t,e=!0){return Et(t)?t:!e&&jt(t)?[t]:!1!==t&&0!==t&&function(t){return function(t){return null===t||""===t}(t)||Xt(t)||!1===t||0===t||kt(t)&&!Object.keys(t).length}(t)?[]:function(t){return!Yt(t)&&!Xt(t.length)}(t)?Array.prototype.slice.call(t):jt(t)?Object.values(t):[t]};const Vt=function(t,e=1,r=!0){return!St(e)||e<=0?t:(!Et(t)&&jt(t)&&r&&(t=Object.values(t)),Et(t)?t.reduce((t,n)=>Et(n)||jt(n)&&r?t.concat(Vt(Et(n)?n:Object.values(n),e-1,r)):t.concat(n),[]):t)};var Jt=Vt,Zt=function(t,e=1){var r=0;t.forEach(t=>{r++});var n=t.slice(t.length-r,e);return arguments.length>1?n:n[0]},Gt=function(t,e=1){return arguments.length>1?Zt(t.slice().reverse(),e).reverse():Zt(t.slice().reverse())},te=function(t,e=[]){return Ft([{},t],(t,r,n)=>{if(!Ot(n[t]))return Ot(e)?e(t):!Et(e)||!e.length||e.indexOf(t)>-1},!1,!1,!1)};const ee=class{static lex(t,e,r={}){if(!Yt(t))throw new Error("Argument1 must be a string!");var n=t=>({delims:t.delims.slice(),options:te(t.options),nesting:t.nesting.slice(),maxDepth:t.maxDepth,comments:t.comments.slice(),tokens:t.tokens.slice(),matches:t.matches.slice(),matchesi:te(t.matchesi)});if(ee.$cache[t]&&!1!==r.cache)for(var i=0;i<ee.$cache[t].length;i++){var s=ee.$cache[t][i];if(Rt(s.delims,e))return n(s)}var a=new ee(t,r).lex(e);return!1!==r.cache&&(ee.$cache[t]=ee.$cache[t]||[],ee.$cache[t].push(a)),n(a)}static split(t,e,r){return ee.lex(t,e,r).tokens}static match(t,e,r){return ee.lex(t,e,r).matches}constructor(t,e){if(!Yt(t))throw new Error("Lexer requires the first argument to be a string.");this.$str=t,this.$options=e||{},this.$options.blocks||(this.$options.blocks=ee.$blocks),this.$options.quotes||(this.$options.quotes=ee.$quotes),this.$options.comments||(this.$options.comments=ee.$comments)}lex(t,e){var r={delims:Qt(t),options:Ct(!0,{},this.$options,e||{}),nesting:[],maxDepth:0,comments:[],tokens:[],matches:[],matchesi:{}};if(this._evalCharsAt(r,0),r.nesting.length)throw new Error("Error parsing the string: "+this.$str+". Unterminated blocks: "+Jt(r.nesting).join(", "));return r}_evalCharsAt(t,e){if(!(e>=this.$str.length)){var r=1,n={},i={},s={};if(t.openComment||(i=this._testQuotes(t,e)),t.openQuote||(n=this._testComments(t,e)),t.openComment||n.ending)if(t.nesting.length||s.ending)this._push(t,this.$str[e]);else r=(o=n.starting||n.ending||this.$str[e]).length,this._push(t,o,"comments",n.starting);else if(t.openQuote||i.ending)this._push(t,this.$str[e]);else{if(t.options.limit&&t.matches.length===t.options.limit)return this._push(t,this.$str[e]),this._evalCharsAt(t,e+1);s=this._testNesting(t,e);s=this._testNesting(t,e);var a=this._testChars(t.options.stopChars||[],t,e);if(!t.nesting.length&&!1!==a)return t.options.stopChar=a,void(t.options.stopCharForward=this.$str.substr(e));if(t.delims.length)if(t.nesting.length||s.ending){var o;r=(o=s.starting||s.ending||this.$str[e]).length,this._push(t,o)}else{this._push(t,"");var l=this._testChars(t.delims,t,e);if(!1!==l&&(t.matches.push(l),t.matchesi[e]=l,r=l.length||1,!t.options.preserveDelims))return this._evalCharsAt(t,e+(l.length||1));this._push(t,l||this.$str[e])}else 2===t.nesting.length&&s.starting?(t.matches.push(null),this._push(t,s.starting),r=s.starting.length):!t.nesting.length&&s.ending?(this._push(t,s.ending),r=s.ending.length,t.matches.push(null)):this._push(t,this.$str[e])}return this._evalCharsAt(t,e+r)}}_testQuotes(t,e){var r={};return(t.options.quotes||[]).forEach(n=>{this.$str.substr(e,1)===n&&(t.openQuote?n===t.openQuote&&(t.openQuote=!1,r.ending=n):(t.openQuote=n,r.starting=n))}),r}_testComments(t,e){var r={};return(t.options.comments||[]).forEach(n=>{if(t.openComment){if(Gt(n)===Gt(t.openComment)){var i;(i=this.$str.substr(e).match(new RegExp("^"+Gt(n))))&&(t.openComment=!1,r.ending=i[0])}}else(i=this.$str.substr(e).match(new RegExp("^"+Zt(n))))&&(t.openComment=n,r.starting=i[0])}),r}_testNesting(t,e){var r={};return(t.options.blocks||[]).forEach(n=>{var i=this.$str.substr(e).match(new RegExp("^"+Zt(n)));if(i)t.nesting=t.nesting.concat([n]),r.starting=i[0];else if(t.nesting.length&&Gt(n)===Gt(Gt(t.nesting))){var s=this.$str.substr(e).match(new RegExp("^"+Gt(n)));s&&(t.nesting=t.nesting.slice(0,-1),r.ending=s[0])}}),t.maxDepth=Math.max(t.maxDepth,t.nesting.length),r}_testChars(t,e,r){for(var n=0;n<t.length;n++){var i=t[n];if(Ot(i)){var s=i(this.$str.substr(0,r),this.$str.substr(r));if(!1!==s)return s}if(e.options.useRegex){var a=this.$str.substr(r).match(new RegExp("^"+i,!0!==e.options.useRegex?e.options.useRegex:""));if(a)return a[0]}if(!e.options.ci&&this.$str.substr(r,i.length)===i||e.options.ci&&this.$str.substr(r,i.length).toLowerCase()===i.toLowerCase())return i}return!1}_push(t,e,r="tokens",n=!1){var i=t.matches.length;if(Xt(t.tokens[i])&&(t.tokens[i]=""),"comments"===r){t.tokens[i].comments||(t.tokens[i]=new String(t.tokens[i]),t.tokens[i].comments=[]);var s=t.tokens[i].comments.length-(!t.tokens[i].comments.length||n?0:1);t.tokens[i].comments[s]=(t.tokens[i].comments[s]||"")+e}else{var a=t.tokens[i].comments;t.tokens[i]=new String(t.tokens[i]+e),t.tokens[i].comments=a}}split(t,e,r){return this.lex(e,r).tokens}match(t,e,r){return this.lex(e,r).matches}regParse(t,e){return this.lex(t,Ct({useRegex:!0},e||{}))}regSplit(t,e){return this.regParse(t,e).tokens}regMatch(t,e){return this.regParse(t,e).matches}};ee.$blocks=[["\\(","\\)"],["\\[","\\]"],["\\{","\\}"]],ee.$quotes=['"',"'","`"],ee.$comments=[["\\/\\*","\\*\\/"],["\\/\\/","(\\r)?\\n"]],ee.$cache={};var re=ee;class ne{constructor(t,e=null,r={},n={}){this.mainContext=t,this.superContext=e?ne.create(e):null,this.localContext=r,this.localContextMeta=n}handle(t,e,r,n=0){var i=()=>e(this.mainContext,null,()=>this.superContext?this.superContext.handle(t,e,r,n+1):r?r():void 0,n);return"toString"===t&&this.localContext.toString===Object.prototype.toString?i():e(this.localContext,this.localContextMeta,i,n)}get(t,e={},r=!0){return t instanceof String&&(t+=""),this.handle(t,(n,i,s,a)=>{var o=ie(n,t,e);return!Xt(o)||se(n,t,e)?Ot(o)&&r?o.bind(n):o:s()})}set(t,e,r={},n=!1){t instanceof String&&(t+="");const i=(t,e,r,n)=>n.set?n.set(t,e,r):(t[e]=r,!0);return this.handle(!!n||t,(s,a,o)=>{if(a&&"const"===a[t])throw new Error("CONST "+t+"cannot be modified!");if(n){if(!["var","let","const"].includes(n))throw new Error("Unrecognized declarator: "+n+"!");return a[t]=n,i(s,t,e,r)}return se(s,t,r)?i(s,t,e,r):o()},()=>{throw new Error('"'+t+'" is undefined!')})}del(t,e={}){return t instanceof String&&(t+=""),this.handle(t,(r,n,i)=>se(r,t,e)?e.deleteProperty||e.del?(e.deleteProperty||e.del)(r,t):(delete r[t],!0):i())}has(t,e,r={}){return t instanceof String&&(t+=""),e instanceof String&&(e+=""),this.handle(t,(n,i,s)=>{if(se(n,t,r)){var a=ie(n,t,r);return se(a,e,r)}return s()},()=>{throw new Error('"'+t+'" is undefined!')})}exec(t,e,r={}){return t instanceof String&&(t+=""),this.handle(t,(n,i,s)=>{var a=ie(n,t,r);if(!Xt(a)||se(n,t,r)){if(!Ot(a)){if(r.exec)return r.exec(n,t,e);throw new Error('"'+t+'" is not a function! (Called on type: '+typeof n+".)")}return r.apply?r.apply(a,n,e):a.apply(n,e)}return s()},()=>{if(r.execUnknown)return r.execUnknown(this,t,e);throw new Error('"'+t+'()" is undefined!')})}static create(t){return t instanceof ne?t:new ne(t)}}const ie=(t,e,r)=>r.get?r.get(t,e):kt(t)&&t||Yt(t)||At(t)?t[e]:void 0,se=(t,e,r)=>r.has?r.has(t,e):kt(t)&&t?e in t:!Xt(t[e]);var ae=function(t,e,r){return t.startsWith(e)&&t.endsWith(r)},oe=function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?"":t.substr(n+e.length)},le=function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?t:t.substr(0,n)},ce=function(t,e,r){return function(t,e){return le(t,e,!0)}(oe(t,e),r)};const he=class extends It{};Object.defineProperty(he.prototype,"jsenType",{get:()=>"Abstraction"});var pe=he;const ue=class extends pe{constructor(t){super(),this.expr=t}eval(t=null,e={}){return this.expr.eval(t,e)}toString(t=null){return"("+this.expr.toString(t)+")"}static parse(t,e,r=ue){if(ae(t,"(",")")&&!re.match(t,[" "]).length)return new r(e(ce(t,"(",")")))}};var fe=ue;const de=class extends It{};Object.defineProperty(de.prototype,"jsenType",{get:()=>"ArrayType"});var ge=de;const me=class extends ge{constructor(t){super(),this.exprs=t||[]}inherit(t){if(t instanceof ge){var e=t.exprs.filter(t=>this.exprs.reduce((e,r)=>e&&!t.even(r),!0));this.exprs=e.concat(this.exprs)}return this}eval(t=null,e={}){return this.exprs.map(r=>r.eval(t,e))}toString(t=null){return"["+this.exprs.map(e=>e.toString(t)).join(", ")+"]"}static parse(t,e,r=me){if(ae(t,"[","]")&&!re.match(t.trim(),[" "]).length)return new r(re.split(ce(t,"[","]"),[","]).map(t=>t.trim()).filter(t=>t).map(t=>e(t)))}};var ve=me;const ye=class extends It{};Object.defineProperty(ye.prototype,"jsenType",{get:()=>"Arguments"});var be=ye;const we=class extends be{constructor(t=[]){super(),this.list=t}eval(t=null,e={}){return this.list.map(r=>r.eval(t,e))}toString(t=null){return"("+this.list.map(e=>e.toString(t)).join(", ")+")"}static parse(t,e,r=we){if(t=t.trim(),ae(t,"(",")")&&!re.match(t,[" "]).length)return new r(re.split(ce(t,"(",")"),[","]).map(t=>e(t.trim())))}};var xe=we,Ee=function(t){return t.filter((t,e,r)=>r.indexOf(t)===e)};const Oe=class extends It{};Object.defineProperty(Oe.prototype,"jsenType",{get:()=>"AssertionExpression"});var je=Oe;const ke=class extends je{constructor(t,e){super(),this.exprs=t,this.logic=e}eval(t=null,e={}){if("!"===this.logic)return!Zt(this.exprs).eval(t,e);Jt(ke.operators);for(var r=(this.logic||"").trim().toUpperCase(),n=r===(ke.operators.or||"").trim().toUpperCase(),i=r===(ke.operators.nor||"").trim().toUpperCase(),s=r===(ke.operators.and||"").trim().toUpperCase(),a=r===(ke.operators.nand||"").trim().toUpperCase(),o=!0,l=0,c=0;c<this.exprs.length;c++){if(o=this.exprs[c].eval(t,e),s&&!o)return!1;if(a&&!o)return!0;if(n&&o)return o;l+=o?1:0}return n?o:s||a?s:i&&0===l}toString(t=null){return"!"===this.logic?"!"+Zt(this.exprs).toString(t):this.exprs.map(e=>e.toString(t)).join(" "+this.logic+" ")}static parse(t,e,r=ke){if(t.startsWith("!"))return new r([e(t.substr(1))],"!");var n=re.lex(t,Jt(r.operators));if(n.tokens.length>1){var i=Ee(n.matches);if(i.length>1)throw new Error('"AND" and "OR" logic cannot be asserted in the same expression: '+t+"!");return new r(n.tokens.map(t=>e(t.trim())),Zt(i))}}};ke.operators={and:"&&",or:"||"};var Se=ke;const Te=class extends It{};Object.defineProperty(Te.prototype,"jsenType",{get:()=>"AssignmentExpression"});var Fe=Te;const Ce=class extends Fe{constructor(t,e,r,n="="){super(),this.initKeyword=t,this.reference=e,this.val=r,this.operator=n}eval(t=null,e={}){var r=this.reference.getEval(t,e),n=this.val.eval(t,e);if(!Xt(r.context)&&!Xt(r.name))return ne.create(r.context).set(r.name,n,e,this.initKeyword);throw new Error('"'+this+'" is undefined!')}toString(t=null){return(this.initKeyword?this.initKeyword+" ":"")+[this.reference.toString(t),this.operator,this.val.toString(t)].join(" ")}static parse(t,e,r=Ce){var n=re.lex(t,r.operators);if(2===n.tokens.length){var i,s=n.tokens.shift().trim(),a=n.tokens.shift().trim();if(["var","let","const"].includes(le(s," "))&&(i=le(s," "),s=oe(s," ").trim()),!((s=e(s))instanceof qt&&(a=e(a))))throw new Error("Invalid assignment expression: "+t);return new r(i,s,a,n.matches[0].trim())}}};Ce.operators=[" = "];var Pe=Ce;const $e=class extends It{};Object.defineProperty($e.prototype,"jsenType",{get:()=>"BooleanType"});var Ae=$e;const _e=class extends Ae{constructor(t){super(),this.state=t}eval(){return"true"===this.state.toLowerCase().trim()}toString(){return this.state}static parse(t,e,r=_e){if("true"===(t=t.toLowerCase().trim())||"false"===t)return new r(t)}};var De=_e;const Me=class extends zt{constructor(t,e){super(),this.reference=t,this.args=e}eval(t=null,e={}){var r=this.reference.getEval(t,e),n=this.args.eval(t,e);if(!Xt(r.context)&&!Xt(r.name))return ne.create(r.context).exec(r.name,n,e);throw new Error('"'+this+'" is undefined!')}toString(t=null){return this.reference.toString(t)+this.args.toString(t)}static parse(t,e,r=Me){if(!t.startsWith("(")&&t.endsWith(")")&&!re.match(t,[" "]).length){var n,i=re.split(t,[]),s=i.pop();if(!((n=e(i.join("")))instanceof qt&&(s=e(s,[xe]))))throw new Error("Invalid call directive: "+t);return new r(n,s)}}};var Ne=Me;const Re=class extends It{};Object.defineProperty(Re.prototype,"jsenType",{get:()=>"ComparisonExpression"});var Ie=Re;const We=class extends Ie{constructor(t,e,r){super(),this.operand1=t,this.operand2=e,this.operator=r}eval(t=null,e={}){return We.compare(this.operand1.eval(t,e),this.operand2.eval(t,e),this.operator)}toString(t=null){return[this.operand1.toString(t),this.operator,this.operand2.toString(t)].join(" ")}static parse(t,e,r=We){var n=Jt(r.operators).map(t=>" "+t+" "),i=re.lex(t,n);if(i.tokens.length>1){if(i.tokens.length>2)throw new Error('Malformed "Comparison" expression: '+t+"!");return new r(e(Zt(i.tokens).trim()),e(Gt(i.tokens).trim()),i.matches[0].trim())}}static compare(t,e,r="=="){if(-1===Jt(We.operators).indexOf(r))throw new Error('The operator "'+r+'" is not recognized.');switch(r){case"===":return t===e;case"==":case"=":return t==e;case">":return t>e;case"<":return t<e;case">=":return t>=e;case"<=":return t<=e;case"!=":return t!=e;case"!==":return t!==e;case"^=":return Yt(t)&&t.startsWith(e);case"$=":return Yt(t)&&t.endsWith(e);case"*=":return!(!Et(e)&&!Yt(e))&&t.indexOf(e)>-1;case"~=":return Yt(t)&&Yt(e)&&(" "+t+" ").indexOf(" "+e+" ")>-1;case">=<":if(!Et(e)||2!==e.length)throw new Error("A 'Between' comparison requires argument 2 to be an array of exactly 2 values.");return t>=e[0]&&t<=e[1];case"/**/":return e.match(new RegExp(t));default:return!1}}static diff(t,e,r){return!We.compare(t,e,r?"===":"==")}};We.operators={exact:{is:"===",isNull:"===",equalsTo:"==",strictlyNotEqualsTo:"!==",notEqualsTo:"!="},relative:{lesserThan:"<",greaterThan:">",lesserThanOrEqualsTo:"<=",greaterThanOrEqualsTo:">=",between:">=<"},partial:{startsWith:"^=",endsWith:"$=",contains:"*=",any:"~=",in:"~=",matches:"/**/"}};var qe=We;const Le=class extends It{};Object.defineProperty(Le.prototype,"jsenType",{get:()=>"TernaryConditional"});var ze=Le;const Be=class extends ze{constructor(t,e,r){super(),this.assertion=t,this.onTrue=e,this.onFalse=r}eval(t=null,e={}){return this.assertion.eval(t,e)?this.onTrue.eval(t,e):this.onFalse.eval(t,e)}toString(t=null){return[this.assertion.toString(t),Be.operators[0],this.onTrue.toString(t),Be.operators[1],this.onFalse.toString(t)].join(" ")}static parse(t,e,r=Be){var n=re.split(t,r.operators);if(n.length>1){if(2===n.length)throw new Error("Malformed ternary expression: "+t+"!");return new r(e(n[0].trim()),e(n[1].trim()),e(n[2].trim()))}}};Be.operators=["?",":"];var Ue=Be;const He=class extends It{};Object.defineProperty(He.prototype,"jsenType",{get:()=>"DeleteExpression"});var Ke=He;const Ye=class extends Ke{constructor(t,e="delete"){super(),this.reference=t,this.operator=e}eval(t=null,e={}){var r=this.reference.getEval(t,e);if(!Xt(r.context)&&!Xt(r.name))return ne.create(r.context).del(r.name,e);throw new Error('"'+this+'" is undefined!')}toString(t=null){return this.operator+" "+this.reference.toString(t)}static parse(t,e,r=Ye){var n=re.lex(t,Object.values(r.operators));if(1===n.matches.length&&t.startsWith(n.matches[0]+" ")){var i;if(!((i=e(n.tokens.pop().trim()))instanceof qt))throw new Error("Invalid delete directive: "+t);return new r(i,n.matches[0].trim())}}};Ye.operators={red:"reduce",del:"delete"};var Xe=Ye;const Qe=class extends It{};Object.defineProperty(Qe.prototype,"jsenType",{get:()=>"Statements"});var Ve=Qe;const Je=class extends It{};Object.defineProperty(Je.prototype,"jsenType",{get:()=>"ReturnDirective"});var Ze=Je;const Ge=class extends Ve{constructor(t,e){super(),this.stmts=t||[],this.delim=e}eval(t=null,e={}){t=ne.create(t);for(var r=[],n=0;n<this.stmts.length;n++){if(this.stmts[n]instanceof Ze)return this.stmts[n].eval(t,e);r[n]=this.stmts[n].eval(t,e)}return r}toString(t=null){return this.stmts.map(e=>e.toString(t)).join(this.delim)}static parse(t,e,r=Ge){var n=re.lex(t,Jt(r.operators).concat([(t,e)=>!(!t.endsWith("}")||e.trim().startsWith("else"))&&""]));if(n.matches.length)return new r(n.tokens.map(t=>e(t.trim())).filter(t=>t),n.matches[0].trim())}};Ge.operators=[";","\r\n"];var tr=Ge;const er=class extends Ut{constructor(t,e,r={}){super(),this.paramters=t||{},this.statements=e,this.arrowFunctionFormatting=r}inherit(t){if(t instanceof Ut){for(var e=Object.keys(t.paramters),r=Object.keys(this.paramters),n=0;n<Math.max(r.length,e.length);n++){var i=e[n],s=r[n];if(!s&&i)throw new Error("Parameter #"+n+" ("+i+") in parent function must be implemented.");if(s&&i){var a=t.paramters[i],o=this.paramters[s];if(o&&!a)throw new Error("Parameter #"+n+" ("+s+") must not have a default value as established in parent function.");if(o&&a&&o.jsenType!==a.jsenType)throw new Error("Default value for parameter #"+n+" ("+s+") must be of type "+a.jsenType+" as established in parent function.")}}this.sup=t}return this}eval(t=null,e={}){return(...r)=>{var n={};Mt(Object.keys(this.paramters),(i,s)=>{var a=this.paramters[s];if(r.length-1<i&&!a)throw new Error('The parameter "'+s+'" is required.');n[s]=r.length>i?r[i]:this.paramters[s]?this.paramters[s].eval(t,e):null});var i=new ne(n,t);return this.statements.eval(i,e)}}toString(t=null){var e=[];if(Mt(this.paramters,(r,n)=>{e.push(r+(n?"="+n.toString(t):""))}),this.arrowFunctionFormatting){var r=!1===this.arrowFunctionFormatting.head||1===e.length&&-1===e[0].indexOf("="),n=!1===this.arrowFunctionFormatting.body;return(r?e[0]:"("+e.join(", ")+")")+" => "+(n?this.statements.toString(t):"{"+this.statements.toString(t)+"}")}return"function ("+e.join(", ")+") {"+this.statements.toString(t)+"}"}static parse(t,e,r=er){var n;if((t=t.trim()).startsWith("function")&&(n=re.split(t,[]).slice(1).filter(t=>t.trim()))&&2===n.length)var i=!1,s=ce(n.shift().trim(),"(",")"),a=ce(n.shift().trim(),"{","}");else{if(t.startsWith("function")||!(n=re.split(t,["=>"]))||2!==n.length)return;s=n.shift().trim(),a=n.shift().trim(),i={};ae(s,"(",")")?s=ce(s,"(",")"):i.head=!1,ae(a,"{","}")?a=ce(a,"{","}"):i.body=!1}var o={};re.split(s,[","]).forEach(t=>{var r=t.split("=");r[1]?o[r[0].trim()]=e(r[1].trim()):o[t.trim()]=null});var l=e(a,[tr],{assert:!1})||e(a);return new r(o,l,i)}};er.operators=["=>"];var rr=er;const nr=class extends It{};Object.defineProperty(nr.prototype,"jsenType",{get:()=>"IfConditional"});var ir=nr;const sr=class extends ir{constructor(t,e,r,n={}){super(),this.assertion=t,this.onTrue=e,this.onFalse=r,this.params=n}eval(t=null,e={}){return this.assertion.eval(t,e)?this.onTrue?this.onTrue.eval(t,e):void 0:this.onFalse?this.onFalse.eval(t,e):void 0}toString(t=null){var e=this.params.onTrueIsBlock?"{"+this.onTrue.toString(t)+"}":this.onTrue?this.onTrue.toString(t):"",r=this.params.onFalseIsBlock?"{"+this.onFalse.toString(t)+"}":this.onFalse?this.onFalse.toString(t):"";return"if ("+this.assertion.toString(t)+")"+e+(r?" else "+r:"")}static parse(t,e,r=sr){var n;if((t=t.trim()).startsWith("if")&&(n=re.split(t,[],{limit:2}).slice(1).filter(t=>t.trim()))&&2===n.length){var i,s,a=e(ce(n.shift().trim(),"(",")").trim()),o=re.split(n.shift().trim(),["else"],{limit:1}),l=o.shift().trim(),c=(o.shift()||"").trim();return ae(l,"{","}")?(i=!0,l=e(l=ce(l,"{","}").trim(),[tr],{assert:!1})||e(l)):l=e(l),c&&(ae(c,"{","}")?(s=!0,c=e(c=ce(c,"{","}").trim(),[tr],{assert:!1})||e(c)):c=e(c)),new r(a,l,c,{onTrueIsBlock:i,onFalseIsBlock:s})}}};var ar=sr,or=function(t,e,r=null){return Et(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1!==e.indexOf(t)):[]};const lr=class extends It{};Object.defineProperty(lr.prototype,"jsenType",{get:()=>"MathExpression"});var cr=lr;const hr=class extends cr{constructor(t,e){super(),this.val=t,this.exprs=e}eval(t=null,e={}){return this.exprs.reduce((r,n)=>{var i=n.val.eval(t,e),s=n.operator.trim();if(!(St(r)&&St(i)||"+"===s))throw new Error("Invalid Math expression: "+this.toString()+"!");switch(s){case"+":return r+i;case"-":return r-i;case"*":return r*i;case"/":return r/i}},this.val.eval(t,e))}toString(t=null){return[this.val.toString(t)].concat(this.exprs.map(e=>e.operator+" "+e.val.toString(t))).join(" ")}static parse(t,e,r=hr){var n=re.lex(t,Jt(r.operators));if(n.tokens.length>1&&n.matches.length===n.tokens.length-1){var i=Ee(n.matches);if(or(i,hr.operators.sup).length&&or(i,hr.operators.sub).length)throw new Error('"Addition/subtraction" and "multiplication/division" operators cannot be used in the same expression: '+t+"!");return new r(e(n.tokens.shift().trim()),n.tokens.map((t,r)=>({operator:n.matches[r],val:e(t.trim())})))}}};hr.operators={sup:["*","/"],sub:[" + "," - "]};var pr=hr;const ur=class extends It{};Object.defineProperty(ur.prototype,"jsenType",{get:()=>"NumberType"});var fr=ur;const dr=class extends fr{constructor(t,e=0){super(),this.int=t,this.dec=e}eval(){return parseFloat(this.int+(this.dec?"."+this.dec:null))}toString(t=null){return this.int+(this.dec?"."+this.dec:null)}static parse(t,e,r=dr){if(St(t)){t=t.split(".");return new r(parseInt(t.shift()),parseInt(t.shift()))}}};var gr=dr;const mr=class extends It{};Object.defineProperty(mr.prototype,"jsenType",{get:()=>"ObjectType"});var vr=mr;const yr=class extends vr{constructor(t){super(),this.entries=t||{}}inherit(t){return t instanceof vr&&Mt(t.entries,(t,e)=>{t in this.entries||(this.entries[t]=e)}),this}eval(t=null,e={}){var r={};return Mt(this.entries,(n,i)=>{r[n]=i.eval(t,e)}),r}toString(t=null){var e=[];return Mt(this.entries,(r,n)=>{e.push(r+yr.operators.sub+n.toString(t))}),"{"+e.join(yr.operators.sup)+"}"}static parse(t,e,r=yr){if(ae(t,"{","}")&&!re.match(t.trim(),[" "]).length){var n={},i=re.split(ce(t,"{","}"),[yr.operators.sup]).map(t=>t.trim()).filter(t=>t);return Mt(i,(t,r)=>{var i=re.split(r,[yr.operators.sub],{limit:1});n[Zt(i).trim()]=e(Gt(i).trim())}),new r(n)}}};yr.operators={sup:",",sub:":"};var br=yr;const wr=class extends It{};Object.defineProperty(wr.prototype,"jsenType",{get:()=>"PresenceOperator"});var xr=wr;const Er=class extends xr{constructor(t,e,r="in"){super(),this.prop=t,this.reference=e,this.operator=r}eval(t=null,e={}){var r=this.reference.getEval(t,e),n=this.prop.eval(t,e);if(!Xt(r.context)&&!Xt(r.name))return ne.create(r.context).has(r.name,n,e);throw new Error('"'+this+'" is undefined!')}toString(t=null){return[this.prop.toString(t),this.operator,this.reference.toString(t)].join(" ")}static parse(t,e,r=Er){var n=re.lex(t,r.operators);if(2===n.tokens.length){var i,s;if(!((i=e(n.tokens.shift().trim()))&&(s=e(n.tokens.shift().trim()))instanceof qt))throw new Error("Invalid presence check expression: "+t);return new r(i,s,n.matches[0].trim())}}};Er.operators=[" in "];var Or=Er;const jr=class extends qt{constructor(t,e,r=!1){super(),this.context=t,this.name=e,this.backticks=r}getEval(t=null,e={}){var r=t,n=this.name;return this.context&&(n instanceof It&&(n=n.eval(t,e)),r=this.context.eval(t,e)),{context:r,name:n}}eval(t=null,e={}){var r=this.getEval(t,e);if(!Xt(r.context)&&!Xt(r.name))return ne.create(r.context).get(r.name,e)}toString(t=null){var e=this.name;if(this.context){var r=this.context.toString(t);e instanceof It?e="["+e.toString(t)+"]":this.backticks&&(e="`"+e+"`")}else{r=t;this.backticks&&(e="`"+e+"`")}return(r||"")+(r&&!e.startsWith("[")?jr.separator:"")+e}static parse(t,e,r=jr){if(!re.match(t.trim(),[" "]).length){var n,i,s=re.split(t,[]),a=s.pop(),o=re.split(a.trim(),[r.separator],{preserveDelims:!0});if(o.length>1&&(a=o.pop().substr(1),s=s.concat(o)),ae(a,"`","`")&&(a=ce(a,"`","`"),i=!0),s.length&&((n=e(s.join(""))).isContext=!0),ae(a,"[","]")){if(!n)throw new Error("Invalid reference: "+t+"!");a=e(ce(a,"[","]"))}return new r(n,a,i)}}};jr.separator=".";var kr=jr;const Sr=class extends Ze{constructor(t){super(),this.expr=t}eval(t=null,e={}){return this.expr?this.expr.eval(t,e):void 0}toString(t=null){return this.expr?"return "+this.expr.toString(t):"return"}static parse(t,e,r=Sr){var n=t.toLowerCase();if(n.startsWith("return ")||"return"===n)return new r(e(t.substr(6).trim()))}};var Tr=Sr;const Fr=class extends It{};Object.defineProperty(Fr.prototype,"jsenType",{get:()=>"StringType"});var Cr=Fr;const Pr=class extends Cr{constructor(t,e){super(),this.expr=t,this.quote=e}eval(){return this.expr}toString(){return this.quote+this.expr+this.quote}static parse(t,e,r=Pr){if(t=t.trim(),(ae(t,'"','"')||ae(t,"'","'"))&&!re.match(t,[" "]).length){var n=ae(t,'"','"')?'"':"'";return new r(ce(t,n,n),n)}}};var $r=Pr;Kt.grammars={If:ar,Return:Tr,Deletion:Xe,Assignment:Pe,Presence:Or,Func:rr,Abstraction:fe,Condition:Ue,Assertion:Se,Comparison:qe,Math:pr,Arr:ve,Obj:br,Num:gr,Str:$r,Bool:De,Call:Ne,Reference:kr};var Ar=Kt,_r=function(t){return Array.isArray(t)||"object"==typeof t},Dr=function(t){return Array.isArray(t)},Mr=function(t){return"string"==typeof t},Nr=function(t){return arguments.length&&(void 0===t||void 0===t)},Rr=function(t){return null===t||""===t},Ir=function(t){return!Array.isArray(t)&&"object"==typeof t&&t},Wr=function(t,e=!0){return Dr(t)?t:!e&&Ir(t)?[t]:!1!==t&&0!==t&&function(t){return Rr(t)||Nr(t)||!1===t||0===t||_r(t)&&!Object.keys(t).length}(t)?[]:function(t){return!Mr(t)&&!Nr(t.length)}(t)?Array.prototype.slice.call(t):Ir(t)?Object.values(t):[t]},qr=function(t,e=null){var r={};return 2===arguments.length&&(Mr(t)?r[t]=e:Dr(t)&&Dr(e)&&t.forEach((t,n)=>r[t]=e[n])),r},Lr=function(t){return!0!==t&&!1!==t&&null!==t&&""!==t&&!isNaN(1*t)},zr=function(t){return function(t){return"function"==typeof t}(t)||t&&"[object function]"==={}.toString.call(t)},Br=function(t,e){var r=void 0;return _r(t)&&Object.keys(t).forEach((n,i)=>{!1!==r&&(r=e(Lr(n)?parseFloat(n):n,t[n],i))}),r},Ur=class{constructor(t,e={}){this.$={},this.$.target=t,this.$.details=e,this.$.propagationStopped=!1,this.$.defaultPrevented=!1,this.$.promisesInstance=null,this.$.promises=[],Br(e,(t,e)=>{"$"!==t&&Object.defineProperty(this,t,{value:e})})}get target(){return this.$.target}get details(){return this.$.details}stopPropagation(){this.$.propagationStopped=!0}get propagationStopped(){return this.$.propagationStopped}preventDefault(){this.$.defaultPrevented=!0}get defaultPrevented(){return this.$.defaultPrevented}promise(t){if(!(t instanceof Promise))throw new Error("Event.promise() must be called with a Promise.");this.$.promises.push(t),this.$.promisesInstance=null}get promises(){return!this.$.promisesInstance&&this.$.promises.length&&(this.$.promisesInstance=Promise.all(this.$.promises)),this.$.promisesInstance}response(t){var e,r=Ir(t)&&!Nr(t.propagationStopped)&&!Nr(t.defaultPrevented);!1===t||r&&t.propagationStopped?this.stopPropagation():!1===t||r&&t.defaultPrevented?this.preventDefault():(t instanceof Promise&&(e=t)||r&&(e=t.promises))&&this.promise(e)}},Hr=class extends Ur{constructor(t,e={}){super(t,e)}},Kr=function(t){return"number"==typeof t},Yr=function(t){return Ir(t)&&Object.getPrototypeOf(t)===Object.prototype},Xr=function(t){return!0===t||!1===t};const Qr=function(t,e,r=!0,n=1){if(Dr(t)&&Dr(e)&&t.length!==e.length)return!r;if(Ir(t)&&Ir(e)){var i=Object.keys(t),s=Object.keys(e);if(!i.length&&!s.length)return Yr(t)&&Yr(e)?r:t===e===r;if(!Qr(i,s))return!r}if(n>0&&(Dr(t)&&Dr(e)||Ir(t)&&Ir(e))){var a=function(t,e,r=!0,n=!0,i=!1,s=!1){if(Dr(t)&&Dr(e)){var a=[],o=!0;return t.forEach(t=>{if(o){var l=!1;Br(e,(e,i)=>{(!l||n&&_r(t))&&(l=r(t,i),(Dr(l)&&!l.length||Ir(l)&&!Object.keys(l).length)&&(l=!1),_r(l)&&n&&(t=l))}),_r(l)?a.push(n?l:t):Xr(l)?i&&!l||!i&&l?a.push(t):s&&(o=!1):a.push(l)}}),a}if(Ir(t)&&Ir(e)){a={},o=!0;return Object.keys(t).forEach(l=>{if(o){var c=r(t[l],e[l]);(Dr(c)&&!c.length||Ir(c)&&!Object.keys(c).length)&&(c=!1),_r(c)?a[l]=n?c:t[l]:Xr(c)?i&&!c||!i&&c?a[l]=t[l]:s&&(o=!1):a[l]=c}}),a}}(t,e,(t,e)=>Qr(t,e,r,n-1),!1,!1,!0);return Dr(a)?a.length===t.length&&a.length===e.length:Ir(a)&&Ir(t)?Object.keys(a).length===Object.keys(t).length&&Object.keys(a).length===Object.keys(e).length:a}return zr(r)?r(t,e):Kr(t)&&Kr(e)&&isNaN(t)&&isNaN(e)?r:t===e===r};var Vr=Qr,Jr=class{disconnect(){this.disconnected=!0}},Zr=class{constructor(){this.fireables=[],this.currentlyFiringEvents=[]}addFireable(t){return this.fireables.push(t),t}removeFireable(t,e=[]){this.fireables=this.fireables.filter(e=>e!==t)}findFireables(t){return this.fireables.filter(e=>!(t.handler&&e.handler!==t.handler||t.params&&(t.params.type&&e.params.type!==t.params.type||t.params.tags&&function(t,e,r=null){return Dr(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1!==e.indexOf(t)):[]}(e.params.tags||[],t.params.tags).length!==t.params.tags.length)))}static createForTarget(t,e,r){var n;if(t&&_r(t))return(n=t[Gr])||(n={},Object.defineProperty(t,Gr,{get:()=>n,set:t=>{if(t!==n)throw new Error('Attempt to overwrite the "'+Gr+'" special property!')},enumerable:!1})),n[e]="listeners"===e?new r(t):new r,n[e]}static getForTarget(t,e){var r;if(t&&_r(t)&&(r=t[Gr]))return r[e]}};const Gr="< r e f l e x >";var tn=class extends Jr{constructor(t,e={}){super(),this.handler=t,this.params=e}fire(t,e,r){return this.disconnected||this.params.type&&this.params.type!==t.type?e(...Wr(arguments).slice(2)):this.handler(t,r,e)}};class en extends Zr{fire(t,e=null){if(this.currentlyFiringEvents.filter(e=>e.type===t.type&&e.query===t.query).length)return e?e():void 0;this.currentlyFiringEvents.push(t);const r=(n,...i)=>{var s=this.fireables[n];return s?s.fire(t,(...t)=>r(n+1,...t),...i):e?e(...i):i[0]};var n=r(0);return this.currentlyFiringEvents.pop(),n}static createForTarget(t){return super.createForTarget(t,"traps",en)}static getForTarget(t){return super.getForTarget(t,"traps")}}var rn=function(t,...e){return e.forEach(e=>{t.indexOf(e)<0&&t.push(e)}),t},nn=function(t,e){var r=[];return function(t,e){e=(e=e||Object.prototype)&&!Dr(e)?[e]:e;var r=[];for(t=t;t&&(!e||e.indexOf(t)<0)&&"default"!==t.name;)r.push(t),t=t?Object.getPrototypeOf(t):null;return r}(t,e).forEach(t=>{rn(r,...Object.getOwnPropertyNames(t))}),r};function sn(t,e,r=!1,n=!1,i=!0){var s=0,a=t.shift();if((Lr(a)||!0===a||!1===a)&&(s=a,a=t.shift()),!t.length)throw new Error("_merge() requires two or more array/objects.");return t.forEach((t,o)=>{(_r(t)||zr(t))&&(r?nn(t):Object.getOwnPropertyNames(t)).forEach(l=>{var c=a[l],h=t[l];if((Dr(c)&&Dr(h)||Ir(c)&&Ir(h))&&(!0===s||s>0))a[l]=Dr(c)&&Dr(h)?[]:{},sn([Lr(s)?s-1:s,a[l],c,h],e,r,n,i);else if(e(l,a,t,o))if(Dr(a)&&Dr(t))n?a[l]=h:a.push(h);else try{i?Object.defineProperty(a,l,Object.getOwnPropertyDescriptor(t,l)):a[l]=t[l]}catch(t){}})}),a}var an=function(t,e=[],r=!0){var n=0;return Lr(arguments[0])&&_r(arguments[1])&&(n=arguments[0],t=arguments[1],e=arguments[2]||[]),sn([n,{},t],(t,r,n)=>zr(e)?e(t):!Dr(e)||!e.length||e.indexOf(t)>-1,!1,!1,r)},on=function(...t){return sn(t,(t,e,r)=>!0,!1,!1,!1)},ln=class extends Ur{constructor(t,e={}){if(e.data&&(e.fields=Object.keys(e.data)),super(t,e),this.srcEvt){this.dataEven=this.srcEvt.dataEven,this.originatingTarget=this.srcEvt.originatingTarget,this.originatingType=this.srcEvt.originatingType,this.originatingFields=[],this.originatingData={},this._originatingData={};var r=this.fields[0];Object.keys(this.srcEvt.originatingData).forEach(t=>{var e=r+"."+t;this.originatingFields.push(e),this.originatingData[e]=this.srcEvt.originatingData[t],this._originatingData[e]=this.srcEvt._originatingData[t]}),this.originatingCreated=this.srcEvt.originatingCreated,this.originatingDeleted=this.srcEvt.originatingDeleted}else this.dataEven=Vr(this.data,this._data),this.originatingTarget=this.target,this.originatingType=this.type,this.originatingFields=this.fields,this.originatingData=this.data,this._originatingData=this._data,this.originatingCreated=this.created,this.originatingDeleted=this.deleted}};class cn extends Zr{findFireables(t){return super.findFireables(t).filter(e=>Rr(t.fields)||Nr(t.fields)||Vr(Wr(e.fields),Wr(t.fields)))}fire(t){return this.currentlyFiringEvents.filter(e=>e.type===t.type&&e.fields===t.fields).length||(this.currentlyFiringEvents.push(t),this.fireables.forEach(e=>{t.propagationStopped||e.params.type&&e.params.type!==t.type||e.fire(t)}),this.currentlyFiringEvents.pop()),t}static createForTarget(t){return super.createForTarget(t,"observers",cn)}static getForTarget(t){return super.getForTarget(t,"observers")}}var hn=function(t,e,r=null,n={}){if(!t||!_r(t))throw new Error("Object must be of type object!");var i;(zr(e)||Rr(e)||Nr(e))&&(n=arguments.length>2?r:{},r=e,e=null),(i=cn.getForTarget(t))&&i.findFireables({handler:r,fields:e,params:n}).forEach(t=>{i.removeFireable(t)})},pn=function(t,e,r){hn(r,null,{tags:["#e-bubbling",e,t]})},un=function(t){return typeof t},fn=function(t,e,r={},n={}){e=Wr(e).slice();for(var i=t;!Nr(i)&&!Rr(i)&&e.length;){var s=e.shift();if(!(r.get?r.get(i,s):_r(i)?s in i:i[s]))return void(n.exists=!1);i=r.get?r.get(i,s):i[s]}return n.exists=!0,i},dn=class extends Jr{constructor(t,e=null,r={}){if(super(),this.handler=t,this.fields=e,this.params=r,this.fieldsArray=Wr(this.fields),this.isDynamicField=this.fieldsArray.filter(t=>t.indexOf("..")>-1||t.startsWith(".")||t.endsWith(".")).length,this.isDynamicField&&this.fieldsArray.length>1)throw new Error('Only one "Dynamic Field" must be observed at a time! "'+this.fieldsArray.join(", ")+'" have been bound together.')}fire(t){this.disconnected||this.params.type&&this.params.type!==t.type||t.dataEven&&!1!==this.params.diff||this.fireCallback(t,e=>{if(e){var r=[],n=[];return e.forEach(e=>{var i=t.originatingFields.reduce((r,n)=>{var i=t.originatingData[n],s=t._originatingData[n];if(!r&&e===n)return[i,s];if(!r&&(e+".").startsWith(n+".")){var a=function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?"":t.substr(n+e.length)}(e,n+".");return[fn(i,a.split("."),{get:yn}),fn(s,a.split("."),{get:yn})]}return r},null);if(i)r.push(i.shift()),n.push(i.shift());else{var s=fn(t.target,Mr(e)?e.split("."):e,{get:yn});r.push(s),n.push(s)}}),Dr(this.fields)?t.response(this.handler(r,n,t)):t.response(this.handler(r[0],n[0],t))}r={},n={};return t.fields.forEach(e=>{var i=e in t.data?t.data[e]:yn(t.target,e),s=e in t._data?t._data[e]:i;r[e]=i,n[e]=s}),t.response(this.handler(r,n,t))})}fireCallback(t,e){if(this.fieldsArray.length){var r=[];this.fieldsArray.filter((e,n)=>(e=Mr(e)?e.replace(/`/g,""):e,r[n]=[],t.originatingFields.filter(i=>{var s=i.split("."),a=this.isDynamicField?e.split(".").map((t,e)=>t||s[e]||"").join("."):e;return rn(r[n],a),(a===i&&!t.srcEvt||!1!==this.params.observeUp&&(a+".").startsWith(i+".")||this.params.observeDown&&(i+".").startsWith(a+"."))&&(!this.isDynamicField||!a.split(".").filter(t=>!t).length)}).length)).length&&(n=r,n.reduce((t,e)=>{var r=[];return t.forEach(t=>{Wr(e).forEach(e=>{var n=t.slice();n.push(e),r.push(n)})}),r},[[]])).forEach(e)}else t.srcEvt&&!this.params.observeDown||e();var n}},gn=function(t,e,r=null,n={}){if(!t||!_r(t))throw new Error("Object must be of type object!");if(zr(e)&&(n=arguments.length>2?r:{},r=e,e=null),!zr(r))throw new Error('Callback must be a function; "'+un(r)+'" given!');var i;return(i=cn.getForTarget(t))||(i=cn.createForTarget(t)),i.addFireable(new dn(r,e,n))},mn=function(t,e,r){var n;gn(r,(i,s,a)=>{if(n=cn.getForTarget(t)){var o=qr(e,r);return n.fire(new ln(t,{type:a.type,bubbling:!0,data:o,_data:o,srcEvt:a}))}},{observeDown:!0,tags:["#e-bubbling",e,t]})},vn=function(t,e,r=[],n=!1){var i=t.map((t,e)=>{if(!t||!_r(t))throw new Error("Target must be of type object!");return{target:t,targetCopy:an(t,r),setData:{},_setData:{},delData:{},_delData:{},created:[],deleted:[]}}),s=e(...t);return i.map(t=>{var e,i,s,a=Object.keys(t.targetCopy),o=Object.keys(t.target),l=(e=a.concat(o),e.filter((t,e,r)=>r.indexOf(t)===e)).filter(e=>{if(!(r.length&&!r.includes(e)||Dr(t.target)&&("length"===e||"< r e f l e x >"===e))){if(o.includes(e)?(t._setData[e]=t.targetCopy[e],t.setData[e]=t.target[e],a.includes(e)||t.created.push(e)):(t._delData[e]=t.targetCopy[e],t.delData[e]=void 0,t.deleted.push(e)),t.targetCopy[e]!==t.target[e])return t.targetCopy[e]&&_r(t.targetCopy[e])&&pn(t.target,e,t.targetCopy[e]),t.target[e]&&_r(t.target[e])&&mn(t.target,e,t.target[e]),!0;delete t.setData[e],delete t._setData[e]}});return((s=cn.getForTarget(t.target))||n)&&(i=new ln(t.target,{type:"transaction",data:on(t.setData,t.delData),_data:on(t._setData,t._delData),created:t.created,deleted:t.deleted}),s&&(Object.keys(t.delData).length&&i.response(s.fire(new ln(t.target,{type:"del",data:t.delData,_data:t._delData,deleted:t.deleted}))),Object.keys(t.setData).length&&i.response(s.fire(new ln(t.target,{type:"set",data:t.setData,_data:t._setData,created:t.created}))))),n?i:l}),s},yn=function(t,e){if(!t||!_r(t))throw new Error("Target must be of type object!");var r,n,i=function(r){return arguments.length?r:Dr(e)?qr(e,t):t[e]};return r=(n=en.getForTarget(t))?n.fire(new Hr(t,{type:"get",query:e}),i):i(),Dr(t)&&!Lr(e)&&zr(r)?function(...e){return vn([t],()=>r.apply(t,e))}:r},bn=function(t,e){return t.reduce((t,r)=>t&&e(r),!0)},wn=function(t,e){if(!t||!_r(t))throw new Error("Target must be of type object!");var r,n=function(r){return arguments.length?r:e in t};return(r=en.getForTarget(t))?r.fire(new Hr(t,{type:"has",query:e}),n):n()},xn=function(t,e,r,n=null,i=!1){if(!e||!_r(e))throw new Error("Target must be of type object!");Ir(r)&&(i=n);var s,a,o=r,l={},c={},h=[],p=(r,n,i)=>{var s;l[r]=e[r],wn(e,r)||h.push(r),t&&(n=(s=n||{}).value);var a,o,p=function(t){return arguments.length?t:(s?Object.defineProperty(e,r,s):e[r]=n,!0)};if(o=en.getForTarget(e)){var u=s?{type:"def",query:r,descriptor:s,related:i}:{type:"set",query:r,value:n,related:i};a=o.fire(new Hr(e,u),p)}else a=p();return a?(c[r]=n,c[r]!==l[r]?(l[r]&&_r(l[r])&&pn(e,r,l[r]),c[r]&&_r(c[r])&&mn(e,r,c[r])):(delete c[r],delete l[r])):delete l[r],a},u=[];if(Dr(o)||(Mr(o)||Kr(o))&&(o=Wr(o)))u=o.map(t=>p(t,n,o));else if(Ir(r)){var f=Object.keys(r);u=f.map(t=>p(t,r[t],f))}return((a=cn.getForTarget(e))||i)&&(s=new ln(e,{type:"set",data:c,_data:l,created:h}),a&&a.fire(s)),i?s:bn(u,t=>t)},En=function(t,e,r=null,n=!1){return xn(!1,...arguments)},On=function(t,e){Wr(e).forEach(e=>{var r,n,i=t[e],s=Object.getOwnPropertyDescriptor(t,e)||{enumerable:!(e in t)};"value"in s&&delete s.value,"writable"in s&&delete s.writable,s.get=()=>{if(r)return i;r=!0;var n=yn(t,e);return r=!1,n},s.set=r=>{if(n)return i=r,!0;n=!0;En(t,e,r);return n=!1,!0},Object.defineProperty(t,e,s)})},jn=function(t,e){if(!e||!_r(e))throw new Error("Target must be of type object!");var r,n=function(r){return arguments.length?r:t?Object.getOwnPropertyNames(e):Object.keys(e)};return(r=en.getForTarget(e))?r.fire(new Hr(e,{type:t?"ownKeys":"keys"}),n):n()},kn=function(t){return jn(!1,...arguments)};var Sn=function(t,e,r=null,n=!1){return xn(!0,...arguments)},Tn=function(t,e,r=!1){if(!t||!_r(t))throw new Error("Target must be of type object!");e=Wr(e);var n,i,s={},a={},o=[],l=e.map(r=>{s[r]=t[r],wn(t,r)&&o.push(r);var n,i,l=function(e){return arguments.length?e:(delete t[r],!0)};return(n=(i=en.getForTarget(t))?i.fire(new Hr(t,{type:"del",query:r,related:e}),l):l())&&(a[r]=void 0,s[r]&&_r(s[r])&&pn(t,r,s[r])),n});return((i=cn.getForTarget(t))||r)&&(n=new ln(t,{type:"del",data:a,_data:s,deleted:o}),i&&Object.keys(a).length&&i.fire(n)),r?n:bn(l,t=>t)};class Fn extends Zr{fire(t){return this.fireables.forEach(e=>{t.propagationStopped||e.fire(t)}),t}static createForTarget(t,e=Fn){return super.createForTarget(t,"listeners",e)}static getForTarget(t){return super.getForTarget(t,"listeners")}}var Cn=class extends Jr{constructor(t,e={}){super(),this.handler=t,this.params=e}fire(t){this.params.type===t.type&&t.response(this.handler.call(this.target,t.e))}};var Pn={build:function t(e,r=!1){if(!e||!_r(e))throw new Error("Target must be of type object!");var n=kn(e);n.forEach(n=>{var i=yn(e,n);_r(i)&&i&&(mn(e,n,i),t(i,r))}),r&&On(e,n)},observe:gn,unobserve:hn,trap:function(t,e,r={}){if(!t||!_r(t))throw new Error("Object must be of type object!");if(!zr(e))throw new Error('Callback must be a function; "'+un(e)+'" given!');var n;return(n=en.getForTarget(t))||(n=en.createForTarget(t)),n.addFireable(new tn(e,r))},untrap:function(t,e=null,r={}){if(!t||!_r(t))throw new Error("Object must be of type object!");var n;(n=cn.getForTarget(t))&&n.findFireables({handler:e,params:r}).forEach(t=>{n.removeFireable(t)})},def:Sn,defineProperty:Sn,set:En,del:Tn,deleteProperty:Tn,link:mn,unlink:pn,transaction:vn,get:yn,has:wn,init:On,keys:kn,ownKeys:function(t){return jn(!0,...arguments)},on:function(t,e,r,n={}){var i;return(i=Fn.getForTarget(t))||(i=Fn.createForTarget(t)),i.addFireable(new Cn(r,on(n,{type:e})))},off:function(t,e,r=null,n={}){var i;(i=Fn.getForTarget(t))&&i.findFireables({handler:r,type:e,params:n}).forEach(t=>{i.removeFireable(t)})},trigger:function(t,e,r={}){var n;if(n=Fn.getForTarget(t))return n.fire(new Ur(t,on(r,{type:e})))},MutationEvent:ln,QueryEvent:Hr,Event:Ur},$n={env:"",context:{},attrMap:{hint:"c-hint",namespace:"c-namespace",superrole:"c-role",subrole:"c-role",bundle:"c-bundle",nocompose:["nocompose","shadow"]},tagMap:{jsen:'script[type="text/jsen"]',bundle:'template[is="c-bundle"]',import:"c-import"},treeProperty:"tree",bindingProperty:"binding",keyValAttributes:[],listAttributes:[],remodelCallback:null,recomposeCallback:null,hideDataBlockScript:!0},An=function(t){return function(t){return"function"==typeof t}(t)||t&&"[object function]"==={}.toString.call(t)},_n=function(t){return!0!==t&&!1!==t&&null!==t&&""!==t&&!isNaN(1*t)},Dn=function(t){return t.filter((t,e,r)=>r.indexOf(t)===e)},Mn=function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?t:t.substr(0,n)},Nn=function(t,e){return Mn(t,e,!0)},Rn=function(t,e,r,n=[]){if(n=n.concat([$n.attrMap.namespace,...$n.attrMap.nocompose]),e.hasAttribute("norecompose")&&(n=n.concat((e.getAttribute("norecompose")||"*").split(" ").map(t=>t.trim()))),An($n.recomposeCallback)){var i=$n.recomposeCallback(t,e,r,n);if(!1===i)return!1;(vt(i)||mt(i))&&(n=n.concat(i))}Dn($n.listAttributes.concat([$n.attrMap.hint,$n.attrMap.superrole,$n.attrMap.subrole,"role","class"])).forEach(i=>{var s,a;if(!n.includes(i)&&!n.includes("*")&&(s=t.getAttribute(i))){if(a=e.getAttribute(i))var o="prepend"===r?[s,a]:[a,s];else o=[s];e.setAttribute(i,Dn(o.join(" ").split(" ").map(t=>t.trim())).join(" ")),n.push(i)}}),Dn($n.keyValAttributes.concat("style")).forEach(i=>{var s,a;if(!n.includes(i)&&!n.includes("*")&&(s=t.getAttribute(i))){if(a=e.getAttribute(i))(o="prepend"===r?[s,a]:[a,s])[0].trim().endsWith(";")||(o[0]=o[0]+";");else var o=[s];e.setAttribute(i,o.join(" ")),n.push(i)}});for(var s=0;s<t.attributes.length;s++){var a=t.attributes[s];n.includes(a.name)||n.includes("*")||e.hasAttribute(a.name)||(e.setAttribute(a.name,a.value),n.push(a.name))}if(!n.includes("@directives")&&!n.includes("*")){var o=xt((e.shadowRoot||e).children).filter(t=>t.matches($n.tagMap.jsen)),l=xt((t.shadowRoot||t).children).filter(t=>t.matches($n.tagMap.jsen));l.length&&(o.length?o[0][r](l[0].textContent):e.prepend(l[0].cloneNode(!0)))}return e},In=function(t,e){return e.matches($n.tagMap.import)?function(t,e){e=e.cloneNode(!0);var r=t.getAttribute($n.attrMap.namespace),n=(e.getAttribute($n.attrMap.namespace),(e.getAttribute($n.attrMap.superrole)||"").split(" ").map(t=>t.trim()));return e.setAttribute($n.attrMap.namespace,r),Rn(t,e,"append"),xt((t.shadowRoot||t).children).forEach((t,r)=>{if(!t.matches($n.tagMap.jsen)){t=t.cloneNode(!0);var i=[],s=[];(t.getAttribute($n.attrMap.subrole)||"").split(" ").map(t=>t.trim()).forEach(t=>{var e=n.filter(e=>t.startsWith(e+"-"));e.length&&(i.push(e[0]),s.push(t))});var a=$n.context.CSS?$n.context.CSS.escape:t=>t;if(i.length){var o,l=i.map(t=>"["+a($n.attrMap.superrole)+'~="'+t+'"]'),c=s.map(t=>"["+a($n.attrMap.subrole)+'~="'+t+'"]');e.shadowRoot&&(o=e.shadowRoot.querySelectorAll(c))||1===(o=e.querySelectorAll(c)).length&&o[0].closest(l)===e?(Rn(o[0],t,"prepend"),o[0].replaceWith(t)):e.append(t)}else e.append(t)}}),e}(e,t):Rn(t,e,"prepend")};class Wn{constructor(t,e,r,n=null){this.sources=xt(t),this.namespace=xt(e),this.getter=r,this.carry=n,this.collections={},this.value}enter(t){return t in this.collections||(this.collections[t]=new Wn(this.sources,this.namespace.concat(t),this.getter,this)),this.collections[t]}leave(){return this.carry}get(){if(!this.value){var t=this.namespace.slice(),e=this.carry?this.carry.get():null;this.sources.forEach((r,n)=>{(e=this.getter.call(null,r,t,e,n))&&(this.value=e)})}return this.value}find(t){for(var e,r,n=t.split("/"),i=this;(r=n.shift())&&(i=i.enter(r));)e=i;var s=e.get();if(s)return s.cloneNode(!0)}}var qn=function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?"":t.substr(n+e.length)},Ln=function(t,...e){return e.forEach(e=>{t.indexOf(e)<0&&t.push(e)}),t},zn=function(t,e){var r=[];return function(t,e){e=(e=e||Object.prototype)&&!mt(e)?[e]:e;var r=[];for(t=t;t&&(!e||e.indexOf(t)<0)&&"default"!==t.name;)r.push(t),t=t?Object.getPrototypeOf(t):null;return r}(t,e).forEach(t=>{Ln(r,...Object.getOwnPropertyNames(t))}),r};function Bn(t,e,r=!1,n=!1,i=!0){var s=0,a=t.shift();if((_n(a)||!0===a||!1===a)&&(s=a,a=t.shift()),!t.length)throw new Error("_merge() requires two or more array/objects.");return t.forEach((t,o)=>{(bt(t)||An(t))&&(r?zn(t):Object.getOwnPropertyNames(t)).forEach(l=>{var c=a[l],h=t[l];if((mt(c)&&mt(h)||wt(c)&&wt(h))&&(!0===s||s>0))a[l]=mt(c)&&mt(h)?[]:{},Bn([_n(s)?s-1:s,a[l],c,h],e,r,n,i);else if(e(l,a,t,o))if(mt(a)&&mt(t))n?a[l]=h:a.push(h);else try{i?Object.defineProperty(a,l,Object.getOwnPropertyDescriptor(t,l)):a[l]=t[l]}catch(t){}})}),a}var Un=function(...t){return Bn(t,(t,e,r)=>!0,!1,!1,!1)};class Hn extends tr{filter(){var t=[];return this.stmts.forEach(e=>{Hn.flatten(e,e=>{t.push(e)})}),(t=t.reduce((t,e)=>(t.forEach(t=>{t.isDuplicate||t.overridden||(e.toString()!==t.toString()||e.important!==t.important&&e.fallback!==t.fallback?e.important||t.fallback?t.overridden=!0:(t.important||e.fallback)&&(e.overridden=!0):e.isDuplicate=!0)}),t.concat([e])),[])).filter(t=>!t.isDuplicate&&!t.overridden)}static flatten(t,e,r=""){if("IfConditional"===t.jsenType){var n="("+t.assertion.toString()+")";t.onTrue&&("Statements"===t.onTrue.jsenType?t.onTrue.stmts.forEach(t=>{Hn.flatten(t,e,(r?r+" && ":"")+n)}):Hn.flatten(t.onTrue,e,(r?r+" && ":"")+n)),t.onFalse&&("Statements"===t.onFalse.jsenType?t.onFalse.stmts.forEach(t=>{Hn.flatten(t,e,(r?r+" && ":"")+"!"+n)}):Hn.flatten(t.onFalse,e,(r?r+" && ":"")+"!"+n))}else e(r?Ar.parse(r+' && "[ENDIF]" && '+t.toString()):t)}static parse(t,e={}){return super.parse(t.trim().endsWith(";")?t:t+";",(t,r=null,n=null)=>Ar.parse(t,r,n?Un(e,n):e),Hn)}}var Kn=function(t,e=[],r=!0){var n=0;return _n(arguments[0])&&bt(arguments[1])&&(n=arguments[0],t=arguments[1],e=arguments[2]||[]),Bn([n,{},t],(t,r,n)=>An(e)?e(t):!mt(e)||!e.length||e.indexOf(t)>-1,!1,!1,r)};var Yn=function(t,e,r=null){return mt(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1!==e.indexOf(t)):[]};const Xn={std:{html:{type:["#sectioning-root"],model:["head","body"],singleton:!0},caption:{model:["#flow","!table"],singleton:!0},col:{model:["#nothing"]},colgroup:{model:[{"colgroup[span]":["#nothing"]},{":not(colgroup[span])":["col","template"]}],singleton:!0},dd:{model:["#flow"],implicitRole:"definition"},dt:{model:["#flow","!#heading","!#sectioning","!header","!footer"],implicitRole:"term"},figcaption:{model:["#flow"],singleton:!0},head:{model:["#metadata"],singleton:!0},legend:{model:["#phrasing"],singleton:!0},li:{model:["#flow"],implicitRole:"listitem"},optgroup:{model:["option","#script-supporting"],implicitRole:"group"},option:{model:[{"option[label][value]":["#nothing"]},{"option[label]:not(option[value])":["#text"]},{":not(option[label])":["#text"]}]},param:{model:["#nothing"]},rp:{model:["#text"]},rt:{model:["#phrasing"]},source:{model:["#nothing"]},summary:{model:["#phrasing","#heading"],singleton:!0},track:{model:["#nothing"]},tbody:{model:["#script-supporting","tr"]},td:{model:["#flow","!#heading","!#sectioning","!header","!footer"]},tfoot:{model:["tr","#script-supporting"],singleton:!0},thead:{model:["tr","#script-supporting"],singleton:!0},tr:{model:["#script-supporting","td","th"]},a:{type:["#flow","#phrasing",{"a[href]":["#interactive","#palpable"]}],model:["#transparent","!#interactive","!a"]},abbr:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},address:{type:["#flow","#palpable"],model:["#flow","!#heading","!#sectioning","!header","!footer","!address"]},area:{type:["#flow","#phrasing"],model:["#nothing"]},article:{type:["#flow","#palpable","#sectioning-content"],model:["#flow"],implicitRole:"article",acceptableRoles:["application","article","document","main"]},aside:{type:["#flow","#palpable","#sectioning-content"],model:["#flow"],implicitRole:"complementary",acceptableRoles:["complementary","note","search"]},audio:{type:["#embedded","#flow","#phrasing",{"audio[controls]":["#interactive","#palpable"]}],model:["#transparent","!#media","track",{":not(audio[src])":["source"]}]},b:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},base:{type:["#metadata"],model:["#nothing"],singleton:!0},bdi:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},bdo:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},blockquote:{type:["#flow","#palpable","#sectioning-root"],model:["#flow"]},body:{type:["#sectioning-root"],model:["#flow","@banner","@contentinfo","@complementary","@main"],singleton:!0},br:{type:["#flow","#phrasing"],model:["#nothing"]},button:{type:["#flow","#interactive","#palpable","#phrasing"],model:["#phrasing","!#interactive"]},canvas:{type:["#embedded","#flow","#palpable","#phrasing"],model:["#transparent","!#interactive","a","img[usemap]","button",'input[type="button"]','input[type="radio"]','input[type="checkbox"]',"select[multiple]","select[size>=1]","[tabindex]!#interactive"]},cite:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},code:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},data:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},datalist:{type:["#flow","#phrasing"],model:["#phrasing","#script-supporting","option"]},del:{type:["#flow","#phrasing"],model:["#transparent"]},details:{type:["#flow","#interactive","#palpable","#sectioning-root"],model:["#flow","summary"]},dfn:{type:["#flow","#palpable","#phrasing"],model:["#phrasing","!dfn"],implicitRole:"term"},dialog:{type:["#flow","#sectioning-root"],model:["#flow"],implicitRole:"dialog"},div:{type:["#flow","#palpable"],model:[{"dl > div":["dt","dd"]},{div:["#flow"]}]},dl:{type:["#flow"],model:["#script-supporting","dl","dt","div"]},em:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},embed:{type:["#embedded","#flow","#phrasing","#interactive","#palpable"],model:["#nothing"]},fieldset:{type:["#flow","#sectioning-root","#palpable"],model:["legend","#flow"]},figure:{type:["#flow","#sectioning-root","#palpable"],model:["#flow","figcaption"],implicitRole:"figure"},footer:{type:["#flow","#palpable"],model:["#flow","!header","!footer"],acceptableRoles:["contentinfo"],singleton:!0},form:{type:["#flow","#palpable"],model:["#flow","!form"]},h1:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h2:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h3:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h4:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h5:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h6:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},header:{type:["#flow","#palpable"],model:["#flow","!header","!footer"],acceptableRoles:["banner"],singleton:!0},hgroup:{type:["#flow","#heading","#palpable"],model:["h1","h2","h3","h4","h5","h6","#script-supporting"]},hr:{type:["#flow"],model:["#nothing"],implicitRole:"separator"},i:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},iframe:{type:["#embedded","#flow","#phrasing","#interactive","#palpable"],model:["#nothing"]},img:{type:["#embedded","#flow","#phrasing",{"img[usemap]":["#interactive","#palpable"]}],model:["#nothing"]},input:{type:["#flow","#phrasing",{'input:not([type!="hidden"])':["#interactive","#palpable"]}],model:["#nothing"]},ins:{type:["#flow","#phrasing","#palpable"],model:["#transparent"]},kbd:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},label:{type:["#flow","#phrasing","#interactive","#palpable"],model:["#phrasing","!label"]},link:{type:["#metadata",{"body link":["#flow","#phrasing"]}],model:["#nothing"]},main:{type:["#flow","#palpable"],model:["#flow"],implicitRole:"main",singleton:!0},map:{type:["#flow","#phrasing","#palpable"],model:["#transparent"]},mark:{type:["#flow","#phrasing","#palpable"],model:["#transparent"]},math:{type:["#embedded","#flow","#phrasing","#palpable"],model:[]},menu:{type:["#flow",{":contains(> li)":["#palpable"]}],model:["#script-supporting","li"],implicitRole:"list"},meta:{type:["#metadata",{"meta[itemprop]":["#flow","#phrasing"]}],model:["#nothing"],names:["application-name","author","description","generator","keywords","referrer","theme-color"]},meter:{type:["#flow","#labelable","#phrasing","#palpable"],model:["#phrasing","!meter"]},nav:{type:["#flow","#sectioning-content","#palpable"],model:["#flow"],implicitRole:"navigation",acceptableRoles:["navigation"]},noscript:{type:["#metadata","#flow","#phrasing"],model:[{"head link":["style","meta","link"]},{":not(head link)":["#transparent","!noscript"]}]},object:{type:["#embedded","#flow","#phrasing",{"object[usemap]":["#interactive","#palpable"]}],model:["#transparent","param"]},ol:{type:["#flow",{":contains(> li)":["#palpable"]}],model:["#script-supporting","li"],implicitRole:"list"},output:{type:["#flow","#labelable","#phrasing","#palpable"],model:["#phrasing","!meter"]},p:{type:["#flow","#palpable"],model:["#phrasing"]},picture:{type:["#embedded","#flow","#phrasing"],model:["source","img","#acript-supporting"]},pre:{type:["#flow","#palpable"],model:["#phrasing"]},progress:{type:["#flow","#labelable","#phrasing","#palpable"],model:["#phrasing","!progress"]},q:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},ruby:{type:["#flow","#phrasing","#palpable"],model:["rp","rt"]},s:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},samp:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},script:{type:["#flow","#metadata","#phrasing","#acript-supporting"],model:[{"script[src]":[]}]},section:{type:["#flow","#sectioning-content","#palpable"],model:["#flow"],implicitRole:"region",acceptableRoles:["alert","alertdialog","application","contentinfo","dialog","document","log","main","marquee","region","search","status"]},select:{type:["#flow","#interactive","#labelable","#phrasing","#palpable"],model:["option","optgroup","#acript-supporting"]},slot:{type:["#flow","#phrasing"],model:["#transparent"]},small:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},span:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},strong:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},style:{type:["#metadata"],model:["#text"]},sub:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},sup:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},svg:{type:["#embedded","#flow","#phrasing","#palpable"],model:[]},table:{type:["#flow","#palpable"],model:["caption","colgroup","thead","tbody","tr","tfoot","#script-supporting"]},td:{type:["#sectioning-root"],model:["#flow"]},template:{type:["#metadata","#flow","#phrasing","#script-supporting"],model:["#nothing"]},textarea:{type:["#flow","#interactive","#labelable","#phrasing","#palpable"],model:["#text"]},time:{type:["#flow","#phrasing","#palpable"],model:[{"time[datetime]":["#phrasing"]},{":not(time[datetime])":["#text"]}]},title:{type:["#metadata"],model:["#text"],singleton:!0},u:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},ul:{type:["#flow",{":contains(> li)":["#palpable"]}],model:["#script-supporting","li"],implicitRole:"list"},var:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},video:{type:["#embedded","#flow","#phrasing",{"video[controls]":["#interactive","#palpable"]}],model:["#transparent","!#media","track",{":not(video[src])":["source"]}]},wbr:{type:["#flow","#phrasing"],model:["#nothing"]}},aria:{banner:{type:["@banner"],singleton:!0},contentinfo:{type:["@contentinfo"],singleton:!0},complementary:{type:["@complementary"],singleton:!0},navigation:{type:["@navigation"],singleton:!0},list:{type:["@list"]},listitem:{type:["@listitem"]}},getContentModelFor(t){var e=t.nodeName.toLowerCase();return Xn.std[e]?Xn.expandRules(t,Xn.std[e].model||[]):[]},getCategoriesFor(t,e=!0){var r=t.nodeName.toLowerCase(),n=Xn.std[r]||Xn.aria[r]||{},i=[];if(e&&!t.nodeName.startsWith("#")&&(t.hasAttribute("role")||n.implicitRole))if(t.hasAttribute("role")){t.getAttribute("role").split(" ");t.getAttribute("role").split(" ").forEach(e=>{n&&n.acceptableRoles&&!n.acceptableRoles.includes(e)||(e=e.trim(),i.push("@"+e),Xn.aria[e]&&Xn.aria[e].type&&(i=i.concat(Xn.expandRules(t,Xn.aria[e].type||[]))))})}else n.implicitRole&&Ln(i,"@"+n.implicitRole,r);else i=Ln(Xn.expandRules(t,n.type||[]),r);return i},assertNodeBelongsInContentModel(t,e){var r,n=t instanceof HTMLElement?Xn.getContentModelFor(t):t,i=e instanceof HTMLElement?Xn.getCategoriesFor(e):e;return!Yn(n,["#nothing","#text"]).length&&(n.forEach(t=>{if(t.startsWith("!")){var e=t.substr(1);i.includes(e)&&(r=!1)}else!1!==r&&i.includes(t)&&(r=!0)}),r&&!0)},assertNodeBelongsInScopeAs(t,e,r=null){for(var n,i=Xn.getCategoriesFor(t),s=e;!n&&(s=s.parentNode);)Yn(i,Xn.getCategoriesFor(s)).length&&Xn.assertNodeBelongsInContentModel(s,r&&r.type||e)&&(n=s);return n===t},expandRules(t,e){var r=e.reduce((e,r)=>(wt(r)?t.matches(Object.keys(r)[0])&&(e=e.concat(Object.values(r)[0])):e.push(r),e),[]);return r.includes("#sectioning-root")&&r.push("#sectioning-content"),r}};var Qn,Vn=Xn;class Jn{constructor(t,e={}){Object.defineProperty(this,"params",{value:Un($n,e)}),Object.defineProperty(this,"descendantParams",{value:Kn(this.params)}),Object.defineProperty(this,"_el",{value:t,enumerable:!0}),Object.defineProperty(this,"el",{value:"#document"===t.nodeName?t.querySelector("html"):t,enumerable:!0});const r=(t.getAttribute($n.attrMap.superrole)||"").split(" ").map(t=>t.trim()).filter(t=>t);Object.defineProperty(this,"roles",{value:r,enumerable:!0});const n={};Pn.defineProperty(this,$n.treeProperty,{value:n,enumerable:!0}),Pn.trap(n,(t,e,r)=>r(e||this.getNodes(t.query)),{type:"get"});const i=(t.getAttribute($n.attrMap.hint)||"").split(" ").map(t=>t.trim()).filter(t=>t);Pn.init(this[$n.treeProperty],i)}getNodes(t){return xt(t).forEach(t=>{if(t in this[$n.treeProperty]&&this[$n.treeProperty][t]instanceof Jn)return this[$n.treeProperty][t];var e;((e=this.getExplicitNode(t))||(e=this.getImplicitNode(t)))&&this.addNode(t,e)}),mt(t)?_objFrom(t,this[$n.treeProperty]):this[$n.treeProperty][t]}getExplicitNode(t){if(this.roles&&this.roles.length){var e=$n.rolecase?[$n.rolecase]:this.roles,r=$n.context.CSS?$n.context.CSS.escape:t=>t;return e.reduce((e,n)=>{if(!e){var i,s,a="["+r($n.attrMap.superrole)+'~="'+n+'"]',o="["+r($n.attrMap.subrole)+'~="'+n+"-"+t+'"]';(s=(this.el.shadowRoot||this.el).querySelector(o))&&(this.el.shadowRoot&&(!s.parentNode.closest||!s.parentNode.closest(a))||!this.el.shadowRoot&&s.parentNode&&(i=s.parentNode.closest(a))&&i.isSameNode(this.el))&&(e=s)}return e},null)}}getImplicitNode(t){if(!_n(t)&&!t.match(/[^a-zA-Z0-9\-]/)){var e,r,n,i=[];Vn.aria[t]?i.push({schema:Vn.aria[t],selector:['[role="'+t+'"]']}):i.push({schema:Vn.std[t]||Vn.aria[t],selector:[t,'[role="'+t+'"]']}),e=Vn.std,r=(e,r)=>{r.implicitRole===t&&i.push({schema:r,selector:[e]})},n=void 0,bt(e)&&Object.keys(e).forEach((t,i)=>{!1!==n&&(n=r(_n(t)?parseFloat(t):t,e[t],i))});var s=null;return i.forEach(t=>{(this.el.shadowRoot||this.el).querySelectorAll(t.selector.join(",")).forEach(e=>{Vn.assertNodeBelongsInScopeAs(this.el,e,t.schema)&&(t.schema&&t.schema.singleton?s=e:s&&!mt(s)||(s=s||[]).push(e))}),s||!t.schema||t.schema.singleton||(s=[])}),s}}addNode(t,e){var r,n=this.params.factory||((t,e)=>new Jn(t,e));return mt(e)?r=e.map(t=>n(t,this.descendantParams)):(r=n(e,this.descendantParams),function t(e,r){if(e.parentNode&&$n.context.MutationObserver){var n=!1;new $n.context.MutationObserver(t=>{t.forEach(t=>{!n&&xt(t.removedNodes).includes(e)&&(n=!0,r())})}).observe(e.parentNode,{childList:!0}),t(e.parentNode,()=>{n||(n=!0,r())})}}(e,()=>{Pn.del(this[$n.treeProperty],t)})),Pn.set(this[$n.treeProperty],t,r),r}}class Zn extends Jn{constructor(t,e={}){super(t,e),this.params.factory=this.constructor.from,this.el.addEventListener("imported",t=>{this.params.factory(t.target),t.stopImmediatePropagation()});const r=function(t){var e={roadmap:t};return e.roadmap&&(e.namespace=Mn(e.roadmap,"//"),e.subnamespace=qn(e.roadmap,"//"),e.subnamespace.startsWith("/")&&(e.subnamespace=qn(e.subnamespace,"/")),e.subnamespace.endsWith("//")&&-1===e.subnamespace.indexOf("///")&&(e.subnamespace=e.subnamespace+e.namespace+"//")),e}(t.getAttribute($n.attrMap.namespace)||"");Object.defineProperty(this,"namespace",{value:r.namespace,enumerable:!0});Pn.defineProperty(this,"directives",{value:[],enumerable:!0});var n={},i=this.params.env,s=new ne(this,i,n);this.descendantParams.env=new ne(n,i);if(Pn.observe(this.directives,(t,e,r)=>{Object.keys(t).forEach(r=>{var n;e[r]&&Pn.unobserve(this,null,null,{tags:["#directive",e[r]]}),t[r]&&(!1!==this.autoEval&&t[r].eval(s,Pn),Pn.observe(this,(n=t[r].meta.vars,Dn(n.map(t=>Mn(Mn(t.toString(),"["),"(")))),(e,n,i)=>{var a=t[r].eval(s,Pn);if(!1!==a)return a},{tags:["#directive",t[r]]}))})}),this.dataBlockScript=xt(t.children).filter(t=>t.matches($n.tagMap.jsen))[0]){var a=Pn.get(this.directives,"push");Hn.parse((this.dataBlockScript.textContent||"").trim()).filter().forEach(t=>{this.autoEval=$n.initialRendering,a(t),this.autoEval=!0})}this.dataBlockScript&&$n.hideDataBlockScript&&this.dataBlockScript.remove(),Pn.init(this,$n.bindingProperty),Pn.observe(this,$n.bindingProperty,(t,e,n)=>{if(r.subnamespace)return bt(t)&&t&&Pn.observe(t,e=>this.populate(t,r.subnamespace,$n.remodelCallback),{tags:["#mirror",this]}),bt(e)&&e&&Pn.unobserve(e,null,null,{tags:["#mirror",this]}),this.populate(t||{},r.subnamespace,$n.remodelCallback)})}get(t){return super.getNodes(t)}bind(t){if(!$n.bindingProperty)throw new Error("Data key has not been set!");return Pn.set(this,$n.bindingProperty,t)}unbind(){if(!$n.bindingProperty)throw new Error("Data key has not been set!");return Pn.set(this,$n.bindingProperty,null)}populate(t,e,r=null){var n=e.split("//");n[0].indexOf("[")>-1&&(n[0]='"'+n[0].replace(/\[/g,'" + ').replace(/\]/g,' + "')+'"');var i=Pn.keys(t),s=Pn.keys(this[$n.treeProperty]),a=new Pn.MutationEvent(this.el,{type:"remodelling"});return Dn(i.concat(s)).forEach(e=>{e=_n(e)?parseInt(e):e;var s,o=this.getNodes(e);if(Pn.has(t,e)){var l=Pn.get(t,e),c=!1;if(!o){var h=n.slice();h[0].indexOf('"')>-1&&(h[0]=Ar.parse(h[0]).eval(l)),h[0]+="/"+e;var p=Zn.import(h.join("//"));if(p){var u=function(t,e,r=!1,n=!1,i=!1){if(-1===t.indexOf(e))return r?[]:void 0;var s=!0===r?t.length-1:!1===r?1:r,a=i?t.lastIndexOf(e)+1:t.indexOf(e)+1,o=yt(e)?[]:t.slice(a,a+s);return n&&o.length<s&&o.length<t.length&&(An(n)&&!n(s-o.length)||(o=o.concat(t.slice(0,s-o.length)))),r?o:o[0]}(i,e+"",!0).reduce((t,e)=>t||this.getNodes(e),null);u?u.el.before(p):this.el.append(p),o=this.addNode(e,p),c=!0}}o&&(s=An(r)?r(o,l,e,c):o.bind(l))}else if(o){var f=()=>{o.destroy(),o.el.remove()};(s=An(r)?r(o,e):o.unbind())instanceof Promise?s.then(f).catch(f):f()}a.response(s)}),a}destroy(){this.directives.forEach(t=>Pn.unobserve(this,null,null,{tags:["#directive",t]})),this.dataBlockScript&&$n.hideDataBlockScript&&this.prepend(this.dataBlockScript)}static init(t,e=null){$n.context=t,function(){const t=$n.context;t.customElements.define($n.attrMap.bundle,class extends t.HTMLTemplateElement{attributeChangedCallback(t,e,r){r&&this.load()}load(){var e=this.getAttribute("src");e&&this.content.children.length?console.warn("A CHTML bundle must define only either a remote content or local content! Bundle ignored."):e&&(t.fetch?t.fetch(e).then(t=>t.ok?t.text():Promise.reject(t.statusText)).then(e=>{this.innerHTML=e,this.dispatchEvent(new t.Event("bundleloadsuccess",{bubbles:!0}))}).catch(r=>{console.warn("Error fetching the bundle at "+e+". ("+r+")"),this.dispatchEvent(new t.Event("bundleloaderror",{bubbles:!0}))}):setTimeout(()=>{this.dispatchEvent(new t.Event("bundleloadsuccess",{bubbles:!0}))},0))}static get observedAttributes(){return["src"]}},{extends:"template"})}(),Zn.contentLoadedPromise=new Promise(e=>{"complete"!==t.document.readyState?(t.document.addEventListener("DOMContentLoaded",e,!1),t.addEventListener("load",e,!1)):e()}),Zn.contentLoadedPromise.then(()=>{var t;if(e&&(t=e())){if(!mt(t))throw new Error("The bundlesCallback() function must return an array!");$n.bundles=function(t,e=null){var[r,n]=function(t,e){for(var r=[],n=[],i=t.length,s=0;s<i;s++)e(t[s])?r.push(t[s]):n.push(t[s]);return[r,n]}(t,t=>t instanceof Promise);const i=Promise.all(r).then(t=>{n.push(...t),r=[]});var s;e&&e(i);const a=[],o=new Wn(n,[],(t,e,n,i)=>{var l=e.join("/");if(a.includes(l))return o.find(e.slice(0,-1).join("/"));a.push(l),r.length&&!s&&(s=!0,console.warn("Remote bundles are still loading at this time! You should probabbly wrap bundle-dependent code within Chtml.ready(callback[, true/*waitForBundles*/])."));var c=$n.context.CSS?$n.context.CSS.escape:t=>t,h=t.content.querySelector("["+c($n.attrMap.namespace)+'="'+l+'"]');if(h&&n){try{t.hasAttribute("norecompose")&&(t.getAttribute("norecompose")||"*").split(" ").map(t=>t.trim()),h=In(n,h)}catch(t){console.error("[Inheritance error at source #"+i+"]: "+t.message)}return a.pop(),h}return a.pop(),h?h.cloneNode(!0):n?n.cloneNode(!0):null});return o}(t,t=>{Zn.loadingBundlesPromise=t,setTimeout(()=>{!function(t){const e=$n.context;e.customElements.define($n.tagMap.import,class extends e.HTMLElement{shouldResolve(){return!this.hasAttribute("ondemand")&&!this.closest("template")&&!this.closest($n.tagMap.import+"[ondemand]")}connectedCallback(){this.processed=!1,this.shouldResolve()&&this.resolve()}attributeChangedCallback(t,e,r){this.shouldResolve()&&this.resolve()}resolve(){if(!this.parentNode)return!1;t.then(()=>{var t,r,n=$n.attrMap.namespace;if((r=Mn(this.getAttribute(n)||"","//"))&&r!==this.__namespace)if(this.__namespace=r,$n.bundles&&(t=$n.bundles.find(r))){var i=In(t,this);this.hasAttribute("shadow")?(this.parentNode.shadowRoot||this.parentNode.attachShadow({mode:"open"}),this.parentNode.shadowRoot.append(i),this.remove()):this.replaceWith(i),i.setAttribute("autoimported","true"),i.dispatchEvent(new e.Event("imported",{bubbles:!0}))}else this.innnerText='No element found on the namespace "'+r+'"!'})}static get observedAttributes(){return["ondemand",$n.attrMap.namespace]}})}(t)},0)})}})}static ready(t,e=!0){Zn.contentLoadedPromise.then(()=>{e?Zn.loadingBundlesPromise.then(t):t()})}static from(t,e={},r=Zn){var n=t;if(vt(t)&&!t.trim().startsWith("<")&&-1!==t.indexOf("/")){if(!(n=Zn.import(Mn(t,"//"))))throw new Error('No element found on the namespace "'+t+'"!')}else{if(vt(t)&&!(n=function(t,e=null){if(e=e||$n.context.document){var r;if(t.trim().startsWith("<")){var n=e.createElement("div");n.innerHtml=t,r=n.firstChild}else r=e.querySelector(t);return r}}(t)))throw new Error('Could not resolve the string "'+t+'" to an element!');var i,s,a,o=n.matches($n.tagMap.import);if((i=Mn(n.getAttribute($n.attrMap.namespace)||"","//"))&&(o&&(s=i)||(s=Nn(i,"/"))&&s.indexOf("/")>-1)&&(a=Zn.import(s))){var l=n;n=In(a,n),o&&l.replaceWith(n)}else i&&console.warn("Namespace resolution failed: "+i)}return new r(n,e)}static import(t){if($n.bundles)return $n.bundles.find(t)}}Qn=window,Zn.init(Qn,()=>xt(Qn.document.querySelectorAll($n.tagMap.bundle)).reverse().map(t=>t.hasAttribute("src")&&!t.content.children.length?new Promise(e=>{t.addEventListener("bundleloadsuccess",()=>e(t)),t.addEventListener("bundleloaderror",()=>e(t))}):t));var Gn=Zn;$n.pathnaming={"/":["name","id"]};var ti=$n;class ei{constructor(){var t=(t,e=null)=>(t=ut(t,ri,!1),e?gt(t,"state",e):t),e=(t,r)=>et(t)&&et(r)?e(Object.keys(t),Object.keys(r))&&e(Object.values(t),Object.values(r)):G(t)&&G(r)?t.length===r.length&&t.reduce((t,e,n)=>t&&e===r[n],!0):t===r;Pn.trap(this,(t,e,r)=>{if("href"===t.query&&tt(ri,t.related).length){var n=ei.parseUrl(t.value);return Pn.set(this,n),!1}return r()},{type:"set"}),Pn.observe(this,["search","searchmap","pathname","pathmap","pathsplit","href"],(t,r,n)=>{var[i,s,a,o,l,c]=t,[h,p,u,f,d,g]=r;if(!(n.originatingCreated&&n.originatingCreated.indexOf("searchmap")>-1)){var m={},v=!n.originatingFields.filter(t=>t.startsWith("searchmap.")).length&&e(s,p);i!==h||v||(m.search=ei.toSearch(s),m.search===this.search&&delete m.search),i!==h&&v&&(m.searchmap=ei.toSearchmap(i),e(m.searchmap,this.searchmap)&&delete m.searchmap);var y=!n.originatingFields.filter(t=>t.startsWith("pathmap.")).length&&e(o,f),b=!n.originatingFields.filter(t=>t.startsWith("pathsplit.")).length&&e(l,d);return a!==u||y&&b||(m.pathname=ei.toPathname(b?o:l,this.pathname),m.pathname===this.pathname&&delete m.pathname),!y||a===u&&b||(m.pathmap=ei.toPathmap(a!==u?a:l),e(m.pathmap,this.pathmap)&&delete m.pathmap),!b||a===u&&y||(m.pathsplit=ei.toPathsplit(a!==u?a:o,this.pathname),e(m.pathsplit,this.pathsplit)&&delete m.pathsplit),c!==g||st(m)?st(m)&&c!==g&&(m=ei.parseUrl(c)):(m.href=this.origin,m.href+=m.pathname||a,m.href+=m.search||i||"",m.href===this.href&&delete m.href),st(m)?void 0:Pn.set(this,m,!0)}},{observeDown:!0}),Pn.observe(this,"href",t=>{t===document.location.href?window.history.replaceState(this.state,"",t):window.history.pushState(this.state,"",t)}),window.addEventListener("popstate",e=>{setTimeout(()=>{Pn.set(this,t(document.location,window.history.state))},0)}),window.addEventListener("click",t=>{var e,r;if((!t.target.origin||t.target.origin===this.origin)&&(t.preventDefault(),(e=t.target.closest("a"))&&(r=e.href))){var n=this.route(r,null,e.getAttribute("target"));n&&n.defaultPrevented&&t.preventDefault()}}),this.href||Pn.set(this,t(document.location)),!this.state&&window.history&&Pn.set(this,"state",window.history.state)}route(t,e=null,r=null){var n={href:t};return arguments.length>1&&(n.request=e),arguments.length>2&&(n.target=r),Pn.set(this,n,!0)}update(t){return window.history.replaceState(t,"",document.location),Pn.set(this,"state",t,!0)}forward(){window.history.forward()}back(){window.history.back()}go(t){window.history.go(t)}matches(t){var e=ei.parseUrl(t);return(this.href+"/").startsWith(e.href.endsWith("/")?e.href:e.href+"/")}static parseUrl(t){var e=document.createElement("a");return e.href=t,ri.reduce((t,r)=>gt(t,r,e[r]),{})}static toSearchmap(t){return(t.startsWith("?")?t.substr(1):t).split("&").filter(t=>t).map(t=>t.split("=").map(t=>t.trim())).reduce((t,e)=>gt(t,e[0],e[1]),{})}static toSearch(t){return Object.keys(t).length?"?"+Object.keys(t).map(e=>e+"="+t[e]).join("&"):""}static toPathmap(t){var e=J(t)?t.split("/").filter(t=>t):t,r=J(t)?t:"/"+e.join("/")+"/",n=Z(Object.keys(ti.pathnaming),"desc").reduce((t,e)=>t||((r+"/").startsWith("/"===e?e:"/"+e.split("/").filter(t=>t).join("/")+"/")?ti.pathnaming[e]:null),null);return n?e.reduce((t,e,r)=>n[r]?gt(t,n[r],e):t,{}):{}}static toPathsplit(t,e=null){if(J(t))return t.split("/").filter(t=>t);if(!e)throw new Error('A "referenceUrl" must be given to properly determine a path-naming scheme.');var r=Z(Object.keys(ti.pathnaming),"desc").reduce((t,r)=>t||((e+"/").startsWith("/"===r?r:"/"+r.split("/").filter(t=>t).join("/")+"/")?ti.pathnaming[r]:null),null);if(tt(Object.keys(t),r).length)throw new Error("The given pathmap contains keys ("+Object.keys(t).join(", ")+") not recognized by the implied path-naming scheme ("+r.join(", ")+")");return r?r.map(e=>t[e]).filter(t=>t):[]}static toPathname(t,e=null){if(et(t)){if(!e)throw new Error('A "referenceUrl" must be given to properly determine a path-naming scheme.');t=ei.toPathsplit(t,e)}return"/"+t.join("/")+"/"}}const ri=["hash","host","hostname","href","origin","pathname","port","protocol","search"];var ni=function(t,e,r=!1){for(var n=t.indexOf(e);n>-1&&(r||!1===r);)t.splice(n,1),r>0&&r--,n=t.indexOf(e);return t};function ii(t,e=document,r=!1){var n,i=r?"querySelectorAll":"querySelector";try{n=e[i](t)}catch(r){try{n=e[i](t.replace(/\:is\(/g,":matches("))}catch(r){try{n=e[i](t.replace(/\:is\(/g,":-webkit-any("))}catch(r){try{n=e[i](t.replace(/\:is\(/g,":-moz-any("))}catch(t){throw t}}}}return n}Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(t){for(var e=(this.document||this.ownerDocument).querySelectorAll(t),r=e.length;--r>=0&&e.item(r)!==this;);return r>-1});var si=function(t,e){return"string"!=typeof t?t:t.replace(/\w\S*/g,(function(t){return t.charAt(0).toUpperCase()+(void 0!==typeof e&&e?t.substr(1).toLowerCase():t.substr(1))}))},ai=function(t,e){return t=si(t.replace(/-/g," ")).replace(/ /g,""),e?t:t[0].toLowerCase()+t.substr(1)},oi=function(t,e){var r=void 0;return it(t)&&Object.keys(t).forEach((n,i)=>{!1!==r&&(r=e(lt(n)?parseFloat(n):n,t[n],i))}),r};const li=[];var ci=function(t,e=!0){return G(t)?t:!e&&et(t)?[t]:!1!==t&&0!==t&&st(t)?[]:function(t){return!J(t)&&!nt(t.length)}(t)?Array.prototype.slice.call(t):et(t)?Object.values(t):[t]},hi=function(t,...e){return e.forEach(e=>ni(t,e)),t},pi=function(t){return t.filter((t,e,r)=>r.indexOf(t)===e)},ui=function(t,e,r=null){return G(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1!==e.indexOf(t)):[]},fi=function(t,e,r=null,n=null){if(2===arguments.length){if(J(e))return t.getAttribute(e);if(G(e)){var i={};return e.forEach(e=>{i[e]=t.getAttribute(e)}),i}}var s=e;return et(s)?n=r:s=ft(e,r),oi(s,(r,i)=>{if(arguments.length>3||et(e)&&arguments.length>2){var s=t.getAttribute(r),a=s?s.split(" ").map(t=>t.trim()).filter(t=>t):[],o=J(i)?i.trim().split(" ").map(t=>t.trim()).filter(t=>t):ci(i);!n&&ui(a,o).length?t.setAttribute(r,hi(a,...o).join(" ")):n&&tt(a,o).length&&t.setAttribute(r,pi(a.concat(o)).join(" "))}else!1===i?t.removeAttribute(r):t.setAttribute(r,!0===i?"true":i)}),t};const di={readCallbacks:[],writeCallbacks:[],_run:function(){requestAnimationFrame(()=>{di.readCallbacks.forEach((t,e)=>{t&&!t()&&(di.readCallbacks[e]=null)}),di.writeCallbacks.forEach((t,e)=>{t&&!t()&&(di.writeCallbacks[e]=null)}),di._run()})},onread:function(t,e=!1){if(e)return new Promise((e,r)=>{di.readCallbacks.push(()=>{t(e,r)})});di.readCallbacks.push(t)},onwrite:function(t,e=!1){if(e)return new Promise((e,r)=>{di.writeCallbacks.push(()=>{t(e,r)})});di.writeCallbacks.push(t)},cycle:function(t,e,r){di.onread(()=>{var n=t(r);if(n){var i=n=>{di.onwrite(()=>{var i=e(n,r);if(i){var s=r=>{di.cycle(t,e,r)};i instanceof window.Promise?i.then(s):s()}})};n instanceof window.Promise?n.then(i):i()}})}};di._run();var gi,mi,vi=di,yi=function(t,e=null){return arguments.length>1?(J(e)?t.innerHTML=e:(t.innerHTML="",nt(e)||t.append(e)),t):t.innerHTML},bi=function(t,e=null){return arguments.length>1?(t.innerText=nt(e)?"":e,t):t.innerText},wi=function(t,e){return t.append(nt(e)?"":e),t},xi=function(t,e){return t.prepend(nt(e)?"":e),t},Ei=function(t,e){return void 0===t?"":t.split(/(?=[A-Z])/).join(e||" ")},Oi=(gi=window.getComputedStyle(document.documentElement,""),{prefix:mi=(Array.prototype.slice.call(gi).join("").match(/-(moz|webkit|ms)-/)||""===gi.Olink&&["","o"])[1],css:"-"+mi+"-",api:"WebKit|Moz|Ms|O".match(new RegExp("("+mi+")","i"))[1]}),ji=function(t){var e=ai(t,!0);if(Oi.api+e in document.body.style)return Oi.css+Ei(t,"-")},ki=function(t,e,r){var n={},i=ci(t);return oi(i,(t,s)=>{((t,s)=>{var a=Ei(s,"-").toLowerCase();if("auto"===r)n[a]=e(ji(a)||a,i[t]);else{if(r){var o=ji(a);o&&(n[o]=e(o,i[t]))}n[a]=e(a,i[t])}})(t,s)}),G(t)||r||"size"===t||"offsets"===t?n:n[t]};const Si=class{constructor(t){oi(t,(t,e)=>{["rotate","scale","skew","translate"].includes(t)&&(this[t]=G(e)?new Si[t](...e):new Si[t](e))})}toString(){return["rotate","scale","skew","translate"].reduce((t,e)=>t+(this[e]&&this[e].length?" "+this[e]:""),"").trim()}static parse(t){var e=function(t){return Math.round(100*t)/100},r=function(t){var r=180*t/Math.PI;return e(r)},n=function(t){var e=[];if(window.WebKitCSSMatrix)return[(e=new window.WebKitCSSMatrix(t)).a,e.b,e.c,e.d,e.e,e.f];for(var r,n=/[\d\.\-]+/g;r=n.exec(t);)e.push(+r);return e}(t),i=n[0],s=n[1],a=n[2],o=n[3];if(i*o==s*a)throw new Error("Dramatic.parseTransform: matrix is singular");var l=Math.sqrt(i*i+s*s),c=(i/=l)*a+(s/=l)*o;a-=i*c,o-=s*c;var h=Math.sqrt(a*a+o*o);return c/=h,i*(o/=h)<s*(a/=h)&&(i=-i,s=-s,c=-c,l=-l),new Si({translate:[n[4],n[5]],scale:[e(l),e(h)],rotate:r(Math.atan2(s,i)),skew:r(Math.atan(c))})}};Si.rotate=class extends Array{toString(){return"rotate("+this.map(t=>lt(t)?t+"deg":t).join(", ")+")"}},Si.scale=class extends Array{toString(){return"scale("+this.join(", ")+")"}},Si.skew=class extends Array{toString(){return"skew("+this.map(t=>lt(t)?t+"deg":t).join(", ")+")"}},Si.translate=class extends Array{toString(){return"translate("+this.map(t=>lt(t)?t+"px":t).join(", ")+")"}};var Ti=Si,Fi=function(t,e,r=null){var n=window.getComputedStyle(t,r);return ki(e,(t,e)=>{var r=n.getPropertyValue(ji(t)||t);return"width"!==t&&"height"!==t||""!==r||(r="0px"),"transform"===t&&(r=Ti.parse(r)),r},!1)},Ci=["width","height","top","left","right","bottom","padding","padding-top","padding-left","padding-right","padding-bottom","margin","margin-top","margin-left","margin-right","margin-bottom","border-width","border-top-width","border-left-width","border-right-width","border-bottom-width","outline-width","outline-top-width","outline-left-width","outline-right-width","outline-bottom-width"],Pi=function(t,e,r=null){e=J(e)?ft(e,r):e;var n={inset:["top","right","bottom","left"],margin:["top","right","bottom","left"],padding:["top","right","bottom","left"]};return ki(Object.keys(e),(r,i)=>{var s=e[i];oi(n,(t,e)=>{r===t&&(et(s)&&(s=e.map(t=>s[t]).filter(t=>!nt(t))),G(s)&&(s=s.join(" ")))}),"transform"!==r||!et(s)||s instanceof Ti||(s=new Ti(s).toString()),t.style[r]=Ci.includes(r)&&lt(s)?s+"px":s},"auto"),t},$i=function(t,e,r=null){return vi.onread((n,i)=>{try{n(ot(e)?e(t):Fi(t,e,r))}catch(t){i(t)}},!0)},Ai=function(t,e,r=null){return vi.onwrite((n,i)=>{try{n(ot(e)?e(t):Pi(t,e,r))}catch(t){i(t)}},!0)},_i=function(t,e,r="auto"){var n=t.getAttribute("style");return"all"===e&&(e=n.split(";").map(t=>t.split(":")[0])),ki(e,t=>(new RegExp(";[ ]*?"+t+":([^;]+);?","g").exec(";"+n)||["",""])[1].trim(),r)},Di=function(t,e,r=null,n=null){var i=et(e)?Object.keys(e):e;n=et(e)?r:n;var s=_i(t,i);return Ai(t,e,r).then(()=>$i(t,n||i).then(e=>Ai(t,s).then(()=>e)))};var Mi=class{constructor(t,e,r,n){this.el=t,this.params=ci(e),this.readCallback=r,this.writeCallback=n,this.$savepoints=[]}save(){var t=this.readCallback(this.el,this.params);return t instanceof Promise?t.then(t=>this.$savepoints.push(t)):et(t)?this.$savepoints.push(t):void 0}commit(t=0){for(var e=0;e<=t&&t<this.$savepoints.length;e++)this.$savepoints[e]=null;return this}rollback(t=0){if(!lt(t))throw new Error("A valid transaction ID transaction must be provided!");var e=e=>{var r=this.$savepoints.splice(t),n=r.shift();if(!n)return{};var i=r.pop(),s={};return this.params.forEach(t=>{i&&e[t]!==i[t]||e[t]!==n[t]&&(s[t]=n[t])}),s},r=this.readCallback(this.el,this.params);return r instanceof Promise?r.then(t=>this.writeCallback(this.el,e(t))):this.writeCallback(this.el,e(r))}depth(){return this.$savepoints.length}},Ni=function(){var t=window.getComputedStyle(document.documentElement,""),e=(Array.prototype.slice.call(t).join("").match(/-(moz|webkit|ms)-/)||""===t.Olink&&["","o"])[1];return{prefix:e,css:"-"+e+"-",api:"WebKit|Moz|Ms|O".match(new RegExp("("+e+")","i"))[1]}}(),Ri=function(t){var e=ai(t,!0);if(Ni.api+e in document.body.style)return Ni.css+Ei(t,"-")},Ii=function(t,e,r){var n={},i=ci(t);return oi(i,(t,s)=>{((t,s)=>{var a=Ei(s,"-").toLowerCase();if("auto"===r)n[a]=e(Ri(a)||a,i[t]);else{if(r){var o=Ri(a);o&&(n[o]=e(o,i[t]))}n[a]=e(a,i[t])}})(t,s)}),G(t)||r||"size"===t||"offsets"===t?n:n[t]};const Wi=class{constructor(t){oi(t,(t,e)=>{["rotate","scale","skew","translate"].includes(t)&&(this[t]=G(e)?new Wi[t](...e):new Wi[t](e))})}toString(){return["rotate","scale","skew","translate"].reduce((t,e)=>t+(this[e]&&this[e].length?" "+this[e]:""),"").trim()}static parse(t){var e=function(t){return Math.round(100*t)/100},r=function(t){var r=180*t/Math.PI;return e(r)},n=function(t){var e=[];if(window.WebKitCSSMatrix)return[(e=new window.WebKitCSSMatrix(t)).a,e.b,e.c,e.d,e.e,e.f];for(var r,n=/[\d\.\-]+/g;r=n.exec(t);)e.push(+r);return e}(t),i=n[0],s=n[1],a=n[2],o=n[3];if(i*o==s*a)throw new Error("Dramatic.parseTransform: matrix is singular");var l=Math.sqrt(i*i+s*s),c=(i/=l)*a+(s/=l)*o;a-=i*c,o-=s*c;var h=Math.sqrt(a*a+o*o);return c/=h,i*(o/=h)<s*(a/=h)&&(i=-i,s=-s,c=-c,l=-l),new Wi({translate:[n[4],n[5]],scale:[e(l),e(h)],rotate:r(Math.atan2(s,i)),skew:r(Math.atan(c))})}};Wi.rotate=class extends Array{toString(){return"rotate("+this.map(t=>lt(t)?t+"deg":t).join(", ")+")"}},Wi.scale=class extends Array{toString(){return"scale("+this.join(", ")+")"}},Wi.skew=class extends Array{toString(){return"skew("+this.map(t=>lt(t)?t+"deg":t).join(", ")+")"}},Wi.translate=class extends Array{toString(){return"translate("+this.map(t=>lt(t)?t+"px":t).join(", ")+")"}};var qi=Wi,Li=function(t,e,r=null){var n=window.getComputedStyle(t,r);return Ii(e,(t,e)=>{var r=n.getPropertyValue(Ri(t)||t);return"width"!==t&&"height"!==t||""!==r||(r="0px"),"transform"===t&&(r=qi.parse(r)),r},!1)},zi=function(t,e){var r={left:t.left-e.left,top:t.top-e.top,right:e.left+e.width-(t.left+t.width),bottom:e.top+e.height-(t.top+t.height)},n=Math.max(t.left,e.left),i=Math.min(t.left+t.width,e.left+e.width),s=Math.max(t.top,e.top),a=Math.min(t.top+t.height,e.top+e.height);return r.width=i>n?i-n:0,r.height=a>s?a-s:0,r.rect1=t,r.rect2=e,r.delta=function(t,e,r=!1){var n={};return n.x=e.left+e.width/2-(t.left+t.width/2),n.y=e.top+e.height/2-(t.top+t.height/2),n.z=Math.sqrt(Math.pow(n.x,2)+Math.pow(n.y,2)),r&&(n=dt(n,deltaAngle(n))),n}(t,e),r},Bi=function(t,e){return t.reduce((t,r)=>t||e(r),!1)};const Ui=function(t,e=!0,r=null){var n=["width","height","top","right","bottom","left"],i=t=>t instanceof HTMLElement||t instanceof HTMLDocument,s={};if(t!==window&&et(t)&&Bi(["clientX","clientY","offsetX","offsetY","pageX","pageY","screenX","screenY"],e=>e in t))s=!1!==e?{width:0,height:0}:{},r===window||i(r)?(s.left=t.clientX,s.top=t.clientY):!0===r?(s.left=t.offsetX,s.top=t.offsetY):!1!==r&&(s.left=t.pageX,s.top=t.pageY);else if(t===window)s=!1!==e?{width:window.innerWidth,height:window.innerHeight}:{},r===window||!0===r||i(r)?(s.left=0,s.top=0):!1!==r&&(s.left=window.pageXOffset,s.top=window.pageYOffset);else if(i(t))delete(s=t.getBoundingClientRect().toJSON()).x,delete s.y,delete s.right,delete s.bottom,!1===e&&(delete s.width,delete s.height),!0===r?r=t.offsetParent:!1===r?(delete s.left,delete s.top):r===window||i(r)||(s.left+=window.pageXOffset,s.top+=window.pageYOffset);else{if(!et(t)||!Bi(n,e=>e in t))throw new Error("Unknown object type!");s=ut(t,n)}if(i(r)){var a=Ui(r,!1,window);s.left-=a.left,s.top-=a.top}return s};var Hi=Ui,Ki=function(t,e,r={}){var n=zi(Hi(r.using||t),e),i={x:"width",y:"height"},s={x:"left",y:"top"},a={x:"right",y:"bottom"},o={},l={};return["x","y"].forEach(t=>{if(!1!==r[t]){var e,c,h,p,u,f=n.rect1[i[t]];switch(l[t]=(e=r[t]||"",c=new RegExp("(before|after|start|end|center)","g"),h=new RegExp("[-+][0-9]+(%)?","g"),{keyword:(e.match(c)||[])[0],predicates:e.match(h)}),l[t].keyword){case"before":o[t]=-(n[s[t]]+f);break;case"after":o[t]=n[a[t]]+f;break;case"start":o[t]=-n[s[t]];break;case"end":o[t]=n[a[t]];break;default:o[t]=n.delta[t]}l[t].predicates&&(o[t]+=(p=l[t].predicates,u=f,p.reduce((t,e)=>t+(e.endsWith("%")?parseFloat(e)/100*u:parseFloat(e)),0)))}}),o.alignment=l,o.intersection=n,o},Yi=function(t,e,r={}){var n=Ki(t,Hi(e),r),i={from:new qi({translate:[]}),to:new qi({translate:[]}),current:{from:new qi({translate:[]}),to:new qi({translate:[]}),progress:{}}},s=Li(t,"transform");return["x","y"].forEach((t,e)=>{t in n?(i.from.translate[e]=0,i.to.translate[e]=n[t]+s.translate[e],i.current.from.translate[e]=s.translate[e],i.current.to.translate[e]=n[t],i.current.progress[t]=Math.abs(s.translate[e]/(n[t]+s.translate[e]))):(i.from.translate[e]=s.translate[e],i.to.translate[e]=s.translate[e],i.current.from.translate[e]=s.translate[e],i.current.to.translate[e]=s.translate[e],i.current.progress[t]=0)}),i},Xi=function(t,e,r={}){var n=Ki(t,Hi(e),r),i={x:"left",y:"top"},s={x:"right",y:"bottom"},a=ui(["x","y"],Object.keys(n)).reduce((t,e)=>{switch(n.alignment[e].keyword){case"before":return r.alternateAnchors?gt(t,i[e],n[e]):gt(t,s[e],-n[e]);case"after":return r.alternateAnchors?gt(t,s[e],-n[e]):gt(t,i[e],n[e]);case"end":return gt(t,s[e],-n[e]);default:return gt(t,i[e],n[e])}},{}),o={from:{},to:{},current:{from:{},to:{},progress:{}}},l=function(t,e=["left","top","right","bottom"]){var r={right:"left",left:"right",bottom:"top",top:"bottom"},n=Li(t,e.concat("position")),i=null;return e.forEach(e=>{"auto"===n[e]?"relative"===n.position?n[e]=-parseFloat(n[r[e]]):"fixed"===n.position?(i=i||zi(Hi(t),Hi(window)),n[e]=i[e]):"absolute"===n.position&&(i=i||zi(Hi(t),Hi(t.offsetParent)),n[e]=i[e]):n[e]=parseFloat(n[e])}),delete n.position,n}(t,Object.keys(a));return["left","right","top","bottom"].forEach(t=>{t in a?(o.from[t]=0,o.to[t]=a[t]+l[t],o.current.from[t]=l[t],o.current.to[t]=a[t],o.current.progress[t]=Math.abs(l[t]/(a[t]+l[t]))):(o.from[t]="auto",o.to[t]="auto",o.current.from[t]="auto",o.current.to[t]="auto")}),o},Qi=function(t,e,r={}){var n=r.scrollAnchor||function(t){var e=window.getComputedStyle(t),r="absolute"===e.position,n=/(auto|scroll)/;if("fixed"!==e.position)for(var i=t;i=i.parentElement;)if(e=window.getComputedStyle(i),(!r||"static"!==e.position)&&n.test(e.overflow+e.overflowY+e.overflowX))return i;return document.body}(t);if(function(t){return t===window?t.pageYOffset||t.pageYOffset:t.scrollHeight>t.clientHeight}(n=n===document.body?window:n)){var i=Ki(t,Hi(e),r),s={scrollLeft:n[n===window?"pageXOffset":"scrollLeft"],scrollTop:n[n===window?"pageYOffset":"scrollTop"]};return["x","y"].forEach((t,e)=>{var r="x"===t?"scrollLeft":"scrollTop";t in i?($coordsFormatted.from[r]=0,$coordsFormatted.to[r]=i[t]+s[r],$coordsFormatted.current.from[r]=s[r],$coordsFormatted.current.to[r]=i[t],$coordsFormatted.current.progress[t]=Math.abs(s[r]/(i[t]+s[r]))):($coordsFormatted.from[r]=s[r],$coordsFormatted.to[r]=s[r],$coordsFormatted.current.from[r]=s[r],$coordsFormatted.current.to[r]=s[r],$coordsFormatted.current.progress[t]=0)}),$coordsFormatted}},Vi=function(t){return"number"==typeof t},Ji=function(t,e=[]){return pt([{},t],(t,r,n)=>{if(!ot(n[t]))return ot(e)?e(t):!G(e)||!e.length||e.indexOf(t)>-1},!1,!1,!1)},Zi=function(t){var e={};return oi(t.split(";"),(t,r)=>{r=r.split(":"),e[r[0].trim()]=r[1].trim()}),e},Gi=function(t,e,r=!0){var n=G(t)?t.join("|"):t;if(!e&&es[n])return es[n];var i=[];return function(t,e){var r=document.styleSheets,n=function(e){try{for(var r=0;r<e.cssRules.length;r++){var n=e.cssRules[r];if(!0===t(n))return!0}}catch(t){}};if(e){for(var i=r.length-1;i>=0;i--)if(!0===n(r[i]))return!0}else for(i=0;i<r.length;i++)if(!0===n(r[i]))return!0}(e=>{if((e.type===window.CSSRule.KEYFRAMES_RULE||e.type===window.CSSRule[Oi.api.toUpperCase()+"_KEYFRAMES_RULE"])&&(G(t)?t:[t]).indexOf(e.name)>-1)return i=i.concat(i,function(t){for(var e=[],n=0;n<t.cssRules.length;n++){var i=t.cssRules[n],s=Zi(i.cssText.replace(i.keyText,"").replace("{","").replace("}","").trim()),a=(i.keyText||" ").split(",").map(t=>"from"===t?0:"to"===t?1:parseInt(t)/100);if(r)for(ts(s,["animation-","transition-"]);a.length;){var o=Ji(s);o.offset=a.shift(),e.push(o)}else s.offset=a.length>1?a:a[0],e.push(s)}return e.sort((t,e)=>t.offset===e.offset?0:t.offset>e.offset?1:-1)}(e)),!0},!0),es[n]=i,i};const ts=function(t,e,r=""){G(r)?r.forEach(e=>ts(t,e)):(t[r+"timing-function"]&&(t.easing=t[r+"timing-function"],delete t[r+"timing-function"]),t[r+"fill-mode"]&&(t.fill=t[r+"fill-mode"],delete t[r+"fill-mode"]),t[r+"iteration-count"]&&(t.iterations=t[r+"iteration-count"],delete t[r+"iteration-count"],"infinite"===t.iterations&&(t.iterations=1/0)))},es={};const rs=class{constructor(t,e,r={}){this.el=t,this.$={readyCallbacks:[],finishCallbacks:[],cancelCallbacks:[],params:r},r.fill=r.fill||"both","duration"in r||(r.duration=400),r.easing&&-1===["ease-in","ease-out","ease-in-out"].indexOf(r.easing)&&-1===r.easing.indexOf("(")&&(r.easing=function(t){t=t.indexOf("-")?t:Ei(t,"-");return window.getComputedStyle(document.body).getPropertyValue("--"+t)}(r.easing)||r.easing);var n={inset:["top","right","bottom","left"],margin:["top","right","bottom","left"],padding:["top","right","bottom","left"]};const i=t=>{t=t.slice();var e={},i={};oi(t,(t,r)=>{oi(n,(t,e)=>{r[t]&&(et(r[t])&&(r[t]=e.map(e=>r[t][e]).filter(t=>!nt(t))),G(r[t])&&(r[t]=r[t].join(" ")))}),!r.transform||!et(r.transform)||r.transform instanceof Ti||(r.transform=new Ti(r.transform).toString()),hi(Object.keys(r),"offset","easing").forEach(t=>{Ci.includes(t)&&lt(r[t])&&(r[t]+="px"),e[t]=void 0===e[t]?r[t]:e[t],i[t]=r[t]})});try{var s=this.el.animate(t,r)}catch(t){return void(this.$.error=t)}r.reverse&&s.reverse(),s.effect||(s.effect={}),s.effect.duration||(s.effect.duration=r.duration),s.onfinish=()=>{r.cancelForCss&&(s.cancel(),"forwards"!==r.fill&&"both"!==r.fill||Pi(this.el,i)),this.$.finishCallbacks.forEach(t=>{t(this.el)})},s.oncancel=()=>{this.$.cancelCallbacks.forEach(t=>{t(this.el)})},this.$.anim=s,this.$.firstFrame=e,this.$.lastFrame=i,this.$.params=r,this.$.readyCallbacks.length&&this.$.readyCallbacks.forEach(t=>t(s,r,e,i))};ot(e)?e(t,i):rs.createCallback(t,e,i,t=>{this.$.error=t})}get anim(){return this.$.anim}ready(t,e){this.$.error?e&&e(this.$.error):this.$.anim?t(this.$.anim,this.$.params,this.$.firstFrame,this.$.lastFrame):this.$.readyCallbacks.push(t)}onfinish(t){if(!ot(t))throw new Error("Onfinish() accepts only a function.");return this.$.finishCallbacks.push(t),this}oncancel(t){if(!ot(t))throw new Error("Oncancel() accepts only a function.");return this.$.cancelCallbacks.push(t),this}progress(){return this.$.anim?this.$.anim.currentTime/this.$.anim.effect.duration:0}seek(t){if(!Vi(t))throw new Error("Seek() accepts only a numeric value.");return this.ready((e,r)=>{e.currentTime=Math.min(t*r.duration,r.duration)}),this}reverse(){return this.ready(t=>t.reverse()),this}play(){return new Promise((t,e)=>{this.ready(r=>{r.play(),this.onfinish(()=>t(this)),this.oncancel(()=>e(this))},e)})}pause(){return this.ready(t=>t.pause()),this}finish(){return this.ready(t=>t.finish()),this}cancel(){return this.ready(t=>t.cancel()),this}static createCallback(t,e,r,n){var i=et(e)&&!Object.values(e).filter(t=>G(t)).length,s=G(e)&&e.length>1&&st(e[0]);if(i||s)vi.onread(()=>{s?(e.shift(),rs.createCallback(t,[Fi(t,Object.keys(e[0])),...e],r,n)):rs.createCallback(t,[Fi(t,Object.keys(e)),e],r,n)});else{if(J(e)){var a=e;!(e=Gi(a)).length&&n&&n('Animation name "'+a+'" not found in any stylesheet!')}if(G(e)){var o=[];if(oi(e,(t,e)=>{"auto"===e.height&&ct(o,t),"auto"===e.width&&ct(o,t)}),o.length)return void Di(t,{width:"auto",height:"auto"},t=>t.getBoundingClientRect()).then(t=>{o.forEach(r=>{"auto"===e[r].width&&(e[r].width=t.width+"px"),"auto"===e[r].height&&(e[r].height=t.height+"px")}),r(e)})}r(e)}}};var ns=rs;const is=function(t,e,r=!1){var n=null,i=t;G(t)||(n=Object.keys(t),i=Object.values(t));var s=void 0,a=i.reduce((t,n)=>{if(void 0===s){if(e(n,t))return n;if(r&&(it(n)||ot(n))&&void 0!==(s=is(n,e,r)))return n}return t},void 0);if(void 0!==a){var o=n?n[i.indexOf(a)]:i.indexOf(a);return void 0!==s?[o].concat(ci(s)):o}};var ss=is;const as={},os={setup(t,e,r,n){var i=!0,s=os.events.map((t,e)=>{var r=n.get(t);return r||(i=!1,r=new Hammer.Tap({event:t,taps:os.events.length-e}),n.add(r)),r});if(!i){for(var a,o=s.slice();(a=o.shift())&&o.length;)a.recognizeWith(o);for(var l,c=s.slice();(l=c.pop())&&c.length;)l.requireFailure(c)}n.on(e,r)},teardown(t,e,r){r.off(e)},events:["tripletap","doubletap","singletap"]};os.events.forEach(t=>{as[t]=os});var ls=as,cs=d,hs=K;class ps extends H{constructor(t){super(),this.el=t,this.handlersList={},this.hammertime=new Hammer.Manager(this.el)}_setup(t,e){if(!this.handlersList[t])if(ls[t])if(J(ls[t]))this.handlersList[t]=e=>this.fire(new cs(this.el,{type:t,e:e})),this.addFireable(new hs(this.handlersList[t],ls[t]));else{if(!ot(ls[t].setup))throw new Error('The "'+t+'" event hook must have a "setup" function!');this.handlersList[t]=!0,ls[t].setup(this.el,t,r=>{ot(ls[t].validate)&&!ls[t].validate(r,e)||this.fire(new cs(this.el,{type:t,e:r}))},this.hammertime)}else if(us(t.split("+")[0])){var r=t.split("+").map(t=>{var e=us(t),r=this.hammertime.get(e);return r||(r=new(Hammer[si(e)]),this.hammertime.add(r)),r});r.forEach((t,e)=>{t.recognizeWith(r.slice(e+1))}),this.handlersList[t]=e=>this.fire(new cs(this.el,{type:t,e:e})),this.hammertime.on(t.split("+").join(" "),this.handlersList[t])}else this.handlersList[t]=e=>this.fire(new cs(this.el,{type:t,e:e})),this.el.addEventListener(t,this.handlersList[t])}_teardown(t){if(this.handlersList[t]){if(ls[t])if(J(ls[t]))removeListener(this.el,ls[t],this.handlersList[t]);else{if(!ot(ls[t].teardown))throw new Error('The "'+t+'" event hook must have a "teardown" function!');ls[t].teardown(this.el,t,this.hammertime)}else us(t.split("+")[0])?this.hammertime.off(t.split("+").join(" "),this.handlersList[t]):this.el.removeEventListener(t,this.handlersList[t]);delete this.handlersList[t]}}addFireable(t){return super.addFireable(t),this._setup(t.params.type,t.params),t}static createForTarget(t){return super.createForTarget(t,ps)}}const us=function(t){return ss(fs,e=>e.includes(t),!1)},fs={press:["press","pressup"],rotate:["rotate","rotatestart","rotatemove","rotateend","rotatecancel"],pinch:["pinch","pinchstart","pinchmove","pinchend","pinchcancel","pinchin","pinchout"],pan:["pan","panstart","panmove","panend","pancancel","panleft","panright","panup","pandown"],swipe:["swipe","swipeleft","swiperight","swipeup","swipedown"],tap:["tap"]};var ds=function(t,e,r){var n;return(n=ps.getForTarget(t))||(n=ps.createForTarget(t)),n.addFireable(new hs(r,{type:e}))},gs=Y,ms=X;class vs extends Gn{static from(t,e={},r=vs){return super.from(t,e,r)}constructor(t,e){super(t,e)}__el(){return this.el||document.createElement("div")}__ret(t){return this.el&&t===this.el?this:t}find(t){return new vs(this.el?ii(t,this.el):void 0)}data(t,e=null){return this.__ret(function(t,e,r=null){t.dataset.__customDatasetKey||(t.dataset.__customDatasetKey=li.length,li[t.dataset.__customDatasetKey]={});var n=li[t.dataset.__customDatasetKey];if(2===arguments.length){if(J(e))return n[ai(e)];if(G(e)){var i={};return e.forEach(t=>{i[t]=n[ai(t)]}),i}}var s=e;et(e)||(s=ft(e,r)),oi(s,(t,e)=>{n[ai(t)]=e})}(this.__el(),...arguments))}cssSync(...t){return this.__ret(function(t,...e){return e.length>1&&J(e[0])||et(e[0])?Pi(t,...e):Fi(t,...e)}(this.__el(),...arguments))}classSync(...t){return this.attrSync("class",...arguments)}attrSync(t,e=null,r=null){return this.__ret(fi(this.__el(),...arguments))}htmlSync(t=null){return this.__ret(yi(this.__el(),...arguments))}textSync(t=null){return this.__ret(bi(this.__el(),...arguments))}appendSync(t){return this.__ret(wi(this.__el(),t))}prependSync(t){return this.__ret(xi(this.__el(),t))}css(...t){return function(t,...e){return e.length>1&&J(e[0])||et(e[0])?Ai(t,...e):$i(t,...e)}(this.__el(),...arguments).then(t=>this.el&&t===this.el?this:t)}class(...t){return this.attr("class",...arguments)}attr(t,e=null,r=null){return function(t,e,r=null,n=null){return 2===arguments.length?vi.onwrite((t,e)=>{try{t(fi(...arguments))}catch(t){e(t)}},!0):vi.onread((t,e)=>{try{t(fi(...arguments))}catch(t){e(t)}},!0)}(this.__el(),...arguments).then(t=>this.el&&t===this.el?this:t)}html(t){return function(t,e=null){return arguments.length>1?vi.onwrite((t,e)=>{try{t(yi(...arguments))}catch(t){e(t)}},!0):vi.onread((t,e)=>{try{t(yi(...arguments))}catch(t){e(t)}},!0)}(this.__el(),...arguments).then(t=>this.el&&t===this.el?this:t)}text(t){return function(t,e=null){return arguments.length>1?vi.onwrite((t,e)=>{try{t(bi(...arguments))}catch(t){e(t)}},!0):vi.onread((t,e)=>{try{t(bi(...arguments))}catch(t){e(t)}},!0)}(this.__el(),...arguments).then(t=>this.el&&t===this.el?this:t)}append(t){return function(t,e){return vi.onwrite((t,e)=>{try{t(wi(...arguments))}catch(t){e(t)}},!0)}(this.__el(),...arguments).then(()=>this)}prepend(t){return function(t,e){return vi.onwrite((t,e)=>{try{t(xi(...arguments))}catch(t){e(t)}},!0)}(this.__el(),...arguments).then(()=>this)}cssCompute(...t){return Di(this.__el(),...arguments)}cssTransaction(t){return function(t,e){return new Mi(t,e,(t,e)=>_i(t,e),(t,e)=>Ai(t,e))}(this.__el(),t)}on(...t){return ds(this.__el(),...t)}off(...t){return gs(this.__el(),...t)}trigger(...t){return ms(this.__el(),...t)}play(t,e={}){return"cancelForCss"in e||(e.cancelForCss=!0),new ns(this.__el(),t,e).play().then(()=>this)}translateTo(t,e={}){var r=t instanceof vs?t.el:t;return vi.onread((t,n)=>{if(!this.el)return n();var i=Yi(this.el,r,e);e.play?t(this.play([{transform:i.current.from},{transform:i.to}],e.play)):t(this.css({transform:i.to}))},!0)}offsetTo(t,e={}){var r=t instanceof vs?t.el:t;return vi.onread((t,n)=>{if(!this.el)return n();var i=Xi(this.el,r,e);e.play?t(this.play([i.current.from,i.to],e.play)):t(this.css(i.to))},!0)}scrollTo(t,e={}){var r=t instanceof vs?t.el:t;return vi.onread((t,n)=>{if(!this.el)return n();var i=Qi(this.el,r,e);e.play&&console.log("scrollTo() does not currently support animation."),t(i.viewport.scrollTo(i.to.scrollLeft,i.to.scrollTop))},!0)}}var ys=function(t,e=1){var r=0;t.forEach(t=>{r++});var n=t.slice(t.length-r,e);return arguments.length>1?n:n[0]},bs=function(t,e=1){return arguments.length>1?ys(t.slice().reverse(),e).reverse():ys(t.slice().reverse())},ws=function(t){return at(t)&&/^class\s?/.test(Function.prototype.toString.call(t))},xs={register(t,e,r=!1){Es[t]={component:e,singleton:r}},create(t,...e){var r,n;if(r=Es[t]){if(r.singletonInstance)return r.singletonInstance;if("auto"===r.singleton&&r.singletonInstances){var i=r.singletonInstances.filter(t=>ui(e,t.args).length===e.length);if(1===i.length)return i[0].instance}return n=ws(r.component)?new r.component(...e):ot(r.component)?r.component(...e):r.component,!0===r.singleton?r.singletonInstance=n:"auto"===r.singleton&&(r.singletonInstances=r.singletonInstances||[],r.singletonInstances.push({instance:n,args:e})),n}throw new Error('The "'+t+'" component is not defined in registry!')}};const Es={};var Os=class{constructor(t={}){oi(t,(t,e)=>{Pn.set(this,t,e)})}setActiveState(t=!0){if(this.active!==t){var e=Pn.set(this,t?"activating":"deactivating",!0,!0);return e.promises?(e.promises.then(()=>{Pn.set(this,t?{activating:!1,active:!0}:{deactivating:!1,active:!1},!0)}),e):Pn.set(this,t?{activating:!1,active:!0}:{deactivating:!1,active:!1},!0)}}},js=class extends class{constructor(t={},e={}){this.params=e,this.params.itemsOffset||(this.params.itemsOffset="entries"),this.fill(t),Pn.set(this,"current",{}),pi(e.takeStats||[]).forEach(t=>{var e,r,n,i;n="[",i="]",(r=t).startsWith(n)&&r.endsWith(i)&&(e=!0,t=function(t,e,r){return function(t,e){return function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?t:t.substr(0,n)}(t,e,!0)}(function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?"":t.substr(n+e.length)}(t,e),r)}(t,"[","]"),this.current[t]=[]);var s=this.params.itemsOffset+".."+t;Pn.observe(this,s,(r,n,i)=>{!0===r?e?(ct(this.current[t],i.originatingTarget),Pn.set(this.current,t,this.current[t])):Pn.set(this.current,t,i.originatingTarget):!1===r&&(e?(ni(this.current[t],i.originatingTarget),Pn.set(this.current,t,this.current[t])):this.current[t]===i.originatingTarget&&Pn.del(this.current,t))})})}fill(t){oi(t,(t,e)=>{Pn.set(this,t,e)})}getItemsArray(){var t=this[this.params.itemsOffset];return G(t)?t:t?Object.values(t):[]}filter(){}sort(){}}{constructor(t={},e={}){e.takeStats||(e.takeStats=[]),e.takeStats.includes("active")||e.takeStats.push("active"),e.takeStats.includes("activating")||e.takeStats.push("activating"),e.takeStats.includes("deactivating")||e.takeStats.push("deactivating"),super({},e),Pn.observe(this,this.params.itemsOffset+"..activating",t=>{t&&this.getItemsArray().forEach(t=>{!0!==t.active||t.activating||t.setActiveState(!1)})}),this.fill(t)}selectStart(){var t,e=this.getItemsArray();if(!st(e)&&(t=ys(e)))return t.setActiveState(!0)}selectEnd(){var t,e=this.getItemsArray();if(!st(e)&&(t=bs(e)))return t.setActiveState(!0)}selectPrev(t=!1){var e,r=this.getItemsArray();if(!st(r))return this.current.active?e=function(t,e,r=!1,n=!1,i=!1){if(-1===t.indexOf(e))return r?[]:void 0;var s=!0===r?t.length-1:!1===r?1:r,a=(t=t.slice().reverse(),i?t.lastIndexOf(e)+1:t.indexOf(e)+1),o=nt(e)?[]:t.slice(a,a+s);return n&&o.length<s&&o.length<t.length&&(ot(n)&&!n(s-o.length)||(o=o.concat(t.slice(0,s-o.length)))),r?o:o[0]}(r,this.current.active,!1,t):!t||ot(t)&&!t(0)||(e=bs(r)),e?e.setActiveState(!0):void 0;ot(t)&&t()}selectNext(t=!1){var e,r=this.getItemsArray();if(!st(r))return this.current.active?e=function(t,e,r=!1,n=!1,i=!1){if(-1===t.indexOf(e))return r?[]:void 0;var s=!0===r?t.length-1:!1===r?1:r,a=i?t.lastIndexOf(e)+1:t.indexOf(e)+1,o=nt(e)?[]:t.slice(a,a+s);return n&&o.length<s&&o.length<t.length&&(ot(n)&&!n(s-o.length)||(o=o.concat(t.slice(0,s-o.length)))),r?o:o[0]}(r,this.current.active,!1,t):!t||ot(t)&&!t(0)||(e=ys(r)),e?e.setActiveState(!0):void 0;ot(t)&&t()}selectRand(){}filter(){}sort(){}static createEntries(t,e=Os){var r=G(t)?[]:{};return oi(t,(t,n)=>{n=n instanceof e?n:ws(e)?new e(n):ot(e)?e(n):n,Pn.set(r,t,n)}),r}};class ks extends(function(...t){var e={};G(arguments[0])&&(t=arguments[0],e=arguments[1],arguments[2]&&arguments[2]);var r=bs(t),n={},i=class extends r{constructor(...t){super(...t)}};return i.prototypes=t,t.forEach(t=>{pt([i,t],(t,e,r)=>-1===["name","prototype","prototypes","length"].indexOf(t)),pt([i.prototype,t.prototype],(t,e,r)=>-1===["prototype","prototypes"].indexOf(t)&&(!ot(r[t])||(G(n[t])?n[t].push(r[t]):n[t]=[r[t]],!1)),!0)}),oi(n,(t,r)=>{"constructor"!==t&&(i.prototype[t]=function(...n){if(Object.hasOwnProperty(e,t)&&ot(e[t]))return e[t].call(this,r,...n);var i=[];return r.forEach(t=>{i.push(t.call(this,...n))}),bs(i)})}),i}(Os,js)){constructor(t={},e={}){e.itemsOffset="subroutes",super(t,e),Pn.observe(this,"active",t=>{!0===t&&this.activeCallback&&this.activeCallback()}),this.initCallback&&this.initCallback()}route(t=null){var e,r;G(t)?(e=t.shift(),r=t):r=lt(e=t)?parseInt(t)+1:null;var n=xs.create("Router"),i="pathmap";lt(e)&&(e=parseInt(e),i="pathsplit");var s=r=>{if(this.active||this.activating){var n=[];oi(r,(t,r)=>{if(t===e)return!1;n.push(r)}),Pn.set(this,"ownPath",n.join("/"))}else Pn.del(this,"ownPath");var i=r[e];if((this.active||this.activating)&&this.subroutes&&i){if(this.subroutes[i]){if(!this.subroutes[i].active&&!this.subroutes[i].activating)return this.subroutes[i].setActiveState(!0)}else if(!rt(t))throw new Error("404: "+i,this.subroutingKey)}else if(this.current.active)return this.current.active.setActiveState(!1)};s(n[i]),Pn.observe(n,i,s),this.getItemsArray().forEach(t=>t.route(r))}static createRoutes(t,e=ks){return super.createEntries(t,e)}}class Ss extends ks{constructor(t={},e={}){super(t,e),Q(this,"current.active",t=>{if(t){if(t.current.active||t.current.activating){if("hidden"!==this.display)return V(this,"display","hidden")}else if("minimized"!==this.display)return V(this,"display","minimized")}else if("maximized"!==this.display)return V(this,"display","maximized")},{observeDown:!0})}static createRoutes(t,e=Ss){return super.createRoutes(t,e)}}var Ts=class{constructor(t=[],e={}){this.$={animations:[],finishCallbacks:[],cancelCallbacks:[],params:e},t.forEach(t=>{this.add(t)})}add(t){if(!(t instanceof ns))throw new Error("Argument#1 must be an Anim instance!");return this.$.animations.push(t),this.$.addCallback&&this.$.addCallback(t),this}remove(t){if(!(t instanceof ns))throw new Error("Argument#1 must be an Anim instance!");return ni(this.$.animations,t),this}onfinish(t){if(!ot(t))throw new Error("Onfinish() accepts only a function.");return this.$.finishCallbacks.push(t),this}oncancel(t){if(!ot(t))throw new Error("Oncancel() accepts only a function.");return this.$.cancelCallbacks.push(t),this}progress(){return this.$.animations.reduce((t,e)=>t.progress()+e.progress(),0)/this.$.animations.length}play(){return this.$.stopped=!1,new Promise((t,e)=>{var r,n,i=()=>{r||(r=!0,this.$.finishCallbacks.forEach(t=>t()),t())},s=()=>{n||(n=!0,this.$.cancelCallbacks.forEach(t=>t()),e())},a=this.$.animations.length;this.$.animations.forEach(t=>{t.play().then(()=>{!--a>0&&i()}).catch(s)}),this.$.addCallback=t=>{this.$.stopped||(a++,t.play().then(()=>{!--a>0&&i()}).catch(s))}})}seek(t,e=[],r=[]){this.each(e=>e.seek(t),e,r)}pause(t=[],e=[]){this.$.stopped=!0,this.each(t=>t.pause(),t,e)}finish(t=[],e=[]){this.$.stopped=!0,this.each(t=>t.finish(),t,e)}cancel(t=[],e=[]){this.$.stopped=!0,this.each(t=>t.cancel(),t,e)}clear(t=[],e=[]){this.$.animations=this.$.animations.filter(r=>{if((!e||!ci(e,!1).includes(r.el))&&(!t||ci(t,!1).includes(r.el)))return!1})}each(t,e=[],r=[]){this.$.animations.forEach(n=>{r&&ci(r,!1).includes(n.el)||e&&!ci(e,!1).includes(n.el)||t(n)})}};var Fs=class{constructor(t,e={}){this.el=t,ds(this.el,"panstart",this._onPanStart.bind(this)),ds(this.el,"panmove",this._onPanMove.bind(this)),ds(this.el,["panend","pancancel"],this._onPanEnd.bind(this))}with(t,e="x"){this.region=t,this.axis=e;var r=()=>{var t=_inherit({duration:400},this.$.params.animation||{});vi.onread(()=>{var e=Yi(this.el,this.region,{x:"end",y:"center"});this.moveableDistance=e.to.translate["x"===this.axis?0:1],this.anim=new ns(this.el,[{transform:e.current.from},{transform:e.to}],t),this.anim.pause(),this.currentDistance=0,this.progress=0})};this.$params.startupReset?vi.onread(()=>{var t=Yi(this.el,this.region,{x:"start",y:"center"});Ai(this.el,{transform:t.to}).then(r())}):r()}_onPanStart(t){}_onPanMove(t){this.progress=(this.currentDistance+t.deltaX)/this.moveableDistance,this.anim.seek(this.progress)}_onPanEnd(t){this.progress=this.anim.progress(),this.currentDistance=this.progress*this.moveableDistance,this.progress>.5?this.anim.play().then(()=>{this.progress=1,this.currentDistance=this.moveableDistance,this.anim.pause()}):this.anim.reverse().play().then(()=>{this.progress=0,this.currentDistance=0,this.anim.reverse().pause()})}},Cs=function(t){return et(t)&&Object.getPrototypeOf(t)===Object.prototype},Ps=function(t){return!0===t||!1===t};const $s=function(t,e,r=!0,n=1){if(G(t)&&G(e)&&t.length!==e.length)return!r;if(et(t)&&et(e)){var i=Object.keys(t),s=Object.keys(e);if(!i.length&&!s.length)return Cs(t)&&Cs(e)?r:t===e===r;if(!$s(i,s))return!r}if(n>0&&(G(t)&&G(e)||et(t)&&et(e))){var a=function(t,e,r=!0,n=!0,i=!1,s=!1){if(G(t)&&G(e)){var a=[],o=!0;return t.forEach(t=>{if(o){var l=!1;oi(e,(e,i)=>{(!l||n&&it(t))&&(l=r(t,i),(G(l)&&!l.length||et(l)&&!Object.keys(l).length)&&(l=!1),it(l)&&n&&(t=l))}),it(l)?a.push(n?l:t):Ps(l)?i&&!l||!i&&l?a.push(t):s&&(o=!1):a.push(l)}}),a}if(et(t)&&et(e)){a={},o=!0;return Object.keys(t).forEach(l=>{if(o){var c=r(t[l],e[l]);(G(c)&&!c.length||et(c)&&!Object.keys(c).length)&&(c=!1),it(c)?a[l]=n?c:t[l]:Ps(c)?i&&!c||!i&&c?a[l]=t[l]:s&&(o=!1):a[l]=c}}),a}}(t,e,(t,e)=>$s(t,e,r,n-1),!1,!1,!0);return G(a)?a.length===t.length&&a.length===e.length:et(a)&&et(t)?Object.keys(a).length===Object.keys(t).length&&Object.keys(a).length===Object.keys(e).length:a}return ot(r)?r(t,e):Vi(t)&&Vi(e)&&isNaN(t)&&isNaN(e)?r:t===e===r};var As=$s;ti.env={env:"browser",Registry:xs},xs.register("Router",ei,!0),xs.register("Timeline",()=>new class{constructor(t=[],e={}){this.$={},this.$.entries=[],this.$.params=e,this.nowPlaying=new Ts,t.forEach(t=>{this.add(t,e.timing)}),this.queue=[]}add(t,e={},r={},n=null,i=null){if(!this.$.entries.filter(e=>e.el===t).length){var s={el:t,effect:e,params:r,onfinish:n,oncancel:i};this.$.entries.push(s),this.nowPlayingAdd(s)}}nowPlayingAdd(t){if(this.nowPlayingEffect){var e=(t,e,r,n)=>{var i=new ns(e.el,r,n);t.add(i),e.onfinish&&i.oncancel(e.onfinish),e.oncancel&&i.oncancel(e.oncancel)},r=(t,n)=>{var i=n[0],s=dt(this.nowPlayingEffect,i.effect),a=dt(this.nowPlayingParams,i.params);if(Vi(a.lag)||Vi(a.lagAfter)){var o=bs(t.$.animations);if(o)return void o.ready((o,l)=>{a.delay=a.delay||0,Vi(a.lag)?a.delay+=(a.withDelays?l.delay:0)+a.lag:a.delay+=(a.withDelays?l.delay+parseFloat(l.endDelay):0)+l.duration+a.lagAfter,a.delay-=Vi(o.currentTime)?o.currentTime:0,e(t,i,s,a),n.shift(),n.length&&r(t,n)})}e(t,i,s,a),n.shift(),n.length&&r(t,n)};this.queue.push(t),1===this.queue.length&&r(this.nowPlaying,this.queue)}}play(t={},e={}){return this.nowPlayingEffect&&(this.nowPlaying=new Ts,this.queue=[]),this.nowPlayingEffect=t,this.nowPlayingParams=e,(e.reverseList?this.$.entries.slice().reverse():this.$.entries).forEach(t=>{e.except&&ci(e.except,!1).includes(t.el)||e.only&&!ci(e.only,!1).includes(t.el)||this.nowPlayingAdd(t)}),this.nowPlaying.play()}},!0),xs.register("Translate",()=>new Fs,!0),xs.register("IntersectionObserver",t=>new class{constructor(t,e={}){var r=new IntersectionObserver(t=>{t.forEach(t=>{V(this,t),e.once&&r.unobserve(t.target)})},ut(e,["root","rootMargin","threshold"]));r.observe(t)}}(t||document.body),"auto"),xs.register("ProximityObserver",t=>new class{constructor(t,e={}){var r=new class{constructor(t,e={}){var r;this.$={},this.$.options=e,this.$.targetsObj=[],this.$.root=this.$.options.root||window;var n=(e,i)=>{this.$.waiting?r=!0:(this.$.waiting=!0,vi.onread(()=>{if(!this.$.disconnected&&!this.$.paused){var s=[];if(this.$.targetsObj.length){var a=Hi(this.$.root),o=!As(this.$.previousRootRect,a);this.$.targetsObj.forEach(t=>{var e,r,n,i,l,c=Hi(t.el),h=!As(t.previousItemRect,c);if(o||h){var p=(e=c,r=a,n=this.$.options.axis,i=t.previousProximity,(l={intersection:zi(e,r)}).x=l.x||{},l.y=l.y||{},i=ut(i),(n?ci(n):["x","y"]).forEach(t=>{var n="x"===t?"left":"top",s="x"===t?"right":"bottom",a=e["x"===t?"width":"height"],o=r["x"===t?"width":"height"];l[t].advancement=void 0,i.intersection&&(l[t].advancement=i.intersection[n]>l.intersection[n]?"positive":i.intersection[n]<l.intersection[n]?"negative":i[t].advancement);var c=0;l.intersection[n]<=o&&l.intersection[s]<=0?c=(a-Math.abs(l.intersection[s]))/a:l.intersection[s]>0&&(c=1);var h=0;l.intersection[n]<=0&&l.intersection[s]<=o?h=Math.abs(l.intersection[n])/a:l.intersection[s]>o&&(h=1);var p=0;if(l.intersection[n]<=o&&l.intersection[s]<=o){var u=o+a;p=(u-(l.intersection[n]+a))/u}else l.intersection[s]>o&&(p=1);var f=0;if(a>o)if(l.intersection[n]<=0&&l.intersection[s]<=0){var d=a-o;f=Math.abs(l.intersection[n])/d}else l.intersection[s]>0&&(f=1);else l.intersection[n]>=0&&l.intersection[s]>=0?(d=o-a,f=l.intersection[s]/d):l.intersection[n]<0&&(f=1);"positive"===l[t].advancement?(l[t].percentageIn=c,l[t].percentageOut=h,l[t].percentagePass=p,l[t].percentageContained=f):(l[t].percentageIn=1-h,l[t].percentageOut=1-c,l[t].percentagePass=1-p,l[t].percentageContained=1-f),a>o&&(l[t].percentageContained*=-1)}),l);As(p,t.previousProximity,!0,1)||s.push(dt({target:t.el},p)),t.previousProximity=p}t.previousItemRect=c}),this.$.previousRootRect=a}if(s.length){var l=t(s,this);l instanceof Promise&&(this.$.paused=!0,l.then(()=>{this.$.paused=!1}),l.catch(()=>{this.$.paused=!1}))}if(e)return e;this.$.waiting=!1,r&&i&&(r=!1,n(!1,i))}}))};this.$.options.events?ds(this.$.root,this.$.options.events,()=>{n(!1,this.$.options.fulfilPendingCall)}):n(!0)}observe(t){this.$.targetsObj.filter(e=>e.el===t).length||this.$.targetsObj.push({el:t})}unobserve(t){this.$.targetsObj=this.$.targetsObj.filter(e=>e.el!==t)}disconnect(){this.$.disconnected=!0}}(t=>{t.forEach(t=>{V(this,t),e.once&&r.unobserve(t.target)})},ut(e,["root","rootMargin","axis"]));r.observe(t)}}(t||document.body),"auto"),xs.register("ResizeObserver",t=>new class{constructor(t,e={}){new ResizeObserver(t=>{t.forEach(t=>{var e={contentRect:t.contentRect.toJSON()};t.contentBoxSize&&(e.contentBoxSize={inlineSize:t.contentBoxSize.inlineSize,blockSize:t.contentBoxSize.blockSize},e.borderBoxSize={inlineSize:t.borderBoxSize.inlineSize,blockSize:t.borderBoxSize.blockSize},V(this,e))})}).observe(t)}}(t||document.body),"auto"),xs.register("console",()=>console,!0),xs.register("window",()=>window,!0);var _s=new Ss({active:!0,title:"Web-Native Home :: Web-Native",page:{title:"Finally, a Web-Native UI Framework!"},subroutes:Ss.createRoutes({chtml:{title:"CHTML - a Web-Native UI Framework :: Web-Native",page:{title:"Finally, a Web-Native UI Framework!",slides:new js({desc:"New to CHTML? Here's a walkthrough.",entries:js.createEntries([{label:"Structure",code:'\n    --------------------------------------------\n    STRUCTURE\n    (Follow some semantic markup pattern.)\n    --------------------------------------------\n    \n    <div c-role="card">\n      <div c-role="card-icon"></div>\n      <div>\n        <div c-role="card-title"></div>\n        <div c-role="card-desc"></div>\n      </div>\n    </div>\n    \n    --------------------------------------------\n    Above, we have used the "c-role" attribute to create\n    relationships for the "card" component.\n    \n    Now, we have the following component binding, like a tree:\n    \n    card\n      |-- icon\n      |-- title\n      |-- desc\n    \n    This makes your UI easier to reason about and to access.\n    For example, we will be able to traverse the component\n    tree in JavaScript, like this:\n    \n    let title = card.tree.title;\n    let desc = card.tree.desc;\n    \n    More on this shortly.\n    --------------------------------------------\n    ',next:"Next: behaviour",setEl(t){this.el=t}},{label:"Behaviour",code:"\n    --------------------------------------------\n    BEHAVIOUR\n    (Programmatically or declaratively add behaviour.)\n    --------------------------------------------\n    \n    // The component instance\n    let card = new Chtml(el);\n\n    // This gives us an API similar to jQuery's DOM API\n    card.css('display', 'flex');\n    // Even nodes are created as CHTML instances\n    card.tree.icon.css({\n        width: '50px',\n        height: '50px',\n        borderRadius: '25px',\n    });\n\n    // Add an \"onclick\" behaviour\n    // - \"shake\" the component on clicking its icon\n    card.tree.icon.on('click', () => {\n        card.play([\n            {transform: {translate: [0, 0]}},\n            {transform: {translate: ['-50px', 0]}},\n            {transform: {translate: ['50px', 0]}},\n            {transform: {translate: [0, 0]}},\n        ], {duration: 300});\n    });\n    \n    --------------------------------------------\n    Now the interesting part is... everything above\n    is acheivable right within markup.\n    \n    For the \"onclick\" behaviour, we'll use an \"scoped\" script.\n    --------------------------------------------\n    \n    <div c-role=\"card\">\n\n      <div c-role=\"card-icon\"></div>\n      <div>\n        <div c-role=\"card-title\"></div>\n        <div c-role=\"card-desc\"></div>\n      </div>\n\n      <script type=\"text/jsen\">\n        tree.icon.on('click', () => {\n            play([\n                {transform: {translate: [0, 0]}},\n                {transform: {translate: ['-50px', 0]}},\n                {transform: {translate: ['50px', 0]}},\n                {transform: {translate: [0, 0]}},\n            ], {duration: 300});\n        });\n      <\/script>\n\n    </div>\n\n    --------------------------------------------\n    The script above is scoped to the component. Notice\n    that we didn't have to reference a \"card\" component\n    as this is implicit to the code.\n    --------------------------------------------\n    ",next:"Next: composition",setEl(t){this.el=t}},{label:"Composition",code:'\n    --------------------------------------------\n    COMPOSITION\n    (Define components once and use everywhere.)\n    --------------------------------------------\n\n    \x3c!--\n    Components are defined in a <template> element.\n    So we will place our card in one. We will also assign it\n    a means of identification called a "namespace".\n    --\x3e\n\n    <template is="c-bundle">\n\n      <div c-role="card" c-namespace="html/card">\n        <div c-role="card-icon"></div>\n        <div>\n          <div c-role="card-title"></div>\n          <div c-role="card-desc"></div>\n        </div>\n        <script type="text/jsen">...<\/script>\n      </div>\n\n    </template>\n\n    \x3c!--\n    The <template> element itslef would live in the <head>\n    section of a document.\n    Components within it can be imported anywhere within\n    the document <body>.\n    --\x3e\n\n    <html>\n\n      <head>\n        <template is="c-bundle">\n          <div c-role="card" c-namespace="html/card">...</div>\n        </template>\n      </head>\n\n      <body>\n        <c-import c-namespace="html/card"></c-import>\n      </body>\n\n    </html>\n    ',next:"The end!",setEl(t){this.el=t}}])})}},reflex:{title:"Reflex - a reactivity library :: Web-Native",page:{title:"This is Reflex page!"}},jsen:{title:"JavaScript Object Notation (JSEN) :: Web-Native",page:{title:"This is JSEN page!"}}})});vs.ready(()=>{ti.env.pageTitle=document.querySelector("title"),_s.route(0),vs.from("#app").bind(_s)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVW5kZWZpbmVkLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bGwuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzT2JqZWN0LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNFbXB0eS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNUeXBlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9mcm9tLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bWVyaWMuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZWFjaC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9yZWZsZXgvc3JjL2ludGVybmFsL0V2ZW50LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL3JlZmxleC9zcmMvaW50ZXJuYWwvUXVlcnlFdmVudC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNOdW1iZXIuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQm9vbGVhbi5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2V2ZW4uanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9jb21wYXJlQ2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvcmVmbGV4L3NyYy9pbnRlcm5hbC9GaXJlYWJsZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9yZWZsZXgvc3JjL2ludGVybmFsL0ZpcmViYXNlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvaW50ZXJzZWN0LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL3JlZmxleC9zcmMvaW50ZXJuYWwvVHJhcEJhc2UuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9wdXNoVW5pcXVlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZ2V0QWxsUHJvcGVydHlOYW1lcy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2dldFByb3RvdHlwZUNoYWluLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovbWVyZ2VDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2NvcHkuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9tZXJnZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9yZWZsZXgvc3JjL2ludGVybmFsL011dGF0aW9uRXZlbnQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvcmVmbGV4L3NyYy9pbnRlcm5hbC9PYnNlcnZlckJhc2UuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvcmVmbGV4L3NyYy91bm9ic2VydmUuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvcmVmbGV4L3NyYy91bmxpbmsuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2dldFR5cGUuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9nZXQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvcmVmbGV4L3NyYy9pbnRlcm5hbC9PYnNlcnZlci5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL2FmdGVyLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvY3Jvc3NKb2luLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL3JlZmxleC9zcmMvb2JzZXJ2ZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9yZWZsZXgvc3JjL2xpbmsuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvcmVmbGV4L3NyYy90cmFuc2FjdGlvbi5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3VuaXF1ZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9yZWZsZXgvc3JjL2dldC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2FsbC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9yZWZsZXgvc3JjL2hhcy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9yZWZsZXgvc3JjL19zZXRQcm9wLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL3JlZmxleC9zcmMvc2V0LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL3JlZmxleC9zcmMvaW50ZXJuYWwvTGlzdGVuZXJCYXNlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL3JlZmxleC9zcmMvaW50ZXJuYWwvTGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvcmVmbGV4L3NyYy9vZmYuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvcmVmbGV4L3NyYy90cmlnZ2VyLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL3JlZmxleC9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY29tbW9ucy9qcy9pc1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jb21tb25zL2Fyci9zb3J0LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2NvbW1vbnMvanMvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jb21tb25zL2Fyci9kaWZmZXJlbmNlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2NvbW1vbnMvanMvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY29tbW9ucy9qcy9pc051bGwuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY29tbW9ucy9qcy9pc1VuZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jb21tb25zL2pzL2lzRW1wdHkuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY29tbW9ucy9qcy9pc1R5cGVGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY29tbW9ucy9qcy9pc051bWVyaWMuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY29tbW9ucy9hcnIvcHVzaFVuaXF1ZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jb21tb25zL29iai9nZXRBbGxQcm9wZXJ0eU5hbWVzLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2NvbW1vbnMvb2JqL2dldFByb3RvdHlwZUNoYWluLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2NvbW1vbnMvb2JqL21lcmdlQ2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY29tbW9ucy9vYmovY29weS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jb21tb25zL29iai9mcm9tLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2NvbW1vbnMvb2JqL21lcmdlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2NvbW1vbnMvb2JqL3dpdGguanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvanMvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9qcy9pc1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9qcy9pc1VuZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9qcy9pc1R5cGVPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvanMvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvYXJyL2Zyb20uanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvanMvaXNFbXB0eS5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9qcy9pc051bGwuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvanMvaXNUeXBlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZUZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzT2JqZWN0LmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bWVyaWMuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2dldEFsbFByb3BlcnR5TmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2dldFByb3RvdHlwZUNoYWluLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9wdXNoVW5pcXVlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9tZXJnZUNhbGxiYWNrLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9tZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvcmVtb3ZlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2luc3RhbmNlb2YuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNOdW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNQbGFpbk9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0Jvb2xlYW4uanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2VhY2guanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2V2ZW4uanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2NvbXBhcmVDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwckludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9SZWZlcmVuY2VJbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvQ2FsbEludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9GdW5jSW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9Kc2VuLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzU3RyaW5nLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVW5kZWZpbmVkLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mcm9tLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRW1wdHkuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNOdWxsLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZUFycmF5LmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mbGF0dGVuLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9maXJzdC5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvbGFzdC5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovY29weVBsYWluLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9MZXhlci5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvQ29udGV4dHMuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3dyYXBwZWQuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL2FmdGVyLmpzIiwid2VicGFjazovLy8uLi9qc2VuL25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci9iZWZvcmUuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3Vud3JhcC5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvYmVmb3JlTGFzdC5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9BYnN0cmFjdGlvbkludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9BYnN0cmFjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9BcnJJbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvQXJyLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0FyZ3VtZW50c0ludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9Bcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3VuaXF1ZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9Bc3NlcnRpb25JbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvQXNzZXJ0aW9uLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0Fzc2lnbm1lbnRJbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvQXNzaWdubWVudC5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9Cb29sSW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0Jvb2wuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvQ2FsbC5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9Db21wYXJpc29uSW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0NvbXBhcmlzb24uanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvQ29uZGl0aW9uSW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0NvbmRpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9EZWxldGlvbkludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9EZWxldGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9TdGF0ZW1lbnRzSW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL1JldHVybkludGVyZmFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9TdGF0ZW1lbnRzLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL0Z1bmMuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvSWZJbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvSWYuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ludGVyc2VjdC5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9NYXRoSW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL01hdGguanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvTnVtSW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL051bS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9PYmpJbnRlcmZhY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvT2JqLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL1ByZXNlbmNlSW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL1ByZXNlbmNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL1JlZmVyZW5jZS5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvRXhwci9SZXR1cm4uanMiLCJ3ZWJwYWNrOi8vLy4uL2pzZW4vc3JjL0V4cHIvU3RySW50ZXJmYWNlLmpzIiwid2VicGFjazovLy8uLi9qc2VuL3NyYy9FeHByL1N0ci5qcyIsIndlYnBhY2s6Ly8vLi4vanNlbi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1R5cGVPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNTdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1VuZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVsbC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzT2JqZWN0LmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Zyb20uanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0VtcHR5LmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNUeXBlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVtZXJpYy5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1R5cGVGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9lYWNoLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL2ludGVybmFsL0V2ZW50LmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL2ludGVybmFsL1F1ZXJ5RXZlbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bWJlci5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0Jvb2xlYW4uanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZXZlbi5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9jb21wYXJlQ2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvaW50ZXJuYWwvRmlyZWFibGUuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvaW50ZXJuYWwvRmlyZWJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvaW50ZXJzZWN0LmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL2ludGVybmFsL1RyYXAuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvaW50ZXJuYWwvVHJhcEJhc2UuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvcHVzaFVuaXF1ZS5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9nZXRBbGxQcm9wZXJ0eU5hbWVzLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2dldFByb3RvdHlwZUNoYWluLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL21lcmdlQ2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovY29weS5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9tZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9pbnRlcm5hbC9NdXRhdGlvbkV2ZW50LmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL2ludGVybmFsL09ic2VydmVyQmFzZS5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy91bm9ic2VydmUuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvdW5saW5rLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvZ2V0VHlwZS5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9nZXQuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvaW50ZXJuYWwvT2JzZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvYWZ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9ub2RlX21vZHVsZXMvQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvY3Jvc3NKb2luLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL29ic2VydmUuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvbGluay5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy90cmFuc2FjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L25vZGVfbW9kdWxlcy9Ad2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci91bmlxdWUuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvZ2V0LmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvbm9kZV9tb2R1bGVzL0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2FsbC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9oYXMuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvX3NldFByb3AuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvc2V0LmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL2luaXQuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvX2dldFByb3BzLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvdHJhcC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9kZWYuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvZGVsLmpzIiwid2VicGFjazovLy8uLi9yZWZsZXgvc3JjL2ludGVybmFsL0xpc3RlbmVyQmFzZS5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9pbnRlcm5hbC9MaXN0ZW5lci5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9idWlsZC5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy91bnRyYXAuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvb3duS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9vbi5qcyIsIndlYnBhY2s6Ly8vLi4vcmVmbGV4L3NyYy9vZmYuanMiLCJ3ZWJwYWNrOi8vLy4uL3JlZmxleC9zcmMvdHJpZ2dlci5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jaHRtbC9zcmMvcGFyYW1zLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvanMvaXNUeXBlRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvanMvaXNOdW1lcmljLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL2Fyci91bmlxdWUuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvc3RyL2JlZm9yZS5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9zdHIvYmVmb3JlTGFzdC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jaHRtbC9zcmMvY29tcG9zaW5nL3JlY29tcG9zZURpcmVjdGl2ZXMuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY2h0bWwvc3JjL2NvbXBvc2luZy9yZWNvbXBvc2UuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY2h0bWwvc3JjL2NvbXBvc2luZy9yZWNvbXBvc2VOb2Rlcy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jaHRtbC9zcmMvY29tcG9zaW5nL01hdHJpeC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jaHRtbC9zcmMvY29tcG9zaW5nL2NyZWF0ZUJ1bmRsZU1hdHJpeC5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9zdHIvYWZ0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvYXJyL3B1c2hVbmlxdWUuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvb2JqL2dldEFsbFByb3BlcnR5TmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvb2JqL2dldFByb3RvdHlwZUNoYWluLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL29iai9tZXJnZUNhbGxiYWNrLmpzIiwid2VicGFjazovLy8uLi9jb21tb25zL29iai9tZXJnZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jaHRtbC9zcmMvRGlyZWN0aXZlcy5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9vYmovZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9vYmovY29weS5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9hcnIvaW50ZXJzZWN0LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2NodG1sL3NyYy9jb3JlL3NjaGVtYS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jaHRtbC9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY2h0bWwvc3JjL2NvcmUvQ29yZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jaHRtbC9zcmMvY29yZS9kaXNjb25uZWN0ZWRDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jaHRtbC9zcmMvQ2h0bWwuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY2h0bWwvc3JjL2NvbXBvc2luZy9wYXJzZU5hbWVzcGFjZS5qcyIsIndlYnBhY2s6Ly8vLi4vY29tbW9ucy9hcnIvZm9sbG93aW5nLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2NodG1sL3NyYy9jb21wb3NpbmcvZGVmaW5lQnVuZGxlRWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbnMvYXJyL2RpdmlkZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jaHRtbC9zcmMvY29tcG9zaW5nL2RlZmluZUltcG9ydEVsZW1lbnRzLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2NodG1sL3NyYy9jb3JlL2NyZWF0ZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9wYXJhbXMuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9hcHAvcm91dGluZy9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY29tbW9ucy9hcnIvcmVtb3ZlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvZG9tL2ZpbmQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY29tbW9ucy9zdHIvdG9UaXRsZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jb21tb25zL3N0ci90b0NhbWVsLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2NvbW1vbnMvb2JqL2VhY2guanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9jaHRtbC9kb20vZGF0YS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jb21tb25zL2pzL2lzVHlwZUFycmF5LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2NvbW1vbnMvYXJyL2Zyb20uanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY29tbW9ucy9hcnIvZXhjbHVkZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jb21tb25zL2Fyci91bmlxdWUuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY29tbW9ucy9hcnIvaW50ZXJzZWN0LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvZG9tL2F0dHIuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9jaHRtbC9SZWZsb3cuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9jaHRtbC9jc3MvdmVuZG9yUHJlZml4LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvZG9tL2h0bWwuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9jaHRtbC9kb20vdGV4dC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2NodG1sL2RvbS9hcHBlbmQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9jaHRtbC9kb20vcHJlcGVuZC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jb21tb25zL3N0ci9mcm9tQ2FtZWwuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9jaHRtbC9jc3MvdmVuZG9yaXplLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvY3NzL3J1bGVDYWxsYmFjay5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2NodG1sL2Nzcy9UcmFuc2Zvcm1SdWxlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvY3NzL3JlYWQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9jaHRtbC9jc3MvYXV0b3B4LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvY3NzL3dyaXRlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvY3NzL3JlYWRBc3luYy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2NodG1sL2Nzcy93cml0ZUFzeW5jLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvY3NzL3JlYWRJbmxpbmUuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9jaHRtbC9jc3MvY29tcHV0ZUFzeW5jLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvVHJhbnNhY3Rpb24uanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9jaHRtbC9Dc3MvdmVuZG9yUHJlZml4LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvQ3NzL3ZlbmRvcml6ZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2NodG1sL0Nzcy9ydWxlQ2FsbGJhY2suanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9jaHRtbC9Dc3MvVHJhbnNmb3JtUnVsZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2NodG1sL0Nzcy9yZWFkLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvdWkvaW50ZXJzZWN0aW9uLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvdWkvZGVsdGEuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY29tbW9ucy9hcnIvYW55LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvdWkvcmVjdC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2NodG1sL3VpL2Nvb3Jkc0F0UmVjdC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2NodG1sL3VpL3BhcnNlUGxhY2VtZW50LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvdWkvZXZhbFByZWRpY2F0ZXMuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9jaHRtbC91aS90cmFuc2xhdGVUby5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2NodG1sL3VpL29mZnNldFRvLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvdWkvcG9zaXRpb25pbmdPZmZzZXRzLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvdWkvc2Nyb2xsVG8uanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9jaHRtbC91aS9zY3JvbGxQYXJlbnQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9jaHRtbC91aS9zY3JvbGxzLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2NvbW1vbnMvanMvaXNOdW1iZXIuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY29tbW9ucy9vYmovY29weVBsYWluLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvY3NzL3BhcnNlUnVsZXMuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9jaHRtbC9jc3MvcmVhZEtleWZyYW1lcy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2NodG1sL2Nzcy9zdHlsZXNoZWV0UnVsZUNhbGxiYWNrLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvYW5pbS9BbmltLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvY3NzL3ZhclJlYWQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY29tbW9ucy9vYmovZmluZC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2NodG1sL2V2dC9DdXN0b21FdmVudHMuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9jaHRtbC9ldnQvVXNlckV2ZW50LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvZXZ0L0xpc3RlbmVyLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvZXZ0L0xpc3RlbmVyQmFzZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2NodG1sL2V2dC9vbi5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2NodG1sL2V2dC9vZmYuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9jaHRtbC9ldnQvdHJpZ2dlci5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2NodG1sL0NodG1sLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvY3NzL2Nzcy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2NodG1sL2Nzcy9jc3NBc3luYy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2NodG1sL2RvbS9hdHRyQXN5bmMuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9jaHRtbC9kb20vaHRtbEFzeW5jLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvZG9tL3RleHRBc3luYy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2NodG1sL2RvbS9hcHBlbmRBc3luYy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2NodG1sL2RvbS9wcmVwZW5kQXN5bmMuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9jaHRtbC9jc3MvdHJhbnNhY3Rpb24uanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY29tbW9ucy9hcnIvZmlyc3QuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY29tbW9ucy9hcnIvbGFzdC5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jb21tb25zL2pzL2lzQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9SZWdpc3RyeS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jb21tb25zL2Fyci9mb2xsb3dpbmcuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9hcHAvSXRlbS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2FwcC9Db2xsZWN0aW9uLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvYXBwL0NvbGxlY3Rpb25CYXNlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2NvbW1vbnMvc3RyL3dyYXBwZWQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY29tbW9ucy9zdHIvdW53cmFwLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2NvbW1vbnMvc3RyL2JlZm9yZUxhc3QuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY29tbW9ucy9zdHIvYmVmb3JlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2NvbW1vbnMvc3RyL2FmdGVyLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2NvbW1vbnMvYXJyL3ByZWNlZGluZy5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2FwcC9yb3V0aW5nL1JvdXRlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2NvbW1vbnMvanMvbWl4aW4uanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL1JvdXRlLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2N1aS9zcmMvY2h0bWwvYW5pbS9UaW1lbGluZS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2FwcC91aS9UcmFuc2xhdGUuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY29tbW9ucy9qcy9pc1BsYWluT2JqZWN0LmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2NvbW1vbnMvanMvaXNCb29sZWFuLmpzIiwid2VicGFjazovLy9DOi9Vc2Vycy9veF9oYS9Eb2N1bWVudHMvd2VibmF0aXZlL2NvbW1vbnMvb2JqL2V2ZW4uanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY29tbW9ucy9vYmovY29tcGFyZUNhbGxiYWNrLmpzIiwid2VicGFjazovLy8uL2FwcC9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9hcHAvdWkvVGltZWxpbmUuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9hcHAvdWkvSW50ZXJzZWN0aW9uT2JzZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9hcHAvdWkvUHJveGltaXR5T2JzZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vL0M6L1VzZXJzL294X2hhL0RvY3VtZW50cy93ZWJuYXRpdmUvY3VpL3NyYy9jaHRtbC91aS9Qcm94aW1pdHlPYnNlcnZlci5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2NodG1sL3VpL3Byb3hpbWl0eS5qcyIsIndlYnBhY2s6Ly8vQzovVXNlcnMvb3hfaGEvRG9jdW1lbnRzL3dlYm5hdGl2ZS9jdWkvc3JjL2FwcC91aS9SZXNpemVPYnNlcnZlci5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIkFycmF5IiwiaXNBcnJheSIsInZhbCIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImNhc3RPYmplY3QiLCJrZXlzIiwic2xpY2UiLCJ2YWx1ZXMiLCJvYmoiLCJmb3JFYWNoIiwiayIsImlzTmFOIiwidG9TdHJpbmciLCJyZXR1cm5WYWx1ZSIsImNhbGxiYWNrIiwicGFyc2VGbG9hdCIsInRhcmdldCIsImRldGFpbHMiLCJ0aGlzIiwiJCIsInByb3BhZ2F0aW9uU3RvcHBlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJwcm9taXNlc0luc3RhbmNlIiwicHJvbWlzZXMiLCJwcm9wIiwicHJvbWlzZSIsIlByb21pc2UiLCJFcnJvciIsInB1c2giLCJhbGwiLCJyc3BucyIsInByb21zIiwiaXNFdmVudCIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiRXZlbnQiLCJzdXBlciIsImdldFByb3RvdHlwZU9mIiwiX2V2ZW4iLCJvYmoxIiwib2JqMiIsImFzc2VydGlvbiIsImRlcHRoIiwib2JqMUtleXMiLCJvYmoyS2V5cyIsInJlc3VsdCIsImNvbnRuIiwidjEiLCJ0ZXN0UGFzcyIsInYyIiwibmV0Q29tcGFyaXNvbiIsImNvbnRyYXN0IiwicmV0dXJuT25GaXJzdEZhbHNlIiwiZGlzY29ubmVjdGVkIiwiZmlyZWFibGVzIiwiY3VycmVudGx5RmlyaW5nRXZlbnRzIiwiZmlyZWFibGUiLCJ0YWdzIiwiZmlsdGVyIiwiX2ZpcmVhYmxlIiwicXVlcnkiLCJvYnNlcnZlciIsImhhbmRsZXIiLCJwYXJhbXMiLCJ0eXBlIiwiYXJyMiIsImFyciIsInZhbDEiLCJ2YWwyIiwiaW5kZXhPZiIsIkJhc2UiLCJmaXJlYmFzZXMiLCJmaXJlYmFzZUtleSIsInNldCIsIkZpcmViYXNlIiwiZXZ0IiwiZGVmYXVsdEhhbmRsZXIiLCJlIiwibmV4dCIsImluZGV4IiwiX2FyZ3MiLCJ0cmFwIiwiZmlyZSIsImFyZ3MiLCJwb3AiLCJjcmVhdGVGb3JUYXJnZXQiLCJnZXRGb3JUYXJnZXQiLCJpdGVtcyIsIml0bSIsImtleXNBbGwiLCJ1bnRpbCIsInByb3RvdHlwYWxDaGFpbiIsImdldE93blByb3BlcnR5TmFtZXMiLCJtZXJnZUNhbGxiYWNrIiwib2JqcyIsImRlZXBQcm9wcyIsImlzUmVwbGFjZSIsIndpdGhTeW1ib2xzIiwic2hpZnQiLCJ2YWxBdE9iajEiLCJ2YWxBdE9iajIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJkYXRhIiwiZmllbGRzIiwic3JjRXZ0IiwiZGF0YUV2ZW4iLCJvcmlnaW5hdGluZ1RhcmdldCIsIm9yaWdpbmF0aW5nVHlwZSIsIm9yaWdpbmF0aW5nRmllbGRzIiwib3JpZ2luYXRpbmdEYXRhIiwiX29yaWdpbmF0aW5nRGF0YSIsImZpZWxkIiwicGF0aCIsIl9wYXRoIiwib3JpZ2luYXRpbmdDcmVhdGVkIiwib3JpZ2luYXRpbmdEZWxldGVkIiwiX2RhdGEiLCJjcmVhdGVkIiwiZGVsZXRlZCIsImZpbmRGaXJlYWJsZXMiLCJmaXJlYmFzZSIsIm9yaWdpbmFsQ2FsbGJhY2siLCJyZW1vdmVGaXJlYWJsZSIsInVub2JzZXJ2ZSIsInJlY2lldmVyIiwiX2N0eHQiLCJjdHh0IiwiX2tleSIsImV4aXN0cyIsIkZpcmVhYmxlIiwiZmllbGRzQXJyYXkiLCJpc0R5bmFtaWNGaWVsZCIsInN0YXJ0c1dpdGgiLCJlbmRzV2l0aCIsImpvaW4iLCJkaWZmIiwiZmlyZUNhbGxiYWNrIiwiZmllbGREYXRhIiwicmVkdWNlIiwib3JpZ2luYXRpbmdGaWVsZCIsIl92YWx1ZSIsImZpZWxkUXVlcnkiLCJzZWFyY2giLCJzdWJqZWN0IiwicG9zIiwiYWZ0ZXJMYXN0IiwibGFzdEluZGV4T2YiLCJzdWJzdHIiLCJzcGxpdCIsImN1cnJlbnRWYWx1ZSIsInJlc3BvbnNlIiwicHJldlZhbHVlIiwiZHluYW1pY0ZpZWxkT3V0Y29tZXMiLCJvYnNlcnZlZEZpZWxkIiwicmVwbGFjZSIsImlucHV0T3JpZ2luYXRpbmdGaWVsZCIsImlucHV0T3JpZ2luYXRpbmdGaWVsZFNwbGl0Iiwib2JzZXJ2ZWREeW5hbWljRmllbGRPdXRjb21lIiwibWFwIiwic2VnIiwib2JzZXJ2ZVVwIiwib2JzZXJ2ZURvd24iLCJjdXJyVGFibGUiLCJjb2x1bW4iLCJuZXdUYWJsZSIsInJvdyIsIl9yb3ciLCJhZGRGaXJlYWJsZSIsIk9ic2VydmVyIiwib2JzZXJ2ZSIsImVudHJpZXMiLCJfZW50cmllcyIsImJhc2UiLCJNdXRhdGlvbkV2ZW50IiwiYnViYmxpbmciLCJjb250ZXh0IiwidGFyZ2V0cyIsInRhcmdldENvcHkiLCJzZXREYXRhIiwiX3NldERhdGEiLCJkZWxEYXRhIiwiX2RlbERhdGEiLCJjbnR4dCIsIm11dGF0aW9uQmFzZSIsImluaXRpYWxLZXlzIiwiY3VycmVudEtleXMiLCJjaGFuZ2VkS2V5cyIsImNvbmNhdCIsInNlbGYiLCJpbmNsdWRlcyIsInVubGluayIsInJldHVybkV2ZW50IiwidHJhcEJhc2UiLCJkZWZhdWx0R2V0IiwiUXVlcnlFdmVudCIsInRyYW5zYWN0aW9uIiwiYXBwbHkiLCJwcmV2VGVzdCIsImRlZmF1bHRIYXMiLCJfc3RhdGUiLCJrZXlzT3JQYXlsb2FkIiwiaGFuZGxlU2V0IiwicmVsYXRlZCIsImRlc2NyaXB0b3IiLCJkZWZpbmUiLCJzdWNjZXNzIiwiZGVmYXVsdFNldCIsIl9zdWNjZXNzIiwic3VjY2Vzc1N0YXRlcyIsInBheWxvYWRLZXlzIiwic3RhdGUiLCJfc2V0UHJvcCIsImxpc3RlbmVyIiwiU3RhdGljIiwiX2FyciIsInNvcnQiLCJhIiwiYiIsImxvY2FsZUNvbXBhcmUiLCJvcmRlciIsInRyaW0iLCJ0b0xvd2VyQ2FzZSIsInJldmVyc2UiLCJlbnRyaWVzT3JLZXkiLCJsaW1pdCIsInNwbGljZSIsImNsYXNzQiIsIm1peGluVGVzdCIsImNsYXNzQSIsIkZ1bmN0aW9uIiwicHJvdG90eXBlcyIsInByZXZBbnMiLCJjb25zdHJ1Y3RvciIsIkV4cHIiLCJqc2VuVHlwZSIsIlN1cGVyIiwiY29tbWVudHMiLCJtZXRhIiwidmFycyIsIkludGVyZmFjZSIsIkV4cHJJbnRlcmZhY2UiLCJKc2VuIiwiZXhwciIsIlBhcnNlcnMiLCJfdmFycyIsInBhcnNlcnMiLCJncmFtbWFycyIsInZhcnNTY29wZSIsInBhcnNlZCIsInBhcnNlIiwiX2V4cHIiLCJfUGFyc2VycyIsIl9wYXJhbXMiLCJGdW5jSW50ZXJmYWNlIiwic2Vjb25kTGV2ZWxWYXJzIiwiUmVmZXJlbmNlSW50ZXJmYWNlIiwiQ2FsbEludGVyZmFjZSIsImV4cGxhaW4iLCJhc3NlcnQiLCJfZmxhdHRlbiIsIndpdGhPYmplY3RzIiwiYWNjIiwiY291bnQiLCJmaXJzdHMiLCJhbW91bnQiLCJMZXhlciIsInN0ciIsImRlbGltcyIsIm9wdGlvbnMiLCJjb3B5UmVzdWx0IiwibmVzdGluZyIsIm1heERlcHRoIiwidG9rZW5zIiwibWF0Y2hlcyIsIm1hdGNoZXNpIiwiJGNhY2hlIiwiY2FjaGUiLCJjYWNoZWQiLCJsZXgiLCIkc3RyIiwiJG9wdGlvbnMiLCJibG9ja3MiLCIkYmxvY2tzIiwicXVvdGVzIiwiJHF1b3RlcyIsIiRjb21tZW50cyIsInJ1bnRpbWUiLCJfZXZhbENoYXJzQXQiLCJjaGFyV2lkdGgiLCJjb21tZW50VGVzdCIsInF1b3RlVGVzdCIsIm5lc3RpbmdUZXN0Iiwib3BlbkNvbW1lbnQiLCJfdGVzdFF1b3RlcyIsIm9wZW5RdW90ZSIsIl90ZXN0Q29tbWVudHMiLCJlbmRpbmciLCJfcHVzaCIsImNoYXJzIiwic3RhcnRpbmciLCJfdGVzdE5lc3RpbmciLCJzdG9wQ2hhciIsIl90ZXN0Q2hhcnMiLCJzdG9wQ2hhcnMiLCJzdG9wQ2hhckZvcndhcmQiLCJtYXRjaGVkRGVsaW0iLCJwcmVzZXJ2ZURlbGltcyIsInF1b3RlIiwiYmxvY2siLCJtYXRjaCIsIlJlZ0V4cCIsIk1hdGgiLCJtYXgiLCJ0ZXN0TGlzdCIsInRlc3QiLCJyZXQiLCJ1c2VSZWdleCIsImNpIiwiaXNOZXdTZXJpZXMiLCJzcGxpdFNlcmllcyIsIlN0cmluZyIsInNwbGl0U2VyaWVzMiIsInJlZ1BhcnNlIiwibWFpbkNvbnRleHQiLCJzdXBlckNvbnRleHQiLCJsb2NhbENvbnRleHQiLCJsb2NhbENvbnRleHRNZXRhIiwiZmluYWwiLCJsZXZlbCIsImNhbGxNYWluIiwiaGFuZGxlIiwiYmluZFRoaXMiLCJjb250eHRPYmoiLCJjb250eHRNZXRhIiwiYWR2YW5jZSIsIl9nZXQiLCJfaGFzIiwiaW5pdEtleXdvcmQiLCJfc2V0IiwibG9jYWxDb250eHRNZXRhIiwiZGVsZXRlUHJvcGVydHkiLCJkZWwiLCJwcm9wMiIsImNvbnRleHRPYmoyIiwiZm4iLCJleGVjIiwiZXhlY1Vua25vd24iLCJoYXMiLCJvcGVuaW5nVGFnIiwiY2xvc2luZ1RhZyIsImJlZm9yZUxhc3QiLCJBYnN0cmFjdGlvbiIsIkFic3RyYWN0aW9uSW50ZXJmYWNlIiwiZXZhbCIsInBhcnNlQ2FsbGJhY2siLCJBcnIiLCJBcnJJbnRlcmZhY2UiLCJleHBycyIsIm5ld0V4cHJzIiwiZXhwckEiLCJ1bmlxdWVTb0ZhciIsImV4cHJCIiwiZXZlbiIsIkFyZ3VtZW50cyIsIkFyZ3VtZW50c0ludGVyZmFjZSIsImxpc3QiLCJhcmciLCJBc3NlcnRpb24iLCJBc3NlcnRpb25JbnRlcmZhY2UiLCJsb2dpYyIsIm9wZXJhdG9ycyIsInRvVXBwZXJDYXNlIiwiaXNPciIsIm9yIiwiaXNOb3IiLCJub3IiLCJpc0FuZCIsImFuZCIsImlzTmFuZCIsIm5hbmQiLCJsYXN0UmVzdWx0IiwidHJ1ZXMiLCJBc3NpZ25tZW50IiwiQXNzaWdubWVudEludGVyZmFjZSIsInJlZmVyZW5jZSIsIm9wZXJhdG9yIiwiZ2V0RXZhbCIsIkJvb2wiLCJCb29sSW50ZXJmYWNlIiwiQ2FsbCIsIkNvbXBhcmlzb24iLCJDb21wYXJpc29uSW50ZXJmYWNlIiwib3BlcmFuZDEiLCJvcGVyYW5kMiIsImNvbXBhcmUiLCJvcGVyIiwic3RyaWN0IiwiZXhhY3QiLCJpcyIsImlzTnVsbCIsImVxdWFsc1RvIiwic3RyaWN0bHlOb3RFcXVhbHNUbyIsIm5vdEVxdWFsc1RvIiwicmVsYXRpdmUiLCJsZXNzZXJUaGFuIiwiZ3JlYXRlclRoYW4iLCJsZXNzZXJUaGFuT3JFcXVhbHNUbyIsImdyZWF0ZXJUaGFuT3JFcXVhbHNUbyIsImJldHdlZW4iLCJwYXJ0aWFsIiwiY29udGFpbnMiLCJhbnkiLCJpbiIsIkNvbmRpdGlvbiIsIkNvbmRpdGlvbkludGVyZmFjZSIsIm9uVHJ1ZSIsIm9uRmFsc2UiLCJzcGxpdHMiLCJEZWxldGlvbiIsIkRlbGV0aW9uSW50ZXJmYWNlIiwicmVkIiwiU3RhdGVtZW50cyIsIlN0YXRlbWVudHNJbnRlcmZhY2UiLCJzdG10cyIsImRlbGltIiwiUmV0dXJuSW50ZXJmYWNlIiwic3RtdCIsIkZ1bmMiLCJwYXJhbXRlcnMiLCJzdGF0ZW1lbnRzIiwiYXJyb3dGdW5jdGlvbkZvcm1hdHRpbmciLCJwYXJlbnRQYXJhbXMiLCJvd25QYXJhbXMiLCJuYW1lSW5QYXJlbnQiLCJuYW1lSW5TZWxmIiwiZGVmYXVsdFZhbEluUGFyZW50IiwiZGVmYXVsdFZhbEluU2VsZiIsInN1cCIsIm5ld01haW5Db250ZXh0IiwiZGVmYXVsdFZhbCIsIm5lc3RlZENvbnRleHQiLCJoZWFkTm9XcmFwIiwiaGVhZCIsImJvZHlOb1dyYXAiLCJib2R5IiwiZnVuY0hlYWQiLCJmdW5jQm9keSIsInBhcmFtIiwicGFyYW1TcGxpdCIsIklmIiwiSWZJbnRlcmZhY2UiLCJvblRydWVJc0Jsb2NrIiwib25GYWxzZUlzQmxvY2siLCJyZXN0IiwiTWF0aEludGVyZmFjZSIsImN1cnJlbnRUb3RhbCIsInN1YiIsIk51bSIsIk51bUludGVyZmFjZSIsImludCIsImRlYyIsInBhcnNlSW50IiwiT2JqIiwiT2JqSW50ZXJmYWNlIiwiX2VudHJpZXNTcGxpdCIsImVudHJ5IiwiUHJlc2VuY2UiLCJQcmVzZW5jZUludGVyZmFjZSIsIlJlZmVyZW5jZSIsImJhY2t0aWNrcyIsInNvdXJjZUNvbnRleHQiLCJwYXJ0cyIsInN1YmplY3RDb250ZXh0Iiwic2VwYXJhdG9yIiwibmFtZVNwbGl0IiwiaXNDb250ZXh0IiwiUmV0dXJuIiwiZXhwckxjIiwiU3RyIiwiU3RySW50ZXJmYWNlIiwicmVjaWV2ZWQiLCJvbkdldEZpcmUiLCJvblNldEZpcmUiLCJjdXJyZW50RGVzY3JpcHRvciIsIndyaXRhYmxlIiwibmV3VmFsdWUiLCJkZWZhdWx0S2V5cyIsIl9rZXlzIiwib3duS2V5cyIsImRlZmF1bHREZWwiLCJidWlsZCIsIl9pbml0IiwidW50cmFwIiwiZGVmIiwibGluayIsImluaXQiLCJvbiIsIm9mZiIsInRyaWdnZXIiLCJlbnYiLCJhdHRyTWFwIiwiaGludCIsIm5hbWVzcGFjZSIsInN1cGVycm9sZSIsInN1YnJvbGUiLCJidW5kbGUiLCJub2NvbXBvc2UiLCJ0YWdNYXAiLCJqc2VuIiwiaW1wb3J0IiwidHJlZVByb3BlcnR5IiwiYmluZGluZ1Byb3BlcnR5Iiwia2V5VmFsQXR0cmlidXRlcyIsImxpc3RBdHRyaWJ1dGVzIiwicmVtb2RlbENhbGxiYWNrIiwicmVjb21wb3NlQ2FsbGJhY2siLCJoaWRlRGF0YUJsb2NrU2NyaXB0Iiwibm9yZWNvbXBvc2UiLCJlbFRvIiwiaGFzQXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwiZGlzcG9zaXRpb24iLCJlbEZyb20iLCJhcHBlbmRPclByZXBlbmQiLCJiX2F0dHIiLCJhX2F0dHIiLCJqb2ludExpc3QiLCJzZXRBdHRyaWJ1dGUiLCJqb2ludERlZnMiLCJhdHRyaWJ1dGVzIiwiYXR0ciIsImVsVG9EZWZzIiwic2hhZG93Um9vdCIsImNoaWxkcmVuIiwibm9kZSIsImVsRnJvbURlZnMiLCJ0ZXh0Q29udGVudCIsInByZXBlbmQiLCJjbG9uZU5vZGUiLCJlbEZyb21OcyIsImVsVG9Sb2xlcyIsInJlY29tcG9zZURpcmVjdGl2ZXMiLCJyZXBsYWNlbWVudE5vZGUiLCJhcHBsaWNhYmxlQ29udGV4dFJvbGVzIiwiYXBwbGljYWJsZVJlcGxhY2VtZW50Tm9kZVJvbGVzIiwicmVwbGFjZW1lbnROb2RlUm9sZSIsIl9hcHBsaWNhYmxlQ29udGV4dFJvbGVzIiwiY29udGV4dFJvbGUiLCJDU1NFc2NhcGUiLCJDU1MiLCJlc2NhcGUiLCJzbG90Tm9kZXMiLCJjb250ZXh0U2VsZWN0b3IiLCJzbG90Tm9kZVNlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsImNsb3Nlc3QiLCJyZXBsYWNlV2l0aCIsImFwcGVuZCIsInJlY29tcG9zZU5vZGVzIiwic291cmNlcyIsImNhcnJ5IiwiY29sbGVjdGlvbnMiLCJzb3VyY2UiLCJzdWJNYXRyaXgiLCJuc0tleSIsIm5zQXJyYXkiLCJuc0RyaWxsIiwiZW50ZXIiLCJlbCIsImRpcmVjdGl2ZXMiLCJkaXJlY3RpdmUiLCJmbGF0dGVuIiwiX2RpcmVjdGl2ZSIsImN1cnJlbnQiLCJleGlzdGluZyIsImlzRHVwbGljYXRlIiwib3ZlcnJpZGRlbiIsImltcG9ydGFudCIsImZhbGxiYWNrIiwiX2Fzc2VydGlvbiIsIlNjaGVtYSIsInN0ZCIsImh0bWwiLCJtb2RlbCIsInNpbmdsZXRvbiIsImNhcHRpb24iLCJjb2wiLCJjb2xncm91cCIsImRkIiwiaW1wbGljaXRSb2xlIiwiZHQiLCJmaWdjYXB0aW9uIiwibGVnZW5kIiwibGkiLCJvcHRncm91cCIsIm9wdGlvbiIsInJwIiwicnQiLCJzdW1tYXJ5IiwidHJhY2siLCJ0Ym9keSIsInRkIiwidGZvb3QiLCJ0aGVhZCIsInRyIiwiYWJiciIsImFkZHJlc3MiLCJhcmVhIiwiYXJ0aWNsZSIsImFjY2VwdGFibGVSb2xlcyIsImFzaWRlIiwiYXVkaW8iLCJiZGkiLCJiZG8iLCJibG9ja3F1b3RlIiwiYnIiLCJidXR0b24iLCJjYW52YXMiLCJjaXRlIiwiY29kZSIsImRhdGFsaXN0IiwiZGZuIiwiZGlhbG9nIiwiZGl2IiwiZGwiLCJlbSIsImVtYmVkIiwiZmllbGRzZXQiLCJmaWd1cmUiLCJmb290ZXIiLCJmb3JtIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2IiwiaGVhZGVyIiwiaGdyb3VwIiwiaHIiLCJpZnJhbWUiLCJpbWciLCJpbnB1dCIsImlucyIsImtiZCIsImxhYmVsIiwibWFpbiIsIm1hcmsiLCJtYXRoIiwibWVudSIsIm5hbWVzIiwibWV0ZXIiLCJuYXYiLCJub3NjcmlwdCIsIm9sIiwib3V0cHV0IiwicGljdHVyZSIsInByZSIsInByb2dyZXNzIiwicSIsInJ1YnkiLCJzYW1wIiwic2NyaXB0Iiwic2VjdGlvbiIsInNlbGVjdCIsInNsb3QiLCJzbWFsbCIsInNwYW4iLCJzdHJvbmciLCJzdHlsZSIsInN2ZyIsInRhYmxlIiwidGVtcGxhdGUiLCJ0ZXh0YXJlYSIsInRpbWUiLCJ0aXRsZSIsInUiLCJ1bCIsInZhciIsInZpZGVvIiwid2JyIiwiYXJpYSIsImJhbm5lciIsImNvbnRlbnRpbmZvIiwiY29tcGxlbWVudGFyeSIsIm5hdmlnYXRpb24iLCJsaXN0aXRlbSIsImVsVGFnTmFtZSIsIm5vZGVOYW1lIiwiZXhwYW5kUnVsZXMiLCJyb2xlSW5jbHVzaXZlIiwiZWxTY2hlbWEiLCJjdXJyZW50RWxDYXRlZ29yaWVzIiwicm9sZSIsInZhbGlkIiwiY29udGV4dE1vZGVsIiwiSFRNTEVsZW1lbnQiLCJnZXRDb250ZW50TW9kZWxGb3IiLCJub2RlQ2F0ZWdvcmllcyIsImdldENhdGVnb3JpZXNGb3IiLCJhbGxvd2VkTm9kZSIsImRpc2FsbG93ZWROb2RlIiwic2NvcGUiLCJub2RlU2NoZW1hIiwiY29udGV4dENhdGVnb3JpZXMiLCJwYXJlbnROb2RlIiwiYXNzZXJ0Tm9kZUJlbG9uZ3NJbkNvbnRlbnRNb2RlbCIsInJ1bGVzIiwicmxlcyIsImNhdGVnb3JpZXMiLCJydWxlIiwiV2luZG93IiwicXVlcnlTZWxlY3RvciIsInJvbGVzIiwidHJlZSIsImdldE5vZGVzIiwibm9kZXNIaW50Iiwibm9kZU5hbWVzIiwiZ2V0RXhwbGljaXROb2RlIiwiZ2V0SW1wbGljaXROb2RlIiwiYWRkTm9kZSIsIl9vYmpGcm9tIiwicmVxdWVzdE5vZGVOYW1lIiwicm9sZWNhc2UiLCJtYXRjaGVkTm9kZSIsImNsb3Nlc3RTdXBlciIsIl9tYXRjaGVkTm9kZSIsImNsb3Nlc3RTdXBlclNlbGVjdG9yIiwibm9kZVNlbGVjdG9yIiwiaXNTYW1lTm9kZSIsInRyaWVzIiwic2NoZW1hIiwic2VsZWN0b3IiLCJ0YWduYW1lIiwidHJpZSIsImFzc2VydE5vZGVCZWxvbmdzSW5TY29wZUFzIiwibm9kZUNvbXBvbmVudCIsImZhY3RvcnkiLCJfbm9kZSIsImRlc2NlbmRhbnRQYXJhbXMiLCJkaXNjb25uZWN0ZWRDYWxsYmFjayIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJjYWxsZWQiLCJtdXRhdGlvbnMiLCJyZW1vdmVkTm9kZXMiLCJjaGlsZExpc3QiLCJmcm9tIiwiYWRkRXZlbnRMaXN0ZW5lciIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsIm5hbWVzcGFjZVBhcnNlIiwicm9hZG1hcCIsIm5hbWVzcGFjZVN0ciIsInN1Ym5hbWVzcGFjZSIsInBhcnNlTmFtZXNwYWNlIiwiZXZhbHVhdGlvbkNvbnRleHQiLCJleGl0cyIsImF1dG9FdmFsIiwibmV3U3RhdGUiLCJvbGRTdGF0ZSIsImV2YWxSZXR1cm4iLCJkYXRhQmxvY2tTY3JpcHQiLCJkaXJlY3RpdmVzUHVzaCIsImluaXRpYWxSZW5kZXJpbmciLCJyZW1vdmUiLCJjaGFuZ2VzIiwicG9wdWxhdGUiLCJzcmNNb2RlbCIsIm5vZGVOYW1lc3BhY2VBcnJheSIsInNyY01vZGVsS2V5cyIsImN1cnJlbnROb2RlTmFtZXMiLCJleGlzdGluZ05vZGUiLCJzcmNJdGVtIiwiaXNOZXdOb2RlIiwibm9kZU5hbWVzcGFjZUFycmF5Q29weSIsIm5vZGVFbCIsImZvbGxvd2luZyIsImxhc3RSZWZlcmVuY2UiLCJhZnRlciIsImxvb3AiLCJfbm9kZU5hbWUiLCJiZWZvcmUiLCJkZXN0cm95IiwidW5iaW5kIiwidGhlbiIsImNhdGNoIiwiYmluZGluZyIsImNvbnRleHRXaW5kb3ciLCJidW5kbGVzQ2FsbGJhY2siLCJjdXN0b21FbGVtZW50cyIsIkhUTUxUZW1wbGF0ZUVsZW1lbnQiLCJvbGRWYWx1ZSIsImxvYWQiLCJzcmMiLCJjb250ZW50IiwiY29uc29sZSIsIndhcm4iLCJmZXRjaCIsIm9rIiwidGV4dCIsInJlamVjdCIsInN0YXR1c1RleHQiLCJpbm5lckhUTUwiLCJkaXNwYXRjaEV2ZW50IiwiYnViYmxlcyIsImVycm9yIiwic2V0VGltZW91dCIsImV4dGVuZHMiLCJkZWZpbmVCdW5kbGVFbGVtZW50cyIsImNvbnRlbnRMb2FkZWRQcm9taXNlIiwicmVzb2x2ZSIsImRvY3VtZW50IiwicmVhZHlTdGF0ZSIsImJ1bmRsZUVsZW1lbnRzIiwiYnVuZGxlcyIsImxvYWRpbmdCdW5kbGVzIiwicmVhZHlCdW5kbGVzIiwicGFzc2VzIiwiZmFpbHVyZXMiLCJsb2FkaW5nQnVuZGxlc1Byb21pc2UiLCJmZXRjaGVkQnVuZGxlcyIsIndhcm5lZEVhcmx5QnVuZGxlQWNjZXNzIiwicHJvbWlzZVJlY2lldmVyIiwiYW50aWN5Y2xpY0J1bmRsZXNRdWVyeSIsImJ1bmRsZU1hdHJpeCIsInN1cGVyRWwiLCJidW5kbGVJbmRleCIsIl9uYW1lc3BhY2UiLCJmaW5kIiwicmVjb21wb3NlIiwibWVzc2FnZSIsImNyZWF0ZUJ1bmRsZU1hdHJpeCIsInByb2Nlc3NlZCIsInNob3VsZFJlc29sdmUiLCJyZXBsYWNlbWVudCIsIm5hbWVzcGFjZUF0dHIiLCJfX25hbWVzcGFjZSIsInJlc29sdmVkIiwiYXR0YWNoU2hhZG93IiwiaW5ubmVyVGV4dCIsImRlZmluZUltcG9ydEVsZW1lbnRzIiwid2FpdEZvckJ1bmRsZXMiLCJjb250ZXh0RG9jdW1lbnQiLCJ0ZW1wIiwiY3JlYXRlRWxlbWVudCIsImlubmVySHRtbCIsImZpcnN0Q2hpbGQiLCJzdXBlck5zIiwiaXNJbXBvcnQiLCJfZWwiLCJ3aW5kb3ciLCJwYXRobmFtaW5nIiwiZ2V0UHJvcHMiLCJ1cmxPYmoiLCJ1cmxQcm9wZXJ0aWVzIiwiX3N0cmljdEV2ZW4iLCJpdGVtIiwicGFyc2VVcmwiLCJ2YWxzIiwiX3ZhbHMiLCJzZWFyY2htYXAiLCJwYXRobmFtZSIsInBhdGhtYXAiLCJwYXRoc3BsaXQiLCJocmVmIiwiX3NlYXJjaCIsIl9zZWFyY2htYXAiLCJfcGF0aG5hbWUiLCJfcGF0aG1hcCIsIl9wYXRoc3BsaXQiLCJfaHJlZiIsImlzU2VhcmNobWFwU2FtZSIsImYiLCJ0b1NlYXJjaCIsInRvU2VhcmNobWFwIiwiaXNQYXRobWFwU2FtZSIsImlzUGF0aHNwbGl0U2FtZSIsInRvUGF0aG5hbWUiLCJ0b1BhdGhtYXAiLCJ0b1BhdGhzcGxpdCIsIm9yaWdpbiIsImxvY2F0aW9uIiwiaGlzdG9yeSIsInJlcGxhY2VTdGF0ZSIsInB1c2hTdGF0ZSIsImFuY2hvciIsImUyIiwicm91dGUiLCJyZXF1ZXN0IiwiZm9yd2FyZCIsImJhY2siLCJnbyIsInBhdGhuYW1lT3JQYXRoc3BsaXQiLCJwYXRoQXJyIiwicGF0aFN0ciIsIl9wYXRobmFtZXMiLCJwYXRoSXRlbSIsInBhdGhuYW1lT3JQYXRobWFwIiwicmVmZXJlbmNlVXJsIiwicGF0aG1hcE9yUGF0aHNwbGl0IiwibWF0Y2hlZEl0ZW1zIiwibWV0aG9kIiwiRWxlbWVudCIsIm1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm93bmVyRG9jdW1lbnQiLCJ0eHQiLCJjaGFyQXQiLCJmcm9tU3RhcnQiLCJjdXN0b21EYXRhc2V0cyIsIml0bXMiLCJyZXF1ZXN0T3JQYXlsb2FkIiwicGF5bG9hZCIsInN1YlZhbE11dGF0aW9uIiwidmFsT3JNdXRhdGlvbiIsImN1cnJlbnRWYWwiLCJjdXJyZW50VmFsQXJyYXkiLCJyZW1vdmVBdHRyaWJ1dGUiLCJSZWZsb3ciLCJyZWFkQ2FsbGJhY2tzIiwid3JpdGVDYWxsYmFja3MiLCJfcnVuIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwib25yZWFkIiwid2l0aFByb21pc2UiLCJvbndyaXRlIiwiY3ljbGUiLCJyZWFkIiwid3JpdGUiLCJwcmV2VHJhbnNhY3Rpb24iLCJyZWFkUmV0dXJuIiwiY2FsbFdyaXRlIiwid3JpdGVSZXR1cm4iLCJyZXBlYXRUcmFuc2FjdGlvbiIsInN0eWxlcyIsInByZWZpeCIsImlubmVyVGV4dCIsImRlbGltaXRlciIsImdldENvbXB1dGVkU3R5bGUiLCJkb2N1bWVudEVsZW1lbnQiLCJPbGluayIsImNzcyIsImFwaSIsImNhbWVsQ2FzZWRQcm9wIiwidmVuZG9yUHJlZml4IiwidmFsc0xpc3QiLCJwcm9wc0xpc3QiLCJwcm9wcyIsIm5vcm1hbFByb3AiLCJ3aXRoVmVuZG9yVmVyc2lvbiIsInZlbmRvcml6ZSIsInZlbmRvcml6ZWRQcm9wIiwiY2FsbENhbGxiYWNrIiwiVHJhbnNmb3JtUnVsZSIsInRyYW5zZm9ybVJ1bGVzIiwicm91bmQiLCJyMmQiLCJyYWRpYW5zIiwiZGVnIiwiUEkiLCJ0cmFuc2Zvcm1TdHIiLCJXZWJLaXRDU1NNYXRyaXgiLCJyZGlnaXQiLCJzdG9tIiwiQSIsIkIiLCJDIiwiRCIsInNjYWxlWCIsInNxcnQiLCJza2V3Iiwic2NhbGVZIiwidHJhbnNsYXRlIiwic2NhbGUiLCJyb3RhdGUiLCJhdGFuMiIsImF0YW4iLCJwc3VlZG8iLCJydWxlQ2FsbGJhY2siLCJyYXdQcm9wIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIm5hbWVPclByb3BzIiwiZGVzdHJ1Y3RhYmxlcyIsImluc2V0IiwibWFyZ2luIiwicGFkZGluZyIsImRlc3RydWN0YWJsZVByb3AiLCJtZWFuaW5nIiwiYXV0b3B4IiwicHJvcHNUb1JlYWQiLCJyZWFkQ2FsbGJhY2siLCJpbmxpbmVTYXZlcG9pbnQiLCJjb21wdXRlZFZhbHVlcyIsIndyaXRlQ2FsbGJhY2siLCIkc2F2ZXBvaW50cyIsInJlYWRlckRpc3Bvc2l0aW9uIiwic2F2ZXBvaW50IiwiZ2V0Um9sbGJhY2tEYXRhIiwiY3VycmVudFJlYWQiLCJzYXZlcG9pbnRzIiwidG9TYXZlcG9pbnQiLCJmcm9tU2F2ZXBvaW50IiwiJGludGVyc2VjdGlvbiIsImxlZnQiLCJyZWN0MSIsInJlY3QyIiwidG9wIiwicmlnaHQiLCJ3aWR0aCIsImJvdHRvbSIsImhlaWdodCIsImxlZnRsaW5lIiwicmlnaHRsaW5lIiwibWluIiwidG9wbGluZSIsImJvdHRvbWxpbmUiLCJkZWx0YSIsIiRkZWx0YSIsIngiLCJ5IiwieiIsInBvdyIsIndpdGhBbmdsZSIsImRlbHRhQW5nbGUiLCJzaXplIiwib2Zmc2V0T3JpZ2luIiwicmVjdFByb3BzIiwiX2lzRWxlbWVudCIsIkhUTUxEb2N1bWVudCIsIl9yZWN0IiwiY2xpZW50WCIsImNsaWVudFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBhZ2VYIiwicGFnZVkiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJwYWdlWE9mZnNldCIsInBhZ2VZT2Zmc2V0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidG9KU09OIiwib2Zmc2V0UGFyZW50IiwiY29udGV4dE9mZnNldCIsImludGVyc2VjdGlvbiIsInVzaW5nIiwiJHJlY3QiLCJzdGFydCIsImVuZCIsIiRjb29yZHMiLCIkYWxpZ25tZW50IiwiYXhpcyIsInJlZ1BsYWNlbWVudCIsInJlZ01vZGlmaWVycyIsInJlY3QxTGVuZ3RoIiwia2V5d29yZCIsInByZWRpY2F0ZXMiLCJtb2RpZmllcnMiLCJ0b3RhbCIsIm1vZGlmaWVyIiwicGVyY2VudGFnZUNvbnRleHQiLCJhbGlnbm1lbnQiLCJjb29yZHNBdFJlY3QiLCJlbDIiLCIkY29vcmRzRm9ybWF0dGVkIiwidG8iLCJhY3RpdmVUcmFuc2Zvcm0iLCJhYnMiLCIkb2Zmc2V0cyIsImFsdGVybmF0ZUFuY2hvcnMiLCIkb2Zmc2V0c0Zvcm1hdHRlZCIsImN1cnJlbnRPZmZzZXRzIiwiaW52ZXJzZXMiLCJhbmNob3JzIiwiaW50ZXJzZWN0aW9uV2l0aEFuY2hvciIsInBvc2l0aW9uIiwicG9zaXRpb25pbmdPZmZzZXRzIiwidmlld3BvcnQiLCJzY3JvbGxBbmNob3IiLCJleGNsdWRlU3RhdGljUGFyZW50Iiwib3ZlcmZsb3dSZWdleCIsInBhcmVudCIsInBhcmVudEVsZW1lbnQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WSIsIm92ZXJmbG93WCIsInNjcm9sbFBhcmVudCIsInNjcm9sbEhlaWdodCIsImNsaWVudEhlaWdodCIsInNjcm9sbHMiLCJjdXJyZW50U2Nyb2xsIiwic2Nyb2xsTGVmdCIsInNjcm9sbFRvcCIsImF4aXNQcm9wIiwiY2FjaGVLZXkiLCJub0NhY2hlIiwic3R5bGVzaGVldEtleWZyYW1lc0NhY2hlIiwiYWxsS2V5ZnJhbWVzIiwic3R5bGVzaGVldHMiLCJzdHlsZVNoZWV0cyIsInN0eWxlc2hlZXRDYWxsYmFjayIsInN0eWxlc2hlZXQiLCJjc3NSdWxlcyIsInJ1bGVEZWZpbml0aW9uIiwicmV2ZXJzZWQiLCJzdHlsZXNoZWV0UnVsZUNhbGxiYWNrIiwiQ1NTUnVsZSIsIktFWUZSQU1FU19SVUxFIiwia2V5ZnJhbWVzIiwia2V5ZnJhbWVSdWxlIiwia2V5ZnJhbWUiLCJwYXJzZVJ1bGVzIiwiY3NzVGV4dCIsImtleVRleHQiLCJvZmZzZXRzIiwibm9ybWFsaXplIiwibm9ybWFsaXplVG9XQUFQSSIsIl9rZXlmcmFtZSIsIm9mZnNldCIsInBhcnNlS2V5ZnJhbWVzIiwiYW5pbWF0aW9uUHJvcHMiLCJwcmVmIiwiZWFzaW5nIiwiZmlsbCIsIml0ZXJhdGlvbnMiLCJJbmZpbml0eSIsIkFuaW0iLCJlZmZlY3QiLCJyZWFkeUNhbGxiYWNrcyIsImZpbmlzaENhbGxiYWNrcyIsImNhbmNlbENhbGxiYWNrcyIsImR1cmF0aW9uIiwiZmlyc3RGcmFtZSIsImxhc3RGcmFtZSIsInRyYW5zZm9ybSIsImFuaW0iLCJhbmltYXRlIiwib25maW5pc2giLCJjYW5jZWxGb3JDc3MiLCJjYW5jZWwiLCJvbmNhbmNlbCIsImNyZWF0ZUNhbGxiYWNrIiwic3VjY2VzIiwiY3VycmVudFRpbWUiLCJyZWFkeSIsInBsYXkiLCJwYXVzZSIsImZpbmlzaCIsImlzT2JqZWN0QW5kT25seUxhc3RLZXlmcmFtZSIsInYiLCJpc0FycmF5QnV0RW1wdHlGaXJzdEtleWZyYW1lIiwiYW5pbWF0aW9uTmFtZSIsImtleWZyYW1lc1dpdGhBdXRvU2l6ZXMiLCJfZmluZCIsImRlZXAiLCJzdWJLZXkiLCJwcmV2IiwiY3VyciIsIkN1c3RvbUV2ZW50cyIsIk11bHRpdGFwIiwiZXZlbnROYW1lIiwiaGFtbWVydGltZSIsImFsbFNldHVwIiwicmVjb2duaXplcnMiLCJldmVudHMiLCJ0YXBUeXBlIiwicmVjb2duaXplciIsIkhhbW1lciIsIlRhcCIsImV2ZW50IiwidGFwcyIsImFkZCIsInJlY2d6ciIsInJlY2d6cnMiLCJyZWNvZ25pemVXaXRoIiwicmVjZ3pyMiIsInJlY2d6cnMyIiwicmVxdWlyZUZhaWx1cmUiLCJoYW5kbGVyc0xpc3QiLCJNYW5hZ2VyIiwiVFlQRSIsIlVzZXJFdmVudCIsInNldHVwIiwidmFsaWRhdGUiLCJyZWNvZ25pemVHZXN0dXJlIiwiZ2VzdHVyZU5hbWUiLCJtYWluR2VzdHVyZU5hbWUiLCJyZW1vdmVMaXN0ZW5lciIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIl9zZXR1cCIsImdlc3R1cmVJbmRleCIsInByZXNzIiwicGluY2giLCJwYW4iLCJzd2lwZSIsInRhcCIsIl9fcmV0IiwiZGF0YXNldCIsIl9fY3VzdG9tRGF0YXNldEtleSIsImN1c3RvbURhdGFzZXQiLCJfX2VsIiwiYXR0clN5bmMiLCJjc3NBc3luYyIsInJlZlBvaW50IiwidHJhbnMiLCJsb2ciLCJzY3JvbGxUbyIsImNvbXBvbmVudCIsInJlZ2lzdHJ5IiwiY29uc3RydXRvciIsImluc3RhbmNlIiwic2luZ2xldG9uSW5zdGFuY2UiLCJzaW5nbGV0b25JbnN0YW5jZXMiLCJpbnN0IiwiYWN0aXZlIiwiYWN0aXZhdGluZyIsImRlYWN0aXZhdGluZyIsIml0ZW1zT2Zmc2V0IiwidGFrZVN0YXRzIiwic3RhdGVOYW1lIiwiaXNNdWx0aXBsZSIsInBhdGhUb1N0YXRlIiwiZ2V0SXRlbXNBcnJheSIsInNldEFjdGl2ZVN0YXRlIiwiZmlyc3QiLCJsYXN0IiwicHJlY2VkaW5nIiwiZW50cnlDbGFzcyIsIkl0ZW0iLCJUcmFwcyIsImNsYXNzZXMiLCJzdXBlcnNNYXAiLCJNaXhpbiIsIl9jbGFzcyIsInN1cGVycyIsInN1cGVyc1JldHVyblZhbHVlcyIsInN1cHIiLCJDb2xsZWN0aW9uIiwiYWN0aXZlU3RhdGUiLCJhY3RpdmVDYWxsYmFjayIsImluaXRDYWxsYmFjayIsInN1YnJvdXRpbmdLZXlzIiwic3Vicm91dGluZ0tleSIsInN1YnJvdXRpbmdLZXlGb3J3YXJkIiwicm91dGVySW5zdGFuY2UiLCJSZWdpc3RyeSIsInN1YnJvdXRpbmdLZXlUeXBlIiwib3duUGF0aCIsInN1YnJvdXRpbmdLZXlWYWwiLCJzdWJyb3V0ZXMiLCJyb3V0ZXMiLCJyb3V0ZUNsYXNzIiwiY3JlYXRlRW50cmllcyIsImFjdGl2ZVN1YnJvdXRlIiwiZGlzcGxheSIsImNyZWF0ZVJvdXRlcyIsImFuaW1hdGlvbnMiLCJhZGRDYWxsYmFjayIsInN0b3BwZWQiLCJyZXMiLCJyZWoiLCJhbHJlYWR5UmVzb2x2ZWQiLCJhbHJlYWR5UmVqZWN0ZWQiLCJoYW5kbGVGaW5pc2giLCJoYW5kbGVDYW5jZWwiLCJvbmx5IiwiZXhjZXB0IiwiZWFjaCIsInNlZWsiLCJfb25QYW5TdGFydCIsIl9vblBhbk1vdmUiLCJfb25QYW5FbmQiLCJyZWdpb24iLCJhbmltUGFyYW1zIiwiX2luaGVyaXQiLCJhbmltYXRpb24iLCJtb3ZlYWJsZURpc3RhbmNlIiwiY3VycmVudERpc3RhbmNlIiwiJHBhcmFtcyIsInN0YXJ0dXBSZXNldCIsInN0YXJ0dXAiLCJkZWx0YVgiLCJyZWdpc3RlciIsIm5vd1BsYXlpbmciLCJUaW1lbGluZSIsInRpbWluZyIsInF1ZXVlIiwibm93UGxheWluZ0FkZCIsIm5vd1BsYXlpbmdFZmZlY3QiLCJjcmVhdGVBbmltYXRpb24iLCJjb21wdXRlIiwibm93UGxheWluZ1BhcmFtcyIsImxhZyIsImxhZ0FmdGVyIiwibGFzdEFuaW0iLCJkZWxheSIsIndpdGhEZWxheXMiLCJlbmREZWxheSIsInJldmVyc2VMaXN0IiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJvbmNlIiwib25lUGVuZGluZ0NhbGwiLCJ0YXJnZXRzT2JqIiwicm9vdCIsInRha2VSZWNvcmRzIiwiY29udGluaW91c2x5IiwiZnVsZmlsUGVuZGluZ0NhbGwiLCJ3YWl0aW5nIiwicGF1c2VkIiwicm9vdFJlY3QiLCJjaGFuZ2VJblJvb3QiLCJwcmV2aW91c1Jvb3RSZWN0IiwidE9iaiIsIiRwcm94aW1pdHkiLCJpdGVtUmVjdCIsImNoYW5nZUluSXRlbSIsInByZXZpb3VzSXRlbVJlY3QiLCJjdXJyZW50UHJveGltaXR5IiwicHJldmlvdXNQcm94aW1pdHkiLCJkaXN0YW5jZUJlZm9yZSIsImRpc3RhbmNlQWZ0ZXIiLCJyZWN0Mkxlbmd0aCIsImFkdmFuY2VtZW50IiwicGVyY2VudGFnZUluIiwicGVyY2VudGFnZU91dCIsInBlcmNlbnRhZ2VQYXNzIiwidG90YWxEaXN0YW5jZSIsInBlcmNlbnRhZ2VDb250YWluZWQiLCJsZW5ndGhEaWZmZXJlbmNlIiwiUmVzaXplT2JzZXJ2ZXIiLCJfZW50cnkiLCJjb250ZW50UmVjdCIsImNvbnRlbnRCb3hTaXplIiwiaW5saW5lU2l6ZSIsImJsb2NrU2l6ZSIsImJvcmRlckJveFNpemUiLCJhcHAiLCJwYWdlIiwiY2h0bWwiLCJzbGlkZXMiLCJkZXNjIiwicmVmbGV4IiwicGFnZVRpdGxlIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElB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QUFNLENBQ0Z6cEIsTUFBTSx5QkFHZHZLLEtBQU0sQ0FDRnVLLE1BQU8sa0RBQ1B5cEIsS0FBTSxDQUNGenBCLE1BQU0sMkJBUXpCLEdBQU11ZCxNQUFNLEtBQ0wsR0FBYXZvQixJQUFJODBCLFVBQVl2aEIsU0FBU2xHLGNBQWMsU0FDcERtbkIsR0FBSXJjLE1BQU0sR0FDVixHQUFNNUksS0FBSyxRQUFRcHZCLEtBQUtxMEMiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJvYmplY3RcIi5cclxuICogVGhpcyBob2xkcyB0cnVlIGZvciBhbnl0aGluZyBvYmplY3QsIGluY2x1ZGluZyBidWlsdC1pbnMuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgfHwgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJhcnJheVwiLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwic3RyaW5nXCIuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIHVuZGVmaW5lZCBvciBpcyBvZiB0eXBlIFwidW5kZWZpbmVkXCIuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCAmJiAodmFsID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyB1bmRlZmluZWQgb3IgaXMgbnVsbC5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiB2YWwgPT09IG51bGwgfHwgdmFsID09PSAnJztcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgcHVyZSBvYmplY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiAhQXJyYXkuaXNBcnJheSh2YWwpICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIHZhbDtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzVHlwZUFycmF5IGZyb20gJy4uL2pzL2lzVHlwZUFycmF5LmpzJztcclxuaW1wb3J0IF9pc0VtcHR5IGZyb20gJy4uL2pzL2lzRW1wdHkuanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJy4uL2pzL2lzT2JqZWN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiBDYXN0cyBhbiBhcnJheS1saWtlIG9iamVjdCB0byBhbiBhcnJheS5cclxuICpcclxuICogQHBhcmFtIG1peGVkIFx0dmFsXHJcbiAqIEBwYXJhbSBib29sXHQgXHRjYXN0T2JqZWN0XHJcbiAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCwgY2FzdE9iamVjdCA9IHRydWUpIHtcclxuXHRpZiAoX2lzQXJyYXkodmFsKSkge1xyXG5cdFx0cmV0dXJuIHZhbDtcclxuXHR9O1xyXG5cdGlmICghY2FzdE9iamVjdCAmJiBfaXNPYmplY3QodmFsKSkge1xyXG5cdFx0cmV0dXJuIFt2YWxdO1xyXG5cdH07XHJcblx0aWYgKHZhbCAhPT0gZmFsc2UgJiYgdmFsICE9PSAwICYmIF9pc0VtcHR5KHZhbCkpIHtcclxuXHRcdHJldHVybiBbXTtcclxuXHR9O1xyXG5cdGlmIChfaXNUeXBlQXJyYXkodmFsKSkge1xyXG5cdFx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHZhbCk7XHJcblx0fTtcclxuXHRpZiAoX2lzT2JqZWN0KHZhbCkpIHtcclxuXHRcdHJldHVybiBPYmplY3QudmFsdWVzKHZhbCk7XHJcblx0fTtcclxuXHRyZXR1cm4gW3ZhbF07XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNOdWxsIGZyb20gJy4vaXNOdWxsLmpzJztcclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICcuL2lzVW5kZWZpbmVkLmpzJztcclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnLi9pc1R5cGVPYmplY3QuanMnO1xyXG5cclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBlbXB0eSBpbiBpdHMgb3duIHR5cGUuXHJcbiAqIFRoaXMgaG9sZHMgdHJ1ZSBmb3IgTlVMTHMsIFVOREVGSU5FRCwgRkFMU0UsIDAsXHJcbiAqIG9iamVjdHMgd2l0aG91dCBrZXlzLCBlbXB0eSBhcnJheXMuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gX2lzTnVsbCh2YWwpIHx8IF9pc1VuZGVmaW5lZCh2YWwpIHx8IHZhbCA9PT0gZmFsc2UgfHwgdmFsID09PSAwIFxyXG5cdFx0fHwgKF9pc1R5cGVPYmplY3QodmFsKSAmJiAhT2JqZWN0LmtleXModmFsKS5sZW5ndGgpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzU3RyaW5nIGZyb20gJy4vaXNTdHJpbmcuanMnO1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJy4vaXNVbmRlZmluZWQuanMnO1xyXG5cclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBcImFycmF5LWxpa2VcIi5cclxuICogVGhpcyBob2xkcyB0cnVlIGZvciBhbnl0aGluZyB0aGF0IGhhcyBhIGxlbmd0aCBwcm9wZXJ0eS5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuICFfaXNTdHJpbmcodmFsKSAmJiAhX2lzVW5kZWZpbmVkKHZhbC5sZW5ndGgpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSAnLi4vanMvaXNTdHJpbmcuanMnO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybiBhbiBvYmplY3QgZm9yIHRoZSBnaXZlbiBwYWlyKHMpIG9mIGlucHV0LlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF5IFx0XHRcdGtleVxyXG4gKiBAcGFyYW0gbWl4ZWR8YXJyYXlcdFx0XHR2YWwgXHJcbiAqXHJcbiAqIEByZXR1cm4gb2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihrZXksIHZhbCA9IG51bGwpIHtcclxuXHR2YXIgb2JqID0ge307XHJcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcclxuXHRcdGlmIChfaXNTdHJpbmcoa2V5KSkge1xyXG5cdFx0XHRvYmpba2V5XSA9IHZhbDtcclxuXHRcdH0gZWxzZSBpZiAoX2lzQXJyYXkoa2V5KSAmJiBfaXNBcnJheSh2YWwpKSB7XHJcblx0XHRcdGtleS5mb3JFYWNoKChrLCBpKSA9PiBvYmpba10gPSB2YWxbaV0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gb2JqO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwic3RyaW5nXCIgb3IgYSBudW1lcmljIHN0cmluZy5cclxuICogVGhpcyBob2xkcyB0cnVlIGZvciBib3RoIG51bWJlcnMgYW5kIG51bWVyaWMgc3RyaW5ncy5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiB2YWwgIT09IHRydWUgJiYgdmFsICE9PSBmYWxzZSAmJiB2YWwgIT09IG51bGwgJiYgdmFsICE9PSAnJyAmJiAhaXNOYU4odmFsICogMSk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNUeXBlRnVuY3Rpb24gZnJvbSAnLi9pc1R5cGVGdW5jdGlvbi5qcyc7XHJcblxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJmdW5jdGlvblwiLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0IFx0XHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gX2lzVHlwZUZ1bmN0aW9uKHZhbCkgfHwgKHZhbCAmJiB7fS50b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IGZ1bmN0aW9uXScpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwiZnVuY3Rpb25cIi5cclxuICogVGhpcyBob2xkcyB0cnVlIGZvciBib3RoIHJlZ3VsYXIgZnVuY3Rpb25zIGFuZCBjbGFzc2VzLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJztcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnLi4vanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc051bWVyaWMgZnJvbSAnLi4vanMvaXNOdW1lcmljLmpzJztcclxuXHJcbi8qKlxyXG4gKiBMb29wcyB0aHJ1IG9iaiBmbGF0bHkgd2l0aCBhIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gKiBTdG9wcyB3aGVuIGNhbGxiYWNrIHJldHVybnMgYSBub24tdW5kZWZpbmVkIHZhbHVlLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0IFx0XHRcdG9iaiBcdFx0XHRUaGUgYXJyYXkgb3Igb2JqZWN0IHRvIGl0ZXJhdGUuXHJcbiAqIEBwYXJhbSBmdW5jdGlvbiBcdFx0XHRcdGNhbGxiYWNrIFx0XHRUaGUgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEByZXR1cm4gbWl4ZWR8bnVsbFx0XHRcdEFueSBub24tbnVsbCByZXR1cm4gZnJvbSBjYWxsYmFja1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqLCBjYWxsYmFjaykge1xyXG5cdHZhciByZXR1cm5WYWx1ZSA9IHVuZGVmaW5lZDtcclxuXHRpZiAoX2lzVHlwZU9iamVjdChvYmopKSB7XHJcblx0XHRPYmplY3Qua2V5cyhvYmopLmZvckVhY2goKGssIGkpID0+IHtcclxuXHRcdFx0aWYgKHJldHVyblZhbHVlICE9PSBmYWxzZSkge1xyXG5cdFx0XHRcdHJldHVyblZhbHVlID0gY2FsbGJhY2soX2lzTnVtZXJpYyhrKSA/IHBhcnNlRmxvYXQoaykgOiBrLCBvYmpba10sIGkpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcblx0cmV0dXJuIHJldHVyblZhbHVlO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNVbmRlZmluZWQuanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2VhY2ggZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZWFjaC5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBFdmVudCBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogSW5pdGlhbGl6ZXMgdGhlIGluc3RhbmNlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGFycmF5fG9iamVjdFx0XHR0YXJnZXRcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdFx0ZGV0YWlsc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IodGFyZ2V0LCBkZXRhaWxzID0ge30pIHtcclxuXHRcdHRoaXMuJCA9IHt9O1xyXG5cdFx0dGhpcy4kLnRhcmdldCA9IHRhcmdldDtcclxuXHRcdHRoaXMuJC5kZXRhaWxzID0gZGV0YWlscztcclxuXHRcdHRoaXMuJC5wcm9wYWdhdGlvblN0b3BwZWQgPSBmYWxzZTtcclxuXHRcdHRoaXMuJC5kZWZhdWx0UHJldmVudGVkID0gZmFsc2U7XHJcblx0XHR0aGlzLiQucHJvbWlzZXNJbnN0YW5jZSA9IG51bGw7XHJcblx0XHR0aGlzLiQucHJvbWlzZXMgPSBbXTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRfZWFjaChkZXRhaWxzLCAocHJvcCwgdmFsdWUpID0+IHtcclxuXHRcdFx0aWYgKHByb3AgIT09ICckJykge1xyXG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wLCB7dmFsdWV9KTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBHZXRzIHRoZSBcInRhcmdldFwiIG9iamVjdC5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYXJyYXl8b2JqZWN0XHJcblx0ICovXHJcblx0Z2V0IHRhcmdldCgpIHtcclxuXHRcdHJldHVybiB0aGlzLiQudGFyZ2V0O1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyB0aGUgXCJkZXRhaWxzXCIgb2JqZWN0LlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBvYmplY3RcclxuXHQgKi9cclxuXHRnZXQgZGV0YWlscygpIHtcclxuXHRcdHJldHVybiB0aGlzLiQuZGV0YWlscztcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0ICogUkVTUE9OU0UgSEFORExFUlNcclxuXHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiBTdG9wcyB0aGUgZXZudCBmcm9tIHJlYWNoaW5nIG90aGVyIGxpc3RlbmVycy5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYm9vbFxyXG5cdCAqL1xyXG5cdHN0b3BQcm9wYWdhdGlvbigpIHtcclxuXHRcdHRoaXMuJC5wcm9wYWdhdGlvblN0b3BwZWQgPSB0cnVlO1xyXG5cdH1cclxuXHRcdFxyXG5cdC8qKlxyXG5cdCAqIChSZWFkb25seSkgdGVsbHMgaWYgc3RvcFByb3BhZ2F0aW9uKCkgaGFzIGJlZW4gY2FsbGVkLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBib29sXHJcblx0ICovXHJcblx0Z2V0IHByb3BhZ2F0aW9uU3RvcHBlZCgpIHtcclxuXHRcdHJldHVybiB0aGlzLiQucHJvcGFnYXRpb25TdG9wcGVkO1xyXG5cdH1cclxuXHRcdFxyXG5cdC8qKlxyXG5cdCAqIFNldHMgYSBkaXNwb3NpdGlvbiB0aGF0IGFza3MgZXZlbnQgaW5pdGlhdG9yIG5vdCB0b1xyXG5cdCAqIHByb2NlZWQgd2l0aCBkZWZhdWx0IGFjdGlvbi5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdHByZXZlbnREZWZhdWx0KCkge1xyXG5cdFx0dGhpcy4kLmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xyXG5cdH1cclxuXHRcdFxyXG5cdC8qKlxyXG5cdCAqIChSZWFkb25seSkgdGVsbHMgaWYgcHJldmVudERlZmF1bHQoKSBoYXMgYmVlbiBjYWxsZWQuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGJvb2xcclxuXHQgKi9cclxuXHRnZXQgZGVmYXVsdFByZXZlbnRlZCgpIHtcclxuXHRcdHJldHVybiB0aGlzLiQuZGVmYXVsdFByZXZlbnRlZDtcclxuXHR9XHJcblx0XHRcclxuXHQvKipcclxuXHQgKiBTZXRzIGEgUHJvbWlzZSBkaXNwb3NpdGlvbi5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBQcm9taXNlXHRwcm9taXNlXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRwcm9taXNlKHByb21pc2UpIHtcclxuXHRcdGlmICghKHByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0V2ZW50LnByb21pc2UoKSBtdXN0IGJlIGNhbGxlZCB3aXRoIGEgUHJvbWlzZS4nKTtcclxuXHRcdH1cclxuXHRcdHRoaXMuJC5wcm9taXNlcy5wdXNoKHByb21pc2UpO1xyXG5cdFx0dGhpcy4kLnByb21pc2VzSW5zdGFuY2UgPSBudWxsO1xyXG5cdH1cclxuXHRcdFxyXG5cdC8qKlxyXG5cdCAqIChSZWFkb25seSkgcmV0dXJucyBhbGwgcHJvbWlzZXMuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIFByb21pc2V8bnVsbFxyXG5cdCAqL1xyXG5cdGdldCBwcm9taXNlcygpIHtcclxuXHRcdGlmICghdGhpcy4kLnByb21pc2VzSW5zdGFuY2UgJiYgdGhpcy4kLnByb21pc2VzLmxlbmd0aCkge1xyXG5cdFx0XHR0aGlzLiQucHJvbWlzZXNJbnN0YW5jZSA9IFByb21pc2UuYWxsKHRoaXMuJC5wcm9taXNlcyk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcy4kLnByb21pc2VzSW5zdGFuY2U7XHJcblx0fVxyXG5cdFx0XHJcblx0LyoqXHJcblx0ICogRXZhbHVhdGVzIHRoZSBnaXZlbiBkaXNwb3NpdGlvbiB2YWx1ZSBhbmRcclxuXHQgKiBjYWxscyBhbiBhcHByb3ByaWF0ZSBkaXNwb3NpdGlvbiBtZXRob2QuXHJcblx0ICpcclxuXHQgKiBAcGFyYW1zIG1peGVkIFx0cnNwbnNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdHJlc3BvbnNlKHJzcG5zKSB7XHJcblx0XHR2YXIgcHJvbXM7XHJcblx0XHR2YXIgaXNFdmVudCA9IF9pc09iamVjdChyc3BucykgJiYgIV9pc1VuZGVmaW5lZChyc3Bucy5wcm9wYWdhdGlvblN0b3BwZWQpICYmICFfaXNVbmRlZmluZWQocnNwbnMuZGVmYXVsdFByZXZlbnRlZClcclxuXHRcdGlmICgocnNwbnMgPT09IGZhbHNlKSB8fCAoaXNFdmVudCAmJiByc3Bucy5wcm9wYWdhdGlvblN0b3BwZWQpKSB7XHJcblx0XHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0XHR9IGVsc2UgaWYgKChyc3BucyA9PT0gZmFsc2UpIHx8IChpc0V2ZW50ICYmIHJzcG5zLmRlZmF1bHRQcmV2ZW50ZWQpKSB7XHJcblx0XHRcdHRoaXMucHJldmVudERlZmF1bHQoKTtcclxuXHRcdH0gZWxzZSBpZiAoKHJzcG5zIGluc3RhbmNlb2YgUHJvbWlzZSAmJiAocHJvbXMgPSByc3BucykpXHJcblx0XHR8fCAoaXNFdmVudCAmJiAocHJvbXMgPSByc3Bucy5wcm9taXNlcykpKSB7XHJcblx0XHRcdHRoaXMucHJvbWlzZShwcm9tcyk7XHJcblx0XHR9XHJcblx0fVxyXG59OyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBFdmVudCBmcm9tICcuL0V2ZW50LmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIFF1ZXJ5RXZlbnQgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBFdmVudCB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogSW5pdGlhbGl6ZXMgdGhlIGluc3RhbmNlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGFycmF5fG9iamVjdFx0XHR0YXJnZXRcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdFx0ZGV0YWlsc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IodGFyZ2V0LCBkZXRhaWxzID0ge30pIHtcclxuXHRcdHN1cGVyKHRhcmdldCwgZGV0YWlscyk7XHJcblx0fVxyXG59OyIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJudW1iZXJcIi5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiBUZWxscyBpZiBhbiBvYmplY3QgaXMgZGlyZWN0IGluc3RhbmNlIG9mIE9iamVjdC5wcm90b3R5cGUuXHJcbiAqIFF1aXRlIHVzZWZ1bCBpbiBkaWZmZXJlbnRpYXRpbmcgbmF0aXZlIG9iamVjdHMgYW5kIGNsYXNzIGluc3RhbmNlcyBmcm9tIHBsYWluIG9iamVjdHMgKHt9KS5cclxuICpcclxuICogQHBhcmFtIG9iamVjdCBcdG9ialxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iaikge1xyXG5cdHJldHVybiBfaXNPYmplY3Qob2JqKSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgdW5kZWZpbmVkIG9yIGlzIG9mIHR5cGUgXCJib29sZWFuXCIuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gdmFsID09PSB0cnVlIHx8IHZhbCA9PT0gZmFsc2U7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNOdW1iZXIgZnJvbSAnLi4vanMvaXNOdW1iZXIuanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnLi4vanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuLi9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnLi4vanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBfaXNQbGFpbk9iamVjdCBmcm9tICcuLi9qcy9pc1BsYWluT2JqZWN0LmpzJztcclxuaW1wb3J0IF9jb21wYXJlQ2FsbGJhY2sgZnJvbSAnLi9jb21wYXJlQ2FsbGJhY2suanMnO1xyXG5cclxuLyoqXHJcbiAqIEFzc2VydHMgKG1lbWJlcnMgb2YpIHRoZSBmaXJzdCB2YWx1ZSBhZ2FpbnN0IChtZW1iZXJzIG9mKSBzdWJzZXF1ZW50IHZhbHVlcy5cclxuICogQXNzZXJ0aW9uIGNvdWxkIGJlIFRSVUUsIEZBTFNFLCBvciBjdXN0b20uXHJcbiAqXHJcbiAqIEBwYXJhbSBtaXhlZCBcdFx0XHRvYmoxXHJcbiAqIEBwYXJhbSBtaXhlZCBcdFx0XHRvYmoyXHJcbiAqIEBwYXJhbSBib29sfGZ1bmN0aW9uXHRcdGFzc2VydGlvblxyXG4gKiBAcGFyYW0gaW50XHRcdFx0XHRkZXB0aFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmNvbnN0IF9ldmVuID0gZnVuY3Rpb24ob2JqMSwgb2JqMiwgYXNzZXJ0aW9uID0gdHJ1ZSwgZGVwdGggPSAxKSB7XHJcblx0aWYgKF9pc0FycmF5KG9iajEpICYmIF9pc0FycmF5KG9iajIpICYmIG9iajEubGVuZ3RoICE9PSBvYmoyLmxlbmd0aCkge1xyXG5cdFx0cmV0dXJuICFhc3NlcnRpb247XHJcblx0fVxyXG5cdGlmIChfaXNPYmplY3Qob2JqMSkgJiYgX2lzT2JqZWN0KG9iajIpKSB7XHJcblx0XHR2YXIgb2JqMUtleXMgPSBPYmplY3Qua2V5cyhvYmoxKTtcclxuXHRcdHZhciBvYmoyS2V5cyA9IE9iamVjdC5rZXlzKG9iajIpO1xyXG5cdFx0aWYgKCFvYmoxS2V5cy5sZW5ndGggJiYgIW9iajJLZXlzLmxlbmd0aCkge1xyXG5cdFx0XHQvLyBPYmplY3RzIHRoYXQgd29uJ3Qgc2hvdyBrZXlzIG11c3QgYmUgY29tcGFyZWQgYnkgaW5zdGFuY2VcclxuXHRcdFx0Ly8gTWFueSBuYXRpdmUgb2JqZWN0cyB3b24ndC4gU28gd2UgY2FuJ3QganVkZ2UgYnkga2V5cyBhbG9uZS5cclxuXHRcdFx0cmV0dXJuIF9pc1BsYWluT2JqZWN0KG9iajEpICYmIF9pc1BsYWluT2JqZWN0KG9iajIpIFxyXG5cdFx0XHRcdD8gYXNzZXJ0aW9uXHJcblx0XHRcdFx0OiAob2JqMSA9PT0gb2JqMikgPT09IGFzc2VydGlvbjtcclxuXHRcdH1cclxuXHRcdGlmICghX2V2ZW4ob2JqMUtleXMsIG9iajJLZXlzKSkge1xyXG5cdFx0XHRyZXR1cm4gIWFzc2VydGlvbjtcclxuXHRcdH1cclxuXHR9XHJcblx0aWYgKGRlcHRoID4gMCAmJiAoKF9pc0FycmF5KG9iajEpICYmIF9pc0FycmF5KG9iajIpKSB8fCAoX2lzT2JqZWN0KG9iajEpICYmIF9pc09iamVjdChvYmoyKSkpKSB7XHJcblx0XHR2YXIgcmVzdWx0ID0gX2NvbXBhcmVDYWxsYmFjayhvYmoxLCBvYmoyLCAodjEsIHYyKSA9PiB7XHJcblx0XHRcdHJldHVybiBfZXZlbih2MSwgdjIsIGFzc2VydGlvbiwgZGVwdGggLSAxKTtcclxuXHRcdH0sIGZhbHNlLypuZXRDb21wYXJpc29uKi8sIGZhbHNlLypjb250cmFzdCovLCB0cnVlLypyZXR1cm5PbkZpcnN0RmFsc2UqLyk7XHJcblx0XHRyZXR1cm4gX2lzQXJyYXkocmVzdWx0KSBcclxuXHRcdFx0PyByZXN1bHQubGVuZ3RoID09PSBvYmoxLmxlbmd0aCAmJiByZXN1bHQubGVuZ3RoID09PSBvYmoyLmxlbmd0aCBcclxuXHRcdFx0OiAoX2lzT2JqZWN0KHJlc3VsdCkgJiYgX2lzT2JqZWN0KG9iajEpIFxyXG5cdFx0XHRcdD8gT2JqZWN0LmtleXMocmVzdWx0KS5sZW5ndGggPT09IE9iamVjdC5rZXlzKG9iajEpLmxlbmd0aCAmJiBPYmplY3Qua2V5cyhyZXN1bHQpLmxlbmd0aCA9PT0gIE9iamVjdC5rZXlzKG9iajIpLmxlbmd0aCBcclxuXHRcdFx0XHQ6IHJlc3VsdCk7XHJcblx0fVxyXG5cdHJldHVybiBfaXNGdW5jdGlvbihhc3NlcnRpb24pID8gYXNzZXJ0aW9uKG9iajEsIG9iajIpIDogKFxyXG5cdFx0X2lzTnVtYmVyKG9iajEpICYmIF9pc051bWJlcihvYmoyKSAmJiBpc05hTihvYmoxKSAmJiBpc05hTihvYmoyKSBcclxuXHRcdFx0PyBhc3NlcnRpb24gXHJcblx0XHRcdDogKG9iajEgPT09IG9iajIpID09PSBhc3NlcnRpb25cclxuXHQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBfZXZlbjtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJy4uL2pzL2lzT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnLi4vanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc0Jvb2xlYW4gZnJvbSAnLi4vanMvaXNCb29sZWFuLmpzJztcclxuaW1wb3J0IF9lYWNoIGZyb20gJy4vZWFjaC5qcyc7XHJcblxyXG4vKipcclxuICogR2V0cyB0aGUgbWF0Y2goZXMpIGJldHdlZW4gKG1lbWJlcnMgb2YpIHR3byB2YWx1ZXM7XHJcbiAqIGFzc2VydGlvbiBvcHRpb25hbGx5IGN1c3RvbS5cclxuICpcclxuICogQHBhcmFtIG1peGVkIFx0XHRcdG9iMVxyXG4gKiBAcGFyYW0gbWl4ZWQgXHRcdFx0b2JqMlxyXG4gKiBAcGFyYW0gc3RyaW5nfGZ1bmN0aW9uXHRhc3NlcnRpb25cclxuICogQHBhcmFtIGJvb2xcdFx0XHRcdG5ldENvbXBhcmlzb25cclxuICogQHBhcmFtIGJvb2xcdFx0XHRcdGNvbnRyYXN0XHJcbiAqIEBwYXJhbSBib29sXHRcdFx0XHRyZXR1cm5PbkZpcnN0RmFsc2VcclxuICpcclxuICogQHJldHVybiBib29sfGFycmF5fG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqMSwgb2JqMiwgYXNzZXJ0aW9uID0gdHJ1ZSwgbmV0Q29tcGFyaXNvbiA9IHRydWUsIGNvbnRyYXN0ID0gZmFsc2UsIHJldHVybk9uRmlyc3RGYWxzZSA9IGZhbHNlKSB7XHJcblx0aWYgKF9pc0FycmF5KG9iajEpICYmIF9pc0FycmF5KG9iajIpKSB7XHJcblx0XHR2YXIgcmVzdWx0ID0gW107XHJcblx0XHR2YXIgY29udG4gPSB0cnVlO1xyXG5cdFx0b2JqMS5mb3JFYWNoKHYxID0+IHtcclxuXHRcdFx0aWYgKCFjb250bikge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgdGVzdFBhc3MgPSBmYWxzZTtcclxuXHRcdFx0X2VhY2gob2JqMiwgKGssIHYyKSA9PiB7XHJcblx0XHRcdFx0aWYgKCF0ZXN0UGFzcyB8fCAobmV0Q29tcGFyaXNvbiAmJiBfaXNUeXBlT2JqZWN0KHYxKSkpIHtcclxuXHRcdFx0XHRcdHRlc3RQYXNzID0gYXNzZXJ0aW9uKHYxLCB2Mik7XHJcblx0XHRcdFx0XHRpZiAoKF9pc0FycmF5KHRlc3RQYXNzKSAmJiAhdGVzdFBhc3MubGVuZ3RoKSB8fCAoX2lzT2JqZWN0KHRlc3RQYXNzKSAmJiAhT2JqZWN0LmtleXModGVzdFBhc3MpLmxlbmd0aCkpIHtcclxuXHRcdFx0XHRcdFx0dGVzdFBhc3MgPSBmYWxzZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmIChfaXNUeXBlT2JqZWN0KHRlc3RQYXNzKSAmJiBuZXRDb21wYXJpc29uKSB7XHJcblx0XHRcdFx0XHRcdC8vIEZ1cnRoZXIgcmVjdXJzaW9ucyBzaG91bGQgdXNlIHRoaXMgdGVzdFBhc3MgYXMgdjFcclxuXHRcdFx0XHRcdFx0djEgPSB0ZXN0UGFzcztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRpZiAoX2lzVHlwZU9iamVjdCh0ZXN0UGFzcykpIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaChuZXRDb21wYXJpc29uID8gdGVzdFBhc3MgOiB2MSk7XHJcblx0XHRcdH0gZWxzZSBpZiAoIV9pc0Jvb2xlYW4odGVzdFBhc3MpKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2godGVzdFBhc3MpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKChjb250cmFzdCAmJiAhdGVzdFBhc3MpIHx8ICghY29udHJhc3QgJiYgdGVzdFBhc3MpKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2godjEpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHJldHVybk9uRmlyc3RGYWxzZSkge1xyXG5cdFx0XHRcdGNvbnRuID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblx0XHJcblx0aWYgKF9pc09iamVjdChvYmoxKSAmJiBfaXNPYmplY3Qob2JqMikpIHtcclxuXHRcdHZhciByZXN1bHQgPSB7fTtcclxuXHRcdHZhciBjb250biA9IHRydWU7XHJcblx0XHRPYmplY3Qua2V5cyhvYmoxKS5mb3JFYWNoKGsgPT4ge1xyXG5cdFx0XHRpZiAoIWNvbnRuKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdHZhciB0ZXN0UGFzcyA9IGFzc2VydGlvbihvYmoxW2tdLCBvYmoyW2tdKTtcclxuXHRcdFx0aWYgKChfaXNBcnJheSh0ZXN0UGFzcykgJiYgIXRlc3RQYXNzLmxlbmd0aCkgfHwgKF9pc09iamVjdCh0ZXN0UGFzcykgJiYgIU9iamVjdC5rZXlzKHRlc3RQYXNzKS5sZW5ndGgpKSB7XHJcblx0XHRcdFx0dGVzdFBhc3MgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoX2lzVHlwZU9iamVjdCh0ZXN0UGFzcykpIHtcclxuXHRcdFx0XHRyZXN1bHRba10gPSBuZXRDb21wYXJpc29uID8gdGVzdFBhc3MgOiBvYmoxW2tdO1xyXG5cdFx0XHR9IGVsc2UgaWYgKCFfaXNCb29sZWFuKHRlc3RQYXNzKSkge1xyXG5cdFx0XHRcdHJlc3VsdFtrXSA9IHRlc3RQYXNzO1xyXG5cdFx0XHR9IGVsc2UgaWYgKChjb250cmFzdCAmJiAhdGVzdFBhc3MpIHx8ICghY29udHJhc3QgJiYgdGVzdFBhc3MpKSB7XHJcblx0XHRcdFx0cmVzdWx0W2tdID0gb2JqMVtrXTtcclxuXHRcdFx0fSBlbHNlIGlmIChyZXR1cm5PbkZpcnN0RmFsc2UpIHtcclxuXHRcdFx0XHRjb250biA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgRmlyZWFibGUgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFNldHMgYSBcImRpc2Nvbm5lY3RlZFwiIGZsYWcgb24gdGhlIEZpcmVhYmxlLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0ZGlzY29ubmVjdCgpIHtcclxuXHRcdHRoaXMuZGlzY29ubmVjdGVkID0gdHJ1ZTtcclxuXHR9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pbnRlcnNlY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvaW50ZXJzZWN0LmpzJztcclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgRmlyZWFibGUgZnJvbSAnLi9GaXJlYWJsZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBGaXJlYmFzZSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogSW5pdGlhbGl6ZXMgdGhlIGluc3RhbmNlLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHR0aGlzLmZpcmVhYmxlcyA9IFtdO1xyXG5cdFx0dGhpcy5jdXJyZW50bHlGaXJpbmdFdmVudHMgPSBbXTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQWRkcyBhbiBGaXJlYWJsZSBpbnN0YW5jZVxyXG5cdCAqIHdpdGggb3B0aW9uYWwgdGFncy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBGaXJlYWJsZVx0XHRcdGZpcmVhYmxlXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIEZpcmVhYmxlXHJcblx0ICovXHJcblx0YWRkRmlyZWFibGUoZmlyZWFibGUpIHtcclxuXHRcdHRoaXMuZmlyZWFibGVzLnB1c2goZmlyZWFibGUpO1xyXG5cdFx0cmV0dXJuIGZpcmVhYmxlO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBSZW1vdmVzIGFuIEZpcmVhYmxlIGluc3RhbmNlXHJcblx0ICogd2l0aCBvcHRpb25hbCB0YWdzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIEZpcmVhYmxlXHRcdFx0ZmlyZWFibGVcclxuXHQgKiBAcGFyYW0gYXJyYXlcdFx0XHRcdHRhZ3NcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdHJlbW92ZUZpcmVhYmxlKGZpcmVhYmxlLCB0YWdzID0gW10pIHtcclxuXHRcdHRoaXMuZmlyZWFibGVzID0gdGhpcy5maXJlYWJsZXMuZmlsdGVyKF9maXJlYWJsZSA9PiBfZmlyZWFibGUgIT09IGZpcmVhYmxlKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogRmluZHMgdGhlIE9ic2VydmVyIGluc3RhbmNlc1xyXG5cdCAqIHdpdGggdGhlIGdpdmVuIHF1ZXJ5IHBhcmFtZXRlcnMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdFx0cXVlcnlcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYXJyYXlcclxuXHQgKi9cclxuXHRmaW5kRmlyZWFibGVzKHF1ZXJ5KSB7XHJcblx0XHRyZXR1cm4gdGhpcy5maXJlYWJsZXMuZmlsdGVyKG9ic2VydmVyID0+IHtcclxuXHRcdFx0cmV0dXJuICghcXVlcnkuaGFuZGxlciB8fCBvYnNlcnZlci5oYW5kbGVyID09PSBxdWVyeS5oYW5kbGVyKSAmJiAoIXF1ZXJ5LnBhcmFtcyB8fCAoXHJcblx0XHRcdFx0KCFxdWVyeS5wYXJhbXMudHlwZSB8fCBvYnNlcnZlci5wYXJhbXMudHlwZSA9PT0gcXVlcnkucGFyYW1zLnR5cGUpXHJcblx0XHRcdFx0JiYgKCFxdWVyeS5wYXJhbXMudGFncyB8fCBfaW50ZXJzZWN0KG9ic2VydmVyLnBhcmFtcy50YWdzIHx8IFtdLCBxdWVyeS5wYXJhbXMudGFncykubGVuZ3RoID09PSBxdWVyeS5wYXJhbXMudGFncy5sZW5ndGgpXHJcblx0XHRcdCkpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZSBhbiBvYmplY3QncyBmaXJlYmFzZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBhcnJheXxvYmplY3RcdG9iamVjdFxyXG5cdCAqIEBwYXJhbSBzdHJpbmdcdFx0dHlwZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBGaXJlYmFzZVxyXG5cdCAqL1xyXG5cdHN0YXRpYyBjcmVhdGVGb3JUYXJnZXQgKG9iamVjdCwgdHlwZSwgQmFzZSkge1xyXG5cdFx0aWYgKG9iamVjdCAmJiBfaXNUeXBlT2JqZWN0KG9iamVjdCkpIHtcclxuXHRcdFx0dmFyIGZpcmViYXNlcztcclxuXHRcdFx0aWYgKCEoZmlyZWJhc2VzID0gb2JqZWN0W2ZpcmViYXNlS2V5XSkpIHtcclxuXHRcdFx0XHRmaXJlYmFzZXMgPSB7fTtcclxuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBmaXJlYmFzZUtleSwge1xyXG5cdFx0XHRcdFx0Z2V0OigpID0+IGZpcmViYXNlcyxcclxuXHRcdFx0XHRcdHNldDp2YWx1ZSA9PiB7XHJcblx0XHRcdFx0XHRcdGlmICh2YWx1ZSAhPT0gZmlyZWJhc2VzKSB7XHJcblx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdBdHRlbXB0IHRvIG92ZXJ3cml0ZSB0aGUgXCInICsgZmlyZWJhc2VLZXkgKyAnXCIgc3BlY2lhbCBwcm9wZXJ0eSEnKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdGVudW1lcmFibGU6ZmFsc2UsXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdFx0ZmlyZWJhc2VzW3R5cGVdID0gdHlwZSA9PT0gJ2xpc3RlbmVycycgPyBuZXcgQmFzZShvYmplY3QpIDogbmV3IEJhc2U7XHJcblx0XHRcdHJldHVybiBmaXJlYmFzZXNbdHlwZV07XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFJldHVybnMgYW4gb2JqZWN0J3MgZmlyZWJhc2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHRvYmplY3RcclxuXHQgKiBAcGFyYW0gc3RyaW5nXHRcdHR5cGVcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gRmlyZWJhc2VcclxuXHQgKi9cclxuXHRzdGF0aWMgZ2V0Rm9yVGFyZ2V0KG9iamVjdCwgdHlwZSkge1xyXG5cdFx0dmFyIGZpcmViYXNlcztcclxuXHRcdGlmIChvYmplY3QgJiYgX2lzVHlwZU9iamVjdChvYmplY3QpICYmIChmaXJlYmFzZXMgPSBvYmplY3RbZmlyZWJhc2VLZXldKSkge1xyXG5cdFx0XHRyZXR1cm4gZmlyZWJhc2VzW3R5cGVdO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAdmFyIHN0cmluZ1xyXG4gKi9cclxuY29uc3QgZmlyZWJhc2VLZXkgPSAnPCByIGUgZiBsIGUgeCA+JztcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIGludGVyc2VjdGlvbiBvZiB0d28gYXJyYXlzO1xyXG4gKiBvcHRpb25hbGx5IHVzaW5nIGEgY3VzdG9tIG1hdGNoaW5nIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXkgXHRhcnJcclxuICogQHBhcmFtIGFycmF5XHQgXHRhcnIyXHJcbiAqIEBwYXJhbSBmdW5jdGlvbiBcdGNhbGxiYWNrXHJcbiAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFyciwgYXJyMiwgY2FsbGJhY2sgPSBudWxsKSB7XHJcblx0cmV0dXJuICFfaXNBcnJheShhcnIyKSA/IFtdIDogYXJyLmZpbHRlcih2YWwxID0+IGNhbGxiYWNrIFxyXG5cdFx0PyBhcnIyLmZpbHRlcih2YWwyID0+IGNhbGxiYWNrKHZhbDEsIHZhbDIpKS5sZW5ndGggXHJcblx0XHQ6IGFycjIuaW5kZXhPZih2YWwxKSAhPT0gLTFcclxuXHQpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2V2ZW4gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZXZlbi5qcyc7XHJcbmltcG9ydCBRdWVyeUV2ZW50IGZyb20gJy4vUXVlcnlFdmVudC5qcyc7XHJcbmltcG9ydCBGaXJlYmFzZSBmcm9tICcuL0ZpcmViYXNlLmpzJztcclxuaW1wb3J0IFRyYXAgZnJvbSAnLi9UcmFwLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIFJlYWN0aXZlIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYXBCYXNlIGV4dGVuZHMgRmlyZWJhc2Uge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEZpcmVzIGFsbCBvYnNlcnZlcnMgd2l0aCB0aGUgZ2l2ZW4gZXZ0IChjaGFuZ2UpLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIEV2ZW50XHRcdFx0XHRldnRcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb25cdFx0XHRkZWZhdWx0SGFuZGxlclxyXG5cdCAqXHJcblx0ICogQHJldHVybiBtaXhlZFxyXG5cdCAqL1xyXG5cdGZpcmUoZXZ0LCBkZWZhdWx0SGFuZGxlciA9IG51bGwpIHtcclxuXHRcdGlmICh0aGlzLmN1cnJlbnRseUZpcmluZ0V2ZW50cy5maWx0ZXIoZSA9PiBlLnR5cGUgPT09IGV2dC50eXBlICYmIGUucXVlcnkgPT09IGV2dC5xdWVyeSkubGVuZ3RoKSB7XHJcblx0XHRcdHJldHVybiBkZWZhdWx0SGFuZGxlciA/IGRlZmF1bHRIYW5kbGVyKCkgOiB1bmRlZmluZWQ7XHJcblx0XHR9XHJcblx0XHR0aGlzLmN1cnJlbnRseUZpcmluZ0V2ZW50cy5wdXNoKGV2dCk7XHJcblx0XHRjb25zdCBuZXh0ID0gKGluZGV4LCAuLi5fYXJncykgPT4ge1xyXG5cdFx0XHR2YXIgdHJhcCA9IHRoaXMuZmlyZWFibGVzW2luZGV4XTtcclxuXHRcdFx0aWYgKHRyYXApIHtcclxuXHRcdFx0XHRyZXR1cm4gdHJhcC5maXJlKGV2dCwgKC4uLmFyZ3MpID0+IHtcclxuXHRcdFx0XHRcdHJldHVybiBuZXh0KGluZGV4ICsgMSwgLi4uYXJncyk7XHJcblx0XHRcdFx0fS8qbmV4dCovLCAuLi5fYXJncyk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGRlZmF1bHRIYW5kbGVyID8gZGVmYXVsdEhhbmRsZXIoLi4uX2FyZ3MpIDogX2FyZ3NbMF07XHJcblx0XHR9O1xyXG5cdFx0dmFyIHZhbHVlID0gbmV4dCgwKTtcclxuXHRcdHRoaXMuY3VycmVudGx5RmlyaW5nRXZlbnRzLnBvcCgpO1xyXG5cdFx0cmV0dXJuIHZhbHVlO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBjcmVhdGVGb3JUYXJnZXQob2JqZWN0KSB7XHJcblx0XHRyZXR1cm4gc3VwZXIuY3JlYXRlRm9yVGFyZ2V0KG9iamVjdCwgJ3RyYXBzJywgVHJhcEJhc2UpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBnZXRGb3JUYXJnZXQob2JqZWN0KSB7XHJcblx0XHRyZXR1cm4gc3VwZXIuZ2V0Rm9yVGFyZ2V0KG9iamVjdCwgJ3RyYXBzJyk7XHJcblx0fVxyXG59OyIsIlxyXG4vKipcclxuICogQWRkcyBhbiBpdGVtIGlmIG5vdCBhbHJlYWR5IGV4aXN0LlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXkgXHRhcnJcclxuICogQHBhcmFtIGFycmF5XHQgXHQuLi5pdG1zXHJcbiAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFyciwgLi4uaXRlbXMpIHtcclxuXHRpdGVtcy5mb3JFYWNoKGl0bSA9PiB7XHJcblx0XHRpZiAoYXJyLmluZGV4T2YoaXRtKSA8IDApIHtcclxuXHRcdFx0YXJyLnB1c2goaXRtKTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHRyZXR1cm4gYXJyO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX3B1c2hVbmlxdWUgZnJvbSAnLi4vYXJyL3B1c2hVbmlxdWUuanMnO1xyXG5pbXBvcnQgX2dldFByb3RvdHlwZUNoYWluIGZyb20gJy4vZ2V0UHJvdG90eXBlQ2hhaW4uanMnO1xyXG5cclxuLyoqXHJcbiAqIEVhZ2VybHkgcmV0cmlldmVzIG9iamVjdCBtZW1iZXJzIGFsbCBkb3duIHRoZSBwcm90b3R5cGUgY2hhaW4uXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdG9ialxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHR1bnRpbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmosIHVudGlsKSB7XHJcblx0dmFyIGtleXNBbGwgPSBbXTtcclxuXHRfZ2V0UHJvdG90eXBlQ2hhaW4ob2JqLCB1bnRpbCkuZm9yRWFjaChvYmogPT4ge1xyXG5cdFx0X3B1c2hVbmlxdWUoa2V5c0FsbCwgLi4uT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKSk7XHJcblx0fSk7XHJcblx0cmV0dXJuIGtleXNBbGw7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBwcm90b3R5cGUgY2hhaW4uXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3QgXHRcdG9ialxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHR1bnRpbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iaiwgdW50aWwpIHtcclxuXHR1bnRpbCA9IHVudGlsIHx8IE9iamVjdC5wcm90b3R5cGU7XHJcblx0dW50aWwgPSB1bnRpbCAmJiAhX2lzQXJyYXkodW50aWwpID8gW3VudGlsXSA6IHVudGlsO1xyXG5cdC8vIFdlIGdldCB0aGUgY2hhaW4gb2YgaW5oZXJpdGFuY2VcclxuXHR2YXIgcHJvdG90eXBhbENoYWluID0gW107XHJcblx0dmFyIG9iaiA9IG9iajtcclxuXHR3aGlsZSgob2JqICYmICghdW50aWwgfHwgdW50aWwuaW5kZXhPZihvYmopIDwgMCkgJiYgb2JqLm5hbWUgIT09ICdkZWZhdWx0JykpIHtcclxuXHRcdHByb3RvdHlwYWxDaGFpbi5wdXNoKG9iaik7XHJcblx0XHRvYmogPSBvYmogPyBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA6IG51bGw7XHJcblx0fVxyXG5cdHJldHVybiBwcm90b3R5cGFsQ2hhaW47XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc0Z1bmN0aW9uIGZyb20gJy4uL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJy4uL2pzL2lzT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnLi4vanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc051bWVyaWMgZnJvbSAnLi4vanMvaXNOdW1lcmljLmpzJztcclxuaW1wb3J0IF9nZXRBbGxQcm9wZXJ0eU5hbWVzIGZyb20gJy4vZ2V0QWxsUHJvcGVydHlOYW1lcy5qcyc7XHJcblxyXG4vKipcclxuICAqIE1lcmdlcyB2YWx1ZXMgZnJvbSBzdWJzZXF1ZW50IGFycmF5cy9vYmplY3RzIGZpcnN0IGFycmF5L29iamVjdDtcclxuICAqIG9wdGlvbmFsbHkgcmVjdXJzaXZlXHJcbiAgKlxyXG4gICogQHBhcmFtIGFycmF5IC4uLm9ianNcclxuICAqXHJcbiAgKiBAcmV0dXJuIHZvaWRcclxuICAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZUNhbGxiYWNrKG9ianMsIGNhbGxiYWNrLCBkZWVwUHJvcHMgPSBmYWxzZSwgaXNSZXBsYWNlID0gZmFsc2UsIHdpdGhTeW1ib2xzID0gdHJ1ZSkge1xyXG5cdHZhciBkZXB0aCA9IDA7XHJcblx0dmFyIG9iajEgPSBvYmpzLnNoaWZ0KCk7XHJcblx0aWYgKF9pc051bWVyaWMob2JqMSkgfHwgb2JqMSA9PT0gdHJ1ZSB8fCBvYmoxID09PSBmYWxzZSkge1xyXG5cdFx0ZGVwdGggPSBvYmoxO1xyXG5cdFx0b2JqMSA9IG9ianMuc2hpZnQoKTtcclxuXHR9XHJcblx0aWYgKCFvYmpzLmxlbmd0aCkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdfbWVyZ2UoKSByZXF1aXJlcyB0d28gb3IgbW9yZSBhcnJheS9vYmplY3RzLicpO1xyXG5cdH1cclxuXHRvYmpzLmZvckVhY2goKG9iajIsIGkpID0+IHtcclxuXHRcdGlmICghX2lzVHlwZU9iamVjdChvYmoyKSAmJiAhX2lzRnVuY3Rpb24ob2JqMikpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0KGRlZXBQcm9wcyA/IF9nZXRBbGxQcm9wZXJ0eU5hbWVzKG9iajIpIDogT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqMikpLmZvckVhY2goa2V5ID0+IHtcclxuXHRcdFx0dmFyIHZhbEF0T2JqMSA9IG9iajFba2V5XTtcclxuXHRcdFx0dmFyIHZhbEF0T2JqMiA9IG9iajJba2V5XTtcclxuXHRcdFx0aWYgKCgoX2lzQXJyYXkodmFsQXRPYmoxKSAmJiBfaXNBcnJheSh2YWxBdE9iajIpKSB8fCAoX2lzT2JqZWN0KHZhbEF0T2JqMSkgJiYgX2lzT2JqZWN0KHZhbEF0T2JqMikpKSBcclxuXHRcdFx0JiYgKGRlcHRoID09PSB0cnVlIHx8IGRlcHRoID4gMCkpIHtcclxuXHRcdFx0XHQvLyBSRUNVUlNFLi4uXHJcblx0XHRcdFx0b2JqMVtrZXldID0gX2lzQXJyYXkodmFsQXRPYmoxKSAmJiBfaXNBcnJheSh2YWxBdE9iajIpID8gW10gOiB7fTtcclxuXHRcdFx0XHRtZXJnZUNhbGxiYWNrKFtfaXNOdW1lcmljKGRlcHRoKSA/IGRlcHRoIC0gMSA6IGRlcHRoLCBvYmoxW2tleV0sIHZhbEF0T2JqMSwgdmFsQXRPYmoyXSwgY2FsbGJhY2ssIGRlZXBQcm9wcywgaXNSZXBsYWNlLCB3aXRoU3ltYm9scyk7XHJcblx0XHRcdH0gZWxzZSBpZiAoY2FsbGJhY2soa2V5LCBvYmoxLCBvYmoyLCBpKSkge1xyXG5cdFx0XHRcdGlmIChfaXNBcnJheShvYmoxKSAmJiBfaXNBcnJheShvYmoyKSkge1xyXG5cdFx0XHRcdFx0aWYgKGlzUmVwbGFjZSkge1xyXG5cdFx0XHRcdFx0XHRvYmoxW2tleV0gPSB2YWxBdE9iajI7XHJcblx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRvYmoxLnB1c2godmFsQXRPYmoyKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Ly8gSW4gY2FzZSB3ZSdyZSBzZXR0aW5nIGEgcmVhZC1vbmx5IHByb3BlcnR5XHJcblx0XHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0XHRpZiAod2l0aFN5bWJvbHMpIHtcclxuXHRcdFx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqMSwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iajIsIGtleSkpO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdG9iajFba2V5XSA9IG9iajJba2V5XTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSBjYXRjaChlKSB7fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fSk7XHJcblx0cmV0dXJuIG9iajE7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc0Z1bmN0aW9uIGZyb20gJy4uL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICcuLi9qcy9pc051bWVyaWMuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuLi9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX21lcmdlQ2FsbGJhY2sgZnJvbSAnLi9tZXJnZUNhbGxiYWNrLmpzJztcclxuXHJcbi8qKlxyXG4gKiBDb3BpZXMgYW4gb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHRvYmpcclxuICogQHBhcmFtIGFycmF5XHRcdCBcdGZpbHRlclxyXG4gKlxyXG4gKiBAcmV0dXJuIG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqLCBmaWx0ZXIgPSBbXSwgd2l0aFN5bWJvbHMgPSB0cnVlKSB7XHJcblx0dmFyIGRlcHRoID0gMDtcclxuXHRpZiAoX2lzTnVtZXJpYyhhcmd1bWVudHNbMF0pICYmIF9pc1R5cGVPYmplY3QoYXJndW1lbnRzWzFdKSkge1xyXG5cdFx0ZGVwdGggPSBhcmd1bWVudHNbMF07XHJcblx0XHRvYmogPSBhcmd1bWVudHNbMV07XHJcblx0XHRmaWx0ZXIgPSBhcmd1bWVudHNbMl0gfHwgW107XHJcblx0fVxyXG5cdHJldHVybiBfbWVyZ2VDYWxsYmFjayhbZGVwdGgsIHt9LCBvYmpdLCAoa2V5LCBvYmoxLCBvYmoyKSA9PiB7XHJcblx0XHRyZXR1cm4gX2lzRnVuY3Rpb24oZmlsdGVyKSA/IGZpbHRlcihrZXkpIFxyXG5cdFx0XHQ6IChfaXNBcnJheShmaWx0ZXIpICYmIGZpbHRlci5sZW5ndGggPyBmaWx0ZXIuaW5kZXhPZihrZXkpID4gLTEgOiB0cnVlKTtcclxuXHR9LCBmYWxzZS8qZGVlcFByb3BzKi8sIGZhbHNlLyppc1JlcGxhY2UqLywgd2l0aFN5bWJvbHMpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX21lcmdlQ2FsbGJhY2sgZnJvbSAnLi9tZXJnZUNhbGxiYWNrLmpzJztcclxuXHJcbi8qKlxyXG4gICogTWVyZ2VzIHZhbHVlcyBmcm9tIHN1YnNlcXVlbnQgYXJyYXlzL29iamVjdHMgZmlyc3QgYXJyYXkvb2JqZWN0O1xyXG4gICogb3B0aW9uYWxseSByZWN1cnNpdmVcclxuICAqXHJcbiAgKiBAcGFyYW0gYXJyYXkgLi4ub2Jqc1xyXG4gICpcclxuICAqIEByZXR1cm4gdm9pZFxyXG4gICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKC4uLm9ianMpIHtcclxuXHRyZXR1cm4gX21lcmdlQ2FsbGJhY2sob2JqcywgKGssIG9iajEsIG9iajIpID0+IHtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0sIGZhbHNlLypkZWVwUHJvcHMqLywgZmFsc2UvKmlzUmVwbGFjZSovLCBmYWxzZS8qd2l0aFN5bWJvbHMqLyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfZXZlbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9ldmVuLmpzJztcclxuaW1wb3J0IEV2ZW50IGZyb20gJy4vRXZlbnQuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgTXV0YXRpb25FdmVudCBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIEV2ZW50IHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBJbml0aWFsaXplcyB0aGUgaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHRcdHRhcmdldFxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0XHRkZXRhaWxzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcih0YXJnZXQsIGRldGFpbHMgPSB7fSkge1xyXG5cdFx0aWYgKGRldGFpbHMuZGF0YSkge1xyXG5cdFx0XHRkZXRhaWxzLmZpZWxkcyA9IE9iamVjdC5rZXlzKGRldGFpbHMuZGF0YSk7XHJcblx0XHR9XHJcblx0XHRzdXBlcih0YXJnZXQsIGRldGFpbHMpO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdGlmICh0aGlzLnNyY0V2dCkge1xyXG5cdFx0XHR0aGlzLmRhdGFFdmVuID0gdGhpcy5zcmNFdnQuZGF0YUV2ZW47XHJcblx0XHRcdHRoaXMub3JpZ2luYXRpbmdUYXJnZXQgPSB0aGlzLnNyY0V2dC5vcmlnaW5hdGluZ1RhcmdldDtcclxuXHRcdFx0dGhpcy5vcmlnaW5hdGluZ1R5cGUgPSB0aGlzLnNyY0V2dC5vcmlnaW5hdGluZ1R5cGU7XHJcblx0XHRcdHRoaXMub3JpZ2luYXRpbmdGaWVsZHMgPSBbXTtcclxuXHRcdFx0dGhpcy5vcmlnaW5hdGluZ0RhdGEgPSB7fTtcclxuXHRcdFx0dGhpcy5fb3JpZ2luYXRpbmdEYXRhID0ge307XHJcblx0XHRcdHZhciBmaWVsZCA9IHRoaXMuZmllbGRzWzBdO1xyXG5cdFx0XHRPYmplY3Qua2V5cyh0aGlzLnNyY0V2dC5vcmlnaW5hdGluZ0RhdGEpLmZvckVhY2gocGF0aCA9PiB7XHJcblx0XHRcdFx0dmFyIF9wYXRoID0gZmllbGQgKyAnLicgKyBwYXRoO1xyXG5cdFx0XHRcdHRoaXMub3JpZ2luYXRpbmdGaWVsZHMucHVzaChfcGF0aCk7XHJcblx0XHRcdFx0dGhpcy5vcmlnaW5hdGluZ0RhdGFbX3BhdGhdID0gdGhpcy5zcmNFdnQub3JpZ2luYXRpbmdEYXRhW3BhdGhdO1xyXG5cdFx0XHRcdHRoaXMuX29yaWdpbmF0aW5nRGF0YVtfcGF0aF0gPSB0aGlzLnNyY0V2dC5fb3JpZ2luYXRpbmdEYXRhW3BhdGhdO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0dGhpcy5vcmlnaW5hdGluZ0NyZWF0ZWQgPSB0aGlzLnNyY0V2dC5vcmlnaW5hdGluZ0NyZWF0ZWQ7XHJcblx0XHRcdHRoaXMub3JpZ2luYXRpbmdEZWxldGVkID0gdGhpcy5zcmNFdnQub3JpZ2luYXRpbmdEZWxldGVkO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy5kYXRhRXZlbiA9IF9ldmVuKHRoaXMuZGF0YSwgdGhpcy5fZGF0YSk7XHJcblx0XHRcdHRoaXMub3JpZ2luYXRpbmdUYXJnZXQgPSB0aGlzLnRhcmdldDtcclxuXHRcdFx0dGhpcy5vcmlnaW5hdGluZ1R5cGUgPSB0aGlzLnR5cGU7XHJcblx0XHRcdHRoaXMub3JpZ2luYXRpbmdGaWVsZHMgPSB0aGlzLmZpZWxkcztcclxuXHRcdFx0dGhpcy5vcmlnaW5hdGluZ0RhdGEgPSB0aGlzLmRhdGE7XHJcblx0XHRcdHRoaXMuX29yaWdpbmF0aW5nRGF0YSA9IHRoaXMuX2RhdGE7XHJcblx0XHRcdHRoaXMub3JpZ2luYXRpbmdDcmVhdGVkID0gdGhpcy5jcmVhdGVkO1xyXG5cdFx0XHR0aGlzLm9yaWdpbmF0aW5nRGVsZXRlZCA9IHRoaXMuZGVsZXRlZDtcclxuXHRcdH1cclxuXHR9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9ldmVuIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2V2ZW4uanMnO1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCBfaW50ZXJzZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ludGVyc2VjdC5qcyc7XHJcbmltcG9ydCBfY29uY2F0VW5pcXVlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2NvbmNhdFVuaXF1ZS5qcyc7XHJcbmltcG9ydCBfZXhjbHVkZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9leGNsdWRlLmpzJztcclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVW5kZWZpbmVkLmpzJztcclxuaW1wb3J0IF9pc051bGwgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bGwuanMnO1xyXG5pbXBvcnQgTXV0YXRpb25FdmVudCBmcm9tICcuL011dGF0aW9uRXZlbnQuanMnO1xyXG5pbXBvcnQgRmlyZWJhc2UgZnJvbSAnLi9GaXJlYmFzZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBSZWFjdGl2ZSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPYnNlcnZlckJhc2UgZXh0ZW5kcyBGaXJlYmFzZSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogRmluZHMgdGhlIE9ic2VydmVyIGluc3RhbmNlc1xyXG5cdCAqIHdpdGggdGhlIGdpdmVuIHF1ZXJ5IHBhcmFtZXRlcnMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdFx0cXVlcnlcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYXJyYXlcclxuXHQgKi9cclxuXHRmaW5kRmlyZWFibGVzKHF1ZXJ5KSB7XHJcblx0XHRyZXR1cm4gc3VwZXIuZmluZEZpcmVhYmxlcyhxdWVyeSkuZmlsdGVyKG9ic2VydmVyID0+IHtcclxuXHRcdFx0cmV0dXJuIF9pc051bGwocXVlcnkuZmllbGRzKSB8fCBfaXNVbmRlZmluZWQocXVlcnkuZmllbGRzKSB8fCBfZXZlbihfYXJyRnJvbShvYnNlcnZlci5maWVsZHMpLCBfYXJyRnJvbShxdWVyeS5maWVsZHMpKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBGaXJlcyBhbGwgb2JzZXJ2ZXJzIHdpdGggdGhlIGdpdmVuIGV2dCAoY2hhbmdlKS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBFdmVudFx0XHRcdFx0ZXZ0XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIEV2ZW50XHJcblx0ICovXHJcblx0ZmlyZShldnQpIHtcclxuXHRcdGlmICh0aGlzLmN1cnJlbnRseUZpcmluZ0V2ZW50cy5maWx0ZXIoZSA9PiBlLnR5cGUgPT09IGV2dC50eXBlICYmIGUuZmllbGRzID09PSBldnQuZmllbGRzKS5sZW5ndGgpIHtcclxuXHRcdFx0cmV0dXJuIGV2dDtcclxuXHRcdH1cclxuXHRcdHRoaXMuY3VycmVudGx5RmlyaW5nRXZlbnRzLnB1c2goZXZ0KTtcclxuXHRcdHRoaXMuZmlyZWFibGVzLmZvckVhY2gob2JzZXJ2ZXIgPT4ge1xyXG5cdFx0XHRpZiAoZXZ0LnByb3BhZ2F0aW9uU3RvcHBlZCB8fCAob2JzZXJ2ZXIucGFyYW1zLnR5cGUgJiYgb2JzZXJ2ZXIucGFyYW1zLnR5cGUgIT09IGV2dC50eXBlKSkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRvYnNlcnZlci5maXJlKGV2dCk7XHJcblx0XHR9KTtcclxuXHRcdHRoaXMuY3VycmVudGx5RmlyaW5nRXZlbnRzLnBvcCgpO1xyXG5cdFx0cmV0dXJuIGV2dDtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgY3JlYXRlRm9yVGFyZ2V0KG9iamVjdCkge1xyXG5cdFx0cmV0dXJuIHN1cGVyLmNyZWF0ZUZvclRhcmdldChvYmplY3QsICdvYnNlcnZlcnMnLCBPYnNlcnZlckJhc2UpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBnZXRGb3JUYXJnZXQob2JqZWN0KSB7XHJcblx0XHRyZXR1cm4gc3VwZXIuZ2V0Rm9yVGFyZ2V0KG9iamVjdCwgJ29ic2VydmVycycpO1xyXG5cdH1cclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzTnVsbCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVsbC5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1VuZGVmaW5lZC5qcyc7XHJcbmltcG9ydCBPYnNlcnZlckJhc2UgZnJvbSAnLi9pbnRlcm5hbC9PYnNlcnZlckJhc2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIFJlbW92ZXMgYW4gb2JzZXJ2ZXIgZnJvbSBhbiBvYmplY3QncyBmaXJlYmFzZS5cclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdFx0XHRcdFx0b2JqZWN0XHJcbiAqIEBwYXJhbSBzdHJpbmd8YXJyYXl8ZnVuY3Rpb25cdFx0ZmllbGRzXHJcbiAqIEBwYXJhbSBmdW5jdGlvblx0XHRcdFx0XHRvcmlnaW5hbENhbGxiYWNrXHJcbiAqIEBwYXJhbSBvYmplY3RcdFx0XHRcdFx0cGFyYW1zXHJcbiAqXHJcbiAqIEByZXR1cm4gdm9pZFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0LCBmaWVsZHMsIG9yaWdpbmFsQ2FsbGJhY2sgPSBudWxsLCBwYXJhbXMgPSB7fSkge1xyXG5cdGlmICghb2JqZWN0IHx8ICFfaXNUeXBlT2JqZWN0KG9iamVjdCkpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignT2JqZWN0IG11c3QgYmUgb2YgdHlwZSBvYmplY3QhJyk7XHJcblx0fVxyXG5cdGlmIChfaXNGdW5jdGlvbihmaWVsZHMpIHx8IF9pc051bGwoZmllbGRzKSB8fCBfaXNVbmRlZmluZWQoZmllbGRzKSkge1xyXG5cdFx0cGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBvcmlnaW5hbENhbGxiYWNrIDoge307XHJcblx0XHRvcmlnaW5hbENhbGxiYWNrID0gZmllbGRzO1xyXG5cdFx0ZmllbGRzID0gbnVsbDtcclxuXHR9XHJcblx0dmFyIGZpcmViYXNlO1xyXG5cdGlmIChmaXJlYmFzZSA9IE9ic2VydmVyQmFzZS5nZXRGb3JUYXJnZXQob2JqZWN0KSkge1xyXG5cdFx0ZmlyZWJhc2UuZmluZEZpcmVhYmxlcyh7aGFuZGxlcjpvcmlnaW5hbENhbGxiYWNrLCBmaWVsZHMsIHBhcmFtc30pLmZvckVhY2gob2JzZXJ2ZXIgPT4ge1xyXG5cdFx0XHRmaXJlYmFzZS5yZW1vdmVGaXJlYWJsZShvYnNlcnZlcik7XHJcblx0XHR9KTtcclxuXHR9XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IHVub2JzZXJ2ZSBmcm9tICcuL3Vub2JzZXJ2ZS5qcyc7XHJcblxyXG4vKipcclxuICogVW5idWJibGUgaGVscGVyXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdHRhcmdldFxyXG4gKiBAcGFyYW0gc3RyaW5nXHRcdGZpZWxkXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdG9iamVjdFxyXG4gKlxyXG4gKiBAcmV0dXJuIHZvaWRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldCwgZmllbGQsIG9iamVjdCkge1xyXG5cdHVub2JzZXJ2ZShvYmplY3QsIG51bGwsIHt0YWdzOlsnI2UtYnViYmxpbmcnLCBmaWVsZCwgdGFyZ2V0XX0pO1xyXG59XHJcbiIsIlxyXG4vKipcclxuICogUmV0dXJucyB0aGUgdmFsJ3MgdHlwZS5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHR5cGVvZiB2YWw7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJy4uL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnLi4vanMvaXNVbmRlZmluZWQuanMnO1xyXG5pbXBvcnQgX2lzTnVsbCBmcm9tICcuLi9qcy9pc051bGwuanMnO1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnLi4vYXJyL2Zyb20uanMnO1xyXG5cclxuLyoqXHJcbiAqIFJldHJpZXZlcyB0aGUgdmFsdWUgYXQgdGhlIGdpdmVuIHBhdGguXHJcbiAqXHJcbiAqIEEgcmV0dXJuIHZhbHVlIG9mIHVuZGVmaW5lZCBpcyBhbWJpZ3VvdXMsIGFuZCBjYW4gbWVhbiBlaXRoZXIgdGhhdCB0aGVcclxuICogcGF0aCBkb2VzIG5vdCBleGlzdCwgb3IgdGhhdCB0aGUgcGF0aCBhY3R1YWxseSBleGlzdHMgYnV0IHdpdGggYSB2YWx1ZSBvZiB1bmRlZmluZWQuIElmIGl0IGlzIHJlcXVpcmVkIHRvXHJcbiAqIGtub3cgd2hldGhlciB0aGUgcGF0aCBhY3R1YWxseSBleGlzdHMsIHBhc3MgYW4gb2JqZWN0IGFzIGEgdGhpcmQgYXJndW1lbnQuXHJcbiAqIFRoaXMgb2JqZWN0IHdpbGwgaGF2ZSBhbiBcImV4aXN0c1wiIGtleSBzZXQgdG8gdHJ1ZS9mYWxzZS5cclxuICpcclxuICogQHBhcmFtIG9iamVjdCBcdFx0XHRcdGN0eHRcclxuICogQHBhcmFtIGFycmF5IFx0XHRcdFx0cGF0aFxyXG4gKiBAcGFyYW0gb2JqZWN0IFx0XHRcdFx0dHJhcFxyXG4gKiBAcGFyYW0gb2JqZWN0IFx0XHRcdFx0cmVjaWV2ZXJcclxuICpcclxuICogQHJldHVybiBtaXhlZFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY3R4dCwgcGF0aCwgdHJhcCA9IHt9LCByZWNpZXZlciA9IHt9KSB7XHJcblx0cGF0aCA9IF9hcnJGcm9tKHBhdGgpLnNsaWNlKCk7XHJcblx0dmFyIF9jdHh0ID0gY3R4dDtcclxuXHR3aGlsZSghX2lzVW5kZWZpbmVkKF9jdHh0KSAmJiAhX2lzTnVsbChfY3R4dCkgJiYgcGF0aC5sZW5ndGgpIHtcclxuXHRcdHZhciBfa2V5ID0gcGF0aC5zaGlmdCgpO1xyXG5cdFx0aWYgKCEodHJhcC5nZXQgPyB0cmFwLmdldChfY3R4dCwgX2tleSkgOiAoX2lzVHlwZU9iamVjdChfY3R4dCkgPyBfa2V5IGluIF9jdHh0IDogX2N0eHRbX2tleV0pKSkge1xyXG5cdFx0XHRyZWNpZXZlci5leGlzdHMgPSBmYWxzZTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0X2N0eHQgPSB0cmFwLmdldCA/IHRyYXAuZ2V0KF9jdHh0LCBfa2V5KSA6IF9jdHh0W19rZXldO1xyXG5cdH1cclxuXHRyZWNpZXZlci5leGlzdHMgPSB0cnVlO1xyXG5cdHJldHVybiBfY3R4dDtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9jcm9zc0pvaW4gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvY3Jvc3NKb2luLmpzJztcclxuaW1wb3J0IF9wdXNoVW5pcXVlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3B1c2hVbmlxdWUuanMnO1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCBfc3RyQWZ0ZXIgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvYWZ0ZXIuanMnO1xyXG5pbXBvcnQgX2lzU3RyaW5nIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNTdHJpbmcuanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9jb21tb25zR2V0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2dldC5qcyc7XHJcbmltcG9ydCBGaXJlYWJsZSBmcm9tICcuL0ZpcmVhYmxlLmpzJztcclxuaW1wb3J0IE11dGF0aW9uRXZlbnQgZnJvbSAnLi9NdXRhdGlvbkV2ZW50LmpzJztcclxuaW1wb3J0IHJlZmxleEdldCBmcm9tICcuLi9nZXQuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgT2JzZXJ2ZXIgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBGaXJlYWJsZSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogSW5pdGlhbGl6ZXMgdGhlIGluc3RhbmNlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uXHRcdGhhbmRsZXJcclxuXHQgKiBAcGFyYW0gc3RyaW5nfGFycmF5XHRmaWVsZHNcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdHBhcmFtc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoaGFuZGxlciwgZmllbGRzID0gbnVsbCwgcGFyYW1zID0ge30pIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xyXG5cdFx0dGhpcy5maWVsZHMgPSBmaWVsZHM7XHJcblx0XHR0aGlzLnBhcmFtcyA9IHBhcmFtcztcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHR0aGlzLmZpZWxkc0FycmF5ID0gX2FyckZyb20odGhpcy5maWVsZHMpO1xyXG5cdFx0dGhpcy5pc0R5bmFtaWNGaWVsZCA9IHRoaXMuZmllbGRzQXJyYXkuZmlsdGVyKFxyXG5cdFx0XHRmaWVsZCA9PiBmaWVsZC5pbmRleE9mKCcuLicpID4gLTEgfHwgZmllbGQuc3RhcnRzV2l0aCgnLicpIHx8IGZpZWxkLmVuZHNXaXRoKCcuJylcclxuXHRcdCkubGVuZ3RoO1xyXG5cdFx0aWYgKHRoaXMuaXNEeW5hbWljRmllbGQgJiYgdGhpcy5maWVsZHNBcnJheS5sZW5ndGggPiAxKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignT25seSBvbmUgXCJEeW5hbWljIEZpZWxkXCIgbXVzdCBiZSBvYnNlcnZlZCBhdCBhIHRpbWUhIFwiJyArIHRoaXMuZmllbGRzQXJyYXkuam9pbignLCAnKSArICdcIiBoYXZlIGJlZW4gYm91bmQgdG9nZXRoZXIuJyk7XHJcblx0XHR9XHJcblxyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBDYWxscyB0aGUgb2JzZXJ2ZXIncyBoYW5kbGVyIGZ1bmN0aW9uXHJcblx0ICogb24gbWF0Y2hpbmcgd2l0aCB0aGUgZXZlbnQncyBmaWVsZHMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gTXV0YXRpb25FdmVudFx0XHRcdCBcdGV2dFxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0ZmlyZShldnQpIHtcclxuXHRcdGlmICh0aGlzLmRpc2Nvbm5lY3RlZCB8fCAodGhpcy5wYXJhbXMudHlwZSAmJiB0aGlzLnBhcmFtcy50eXBlICE9PSBldnQudHlwZSkpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0aWYgKGV2dC5kYXRhRXZlbiAmJiB0aGlzLnBhcmFtcy5kaWZmICE9PSBmYWxzZSkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHR0aGlzLmZpcmVDYWxsYmFjayhldnQsIGZpZWxkcyA9PiB7XHJcblx0XHRcdGlmIChmaWVsZHMpIHtcclxuXHRcdFx0XHQvLyBDYWxsIGxpc3RlbmVyLi4uXHJcblx0XHRcdFx0dmFyIGRhdGEgPSBbXTtcclxuXHRcdFx0XHR2YXIgX2RhdGEgPSBbXTtcclxuXHRcdFx0XHRmaWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XHJcblx0XHRcdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHRcdFx0Ly8gVGhlIE5FVy9PTEQgdmFsdWVzIG9mIHRoZSBjaGFuZ2Ugb2YgZmllbGQgd2hpY2ggY291bGQgYmUgYSBwYXRoXHJcblx0XHRcdFx0XHR2YXIgZmllbGREYXRhID0gZXZ0Lm9yaWdpbmF0aW5nRmllbGRzLnJlZHVjZSgoZmllbGREYXRhLCBvcmlnaW5hdGluZ0ZpZWxkKSA9PiB7XHJcblx0XHRcdFx0XHRcdC8vIFNvIGZpZWxkIGlzIHRoZSBleGFjdCBvcmlnaW5hdGluZ0ZpZWxkIHBhdGg/XHJcblx0XHRcdFx0XHRcdHZhciB2YWx1ZSA9IGV2dC5vcmlnaW5hdGluZ0RhdGFbb3JpZ2luYXRpbmdGaWVsZF07XHJcblx0XHRcdFx0XHRcdHZhciBfdmFsdWUgPSBldnQuX29yaWdpbmF0aW5nRGF0YVtvcmlnaW5hdGluZ0ZpZWxkXTtcclxuXHRcdFx0XHRcdFx0aWYgKCFmaWVsZERhdGEgJiYgZmllbGQgPT09IG9yaWdpbmF0aW5nRmllbGQpIHtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gW3ZhbHVlLCBfdmFsdWVdO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdC8vIEZpZWxkIG1hdGNoZXMsIGJ1dCBpcyBkZWVwZXIgdGhhbiwgb3JpZ2luYXRpbmdGaWVsZCBwYXRoP1xyXG5cdFx0XHRcdFx0XHRpZiAoIWZpZWxkRGF0YSAmJiAoZmllbGQgKyAnLicpLnN0YXJ0c1dpdGgoKG9yaWdpbmF0aW5nRmllbGQgKyAnLicpKSkge1xyXG5cdFx0XHRcdFx0XHRcdHZhciBmaWVsZFF1ZXJ5ID0gX3N0ckFmdGVyKGZpZWxkLCBvcmlnaW5hdGluZ0ZpZWxkICsgJy4nKTtcclxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gW1xyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gTm90aWNlIHdlJ3JlIHVzaW5nIF9jb21tb25zR2V0IHRvIGRpZyB0aGUgcGF0aFxyXG5cdFx0XHRcdFx0XHRcdFx0Ly8gYnV0IHdpdGggcmVmbGV4R2V0IGFzIHRyYXAgZm9yIFwicmVhY3RpdmUgZ2V0dGluZ1wiXHJcblx0XHRcdFx0XHRcdFx0XHRfY29tbW9uc0dldCh2YWx1ZSwgZmllbGRRdWVyeS5zcGxpdCgnLicpLCB7Z2V0OnJlZmxleEdldH0pLFxyXG5cdFx0XHRcdFx0XHRcdFx0X2NvbW1vbnNHZXQoX3ZhbHVlLCBmaWVsZFF1ZXJ5LnNwbGl0KCcuJyksIHtnZXQ6cmVmbGV4R2V0fSlcclxuXHRcdFx0XHRcdFx0XHRdO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHJldHVybiBmaWVsZERhdGE7XHJcblx0XHRcdFx0XHR9LCBudWxsKTtcclxuXHRcdFx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdFx0XHRpZiAoZmllbGREYXRhKSB7XHJcblx0XHRcdFx0XHRcdGRhdGEucHVzaChmaWVsZERhdGEuc2hpZnQoKSk7XHJcblx0XHRcdFx0XHRcdF9kYXRhLnB1c2goZmllbGREYXRhLnNoaWZ0KCkpO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0dmFyIGN1cnJlbnRWYWx1ZSA9IF9jb21tb25zR2V0KGV2dC50YXJnZXQsIF9pc1N0cmluZyhmaWVsZCkgPyBmaWVsZC5zcGxpdCgnLicpIDogZmllbGQsIHtnZXQ6cmVmbGV4R2V0fSk7XHJcblx0XHRcdFx0XHRcdGRhdGEucHVzaChjdXJyZW50VmFsdWUpO1xyXG5cdFx0XHRcdFx0XHRfZGF0YS5wdXNoKGN1cnJlbnRWYWx1ZSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0cmV0dXJuIF9pc0FycmF5KHRoaXMuZmllbGRzKSAvLyBOT1RFOndlJ3JlIGFza2luZyB0aGUgb3JpZ2luYWwgZm9ybWF0IVxyXG5cdFx0XHRcdFx0PyBldnQucmVzcG9uc2UodGhpcy5oYW5kbGVyKGRhdGEsIF9kYXRhLCBldnQpKVxyXG5cdFx0XHRcdFx0OiBldnQucmVzcG9uc2UodGhpcy5oYW5kbGVyKGRhdGFbMF0sIF9kYXRhWzBdLCBldnQpKTtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgZGF0YSA9IHt9O1xyXG5cdFx0XHR2YXIgX2RhdGEgPSB7fTtcclxuXHRcdFx0ZXZ0LmZpZWxkcy5mb3JFYWNoKGZpZWxkID0+IHtcclxuXHRcdFx0XHQvLyBSZW1lYmVyIHRoYXQgZXZ0Lm9yaWdpbmF0aW5nRGF0YSBtaWdodCBhY3R1YWxseSBiZSBidWJibGluZ1xyXG5cdFx0XHRcdC8vIGluIHdoaWNoIGNhc2Ugd2UgZG9uJ3QgZXhwZWN0IHRvIHNlZSBldmVudE5hbWUga2V5LlxyXG5cdFx0XHRcdHZhciBjdXJyZW50VmFsdWUgPSBmaWVsZCBpbiBldnQuZGF0YSBcclxuXHRcdFx0XHRcdD8gZXZ0LmRhdGFbZmllbGRdIFxyXG5cdFx0XHRcdFx0OiByZWZsZXhHZXQoZXZ0LnRhcmdldCwgZmllbGQpO1xyXG5cdFx0XHRcdHZhciBwcmV2VmFsdWUgPSBmaWVsZCBpbiBldnQuX2RhdGFcclxuXHRcdFx0XHRcdD8gZXZ0Ll9kYXRhW2ZpZWxkXSBcclxuXHRcdFx0XHRcdDogY3VycmVudFZhbHVlO1xyXG5cdFx0XHRcdGRhdGFbZmllbGRdID0gY3VycmVudFZhbHVlO1xyXG5cdFx0XHRcdF9kYXRhW2ZpZWxkXSA9IHByZXZWYWx1ZTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdC8vIENhbGwgbGlzdGVuZXIuLi5cclxuXHRcdFx0cmV0dXJuIGV2dC5yZXNwb25zZSh0aGlzLmhhbmRsZXIoZGF0YSwgX2RhdGEsIGV2dCkpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFZhbGlkYXRlcyBhIHByb3Bvc2VkIGZpcmUgb3BlcmF0aW9uLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIE11dGF0aW9uRXZlbnRcdFx0IFx0ZXZ0XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGJvb2xcclxuXHQgKi9cclxuXHRmaXJlQ2FsbGJhY2soZXZ0LCBjYWxsYmFjaykge1xyXG5cdFx0aWYgKHRoaXMuZmllbGRzQXJyYXkubGVuZ3RoKSB7XHJcblx0XHRcdHZhciBkeW5hbWljRmllbGRPdXRjb21lcyA9IFtdO1xyXG5cdFx0XHR2YXIgbWF0Y2hlcyA9IHRoaXMuZmllbGRzQXJyYXkuZmlsdGVyKChvYnNlcnZlZEZpZWxkLCBpKSA9PiB7XHJcblx0XHRcdFx0b2JzZXJ2ZWRGaWVsZCA9IF9pc1N0cmluZyhvYnNlcnZlZEZpZWxkKSBcclxuXHRcdFx0XHRcdD8gb2JzZXJ2ZWRGaWVsZC5yZXBsYWNlKC9gL2csICcnKVxyXG5cdFx0XHRcdFx0OiBvYnNlcnZlZEZpZWxkO1xyXG5cdFx0XHRcdGR5bmFtaWNGaWVsZE91dGNvbWVzW2ldID0gW107XHJcblx0XHRcdFx0Ly8gb25lIG9ic2VydmVkRmllbGQgY2FuIHR1cm4gb3V0IHRvIGJlIHR3byBpZiBkeW5hbWljXHJcblx0XHRcdFx0Ly8gYW5kIGV2dC5vcmlnaW5hdGluZ0ZpZWxkcyBpcyBtdWx0aXBsZVxyXG5cdFx0XHRcdHJldHVybiBldnQub3JpZ2luYXRpbmdGaWVsZHMuZmlsdGVyKGlucHV0T3JpZ2luYXRpbmdGaWVsZCA9PiB7XHJcblx0XHRcdFx0XHR2YXIgaW5wdXRPcmlnaW5hdGluZ0ZpZWxkU3BsaXQgPSBpbnB1dE9yaWdpbmF0aW5nRmllbGQuc3BsaXQoJy4nKTtcclxuXHRcdFx0XHRcdHZhciBvYnNlcnZlZER5bmFtaWNGaWVsZE91dGNvbWUgPSB0aGlzLmlzRHluYW1pY0ZpZWxkIFxyXG5cdFx0XHRcdFx0XHQ/IG9ic2VydmVkRmllbGQuc3BsaXQoJy4nKS5tYXAoKHNlZywgaykgPT4gc2VnIHx8IGlucHV0T3JpZ2luYXRpbmdGaWVsZFNwbGl0W2tdIHx8ICcnKS5qb2luKCcuJylcclxuXHRcdFx0XHRcdFx0OiBvYnNlcnZlZEZpZWxkO1xyXG5cdFx0XHRcdFx0X3B1c2hVbmlxdWUoZHluYW1pY0ZpZWxkT3V0Y29tZXNbaV0sIG9ic2VydmVkRHluYW1pY0ZpZWxkT3V0Y29tZSk7XHJcblx0XHRcdFx0XHRyZXR1cm4gKG9ic2VydmVkRHluYW1pY0ZpZWxkT3V0Y29tZSA9PT0gaW5wdXRPcmlnaW5hdGluZ0ZpZWxkICYmICFldnQuc3JjRXZ0XHJcblx0XHRcdFx0XHRcdHx8ICh0aGlzLnBhcmFtcy5vYnNlcnZlVXAgIT09IGZhbHNlICYmIChvYnNlcnZlZER5bmFtaWNGaWVsZE91dGNvbWUgKyAnLicpLnN0YXJ0c1dpdGgoaW5wdXRPcmlnaW5hdGluZ0ZpZWxkICsgJy4nKSlcclxuXHRcdFx0XHRcdFx0fHwgKHRoaXMucGFyYW1zLm9ic2VydmVEb3duICYmIChpbnB1dE9yaWdpbmF0aW5nRmllbGQgKyAnLicpLnN0YXJ0c1dpdGgob2JzZXJ2ZWREeW5hbWljRmllbGRPdXRjb21lICsgJy4nKSlcclxuXHRcdFx0XHRcdCkgJiYgKCF0aGlzLmlzRHluYW1pY0ZpZWxkIHx8ICFvYnNlcnZlZER5bmFtaWNGaWVsZE91dGNvbWUuc3BsaXQoJy4nKS5maWx0ZXIoc2VnID0+ICFzZWcpLmxlbmd0aCk7XHJcblx0XHRcdFx0fSkubGVuZ3RoO1xyXG5cdFx0XHR9KS5sZW5ndGg7XHJcblx0XHRcdGlmIChtYXRjaGVzKSB7XHJcblx0XHRcdFx0X2Nyb3NzSm9pbihkeW5hbWljRmllbGRPdXRjb21lcykuZm9yRWFjaChjYWxsYmFjayk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSBpZiAoIWV2dC5zcmNFdnQgfHwgdGhpcy5wYXJhbXMub2JzZXJ2ZURvd24pIHtcclxuXHRcdFx0Y2FsbGJhY2soKTtcclxuXHRcdH1cclxuXHR9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBSZXR1cm4gdGhlIHJlbWFpbmRlciBvZiBhIHN0cmluZyBhZnRlciBhIGdpdmVuIHZhbHVlLlxyXG4gKlxyXG4gKiBAcGFyYW0gIHN0cmluZyAgc3ViamVjdFxyXG4gKiBAcGFyYW0gIHN0cmluZyAgc2VhcmNoXHJcbiAqIEBwYXJhbSAgYm9vbFx0ICAgYWZ0ZXJMYXN0XHJcbiAqXHJcbiAqIEByZXR1cm4gc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdWJqZWN0LCBzZWFyY2gsIGFmdGVyTGFzdCA9IGZhbHNlKSB7XHJcblx0aWYgKHNlYXJjaCA9PSAnJykge1xyXG5cdFx0cmV0dXJuIHN1YmplY3Q7XHJcblx0fVxyXG5cdHZhciBwb3MgPSBhZnRlckxhc3QgPyBzdWJqZWN0Lmxhc3RJbmRleE9mKHNlYXJjaCkgOiBzdWJqZWN0LmluZGV4T2Yoc2VhcmNoKTtcclxuXHRpZiAocG9zID09PSAtMSkge1xyXG5cdFx0cmV0dXJuICcnO1xyXG5cdH1cclxuXHRyZXR1cm4gc3ViamVjdC5zdWJzdHIocG9zICsgc2VhcmNoLmxlbmd0aCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfYXJyRnJvbSBmcm9tICcuL2Zyb20uanMnO1xyXG5cclxuLyoqXHJcbiAqIEFjY2VwdHMgYSBsaXN0IG9mIGNvbHVtbiBhbmQgam9pbnMgdGhlbSB0byBhIHRhYmxlLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXkgXHRhcnJcclxuICpcclxuICogQHJldHVybiBudW1iZXJcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFycikge1xyXG5cdHJldHVybiBhcnIucmVkdWNlKChjdXJyVGFibGUsIGNvbHVtbikgPT4ge1xyXG5cdFx0dmFyIG5ld1RhYmxlID0gW107XHJcblx0XHRjdXJyVGFibGUuZm9yRWFjaChyb3cgPT4ge1xyXG5cdFx0XHRfYXJyRnJvbShjb2x1bW4pLmZvckVhY2goY29sdW1uID0+IHtcclxuXHRcdFx0XHR2YXIgX3JvdyA9IHJvdy5zbGljZSgpO1xyXG5cdFx0XHRcdF9yb3cucHVzaChjb2x1bW4pO1xyXG5cdFx0XHRcdG5ld1RhYmxlLnB1c2goX3Jvdyk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gbmV3VGFibGU7XHJcblx0fSwgW1tdXSk7XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0Z1bmN0aW9uIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IF9nZXRUeXBlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvZ2V0VHlwZS5qcyc7XHJcbmltcG9ydCBPYnNlcnZlckJhc2UgZnJvbSAnLi9pbnRlcm5hbC9PYnNlcnZlckJhc2UuanMnO1xyXG5pbXBvcnQgT2JzZXJ2ZXIgZnJvbSAnLi9pbnRlcm5hbC9PYnNlcnZlci5qcyc7XHJcblxyXG4vKipcclxuICogQWRkcyBhbiBvYnNlcnZlciB0byBhbiBvYmplY3QncyBmaXJlYmFzZS5cclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdFx0XHRcdFx0b2JqZWN0XHJcbiAqIEBwYXJhbSBzdHJpbmd8YXJyYXl8ZnVuY3Rpb25cdFx0ZmllbGRzXHJcbiAqIEBwYXJhbSBmdW5jdGlvblx0XHRcdFx0XHRjYWxsYmFja1xyXG4gKiBAcGFyYW0gb2JqZWN0XHRcdFx0XHRcdHBhcmFtc1xyXG4gKlxyXG4gKiBAcmV0dXJuIE9ic2VydmVyXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmplY3QsIGZpZWxkcywgY2FsbGJhY2sgPSBudWxsLCBwYXJhbXMgPSB7fSkge1xyXG5cdGlmICghb2JqZWN0IHx8ICFfaXNUeXBlT2JqZWN0KG9iamVjdCkpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignT2JqZWN0IG11c3QgYmUgb2YgdHlwZSBvYmplY3QhJyk7XHJcblx0fVxyXG5cdGlmIChfaXNGdW5jdGlvbihmaWVsZHMpKSB7XHJcblx0XHRwYXJhbXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGNhbGxiYWNrIDoge307XHJcblx0XHRjYWxsYmFjayA9IGZpZWxkcztcclxuXHRcdGZpZWxkcyA9IG51bGw7XHJcblx0fVxyXG5cdGlmICghX2lzRnVuY3Rpb24oY2FsbGJhY2spKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0NhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbjsgXCInICsgX2dldFR5cGUoY2FsbGJhY2spICsgJ1wiIGdpdmVuIScpO1xyXG5cdH1cclxuXHR2YXIgZmlyZWJhc2U7XHJcblx0aWYgKCEoZmlyZWJhc2UgPSBPYnNlcnZlckJhc2UuZ2V0Rm9yVGFyZ2V0KG9iamVjdCkpKSB7XHJcblx0XHRmaXJlYmFzZSA9IE9ic2VydmVyQmFzZS5jcmVhdGVGb3JUYXJnZXQob2JqZWN0KTtcclxuXHR9XHJcblx0cmV0dXJuIGZpcmViYXNlLmFkZEZpcmVhYmxlKG5ldyBPYnNlcnZlcihjYWxsYmFjaywgZmllbGRzLCBwYXJhbXMpKTtcclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX29iakZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZnJvbS5qcyc7XHJcbmltcG9ydCBNdXRhdGlvbkV2ZW50IGZyb20gJy4vaW50ZXJuYWwvTXV0YXRpb25FdmVudC5qcyc7XHJcbmltcG9ydCBPYnNlcnZlckJhc2UgZnJvbSAnLi9pbnRlcm5hbC9PYnNlcnZlckJhc2UuanMnO1xyXG5pbXBvcnQgb2JzZXJ2ZSBmcm9tICcuL29ic2VydmUuanMnO1xyXG5cclxuLyoqXHJcbiAqIEJ1YmJsZSBoZWxwZXJcclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdFx0dGFyZ2V0XHJcbiAqIEBwYXJhbSBzdHJpbmdcdFx0ZmllbGRcclxuICogQHBhcmFtIGFycmF5fG9iamVjdFx0b2JqZWN0XHJcbiAqXHJcbiAqIEByZXR1cm4gdm9pZFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odGFyZ2V0LCBmaWVsZCwgb2JqZWN0KSB7XHJcblx0dmFyIGZpcmViYXNlO1xyXG5cdG9ic2VydmUob2JqZWN0LCAoZW50cmllcywgX2VudHJpZXMsIGUpID0+IHtcclxuXHRcdGlmIChmaXJlYmFzZSA9IE9ic2VydmVyQmFzZS5nZXRGb3JUYXJnZXQodGFyZ2V0KSkge1xyXG5cdFx0XHR2YXIgYmFzZSA9IF9vYmpGcm9tKGZpZWxkLCBvYmplY3QpO1xyXG5cdFx0XHRyZXR1cm4gZmlyZWJhc2UuZmlyZShuZXcgTXV0YXRpb25FdmVudCh0YXJnZXQsIHt0eXBlOmUudHlwZSwgYnViYmxpbmc6dHJ1ZSwgZGF0YTpiYXNlLCBfZGF0YTpiYXNlLCBzcmNFdnQ6ZX0pKTtcclxuXHRcdH1cclxuXHR9LCB7b2JzZXJ2ZURvd246dHJ1ZSwgdGFnczpbJyNlLWJ1YmJsaW5nJywgZmllbGQsIHRhcmdldF19KTtcclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2NvcHkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovY29weS5qcyc7XHJcbmltcG9ydCBfbWVyZ2UgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovbWVyZ2UuanMnO1xyXG5pbXBvcnQgX3VuaXF1ZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci91bmlxdWUuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgTXV0YXRpb25FdmVudCBmcm9tICcuL2ludGVybmFsL011dGF0aW9uRXZlbnQuanMnO1xyXG5pbXBvcnQgT2JzZXJ2ZXJCYXNlIGZyb20gJy4vaW50ZXJuYWwvT2JzZXJ2ZXJCYXNlLmpzJztcclxuaW1wb3J0IHVubGluayBmcm9tICcuL3VubGluay5qcyc7XHJcbmltcG9ydCBsaW5rIGZyb20gJy4vbGluay5qcyc7XHJcblxyXG4vKipcclxuICogRXhlY3V0ZXMgYSBjYWxsYmFjayBmdW5jdGlvbiBvbiBhIHRhcmdldCBpbiBcInRyYW5zYWN0aW9uXCIgbW9kZS5cclxuICogRmlyZXMgYW55IG9ic2VydmVycyB0aGF0IG1heSBiZSBib3VuZCB0byB0YXJnZXQgb24gcmVjb3JkZWQgY2hhbmdlcy5cclxuICpcclxuICogQHBhcmFtIGFycmF5XHRcdFx0dGFyZ2V0c1xyXG4gKiBAcGFyYW0gZnVuY3Rpb25cdFx0Y2FsbGJhY2tcclxuICogQHBhcmFtIGFycmF5XHRcdFx0a2V5c1xyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdHJldHVybkV2ZW50XHJcbiAqXHJcbiAqIEByZXR1cm4gYXJyYXl8RXZlbnRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldHMsIGNhbGxiYWNrLCBrZXlzID0gW10sIHJldHVybkV2ZW50ID0gZmFsc2UpIHtcclxuXHR2YXIgY29udGV4dCA9IHRhcmdldHMubWFwKCh0YXJnZXQsIGkpID0+IHtcclxuXHRcdGlmICghdGFyZ2V0IHx8ICFfaXNUeXBlT2JqZWN0KHRhcmdldCkpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdUYXJnZXQgbXVzdCBiZSBvZiB0eXBlIG9iamVjdCEnKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB7XHJcblx0XHRcdHRhcmdldCxcclxuXHRcdFx0dGFyZ2V0Q29weTogX2NvcHkodGFyZ2V0LCBrZXlzKSxcclxuXHRcdFx0c2V0RGF0YToge30sXHJcblx0XHRcdF9zZXREYXRhOiB7fSxcclxuXHRcdFx0ZGVsRGF0YToge30sIFxyXG5cdFx0XHRfZGVsRGF0YToge30sXHJcblx0XHRcdGNyZWF0ZWQ6IFtdLFxyXG5cdFx0XHRkZWxldGVkOiBbXSxcclxuXHRcdH07XHJcblx0fSk7XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0dmFyIHJlc3VsdCA9IGNhbGxiYWNrKC4uLnRhcmdldHMpO1xyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdGNvbnRleHQubWFwKGNudHh0ID0+IHtcclxuXHRcdHZhciBpbml0aWFsS2V5cyA9IE9iamVjdC5rZXlzKGNudHh0LnRhcmdldENvcHkpO1xyXG5cdFx0dmFyIGN1cnJlbnRLZXlzID0gT2JqZWN0LmtleXMoY250eHQudGFyZ2V0KTtcclxuXHRcdHZhciBjaGFuZ2VkS2V5cyA9IF91bmlxdWUoaW5pdGlhbEtleXMuY29uY2F0KGN1cnJlbnRLZXlzKSkuZmlsdGVyKGtleSA9PiB7XHJcblx0XHRcdGlmICgoa2V5cy5sZW5ndGggJiYgIWtleXMuaW5jbHVkZXMoa2V5KSkgXHJcblx0XHRcdHx8IChfaXNBcnJheShjbnR4dC50YXJnZXQpICYmIChrZXkgPT09ICdsZW5ndGgnIHx8IGtleSA9PT0gJzwgciBlIGYgbCBlIHggPicpKSkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoIWN1cnJlbnRLZXlzLmluY2x1ZGVzKGtleSkpIHtcclxuXHRcdFx0XHRjbnR4dC5fZGVsRGF0YVtrZXldID0gY250eHQudGFyZ2V0Q29weVtrZXldO1xyXG5cdFx0XHRcdGNudHh0LmRlbERhdGFba2V5XSA9IHVuZGVmaW5lZDtcclxuXHRcdFx0XHRjbnR4dC5kZWxldGVkLnB1c2goa2V5KTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRjbnR4dC5fc2V0RGF0YVtrZXldID0gY250eHQudGFyZ2V0Q29weVtrZXldO1xyXG5cdFx0XHRcdGNudHh0LnNldERhdGFba2V5XSA9IGNudHh0LnRhcmdldFtrZXldO1xyXG5cdFx0XHRcdGlmICghaW5pdGlhbEtleXMuaW5jbHVkZXMoa2V5KSkge1xyXG5cdFx0XHRcdFx0Y250eHQuY3JlYXRlZC5wdXNoKGtleSk7XHJcblx0XHRcdFx0fSBcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoY250eHQudGFyZ2V0Q29weVtrZXldICE9PSBjbnR4dC50YXJnZXRba2V5XSkge1xyXG5cdFx0XHRcdC8vIFVub2JzZXJ2ZSBvdXRnb2luZyB2YWx1ZSBmb3IgYnViYmxpbmdcclxuXHRcdFx0XHRpZiAoY250eHQudGFyZ2V0Q29weVtrZXldICYmIF9pc1R5cGVPYmplY3QoY250eHQudGFyZ2V0Q29weVtrZXldKSkge1xyXG5cdFx0XHRcdFx0dW5saW5rKGNudHh0LnRhcmdldCwga2V5LCBjbnR4dC50YXJnZXRDb3B5W2tleV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQvLyBPYnNlcnZlIGluY29taW5nIHZhbHVlIGZvciBidWJibGluZ1xyXG5cdFx0XHRcdGlmIChjbnR4dC50YXJnZXRba2V5XSAmJiBfaXNUeXBlT2JqZWN0KGNudHh0LnRhcmdldFtrZXldKSkge1xyXG5cdFx0XHRcdFx0bGluayhjbnR4dC50YXJnZXQsIGtleSwgY250eHQudGFyZ2V0W2tleV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRkZWxldGUgY250eHQuc2V0RGF0YVtrZXldO1xyXG5cdFx0XHRkZWxldGUgY250eHQuX3NldERhdGFba2V5XTtcclxuXHRcdH0pO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHR2YXIgZXZ0LCBtdXRhdGlvbkJhc2U7XHJcblx0XHRpZiAoKG11dGF0aW9uQmFzZSA9IE9ic2VydmVyQmFzZS5nZXRGb3JUYXJnZXQoY250eHQudGFyZ2V0KSkgfHwgcmV0dXJuRXZlbnQpIHtcclxuXHRcdFx0ZXZ0ID0gbmV3IE11dGF0aW9uRXZlbnQoY250eHQudGFyZ2V0LCB7XHJcblx0XHRcdFx0dHlwZTondHJhbnNhY3Rpb24nLCBcclxuXHRcdFx0XHRkYXRhOl9tZXJnZShjbnR4dC5zZXREYXRhLCBjbnR4dC5kZWxEYXRhKSxcclxuXHRcdFx0XHRfZGF0YTpfbWVyZ2UoY250eHQuX3NldERhdGEsIGNudHh0Ll9kZWxEYXRhKSxcclxuXHRcdFx0XHRjcmVhdGVkOmNudHh0LmNyZWF0ZWQsXHJcblx0XHRcdFx0ZGVsZXRlZDpjbnR4dC5kZWxldGVkXHJcblx0XHRcdH0pO1xyXG5cdFx0XHRpZiAobXV0YXRpb25CYXNlKSB7XHJcblx0XHRcdFx0aWYgKE9iamVjdC5rZXlzKGNudHh0LmRlbERhdGEpLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0ZXZ0LnJlc3BvbnNlKG11dGF0aW9uQmFzZS5maXJlKFxyXG5cdFx0XHRcdFx0XHRuZXcgTXV0YXRpb25FdmVudChjbnR4dC50YXJnZXQsIHt0eXBlOidkZWwnLCBkYXRhOmNudHh0LmRlbERhdGEsIF9kYXRhOmNudHh0Ll9kZWxEYXRhLCBkZWxldGVkOmNudHh0LmRlbGV0ZWR9KVxyXG5cdFx0XHRcdFx0KSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmIChPYmplY3Qua2V5cyhjbnR4dC5zZXREYXRhKS5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdGV2dC5yZXNwb25zZShtdXRhdGlvbkJhc2UuZmlyZShcclxuXHRcdFx0XHRcdFx0bmV3IE11dGF0aW9uRXZlbnQoY250eHQudGFyZ2V0LCB7dHlwZTonc2V0JywgZGF0YTpjbnR4dC5zZXREYXRhLCBfZGF0YTpjbnR4dC5fc2V0RGF0YSwgY3JlYXRlZDpjbnR4dC5jcmVhdGVkfSlcclxuXHRcdFx0XHRcdCkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJldHVybkV2ZW50ID8gZXZ0IDogY2hhbmdlZEtleXM7XHJcblx0fSk7XHJcblx0cmV0dXJuIHJlc3VsdDtcclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIFJldHVybnMgYSBsaXN0IG9mIHVuaXF1ZSBpdGVtcy5cclxuICpcclxuICogQHBhcmFtIGFycmF5XHQgXHRcdFx0XHRhcnJcclxuICpcdCAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFycikge1xyXG5cdGNvbnN0IGRpc3RpbmN0ID0gKHZhbHVlLCBpbmRleCwgc2VsZikgPT4ge1xyXG5cdFx0cmV0dXJuIHNlbGYuaW5kZXhPZih2YWx1ZSkgPT09IGluZGV4O1xyXG5cdH07XHJcblx0cmV0dXJuIGFyci5maWx0ZXIoZGlzdGluY3QpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX29iakZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZnJvbS5qcyc7XHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVtZXJpYy5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBRdWVyeUV2ZW50IGZyb20gJy4vaW50ZXJuYWwvUXVlcnlFdmVudC5qcyc7XHJcbmltcG9ydCBUcmFwQmFzZSBmcm9tICcuL2ludGVybmFsL1RyYXBCYXNlLmpzJztcclxuaW1wb3J0IHRyYW5zYWN0aW9uIGZyb20gJy4vdHJhbnNhY3Rpb24uanMnO1xyXG5cclxuLyoqXHJcbiAqIFJ1bnMgYSBcImdldFwiIHF1ZXJ5IG9wZXJhdGlvbiBvbiBhIHRhcmdldC5cclxuICogRmlyZXMgYW55IHN1Y2ggcXVlcnkgb2JzZXJ2ZXJzIHRoYXQgbWF5IGJlIGJvdW5kIHRvIHRhcmdldC5cclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdFx0dGFyZ2V0XHJcbiAqIEBwYXJhbSBzdHJpbmd8YXJyYXlcdGtleXNcclxuICpcclxuICogQHJldHVybiBtaXhlZFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odGFyZ2V0LCBrZXlzKSB7XHJcblx0aWYgKCF0YXJnZXQgfHwgIV9pc1R5cGVPYmplY3QodGFyZ2V0KSkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdUYXJnZXQgbXVzdCBiZSBvZiB0eXBlIG9iamVjdCEnKTtcclxuXHR9XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0Ly8gRXhlY3V0ZSBhbnkgXCJnZXRcIiB0cmFwcywgb3RoZXJ3aXNlIFwiZ2V0XCIgdGhlIGRlZmF1bHQgd2F5XHJcblx0dmFyIHZhbHVlLCB0cmFwQmFzZSwgZGVmYXVsdEdldCA9IGZ1bmN0aW9uKF92YWx1ZSkge1xyXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBfdmFsdWUgOiAoX2lzQXJyYXkoa2V5cykgPyBfb2JqRnJvbShrZXlzLCB0YXJnZXQpIDogdGFyZ2V0W2tleXNdKTtcclxuXHR9O1xyXG5cdGlmICh0cmFwQmFzZSA9IFRyYXBCYXNlLmdldEZvclRhcmdldCh0YXJnZXQpKSB7XHJcblx0XHR2YWx1ZSA9IHRyYXBCYXNlLmZpcmUobmV3IFF1ZXJ5RXZlbnQodGFyZ2V0LCB7dHlwZTonZ2V0JywgcXVlcnk6a2V5c30pLCBkZWZhdWx0R2V0KTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0dmFsdWUgPSBkZWZhdWx0R2V0KCk7XHJcblx0fVxyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdC8vIEV4ZWN1dGUgYXJyYXkgbWV0aG9kcyBpbiBcIm11dGF0aW9uXCIgbW9kZVxyXG5cdGlmIChfaXNBcnJheSh0YXJnZXQpICYmICFfaXNOdW1lcmljKGtleXMpICYmIF9pc0Z1bmN0aW9uKHZhbHVlKSkge1xyXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIHJlZmxleEFycmF5TWV0aG9kV3JhcHBlciguLi5hcmdzKSB7XHJcblx0XHRcdHJldHVybiB0cmFuc2FjdGlvbihbdGFyZ2V0XSwgKCkgPT4ge1xyXG5cdFx0XHRcdHJldHVybiB2YWx1ZS5hcHBseSh0YXJnZXQsIGFyZ3MpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH07XHJcblx0fVxyXG5cdHJldHVybiB2YWx1ZTtcclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIEFMTCBpdGVtcyBwYXNzIHRoZSB0ZXN0LlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXkgXHRhcnJcclxuICogQHBhcmFtIGZ1bmN0aW9uIFx0Y2FsbGJhY2tcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIGNhbGxiYWNrKSB7XHJcblx0cmV0dXJuIGFyci5yZWR1Y2UoKHByZXZUZXN0LCBpdG0pID0+IHByZXZUZXN0ICYmIGNhbGxiYWNrKGl0bSksIHRydWUpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBRdWVyeUV2ZW50IGZyb20gJy4vaW50ZXJuYWwvUXVlcnlFdmVudC5qcyc7XHJcbmltcG9ydCBUcmFwQmFzZSBmcm9tICcuL2ludGVybmFsL1RyYXBCYXNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSdW5zIGFuIFwiaW5cIiBxdWVyeSBvcGVyYXRpb24gb24gYSB0YXJnZXQuXHJcbiAqIEZpcmVzIGFueSBzdWNoIHF1ZXJ5IG9ic2VydmVycyB0aGF0IG1heSBiZSBib3VuZCB0byB0YXJnZXQuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdHRhcmdldFxyXG4gKiBAcGFyYW0gc3RyaW5nXHRcdGtleVxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldCwga2V5KSB7XHJcblx0aWYgKCF0YXJnZXQgfHwgIV9pc1R5cGVPYmplY3QodGFyZ2V0KSkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdUYXJnZXQgbXVzdCBiZSBvZiB0eXBlIG9iamVjdCEnKTtcclxuXHR9XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0Ly8gRXhlY3V0ZSBhbnkgXCJoYXNcIiB0cmFwcywgb3RoZXJ3aXNlIFwidGVzdFwiIHRoZSBkZWZhdWx0IHdheVxyXG5cdHZhciB0cmFwQmFzZSwgZGVmYXVsdEhhcyA9IGZ1bmN0aW9uKF9zdGF0ZSkge1xyXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyBfc3RhdGUgOiAoa2V5IGluIHRhcmdldCk7XHJcblx0fTtcclxuXHRpZiAodHJhcEJhc2UgPSBUcmFwQmFzZS5nZXRGb3JUYXJnZXQodGFyZ2V0KSkge1xyXG5cdFx0cmV0dXJuIHRyYXBCYXNlLmZpcmUobmV3IFF1ZXJ5RXZlbnQodGFyZ2V0LCB7dHlwZTonaGFzJywgcXVlcnk6a2V5fSksIGRlZmF1bHRIYXMpO1xyXG5cdH1cclxuXHRyZXR1cm4gZGVmYXVsdEhhcygpO1xyXG59XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfYXJyRnJvbSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mcm9tLmpzJztcclxuaW1wb3J0IF9hbGwgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvYWxsLmpzJztcclxuaW1wb3J0IF9pc1N0cmluZyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzU3RyaW5nLmpzJztcclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNOdW1iZXIgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bWJlci5qcyc7XHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc09iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IE11dGF0aW9uRXZlbnQgZnJvbSAnLi9pbnRlcm5hbC9NdXRhdGlvbkV2ZW50LmpzJztcclxuaW1wb3J0IFF1ZXJ5RXZlbnQgZnJvbSAnLi9pbnRlcm5hbC9RdWVyeUV2ZW50LmpzJztcclxuaW1wb3J0IE9ic2VydmVyQmFzZSBmcm9tICcuL2ludGVybmFsL09ic2VydmVyQmFzZS5qcyc7XHJcbmltcG9ydCBUcmFwQmFzZSBmcm9tICcuL2ludGVybmFsL1RyYXBCYXNlLmpzJztcclxuaW1wb3J0IHVubGluayBmcm9tICcuL3VubGluay5qcyc7XHJcbmltcG9ydCBsaW5rIGZyb20gJy4vbGluay5qcyc7XHJcbmltcG9ydCByZWZsZXhIYXMgZnJvbSAnLi9oYXMuanMnO1xyXG5cclxuLyoqXHJcbiAqIEV4ZWN1dGVzIGEgXCJfc2V0UHJvcFwiIHR5cGUgb2Ygb3BlcmF0aW9uIG9uIGEgdGFyZ2V0LlxyXG4gKiBGaXJlcyBhbnkgb2JzZXJ2ZXJzIGZvciB0aGUgc3BlY2lmaWMgdHlwZSB0aGF0IG1heSBiZSBib3VuZCB0byB0YXJnZXQuXHJcbiAqXHJcbiAqIEBwYXJhbSBib29sXHRcdFx0ZGVmaW5lXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdHRhcmdldFxyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF5XHRrZXlzT3JQYXlsb2FkXHJcbiAqIEBwYXJhbSBtaXhlZFx0XHRcdHZhbHVlXHJcbiAqIEBwYXJhbSBib29sXHRcdFx0cmV0dXJuRXZlbnRcclxuICpcclxuICogQHJldHVybiBib29sfEV2ZW50XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWZpbmUsIHRhcmdldCwga2V5c09yUGF5bG9hZCwgdmFsdWUgPSBudWxsLCByZXR1cm5FdmVudCA9IGZhbHNlKSB7XHJcblx0aWYgKCF0YXJnZXQgfHwgIV9pc1R5cGVPYmplY3QodGFyZ2V0KSkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdUYXJnZXQgbXVzdCBiZSBvZiB0eXBlIG9iamVjdCEnKTtcclxuXHR9XHJcblx0aWYgKF9pc09iamVjdChrZXlzT3JQYXlsb2FkKSkge1xyXG5cdFx0cmV0dXJuRXZlbnQgPSB2YWx1ZTtcclxuXHR9XHJcblx0dmFyIGtleXMgPSBrZXlzT3JQYXlsb2FkLCBfZGF0YSA9IHt9LCBkYXRhID0ge30sIGNyZWF0ZWQgPSBbXTtcclxuXHR2YXIgaGFuZGxlU2V0ID0gKGtleSwgdmFsdWUsIHJlbGF0ZWQpID0+IHtcclxuXHRcdF9kYXRhW2tleV0gPSB0YXJnZXRba2V5XTtcclxuXHRcdGlmICghcmVmbGV4SGFzKHRhcmdldCwga2V5KSkge1xyXG5cdFx0XHRjcmVhdGVkLnB1c2goa2V5KTtcclxuXHRcdH1cclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0dmFyIGRlc2NyaXB0b3I7XHJcblx0XHRpZiAoZGVmaW5lKSB7XHJcblx0XHRcdGRlc2NyaXB0b3IgPSB2YWx1ZSB8fCB7fTtcclxuXHRcdFx0dmFsdWUgPSBkZXNjcmlwdG9yLnZhbHVlO1xyXG5cdFx0fVxyXG5cdFx0Ly8gRXhlY3V0ZSBhbnkgXCJzZXRcIiB0cmFwcywgb3RoZXJ3aXNlIFwic2V0XCIgdGhlIGRlZmF1bHQgd2F5XHJcblx0XHR2YXIgc3VjY2VzcywgdHJhcEJhc2UsIGRlZmF1bHRTZXQgPSBmdW5jdGlvbihfc3VjY2Vzcykge1xyXG5cdFx0XHRpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcclxuXHRcdFx0XHRpZiAoZGVzY3JpcHRvcikge1xyXG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjcmlwdG9yKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0dGFyZ2V0W2tleV0gPSB2YWx1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIF9zdWNjZXNzO1xyXG5cdFx0fTtcclxuXHRcdGlmICh0cmFwQmFzZSA9IFRyYXBCYXNlLmdldEZvclRhcmdldCh0YXJnZXQpKSB7XHJcblx0XHRcdHZhciBkZXRhaWxzID0gZGVzY3JpcHRvciBcclxuXHRcdFx0XHQ/IHt0eXBlOidkZWYnLCBxdWVyeTprZXksIGRlc2NyaXB0b3IsIHJlbGF0ZWR9IFxyXG5cdFx0XHRcdDoge3R5cGU6J3NldCcsIHF1ZXJ5OmtleSwgdmFsdWUsIHJlbGF0ZWR9O1xyXG5cdFx0XHRzdWNjZXNzID0gdHJhcEJhc2UuZmlyZShuZXcgUXVlcnlFdmVudCh0YXJnZXQsIGRldGFpbHMpLCBkZWZhdWx0U2V0KTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHN1Y2Nlc3MgPSBkZWZhdWx0U2V0KCk7XHJcblx0XHR9XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdGlmIChzdWNjZXNzKSB7XHJcblx0XHRcdGRhdGFba2V5XSA9IHZhbHVlO1xyXG5cdFx0XHRpZiAoZGF0YVtrZXldICE9PSBfZGF0YVtrZXldKSB7XHJcblx0XHRcdFx0Ly8gVW5vYnNlcnZlIG91dGdvaW5nIHZhbHVlIGZvciBidWJibGluZ1xyXG5cdFx0XHRcdGlmIChfZGF0YVtrZXldICYmIF9pc1R5cGVPYmplY3QoX2RhdGFba2V5XSkpIHtcclxuXHRcdFx0XHRcdHVubGluayh0YXJnZXQsIGtleSwgX2RhdGFba2V5XSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdC8vIE9ic2VydmUgaW5jb21pbmcgdmFsdWUgZm9yIGJ1YmJsaW5nXHJcblx0XHRcdFx0aWYgKGRhdGFba2V5XSAmJiBfaXNUeXBlT2JqZWN0KGRhdGFba2V5XSkpIHtcclxuXHRcdFx0XHRcdGxpbmsodGFyZ2V0LCBrZXksIGRhdGFba2V5XSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGRlbGV0ZSBkYXRhW2tleV07XHJcblx0XHRcdFx0ZGVsZXRlIF9kYXRhW2tleV07XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGRlbGV0ZSBfZGF0YVtrZXldO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHN1Y2Nlc3M7XHJcblx0fTtcclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHR2YXIgc3VjY2Vzc1N0YXRlcyA9IFtdO1xyXG5cdGlmIChfaXNBcnJheShrZXlzKSB8fCAoKF9pc1N0cmluZyhrZXlzKSB8fCBfaXNOdW1iZXIoa2V5cykpICYmIChrZXlzID0gX2FyckZyb20oa2V5cykpKSkge1xyXG5cdFx0c3VjY2Vzc1N0YXRlcyA9IGtleXMubWFwKGtleSA9PiBoYW5kbGVTZXQoa2V5LCB2YWx1ZSwga2V5cykpXHJcblx0fSBlbHNlIGlmIChfaXNPYmplY3Qoa2V5c09yUGF5bG9hZCkpIHtcclxuXHRcdHZhciBwYXlsb2FkS2V5cyA9IE9iamVjdC5rZXlzKGtleXNPclBheWxvYWQpO1xyXG5cdFx0c3VjY2Vzc1N0YXRlcyA9IHBheWxvYWRLZXlzLm1hcChrZXkgPT4gaGFuZGxlU2V0KGtleSwga2V5c09yUGF5bG9hZFtrZXldLCBwYXlsb2FkS2V5cykpXHJcblx0fVxyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdHZhciBldnQsIG11dGF0aW9uQmFzZTtcclxuXHRpZiAoKG11dGF0aW9uQmFzZSA9IE9ic2VydmVyQmFzZS5nZXRGb3JUYXJnZXQodGFyZ2V0KSkgfHwgcmV0dXJuRXZlbnQpIHtcclxuXHRcdGV2dCA9IG5ldyBNdXRhdGlvbkV2ZW50KHRhcmdldCwge3R5cGU6J3NldCcsIGRhdGEsIF9kYXRhLCBjcmVhdGVkfSk7XHJcblx0XHRpZiAobXV0YXRpb25CYXNlKSB7XHJcblx0XHRcdG11dGF0aW9uQmFzZS5maXJlKGV2dCk7XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiByZXR1cm5FdmVudCA/IGV2dCA6IF9hbGwoc3VjY2Vzc1N0YXRlcywgc3RhdGUgPT4gc3RhdGUpO1xyXG59XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfc2V0UHJvcCBmcm9tICcuL19zZXRQcm9wLmpzJztcclxuXHJcbi8qKlxyXG4gKiBFeGVjdXRlcyBhIFwic2V0XCIgb3BlcmF0aW9uIG9uIGEgdGFyZ2V0LlxyXG4gKiBGaXJlcyBhbnkgb2JzZXJ2ZXJzIHRoYXQgbWF5IGJlIGJvdW5kIHRvIHRhcmdldC5cclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdFx0dGFyZ2V0XHJcbiAqIEBwYXJhbSBzdHJpbmd8YXJyYXlcdGtleXNPclBheWxvYWRcclxuICogQHBhcmFtIG1peGVkXHRcdFx0dmFsdWVcclxuICogQHBhcmFtIGJvb2xcdFx0XHRyZXR1cm5FdmVudFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2x8RXZlbnRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldCwga2V5c09yUGF5bG9hZCwgdmFsdWUgPSBudWxsLCByZXR1cm5FdmVudCA9IGZhbHNlKSB7XHJcblx0cmV0dXJuIF9zZXRQcm9wKGZhbHNlLypkZWZpbmUqLywgLi4uYXJndW1lbnRzKTtcclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRmlyZWJhc2UgZnJvbSAnLi9GaXJlYmFzZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBMaXN0ZW5lckJhc2UgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpc3RlbmVyQmFzZSBleHRlbmRzIEZpcmViYXNlIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBGaXJlcyBhbGwgb2JzZXJ2ZXJzIHdpdGggdGhlIGdpdmVuIGV2dCAoY2hhbmdlKS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBFdmVudFx0XHRcdFx0ZXZ0XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIEV2ZW50XHJcblx0ICovXHJcblx0ZmlyZShldnQpIHtcclxuXHRcdHRoaXMuZmlyZWFibGVzLmZvckVhY2gobGlzdGVuZXIgPT4ge1xyXG5cdFx0XHRpZiAoZXZ0LnByb3BhZ2F0aW9uU3RvcHBlZCkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRsaXN0ZW5lci5maXJlKGV2dCk7XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiBldnQ7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIGNyZWF0ZUZvclRhcmdldChvYmplY3QsIFN0YXRpYyA9IExpc3RlbmVyQmFzZSkge1xyXG5cdFx0cmV0dXJuIHN1cGVyLmNyZWF0ZUZvclRhcmdldChvYmplY3QsICdsaXN0ZW5lcnMnLCBTdGF0aWMpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBnZXRGb3JUYXJnZXQob2JqZWN0KSB7XHJcblx0XHRyZXR1cm4gc3VwZXIuZ2V0Rm9yVGFyZ2V0KG9iamVjdCwgJ2xpc3RlbmVycycpO1xyXG5cdH1cclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRmlyZWFibGUgZnJvbSAnLi9GaXJlYWJsZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBMaXN0ZW5lciBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBGaXJlYWJsZSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogSW5pdGlhbGl6ZXMgdGhlIGluc3RhbmNlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uXHRcdGhhbmRsZXJcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdHBhcmFtc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoaGFuZGxlciwgcGFyYW1zID0ge30pIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xyXG5cdFx0dGhpcy5wYXJhbXMgPSBwYXJhbXM7XHJcblxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQ2FsbHMgdGhlIG9ic2VydmVyJ3MgaGFuZGxlciBmdW5jdGlvblxyXG5cdCAqIG9uIG1hdGNoaW5nIHdpdGggdGhlIGV2ZW50J3MgZmllbGRzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIE11dGF0aW9uRXZlbnRcdFx0XHQgXHRldnRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGZpcmUoZXZ0KSB7XHJcblx0XHRpZiAodGhpcy5wYXJhbXMudHlwZSA9PT0gZXZ0LnR5cGUpIHtcclxuXHRcdFx0ZXZ0LnJlc3BvbnNlKHRoaXMuaGFuZGxlci5jYWxsKHRoaXMudGFyZ2V0LCBldnQuZSkpO1xyXG5cdFx0fVxyXG5cdH1cclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgTGlzdGVuZXJCYXNlIGZyb20gJy4vaW50ZXJuYWwvTGlzdGVuZXJCYXNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiBVbmJpbmRzIGxpc3RlbmVycyBmcm9tIGFuIGVsZW1lbnQncyBldmVudCBjb250cm9sbGVyLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0IFx0XHRcdFx0b2JqZWN0XHJcbiAqIEBwYXJhbSBzdHJpbmdcdFx0IFx0XHRcdHR5cGVcclxuICogQHBhcmFtIGZ1bmN0aW9uXHRcdCBcdFx0XHRvcmlnaW5hbENhbGxiYWNrXHJcbiAqIEBwYXJhbSBvYmplY3RcdFx0XHRcdFx0cGFyYW1zXHJcbiAqXHJcbiAqIEByZXR1cm4gdm9pZFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0LCB0eXBlLCBvcmlnaW5hbENhbGxiYWNrID0gbnVsbCwgcGFyYW1zID0ge30pIHtcclxuXHR2YXIgZmlyZWJhc2U7XHJcblx0aWYgKGZpcmViYXNlID0gTGlzdGVuZXJCYXNlLmdldEZvclRhcmdldChvYmplY3QpKSB7XHJcblx0XHRmaXJlYmFzZS5maW5kRmlyZWFibGVzKHtoYW5kbGVyOm9yaWdpbmFsQ2FsbGJhY2ssIHR5cGUsIHBhcmFtc30pLmZvckVhY2gobGlzdGVuZXIgPT4ge1xyXG5cdFx0XHRmaXJlYmFzZS5yZW1vdmVGaXJlYWJsZShsaXN0ZW5lcik7XHJcblx0XHR9KTtcclxuXHR9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9tZXJnZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9tZXJnZS5qcyc7XHJcbmltcG9ydCBMaXN0ZW5lckJhc2UgZnJvbSAnLi9pbnRlcm5hbC9MaXN0ZW5lckJhc2UuanMnO1xyXG5pbXBvcnQgRXZlbnQgZnJvbSAnLi9pbnRlcm5hbC9FdmVudC5qcyc7XHJcblxyXG4vKipcclxuICogRmlyZXMgYW4gZXZlbnQgb24gYW4gb2JqZWN0J3MgbGlzdGVuZXJCYXNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0IFx0XHRcdG9iamVjdFxyXG4gKiBAcGFyYW0gc3RyaW5nICAgICAgICAgICAgICAgIHR5cGVcclxuICogQHBhcmFtIG9iamVjdCAgICAgICAgICAgICAgICBkYXRhXHJcbiAqXHJcbiAqIEByZXR1cm4gRXZlbnRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iamVjdCwgdHlwZSwgZGF0YSA9IHt9KSB7XHJcblx0dmFyIGZpcmViYXNlO1xyXG5cdGlmIChmaXJlYmFzZSA9IExpc3RlbmVyQmFzZS5nZXRGb3JUYXJnZXQob2JqZWN0KSkge1xyXG5cdFx0cmV0dXJuIGZpcmViYXNlLmZpcmUobmV3IEV2ZW50KG9iamVjdCwgX21lcmdlKGRhdGEsIHt0eXBlfSkpKTtcclxuXHR9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IGJ1aWxkIGZyb20gJy4vYnVpbGQuanMnO1xyXG5pbXBvcnQgb2JzZXJ2ZSBmcm9tICcuL29ic2VydmUuanMnO1xyXG5pbXBvcnQgdW5vYnNlcnZlIGZyb20gJy4vdW5vYnNlcnZlLmpzJztcclxuaW1wb3J0IHRyYXAgZnJvbSAnLi90cmFwLmpzJztcclxuaW1wb3J0IHVudHJhcCBmcm9tICcuL3VudHJhcC5qcyc7XHJcbmltcG9ydCBkZWYgZnJvbSAnLi9kZWYuanMnO1xyXG5pbXBvcnQgc2V0IGZyb20gJy4vc2V0LmpzJztcclxuaW1wb3J0IGRlbCBmcm9tICcuL2RlbC5qcyc7XHJcbmltcG9ydCBsaW5rIGZyb20gJy4vbGluay5qcyc7XHJcbmltcG9ydCB1bmxpbmsgZnJvbSAnLi91bmxpbmsuanMnO1xyXG5pbXBvcnQgdHJhbnNhY3Rpb24gZnJvbSAnLi90cmFuc2FjdGlvbi5qcyc7XHJcbmltcG9ydCBnZXQgZnJvbSAnLi9nZXQuanMnO1xyXG5pbXBvcnQgaGFzIGZyb20gJy4vaGFzLmpzJztcclxuaW1wb3J0IGluaXQgZnJvbSAnLi9pbml0LmpzJztcclxuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcclxuaW1wb3J0IG93bktleXMgZnJvbSAnLi9vd25LZXlzLmpzJztcclxuaW1wb3J0IG9uIGZyb20gJy4vb24uanMnO1xyXG5pbXBvcnQgb2ZmIGZyb20gJy4vb2ZmLmpzJztcclxuaW1wb3J0IHRyaWdnZXIgZnJvbSAnLi90cmlnZ2VyLmpzJztcclxuaW1wb3J0IE11dGF0aW9uRXZlbnQgZnJvbSAnLi9pbnRlcm5hbC9NdXRhdGlvbkV2ZW50LmpzJztcclxuaW1wb3J0IFF1ZXJ5RXZlbnQgZnJvbSAnLi9pbnRlcm5hbC9RdWVyeUV2ZW50LmpzJztcclxuaW1wb3J0IEV2ZW50IGZyb20gJy4vaW50ZXJuYWwvRXZlbnQuanMnO1xyXG5cclxuLy8gTm93IHdlJ2xsIG1pbWljayBzdGFuZGFyZCBUcmFwIHByb3BlcnRpZXNcclxuLy8gc28gdGhhdCBjYW4gYmUgdXNlZCBhcyBzdGFuZGFyZCBUcmFwIG91dCBvZiB0aGUgYm94LlxyXG5jb25zdCBkZWxldGVQcm9wZXJ0eSA9IGRlbDtcclxuY29uc3QgZGVmaW5lUHJvcGVydHkgPSBkZWY7XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuXHRidWlsZCxcclxuXHRvYnNlcnZlLFxyXG5cdHVub2JzZXJ2ZSxcclxuXHR0cmFwLFxyXG5cdHVudHJhcCxcclxuXHRkZWYsXHJcblx0ZGVmaW5lUHJvcGVydHksXHJcblx0c2V0LFxyXG5cdGRlbCxcclxuXHRkZWxldGVQcm9wZXJ0eSxcclxuXHRsaW5rLFxyXG5cdHVubGluayxcclxuXHR0cmFuc2FjdGlvbixcclxuXHRnZXQsXHJcblx0aGFzLFxyXG5cdGluaXQsXHJcblx0a2V5cyxcclxuXHRvd25LZXlzLFxyXG5cdG9uLFxyXG5cdG9mZixcclxuXHR0cmlnZ2VyLFxyXG5cdC8vIEV2ZW50c1xyXG5cdE11dGF0aW9uRXZlbnQsXHJcblx0UXVlcnlFdmVudCxcclxuXHRFdmVudCxcclxufTsiLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwic3RyaW5nXCIuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSAnLi4vanMvaXNTdHJpbmcuanMnO1xyXG5cclxuLyoqXHJcbiAqIFNvcnRzIGEgbGlzdCBwZXJmb3JtYW50bHkuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheVx0IFx0XHRcdFx0XHRhcnJcclxuICogQHBhcmFtIHN0cmluZ1x0IFx0XHRcdFx0b3JkZXJcdFx0XHRBU0N8REVTQyBcclxuICogQHBhcmFtIGZ1bmN0aW9uXHRcdFx0XHRcdGNhbGxiYWNrXHJcbiAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFyciwgb3JkZXIsIGNhbGxiYWNrID0gbnVsbCkge1xyXG5cdHZhciBfYXJyID0gW107XHJcblx0Ly8gTWFrZSBhIHNoYWxsb3cgY29weVxyXG5cdHZhciBsZW5ndGggPSBhcnIubGVuZ3RoO1xyXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICsrKSB7XHJcblx0XHRfYXJyLnB1c2goe2luZGV4OiBpLCB2YWx1ZTogY2FsbGJhY2sgPyBjYWxsYmFjayhhcnJbaV0pIDogYXJyW2ldfSk7XHJcblx0fTtcclxuXHRfYXJyLnNvcnQoZnVuY3Rpb24oYSwgYikge1xyXG5cdFx0Ly8gVXNpbmcgbG9jYWxlQ29tcGFyZSBpZiBwb3NzaWJsZVxyXG5cdFx0aWYgKF9pc1N0cmluZyhhLnZhbHVlKSAmJiBcIlwiLmxvY2FsZUNvbXBhcmUpIHtcclxuXHRcdFx0cmV0dXJuIGEudmFsdWUubG9jYWxlQ29tcGFyZShiLnZhbHVlKTtcclxuXHRcdH07XHJcblx0XHRyZXR1cm4gYS52YWx1ZSA9PT0gYi52YWx1ZSA/IDAgOiBhLnZhbHVlID4gYi52YWx1ZSA/IDEgOiAtMTtcclxuXHR9KTtcclxuXHRpZiAoKG9yZGVyIHx8ICcnKS50cmltKCkudG9Mb3dlckNhc2UoKSA9PT0gJ2Rlc2MnKSB7XHJcblx0XHRfYXJyID0gX2Fyci5yZXZlcnNlKCk7XHJcblx0fTtcclxuXHQvLyBGaWxsIHRoZSBvcmRlciB3aXRoIGFjdHVhbCB2YWx1ZXNcclxuXHRyZXR1cm4gX2Fyci5tYXAoaXRtID0+IGFycltpdG0uaW5kZXhdKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcImFycmF5XCIuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBkaWZmZXJlbmNlIG9mIHR3byBhcnJheXM7XHJcbiAqIG9wdGlvbmFsbHkgdXNpbmcgYSBjdXN0b20gbWF0Y2hpbmcgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheSBcdGFyclxyXG4gKiBAcGFyYW0gYXJyYXlcdCBcdGFycjJcclxuICogQHBhcmFtIGZ1bmN0aW9uIFx0Y2FsbGJhY2tcclxuICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyLCBhcnIyLCBjYWxsYmFjayA9IG51bGwpIHtcclxuXHRyZXR1cm4gIV9pc0FycmF5KGFycjIpID8gW10gOiBhcnIuZmlsdGVyKHZhbDEgPT4gY2FsbGJhY2sgXHJcblx0XHQ/IGFycjIuZmlsdGVyKHZhbDIgPT4gY2FsbGJhY2sodmFsMSwgdmFsMikpLmxlbmd0aCBcclxuXHRcdDogYXJyMi5pbmRleE9mKHZhbDEpID09PSAtMVxyXG5cdCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIHB1cmUgb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gIUFycmF5LmlzQXJyYXkodmFsKSAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWw7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIHVuZGVmaW5lZCBvciBpcyBudWxsLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09ICcnO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyB1bmRlZmluZWQgb3IgaXMgb2YgdHlwZSBcInVuZGVmaW5lZFwiLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggJiYgKHZhbCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcIm9iamVjdFwiLlxyXG4gKiBUaGlzIGhvbGRzIHRydWUgZm9yIGFueXRoaW5nIG9iamVjdCwgaW5jbHVkaW5nIGJ1aWx0LWlucy5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnb2JqZWN0JztcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc051bGwgZnJvbSAnLi9pc051bGwuanMnO1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJy4vaXNVbmRlZmluZWQuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuL2lzVHlwZU9iamVjdC5qcyc7XHJcblxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIGVtcHR5IGluIGl0cyBvd24gdHlwZS5cclxuICogVGhpcyBob2xkcyB0cnVlIGZvciBOVUxMcywgVU5ERUZJTkVELCBGQUxTRSwgMCxcclxuICogb2JqZWN0cyB3aXRob3V0IGtleXMsIGVtcHR5IGFycmF5cy5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiBfaXNOdWxsKHZhbCkgfHwgX2lzVW5kZWZpbmVkKHZhbCkgfHwgdmFsID09PSBmYWxzZSB8fCB2YWwgPT09IDAgXHJcblx0XHR8fCAoX2lzVHlwZU9iamVjdCh2YWwpICYmICFPYmplY3Qua2V5cyh2YWwpLmxlbmd0aCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJmdW5jdGlvblwiLlxyXG4gKiBUaGlzIGhvbGRzIHRydWUgZm9yIGJvdGggcmVndWxhciBmdW5jdGlvbnMgYW5kIGNsYXNzZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVHlwZUZ1bmN0aW9uIGZyb20gJy4vaXNUeXBlRnVuY3Rpb24uanMnO1xyXG5cclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwiZnVuY3Rpb25cIi5cclxuICpcclxuICogQHBhcmFtIG9iamVjdCBcdFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIF9pc1R5cGVGdW5jdGlvbih2YWwpIHx8ICh2YWwgJiYge30udG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBmdW5jdGlvbl0nKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcInN0cmluZ1wiIG9yIGEgbnVtZXJpYyBzdHJpbmcuXHJcbiAqIFRoaXMgaG9sZHMgdHJ1ZSBmb3IgYm90aCBudW1iZXJzIGFuZCBudW1lcmljIHN0cmluZ3MuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gdmFsICE9PSB0cnVlICYmIHZhbCAhPT0gZmFsc2UgJiYgdmFsICE9PSBudWxsICYmIHZhbCAhPT0gJycgJiYgIWlzTmFOKHZhbCAqIDEpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEFkZHMgYW4gaXRlbSBpZiBub3QgYWxyZWFkeSBleGlzdC5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqIEBwYXJhbSBhcnJheVx0IFx0Li4uaXRtc1xyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIC4uLml0ZW1zKSB7XHJcblx0aXRlbXMuZm9yRWFjaChpdG0gPT4ge1xyXG5cdFx0aWYgKGFyci5pbmRleE9mKGl0bSkgPCAwKSB7XHJcblx0XHRcdGFyci5wdXNoKGl0bSk7XHJcblx0XHR9XHJcblx0fSk7XHJcblx0cmV0dXJuIGFycjtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9wdXNoVW5pcXVlIGZyb20gJy4uL2Fyci9wdXNoVW5pcXVlLmpzJztcclxuaW1wb3J0IF9nZXRQcm90b3R5cGVDaGFpbiBmcm9tICcuL2dldFByb3RvdHlwZUNoYWluLmpzJztcclxuXHJcbi8qKlxyXG4gKiBFYWdlcmx5IHJldHJpZXZlcyBvYmplY3QgbWVtYmVycyBhbGwgZG93biB0aGUgcHJvdG90eXBlIGNoYWluLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHRvYmpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dW50aWxcclxuICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqLCB1bnRpbCkge1xyXG5cdHZhciBrZXlzQWxsID0gW107XHJcblx0X2dldFByb3RvdHlwZUNoYWluKG9iaiwgdW50aWwpLmZvckVhY2gob2JqID0+IHtcclxuXHRcdF9wdXNoVW5pcXVlKGtleXNBbGwsIC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikpO1xyXG5cdH0pO1xyXG5cdHJldHVybiBrZXlzQWxsO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgcHJvdG90eXBlIGNoYWluLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0IFx0XHRvYmpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dW50aWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmosIHVudGlsKSB7XHJcblx0dW50aWwgPSB1bnRpbCB8fCBPYmplY3QucHJvdG90eXBlO1xyXG5cdHVudGlsID0gdW50aWwgJiYgIV9pc0FycmF5KHVudGlsKSA/IFt1bnRpbF0gOiB1bnRpbDtcclxuXHQvLyBXZSBnZXQgdGhlIGNoYWluIG9mIGluaGVyaXRhbmNlXHJcblx0dmFyIHByb3RvdHlwYWxDaGFpbiA9IFtdO1xyXG5cdHZhciBvYmogPSBvYmo7XHJcblx0d2hpbGUoKG9iaiAmJiAoIXVudGlsIHx8IHVudGlsLmluZGV4T2Yob2JqKSA8IDApICYmIG9iai5uYW1lICE9PSAnZGVmYXVsdCcpKSB7XHJcblx0XHRwcm90b3R5cGFsQ2hhaW4ucHVzaChvYmopO1xyXG5cdFx0b2JqID0gb2JqID8gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgOiBudWxsO1xyXG5cdH1cclxuXHRyZXR1cm4gcHJvdG90eXBhbENoYWluO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICcuLi9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICcuLi9qcy9pc09iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJy4uL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNOdW1lcmljIGZyb20gJy4uL2pzL2lzTnVtZXJpYy5qcyc7XHJcbmltcG9ydCBfZ2V0QWxsUHJvcGVydHlOYW1lcyBmcm9tICcuL2dldEFsbFByb3BlcnR5TmFtZXMuanMnO1xyXG5cclxuLyoqXHJcbiAgKiBNZXJnZXMgdmFsdWVzIGZyb20gc3Vic2VxdWVudCBhcnJheXMvb2JqZWN0cyBmaXJzdCBhcnJheS9vYmplY3Q7XHJcbiAgKiBvcHRpb25hbGx5IHJlY3Vyc2l2ZVxyXG4gICpcclxuICAqIEBwYXJhbSBhcnJheSAuLi5vYmpzXHJcbiAgKlxyXG4gICogQHJldHVybiB2b2lkXHJcbiAgKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VDYWxsYmFjayhvYmpzLCBjYWxsYmFjaywgZGVlcFByb3BzID0gZmFsc2UsIGlzUmVwbGFjZSA9IGZhbHNlLCB3aXRoU3ltYm9scyA9IHRydWUpIHtcclxuXHR2YXIgZGVwdGggPSAwO1xyXG5cdHZhciBvYmoxID0gb2Jqcy5zaGlmdCgpO1xyXG5cdGlmIChfaXNOdW1lcmljKG9iajEpIHx8IG9iajEgPT09IHRydWUgfHwgb2JqMSA9PT0gZmFsc2UpIHtcclxuXHRcdGRlcHRoID0gb2JqMTtcclxuXHRcdG9iajEgPSBvYmpzLnNoaWZ0KCk7XHJcblx0fVxyXG5cdGlmICghb2Jqcy5sZW5ndGgpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignX21lcmdlKCkgcmVxdWlyZXMgdHdvIG9yIG1vcmUgYXJyYXkvb2JqZWN0cy4nKTtcclxuXHR9XHJcblx0b2Jqcy5mb3JFYWNoKChvYmoyLCBpKSA9PiB7XHJcblx0XHRpZiAoIV9pc1R5cGVPYmplY3Qob2JqMikgJiYgIV9pc0Z1bmN0aW9uKG9iajIpKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdChkZWVwUHJvcHMgPyBfZ2V0QWxsUHJvcGVydHlOYW1lcyhvYmoyKSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iajIpKS5mb3JFYWNoKGtleSA9PiB7XHJcblx0XHRcdHZhciB2YWxBdE9iajEgPSBvYmoxW2tleV07XHJcblx0XHRcdHZhciB2YWxBdE9iajIgPSBvYmoyW2tleV07XHJcblx0XHRcdGlmICgoKF9pc0FycmF5KHZhbEF0T2JqMSkgJiYgX2lzQXJyYXkodmFsQXRPYmoyKSkgfHwgKF9pc09iamVjdCh2YWxBdE9iajEpICYmIF9pc09iamVjdCh2YWxBdE9iajIpKSkgXHJcblx0XHRcdCYmIChkZXB0aCA9PT0gdHJ1ZSB8fCBkZXB0aCA+IDApKSB7XHJcblx0XHRcdFx0Ly8gUkVDVVJTRS4uLlxyXG5cdFx0XHRcdG9iajFba2V5XSA9IF9pc0FycmF5KHZhbEF0T2JqMSkgJiYgX2lzQXJyYXkodmFsQXRPYmoyKSA/IFtdIDoge307XHJcblx0XHRcdFx0bWVyZ2VDYWxsYmFjayhbX2lzTnVtZXJpYyhkZXB0aCkgPyBkZXB0aCAtIDEgOiBkZXB0aCwgb2JqMVtrZXldLCB2YWxBdE9iajEsIHZhbEF0T2JqMl0sIGNhbGxiYWNrLCBkZWVwUHJvcHMsIGlzUmVwbGFjZSwgd2l0aFN5bWJvbHMpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKGNhbGxiYWNrKGtleSwgb2JqMSwgb2JqMiwgaSkpIHtcclxuXHRcdFx0XHRpZiAoX2lzQXJyYXkob2JqMSkgJiYgX2lzQXJyYXkob2JqMikpIHtcclxuXHRcdFx0XHRcdGlmIChpc1JlcGxhY2UpIHtcclxuXHRcdFx0XHRcdFx0b2JqMVtrZXldID0gdmFsQXRPYmoyO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0b2JqMS5wdXNoKHZhbEF0T2JqMik7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC8vIEluIGNhc2Ugd2UncmUgc2V0dGluZyBhIHJlYWQtb25seSBwcm9wZXJ0eVxyXG5cdFx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdFx0aWYgKHdpdGhTeW1ib2xzKSB7XHJcblx0XHRcdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iajEsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmoyLCBrZXkpKTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRvYmoxW2tleV0gPSBvYmoyW2tleV07XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0gY2F0Y2goZSkge31cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0pO1xyXG5cdHJldHVybiBvYmoxO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICcuLi9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9pc051bWVyaWMgZnJvbSAnLi4vanMvaXNOdW1lcmljLmpzJztcclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnLi4vanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IF9tZXJnZUNhbGxiYWNrIGZyb20gJy4vbWVyZ2VDYWxsYmFjay5qcyc7XHJcblxyXG4vKipcclxuICogQ29waWVzIGFuIG9iamVjdC5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0b2JqXHJcbiAqIEBwYXJhbSBhcnJheVx0XHQgXHRmaWx0ZXJcclxuICpcclxuICogQHJldHVybiBvYmplY3RcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iaiwgZmlsdGVyID0gW10sIHdpdGhTeW1ib2xzID0gdHJ1ZSkge1xyXG5cdHZhciBkZXB0aCA9IDA7XHJcblx0aWYgKF9pc051bWVyaWMoYXJndW1lbnRzWzBdKSAmJiBfaXNUeXBlT2JqZWN0KGFyZ3VtZW50c1sxXSkpIHtcclxuXHRcdGRlcHRoID0gYXJndW1lbnRzWzBdO1xyXG5cdFx0b2JqID0gYXJndW1lbnRzWzFdO1xyXG5cdFx0ZmlsdGVyID0gYXJndW1lbnRzWzJdIHx8IFtdO1xyXG5cdH1cclxuXHRyZXR1cm4gX21lcmdlQ2FsbGJhY2soW2RlcHRoLCB7fSwgb2JqXSwgKGtleSwgb2JqMSwgb2JqMikgPT4ge1xyXG5cdFx0cmV0dXJuIF9pc0Z1bmN0aW9uKGZpbHRlcikgPyBmaWx0ZXIoa2V5KSBcclxuXHRcdFx0OiAoX2lzQXJyYXkoZmlsdGVyKSAmJiBmaWx0ZXIubGVuZ3RoID8gZmlsdGVyLmluZGV4T2Yoa2V5KSA+IC0xIDogdHJ1ZSk7XHJcblx0fSwgZmFsc2UvKmRlZXBQcm9wcyovLCBmYWxzZS8qaXNSZXBsYWNlKi8sIHdpdGhTeW1ib2xzKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzU3RyaW5nIGZyb20gJy4uL2pzL2lzU3RyaW5nLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gYW4gb2JqZWN0IGZvciB0aGUgZ2l2ZW4gcGFpcihzKSBvZiBpbnB1dC5cclxuICpcclxuICogQHBhcmFtIHN0cmluZ3xhcnJheSBcdFx0XHRrZXlcclxuICogQHBhcmFtIG1peGVkfGFycmF5XHRcdFx0dmFsIFxyXG4gKlxyXG4gKiBAcmV0dXJuIG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oa2V5LCB2YWwgPSBudWxsKSB7XHJcblx0dmFyIG9iaiA9IHt9O1xyXG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XHJcblx0XHRpZiAoX2lzU3RyaW5nKGtleSkpIHtcclxuXHRcdFx0b2JqW2tleV0gPSB2YWw7XHJcblx0XHR9IGVsc2UgaWYgKF9pc0FycmF5KGtleSkgJiYgX2lzQXJyYXkodmFsKSkge1xyXG5cdFx0XHRrZXkuZm9yRWFjaCgoaywgaSkgPT4gb2JqW2tdID0gdmFsW2ldKTtcclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIG9iajtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9tZXJnZUNhbGxiYWNrIGZyb20gJy4vbWVyZ2VDYWxsYmFjay5qcyc7XHJcblxyXG4vKipcclxuICAqIE1lcmdlcyB2YWx1ZXMgZnJvbSBzdWJzZXF1ZW50IGFycmF5cy9vYmplY3RzIGZpcnN0IGFycmF5L29iamVjdDtcclxuICAqIG9wdGlvbmFsbHkgcmVjdXJzaXZlXHJcbiAgKlxyXG4gICogQHBhcmFtIGFycmF5IC4uLm9ianNcclxuICAqXHJcbiAgKiBAcmV0dXJuIHZvaWRcclxuICAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiguLi5vYmpzKSB7XHJcblx0cmV0dXJuIF9tZXJnZUNhbGxiYWNrKG9ianMsIChrLCBvYmoxLCBvYmoyKSA9PiB7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9LCBmYWxzZS8qZGVlcFByb3BzKi8sIGZhbHNlLyppc1JlcGxhY2UqLywgZmFsc2UvKndpdGhTeW1ib2xzKi8pO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJy4uL2pzL2lzT2JqZWN0LmpzJztcclxuaW1wb3J0IF9mcm9tIGZyb20gJy4vZnJvbS5qcyc7XHJcbmltcG9ydCBfbWVyZ2UgZnJvbSAnLi9tZXJnZS5qcyc7XHJcblxyXG4vKipcclxuICogUmV0dXJuIHRoZSBpbnB1dCBvYmplY3Qgd2l0aCBhZGRpdGlvbmFsIGVudHJpZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdFx0XHRvYmpcclxuICogQHBhcmFtIHN0cmluZ3xhcnJheSBcdFx0XHRlbnRyaWVzT3JLZXlcclxuICogQHBhcmFtIG1peGVkfGFycmF5XHRcdFx0dmFsIFxyXG4gKlxyXG4gKiBAcmV0dXJuIG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqLCBlbnRyaWVzT3JLZXksIHZhbCA9IG51bGwpIHtcclxuXHRyZXR1cm4gX21lcmdlKG9iaiwgX2lzT2JqZWN0KGVudHJpZXNPcktleSkgPyBlbnRyaWVzT3JLZXkgOiBfZnJvbShlbnRyaWVzT3JLZXksIHZhbCkpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwiYXJyYXlcIi5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcInN0cmluZ1wiLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyB1bmRlZmluZWQgb3IgaXMgb2YgdHlwZSBcInVuZGVmaW5lZFwiLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggJiYgKHZhbCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcIm9iamVjdFwiLlxyXG4gKiBUaGlzIGhvbGRzIHRydWUgZm9yIGFueXRoaW5nIG9iamVjdCwgaW5jbHVkaW5nIGJ1aWx0LWlucy5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnb2JqZWN0JztcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgcHVyZSBvYmplY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiAhQXJyYXkuaXNBcnJheSh2YWwpICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIHZhbDtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzVHlwZUFycmF5IGZyb20gJy4uL2pzL2lzVHlwZUFycmF5LmpzJztcclxuaW1wb3J0IF9pc0VtcHR5IGZyb20gJy4uL2pzL2lzRW1wdHkuanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJy4uL2pzL2lzT2JqZWN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiBDYXN0cyBhbiBhcnJheS1saWtlIG9iamVjdCB0byBhbiBhcnJheS5cclxuICpcclxuICogQHBhcmFtIG1peGVkIFx0dmFsXHJcbiAqIEBwYXJhbSBib29sXHQgXHRjYXN0T2JqZWN0XHJcbiAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCwgY2FzdE9iamVjdCA9IHRydWUpIHtcclxuXHRpZiAoX2lzQXJyYXkodmFsKSkge1xyXG5cdFx0cmV0dXJuIHZhbDtcclxuXHR9O1xyXG5cdGlmICghY2FzdE9iamVjdCAmJiBfaXNPYmplY3QodmFsKSkge1xyXG5cdFx0cmV0dXJuIFt2YWxdO1xyXG5cdH07XHJcblx0aWYgKHZhbCAhPT0gZmFsc2UgJiYgdmFsICE9PSAwICYmIF9pc0VtcHR5KHZhbCkpIHtcclxuXHRcdHJldHVybiBbXTtcclxuXHR9O1xyXG5cdGlmIChfaXNUeXBlQXJyYXkodmFsKSkge1xyXG5cdFx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHZhbCk7XHJcblx0fTtcclxuXHRpZiAoX2lzT2JqZWN0KHZhbCkpIHtcclxuXHRcdHJldHVybiBPYmplY3QudmFsdWVzKHZhbCk7XHJcblx0fTtcclxuXHRyZXR1cm4gW3ZhbF07XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNOdWxsIGZyb20gJy4vaXNOdWxsLmpzJztcclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICcuL2lzVW5kZWZpbmVkLmpzJztcclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnLi9pc1R5cGVPYmplY3QuanMnO1xyXG5cclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBlbXB0eSBpbiBpdHMgb3duIHR5cGUuXHJcbiAqIFRoaXMgaG9sZHMgdHJ1ZSBmb3IgTlVMTHMsIFVOREVGSU5FRCwgRkFMU0UsIDAsXHJcbiAqIG9iamVjdHMgd2l0aG91dCBrZXlzLCBlbXB0eSBhcnJheXMuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gX2lzTnVsbCh2YWwpIHx8IF9pc1VuZGVmaW5lZCh2YWwpIHx8IHZhbCA9PT0gZmFsc2UgfHwgdmFsID09PSAwIFxyXG5cdFx0fHwgKF9pc1R5cGVPYmplY3QodmFsKSAmJiAhT2JqZWN0LmtleXModmFsKS5sZW5ndGgpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyB1bmRlZmluZWQgb3IgaXMgbnVsbC5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiB2YWwgPT09IG51bGwgfHwgdmFsID09PSAnJztcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1N0cmluZyBmcm9tICcuL2lzU3RyaW5nLmpzJztcclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICcuL2lzVW5kZWZpbmVkLmpzJztcclxuXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgXCJhcnJheS1saWtlXCIuXHJcbiAqIFRoaXMgaG9sZHMgdHJ1ZSBmb3IgYW55dGhpbmcgdGhhdCBoYXMgYSBsZW5ndGggcHJvcGVydHkuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiAhX2lzU3RyaW5nKHZhbCkgJiYgIV9pc1VuZGVmaW5lZCh2YWwubGVuZ3RoKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcImFycmF5XCIuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNUeXBlRnVuY3Rpb24gZnJvbSAnLi9pc1R5cGVGdW5jdGlvbi5qcyc7XHJcblxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJmdW5jdGlvblwiLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0IFx0XHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gX2lzVHlwZUZ1bmN0aW9uKHZhbCkgfHwgKHZhbCAmJiB7fS50b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IGZ1bmN0aW9uXScpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwiZnVuY3Rpb25cIi5cclxuICogVGhpcyBob2xkcyB0cnVlIGZvciBib3RoIHJlZ3VsYXIgZnVuY3Rpb25zIGFuZCBjbGFzc2VzLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJztcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgcHVyZSBvYmplY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiAhQXJyYXkuaXNBcnJheSh2YWwpICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIHZhbDtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcIm9iamVjdFwiLlxyXG4gKiBUaGlzIGhvbGRzIHRydWUgZm9yIGFueXRoaW5nIG9iamVjdCwgaW5jbHVkaW5nIGJ1aWx0LWlucy5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnb2JqZWN0JztcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcInN0cmluZ1wiIG9yIGEgbnVtZXJpYyBzdHJpbmcuXHJcbiAqIFRoaXMgaG9sZHMgdHJ1ZSBmb3IgYm90aCBudW1iZXJzIGFuZCBudW1lcmljIHN0cmluZ3MuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gdmFsICE9PSB0cnVlICYmIHZhbCAhPT0gZmFsc2UgJiYgdmFsICE9PSBudWxsICYmIHZhbCAhPT0gJycgJiYgIWlzTmFOKHZhbCAqIDEpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX3B1c2hVbmlxdWUgZnJvbSAnLi4vYXJyL3B1c2hVbmlxdWUuanMnO1xyXG5pbXBvcnQgX2dldFByb3RvdHlwZUNoYWluIGZyb20gJy4vZ2V0UHJvdG90eXBlQ2hhaW4uanMnO1xyXG5cclxuLyoqXHJcbiAqIEVhZ2VybHkgcmV0cmlldmVzIG9iamVjdCBtZW1iZXJzIGFsbCBkb3duIHRoZSBwcm90b3R5cGUgY2hhaW4uXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdG9ialxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHR1bnRpbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmosIHVudGlsKSB7XHJcblx0dmFyIGtleXNBbGwgPSBbXTtcclxuXHRfZ2V0UHJvdG90eXBlQ2hhaW4ob2JqLCB1bnRpbCkuZm9yRWFjaChvYmogPT4ge1xyXG5cdFx0X3B1c2hVbmlxdWUoa2V5c0FsbCwgLi4uT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKSk7XHJcblx0fSk7XHJcblx0cmV0dXJuIGtleXNBbGw7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBwcm90b3R5cGUgY2hhaW4uXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3QgXHRcdG9ialxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHR1bnRpbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iaiwgdW50aWwpIHtcclxuXHR1bnRpbCA9IHVudGlsIHx8IE9iamVjdC5wcm90b3R5cGU7XHJcblx0dW50aWwgPSB1bnRpbCAmJiAhX2lzQXJyYXkodW50aWwpID8gW3VudGlsXSA6IHVudGlsO1xyXG5cdC8vIFdlIGdldCB0aGUgY2hhaW4gb2YgaW5oZXJpdGFuY2VcclxuXHR2YXIgcHJvdG90eXBhbENoYWluID0gW107XHJcblx0dmFyIG9iaiA9IG9iajtcclxuXHR3aGlsZSgob2JqICYmICghdW50aWwgfHwgdW50aWwuaW5kZXhPZihvYmopIDwgMCkgJiYgb2JqLm5hbWUgIT09ICdkZWZhdWx0JykpIHtcclxuXHRcdHByb3RvdHlwYWxDaGFpbi5wdXNoKG9iaik7XHJcblx0XHRvYmogPSBvYmogPyBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA6IG51bGw7XHJcblx0fVxyXG5cdHJldHVybiBwcm90b3R5cGFsQ2hhaW47XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQWRkcyBhbiBpdGVtIGlmIG5vdCBhbHJlYWR5IGV4aXN0LlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXkgXHRhcnJcclxuICogQHBhcmFtIGFycmF5XHQgXHQuLi5pdG1zXHJcbiAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFyciwgLi4uaXRlbXMpIHtcclxuXHRpdGVtcy5mb3JFYWNoKGl0bSA9PiB7XHJcblx0XHRpZiAoYXJyLmluZGV4T2YoaXRtKSA8IDApIHtcclxuXHRcdFx0YXJyLnB1c2goaXRtKTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHRyZXR1cm4gYXJyO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICcuLi9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICcuLi9qcy9pc09iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJy4uL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNOdW1lcmljIGZyb20gJy4uL2pzL2lzTnVtZXJpYy5qcyc7XHJcbmltcG9ydCBfZ2V0QWxsUHJvcGVydHlOYW1lcyBmcm9tICcuL2dldEFsbFByb3BlcnR5TmFtZXMuanMnO1xyXG5cclxuLyoqXHJcbiAgKiBNZXJnZXMgdmFsdWVzIGZyb20gc3Vic2VxdWVudCBhcnJheXMvb2JqZWN0cyBmaXJzdCBhcnJheS9vYmplY3Q7XHJcbiAgKiBvcHRpb25hbGx5IHJlY3Vyc2l2ZVxyXG4gICpcclxuICAqIEBwYXJhbSBhcnJheSAuLi5vYmpzXHJcbiAgKlxyXG4gICogQHJldHVybiB2b2lkXHJcbiAgKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VDYWxsYmFjayhvYmpzLCBjYWxsYmFjaywgZGVlcFByb3BzID0gZmFsc2UsIGlzUmVwbGFjZSA9IGZhbHNlLCB3aXRoU3ltYm9scyA9IHRydWUpIHtcclxuXHR2YXIgZGVwdGggPSAwO1xyXG5cdHZhciBvYmoxID0gb2Jqcy5zaGlmdCgpO1xyXG5cdGlmIChfaXNOdW1lcmljKG9iajEpIHx8IG9iajEgPT09IHRydWUgfHwgb2JqMSA9PT0gZmFsc2UpIHtcclxuXHRcdGRlcHRoID0gb2JqMTtcclxuXHRcdG9iajEgPSBvYmpzLnNoaWZ0KCk7XHJcblx0fVxyXG5cdGlmICghb2Jqcy5sZW5ndGgpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignX21lcmdlKCkgcmVxdWlyZXMgdHdvIG9yIG1vcmUgYXJyYXkvb2JqZWN0cy4nKTtcclxuXHR9XHJcblx0b2Jqcy5mb3JFYWNoKChvYmoyLCBpKSA9PiB7XHJcblx0XHRpZiAoIV9pc1R5cGVPYmplY3Qob2JqMikgJiYgIV9pc0Z1bmN0aW9uKG9iajIpKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdChkZWVwUHJvcHMgPyBfZ2V0QWxsUHJvcGVydHlOYW1lcyhvYmoyKSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iajIpKS5mb3JFYWNoKGtleSA9PiB7XHJcblx0XHRcdHZhciB2YWxBdE9iajEgPSBvYmoxW2tleV07XHJcblx0XHRcdHZhciB2YWxBdE9iajIgPSBvYmoyW2tleV07XHJcblx0XHRcdGlmICgoKF9pc0FycmF5KHZhbEF0T2JqMSkgJiYgX2lzQXJyYXkodmFsQXRPYmoyKSkgfHwgKF9pc09iamVjdCh2YWxBdE9iajEpICYmIF9pc09iamVjdCh2YWxBdE9iajIpKSkgXHJcblx0XHRcdCYmIChkZXB0aCA9PT0gdHJ1ZSB8fCBkZXB0aCA+IDApKSB7XHJcblx0XHRcdFx0Ly8gUkVDVVJTRS4uLlxyXG5cdFx0XHRcdG9iajFba2V5XSA9IF9pc0FycmF5KHZhbEF0T2JqMSkgJiYgX2lzQXJyYXkodmFsQXRPYmoyKSA/IFtdIDoge307XHJcblx0XHRcdFx0bWVyZ2VDYWxsYmFjayhbX2lzTnVtZXJpYyhkZXB0aCkgPyBkZXB0aCAtIDEgOiBkZXB0aCwgb2JqMVtrZXldLCB2YWxBdE9iajEsIHZhbEF0T2JqMl0sIGNhbGxiYWNrLCBkZWVwUHJvcHMsIGlzUmVwbGFjZSwgd2l0aFN5bWJvbHMpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKGNhbGxiYWNrKGtleSwgb2JqMSwgb2JqMiwgaSkpIHtcclxuXHRcdFx0XHRpZiAoX2lzQXJyYXkob2JqMSkgJiYgX2lzQXJyYXkob2JqMikpIHtcclxuXHRcdFx0XHRcdGlmIChpc1JlcGxhY2UpIHtcclxuXHRcdFx0XHRcdFx0b2JqMVtrZXldID0gdmFsQXRPYmoyO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0b2JqMS5wdXNoKHZhbEF0T2JqMik7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC8vIEluIGNhc2Ugd2UncmUgc2V0dGluZyBhIHJlYWQtb25seSBwcm9wZXJ0eVxyXG5cdFx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdFx0aWYgKHdpdGhTeW1ib2xzKSB7XHJcblx0XHRcdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iajEsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmoyLCBrZXkpKTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRvYmoxW2tleV0gPSBvYmoyW2tleV07XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0gY2F0Y2goZSkge31cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0pO1xyXG5cdHJldHVybiBvYmoxO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX21lcmdlQ2FsbGJhY2sgZnJvbSAnLi9tZXJnZUNhbGxiYWNrLmpzJztcclxuXHJcbi8qKlxyXG4gICogTWVyZ2VzIHZhbHVlcyBmcm9tIHN1YnNlcXVlbnQgYXJyYXlzL29iamVjdHMgZmlyc3QgYXJyYXkvb2JqZWN0O1xyXG4gICogb3B0aW9uYWxseSByZWN1cnNpdmVcclxuICAqXHJcbiAgKiBAcGFyYW0gYXJyYXkgLi4ub2Jqc1xyXG4gICpcclxuICAqIEByZXR1cm4gdm9pZFxyXG4gICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKC4uLm9ianMpIHtcclxuXHRyZXR1cm4gX21lcmdlQ2FsbGJhY2sob2JqcywgKGssIG9iajEsIG9iajIpID0+IHtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH0sIGZhbHNlLypkZWVwUHJvcHMqLywgZmFsc2UvKmlzUmVwbGFjZSovLCBmYWxzZS8qd2l0aFN5bWJvbHMqLyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogUmVtb3ZlcyBpbnN0YW5jZXMgb2YgcmVmZXJlbmNlIHVwIHRvIDxsaW1pdD4gdGltZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheSBcdGFyclxyXG4gKiBAcGFyYW0gbWl4ZWRcdCBcdGl0bVxyXG4gKiBAcGFyYW0gaW50fGJvb2wgXHRsaW1pdFxyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIGl0bSwgbGltaXQgPSBmYWxzZSkge1xyXG5cdHZhciBpID0gYXJyLmluZGV4T2YoaXRtKTtcclxuXHR3aGlsZSAoaSA+IC0xICYmIChsaW1pdCB8fCBsaW1pdCA9PT0gZmFsc2UpKSB7XHJcblx0XHRhcnIuc3BsaWNlKGksIDEpO1xyXG5cdFx0aWYgKGxpbWl0ID4gMCkge1xyXG5cdFx0XHRsaW1pdCAtLTtcclxuXHRcdH07XHJcblx0XHRpID0gYXJyLmluZGV4T2YoaXRtKTtcclxuXHR9O1xyXG5cdHJldHVybiBhcnI7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogSW5zdGFuY2VvZiB0aGF0IHN1cHBvcnRzIG91ciBtdWx0aS1pbmhlcml0YW5jZSBpbXBsZW1lbnRzdGlvbi5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0b2JqMVxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHRjbGFzc0JcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmosIGNsYXNzQikge1xyXG5cdGlmICghb2JqKSB7XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cdGlmIChvYmogaW5zdGFuY2VvZiBjbGFzc0IpIHtcclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxuXHR2YXIgbWl4aW5UZXN0ID0gY2xhc3NBID0+IHtcclxuXHRcdHdoaWxlIChjbGFzc0EgJiYgY2xhc3NBICE9PSBGdW5jdGlvbi5wcm90b3R5cGUpIHtcclxuXHRcdFx0aWYgKGNsYXNzQSA9PT0gY2xhc3NCIHx8IChjbGFzc0EucHJvdG90eXBlcyAmJiBjbGFzc0EucHJvdG90eXBlcy5yZWR1Y2UoKHByZXZBbnMsIHByb3RvdHlwZSkgPT4gcHJldkFucyB8fCAocHJvdG90eXBlID09PSBjbGFzc0IpIHx8IG1peGluVGVzdChwcm90b3R5cGUpLCBmYWxzZSkpKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdFx0Y2xhc3NBID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGNsYXNzQSk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fTtcclxuXHRyZXR1cm4gbWl4aW5UZXN0KG9iai5jb25zdHJ1Y3Rvcik7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJudW1iZXJcIi5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJztcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiBUZWxscyBpZiBhbiBvYmplY3QgaXMgZGlyZWN0IGluc3RhbmNlIG9mIE9iamVjdC5wcm90b3R5cGUuXHJcbiAqIFF1aXRlIHVzZWZ1bCBpbiBkaWZmZXJlbnRpYXRpbmcgbmF0aXZlIG9iamVjdHMgYW5kIGNsYXNzIGluc3RhbmNlcyBmcm9tIHBsYWluIG9iamVjdHMgKHt9KS5cclxuICpcclxuICogQHBhcmFtIG9iamVjdCBcdG9ialxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iaikge1xyXG5cdHJldHVybiBfaXNPYmplY3Qob2JqKSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgdW5kZWZpbmVkIG9yIGlzIG9mIHR5cGUgXCJib29sZWFuXCIuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gdmFsID09PSB0cnVlIHx8IHZhbCA9PT0gZmFsc2U7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJy4uL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNOdW1lcmljIGZyb20gJy4uL2pzL2lzTnVtZXJpYy5qcyc7XHJcblxyXG4vKipcclxuICogTG9vcHMgdGhydSBvYmogZmxhdGx5IHdpdGggYSBjYWxsYmFjayBmdW5jdGlvbi5cclxuICogU3RvcHMgd2hlbiBjYWxsYmFjayByZXR1cm5zIGEgbm9uLXVuZGVmaW5lZCB2YWx1ZS5cclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdCBcdFx0XHRvYmogXHRcdFx0VGhlIGFycmF5IG9yIG9iamVjdCB0byBpdGVyYXRlLlxyXG4gKiBAcGFyYW0gZnVuY3Rpb24gXHRcdFx0XHRjYWxsYmFjayBcdFx0VGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcmV0dXJuIG1peGVkfG51bGxcdFx0XHRBbnkgbm9uLW51bGwgcmV0dXJuIGZyb20gY2FsbGJhY2tcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iaiwgY2FsbGJhY2spIHtcclxuXHR2YXIgcmV0dXJuVmFsdWUgPSB1bmRlZmluZWQ7XHJcblx0aWYgKF9pc1R5cGVPYmplY3Qob2JqKSkge1xyXG5cdFx0T2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKChrLCBpKSA9PiB7XHJcblx0XHRcdGlmIChyZXR1cm5WYWx1ZSAhPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRyZXR1cm5WYWx1ZSA9IGNhbGxiYWNrKF9pc051bWVyaWMoaykgPyBwYXJzZUZsb2F0KGspIDogaywgb2JqW2tdLCBpKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cdHJldHVybiByZXR1cm5WYWx1ZTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc051bWJlciBmcm9tICcuLi9qcy9pc051bWJlci5qcyc7XHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICcuLi9qcy9pc09iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJy4uL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICcuLi9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9pc1BsYWluT2JqZWN0IGZyb20gJy4uL2pzL2lzUGxhaW5PYmplY3QuanMnO1xyXG5pbXBvcnQgX2NvbXBhcmVDYWxsYmFjayBmcm9tICcuL2NvbXBhcmVDYWxsYmFjay5qcyc7XHJcblxyXG4vKipcclxuICogQXNzZXJ0cyAobWVtYmVycyBvZikgdGhlIGZpcnN0IHZhbHVlIGFnYWluc3QgKG1lbWJlcnMgb2YpIHN1YnNlcXVlbnQgdmFsdWVzLlxyXG4gKiBBc3NlcnRpb24gY291bGQgYmUgVFJVRSwgRkFMU0UsIG9yIGN1c3RvbS5cclxuICpcclxuICogQHBhcmFtIG1peGVkIFx0XHRcdG9iajFcclxuICogQHBhcmFtIG1peGVkIFx0XHRcdG9iajJcclxuICogQHBhcmFtIGJvb2x8ZnVuY3Rpb25cdFx0YXNzZXJ0aW9uXHJcbiAqIEBwYXJhbSBpbnRcdFx0XHRcdGRlcHRoXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuY29uc3QgX2V2ZW4gPSBmdW5jdGlvbihvYmoxLCBvYmoyLCBhc3NlcnRpb24gPSB0cnVlLCBkZXB0aCA9IDEpIHtcclxuXHRpZiAoX2lzQXJyYXkob2JqMSkgJiYgX2lzQXJyYXkob2JqMikgJiYgb2JqMS5sZW5ndGggIT09IG9iajIubGVuZ3RoKSB7XHJcblx0XHRyZXR1cm4gIWFzc2VydGlvbjtcclxuXHR9XHJcblx0aWYgKF9pc09iamVjdChvYmoxKSAmJiBfaXNPYmplY3Qob2JqMikpIHtcclxuXHRcdHZhciBvYmoxS2V5cyA9IE9iamVjdC5rZXlzKG9iajEpO1xyXG5cdFx0dmFyIG9iajJLZXlzID0gT2JqZWN0LmtleXMob2JqMik7XHJcblx0XHRpZiAoIW9iajFLZXlzLmxlbmd0aCAmJiAhb2JqMktleXMubGVuZ3RoKSB7XHJcblx0XHRcdC8vIE9iamVjdHMgdGhhdCB3b24ndCBzaG93IGtleXMgbXVzdCBiZSBjb21wYXJlZCBieSBpbnN0YW5jZVxyXG5cdFx0XHQvLyBNYW55IG5hdGl2ZSBvYmplY3RzIHdvbid0LiBTbyB3ZSBjYW4ndCBqdWRnZSBieSBrZXlzIGFsb25lLlxyXG5cdFx0XHRyZXR1cm4gX2lzUGxhaW5PYmplY3Qob2JqMSkgJiYgX2lzUGxhaW5PYmplY3Qob2JqMikgXHJcblx0XHRcdFx0PyBhc3NlcnRpb25cclxuXHRcdFx0XHQ6IChvYmoxID09PSBvYmoyKSA9PT0gYXNzZXJ0aW9uO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCFfZXZlbihvYmoxS2V5cywgb2JqMktleXMpKSB7XHJcblx0XHRcdHJldHVybiAhYXNzZXJ0aW9uO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRpZiAoZGVwdGggPiAwICYmICgoX2lzQXJyYXkob2JqMSkgJiYgX2lzQXJyYXkob2JqMikpIHx8IChfaXNPYmplY3Qob2JqMSkgJiYgX2lzT2JqZWN0KG9iajIpKSkpIHtcclxuXHRcdHZhciByZXN1bHQgPSBfY29tcGFyZUNhbGxiYWNrKG9iajEsIG9iajIsICh2MSwgdjIpID0+IHtcclxuXHRcdFx0cmV0dXJuIF9ldmVuKHYxLCB2MiwgYXNzZXJ0aW9uLCBkZXB0aCAtIDEpO1xyXG5cdFx0fSwgZmFsc2UvKm5ldENvbXBhcmlzb24qLywgZmFsc2UvKmNvbnRyYXN0Ki8sIHRydWUvKnJldHVybk9uRmlyc3RGYWxzZSovKTtcclxuXHRcdHJldHVybiBfaXNBcnJheShyZXN1bHQpIFxyXG5cdFx0XHQ/IHJlc3VsdC5sZW5ndGggPT09IG9iajEubGVuZ3RoICYmIHJlc3VsdC5sZW5ndGggPT09IG9iajIubGVuZ3RoIFxyXG5cdFx0XHQ6IChfaXNPYmplY3QocmVzdWx0KSAmJiBfaXNPYmplY3Qob2JqMSkgXHJcblx0XHRcdFx0PyBPYmplY3Qua2V5cyhyZXN1bHQpLmxlbmd0aCA9PT0gT2JqZWN0LmtleXMob2JqMSkubGVuZ3RoICYmIE9iamVjdC5rZXlzKHJlc3VsdCkubGVuZ3RoID09PSAgT2JqZWN0LmtleXMob2JqMikubGVuZ3RoIFxyXG5cdFx0XHRcdDogcmVzdWx0KTtcclxuXHR9XHJcblx0cmV0dXJuIF9pc0Z1bmN0aW9uKGFzc2VydGlvbikgPyBhc3NlcnRpb24ob2JqMSwgb2JqMikgOiAoXHJcblx0XHRfaXNOdW1iZXIob2JqMSkgJiYgX2lzTnVtYmVyKG9iajIpICYmIGlzTmFOKG9iajEpICYmIGlzTmFOKG9iajIpIFxyXG5cdFx0XHQ/IGFzc2VydGlvbiBcclxuXHRcdFx0OiAob2JqMSA9PT0gb2JqMikgPT09IGFzc2VydGlvblxyXG5cdCk7XHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IF9ldmVuO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnLi4vanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuLi9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzQm9vbGVhbiBmcm9tICcuLi9qcy9pc0Jvb2xlYW4uanMnO1xyXG5pbXBvcnQgX2VhY2ggZnJvbSAnLi9lYWNoLmpzJztcclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBtYXRjaChlcykgYmV0d2VlbiAobWVtYmVycyBvZikgdHdvIHZhbHVlcztcclxuICogYXNzZXJ0aW9uIG9wdGlvbmFsbHkgY3VzdG9tLlxyXG4gKlxyXG4gKiBAcGFyYW0gbWl4ZWQgXHRcdFx0b2IxXHJcbiAqIEBwYXJhbSBtaXhlZCBcdFx0XHRvYmoyXHJcbiAqIEBwYXJhbSBzdHJpbmd8ZnVuY3Rpb25cdGFzc2VydGlvblxyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdFx0bmV0Q29tcGFyaXNvblxyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdFx0Y29udHJhc3RcclxuICogQHBhcmFtIGJvb2xcdFx0XHRcdHJldHVybk9uRmlyc3RGYWxzZVxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2x8YXJyYXl8b2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmoxLCBvYmoyLCBhc3NlcnRpb24gPSB0cnVlLCBuZXRDb21wYXJpc29uID0gdHJ1ZSwgY29udHJhc3QgPSBmYWxzZSwgcmV0dXJuT25GaXJzdEZhbHNlID0gZmFsc2UpIHtcclxuXHRpZiAoX2lzQXJyYXkob2JqMSkgJiYgX2lzQXJyYXkob2JqMikpIHtcclxuXHRcdHZhciByZXN1bHQgPSBbXTtcclxuXHRcdHZhciBjb250biA9IHRydWU7XHJcblx0XHRvYmoxLmZvckVhY2godjEgPT4ge1xyXG5cdFx0XHRpZiAoIWNvbnRuKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdHZhciB0ZXN0UGFzcyA9IGZhbHNlO1xyXG5cdFx0XHRfZWFjaChvYmoyLCAoaywgdjIpID0+IHtcclxuXHRcdFx0XHRpZiAoIXRlc3RQYXNzIHx8IChuZXRDb21wYXJpc29uICYmIF9pc1R5cGVPYmplY3QodjEpKSkge1xyXG5cdFx0XHRcdFx0dGVzdFBhc3MgPSBhc3NlcnRpb24odjEsIHYyKTtcclxuXHRcdFx0XHRcdGlmICgoX2lzQXJyYXkodGVzdFBhc3MpICYmICF0ZXN0UGFzcy5sZW5ndGgpIHx8IChfaXNPYmplY3QodGVzdFBhc3MpICYmICFPYmplY3Qua2V5cyh0ZXN0UGFzcykubGVuZ3RoKSkge1xyXG5cdFx0XHRcdFx0XHR0ZXN0UGFzcyA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKF9pc1R5cGVPYmplY3QodGVzdFBhc3MpICYmIG5ldENvbXBhcmlzb24pIHtcclxuXHRcdFx0XHRcdFx0Ly8gRnVydGhlciByZWN1cnNpb25zIHNob3VsZCB1c2UgdGhpcyB0ZXN0UGFzcyBhcyB2MVxyXG5cdFx0XHRcdFx0XHR2MSA9IHRlc3RQYXNzO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdGlmIChfaXNUeXBlT2JqZWN0KHRlc3RQYXNzKSkge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKG5ldENvbXBhcmlzb24gPyB0ZXN0UGFzcyA6IHYxKTtcclxuXHRcdFx0fSBlbHNlIGlmICghX2lzQm9vbGVhbih0ZXN0UGFzcykpIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaCh0ZXN0UGFzcyk7XHJcblx0XHRcdH0gZWxzZSBpZiAoKGNvbnRyYXN0ICYmICF0ZXN0UGFzcykgfHwgKCFjb250cmFzdCAmJiB0ZXN0UGFzcykpIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaCh2MSk7XHJcblx0XHRcdH0gZWxzZSBpZiAocmV0dXJuT25GaXJzdEZhbHNlKSB7XHJcblx0XHRcdFx0Y29udG4gPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHRcclxuXHRpZiAoX2lzT2JqZWN0KG9iajEpICYmIF9pc09iamVjdChvYmoyKSkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IHt9O1xyXG5cdFx0dmFyIGNvbnRuID0gdHJ1ZTtcclxuXHRcdE9iamVjdC5rZXlzKG9iajEpLmZvckVhY2goayA9PiB7XHJcblx0XHRcdGlmICghY29udG4pIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIHRlc3RQYXNzID0gYXNzZXJ0aW9uKG9iajFba10sIG9iajJba10pO1xyXG5cdFx0XHRpZiAoKF9pc0FycmF5KHRlc3RQYXNzKSAmJiAhdGVzdFBhc3MubGVuZ3RoKSB8fCAoX2lzT2JqZWN0KHRlc3RQYXNzKSAmJiAhT2JqZWN0LmtleXModGVzdFBhc3MpLmxlbmd0aCkpIHtcclxuXHRcdFx0XHR0ZXN0UGFzcyA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChfaXNUeXBlT2JqZWN0KHRlc3RQYXNzKSkge1xyXG5cdFx0XHRcdHJlc3VsdFtrXSA9IG5ldENvbXBhcmlzb24gPyB0ZXN0UGFzcyA6IG9iajFba107XHJcblx0XHRcdH0gZWxzZSBpZiAoIV9pc0Jvb2xlYW4odGVzdFBhc3MpKSB7XHJcblx0XHRcdFx0cmVzdWx0W2tdID0gdGVzdFBhc3M7XHJcblx0XHRcdH0gZWxzZSBpZiAoKGNvbnRyYXN0ICYmICF0ZXN0UGFzcykgfHwgKCFjb250cmFzdCAmJiB0ZXN0UGFzcykpIHtcclxuXHRcdFx0XHRyZXN1bHRba10gPSBvYmoxW2tdO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHJldHVybk9uRmlyc3RGYWxzZSkge1xyXG5cdFx0XHRcdGNvbnRuID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc09iamVjdC5qcyc7XHJcbmltcG9ydCBfZXZlbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9ldmVuLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogRXhwckludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBDb21wYXJlcyB0aGUgY3VycmVudCBpbnN0YW5jZSB3aXRoIGFub3RoZXIgb2JqZWN0LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdCBFeHByXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGJvb2xcclxuXHQgKi9cclxuXHRldmVuKEV4cHIpIHtcclxuXHRcdGlmIChfaXNPYmplY3QoRXhwcikgJiYgRXhwci5qc2VuVHlwZSA9PT0gdGhpcy5qc2VuVHlwZSkge1xyXG5cdFx0XHRyZXR1cm4gX2V2ZW4oRXhwciwgdGhpcyk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEluaGVyaXRzIHByb3BlcnRpZXMgZnJvbSBhIHN1cGVyIEV4cHIuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gRXhwckludGVyZmFjZSBTdXBlclxyXG5cdCAqXHJcblx0ICogQHJldHVybiB0aGlzXHJcblx0ICovXHJcblx0aW5oZXJpdChTdXBlcikge1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEFkZHMgY29tbWVudHMgdG8gdGhlIGluc3RhbmNlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZ1x0IGNvbW1lbnRzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHRoaXNcclxuXHQgKi9cclxuXHR3aXRoQ29tbWVudHMoY29tbWVudHMpIHtcclxuXHRcdGlmICghdGhpcy5tZXRhKSB7XHJcblx0XHRcdHRoaXMubWV0YSA9IHt9O1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5tZXRhLmNvbW1lbnRzID0gY29tbWVudHM7XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQWRkcyB2YXJpYWJsZXMgdG8gdGhlIGluc3RhbmNlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGFycmF5XHRcdCB2YXJzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHRoaXNcclxuXHQgKi9cclxuXHR3aXRoVmFycyh2YXJzKSB7XHJcblx0XHRpZiAoIXRoaXMubWV0YSkge1xyXG5cdFx0XHR0aGlzLm1ldGEgPSB7fTtcclxuXHRcdH1cclxuXHRcdHRoaXMubWV0YS52YXJzID0gdmFycztcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBFdmFsdWF0ZXMgdGhlIGV4cHJlc3Npb24gaW5zdGFuY2UgZm9yIGEgcmVzdWx0LFxyXG5cdCAqIG9wdGlvbmFsbHkgaW4gdGhlIGNvbnRleHQgb2YgYW4gb2JqZWN0LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdCBjb250ZXh0XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG1peGVkXHJcblx0ICovXHJcblx0Ly9ldmFsKGNvbnRleHQgPSBudWxsLCB0cmFwID0ge30pXHJcblx0XHJcblx0LyoqXHJcblx0ICogU2VyaWFsaXplcyB0aGUgZXhwcmVzc2lvbiBpbnN0YW5jZSBiYWNrIHRvIGEgc3RyaW5nLFxyXG5cdCAqIG9wdGlvbmFsbHkgaW4gdGhlIGNvbnRleHQgb2YgYW4gb2JqZWN0LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdCBjb250ZXh0XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHN0cmluZ1xyXG5cdCAqL1xyXG5cdC8vdG9TdHJpbmcoY29udGV4dCA9IG51bGwpXHJcblx0XHJcblx0LyoqXHJcblx0ICogU0F0dGVtcHRzIHRvIHBhcnNlIGEgc3RyaW5nIGludG8gdGhlIGNsYXNzIGluc3RhbmNlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZyBleHByXHJcblx0ICogQHBhcmFtIG9iamVjdCBwYXJhbXNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gRXhwckludGVyZmFjZVxyXG5cdCAqL1xyXG5cdC8vc3RhdGljIHBhcnNlKGV4cHIsIHBhcmFtcyA9IHt9KVxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRXhwckludGVyZmFjZSBmcm9tICcuLi9FeHBySW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogUmVmZXJlbmNlSW50ZXJmYWNlXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBFeHBySW50ZXJmYWNlIHt9O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJmYWNlLnByb3RvdHlwZSwgJ2pzZW5UeXBlJywge1xyXG5cdGdldCgpIHsgcmV0dXJuICdSZWZlcmVuY2UnOyB9LFxyXG59KTtcclxuZXhwb3J0IGRlZmF1bHQgSW50ZXJmYWNlO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRXhwckludGVyZmFjZSBmcm9tICcuLi9FeHBySW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ2FsbEludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEludGVyZmFjZSA9IGNsYXNzIGV4dGVuZHMgRXhwckludGVyZmFjZSB7fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVyZmFjZS5wcm90b3R5cGUsICdqc2VuVHlwZScsIHtcclxuXHRnZXQoKSB7IHJldHVybiAnQ2FsbEV4cHJlc3Npb24nOyB9LFxyXG59KTtcclxuZXhwb3J0IGRlZmF1bHQgSW50ZXJmYWNlO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRXhwckludGVyZmFjZSBmcm9tICcuLi9FeHBySW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogRnVuY0ludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEludGVyZmFjZSA9IGNsYXNzIGV4dGVuZHMgRXhwckludGVyZmFjZSB7fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVyZmFjZS5wcm90b3R5cGUsICdqc2VuVHlwZScsIHtcclxuXHRnZXQoKSB7IHJldHVybiAnRnVuY3Rpb25UeXBlJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9tZXJnZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9tZXJnZS5qcyc7XHJcbmltcG9ydCBfcmVtb3ZlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3JlbW92ZS5qcyc7XHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2luc3RhbmNlb2YgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pbnN0YW5jZW9mLmpzJztcclxuaW1wb3J0IFJlZmVyZW5jZUludGVyZmFjZSBmcm9tICcuL0V4cHIvUmVmZXJlbmNlSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IENhbGxJbnRlcmZhY2UgZnJvbSAnLi9FeHByL0NhbGxJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgRnVuY0ludGVyZmFjZSBmcm9tICcuL0V4cHIvRnVuY0ludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEpzZW4gKGJhc2UpIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSnNlbiA9IGNsYXNzIHtcclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgcGFyc2UoZXhwciwgUGFyc2VycywgcGFyYW1zID0ge30sIFN0YXRpYyA9IEpzZW4pIHtcclxuXHRcdGlmICghcGFyYW1zLm1ldGEpIHtcclxuXHRcdFx0cGFyYW1zLm1ldGEgPSB7dmFyczogW10sIF92YXJzOiBbXX07XHJcblx0XHR9XHJcblx0XHRpZiAoZXhwci5sZW5ndGgpIHtcclxuXHRcdFx0dmFyIHBhcnNlcnMgPSBPYmplY3QudmFsdWVzKFBhcnNlcnMgfHwgU3RhdGljLmdyYW1tYXJzKTtcclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBwYXJzZXJzLmxlbmd0aDsgaSArKykge1xyXG5cdFx0XHRcdC8vIEZyb20gdGhpcyBwb2ludCBmb3J3YXJkLCBhbGwgdmFycyBpcyB3aXRoaW4gY3VycmVudCBzY29wZVxyXG5cdFx0XHRcdHZhciB2YXJzU2NvcGUgPSBwYXJhbXMubWV0YSAmJiBfaXNBcnJheShwYXJhbXMubWV0YS52YXJzKSA/IHBhcmFtcy5tZXRhLnZhcnMubGVuZ3RoIDogMDtcclxuXHRcdFx0XHR2YXIgcGFyc2VkID0gcGFyc2Vyc1tpXS5wYXJzZShleHByLCAoX2V4cHIsIF9QYXJzZXJzLCBfcGFyYW1zID0ge30pID0+IEpzZW4ucGFyc2UoX2V4cHIsIF9QYXJzZXJzLCBfcGFyYW1zID8gX21lcmdlKHBhcmFtcywgX3BhcmFtcykgOiBwYXJhbXMsIFN0YXRpYykpO1xyXG5cdFx0XHRcdC8vIEFkZC9yZW1vdmUgdmFycyB0byBzY29wZVxyXG5cdFx0XHRcdGlmIChwYXJzZWQpIHtcclxuXHRcdFx0XHRcdGlmICghcGFyc2VkLm1ldGEpIHtcclxuXHRcdFx0XHRcdFx0cGFyc2VkLm1ldGEgPSB7fTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdC8vIFJlYXAgdmFycyBpbnRvIHNjb3BlIGV4cHJcclxuXHRcdFx0XHRcdGlmIChfaW5zdGFuY2VvZihwYXJzZWQsIEZ1bmNJbnRlcmZhY2UpKSB7XHJcblx0XHRcdFx0XHRcdHZhciBzZWNvbmRMZXZlbFZhcnMgPSBwYXJhbXMubWV0YS52YXJzLnNwbGljZSh2YXJzU2NvcGUpO1xyXG5cdFx0XHRcdFx0XHRwYXJhbXMubWV0YS5fdmFycyA9IHBhcmFtcy5tZXRhLl92YXJzLmNvbmNhdChzZWNvbmRMZXZlbFZhcnMpO1xyXG5cdFx0XHRcdFx0XHRwYXJzZWQubWV0YS5fdmFycyA9IHNlY29uZExldmVsVmFycztcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHBhcnNlZC5tZXRhLnZhcnMgPSBwYXJhbXMubWV0YS52YXJzLnNsaWNlKHZhcnNTY29wZSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHQvLyBBZGQgdmFycyB0byBzY29wZVxyXG5cdFx0XHRcdFx0aWYgKF9pbnN0YW5jZW9mKHBhcnNlZCwgUmVmZXJlbmNlSW50ZXJmYWNlKSB8fCBfaW5zdGFuY2VvZihwYXJzZWQsIENhbGxJbnRlcmZhY2UpKSB7XHJcblx0XHRcdFx0XHRcdF9yZW1vdmUocGFyc2VkLm1ldGEudmFycywgcGFyc2VkLmNvbnRleHQpO1xyXG5cdFx0XHRcdFx0XHRfcmVtb3ZlKHBhcmFtcy5tZXRhLnZhcnMsIHBhcnNlZC5jb250ZXh0KTtcclxuXHRcdFx0XHRcdFx0cGFyYW1zLm1ldGEudmFycy5wdXNoKHBhcnNlZCk7XHJcblx0XHRcdFx0XHR9IFxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAocGFyc2VkICYmIF9pc0FycmF5KHBhcmFtcy5leHBsYWluKSkge1xyXG5cdFx0XHRcdFx0cGFyYW1zLmV4cGxhaW4ucHVzaChleHByICsgJyA+Pi0tLS0tLS0tLS0tLS0+PiAnICsgcGFyc2VkLmpzZW5UeXBlKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKHBhcnNlZCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlZDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKHBhcmFtcy5hc3NlcnQgPT09IGZhbHNlKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignW1N5bnRheCBlcnJvcjpdICcgKyBleHByKTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IEpzZW47XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJzdHJpbmdcIi5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJztcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgdW5kZWZpbmVkIG9yIGlzIG9mIHR5cGUgXCJ1bmRlZmluZWRcIi5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiBhcmd1bWVudHMubGVuZ3RoICYmICh2YWwgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc1R5cGVBcnJheSBmcm9tICcuLi9qcy9pc1R5cGVBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNFbXB0eSBmcm9tICcuLi9qcy9pc0VtcHR5LmpzJztcclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICcuLi9qcy9pc09iamVjdC5qcyc7XHJcblxyXG4vKipcclxuICogQ2FzdHMgYW4gYXJyYXktbGlrZSBvYmplY3QgdG8gYW4gYXJyYXkuXHJcbiAqXHJcbiAqIEBwYXJhbSBtaXhlZCBcdHZhbFxyXG4gKiBAcGFyYW0gYm9vbFx0IFx0Y2FzdE9iamVjdFxyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwsIGNhc3RPYmplY3QgPSB0cnVlKSB7XHJcblx0aWYgKF9pc0FycmF5KHZhbCkpIHtcclxuXHRcdHJldHVybiB2YWw7XHJcblx0fTtcclxuXHRpZiAoIWNhc3RPYmplY3QgJiYgX2lzT2JqZWN0KHZhbCkpIHtcclxuXHRcdHJldHVybiBbdmFsXTtcclxuXHR9O1xyXG5cdGlmICh2YWwgIT09IGZhbHNlICYmIHZhbCAhPT0gMCAmJiBfaXNFbXB0eSh2YWwpKSB7XHJcblx0XHRyZXR1cm4gW107XHJcblx0fTtcclxuXHRpZiAoX2lzVHlwZUFycmF5KHZhbCkpIHtcclxuXHRcdHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh2YWwpO1xyXG5cdH07XHJcblx0aWYgKF9pc09iamVjdCh2YWwpKSB7XHJcblx0XHRyZXR1cm4gT2JqZWN0LnZhbHVlcyh2YWwpO1xyXG5cdH07XHJcblx0cmV0dXJuIFt2YWxdO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzTnVsbCBmcm9tICcuL2lzTnVsbC5qcyc7XHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnLi9pc1VuZGVmaW5lZC5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJy4vaXNUeXBlT2JqZWN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgZW1wdHkgaW4gaXRzIG93biB0eXBlLlxyXG4gKiBUaGlzIGhvbGRzIHRydWUgZm9yIE5VTExzLCBVTkRFRklORUQsIEZBTFNFLCAwLFxyXG4gKiBvYmplY3RzIHdpdGhvdXQga2V5cywgZW1wdHkgYXJyYXlzLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIF9pc051bGwodmFsKSB8fCBfaXNVbmRlZmluZWQodmFsKSB8fCB2YWwgPT09IGZhbHNlIHx8IHZhbCA9PT0gMCBcclxuXHRcdHx8IChfaXNUeXBlT2JqZWN0KHZhbCkgJiYgIU9iamVjdC5rZXlzKHZhbCkubGVuZ3RoKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgdW5kZWZpbmVkIG9yIGlzIG51bGwuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gdmFsID09PSBudWxsIHx8IHZhbCA9PT0gJyc7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSAnLi9pc1N0cmluZy5qcyc7XHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnLi9pc1VuZGVmaW5lZC5qcyc7XHJcblxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIFwiYXJyYXktbGlrZVwiLlxyXG4gKiBUaGlzIGhvbGRzIHRydWUgZm9yIGFueXRoaW5nIHRoYXQgaGFzIGEgbGVuZ3RoIHByb3BlcnR5LlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gIV9pc1N0cmluZyh2YWwpICYmICFfaXNVbmRlZmluZWQodmFsLmxlbmd0aCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICcuLi9qcy9pc09iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNOdW1lcmljIGZyb20gJy4uL2pzL2lzTnVtZXJpYy5qcyc7XHJcblxyXG4vKipcclxuICogRmxhdHRlbnMgYSBuZXN0ZWQgYXJyYXkgdG8gdGhlIGdpdmVuIGRlcHRoLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXkgXHRhcnJcclxuICogQHBhcmFtIGludCBcdCBcdGRlcHRoXHJcbiAqIEBwYXJhbSBib29sIFx0IFx0d2l0aE9iamVjdHNcclxuICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuY29uc3QgX2ZsYXR0ZW4gPSBmdW5jdGlvbihhcnIsIGRlcHRoID0gMSwgd2l0aE9iamVjdHMgPSB0cnVlKSB7XHJcblx0aWYgKCFfaXNOdW1lcmljKGRlcHRoKSB8fCBkZXB0aCA8PSAwKSB7XHJcblx0XHRyZXR1cm4gYXJyO1xyXG5cdH07XHJcblx0aWYgKCFfaXNBcnJheShhcnIpICYmIF9pc09iamVjdChhcnIpICYmIHdpdGhPYmplY3RzKSB7XHJcblx0XHRhcnIgPSBPYmplY3QudmFsdWVzKGFycik7XHJcblx0fTtcclxuXHRpZiAoIV9pc0FycmF5KGFycikpIHtcclxuXHRcdHJldHVybiBhcnI7XHJcblx0fTtcclxuXHRyZXR1cm4gYXJyLnJlZHVjZSgoYWNjLCB2YWwpID0+IF9pc0FycmF5KHZhbCkgfHwgKF9pc09iamVjdCh2YWwpICYmIHdpdGhPYmplY3RzKSBcclxuXHRcdD8gYWNjLmNvbmNhdChfZmxhdHRlbighX2lzQXJyYXkodmFsKSA/IE9iamVjdC52YWx1ZXModmFsKSA6IHZhbCwgZGVwdGggLSAxLCB3aXRoT2JqZWN0cykpIFxyXG5cdFx0OiBhY2MuY29uY2F0KHZhbCksIFtdKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgX2ZsYXR0ZW47IiwiXHJcbi8qKlxyXG4gKiBSZXR1cm5zIFRIRSBGSVJTVCBFTlRSWSBPUiBBIE5VTUJFUiBPRiBFTlRSSUVTIGNvdW50aW5nIGZvcndhcmQgZnJvbSB0aGUgYmVnaW5pbmcuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheSBcdGFyclxyXG4gKiBAcGFyYW0gaW50XHQgXHRhbW91bnRcclxuICpcclxuICogQHJldHVybiBtaXhlZHxhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyLCBhbW91bnQgPSAxKSB7XHJcblx0dmFyIGNvdW50ID0gMDtcclxuXHRhcnIuZm9yRWFjaChpdG0gPT4ge1xyXG5cdFx0Y291bnQgKys7XHJcblx0fSk7XHJcblx0dmFyIGZpcnN0cyA9IGFyci5zbGljZShhcnIubGVuZ3RoIC0gY291bnQsIGFtb3VudCk7XHJcblx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gZmlyc3RzIDogZmlyc3RzWzBdO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2ZpcnN0IGZyb20gJy4vZmlyc3QuanMnO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgVEhFIExBU1QgRU5UUlkgT1IgQSBOVU1CRVIgT0YgRU5UUklFUyBjb3VudGluZyBmb3J3YXJkIHRvIHRoZSBlbmQuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheSBcdGFyclxyXG4gKiBAcGFyYW0gaW50XHQgXHRhbW91bnRcclxuICpcclxuICogQHJldHVybiBtaXhlZHxhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyLCBhbW91bnQgPSAxKSB7XHJcblx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXHJcblx0XHQ/IF9maXJzdChhcnIuc2xpY2UoKS5yZXZlcnNlKCksIGFtb3VudCkucmV2ZXJzZSgpXHJcblx0XHQ6IF9maXJzdChhcnIuc2xpY2UoKS5yZXZlcnNlKCkpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICcuLi9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9tZXJnZUNhbGxiYWNrIGZyb20gJy4vbWVyZ2VDYWxsYmFjay5qcyc7XHJcblxyXG4vKipcclxuICogQ29waWVzIG9ubHkgcHJvcGVydGllcyBvZiBhbiBvYmplY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdG9ialxyXG4gKiBAcGFyYW0gYXJyYXlcdFx0IFx0b25seVxyXG4gKiBAcGFyYW0gYXJyYXlcdFx0IFx0ZXhjZXB0XHJcbiAqXHJcbiAqIEByZXR1cm4gb2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmosIGZpbHRlciA9IFtdKSB7XHJcblx0cmV0dXJuIF9tZXJnZUNhbGxiYWNrKFt7fSwgb2JqXSwgKGtleSwgb2JqMSwgb2JqMikgPT4ge1xyXG5cdFx0aWYgKCFfaXNGdW5jdGlvbihvYmoyW2tleV0pKSB7XHJcblx0XHRcdHJldHVybiBfaXNGdW5jdGlvbihmaWx0ZXIpID8gZmlsdGVyKGtleSkgXHJcblx0XHRcdFx0OiAoX2lzQXJyYXkoZmlsdGVyKSAmJiBmaWx0ZXIubGVuZ3RoID8gZmlsdGVyLmluZGV4T2Yoa2V5KSA+IC0xIDogdHJ1ZSk7XHJcblx0XHR9XHJcblx0fSwgZmFsc2UvKmRlZXBQcm9wcyovLCBmYWxzZS8qaXNSZXBsYWNlKi8sIGZhbHNlLyp3aXRoU3ltYm9scyovKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1N0cmluZyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzU3RyaW5nLmpzJztcclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVW5kZWZpbmVkLmpzJztcclxuaW1wb3J0IF9pc0Z1bmN0aW9uIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBfYXJyRnJvbSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mcm9tLmpzJztcclxuaW1wb3J0IF9mbGF0dGVuIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ZsYXR0ZW4uanMnO1xyXG5pbXBvcnQgX2ZpcnN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ZpcnN0LmpzJztcclxuaW1wb3J0IF9sYXN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2xhc3QuanMnO1xyXG5pbXBvcnQgX21lcmdlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL21lcmdlLmpzJztcclxuaW1wb3J0IF9ldmVuIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2V2ZW4uanMnO1xyXG5pbXBvcnQgX2NvcHlQbGFpbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9jb3B5UGxhaW4uanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRPS0VOSVpFUlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuXHJcbmNvbnN0IExleGVyID0gY2xhc3Mge1xyXG5cclxuXHQvKipcclxuXHQgKiBGYWN0b3J5IG1ldGhvZC5cclxuXHQgKlxyXG5cdCAqIEhhbmRsZXMgY2FjaGluZy5cclxuXHQgKlxyXG5cdCAqIEBzZWUgY29uc3RydWN0b3IoKVxyXG5cdCAqL1xyXG5cdHN0YXRpYyBsZXgoc3RyLCBkZWxpbXMsIG9wdGlvbnMgPSB7fSkge1xyXG5cdFx0aWYgKCFfaXNTdHJpbmcoc3RyKSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0FyZ3VtZW50MSBtdXN0IGJlIGEgc3RyaW5nIScpO1xyXG5cdFx0fVxyXG5cdFx0dmFyIGNvcHlSZXN1bHQgPSByZXN1bHQgPT4ge1xyXG5cdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdGRlbGltczogcmVzdWx0LmRlbGltcy5zbGljZSgpLFxyXG5cdFx0XHRcdG9wdGlvbnM6IF9jb3B5UGxhaW4ocmVzdWx0Lm9wdGlvbnMpLFxyXG5cdFx0XHRcdG5lc3Rpbmc6IHJlc3VsdC5uZXN0aW5nLnNsaWNlKCksXHJcblx0XHRcdFx0bWF4RGVwdGg6IHJlc3VsdC5tYXhEZXB0aCxcclxuXHRcdFx0XHRjb21tZW50czogcmVzdWx0LmNvbW1lbnRzLnNsaWNlKCksXHJcblx0XHRcdFx0dG9rZW5zOiByZXN1bHQudG9rZW5zLnNsaWNlKCksXHJcblx0XHRcdFx0bWF0Y2hlczogcmVzdWx0Lm1hdGNoZXMuc2xpY2UoKSxcclxuXHRcdFx0XHRtYXRjaGVzaTogX2NvcHlQbGFpbihyZXN1bHQubWF0Y2hlc2kpLFxyXG5cdFx0XHR9O1xyXG5cdFx0fTtcclxuXHRcdC8vIEFTSyBDQUNIRSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdGlmIChMZXhlci4kY2FjaGVbc3RyXSAmJiBvcHRpb25zLmNhY2hlICE9PSBmYWxzZSkge1xyXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IExleGVyLiRjYWNoZVtzdHJdLmxlbmd0aDsgaSArKykge1xyXG5cdFx0XHRcdHZhciBjYWNoZWQgPSBMZXhlci4kY2FjaGVbc3RyXVtpXTtcclxuXHRcdFx0XHRpZiAoX2V2ZW4oY2FjaGVkLmRlbGltcywgZGVsaW1zKSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIGNvcHlSZXN1bHQoY2FjaGVkKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdC8vIEZSRVNIIFBBUlNFXHQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0dmFyIGluc3RhbmNlID0gbmV3IExleGVyKHN0ciwgb3B0aW9ucyk7XHJcblx0XHR2YXIgcmVzdWx0ID0gaW5zdGFuY2UubGV4KGRlbGltcyk7XHJcblx0XHQvLyBTQVZFIFRPIENBQ0hFIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdGlmIChvcHRpb25zLmNhY2hlICE9PSBmYWxzZSkge1xyXG5cdFx0XHRMZXhlci4kY2FjaGVbc3RyXSA9IExleGVyLiRjYWNoZVtzdHJdIHx8IFtdO1xyXG5cdFx0XHRMZXhlci4kY2FjaGVbc3RyXS5wdXNoKHJlc3VsdCk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gY29weVJlc3VsdChyZXN1bHQpO1xyXG5cdFx0XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBGYWN0b3J5IG1ldGhvZCBmb3IgLnNwbGl0KCkuXHJcblx0ICpcclxuXHQgKiBIYW5kbGVzIGNhY2hpbmcuXHJcblx0ICpcclxuXHQgKiBAc2VlIGNvbnN0cnVjdG9yKClcclxuXHQgKi9cclxuXHRzdGF0aWMgc3BsaXQoc3RyLCBkZWxpbXMsIG9wdGlvbnMpIHtcclxuXHRcdHJldHVybiBMZXhlci5sZXgoc3RyLCBkZWxpbXMsIG9wdGlvbnMpLnRva2VucztcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEZhY3RvcnkgbWV0aG9kIGZvciAubWF0Y2goKS5cclxuXHQgKlxyXG5cdCAqIEhhbmRsZXMgY2FjaGluZy5cclxuXHQgKlxyXG5cdCAqIEBzZWUgY29uc3RydWN0b3IoKVxyXG5cdCAqL1xyXG5cdHN0YXRpYyBtYXRjaChzdHIsIGRlbGltcywgb3B0aW9ucykge1xyXG5cdFx0cmV0dXJuIExleGVyLmxleChzdHIsIGRlbGltcywgb3B0aW9ucykubWF0Y2hlcztcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgYSBsZXhlciBpbnN0YW5jZSBvbiBhIHN0cmluZyB3aXRoIHRoZSBnaXZlbiBvcHRpb25zLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZyBcdHN0clxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdG9wdGlvbnM6XHJcblx0ICogQHBhcmFtIHN0cmluZyBcdFx0YmxvY2tzXHRcdFx0XHRUaGUgc3RyaW5ncyB0aGF0IGJlZ2luIGFuZCBlbmQgYSBuZXN0ZWQgc3RydWN0dXJlXHJcblx0ICogQHBhcmFtIG51bWJlciBcdFx0bGltaXRcdFx0XHRcdE1heCByZXN1bHRzIHRvIHJldHVyblxyXG5cdCAqIEBwYXJhbSBzdHJpbmcgXHRcdGJhY2tyZWZlcmVuY2VcdFx0QSBjaGFyYWN0ZXIgbGlrZSAoXFwpIHRoYXQgcHJlZml4ZXMgbm9uLWRlbGltIGNoYXJhY3RlcnNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYXJyYXlcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihzdHIsIG9wdGlvbnMpIHtcclxuXHRcdGlmICghX2lzU3RyaW5nKHN0cikpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdMZXhlciByZXF1aXJlcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gYmUgYSBzdHJpbmcuJyk7XHJcblx0XHR9XHJcblx0XHR0aGlzLiRzdHIgPSBzdHI7XHJcblx0XHR0aGlzLiRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuXHRcdGlmICghdGhpcy4kb3B0aW9ucy5ibG9ja3MpIHtcclxuXHRcdFx0dGhpcy4kb3B0aW9ucy5ibG9ja3MgPSBMZXhlci4kYmxvY2tzO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCF0aGlzLiRvcHRpb25zLnF1b3Rlcykge1xyXG5cdFx0XHR0aGlzLiRvcHRpb25zLnF1b3RlcyA9IExleGVyLiRxdW90ZXM7XHJcblx0XHR9XHJcblx0XHRpZiAoIXRoaXMuJG9wdGlvbnMuY29tbWVudHMpIHtcclxuXHRcdFx0dGhpcy4kb3B0aW9ucy5jb21tZW50cyA9IExleGVyLiRjb21tZW50cztcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFBhcnNlcyB0aGUgaW5zdGFuY2Ugc3RyaW5nIG9uIHRoZSBnaXZlbiBkZWxpbWV0ZXJzLlxyXG5cdCAqXHJcblx0ICogVGhpcyBtZXRob2Qgc3VwcG9ydHMgc3RhdGljIGNhbGxpbmcsXHJcblx0ICogaW4gd2hpY2ggY2FzZSBhIHN0cmluZyBpcyByZXF1aXJlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nIFx0c3RyXHJcblx0ICogQHBhcmFtIG9iamVjdFx0b3B0aW9uc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiBvYmplY3RcclxuXHQgKi9cclxuXHRsZXgoZGVsaW1zLCBvcHRpb25zKSB7XHJcblx0XHR2YXIgcnVudGltZSA9IHtcclxuXHRcdFx0ZGVsaW1zOiBfYXJyRnJvbShkZWxpbXMpLFxyXG5cdFx0XHRvcHRpb25zOiBfbWVyZ2UodHJ1ZSwge30sIHRoaXMuJG9wdGlvbnMsIG9wdGlvbnMgfHwge30pLFxyXG5cdFx0XHRuZXN0aW5nOiBbXSxcclxuXHRcdFx0bWF4RGVwdGg6IDAsXHJcblx0XHRcdGNvbW1lbnRzOiBbXSxcclxuXHRcdFx0dG9rZW5zOiBbXSxcclxuXHRcdFx0bWF0Y2hlczogW10sXHJcblx0XHRcdG1hdGNoZXNpOiB7fSxcclxuXHRcdH07XHJcblx0XHQvLyBJdGVyYXRlIG92ZXIgZWFjaCBjaGFyYWN0ZXIsIGtlZXAgdHJhY2sgb2YgY3VycmVudCByb3cgYW5kIGNvbHVtbiAob2YgdGhlIHJldHVybmVkIGFycmF5KVxyXG5cdFx0dGhpcy5fZXZhbENoYXJzQXQocnVudGltZSwgMCk7XHJcblx0XHRpZiAocnVudGltZS5uZXN0aW5nLmxlbmd0aCkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIHBhcnNpbmcgdGhlIHN0cmluZzogJyArIHRoaXMuJHN0ciArICcuIFVudGVybWluYXRlZCBibG9ja3M6ICcgKyBfZmxhdHRlbihydW50aW1lLm5lc3RpbmcpLmpvaW4oJywgJykgKyAnJyk7XHJcblx0XHR9XHJcblx0XHQvLyBSRVRVUk4gTkVXIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdHJldHVybiBydW50aW1lO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRXhwciBoZWxwZXI6IGV2YWx1YXRlcyBhbmQgaGFuZGxlcyB0aGUgY2hhcmFjdGVyIG9uIHRoZSBjdXJyZW50IGN1cnNvci5cclxuXHQgKiBBZHZhbmNlcyB0aGUgY3Vyc29yLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdCBcdHJ1bnRpbWVcclxuXHQgKiBAcGFyYW0gaW50XHRcdGlcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdF9ldmFsQ2hhcnNBdChydW50aW1lLCBpKSB7XHJcblx0XHRpZiAoaSA+PSB0aGlzLiRzdHIubGVuZ3RoKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdHZhciBjaGFyV2lkdGggPSAxO1xyXG5cdFx0dmFyIGNvbW1lbnRUZXN0ID0ge30sIHF1b3RlVGVzdCA9IHt9LCBuZXN0aW5nVGVzdCA9IHt9O1xyXG5cdFx0Ly8gUXVvdGVzIGluc2lkZSBjb21tZW50cyBtdXN0IGJlIGlnbm9yZWRcclxuXHRcdGlmICghcnVudGltZS5vcGVuQ29tbWVudCkge1xyXG5cdFx0XHRxdW90ZVRlc3QgPSB0aGlzLl90ZXN0UXVvdGVzKHJ1bnRpbWUsIGkpO1xyXG5cdFx0fVxyXG5cdFx0Ly8gQ29tbWVudHMgaW5zaWRlIHF1b3RlcyBtdXN0IGJlIGlnbm9yZWRcclxuXHRcdGlmICghcnVudGltZS5vcGVuUXVvdGUpIHtcclxuXHRcdFx0Y29tbWVudFRlc3QgPSB0aGlzLl90ZXN0Q29tbWVudHMocnVudGltZSwgaSk7XHJcblx0XHR9XHJcblx0XHQvLyBTYXZlIGNvbW1lbnRzXHJcblx0XHRpZiAocnVudGltZS5vcGVuQ29tbWVudCB8fCBjb21tZW50VGVzdC5lbmRpbmcpIHtcclxuXHRcdFx0Ly8gU2F2ZSBvbmx5IG91dGVyIGNvbW1lbnRzXHJcblx0XHRcdGlmICghcnVudGltZS5uZXN0aW5nLmxlbmd0aCAmJiAhbmVzdGluZ1Rlc3QuZW5kaW5nKSB7XHJcblx0XHRcdFx0dmFyIGNoYXJzID0gY29tbWVudFRlc3Quc3RhcnRpbmcgfHwgY29tbWVudFRlc3QuZW5kaW5nIHx8IHRoaXMuJHN0cltpXTtcclxuXHRcdFx0XHRjaGFyV2lkdGggPSBjaGFycy5sZW5ndGg7XHJcblx0XHRcdFx0dGhpcy5fcHVzaChydW50aW1lLCBjaGFycywgJ2NvbW1lbnRzJywgY29tbWVudFRlc3Quc3RhcnRpbmcpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHRoaXMuX3B1c2gocnVudGltZSwgdGhpcy4kc3RyW2ldKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIGlmIChydW50aW1lLm9wZW5RdW90ZSB8fCBxdW90ZVRlc3QuZW5kaW5nKSB7XHJcblx0XHRcdC8vIFllcyBhZGQgcXVvdGVzXHJcblx0XHRcdHRoaXMuX3B1c2gocnVudGltZSwgdGhpcy4kc3RyW2ldKTtcclxuXHRcdH0gZWxzZSBpZiAocnVudGltZS5vcHRpb25zLmxpbWl0ICYmIHJ1bnRpbWUubWF0Y2hlcy5sZW5ndGggPT09IHJ1bnRpbWUub3B0aW9ucy5saW1pdCkge1xyXG5cdFx0XHR0aGlzLl9wdXNoKHJ1bnRpbWUsIHRoaXMuJHN0cltpXSk7XHJcblx0XHRcdHJldHVybiB0aGlzLl9ldmFsQ2hhcnNBdChydW50aW1lLCBpICsgMSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBOZXN0aW5nIHRhZ3MgaW5zaWRlIGNvbW1lbnRzIGFuZCBxdW90ZXMgaGF2ZSBiZWVuIGlnbm9yZWRcclxuXHRcdFx0bmVzdGluZ1Rlc3QgPSB0aGlzLl90ZXN0TmVzdGluZyhydW50aW1lLCBpKTtcclxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdC8vIFNUT1AgT04gVEhJUyBDSEFSQUNURVIuLi4/XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHR2YXIgbmVzdGluZ1Rlc3QgPSB0aGlzLl90ZXN0TmVzdGluZyhydW50aW1lLCBpKTtcclxuXHRcdFx0Ly8gU1RPUCBDSEFSKFMpPyBhdCB0b3AgbGV2ZWw/XHJcblx0XHRcdHZhciBzdG9wQ2hhciA9IHRoaXMuX3Rlc3RDaGFycyhydW50aW1lLm9wdGlvbnMuc3RvcENoYXJzIHx8IFtdLCBydW50aW1lLCBpKTtcclxuXHRcdFx0aWYgKCFydW50aW1lLm5lc3RpbmcubGVuZ3RoICYmIHN0b3BDaGFyICE9PSBmYWxzZSkge1xyXG5cdFx0XHRcdHJ1bnRpbWUub3B0aW9ucy5zdG9wQ2hhciA9IHN0b3BDaGFyO1xyXG5cdFx0XHRcdHJ1bnRpbWUub3B0aW9ucy5zdG9wQ2hhckZvcndhcmQgPSB0aGlzLiRzdHIuc3Vic3RyKGkpO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0Ly8gTWF0Y2ggYW5kIHNwbGl0IG5vdy4uLlxyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0aWYgKCFydW50aW1lLmRlbGltcy5sZW5ndGgpIHtcclxuXHRcdFx0XHQvLyBCTE9DSy1CQVNFRCBTUExJVFRJTkcuLi5cclxuXHRcdFx0XHRpZiAocnVudGltZS5uZXN0aW5nLmxlbmd0aCA9PT0gMiAmJiBuZXN0aW5nVGVzdC5zdGFydGluZykge1xyXG5cdFx0XHRcdFx0cnVudGltZS5tYXRjaGVzLnB1c2gobnVsbCk7XHJcblx0XHRcdFx0XHR0aGlzLl9wdXNoKHJ1bnRpbWUsIG5lc3RpbmdUZXN0LnN0YXJ0aW5nKTtcclxuXHRcdFx0XHRcdGNoYXJXaWR0aCA9IG5lc3RpbmdUZXN0LnN0YXJ0aW5nLmxlbmd0aDtcclxuXHRcdFx0XHR9IGVsc2UgaWYgKCFydW50aW1lLm5lc3RpbmcubGVuZ3RoICYmIG5lc3RpbmdUZXN0LmVuZGluZykge1xyXG5cdFx0XHRcdFx0dGhpcy5fcHVzaChydW50aW1lLCBuZXN0aW5nVGVzdC5lbmRpbmcpO1xyXG5cdFx0XHRcdFx0Y2hhcldpZHRoID0gbmVzdGluZ1Rlc3QuZW5kaW5nLmxlbmd0aDtcclxuXHRcdFx0XHRcdHJ1bnRpbWUubWF0Y2hlcy5wdXNoKG51bGwpO1xyXG5cdFx0XHRcdH0gZWxzZS8qbm8tbmVzdGluZyBmbGFnKi8ge1xyXG5cdFx0XHRcdFx0dGhpcy5fcHVzaChydW50aW1lLCB0aGlzLiRzdHJbaV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0XHQvLyBERUxJTVMtQkFTRUQgU1BMSVRUSU5HXHJcblx0XHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdFx0aWYgKCFydW50aW1lLm5lc3RpbmcubGVuZ3RoICYmICFuZXN0aW5nVGVzdC5lbmRpbmcpIHtcclxuXHRcdFx0XHRcdC8vIEluIGNhc2UgdGhlIGNoYXJzIGF0IGluZGV4IDAgaXMgYSBkZWxpbSxcclxuXHRcdFx0XHRcdC8vIHRoZSByZXN1bHRpbmcgc3BsaXQgc2hvdWxkIGZpcnN0IGhhdmUgYW4gZW1wdHkgc3RyaW5nLCBpbnN0ZWFkIG9mIHVuZGVmaW5lZFxyXG5cdFx0XHRcdFx0dGhpcy5fcHVzaChydW50aW1lLCAnJyk7XHJcblx0XHRcdFx0XHR2YXIgbWF0Y2hlZERlbGltID0gdGhpcy5fdGVzdENoYXJzKHJ1bnRpbWUuZGVsaW1zLCBydW50aW1lLCBpKTtcclxuXHRcdFx0XHRcdGlmIChtYXRjaGVkRGVsaW0gIT09IGZhbHNlKSB7XHJcblx0XHRcdFx0XHRcdHJ1bnRpbWUubWF0Y2hlcy5wdXNoKG1hdGNoZWREZWxpbSk7XHJcblx0XHRcdFx0XHRcdHJ1bnRpbWUubWF0Y2hlc2lbaV0gPSBtYXRjaGVkRGVsaW07XHJcblx0XHRcdFx0XHRcdGNoYXJXaWR0aCA9IG1hdGNoZWREZWxpbS5sZW5ndGggfHwgMTtcclxuXHRcdFx0XHRcdFx0aWYgKCFydW50aW1lLm9wdGlvbnMucHJlc2VydmVEZWxpbXMpIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBUaGUgY3VycmVudCBjaGFyYWN0ZXIgaXMgYSBkZWxpbWl0ZXIuLi5cclxuXHRcdFx0XHRcdFx0XHQvLyBhbmQgc2hvdWxkIG5vdCBnZXQgdG8gYXBwZW5kaW5nIHRvIHRoZSBzcGxpdCBzZXJpZXMgZG93biB0aGUgbGluZVxyXG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLl9ldmFsQ2hhcnNBdChydW50aW1lLCBpICsgKG1hdGNoZWREZWxpbS5sZW5ndGggfHwgMSkpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR0aGlzLl9wdXNoKHJ1bnRpbWUsIG1hdGNoZWREZWxpbSB8fCB0aGlzLiRzdHJbaV0pO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHR2YXIgY2hhcnMgPSBuZXN0aW5nVGVzdC5zdGFydGluZyB8fCBuZXN0aW5nVGVzdC5lbmRpbmcgfHwgdGhpcy4kc3RyW2ldO1xyXG5cdFx0XHRcdFx0Y2hhcldpZHRoID0gY2hhcnMubGVuZ3RoO1xyXG5cdFx0XHRcdFx0dGhpcy5fcHVzaChydW50aW1lLCBjaGFycyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcy5fZXZhbENoYXJzQXQocnVudGltZSwgaSArIGNoYXJXaWR0aCk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBFeHByIGhlbHBlcjogdGVzdHMgZm9yIGEgcXVvdGUgc3RhcnQvZW5kIGNoYXJhY3RlciBvbiB0aGUgY3VycmVudCBjdXJzb3IuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRydW50aW1lXHJcblx0ICogQHBhcmFtIGludFx0XHRpXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG9iamVjdFxyXG5cdCAqL1xyXG5cdF90ZXN0UXVvdGVzKHJ1bnRpbWUsIGkpIHtcclxuXHRcdHZhciByZXN1bHQgPSB7fTtcclxuXHRcdChydW50aW1lLm9wdGlvbnMucXVvdGVzIHx8IFtdKS5mb3JFYWNoKHF1b3RlID0+IHtcclxuXHRcdFx0aWYgKHRoaXMuJHN0ci5zdWJzdHIoaSwgMSkgPT09IHF1b3RlKSB7XHJcblx0XHRcdFx0aWYgKCFydW50aW1lLm9wZW5RdW90ZSkge1xyXG5cdFx0XHRcdFx0cnVudGltZS5vcGVuUXVvdGUgPSBxdW90ZTtcclxuXHRcdFx0XHRcdHJlc3VsdC5zdGFydGluZyA9IHF1b3RlO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAocXVvdGUgPT09IHJ1bnRpbWUub3BlblF1b3RlKSB7XHJcblx0XHRcdFx0XHRydW50aW1lLm9wZW5RdW90ZSA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0cmVzdWx0LmVuZGluZyA9IHF1b3RlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogRXhwciBoZWxwZXI6IHRlc3RzIGZvciBhIGNvbW1lbnQgc3RhcnQvZW5kIGNoYXJhY3RlciBvbiB0aGUgY3VycmVudCBjdXJzb3IuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRydW50aW1lXHJcblx0ICogQHBhcmFtIGludFx0XHRpXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG9iamVjdFxyXG5cdCAqL1xyXG5cdF90ZXN0Q29tbWVudHMocnVudGltZSwgaSkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IHt9O1xyXG5cdFx0KHJ1bnRpbWUub3B0aW9ucy5jb21tZW50cyB8fCBbXSkuZm9yRWFjaChibG9jayA9PiB7XHJcblx0XHRcdGlmICghcnVudGltZS5vcGVuQ29tbWVudCkge1xyXG5cdFx0XHRcdHZhciBtID0gdGhpcy4kc3RyLnN1YnN0cihpKS5tYXRjaChuZXcgUmVnRXhwKCdeJyArIF9maXJzdChibG9jaykpKTtcclxuXHRcdFx0XHRpZiAobSkge1xyXG5cdFx0XHRcdFx0cnVudGltZS5vcGVuQ29tbWVudCA9IGJsb2NrO1xyXG5cdFx0XHRcdFx0cmVzdWx0LnN0YXJ0aW5nID0gbVswXTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSBpZiAoX2xhc3QoYmxvY2spID09PSBfbGFzdChydW50aW1lLm9wZW5Db21tZW50KSkge1xyXG5cdFx0XHRcdHZhciBtID0gdGhpcy4kc3RyLnN1YnN0cihpKS5tYXRjaChuZXcgUmVnRXhwKCdeJyArIF9sYXN0KGJsb2NrKSkpO1xyXG5cdFx0XHRcdGlmIChtKSB7XHJcblx0XHRcdFx0XHRydW50aW1lLm9wZW5Db21tZW50ID0gZmFsc2U7XHJcblx0XHRcdFx0XHRyZXN1bHQuZW5kaW5nID0gbVswXTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEV4cHIgaGVscGVyOiB0ZXN0cyBmb3IgYSBuZXN0aW5nIHN0YXJ0L2VuZCBjaGFyYWN0ZXIgb24gdGhlIGN1cnJlbnQgY3Vyc29yLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdFx0cnVudGltZVxyXG5cdCAqIEBwYXJhbSBpbnRcdFx0aVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBvYmplY3RcclxuXHQgKi9cclxuXHRfdGVzdE5lc3RpbmcocnVudGltZSwgaSkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IHt9O1xyXG5cdFx0KHJ1bnRpbWUub3B0aW9ucy5ibG9ja3MgfHwgW10pLmZvckVhY2goYmxvY2sgPT4ge1xyXG5cdFx0XHR2YXIgc3RhcnRpbmcgPSB0aGlzLiRzdHIuc3Vic3RyKGkpLm1hdGNoKG5ldyBSZWdFeHAoJ14nICsgX2ZpcnN0KGJsb2NrKSkpO1xyXG5cdFx0XHRpZiAoc3RhcnRpbmcpIHtcclxuXHRcdFx0XHRydW50aW1lLm5lc3RpbmcgPSBydW50aW1lLm5lc3RpbmcuY29uY2F0KFtibG9ja10pO1xyXG5cdFx0XHRcdHJlc3VsdC5zdGFydGluZyA9IHN0YXJ0aW5nWzBdO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHJ1bnRpbWUubmVzdGluZy5sZW5ndGggJiYgX2xhc3QoYmxvY2spID09PSBfbGFzdChfbGFzdChydW50aW1lLm5lc3RpbmcpKSkge1xyXG5cdFx0XHRcdHZhciBlbmRpbmcgPSB0aGlzLiRzdHIuc3Vic3RyKGkpLm1hdGNoKG5ldyBSZWdFeHAoJ14nICsgX2xhc3QoYmxvY2spKSk7XHJcblx0XHRcdFx0aWYgKGVuZGluZykge1xyXG5cdFx0XHRcdFx0cnVudGltZS5uZXN0aW5nID0gcnVudGltZS5uZXN0aW5nLnNsaWNlKDAsIC0xKTtcclxuXHRcdFx0XHRcdHJlc3VsdC5lbmRpbmcgPSBlbmRpbmdbMF07XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHJ1bnRpbWUubWF4RGVwdGggPSBNYXRoLm1heChydW50aW1lLm1heERlcHRoLCBydW50aW1lLm5lc3RpbmcubGVuZ3RoKTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBFeHByIGhlbHBlcjogdGVzdHMgZm9yIGEgZGVsaW1pdGVyIG9yIHN0b3AgY2hhcmFjdGVyIG9uIHRoZSBjdXJyZW50IGN1cnNvci5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBhcnJheVx0XHR0ZXN0TGlzdFxyXG5cdCAqIEBwYXJhbSBvYmplY3QgXHRydW50aW1lXHJcblx0ICogQHBhcmFtIGludFx0XHRpXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG1peGVkXHJcblx0ICovXHJcblx0X3Rlc3RDaGFycyh0ZXN0TGlzdCwgcnVudGltZSwgaSkge1xyXG5cdFx0Zm9yICh2YXIgayA9IDA7IGsgPCB0ZXN0TGlzdC5sZW5ndGg7IGsgKyspIHtcclxuXHRcdFx0dmFyIHRlc3QgPSB0ZXN0TGlzdFtrXTtcclxuXHRcdFx0aWYgKF9pc0Z1bmN0aW9uKHRlc3QpKSB7XHJcblx0XHRcdFx0dmFyIHJldCA9IHRlc3QodGhpcy4kc3RyLnN1YnN0cigwLCBpKSwgdGhpcy4kc3RyLnN1YnN0cihpKSk7XHJcblx0XHRcdFx0aWYgKHJldCAhPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRcdHJldHVybiByZXQ7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChydW50aW1lLm9wdGlvbnMudXNlUmVnZXgpIHtcclxuXHRcdFx0XHR2YXIgbSA9IHRoaXMuJHN0ci5zdWJzdHIoaSkubWF0Y2gobmV3IFJlZ0V4cCgnXicgKyB0ZXN0LCBydW50aW1lLm9wdGlvbnMudXNlUmVnZXggIT09IHRydWUgPyBydW50aW1lLm9wdGlvbnMudXNlUmVnZXggOiAnJykpO1xyXG5cdFx0XHRcdGlmIChtKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gbVswXTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCghcnVudGltZS5vcHRpb25zLmNpICYmIHRoaXMuJHN0ci5zdWJzdHIoaSwgdGVzdC5sZW5ndGgpID09PSB0ZXN0KVxyXG5cdFx0XHR8fCAocnVudGltZS5vcHRpb25zLmNpICYmIHRoaXMuJHN0ci5zdWJzdHIoaSwgdGVzdC5sZW5ndGgpLnRvTG93ZXJDYXNlKCkgPT09IHRlc3QudG9Mb3dlckNhc2UoKSkpIHtcclxuXHRcdFx0XHRyZXR1cm4gdGVzdDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBFeHByIGhlbHBlcjogcHVzaGVzIGEgY2hhcmFjdGVyIG9yIHNldCBvZiBjaGFyYWN0ZXJzIGludG8gdGhlIGN1cnJlbnQgc3BsaXQgc2VyaWVzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdCBcdHJ1bnRpbWVcclxuXHQgKiBAcGFyYW0gc3RyaW5nXHRjaGFyc1xyXG5cdCAqIEBwYXJhbSBzdHJpbmdcdHRhcmdldFxyXG5cdCAqIEBwYXJhbSBib29sXHRcdGlzTmV3U2VyaWVzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRfcHVzaChydW50aW1lLCBjaGFycywgdGFyZ2V0ID0gJ3Rva2VucycsIGlzTmV3U2VyaWVzID0gZmFsc2UpIHtcclxuXHRcdHZhciBzcGxpdFNlcmllcyA9IHJ1bnRpbWUubWF0Y2hlcy5sZW5ndGg7XHJcblx0XHRpZiAoX2lzVW5kZWZpbmVkKHJ1bnRpbWUudG9rZW5zW3NwbGl0U2VyaWVzXSkpIHtcclxuXHRcdFx0cnVudGltZS50b2tlbnNbc3BsaXRTZXJpZXNdID0gJyc7XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKHRhcmdldCA9PT0gJ2NvbW1lbnRzJykge1xyXG5cdFx0XHRpZiAoIXJ1bnRpbWUudG9rZW5zW3NwbGl0U2VyaWVzXS5jb21tZW50cykge1xyXG5cdFx0XHRcdHJ1bnRpbWUudG9rZW5zW3NwbGl0U2VyaWVzXSA9IG5ldyBTdHJpbmcocnVudGltZS50b2tlbnNbc3BsaXRTZXJpZXNdKTtcclxuXHRcdFx0XHRydW50aW1lLnRva2Vuc1tzcGxpdFNlcmllc10uY29tbWVudHMgPSBbXTtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgc3BsaXRTZXJpZXMyID0gcnVudGltZS50b2tlbnNbc3BsaXRTZXJpZXNdLmNvbW1lbnRzLmxlbmd0aCAtICghcnVudGltZS50b2tlbnNbc3BsaXRTZXJpZXNdLmNvbW1lbnRzLmxlbmd0aCB8fCBpc05ld1NlcmllcyA/IDAgOiAxKTtcclxuXHRcdFx0cnVudGltZS50b2tlbnNbc3BsaXRTZXJpZXNdLmNvbW1lbnRzW3NwbGl0U2VyaWVzMl0gPSAocnVudGltZS50b2tlbnNbc3BsaXRTZXJpZXNdLmNvbW1lbnRzW3NwbGl0U2VyaWVzMl0gfHwgJycpICsgY2hhcnM7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR2YXIgY29tbWVudHMgPSBydW50aW1lLnRva2Vuc1tzcGxpdFNlcmllc10uY29tbWVudHM7XHJcblx0XHRcdHJ1bnRpbWUudG9rZW5zW3NwbGl0U2VyaWVzXSA9IG5ldyBTdHJpbmcocnVudGltZS50b2tlbnNbc3BsaXRTZXJpZXNdICsgY2hhcnMpO1xyXG5cdFx0XHRydW50aW1lLnRva2Vuc1tzcGxpdFNlcmllc10uY29tbWVudHMgPSBjb21tZW50cztcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFNwbGl0cyB0aGUgaW5zdGFuY2Ugc3RyaW5nIG9uIHRoZSBnaXZlbiBkZWxpbWV0ZXJzIGFuZCByZXR1cm5zIHRoZSB0b2tlbnMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nIFx0c3RyXHJcblx0ICogQHBhcmFtIG9iamVjdFx0b3B0aW9uc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiBhcnJheVxyXG5cdCAqL1xyXG5cdHNwbGl0KHN0ciwgZGVsaW1zLCBvcHRpb25zKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5sZXgoZGVsaW1zLCBvcHRpb25zKS50b2tlbnM7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFNwbGl0cyB0aGUgaW5zdGFuY2Ugc3RyaW5nIG9uIHRoZSBnaXZlbiBkZWxpbWV0ZXJzIGFuZCByZXR1cm5zIHRoZSBtYXRjaGVzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZyBcdHN0clxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdG9wdGlvbnM6XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGFycmF5XHJcblx0ICovXHJcblx0bWF0Y2goc3RyLCBkZWxpbXMsIG9wdGlvbnMpIHtcclxuXHRcdHJldHVybiB0aGlzLmxleChkZWxpbXMsIG9wdGlvbnMpLm1hdGNoZXM7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFBhcnNlcyB0aGUgaW5zdGFuY2Ugc3RyaW5nIG9uIHRoZSBnaXZlbiBkZWxpbWV0ZXJzIHVzaW5nIHJlZ2V4LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZyBcdHN0clxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdG9wdGlvbnNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gb2JqZWN0XHJcblx0ICovXHJcblx0cmVnUGFyc2UoZGVsaW1zLCBvcHRpb25zKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5sZXgoZGVsaW1zLCBfbWVyZ2Uoe3VzZVJlZ2V4OiB0cnVlfSwgb3B0aW9ucyB8fCB7fSkpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBTcGxpdHMgdGhlIGluc3RhbmNlIHN0cmluZyBvbiB0aGUgZ2l2ZW4gZGVsaW1ldGVycyB1c2luZyByZWdleDsgcmV0dXJucyB0aGUgdG9rZW5zLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZyBcdHN0clxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdG9wdGlvbnNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYXJyYXlcclxuXHQgKi9cclxuXHRyZWdTcGxpdChkZWxpbXMsIG9wdGlvbnMpIHtcclxuXHRcdHJldHVybiB0aGlzLnJlZ1BhcnNlKGRlbGltcywgb3B0aW9ucykudG9rZW5zO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBNYXRjaGVzIHRoZSBpbnN0YW5jZSBzdHJpbmcgb24gdGhlIGdpdmVuIGRlbGltZXRlcnMgdXNpbmcgcmVnZXg7IHJldHVybnMgdGhlIG1hdGNoZXMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nIFx0c3RyXHJcblx0ICogQHBhcmFtIG9iamVjdFx0b3B0aW9uc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiBhcnJheVxyXG5cdCAqL1xyXG5cdHJlZ01hdGNoKGRlbGltcywgb3B0aW9ucykge1xyXG5cdFx0cmV0dXJuIHRoaXMucmVnUGFyc2UoZGVsaW1zLCBvcHRpb25zKS5tYXRjaGVzO1xyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAdmFyIGFycmF5XHJcbiAqL1xyXG5MZXhlci4kYmxvY2tzID0gW1snXFxcXCgnLCAnXFxcXCknXSwgWydcXFxcWycsICdcXFxcXSddLCBbJ1xcXFx7JywgJ1xcXFx9J10sXTtcclxuXHJcbi8qKlxyXG4gKiBAdmFyIGFycmF5XHJcbiAqL1xyXG5MZXhlci4kcXVvdGVzID0gWydcIicsIFwiJ1wiLCAnYCcsXTtcclxuXHJcbi8qKlxyXG4gKiBAdmFyIGFycmF5XHJcbiAqL1xyXG5MZXhlci4kY29tbWVudHMgPSBbWydcXFxcL1xcXFwqJywgJ1xcXFwqXFxcXC8nXSwgWydcXFxcL1xcXFwvJywgJyhcXFxccik/XFxcXG4nXSxdO1xyXG5cclxuLyoqXHJcbiAqIEB2YXIgb2JqZWN0XHJcbiAqL1xyXG5MZXhlci4kY2FjaGUgPSB7fTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBMZXhlcjtcclxuXHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVW5kZWZpbmVkLmpzJztcclxuaW1wb3J0IF9pc0Z1bmN0aW9uIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1N0cmluZy5qcyc7XHJcbmltcG9ydCBfaXNOdW1iZXIgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bWJlci5qcyc7XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbnRleHRzIHtcclxuXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlcyBhIG5ldyBjb250ZXh0IHN0YWNrLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGFueVx0XHQgXHRtYWluQ29udGV4dFxyXG5cdCAqIEBwYXJhbSBDb250ZXh0c1x0IFx0c3VwZXJDb250ZXh0XHJcblx0ICogQHBhcmFtIG9iamVjdFx0IFx0bG9jYWxDb250ZXh0XHJcblx0ICogQHBhcmFtIG9iamVjdFx0IFx0bG9jYWxDb250ZXh0TWV0YVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBDb250ZXh0c1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKG1haW5Db250ZXh0LCBzdXBlckNvbnRleHQgPSBudWxsLCBsb2NhbENvbnRleHQgPSB7fSwgbG9jYWxDb250ZXh0TWV0YSA9IHt9KSB7XHJcblx0XHR0aGlzLm1haW5Db250ZXh0ID0gbWFpbkNvbnRleHQ7XHJcblx0XHR0aGlzLnN1cGVyQ29udGV4dCA9IHN1cGVyQ29udGV4dCA/IENvbnRleHRzLmNyZWF0ZShzdXBlckNvbnRleHQpIDogbnVsbDtcclxuXHRcdHRoaXMubG9jYWxDb250ZXh0ID0gbG9jYWxDb250ZXh0XHJcblx0XHR0aGlzLmxvY2FsQ29udGV4dE1ldGEgPSBsb2NhbENvbnRleHRNZXRhXHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFRyaWVzIHRoZSBoYW5kbGVyIG9uIHRoZSBkaWZmZXJlbnQgY29udGV4dHMgaW4gdGhlIHN0YWNrLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZ3xudW1iZXIgXHRwcm9wXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uXHRcdCBcdGNhbGxiYWNrXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uXHRcdCBcdGZpbmFsXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIENvbnRleHRzXHJcblx0ICovXHJcblx0aGFuZGxlKHByb3AsIGNhbGxiYWNrLCBmaW5hbCwgbGV2ZWwgPSAwKSB7XHJcblx0XHR2YXIgY2FsbE1haW4gPSAoKSA9PiB7XHJcblx0XHRcdHJldHVybiBjYWxsYmFjayh0aGlzLm1haW5Db250ZXh0LCBudWxsLCAoKSA9PiB7XHJcblx0XHRcdFx0aWYgKHRoaXMuc3VwZXJDb250ZXh0KSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5zdXBlckNvbnRleHQuaGFuZGxlKHByb3AsIGNhbGxiYWNrLCBmaW5hbCwgbGV2ZWwgKyAxKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKGZpbmFsKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gZmluYWwoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sIGxldmVsKTtcclxuXHRcdH07XHJcblx0XHRpZiAocHJvcCA9PT0gJ3RvU3RyaW5nJyAmJiB0aGlzLmxvY2FsQ29udGV4dC50b1N0cmluZyA9PT0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZykge1xyXG5cdFx0XHRyZXR1cm4gY2FsbE1haW4oKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBjYWxsYmFjayh0aGlzLmxvY2FsQ29udGV4dCwgdGhpcy5sb2NhbENvbnRleHRNZXRhLCBjYWxsTWFpbiwgbGV2ZWwpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUmV0dXJucyBhIHByb3BlcnR5J3MgdmFsdWUgZnJvbSB0aGUgZmlyc3QgcG9zc2Vzc2luZyBjb250ZXh0LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZ3xudW1iZXIgcHJvcFxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0dHJhcFxyXG5cdCAqIEBwYXJhbSBib29sXHRcdFx0YmluZFRoaXNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gbWl4ZWRcclxuXHQgKi9cclxuXHRnZXQocHJvcCwgdHJhcCA9IHt9LCBiaW5kVGhpcyA9IHRydWUpIHtcclxuXHRcdGlmIChwcm9wIGluc3RhbmNlb2YgU3RyaW5nKSB7XHJcblx0XHRcdC8vIGluY2FzZSB3ZSByZWNpZXZlZCBuZXcgU3RyaW5nKClcclxuXHRcdFx0cHJvcCA9IHByb3AgKyAnJztcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLmhhbmRsZShwcm9wLCAoY29udHh0T2JqLCBjb250eHRNZXRhLCBhZHZhbmNlLCBsZXZlbCkgPT4ge1xyXG5cdFx0XHR2YXIgdmFsID0gX2dldChjb250eHRPYmosIHByb3AsIHRyYXApO1xyXG5cdFx0XHQvLyBhc2tpbmcgZmlyc3QgbXVnaHQgbm90IGdvIHdlbGwgZ2VuZXJhbGx5ICYmIF9oYXModGhpc1tpXSwgcHJvcCwgdHJhcClcclxuXHRcdFx0aWYgKCFfaXNVbmRlZmluZWQodmFsKSB8fCBfaGFzKGNvbnR4dE9iaiwgcHJvcCwgdHJhcCkpIHtcclxuXHRcdFx0XHRpZiAoX2lzRnVuY3Rpb24odmFsKSAmJiBiaW5kVGhpcykge1xyXG5cdFx0XHRcdFx0cmV0dXJuIHZhbC5iaW5kKGNvbnR4dE9iaik7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB2YWw7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGFkdmFuY2UoKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBVcGRhdGVzIGEgcHJvcGVydHkncyB2YWx1ZSBmcm9tIHRoZSBmaXJzdCBwb3NzZXNzaW5nIGNvbnRleHQuXHJcblx0ICogT3IgYWRkcyBhIG5ldyBjb250ZXh0IHRvIHNldCB0aGUgcHJvcGVydHkuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nfG51bWJlciBwcm9wXHJcblx0ICogQHBhcmFtIG1peGVkXHRcdFx0dmFsXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHR0cmFwXHJcblx0ICogQHBhcmFtIGJvb2xcdFx0XHRpbml0S2V5d29yZFxyXG5cdCAqXHJcblx0ICogQHJldHVybiBib29sXHJcblx0ICovXHJcblx0c2V0KHByb3AsIHZhbCwgdHJhcCA9IHt9LCBpbml0S2V5d29yZCA9IGZhbHNlKSB7XHJcblx0XHRpZiAocHJvcCBpbnN0YW5jZW9mIFN0cmluZykge1xyXG5cdFx0XHQvLyBpbmNhc2Ugd2UgcmVjaWV2ZWQgbmV3IFN0cmluZygpXHJcblx0XHRcdHByb3AgPSBwcm9wICsgJyc7XHJcblx0XHR9XHJcblx0XHRjb25zdCBfc2V0ID0gKGNudHh0LCBwcm9wLCB2YWwsIHRyYXApID0+IHtcclxuXHRcdFx0aWYgKHRyYXAuc2V0KSB7XHJcblx0XHRcdFx0cmV0dXJuIHRyYXAuc2V0KGNudHh0LCBwcm9wLCB2YWwpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNudHh0W3Byb3BdID0gdmFsO1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH07XHJcblx0XHRyZXR1cm4gdGhpcy5oYW5kbGUoaW5pdEtleXdvcmQgPyB0cnVlIDogcHJvcCwgKGNvbnR4dE9iaiwgbG9jYWxDb250eHRNZXRhLCBhZHZhbmNlKSA9PiB7XHJcblx0XHRcdC8vIFdoYXRldmVyIHRoZSBsZXZlbCBvZiBsb2NhbENvbnRleHQuLi5cclxuXHRcdFx0aWYgKGxvY2FsQ29udHh0TWV0YSAmJiBsb2NhbENvbnR4dE1ldGFbcHJvcF0gPT09ICdjb25zdCcpIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0NPTlNUICcgKyBwcm9wICsgJ2Nhbm5vdCBiZSBtb2RpZmllZCEnKTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBTZXQgdGhpcyBsb2NhbGx5LCB3ZSB3b250IGJlIGdldHRpbmcgdG8gYWR2YW5jZSgpXHJcblx0XHRcdGlmIChpbml0S2V5d29yZCkge1xyXG5cdFx0XHRcdGlmICghWyd2YXInLCAnbGV0JywgJ2NvbnN0J10uaW5jbHVkZXMoaW5pdEtleXdvcmQpKSB7XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1VucmVjb2duaXplZCBkZWNsYXJhdG9yOiAnICsgaW5pdEtleXdvcmQgKyAnIScpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRsb2NhbENvbnR4dE1ldGFbcHJvcF0gPSBpbml0S2V5d29yZDtcclxuXHRcdFx0XHRyZXR1cm4gX3NldChjb250eHRPYmosIHByb3AsIHZhbCwgdHJhcCk7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gRm9yIGFueSBvdGhlciBjb250ZXgsIGl0IG11c3QgYWxyZWFkeSBleGlzdHNcclxuXHRcdFx0aWYgKF9oYXMoY29udHh0T2JqLCBwcm9wLCB0cmFwKSkge1xyXG5cdFx0XHRcdHJldHVybiBfc2V0KGNvbnR4dE9iaiwgcHJvcCwgdmFsLCB0cmFwKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gYWR2YW5jZSgpO1xyXG5cdFx0fSwgKCkgPT4ge3Rocm93IG5ldyBFcnJvcignXCInICsgcHJvcCArICdcIiBpcyB1bmRlZmluZWQhJyk7fSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIERlbGV0ZXMgYSBwcm9wZXJ0eSBmcm9tIHRoZSBmaXJzdCBwb3NzZXNzaW5nIGNvbnRleHQuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nfG51bWJlciBwcm9wXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHR0cmFwXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGJvb2xcclxuXHQgKi9cclxuXHRkZWwocHJvcCwgdHJhcCA9IHt9KSB7XHJcblx0XHRpZiAocHJvcCBpbnN0YW5jZW9mIFN0cmluZykge1xyXG5cdFx0XHQvLyBpbmNhc2Ugd2UgcmVjaWV2ZWQgbmV3IFN0cmluZygpXHJcblx0XHRcdHByb3AgPSBwcm9wICsgJyc7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcy5oYW5kbGUocHJvcCwgKGNvbnR4dE9iaiwgY29udHh0TWV0YSwgYWR2YW5jZSkgPT4ge1xyXG5cdFx0XHRpZiAoX2hhcyhjb250eHRPYmosIHByb3AsIHRyYXApKSB7XHJcblx0XHRcdFx0aWYgKHRyYXAuZGVsZXRlUHJvcGVydHkgfHwgdHJhcC5kZWwpIHtcclxuXHRcdFx0XHRcdHJldHVybiAodHJhcC5kZWxldGVQcm9wZXJ0eSB8fCB0cmFwLmRlbCkoY29udHh0T2JqLCBwcm9wKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZGVsZXRlIGNvbnR4dE9ialtwcm9wXTtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gYWR2YW5jZSgpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBUZXN0cyBpZiBhIHByb3BlcnR5IGV4aXN0cyBpbiBhbnkgY29udGV4dC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmd8bnVtYmVyIHByb3BcclxuXHQgKiBAcGFyYW0gc3RyaW5nfG51bWJlciBwcm9wMlxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0dHJhcFxyXG5cdCAqXHJcblx0ICogQHJldHVybiBib29sXHJcblx0ICovXHJcblx0aGFzKHByb3AsIHByb3AyLCB0cmFwID0ge30pIHtcclxuXHRcdGlmIChwcm9wIGluc3RhbmNlb2YgU3RyaW5nKSB7XHJcblx0XHRcdC8vIGluY2FzZSB3ZSByZWNpZXZlZCBuZXcgU3RyaW5nKClcclxuXHRcdFx0cHJvcCA9IHByb3AgKyAnJztcclxuXHRcdH1cclxuXHRcdGlmIChwcm9wMiBpbnN0YW5jZW9mIFN0cmluZykge1xyXG5cdFx0XHQvLyBpbmNhc2Ugd2UgcmVjaWV2ZWQgbmV3IFN0cmluZygpXHJcblx0XHRcdHByb3AyID0gcHJvcDIgKyAnJztcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLmhhbmRsZShwcm9wLCAoY29udHh0T2JqLCBjb250eHRNZXRhLCBhZHZhbmNlKSA9PiB7XHJcblx0XHRcdGlmIChfaGFzKGNvbnR4dE9iaiwgcHJvcCwgdHJhcCkpIHtcclxuXHRcdFx0XHR2YXIgY29udGV4dE9iajIgPSBfZ2V0KGNvbnR4dE9iaiwgcHJvcCwgdHJhcCk7XHJcblx0XHRcdFx0cmV0dXJuIF9oYXMoY29udGV4dE9iajIsIHByb3AyLCB0cmFwKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gYWR2YW5jZSgpO1xyXG5cdFx0fSwgKCkgPT4ge3Rocm93IG5ldyBFcnJvcignXCInICsgcHJvcCArICdcIiBpcyB1bmRlZmluZWQhJyk7fSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFRlc3RzIGlmIGEgcHJvcGVydHkgZXhpc3RzIGluIGFueSBjb250ZXh0LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZ3xudW1iZXIgcHJvcFxyXG5cdCAqIEBwYXJhbSBhcnJheVx0XHRcdGFyZ3NcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdHRyYXBcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gbWl4ZWRcclxuXHQgKi9cclxuXHRleGVjKHByb3AsIGFyZ3MsIHRyYXAgPSB7fSkge1xyXG5cdFx0aWYgKHByb3AgaW5zdGFuY2VvZiBTdHJpbmcpIHtcclxuXHRcdFx0Ly8gaW5jYXNlIHdlIHJlY2lldmVkIG5ldyBTdHJpbmcoKVxyXG5cdFx0XHRwcm9wID0gcHJvcCArICcnO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMuaGFuZGxlKHByb3AsIChjb250eHRPYmosIGNvbnR4dE1ldGEsIGFkdmFuY2UpID0+IHtcclxuXHRcdFx0dmFyIGZuID0gX2dldChjb250eHRPYmosIHByb3AsIHRyYXApO1xyXG5cdFx0XHRpZiAoIV9pc1VuZGVmaW5lZChmbikgfHwgX2hhcyhjb250eHRPYmosIHByb3AsIHRyYXApKSB7XHJcblx0XHRcdFx0aWYgKCFfaXNGdW5jdGlvbihmbikpIHtcclxuXHRcdFx0XHRcdGlmICh0cmFwLmV4ZWMpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRyYXAuZXhlYyhjb250eHRPYmosIHByb3AsIGFyZ3MpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdcIicgKyBwcm9wICsgJ1wiIGlzIG5vdCBhIGZ1bmN0aW9uISAoQ2FsbGVkIG9uIHR5cGU6ICcgKyB0eXBlb2YgY29udHh0T2JqICsgJy4pJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmICh0cmFwLmFwcGx5KSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJhcC5hcHBseShmbiwgY29udHh0T2JqLCBhcmdzKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIGZuLmFwcGx5KGNvbnR4dE9iaiwgYXJncyk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGFkdmFuY2UoKTtcclxuXHRcdH0sICgpID0+IHtcclxuXHRcdFx0aWYgKHRyYXAuZXhlY1Vua25vd24pIHtcclxuXHRcdFx0XHRyZXR1cm4gdHJhcC5leGVjVW5rbm93bih0aGlzLCBwcm9wLCBhcmdzKTtcclxuXHRcdFx0fVxyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIHByb3AgKyAnKClcIiBpcyB1bmRlZmluZWQhJyk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEZhY3RvcnkgbWV0aG9kIGZvciBtYWtpbmcgYSBDb250ZXh0cyBpbnN0YW5jZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBhcnJheXxvYmplY3QgXHRjbnR4dFxyXG5cdCAqXHJcblx0ICogQHJldHVybiBDb250ZXh0c1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBjcmVhdGUoY250eHQpIHtcclxuXHRcdHJldHVybiBjbnR4dCBpbnN0YW5jZW9mIENvbnRleHRzID8gY250eHQgOiBuZXcgQ29udGV4dHMoY250eHQpO1xyXG5cdH1cclxufTtcclxuXHJcbmNvbnN0IF9nZXQgPSAoY250eHQsIHByb3AsIHRyYXApID0+IHRyYXAuZ2V0ID8gdHJhcC5nZXQoY250eHQsIHByb3ApIFxyXG5cdDogKChfaXNUeXBlT2JqZWN0KGNudHh0KSAmJiBjbnR4dCkgfHwgX2lzU3RyaW5nKGNudHh0KSB8fCBfaXNOdW1iZXIoY250eHQpID8gY250eHRbcHJvcF0gOiB1bmRlZmluZWQpOztcclxuXHJcbmNvbnN0IF9oYXMgPSAoY250eHQsIHByb3AsIHRyYXApID0+IHRyYXAuaGFzID8gdHJhcC5oYXMoY250eHQsIHByb3ApIDogKFxyXG5cdF9pc1R5cGVPYmplY3QoY250eHQpICYmIGNudHh0ID8gcHJvcCBpbiBjbnR4dCA6ICFfaXNVbmRlZmluZWQoY250eHRbcHJvcF0pXHJcbik7XHJcblxyXG5jbGFzcyBMb2NhbENvbnRleHQge307IiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB0aGUgc3RyaW5nIGlzIHdhcmFwcGVkIHdpdGggdGhlIGdpdmVuIG9wZW5pbmcgYW5kIGNsb3NpbmcgdGFncy5cclxuICpcclxuICogQHBhcmFtICBzdHJpbmcgIHN1YmplY3RcclxuICogQHBhcmFtICBzdHJpbmcgIG9wZW5pbmdUYWdcclxuICogQHBhcmFtICBzdHJpbmcgIGNsb3NpbmdUYWdcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdWJqZWN0LCBvcGVuaW5nVGFnLCBjbG9zaW5nVGFnKSB7XHJcblx0cmV0dXJuIHN1YmplY3Quc3RhcnRzV2l0aChvcGVuaW5nVGFnKSAmJiBzdWJqZWN0LmVuZHNXaXRoKGNsb3NpbmdUYWcpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFJldHVybiB0aGUgcmVtYWluZGVyIG9mIGEgc3RyaW5nIGFmdGVyIGEgZ2l2ZW4gdmFsdWUuXHJcbiAqXHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzdWJqZWN0XHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzZWFyY2hcclxuICogQHBhcmFtICBib29sXHQgICBhZnRlckxhc3RcclxuICpcclxuICogQHJldHVybiBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN1YmplY3QsIHNlYXJjaCwgYWZ0ZXJMYXN0ID0gZmFsc2UpIHtcclxuXHRpZiAoc2VhcmNoID09ICcnKSB7XHJcblx0XHRyZXR1cm4gc3ViamVjdDtcclxuXHR9XHJcblx0dmFyIHBvcyA9IGFmdGVyTGFzdCA/IHN1YmplY3QubGFzdEluZGV4T2Yoc2VhcmNoKSA6IHN1YmplY3QuaW5kZXhPZihzZWFyY2gpO1xyXG5cdGlmIChwb3MgPT09IC0xKSB7XHJcblx0XHRyZXR1cm4gJyc7XHJcblx0fVxyXG5cdHJldHVybiBzdWJqZWN0LnN1YnN0cihwb3MgKyBzZWFyY2gubGVuZ3RoKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBSZXR1cm4gdGhlIHBhcnQgb2YgYSBzdHJpbmcgYmVmb3JlIGEgZ2l2ZW4gdmFsdWUuXHJcbiAqXHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzdWJqZWN0XHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzZWFyY2hcclxuICogQHBhcmFtICBib29sXHQgICBiZWZvcmVMYXN0XHJcbiAqXHJcbiAqIEByZXR1cm4gc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdWJqZWN0LCBzZWFyY2gsIGJlZm9yZUxhc3QgPSBmYWxzZSkge1xyXG5cdGlmIChzZWFyY2ggPT0gJycpIHtcclxuXHRcdHJldHVybiBzdWJqZWN0O1xyXG5cdH1cclxuXHR2YXIgcG9zID0gYmVmb3JlTGFzdCA/IHN1YmplY3QubGFzdEluZGV4T2Yoc2VhcmNoKSA6IHN1YmplY3QuaW5kZXhPZihzZWFyY2gpO1xyXG5cdGlmIChwb3MgPT09IC0xKSB7XHJcblx0XHRyZXR1cm4gc3ViamVjdDtcclxuXHR9XHJcblx0cmV0dXJuIHN1YmplY3Quc3Vic3RyKDAsIHBvcyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfYWZ0ZXIgZnJvbSAnLi9hZnRlci5qcyc7XHJcbmltcG9ydCBfYmVmb3JlTGFzdCBmcm9tICcuL2JlZm9yZUxhc3QuanMnO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHN0cmluZyB3aXRob3V0IHRoZSBnaXZlbiBvcGVuaW5nIGFuZCBjbG9zaW5nIHRhZ3MuXHJcbiAqXHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzdWJqZWN0XHJcbiAqIEBwYXJhbSAgc3RyaW5nICBvcGVuaW5nVGFnXHJcbiAqIEBwYXJhbSAgc3RyaW5nICBjbG9zaW5nVGFnXHJcbiAqXHJcbiAqIEByZXR1cm4gc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdWJqZWN0LCBvcGVuaW5nVGFnLCBjbG9zaW5nVGFnKSB7XHJcblx0cmV0dXJuIF9iZWZvcmVMYXN0KF9hZnRlcihzdWJqZWN0LCBvcGVuaW5nVGFnKSwgY2xvc2luZ1RhZyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfYmVmb3JlIGZyb20gJy4vYmVmb3JlLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gdGhlIHBhcnQgb2YgYSBzdHJpbmcgYmVmb3JlIGxhc3Qgb2NjdXJlbmNlIG9mIGEgZ2l2ZW4gdmFsdWUuXHJcbiAqXHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzdWJqZWN0XHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzZWFyY2hcclxuICpcclxuICogQHJldHVybiBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN1YmplY3QsIHNlYXJjaCkge1xyXG5cdHJldHVybiBfYmVmb3JlKHN1YmplY3QsIHNlYXJjaCwgdHJ1ZSk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBFeHBySW50ZXJmYWNlIGZyb20gJy4uL0V4cHJJbnRlcmZhY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBBYnN0cmFjdGlvbkludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEludGVyZmFjZSA9IGNsYXNzIGV4dGVuZHMgRXhwckludGVyZmFjZSB7fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVyZmFjZS5wcm90b3R5cGUsICdqc2VuVHlwZScsIHtcclxuXHRnZXQoKSB7IHJldHVybiAnQWJzdHJhY3Rpb24nOyB9LFxyXG59KTtcclxuZXhwb3J0IGRlZmF1bHQgSW50ZXJmYWNlO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX3dyYXBwZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvd3JhcHBlZC5qcyc7XHJcbmltcG9ydCBfdW53cmFwIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3Vud3JhcC5qcyc7XHJcbmltcG9ydCBBYnN0cmFjdGlvbkludGVyZmFjZSBmcm9tICcuL0Fic3RyYWN0aW9uSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IExleGVyIGZyb20gJy4uL0xleGVyLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQWJzdHJhY3Rpb24gY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBBYnN0cmFjdGlvbiA9IGNsYXNzIGV4dGVuZHMgQWJzdHJhY3Rpb25JbnRlcmZhY2Uge1xyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGV4cHIpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLmV4cHIgPSBleHByO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRldmFsKGNvbnRleHQgPSBudWxsLCB0cmFwID0ge30pIHtcclxuXHRcdHJldHVybiB0aGlzLmV4cHIuZXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHR0b1N0cmluZyhjb250ZXh0ID0gbnVsbCkge1xyXG5cdFx0cmV0dXJuICcoJyArIHRoaXMuZXhwci50b1N0cmluZyhjb250ZXh0KSArICcpJztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgcGFyc2UoZXhwciwgcGFyc2VDYWxsYmFjaywgU3RhdGljID0gQWJzdHJhY3Rpb24pIHtcclxuXHRcdGlmIChfd3JhcHBlZChleHByLCAnKCcsICcpJykgJiYgIUxleGVyLm1hdGNoKGV4cHIsIFsnICddKS5sZW5ndGgpIHtcclxuXHRcdFx0cmV0dXJuIG5ldyBTdGF0aWMoXHJcblx0XHRcdFx0cGFyc2VDYWxsYmFjayhfdW53cmFwKGV4cHIsICcoJywgJyknKSlcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IEFic3RyYWN0aW9uO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRXhwckludGVyZmFjZSBmcm9tICcuLi9FeHBySW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQXJySW50ZXJmYWNlXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBFeHBySW50ZXJmYWNlIHt9O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJmYWNlLnByb3RvdHlwZSwgJ2pzZW5UeXBlJywge1xyXG5cdGdldCgpIHsgcmV0dXJuICdBcnJheVR5cGUnOyB9LFxyXG59KTtcclxuZXhwb3J0IGRlZmF1bHQgSW50ZXJmYWNlO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX3dyYXBwZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvd3JhcHBlZC5qcyc7XHJcbmltcG9ydCBfdW53cmFwIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3Vud3JhcC5qcyc7XHJcbmltcG9ydCBBcnJJbnRlcmZhY2UgZnJvbSAnLi9BcnJJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi4vTGV4ZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBBcnJheSB1dGlsc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEFyciA9IGNsYXNzIGV4dGVuZHMgQXJySW50ZXJmYWNlIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGV4cHJzKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5leHBycyA9IGV4cHJzIHx8IFtdO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGluaGVyaXQoU3VwZXIpIHtcclxuXHRcdGlmIChTdXBlciBpbnN0YW5jZW9mIEFyckludGVyZmFjZSkge1xyXG5cdFx0XHR2YXIgbmV3RXhwcnMgPSBTdXBlci5leHBycy5maWx0ZXIoZXhwckEgPT4ge1xyXG5cdFx0XHRcdHJldHVybiB0aGlzLmV4cHJzLnJlZHVjZSgodW5pcXVlU29GYXIsIGV4cHJCKSA9PiB1bmlxdWVTb0ZhciAmJiAhZXhwckEuZXZlbihleHByQiksIHRydWUpO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0dGhpcy5leHBycyA9IG5ld0V4cHJzLmNvbmNhdCh0aGlzLmV4cHJzKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRldmFsKGNvbnRleHQgPSBudWxsLCB0cmFwID0ge30pIHtcclxuXHRcdHJldHVybiB0aGlzLmV4cHJzLm1hcChleHByID0+IGV4cHIuZXZhbChjb250ZXh0LCB0cmFwKSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0dG9TdHJpbmcoY29udGV4dCA9IG51bGwpIHtcclxuXHRcdHJldHVybiAnWycgKyB0aGlzLmV4cHJzLm1hcChleHByID0+IGV4cHIudG9TdHJpbmcoY29udGV4dCkpLmpvaW4oJywgJykgKyAnXSc7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IEFycikge1xyXG5cdFx0aWYgKF93cmFwcGVkKGV4cHIsICdbJywgJ10nKSAmJiAhTGV4ZXIubWF0Y2goZXhwci50cmltKCksIFsnICddKS5sZW5ndGgpIHtcclxuXHRcdFx0dmFyIHNwbGl0cyA9IExleGVyLnNwbGl0KF91bndyYXAoZXhwciwgJ1snLCAnXScpLCBbJywnXSlcclxuXHRcdFx0XHQubWFwKG4gPT4gbi50cmltKCkpLmZpbHRlcihuID0+IG4pLm1hcChleHByID0+IHBhcnNlQ2FsbGJhY2soZXhwcikpO1xyXG5cdFx0XHRyZXR1cm4gbmV3IFN0YXRpYyhzcGxpdHMpO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBBcnI7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBFeHBySW50ZXJmYWNlIGZyb20gJy4uL0V4cHJJbnRlcmZhY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBBcmd1bWVudHNJbnRlcmZhY2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBJbnRlcmZhY2UgPSBjbGFzcyBleHRlbmRzIEV4cHJJbnRlcmZhY2Uge307XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlcmZhY2UucHJvdG90eXBlLCAnanNlblR5cGUnLCB7XHJcblx0Z2V0KCkgeyByZXR1cm4gJ0FyZ3VtZW50cyc7IH0sXHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCBJbnRlcmZhY2U7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfd3JhcHBlZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci93cmFwcGVkLmpzJztcclxuaW1wb3J0IF91bndyYXAgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvdW53cmFwLmpzJztcclxuaW1wb3J0IEFyZ3VtZW50c0ludGVyZmFjZSBmcm9tICcuL0FyZ3VtZW50c0ludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEFyZ3VtZW50cyBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEFyZ3VtZW50cyA9IGNsYXNzIGV4dGVuZHMgQXJndW1lbnRzSW50ZXJmYWNlIHtcclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihsaXN0ID0gW10pIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLmxpc3QgPSBsaXN0O1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRldmFsKGNvbnRleHQgPSBudWxsLCB0cmFwID0ge30pIHtcclxuXHRcdHJldHVybiB0aGlzLmxpc3QubWFwKGFyZyA9PiBhcmcuZXZhbChjb250ZXh0LCB0cmFwKSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0dG9TdHJpbmcoY29udGV4dCA9IG51bGwpIHtcclxuXHRcdHJldHVybiAnKCcgKyB0aGlzLmxpc3QubWFwKGFyZyA9PiBhcmcudG9TdHJpbmcoY29udGV4dCkpLmpvaW4oJywgJykgKyAnKSc7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IEFyZ3VtZW50cykge1xyXG5cdFx0dmFyIGFyZ3M7IGV4cHIgPSBleHByLnRyaW0oKTtcclxuXHRcdGlmIChfd3JhcHBlZChleHByLCAnKCcsICcpJykgJiYgIUxleGVyLm1hdGNoKGV4cHIsIFsnICddKS5sZW5ndGgpIHtcclxuXHRcdFx0cmV0dXJuIG5ldyBTdGF0aWMoXHJcblx0XHRcdFx0TGV4ZXIuc3BsaXQoX3Vud3JhcChleHByLCAnKCcsICcpJyksIFsnLCddKS5tYXAoYXJnID0+IHBhcnNlQ2FsbGJhY2soYXJnLnRyaW0oKSkpXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBBcmd1bWVudHM7XHJcbiIsIlxyXG4vKipcclxuICogUmV0dXJucyBhIGxpc3Qgb2YgdW5pcXVlIGl0ZW1zLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXlcdCBcdFx0XHRcdGFyclxyXG4gKlx0ICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyKSB7XHJcblx0Y29uc3QgZGlzdGluY3QgPSAodmFsdWUsIGluZGV4LCBzZWxmKSA9PiB7XHJcblx0XHRyZXR1cm4gc2VsZi5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXg7XHJcblx0fTtcclxuXHRyZXR1cm4gYXJyLmZpbHRlcihkaXN0aW5jdCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBFeHBySW50ZXJmYWNlIGZyb20gJy4uL0V4cHJJbnRlcmZhY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBBc3NlcnRpb25JbnRlcmZhY2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBJbnRlcmZhY2UgPSBjbGFzcyBleHRlbmRzIEV4cHJJbnRlcmZhY2Uge307XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlcmZhY2UucHJvdG90eXBlLCAnanNlblR5cGUnLCB7XHJcblx0Z2V0KCkgeyByZXR1cm4gJ0Fzc2VydGlvbkV4cHJlc3Npb24nOyB9LFxyXG59KTtcclxuZXhwb3J0IGRlZmF1bHQgSW50ZXJmYWNlO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2ZpcnN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ZpcnN0LmpzJztcclxuaW1wb3J0IF9mbGF0dGVuIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ZsYXR0ZW4uanMnO1xyXG5pbXBvcnQgX3VuaXF1ZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci91bmlxdWUuanMnO1xyXG5pbXBvcnQgQXNzZXJ0aW9uSW50ZXJmYWNlIGZyb20gJy4vQXNzZXJ0aW9uSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IExleGVyIGZyb20gJy4uL0xleGVyLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQXNzZXJ0aW9uIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgQXNzZXJ0aW9uID0gY2xhc3MgZXh0ZW5kcyBBc3NlcnRpb25JbnRlcmZhY2Uge1xyXG5cclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGV4cHJzLCBsb2dpYykge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMuZXhwcnMgPSBleHBycztcclxuXHRcdHRoaXMubG9naWMgPSBsb2dpYztcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0IGV2YWwoY29udGV4dCA9IG51bGwsIHRyYXAgPSB7fSkge1xyXG5cdFx0aWYgKHRoaXMubG9naWMgPT09ICchJykge1xyXG5cdFx0XHRyZXR1cm4gIV9maXJzdCh0aGlzLmV4cHJzKS5ldmFsKGNvbnRleHQsIHRyYXApO1xyXG5cdFx0fVxyXG5cdFx0dmFyIG9wZXJhdG9ycyA9IF9mbGF0dGVuKEFzc2VydGlvbi5vcGVyYXRvcnMpO1xyXG5cdFx0dmFyIGxvZ2ljID0gKHRoaXMubG9naWMgfHwgJycpLnRyaW0oKS50b1VwcGVyQ2FzZSgpO1xyXG5cdFx0dmFyIGlzT3IgPSBsb2dpYyA9PT0gKEFzc2VydGlvbi5vcGVyYXRvcnMub3IgfHwgJycpLnRyaW0oKS50b1VwcGVyQ2FzZSgpO1xyXG5cdFx0dmFyIGlzTm9yID0gbG9naWMgPT09IChBc3NlcnRpb24ub3BlcmF0b3JzLm5vciB8fCAnJykudHJpbSgpLnRvVXBwZXJDYXNlKCk7XHJcblx0XHR2YXIgaXNBbmQgPSBsb2dpYyA9PT0gKEFzc2VydGlvbi5vcGVyYXRvcnMuYW5kIHx8ICcnKS50cmltKCkudG9VcHBlckNhc2UoKTtcclxuXHRcdHZhciBpc05hbmQgPSBsb2dpYyA9PT0gKEFzc2VydGlvbi5vcGVyYXRvcnMubmFuZCB8fCAnJykudHJpbSgpLnRvVXBwZXJDYXNlKCk7XHJcblx0XHR2YXIgbGFzdFJlc3VsdCA9IHRydWUsIHRydWVzID0gMDtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmV4cHJzLmxlbmd0aDsgaSArKykge1xyXG5cdFx0XHRsYXN0UmVzdWx0ID0gdGhpcy5leHByc1tpXS5ldmFsKGNvbnRleHQsIHRyYXApO1xyXG5cdFx0XHRpZiAoaXNBbmQgJiYgIWxhc3RSZXN1bHQpIHtcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKGlzTmFuZCAmJiAhbGFzdFJlc3VsdCkge1xyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChpc09yICYmIGxhc3RSZXN1bHQpIHtcclxuXHRcdFx0XHRyZXR1cm4gbGFzdFJlc3VsdDtcclxuXHRcdFx0fVxyXG5cdFx0XHR0cnVlcyArPSBsYXN0UmVzdWx0ID8gMSA6IDA7XHJcblx0XHR9XHJcblx0XHRpZiAoaXNPcikge1xyXG5cdFx0XHQvLyBXaGljaCBpcyBmYWxzZXksXHJcblx0XHRcdC8vIGJ5IHZpcnR1ZSBvZiBnZXR0aW5nIGhlcmVcclxuXHRcdFx0cmV0dXJuIGxhc3RSZXN1bHQ7XHJcblx0XHR9XHJcblx0XHRpZiAoaXNBbmQgfHwgaXNOYW5kKSB7XHJcblx0XHRcdC8vIEZvciBBTkQgYW5kIE5BTkQsIGFsbCBlbnRyaWVzIG11c3QgYmUgdHJ1ZSBieSBub3csXHJcblx0XHRcdC8vIGJ5IHZpcnR1ZSBvZiBnZXR0aW5nIGhlcmUuXHJcblx0XHRcdC8vIEZvciBBTkQsIHRoaXMgbWVhbnMgdHJ1ZTsgZm9yIE5BTkQsIGZhbHNlXHJcblx0XHRcdHJldHVybiBpc0FuZDtcclxuXHRcdH1cclxuXHRcdC8vIEZvciBOT1IsIGFsbCBlbnRyaWVzIG5lZWQgdG8gYmUgZmFsc2VcclxuXHRcdHJldHVybiBpc05vciAmJiB0cnVlcyA9PT0gMDtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHQgdG9TdHJpbmcoY29udGV4dCA9IG51bGwpIHtcclxuXHRcdGlmICh0aGlzLmxvZ2ljID09PSAnIScpIHtcclxuXHRcdFx0cmV0dXJuICchJyArIF9maXJzdCh0aGlzLmV4cHJzKS50b1N0cmluZyhjb250ZXh0KTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLmV4cHJzLm1hcChleHByID0+IGV4cHIudG9TdHJpbmcoY29udGV4dCkpLmpvaW4oJyAnICsgdGhpcy5sb2dpYyArICcgJyk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IEFzc2VydGlvbikge1xyXG5cdFx0aWYgKGV4cHIuc3RhcnRzV2l0aCgnIScpKSB7XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKFxyXG5cdFx0XHRcdFtwYXJzZUNhbGxiYWNrKGV4cHIuc3Vic3RyKDEpKV0sXHJcblx0XHRcdFx0JyEnXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0XHR2YXIgcGFyc2UgPSBMZXhlci5sZXgoZXhwciwgX2ZsYXR0ZW4oU3RhdGljLm9wZXJhdG9ycykpO1xyXG5cdFx0aWYgKHBhcnNlLnRva2Vucy5sZW5ndGggPiAxKSB7XHJcblx0XHRcdHZhciBsb2dpYyA9IF91bmlxdWUocGFyc2UubWF0Y2hlcyk7XHJcblx0XHRcdGlmIChsb2dpYy5sZW5ndGggPiAxKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdcIkFORFwiIGFuZCBcIk9SXCIgbG9naWMgY2Fubm90IGJlIGFzc2VydGVkIGluIHRoZSBzYW1lIGV4cHJlc3Npb246ICcgKyBleHByICsgJyEnKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbmV3IFN0YXRpYyhcclxuXHRcdFx0XHRwYXJzZS50b2tlbnMubWFwKGV4cHIgPT4gcGFyc2VDYWxsYmFjayhleHByLnRyaW0oKSkpLFxyXG5cdFx0XHRcdF9maXJzdChsb2dpYylcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQHByb3Agb2JqZWN0XHJcbiAqL1xyXG5Bc3NlcnRpb24ub3BlcmF0b3JzID0ge1xyXG5cdGFuZDogJyYmJyxcclxuXHRvcjogJ3x8JyxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgQXNzZXJ0aW9uO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRXhwckludGVyZmFjZSBmcm9tICcuLi9FeHBySW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQXNzaWdubWVudEludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEludGVyZmFjZSA9IGNsYXNzIGV4dGVuZHMgRXhwckludGVyZmFjZSB7fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVyZmFjZS5wcm90b3R5cGUsICdqc2VuVHlwZScsIHtcclxuXHRnZXQoKSB7IHJldHVybiAnQXNzaWdubWVudEV4cHJlc3Npb24nOyB9LFxyXG59KTtcclxuZXhwb3J0IGRlZmF1bHQgSW50ZXJmYWNlO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2xhc3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvbGFzdC5qcyc7XHJcbmltcG9ydCBfYmVmb3JlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL2JlZm9yZS5qcyc7XHJcbmltcG9ydCBfYWZ0ZXIgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvYWZ0ZXIuanMnO1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNVbmRlZmluZWQuanMnO1xyXG5pbXBvcnQgQXNzaWdubWVudEludGVyZmFjZSBmcm9tICcuL0Fzc2lnbm1lbnRJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgUmVmZXJlbmNlSW50ZXJmYWNlIGZyb20gJy4vUmVmZXJlbmNlSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IENvbnRleHRzIGZyb20gJy4uL0NvbnRleHRzLmpzJztcclxuaW1wb3J0IExleGVyIGZyb20gJy4uL0xleGVyLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQXNzaWdubWVudCBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEFzc2lnbm1lbnQgPSBjbGFzcyBleHRlbmRzIEFzc2lnbm1lbnRJbnRlcmZhY2Uge1xyXG5cclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGluaXRLZXl3b3JkLCByZWZlcmVuY2UsIHZhbCwgb3BlcmF0b3IgPSAnPScpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLmluaXRLZXl3b3JkID0gaW5pdEtleXdvcmQ7XHJcblx0XHR0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZTtcclxuXHRcdHRoaXMudmFsID0gdmFsO1xyXG5cdFx0dGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRldmFsKGNvbnRleHQgPSBudWxsLCB0cmFwID0ge30pIHtcclxuXHRcdHZhciByZWZlcmVuY2UgPSB0aGlzLnJlZmVyZW5jZS5nZXRFdmFsKGNvbnRleHQsIHRyYXApO1xyXG5cdFx0dmFyIHZhbCA9IHRoaXMudmFsLmV2YWwoY29udGV4dCwgdHJhcCk7XHJcblx0XHRpZiAoIV9pc1VuZGVmaW5lZChyZWZlcmVuY2UuY29udGV4dCkgJiYgIV9pc1VuZGVmaW5lZChyZWZlcmVuY2UubmFtZSkpIHtcclxuXHRcdFx0cmV0dXJuIENvbnRleHRzLmNyZWF0ZShyZWZlcmVuY2UuY29udGV4dCkuc2V0KHJlZmVyZW5jZS5uYW1lLCB2YWwsIHRyYXAsIHRoaXMuaW5pdEtleXdvcmQpO1xyXG5cdFx0fVxyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdcIicgKyB0aGlzICsgJ1wiIGlzIHVuZGVmaW5lZCEnKTtcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0dG9TdHJpbmcoY29udGV4dCA9IG51bGwpIHtcclxuXHRcdHJldHVybiAodGhpcy5pbml0S2V5d29yZCA/IHRoaXMuaW5pdEtleXdvcmQgKyAnICcgOiAnJylcclxuXHRcdFx0KyBbdGhpcy5yZWZlcmVuY2UudG9TdHJpbmcoY29udGV4dCksIHRoaXMub3BlcmF0b3IsIHRoaXMudmFsLnRvU3RyaW5nKGNvbnRleHQpXS5qb2luKCcgJyk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IEFzc2lnbm1lbnQpIHtcclxuXHRcdHZhciBwYXJzZSA9IExleGVyLmxleChleHByLCBTdGF0aWMub3BlcmF0b3JzKTtcclxuXHRcdGlmIChwYXJzZS50b2tlbnMubGVuZ3RoID09PSAyKSB7XHJcblx0XHRcdHZhciBpbml0S2V5d29yZCwgcmVmZXJlbmNlID0gcGFyc2UudG9rZW5zLnNoaWZ0KCkudHJpbSgpLCB2YWwgPSBwYXJzZS50b2tlbnMuc2hpZnQoKS50cmltKCk7XHJcblx0XHRcdGlmIChbJ3ZhcicsICdsZXQnLCAnY29uc3QnXS5pbmNsdWRlcyhfYmVmb3JlKHJlZmVyZW5jZSwgJyAnKSkpIHtcclxuXHRcdFx0XHRpbml0S2V5d29yZCA9IF9iZWZvcmUocmVmZXJlbmNlLCAnICcpO1xyXG5cdFx0XHRcdHJlZmVyZW5jZSA9IF9hZnRlcihyZWZlcmVuY2UsICcgJykudHJpbSgpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmICghKChyZWZlcmVuY2UgPSBwYXJzZUNhbGxiYWNrKHJlZmVyZW5jZSkpIGluc3RhbmNlb2YgUmVmZXJlbmNlSW50ZXJmYWNlKSBcclxuXHRcdFx0fHwgISh2YWwgPSBwYXJzZUNhbGxiYWNrKHZhbCkpKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGFzc2lnbm1lbnQgZXhwcmVzc2lvbjogJyArIGV4cHIpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKGluaXRLZXl3b3JkLCByZWZlcmVuY2UsIHZhbCwgcGFyc2UubWF0Y2hlc1swXS50cmltKCkpO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcdFxyXG5cclxuLyoqXHJcbiAqIEBwcm9wIGFycmF5XHJcbiAqL1xyXG5Bc3NpZ25tZW50Lm9wZXJhdG9ycyA9IFsnID0gJ107XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IEFzc2lnbm1lbnQ7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBFeHBySW50ZXJmYWNlIGZyb20gJy4uL0V4cHJJbnRlcmZhY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBCb29sSW50ZXJmYWNlXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBFeHBySW50ZXJmYWNlIHt9O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJmYWNlLnByb3RvdHlwZSwgJ2pzZW5UeXBlJywge1xyXG5cdGdldCgpIHsgcmV0dXJuICdCb29sZWFuVHlwZSc7IH0sXHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCBJbnRlcmZhY2U7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcbmltcG9ydCBCb29sSW50ZXJmYWNlIGZyb20gJy4vQm9vbEludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEJvb2wgKGJvb2xlYW4pIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgQm9vbCA9IGNsYXNzIGV4dGVuZHMgQm9vbEludGVyZmFjZSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihzdGF0ZSkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMuc3RhdGUgPSBzdGF0ZTtcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0ZXZhbCgpIHtcclxuXHRcdHJldHVybiB0aGlzLnN0YXRlLnRvTG93ZXJDYXNlKCkudHJpbSgpID09PSAndHJ1ZSc7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0dG9TdHJpbmcoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5zdGF0ZTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgcGFyc2UoZXhwciwgcGFyc2VDYWxsYmFjaywgU3RhdGljID0gQm9vbCkge1xyXG5cdFx0dmFyIGV4cHIgPSBleHByLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xyXG5cdFx0aWYgKGV4cHIgPT09ICd0cnVlJyB8fCBleHByID09PSAnZmFsc2UnKSB7XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKGV4cHIpO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgQm9vbDtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVW5kZWZpbmVkLmpzJztcclxuaW1wb3J0IFJlZmVyZW5jZUludGVyZmFjZSBmcm9tICcuL1JlZmVyZW5jZUludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBDYWxsSW50ZXJmYWNlIGZyb20gJy4vQ2FsbEludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBBcmd1bWVudHMgZnJvbSAnLi9Bcmd1bWVudHMuanMnO1xyXG5pbXBvcnQgQ29udGV4dHMgZnJvbSAnLi4vQ29udGV4dHMuanMnO1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi4vTGV4ZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBDYWxsIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgQ2FsbCA9IGNsYXNzIGV4dGVuZHMgQ2FsbEludGVyZmFjZSB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IocmVmZXJlbmNlLCBhcmdzKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5yZWZlcmVuY2UgPSByZWZlcmVuY2U7XHJcblx0XHR0aGlzLmFyZ3MgPSBhcmdzO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRldmFsKGNvbnRleHQgPSBudWxsLCB0cmFwID0ge30pIHtcclxuXHRcdHZhciByZWZlcmVuY2UgPSB0aGlzLnJlZmVyZW5jZS5nZXRFdmFsKGNvbnRleHQsIHRyYXApO1xyXG5cdFx0dmFyIGFyZ3MgPSB0aGlzLmFyZ3MuZXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHRcdGlmICghX2lzVW5kZWZpbmVkKHJlZmVyZW5jZS5jb250ZXh0KSAmJiAhX2lzVW5kZWZpbmVkKHJlZmVyZW5jZS5uYW1lKSkge1xyXG5cdFx0XHRyZXR1cm4gQ29udGV4dHMuY3JlYXRlKHJlZmVyZW5jZS5jb250ZXh0KS5leGVjKHJlZmVyZW5jZS5uYW1lLCBhcmdzLCB0cmFwKTtcclxuXHRcdH1cclxuXHRcdHRocm93IG5ldyBFcnJvcignXCInICsgdGhpcyArICdcIiBpcyB1bmRlZmluZWQhJyk7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKGNvbnRleHQgPSBudWxsKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5yZWZlcmVuY2UudG9TdHJpbmcoY29udGV4dCkgKyB0aGlzLmFyZ3MudG9TdHJpbmcoY29udGV4dCk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IENhbGwpIHtcclxuXHRcdGlmICghZXhwci5zdGFydHNXaXRoKCcoJykgJiYgZXhwci5lbmRzV2l0aCgnKScpICYmICFMZXhlci5tYXRjaChleHByLCBbJyAnXSkubGVuZ3RoKSB7XHJcblx0XHRcdHZhciB0b2tlbnMgPSBMZXhlci5zcGxpdChleHByLCBbXSk7XHJcblx0XHRcdHZhciByZWZlcmVuY2UsIGFyZ3MgPSB0b2tlbnMucG9wKCk7XHJcblx0XHRcdGlmICghKChyZWZlcmVuY2UgPSBwYXJzZUNhbGxiYWNrKHRva2Vucy5qb2luKCcnKSkpIGluc3RhbmNlb2YgUmVmZXJlbmNlSW50ZXJmYWNlKSBcclxuXHRcdFx0fHwgIShhcmdzID0gcGFyc2VDYWxsYmFjayhhcmdzLCBbQXJndW1lbnRzXSkpKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNhbGwgZGlyZWN0aXZlOiAnICsgZXhwcik7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG5ldyBTdGF0aWMocmVmZXJlbmNlLCBhcmdzKTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHRcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgQ2FsbDtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIENvbXBhcmlzb25JbnRlcmZhY2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBJbnRlcmZhY2UgPSBjbGFzcyBleHRlbmRzIEV4cHJJbnRlcmZhY2Uge307XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlcmZhY2UucHJvdG90eXBlLCAnanNlblR5cGUnLCB7XHJcblx0Z2V0KCkgeyByZXR1cm4gJ0NvbXBhcmlzb25FeHByZXNzaW9uJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9mbGF0dGVuIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ZsYXR0ZW4uanMnO1xyXG5pbXBvcnQgX2ZpcnN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ZpcnN0LmpzJztcclxuaW1wb3J0IF9sYXN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2xhc3QuanMnO1xyXG5pbXBvcnQgX2RpZmZlcmVuY2UgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZGlmZmVyZW5jZS5qcyc7XHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzU3RyaW5nIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNTdHJpbmcuanMnO1xyXG5pbXBvcnQgX2VhY2ggZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZWFjaC5qcyc7XHJcbmltcG9ydCBDb21wYXJpc29uSW50ZXJmYWNlIGZyb20gJy4vQ29tcGFyaXNvbkludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIENvbXBhcmlzb24gY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBDb21wYXJpc29uID0gY2xhc3MgZXh0ZW5kcyBDb21wYXJpc29uSW50ZXJmYWNlIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKG9wZXJhbmQxLCBvcGVyYW5kMiwgb3BlcmF0b3IpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLm9wZXJhbmQxID0gb3BlcmFuZDE7XHJcblx0XHR0aGlzLm9wZXJhbmQyID0gb3BlcmFuZDI7XHJcblx0XHR0aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGV2YWwoY29udGV4dCA9IG51bGwsIHRyYXAgPSB7fSkge1xyXG5cdFx0cmV0dXJuIENvbXBhcmlzb24uY29tcGFyZShcclxuXHRcdFx0dGhpcy5vcGVyYW5kMS5ldmFsKGNvbnRleHQsIHRyYXApLCBcclxuXHRcdFx0dGhpcy5vcGVyYW5kMi5ldmFsKGNvbnRleHQsIHRyYXApLCBcclxuXHRcdFx0dGhpcy5vcGVyYXRvclxyXG5cdFx0KTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHR0b1N0cmluZyhjb250ZXh0ID0gbnVsbCkge1xyXG5cdFx0cmV0dXJuIFtcclxuXHRcdFx0dGhpcy5vcGVyYW5kMS50b1N0cmluZyhjb250ZXh0KSwgXHJcblx0XHRcdHRoaXMub3BlcmF0b3IsIFxyXG5cdFx0XHR0aGlzLm9wZXJhbmQyLnRvU3RyaW5nKGNvbnRleHQpXHJcblx0XHRdLmpvaW4oJyAnKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgcGFyc2UoZXhwciwgcGFyc2VDYWxsYmFjaywgU3RhdGljID0gQ29tcGFyaXNvbikge1xyXG5cdFx0dmFyIG9wZXJhdG9ycyA9IF9mbGF0dGVuKFN0YXRpYy5vcGVyYXRvcnMpLm1hcChvcGVyID0+ICcgJyArIG9wZXIgKyAnICcpO1xyXG5cdFx0dmFyIHBhcnNlID0gTGV4ZXIubGV4KGV4cHIsIG9wZXJhdG9ycyk7XHJcblx0XHRpZiAocGFyc2UudG9rZW5zLmxlbmd0aCA+IDEpIHtcclxuXHRcdFx0aWYgKHBhcnNlLnRva2Vucy5sZW5ndGggPiAyKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdNYWxmb3JtZWQgXCJDb21wYXJpc29uXCIgZXhwcmVzc2lvbjogJyArIGV4cHIgKyAnIScpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKFxyXG5cdFx0XHRcdHBhcnNlQ2FsbGJhY2soX2ZpcnN0KHBhcnNlLnRva2VucykudHJpbSgpKSxcclxuXHRcdFx0XHRwYXJzZUNhbGxiYWNrKF9sYXN0KHBhcnNlLnRva2VucykudHJpbSgpKSxcclxuXHRcdFx0XHRwYXJzZS5tYXRjaGVzWzBdLnRyaW0oKVxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0ICovXHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIFVzZSB0aGUgb3BlcmF0b3IgdHlwZSB0byBjb21wYXJlIHRoZSB0d28gb3BlcmFuZHNcclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBtaXhlZFx0XHRvcGVyYW5kMVx0XHRcclxuXHQgKiBAcGFyYW0gbWl4ZWRcdFx0b3BlcmFuZDJcdFx0XHJcblx0ICogQHBhcmFtIHN0cmluZyBcdG9wZXJhdG9yXHRcdFxyXG5cdCAqXHJcblx0ICogQHJldHVybiBib29sXHJcblx0ICovXHJcblx0c3RhdGljIGNvbXBhcmUob3BlcmFuZDEsIG9wZXJhbmQyLCBvcGVyYXRvciA9ICc9PScpIHtcclxuXHRcdGlmIChfZmxhdHRlbihDb21wYXJpc29uLm9wZXJhdG9ycykuaW5kZXhPZihvcGVyYXRvcikgPT09IC0xKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignVGhlIG9wZXJhdG9yIFwiJyArIG9wZXJhdG9yICsgJ1wiIGlzIG5vdCByZWNvZ25pemVkLicpO1xyXG5cdFx0fVxyXG5cdFx0c3dpdGNoKG9wZXJhdG9yKSB7XHJcblx0XHRcdGNhc2UgJz09PSc6XHJcblx0XHRcdFx0cmV0dXJuIG9wZXJhbmQxID09PSBvcGVyYW5kMjtcclxuXHRcdFx0Y2FzZSAnPT0nOlxyXG5cdFx0XHRjYXNlICc9JzpcclxuXHRcdFx0XHRyZXR1cm4gb3BlcmFuZDEgPT0gb3BlcmFuZDI7XHJcblx0XHRcdGNhc2UgJz4nOlxyXG5cdFx0XHRcdHJldHVybiBvcGVyYW5kMSA+IG9wZXJhbmQyO1xyXG5cdFx0XHRjYXNlICc8JzpcclxuXHRcdFx0XHRyZXR1cm4gb3BlcmFuZDEgPCBvcGVyYW5kMjtcclxuXHRcdFx0Y2FzZSAnPj0nOlxyXG5cdFx0XHRcdHJldHVybiBvcGVyYW5kMSA+PSBvcGVyYW5kMjtcclxuXHRcdFx0Y2FzZSAnPD0nOlxyXG5cdFx0XHRcdHJldHVybiBvcGVyYW5kMSA8PSBvcGVyYW5kMjtcclxuXHRcdFx0Y2FzZSAnIT0nOlxyXG5cdFx0XHRcdHJldHVybiBvcGVyYW5kMSAhPSBvcGVyYW5kMjtcclxuXHRcdFx0Y2FzZSAnIT09JzpcclxuXHRcdFx0XHRyZXR1cm4gb3BlcmFuZDEgIT09IG9wZXJhbmQyO1xyXG5cdFx0XHRjYXNlICdePSc6XHJcblx0XHRcdFx0cmV0dXJuIF9pc1N0cmluZyhvcGVyYW5kMSkgJiYgb3BlcmFuZDEuc3RhcnRzV2l0aChvcGVyYW5kMik7XHJcblx0XHRcdGNhc2UgJyQ9JzpcclxuXHRcdFx0XHRyZXR1cm4gX2lzU3RyaW5nKG9wZXJhbmQxKSAmJiBvcGVyYW5kMS5lbmRzV2l0aChvcGVyYW5kMik7XHJcblx0XHRcdGNhc2UgJyo9JzpcclxuXHRcdFx0XHQvLyBDb250YWluc1xyXG5cdFx0XHRcdHJldHVybiBfaXNBcnJheShvcGVyYW5kMikgfHwgX2lzU3RyaW5nKG9wZXJhbmQyKSA/IG9wZXJhbmQxLmluZGV4T2Yob3BlcmFuZDIpID4gLTEgOiBmYWxzZTtcclxuXHRcdFx0Y2FzZSAnfj0nOlxyXG5cdFx0XHRcdC8vIENvbnRhaW5zIHdvcmRcclxuXHRcdFx0XHRyZXR1cm4gX2lzU3RyaW5nKG9wZXJhbmQxKSAmJiBfaXNTdHJpbmcob3BlcmFuZDIpICYmICgnICcgKyBvcGVyYW5kMSArICcgJykuaW5kZXhPZignICcgKyBvcGVyYW5kMiArICcgJykgPiAtMTtcclxuXHRcdFx0Y2FzZSAnPj08JzogLy8gQmV0d2VlblxyXG5cdFx0XHRcdCBpZiAoIShfaXNBcnJheShvcGVyYW5kMikgJiYgb3BlcmFuZDIubGVuZ3RoID09PSAyKSkge1xyXG5cdFx0XHRcdFx0IHRocm93IG5ldyBFcnJvcignQSBcXCdCZXR3ZWVuXFwnIGNvbXBhcmlzb24gcmVxdWlyZXMgYXJndW1lbnQgMiB0byBiZSBhbiBhcnJheSBvZiBleGFjdGx5IDIgdmFsdWVzLicpO1xyXG5cdFx0XHRcdCB9XHJcblx0XHRcdFx0IHJldHVybiBvcGVyYW5kMSA+PSBvcGVyYW5kMlswXSAmJiBvcGVyYW5kMSA8PSBvcGVyYW5kMlsxXTtcclxuXHRcclxuXHRcdFx0Y2FzZSAnLyoqLyc6IC8vIFJlZ2V4XHJcblx0XHRcdFx0cmV0dXJuIG9wZXJhbmQyLm1hdGNoKG5ldyBSZWdFeHAob3BlcmFuZDEpKTtcclxuXHRcdFx0ZGVmYXVsdDpcclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBDb21wYXJlcyB0d28gb3BlcmFuZHMgZm9yIGRpZmZlcmVuY2VzXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gbWl4ZWRcdFx0b3BlcmFuZDFcdFx0XHJcblx0ICogQHBhcmFtIG1peGVkXHRcdG9wZXJhbmQyXHRcdFxyXG5cdCAqIEBwYXJhbSBib29sXHQgXHRzdHJpY3RcdFx0XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGJvb2xcclxuXHQgKi9cclxuXHRzdGF0aWMgZGlmZihvcGVyYW5kMSwgb3BlcmFuZDIsIHN0cmljdCkge1xyXG5cdFx0cmV0dXJuICFDb21wYXJpc29uLmNvbXBhcmUob3BlcmFuZDEsIG9wZXJhbmQyLCBzdHJpY3QgPyAnPT09JyA6ICc9PScpO1xyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcHJvcCBvYmplY3RcclxuICovXHJcbkNvbXBhcmlzb24ub3BlcmF0b3JzID0ge1xyXG5cdGV4YWN0OiB7XHJcblx0XHRpczogJz09PScsXHJcblx0XHRpc051bGw6ICc9PT0nLFxyXG5cdFx0ZXF1YWxzVG86ICc9PScsXHJcblx0XHRzdHJpY3RseU5vdEVxdWFsc1RvOiAnIT09JyxcclxuXHRcdG5vdEVxdWFsc1RvOiAnIT0nLFxyXG5cdH0sXHJcblx0cmVsYXRpdmU6IHtcclxuXHRcdGxlc3NlclRoYW46ICc8JyxcclxuXHRcdGdyZWF0ZXJUaGFuOiAnPicsXHJcblx0XHRsZXNzZXJUaGFuT3JFcXVhbHNUbzogJzw9JyxcclxuXHRcdGdyZWF0ZXJUaGFuT3JFcXVhbHNUbzogJz49JyxcclxuXHRcdGJldHdlZW46ICc+PTwnLFxyXG5cdH0sXHJcblx0cGFydGlhbDoge1xyXG5cdFx0c3RhcnRzV2l0aDogJ149JyxcclxuXHRcdGVuZHNXaXRoOiAnJD0nLFxyXG5cdFx0Y29udGFpbnM6ICcqPScsXHJcblx0XHRhbnk6ICd+PScsXHJcblx0XHRpbjogJ349JyxcclxuXHRcdG1hdGNoZXM6ICcvKiovJyxcclxuXHR9LFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBDb21wYXJpc29uO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRXhwckludGVyZmFjZSBmcm9tICcuLi9FeHBySW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ29uZGl0aW9uSW50ZXJmYWNlXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBFeHBySW50ZXJmYWNlIHt9O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJmYWNlLnByb3RvdHlwZSwgJ2pzZW5UeXBlJywge1xyXG5cdGdldCgpIHsgcmV0dXJuICdUZXJuYXJ5Q29uZGl0aW9uYWwnOyB9LFxyXG59KTtcclxuZXhwb3J0IGRlZmF1bHQgSW50ZXJmYWNlO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi4vTGV4ZXIuanMnO1xyXG5pbXBvcnQgQ29uZGl0aW9uSW50ZXJmYWNlIGZyb20gJy4vQ29uZGl0aW9uSW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ29uZGl0aW9uIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgQ29uZGl0aW9uID0gY2xhc3MgZXh0ZW5kcyBDb25kaXRpb25JbnRlcmZhY2Uge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoYXNzZXJ0aW9uLCBvblRydWUsIG9uRmFsc2UpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLmFzc2VydGlvbiA9IGFzc2VydGlvbjtcclxuXHRcdHRoaXMub25UcnVlID0gb25UcnVlO1xyXG5cdFx0dGhpcy5vbkZhbHNlID0gb25GYWxzZTtcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0ZXZhbChjb250ZXh0ID0gbnVsbCwgdHJhcCA9IHt9KSB7XHJcblx0XHRyZXR1cm4gdGhpcy5hc3NlcnRpb24uZXZhbChjb250ZXh0LCB0cmFwKSBcclxuXHRcdFx0PyB0aGlzLm9uVHJ1ZS5ldmFsKGNvbnRleHQsIHRyYXApIFxyXG5cdFx0XHQ6IHRoaXMub25GYWxzZS5ldmFsKGNvbnRleHQsIHRyYXApO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKGNvbnRleHQgPSBudWxsKSB7XHJcblx0XHRyZXR1cm4gW1xyXG5cdFx0XHR0aGlzLmFzc2VydGlvbi50b1N0cmluZyhjb250ZXh0KSwgXHJcblx0XHRcdENvbmRpdGlvbi5vcGVyYXRvcnNbMF0sIFxyXG5cdFx0XHR0aGlzLm9uVHJ1ZS50b1N0cmluZyhjb250ZXh0KSxcclxuXHRcdFx0Q29uZGl0aW9uLm9wZXJhdG9yc1sxXSwgXHJcblx0XHRcdHRoaXMub25GYWxzZS50b1N0cmluZyhjb250ZXh0KVxyXG5cdFx0XS5qb2luKCcgJyk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IENvbmRpdGlvbikge1xyXG5cdFx0dmFyIHNwbGl0cyA9IExleGVyLnNwbGl0KGV4cHIsIFN0YXRpYy5vcGVyYXRvcnMpO1xyXG5cdFx0aWYgKHNwbGl0cy5sZW5ndGggPiAxKSB7XHJcblx0XHRcdGlmIChzcGxpdHMubGVuZ3RoID09PSAyKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdNYWxmb3JtZWQgdGVybmFyeSBleHByZXNzaW9uOiAnICsgZXhwciArICchJyk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG5ldyBTdGF0aWMoXHJcblx0XHRcdFx0cGFyc2VDYWxsYmFjayhzcGxpdHNbMF0udHJpbSgpKSxcclxuXHRcdFx0XHRwYXJzZUNhbGxiYWNrKHNwbGl0c1sxXS50cmltKCkpLFxyXG5cdFx0XHRcdHBhcnNlQ2FsbGJhY2soc3BsaXRzWzJdLnRyaW0oKSlcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQHByb3Agb2JqZWN0XHJcbiAqL1xyXG5Db25kaXRpb24ub3BlcmF0b3JzID0gWyc/JywgJzonXTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgQ29uZGl0aW9uO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRXhwckludGVyZmFjZSBmcm9tICcuLi9FeHBySW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogRGVsZXRpb25JbnRlcmZhY2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBJbnRlcmZhY2UgPSBjbGFzcyBleHRlbmRzIEV4cHJJbnRlcmZhY2Uge307XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlcmZhY2UucHJvdG90eXBlLCAnanNlblR5cGUnLCB7XHJcblx0Z2V0KCkgeyByZXR1cm4gJ0RlbGV0ZUV4cHJlc3Npb24nOyB9LFxyXG59KTtcclxuZXhwb3J0IGRlZmF1bHQgSW50ZXJmYWNlO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2xhc3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvbGFzdC5qcyc7XHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1VuZGVmaW5lZC5qcyc7XHJcbmltcG9ydCBSZWZlcmVuY2VJbnRlcmZhY2UgZnJvbSAnLi9SZWZlcmVuY2VJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgRGVsZXRpb25JbnRlcmZhY2UgZnJvbSAnLi9EZWxldGlvbkludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBDb250ZXh0cyBmcm9tICcuLi9Db250ZXh0cy5qcyc7XHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIERlbGV0aW9uIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgRGVsZXRpb24gPSBjbGFzcyBleHRlbmRzIERlbGV0aW9uSW50ZXJmYWNlIHtcclxuXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihyZWZlcmVuY2UsIG9wZXJhdG9yID0gJ2RlbGV0ZScpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZTtcclxuXHRcdHRoaXMub3BlcmF0b3IgPSBvcGVyYXRvcjtcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0ZXZhbChjb250ZXh0ID0gbnVsbCwgdHJhcCA9IHt9KSB7XHJcblx0XHR2YXIgcmVmZXJlbmNlID0gdGhpcy5yZWZlcmVuY2UuZ2V0RXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHRcdGlmICghX2lzVW5kZWZpbmVkKHJlZmVyZW5jZS5jb250ZXh0KSAmJiAhX2lzVW5kZWZpbmVkKHJlZmVyZW5jZS5uYW1lKSkge1xyXG5cdFx0XHRyZXR1cm4gQ29udGV4dHMuY3JlYXRlKHJlZmVyZW5jZS5jb250ZXh0KS5kZWwocmVmZXJlbmNlLm5hbWUsIHRyYXApO1xyXG5cdFx0fVxyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdcIicgKyB0aGlzICsgJ1wiIGlzIHVuZGVmaW5lZCEnKTtcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0dG9TdHJpbmcoY29udGV4dCA9IG51bGwpIHtcclxuXHRcdHJldHVybiB0aGlzLm9wZXJhdG9yICsgJyAnICsgdGhpcy5yZWZlcmVuY2UudG9TdHJpbmcoY29udGV4dCk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IERlbGV0aW9uKSB7XHJcblx0XHR2YXIgcGFyc2UgPSBMZXhlci5sZXgoZXhwciwgT2JqZWN0LnZhbHVlcyhTdGF0aWMub3BlcmF0b3JzKSk7XHJcblx0XHRpZiAocGFyc2UubWF0Y2hlcy5sZW5ndGggPT09IDEgJiYgZXhwci5zdGFydHNXaXRoKHBhcnNlLm1hdGNoZXNbMF0gKyAnICcpKSB7XHJcblx0XHRcdHZhciByZWZlcmVuY2U7XHJcblx0XHRcdGlmICghKChyZWZlcmVuY2UgPSBwYXJzZUNhbGxiYWNrKHBhcnNlLnRva2Vucy5wb3AoKS50cmltKCkpKSBpbnN0YW5jZW9mIFJlZmVyZW5jZUludGVyZmFjZSkpIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgZGVsZXRlIGRpcmVjdGl2ZTogJyArIGV4cHIpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKHJlZmVyZW5jZSwgcGFyc2UubWF0Y2hlc1swXS50cmltKCkpO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcdFxyXG5cclxuLyoqXHJcbiAqIEBwcm9wIGFycmF5XHJcbiAqL1xyXG5EZWxldGlvbi5vcGVyYXRvcnMgPSB7XHJcblx0cmVkOiAncmVkdWNlJywgXHJcblx0ZGVsOiAnZGVsZXRlJyxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgRGVsZXRpb247XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBFeHBySW50ZXJmYWNlIGZyb20gJy4uL0V4cHJJbnRlcmZhY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBTdGF0ZW1lbnRzSW50ZXJmYWNlXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBFeHBySW50ZXJmYWNlIHt9O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJmYWNlLnByb3RvdHlwZSwgJ2pzZW5UeXBlJywge1xyXG5cdGdldCgpIHsgcmV0dXJuICdTdGF0ZW1lbnRzJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi4vRXhwckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFJldHVybkludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEludGVyZmFjZSA9IGNsYXNzIGV4dGVuZHMgRXhwckludGVyZmFjZSB7fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVyZmFjZS5wcm90b3R5cGUsICdqc2VuVHlwZScsIHtcclxuXHRnZXQoKSB7IHJldHVybiAnUmV0dXJuRGlyZWN0aXZlJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9mbGF0dGVuIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ZsYXR0ZW4uanMnO1xyXG5pbXBvcnQgU3RhdGVtZW50c0ludGVyZmFjZSBmcm9tICcuL1N0YXRlbWVudHNJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgUmV0dXJuSW50ZXJmYWNlIGZyb20gJy4vUmV0dXJuSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IENvbnRleHRzIGZyb20gJy4uL0NvbnRleHRzLmpzJztcclxuaW1wb3J0IExleGVyIGZyb20gJy4uL0xleGVyLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogU3RhdGVtZW50cyBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IFN0YXRlbWVudHMgPSBjbGFzcyBleHRlbmRzIFN0YXRlbWVudHNJbnRlcmZhY2Uge1xyXG5cclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKHN0bXRzLCBkZWxpbSkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMuc3RtdHMgPSBzdG10cyB8fCBbXTtcclxuXHRcdHRoaXMuZGVsaW0gPSBkZWxpbTtcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0ZXZhbChjb250ZXh0ID0gbnVsbCwgdHJhcCA9IHt9KSB7XHJcblx0XHRjb250ZXh0ID0gQ29udGV4dHMuY3JlYXRlKGNvbnRleHQpO1xyXG5cdFx0dmFyIHN0bXRzID0gW107XHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc3RtdHMubGVuZ3RoOyBpICsrKSB7XHJcblx0XHRcdGlmICh0aGlzLnN0bXRzW2ldIGluc3RhbmNlb2YgUmV0dXJuSW50ZXJmYWNlKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRoaXMuc3RtdHNbaV0uZXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRzdG10c1tpXSA9IHRoaXMuc3RtdHNbaV0uZXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHN0bXRzO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHR0b1N0cmluZyhjb250ZXh0ID0gbnVsbCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuc3RtdHMubWFwKHN0bXQgPT4gc3RtdC50b1N0cmluZyhjb250ZXh0KSkuam9pbih0aGlzLmRlbGltKTtcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IFN0YXRlbWVudHMpIHtcclxuXHRcdHZhciBwYXJzZSA9IExleGVyLmxleChleHByLCBfZmxhdHRlbihTdGF0aWMub3BlcmF0b3JzKS5jb25jYXQoWyhhLCBiKSA9PiB7XHJcblx0XHRcdC8vIENhc2VzIG9mIGNvZGUgYmxvY2tzIHRoYXQgd29uJ3QgZW5kIGluIFwiO1wiXHJcblx0XHRcdGlmIChhLmVuZHNXaXRoKCd9JykgJiYgIWIudHJpbSgpLnN0YXJ0c1dpdGgoJ2Vsc2UnKSkge1xyXG5cdFx0XHRcdHJldHVybiAnJztcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9XSkpO1xyXG5cdFx0aWYgKHBhcnNlLm1hdGNoZXMubGVuZ3RoKSB7XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKFxyXG5cdFx0XHRcdHBhcnNlLnRva2Vucy5tYXAoc3RtdCA9PiBwYXJzZUNhbGxiYWNrKHN0bXQudHJpbSgpKSkuZmlsdGVyKGEgPT4gYSksXHJcblx0XHRcdFx0cGFyc2UubWF0Y2hlc1swXS50cmltKClcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQHByb3AgYXJyYXlcclxuICovXHJcblN0YXRlbWVudHMub3BlcmF0b3JzID0gW1xyXG5cdCc7JyxcclxuXHRcIlxcclxcblwiLFxyXG5dO1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBTdGF0ZW1lbnRzO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2NvcHkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovY29weS5qcyc7XHJcbmltcG9ydCBfZWFjaCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9lYWNoLmpzJztcclxuaW1wb3J0IF9mbGF0dGVuIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ZsYXR0ZW4uanMnO1xyXG5pbXBvcnQgX3dyYXBwZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvd3JhcHBlZC5qcyc7XHJcbmltcG9ydCBfdW53cmFwIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3Vud3JhcC5qcyc7XHJcbmltcG9ydCBGdW5jSW50ZXJmYWNlIGZyb20gJy4vRnVuY0ludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBDb250ZXh0cyBmcm9tICcuLi9Db250ZXh0cy5qcyc7XHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcbmltcG9ydCBTdGF0ZW1lbnRzIGZyb20gJy4vU3RhdGVtZW50cy5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEZ1bmMgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBGdW5jID0gY2xhc3MgZXh0ZW5kcyBGdW5jSW50ZXJmYWNlIHtcclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihwYXJhbXRlcnMsIHN0YXRlbWVudHMsIGFycm93RnVuY3Rpb25Gb3JtYXR0aW5nID0ge30pIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLnBhcmFtdGVycyA9IHBhcmFtdGVycyB8fCB7fTtcclxuXHRcdHRoaXMuc3RhdGVtZW50cyA9IHN0YXRlbWVudHM7XHJcblx0XHR0aGlzLmFycm93RnVuY3Rpb25Gb3JtYXR0aW5nID0gYXJyb3dGdW5jdGlvbkZvcm1hdHRpbmc7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0aW5oZXJpdChTdXBlcikge1xyXG5cdFx0aWYgKFN1cGVyIGluc3RhbmNlb2YgRnVuY0ludGVyZmFjZSkge1xyXG5cdFx0XHR2YXIgcGFyZW50UGFyYW1zID0gT2JqZWN0LmtleXMoU3VwZXIucGFyYW10ZXJzKTtcclxuXHRcdFx0dmFyIG93blBhcmFtcyA9IE9iamVjdC5rZXlzKHRoaXMucGFyYW10ZXJzKTtcclxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBNYXRoLm1heChvd25QYXJhbXMubGVuZ3RoLCBwYXJlbnRQYXJhbXMubGVuZ3RoKTsgaSArKykge1xyXG5cdFx0XHRcdHZhciBuYW1lSW5QYXJlbnQgPSBwYXJlbnRQYXJhbXNbaV07XHJcblx0XHRcdFx0dmFyIG5hbWVJblNlbGYgPSBvd25QYXJhbXNbaV07XHJcblx0XHRcdFx0aWYgKCFuYW1lSW5TZWxmICYmIG5hbWVJblBhcmVudCkge1xyXG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdQYXJhbWV0ZXIgIycgKyBpICsgJyAoJyArIG5hbWVJblBhcmVudCArICcpIGluIHBhcmVudCBmdW5jdGlvbiBtdXN0IGJlIGltcGxlbWVudGVkLicpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAobmFtZUluU2VsZiAmJiBuYW1lSW5QYXJlbnQpIHtcclxuXHRcdFx0XHRcdHZhciBkZWZhdWx0VmFsSW5QYXJlbnQgPSBTdXBlci5wYXJhbXRlcnNbbmFtZUluUGFyZW50XTtcclxuXHRcdFx0XHRcdHZhciBkZWZhdWx0VmFsSW5TZWxmID0gdGhpcy5wYXJhbXRlcnNbbmFtZUluU2VsZl07XHJcblx0XHRcdFx0XHRpZiAoZGVmYXVsdFZhbEluU2VsZiAmJiAhZGVmYXVsdFZhbEluUGFyZW50KSB7XHJcblx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignUGFyYW1ldGVyICMnICsgaSArICcgKCcgKyBuYW1lSW5TZWxmICsgJykgbXVzdCBub3QgaGF2ZSBhIGRlZmF1bHQgdmFsdWUgYXMgZXN0YWJsaXNoZWQgaW4gcGFyZW50IGZ1bmN0aW9uLicpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0aWYgKGRlZmF1bHRWYWxJblNlbGYgJiYgZGVmYXVsdFZhbEluUGFyZW50ICYmIGRlZmF1bHRWYWxJblNlbGYuanNlblR5cGUgIT09IGRlZmF1bHRWYWxJblBhcmVudC5qc2VuVHlwZSkge1xyXG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0RlZmF1bHQgdmFsdWUgZm9yIHBhcmFtZXRlciAjJyArIGkgKyAnICgnICsgbmFtZUluU2VsZiArICcpIG11c3QgYmUgb2YgdHlwZSAnICsgZGVmYXVsdFZhbEluUGFyZW50LmpzZW5UeXBlICsgJyBhcyBlc3RhYmxpc2hlZCBpbiBwYXJlbnQgZnVuY3Rpb24uJyk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMuc3VwID0gU3VwZXI7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0ZXZhbChjb250ZXh0ID0gbnVsbCwgdHJhcCA9IHt9KSB7XHJcblx0XHRyZXR1cm4gKC4uLmFyZ3MpID0+IHtcclxuXHRcdFx0dmFyIG5ld01haW5Db250ZXh0ID0ge307XHJcblx0XHRcdF9lYWNoKE9iamVjdC5rZXlzKHRoaXMucGFyYW10ZXJzKSwgKGksIG5hbWUpID0+IHtcclxuXHRcdFx0XHR2YXIgZGVmYXVsdFZhbCA9IHRoaXMucGFyYW10ZXJzW25hbWVdO1xyXG5cdFx0XHRcdGlmIChhcmdzLmxlbmd0aCAtIDEgPCBpICYmICFkZWZhdWx0VmFsKSB7XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RoZSBwYXJhbWV0ZXIgXCInICsgbmFtZSArICdcIiBpcyByZXF1aXJlZC4nKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0bmV3TWFpbkNvbnRleHRbbmFtZV0gPSBhcmdzLmxlbmd0aCA+IGkgXHJcblx0XHRcdFx0XHQ/IGFyZ3NbaV0gXHJcblx0XHRcdFx0XHQ6ICh0aGlzLnBhcmFtdGVyc1tuYW1lXSBcclxuXHRcdFx0XHRcdFx0PyB0aGlzLnBhcmFtdGVyc1tuYW1lXS5ldmFsKGNvbnRleHQsIHRyYXApIFxyXG5cdFx0XHRcdFx0XHQ6IG51bGwpO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0Ly8gQnV0IHRoaXMgbmV3ZXIgY29udGV4dCBzaG91bGQgY29tZSBmaXJzdFxyXG5cdFx0XHR2YXIgbmVzdGVkQ29udGV4dCA9IG5ldyBDb250ZXh0cyhuZXdNYWluQ29udGV4dCwgY29udGV4dCk7XHJcblx0XHRcdHJldHVybiB0aGlzLnN0YXRlbWVudHMuZXZhbChuZXN0ZWRDb250ZXh0LCB0cmFwKTtcclxuXHRcdH07XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0dG9TdHJpbmcoY29udGV4dCA9IG51bGwpIHtcclxuXHRcdHZhciBwYXJhbXRlcnMgPSBbXTtcclxuXHRcdF9lYWNoKHRoaXMucGFyYW10ZXJzLCAobmFtZSwgdmFsdWUpID0+IHtcclxuXHRcdFx0cGFyYW10ZXJzLnB1c2gobmFtZSArICh2YWx1ZSA/ICc9JyArIHZhbHVlLnRvU3RyaW5nKGNvbnRleHQpIDogJycpKTtcclxuXHRcdH0pO1xyXG5cdFx0aWYgKHRoaXMuYXJyb3dGdW5jdGlvbkZvcm1hdHRpbmcpIHtcclxuXHRcdFx0dmFyIGhlYWROb1dyYXAgPSB0aGlzLmFycm93RnVuY3Rpb25Gb3JtYXR0aW5nLmhlYWQgPT09IGZhbHNlIHx8IChwYXJhbXRlcnMubGVuZ3RoID09PSAxICYmIHBhcmFtdGVyc1swXS5pbmRleE9mKCc9JykgPT09IC0xKTtcclxuXHRcdFx0dmFyIGJvZHlOb1dyYXAgPSB0aGlzLmFycm93RnVuY3Rpb25Gb3JtYXR0aW5nLmJvZHkgPT09IGZhbHNlXHJcblx0XHRcdHJldHVybiAoaGVhZE5vV3JhcCA/IHBhcmFtdGVyc1swXSA6ICcoJyArIHBhcmFtdGVycy5qb2luKCcsICcpICsgJyknKVxyXG5cdFx0XHQrICcgPT4gJyArIChib2R5Tm9XcmFwID8gdGhpcy5zdGF0ZW1lbnRzLnRvU3RyaW5nKGNvbnRleHQpIDogJ3snICsgdGhpcy5zdGF0ZW1lbnRzLnRvU3RyaW5nKGNvbnRleHQpICsgJ30nKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiAnZnVuY3Rpb24gKCcgKyBwYXJhbXRlcnMuam9pbignLCAnKSArICcpIHsnICsgdGhpcy5zdGF0ZW1lbnRzLnRvU3RyaW5nKGNvbnRleHQpICsgJ30nO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBGdW5jKSB7XHJcblx0XHRleHByID0gZXhwci50cmltKCk7XHJcblx0XHR2YXIgc3BsaXRzO1xyXG5cdFx0aWYgKGV4cHIuc3RhcnRzV2l0aCgnZnVuY3Rpb24nKSBcclxuXHRcdCYmIChzcGxpdHMgPSBMZXhlci5zcGxpdChleHByLCBbXSkuc2xpY2UoMSkuZmlsdGVyKGIgPT4gYi50cmltKCkpKSAmJiBzcGxpdHMubGVuZ3RoID09PSAyKSB7XHJcblx0XHRcdHZhciBhcnJvd0Z1bmN0aW9uRm9ybWF0dGluZyA9IGZhbHNlO1xyXG5cdFx0XHR2YXIgZnVuY0hlYWQgPSBfdW53cmFwKHNwbGl0cy5zaGlmdCgpLnRyaW0oKSwgJygnLCAnKScpO1xyXG5cdFx0XHR2YXIgZnVuY0JvZHkgPSBfdW53cmFwKHNwbGl0cy5zaGlmdCgpLnRyaW0oKSwgJ3snLCAnfScpO1xyXG5cdFx0fSBlbHNlIGlmICghZXhwci5zdGFydHNXaXRoKCdmdW5jdGlvbicpIFxyXG5cdFx0JiYgKHNwbGl0cyA9IExleGVyLnNwbGl0KGV4cHIsIFsnPT4nXSkpICYmIHNwbGl0cy5sZW5ndGggPT09IDIpIHtcclxuXHRcdFx0dmFyIGZ1bmNIZWFkID0gc3BsaXRzLnNoaWZ0KCkudHJpbSgpO1xyXG5cdFx0XHR2YXIgZnVuY0JvZHkgPSBzcGxpdHMuc2hpZnQoKS50cmltKCk7XHJcblx0XHRcdHZhciBhcnJvd0Z1bmN0aW9uRm9ybWF0dGluZyA9IHt9O1xyXG5cdFx0XHRpZiAoX3dyYXBwZWQoZnVuY0hlYWQsICcoJywgJyknKSkge1xyXG5cdFx0XHRcdGZ1bmNIZWFkID0gX3Vud3JhcChmdW5jSGVhZCwgJygnLCAnKScpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGFycm93RnVuY3Rpb25Gb3JtYXR0aW5nLmhlYWQgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoX3dyYXBwZWQoZnVuY0JvZHksICd7JywgJ30nKSkge1xyXG5cdFx0XHRcdGZ1bmNCb2R5ID0gX3Vud3JhcChmdW5jQm9keSwgJ3snLCAnfScpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGFycm93RnVuY3Rpb25Gb3JtYXR0aW5nLmJvZHkgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0dmFyIHBhcmFtdGVycyA9IHt9O1xyXG5cdFx0TGV4ZXIuc3BsaXQoZnVuY0hlYWQsIFsnLCddKS5mb3JFYWNoKHBhcmFtID0+IHtcclxuXHRcdFx0dmFyIHBhcmFtU3BsaXQgPSBwYXJhbS5zcGxpdCgnPScpO1xyXG5cdFx0XHRpZiAocGFyYW1TcGxpdFsxXSkge1xyXG5cdFx0XHRcdHBhcmFtdGVyc1twYXJhbVNwbGl0WzBdLnRyaW0oKV0gPSBwYXJzZUNhbGxiYWNrKHBhcmFtU3BsaXRbMV0udHJpbSgpKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRwYXJhbXRlcnNbcGFyYW0udHJpbSgpXSA9IG51bGw7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dmFyIHN0YXRlbWVudHMgPSBwYXJzZUNhbGxiYWNrKGZ1bmNCb2R5LCBbU3RhdGVtZW50c10sIHthc3NlcnQ6ZmFsc2V9KSB8fCBwYXJzZUNhbGxiYWNrKGZ1bmNCb2R5KTtcclxuXHRcdHJldHVybiBuZXcgU3RhdGljKHBhcmFtdGVycywgc3RhdGVtZW50cywgYXJyb3dGdW5jdGlvbkZvcm1hdHRpbmcpO1xyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcHJvcCBvYmplY3RcclxuICovXHJcbkZ1bmMub3BlcmF0b3JzID0gWyc9PicsXTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgRnVuYzsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRXhwckludGVyZmFjZSBmcm9tICcuLi9FeHBySW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogSWZJbnRlcmZhY2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBJbnRlcmZhY2UgPSBjbGFzcyBleHRlbmRzIEV4cHJJbnRlcmZhY2Uge307XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlcmZhY2UucHJvdG90eXBlLCAnanNlblR5cGUnLCB7XHJcblx0Z2V0KCkgeyByZXR1cm4gJ0lmQ29uZGl0aW9uYWwnOyB9LFxyXG59KTtcclxuZXhwb3J0IGRlZmF1bHQgSW50ZXJmYWNlO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX3dyYXBwZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvd3JhcHBlZC5qcyc7XHJcbmltcG9ydCBfdW53cmFwIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3Vud3JhcC5qcyc7XHJcbmltcG9ydCBMZXhlciBmcm9tICcuLi9MZXhlci5qcyc7XHJcbmltcG9ydCBJZkludGVyZmFjZSBmcm9tICcuL0lmSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IFN0YXRlbWVudHMgZnJvbSAnLi9TdGF0ZW1lbnRzLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ29uZGl0aW9uIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSWYgPSBjbGFzcyBleHRlbmRzIElmSW50ZXJmYWNlIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGFzc2VydGlvbiwgb25UcnVlLCBvbkZhbHNlLCBwYXJhbXMgPSB7fSkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMuYXNzZXJ0aW9uID0gYXNzZXJ0aW9uO1xyXG5cdFx0dGhpcy5vblRydWUgPSBvblRydWU7XHJcblx0XHR0aGlzLm9uRmFsc2UgPSBvbkZhbHNlO1xyXG5cdFx0dGhpcy5wYXJhbXMgPSBwYXJhbXM7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGV2YWwoY29udGV4dCA9IG51bGwsIHRyYXAgPSB7fSkge1xyXG5cdFx0cmV0dXJuIHRoaXMuYXNzZXJ0aW9uLmV2YWwoY29udGV4dCwgdHJhcCkgXHJcblx0XHRcdD8gKHRoaXMub25UcnVlID8gdGhpcy5vblRydWUuZXZhbChjb250ZXh0LCB0cmFwKSA6IHVuZGVmaW5lZClcclxuXHRcdFx0OiAodGhpcy5vbkZhbHNlID8gdGhpcy5vbkZhbHNlLmV2YWwoY29udGV4dCwgdHJhcCkgOiB1bmRlZmluZWQpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKGNvbnRleHQgPSBudWxsKSB7XHJcbiAgICAgICAgdmFyIG9uVHJ1ZSA9IHRoaXMucGFyYW1zLm9uVHJ1ZUlzQmxvY2sgXHJcbiAgICAgICAgICAgID8gJ3snICsgdGhpcy5vblRydWUudG9TdHJpbmcoY29udGV4dCkgKyAnfScgXHJcbiAgICAgICAgICAgIDogKHRoaXMub25UcnVlID8gdGhpcy5vblRydWUudG9TdHJpbmcoY29udGV4dCkgOiAnJyk7XHJcbiAgICAgICAgdmFyIG9uRmFsc2UgPSB0aGlzLnBhcmFtcy5vbkZhbHNlSXNCbG9jayBcclxuICAgICAgICAgICAgPyAneycgKyB0aGlzLm9uRmFsc2UudG9TdHJpbmcoY29udGV4dCkgKyAnfScgXHJcbiAgICAgICAgICAgIDogKHRoaXMub25GYWxzZSA/IHRoaXMub25GYWxzZS50b1N0cmluZyhjb250ZXh0KSA6ICcnKTtcclxuXHRcdHJldHVybiAnaWYgKCcgKyB0aGlzLmFzc2VydGlvbi50b1N0cmluZyhjb250ZXh0KSArICcpJyArIG9uVHJ1ZSArIChvbkZhbHNlID8gJyBlbHNlICcgKyBvbkZhbHNlIDogJycpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBJZikge1xyXG4gICAgICAgIGV4cHIgPSBleHByLnRyaW0oKTtcclxuICAgICAgICB2YXIgc3BsaXRzO1xyXG4gICAgICAgIGlmIChleHByLnN0YXJ0c1dpdGgoJ2lmJykgXHJcblx0XHQmJiAoc3BsaXRzID0gTGV4ZXIuc3BsaXQoZXhwciwgW10sIHtsaW1pdDoyfS8qSU1QT1JUQU5UKi8pLnNsaWNlKDEpLmZpbHRlcihiID0+IGIudHJpbSgpKSkgJiYgc3BsaXRzLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgICB2YXIgYXNzZXJ0aW9uID0gcGFyc2VDYWxsYmFjayhfdW53cmFwKHNwbGl0cy5zaGlmdCgpLnRyaW0oKSwgJygnLCAnKScpLnRyaW0oKSk7XHJcbiAgICAgICAgICAgIHZhciByZXN0ID0gTGV4ZXIuc3BsaXQoc3BsaXRzLnNoaWZ0KCkudHJpbSgpLCBbJ2Vsc2UnXSwge2xpbWl0OjF9LypJTVBPUlRBTlQqLyk7XHJcbiAgICAgICAgICAgIHZhciBvblRydWUgPSByZXN0LnNoaWZ0KCkudHJpbSgpLCBvblRydWVJc0Jsb2NrLCBvbkZhbHNlID0gKHJlc3Quc2hpZnQoKSB8fCAnJykudHJpbSgpLCBvbkZhbHNlSXNCbG9jaztcclxuICAgICAgICAgICAgaWYgKF93cmFwcGVkKG9uVHJ1ZSwgJ3snLCAnfScpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGUgYnJhY2VzIGdpdmVzIHVzIHRoZSBvblRydWUgYmxvY2tcclxuICAgICAgICAgICAgICAgIG9uVHJ1ZUlzQmxvY2sgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgb25UcnVlID0gX3Vud3JhcChvblRydWUsICd7JywgJ30nKS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICBvblRydWUgPSBwYXJzZUNhbGxiYWNrKG9uVHJ1ZSwgW1N0YXRlbWVudHNdLCB7YXNzZXJ0OmZhbHNlfSkgfHwgcGFyc2VDYWxsYmFjayhvblRydWUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgb25UcnVlID0gcGFyc2VDYWxsYmFjayhvblRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvbkZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3dyYXBwZWQob25GYWxzZSwgJ3snLCAnfScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGJyYWNlcyBnaXZlcyB1cyB0aGUgb25UcnVlIGJsb2NrXHJcbiAgICAgICAgICAgICAgICAgICAgb25GYWxzZUlzQmxvY2sgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIG9uRmFsc2UgPSBfdW53cmFwKG9uRmFsc2UsICd7JywgJ30nKS50cmltKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgb25GYWxzZSA9IHBhcnNlQ2FsbGJhY2sob25GYWxzZSwgW1N0YXRlbWVudHNdLCB7YXNzZXJ0OmZhbHNlfSkgfHwgcGFyc2VDYWxsYmFjayhvbkZhbHNlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBvbkZhbHNlID0gcGFyc2VDYWxsYmFjayhvbkZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cdFx0XHRyZXR1cm4gbmV3IFN0YXRpYyhhc3NlcnRpb24sIG9uVHJ1ZSwgb25GYWxzZSwge29uVHJ1ZUlzQmxvY2ssIG9uRmFsc2VJc0Jsb2NrfSk7XHJcbiAgICAgICAgIH1cclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IElmO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgaW50ZXJzZWN0aW9uIG9mIHR3byBhcnJheXM7XHJcbiAqIG9wdGlvbmFsbHkgdXNpbmcgYSBjdXN0b20gbWF0Y2hpbmcgZnVuY3Rpb24uXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheSBcdGFyclxyXG4gKiBAcGFyYW0gYXJyYXlcdCBcdGFycjJcclxuICogQHBhcmFtIGZ1bmN0aW9uIFx0Y2FsbGJhY2tcclxuICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyLCBhcnIyLCBjYWxsYmFjayA9IG51bGwpIHtcclxuXHRyZXR1cm4gIV9pc0FycmF5KGFycjIpID8gW10gOiBhcnIuZmlsdGVyKHZhbDEgPT4gY2FsbGJhY2sgXHJcblx0XHQ/IGFycjIuZmlsdGVyKHZhbDIgPT4gY2FsbGJhY2sodmFsMSwgdmFsMikpLmxlbmd0aCBcclxuXHRcdDogYXJyMi5pbmRleE9mKHZhbDEpICE9PSAtMVxyXG5cdCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBFeHBySW50ZXJmYWNlIGZyb20gJy4uL0V4cHJJbnRlcmZhY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBNYXRoSW50ZXJmYWNlXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBFeHBySW50ZXJmYWNlIHt9O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJmYWNlLnByb3RvdHlwZSwgJ2pzZW5UeXBlJywge1xyXG5cdGdldCgpIHsgcmV0dXJuICdNYXRoRXhwcmVzc2lvbic7IH0sXHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCBJbnRlcmZhY2U7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNOdW1lcmljIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNOdW1lcmljLmpzJztcclxuaW1wb3J0IF9mbGF0dGVuIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ZsYXR0ZW4uanMnO1xyXG5pbXBvcnQgX2ludGVyc2VjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9pbnRlcnNlY3QuanMnO1xyXG5pbXBvcnQgX3VuaXF1ZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci91bmlxdWUuanMnO1xyXG5pbXBvcnQgTWF0aEludGVyZmFjZSBmcm9tICcuL01hdGhJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi4vTGV4ZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBNYXRoIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgTWF0aCA9IGNsYXNzIGV4dGVuZHMgTWF0aEludGVyZmFjZSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcih2YWwsIGV4cHJzKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy52YWwgPSB2YWw7XHJcblx0XHR0aGlzLmV4cHJzID0gZXhwcnM7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0ZXZhbChjb250ZXh0ID0gbnVsbCwgdHJhcCA9IHt9KSB7XHJcblx0XHRyZXR1cm4gdGhpcy5leHBycy5yZWR1Y2UoKGN1cnJlbnRUb3RhbCwgZXhwcikgPT4ge1xyXG5cdFx0XHR2YXIgdmFsID0gZXhwci52YWwuZXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHRcdFx0dmFyIG9wZXJhdG9yID0gZXhwci5vcGVyYXRvci50cmltKCk7XHJcblx0XHRcdGlmICgoIV9pc051bWVyaWMoY3VycmVudFRvdGFsKSB8fCAhX2lzTnVtZXJpYyh2YWwpKSAmJiBvcGVyYXRvciAhPT0gJysnKSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIE1hdGggZXhwcmVzc2lvbjogJyArIHRoaXMudG9TdHJpbmcoKSArICchJyk7XHJcblx0XHRcdH1cclxuXHRcdFx0c3dpdGNoKG9wZXJhdG9yKSB7XHJcblx0XHRcdFx0Y2FzZSAnKyc6XHJcblx0XHRcdFx0XHRyZXR1cm4gY3VycmVudFRvdGFsICsgdmFsO1xyXG5cdFx0XHRcdGNhc2UgJy0nOlxyXG5cdFx0XHRcdFx0cmV0dXJuIGN1cnJlbnRUb3RhbCAtIHZhbDtcclxuXHRcdFx0XHRjYXNlICcqJzpcclxuXHRcdFx0XHRcdHJldHVybiBjdXJyZW50VG90YWwgKiB2YWw7XHJcblx0XHRcdFx0Y2FzZSAnLyc6XHJcblx0XHRcdFx0XHRyZXR1cm4gY3VycmVudFRvdGFsIC8gdmFsO1xyXG5cdFx0XHR9XHJcblx0XHR9LCB0aGlzLnZhbC5ldmFsKGNvbnRleHQsIHRyYXApKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHR0b1N0cmluZyhjb250ZXh0ID0gbnVsbCkge1xyXG5cdFx0cmV0dXJuIFt0aGlzLnZhbC50b1N0cmluZyhjb250ZXh0KV0uY29uY2F0KFxyXG5cdFx0XHR0aGlzLmV4cHJzLm1hcChleHByID0+IGV4cHIub3BlcmF0b3IgKyAnICcgKyBleHByLnZhbC50b1N0cmluZyhjb250ZXh0KSlcclxuXHRcdCkuam9pbignICcpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBNYXRoKSB7XHJcblx0XHR2YXIgcGFyc2UgPSBMZXhlci5sZXgoZXhwciwgX2ZsYXR0ZW4oU3RhdGljLm9wZXJhdG9ycykpO1xyXG5cdFx0aWYgKHBhcnNlLnRva2Vucy5sZW5ndGggPiAxICYmIHBhcnNlLm1hdGNoZXMubGVuZ3RoID09PSBwYXJzZS50b2tlbnMubGVuZ3RoIC0gMSkge1xyXG5cdFx0XHR2YXIgb3BlcmF0b3JzID0gX3VuaXF1ZShwYXJzZS5tYXRjaGVzKTtcclxuXHRcdFx0aWYgKF9pbnRlcnNlY3Qob3BlcmF0b3JzLCBNYXRoLm9wZXJhdG9ycy5zdXApLmxlbmd0aCAmJiBfaW50ZXJzZWN0KG9wZXJhdG9ycywgTWF0aC5vcGVyYXRvcnMuc3ViKS5sZW5ndGgpIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1wiQWRkaXRpb24vc3VidHJhY3Rpb25cIiBhbmQgXCJtdWx0aXBsaWNhdGlvbi9kaXZpc2lvblwiIG9wZXJhdG9ycyBjYW5ub3QgYmUgdXNlZCBpbiB0aGUgc2FtZSBleHByZXNzaW9uOiAnICsgZXhwciArICchJyk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG5ldyBTdGF0aWMoXHJcblx0XHRcdFx0cGFyc2VDYWxsYmFjayhwYXJzZS50b2tlbnMuc2hpZnQoKS50cmltKCkpLFxyXG5cdFx0XHRcdHBhcnNlLnRva2Vucy5tYXAoKGV4cHIsIGkpID0+IHtyZXR1cm4ge1xyXG5cdFx0XHRcdFx0b3BlcmF0b3I6IHBhcnNlLm1hdGNoZXNbaV0sXHJcblx0XHRcdFx0XHR2YWw6IHBhcnNlQ2FsbGJhY2soZXhwci50cmltKCkpXHJcblx0XHRcdFx0fTt9KVxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcHJvcCBvYmplY3RcclxuICovXHJcbk1hdGgub3BlcmF0b3JzID0ge1xyXG5cdHN1cDogWycqJywgJy8nXSxcclxuXHRzdWI6IFsnICsgJywgJyAtICddLFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBNYXRoO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRXhwckludGVyZmFjZSBmcm9tICcuLi9FeHBySW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogTnVtSW50ZXJmYWNlXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBFeHBySW50ZXJmYWNlIHt9O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJmYWNlLnByb3RvdHlwZSwgJ2pzZW5UeXBlJywge1xyXG5cdGdldCgpIHsgcmV0dXJuICdOdW1iZXJUeXBlJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc051bWVyaWMgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bWVyaWMuanMnO1xyXG5pbXBvcnQgTnVtSW50ZXJmYWNlIGZyb20gJy4vTnVtSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IExleGVyIGZyb20gJy4uL0xleGVyLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogTnVtIChudW1iZXIpIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgTnVtID0gY2xhc3MgZXh0ZW5kcyBOdW1JbnRlcmZhY2Uge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoaW50LCBkZWMgPSAwKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5pbnQgPSBpbnQ7XHJcblx0XHR0aGlzLmRlYyA9IGRlYztcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0ZXZhbCgpIHtcclxuXHRcdHJldHVybiBwYXJzZUZsb2F0KHRoaXMuaW50ICsgKHRoaXMuZGVjID8gJy4nICsgdGhpcy5kZWMgOiBudWxsKSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0dG9TdHJpbmcoY29udGV4dCA9IG51bGwpIHtcclxuXHRcdHJldHVybiB0aGlzLmludCArICh0aGlzLmRlYyA/ICcuJyArIHRoaXMuZGVjIDogbnVsbCk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IE51bSkge1xyXG5cdFx0aWYgKF9pc051bWVyaWMoZXhwcikpIHtcclxuXHRcdFx0dmFyIGV4cHIgPSBleHByLnNwbGl0KCcuJyk7XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKFxyXG5cdFx0XHRcdHBhcnNlSW50KGV4cHIuc2hpZnQoKSksXHJcblx0XHRcdFx0cGFyc2VJbnQoZXhwci5zaGlmdCgpKVxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgTnVtO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRXhwckludGVyZmFjZSBmcm9tICcuLi9FeHBySW50ZXJmYWNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogT2JqSW50ZXJmYWNlXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuY29uc3QgSW50ZXJmYWNlID0gY2xhc3MgZXh0ZW5kcyBFeHBySW50ZXJmYWNlIHt9O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW50ZXJmYWNlLnByb3RvdHlwZSwgJ2pzZW5UeXBlJywge1xyXG5cdGdldCgpIHsgcmV0dXJuICdPYmplY3RUeXBlJzsgfSxcclxufSk7XHJcbmV4cG9ydCBkZWZhdWx0IEludGVyZmFjZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF93cmFwcGVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3dyYXBwZWQuanMnO1xyXG5pbXBvcnQgX3Vud3JhcCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci91bndyYXAuanMnO1xyXG5pbXBvcnQgX2ZpcnN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ZpcnN0LmpzJztcclxuaW1wb3J0IF9sYXN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2xhc3QuanMnO1xyXG5pbXBvcnQgX2VhY2ggZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZWFjaC5qcyc7XHJcbmltcG9ydCBPYmpJbnRlcmZhY2UgZnJvbSAnLi9PYmpJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi4vTGV4ZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBPYmplY3QgdXRpbHNcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBPYmogPSBjbGFzcyBleHRlbmRzIE9iakludGVyZmFjZSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihlbnRyaWVzKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5lbnRyaWVzID0gZW50cmllcyB8fCB7fTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRpbmhlcml0KFN1cGVyKSB7XHJcblx0XHRpZiAoU3VwZXIgaW5zdGFuY2VvZiBPYmpJbnRlcmZhY2UpIHtcclxuXHRcdFx0X2VhY2goU3VwZXIuZW50cmllcywgKG5hbWUsIHZhbCkgPT4ge1xyXG5cdFx0XHRcdGlmICghKG5hbWUgaW4gdGhpcy5lbnRyaWVzKSkge1xyXG5cdFx0XHRcdFx0dGhpcy5lbnRyaWVzW25hbWVdID0gdmFsO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0ZXZhbChjb250ZXh0ID0gbnVsbCwgdHJhcCA9IHt9KSB7XHJcblx0XHR2YXIgaXRlbXMgPSB7fTtcclxuXHRcdF9lYWNoKHRoaXMuZW50cmllcywgKGtleSwgZXhwcikgPT4ge1xyXG5cdFx0XHRpdGVtc1trZXldID0gZXhwci5ldmFsKGNvbnRleHQsIHRyYXApO1xyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gaXRlbXM7XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKGNvbnRleHQgPSBudWxsKSB7XHJcblx0XHR2YXIgc3RyID0gW107XHJcblx0XHRfZWFjaCh0aGlzLmVudHJpZXMsIChrZXksIGV4cHIpID0+IHtcclxuXHRcdFx0c3RyLnB1c2goa2V5ICsgT2JqLm9wZXJhdG9ycy5zdWIgKyBleHByLnRvU3RyaW5nKGNvbnRleHQpKTtcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuICd7JyArIHN0ci5qb2luKE9iai5vcGVyYXRvcnMuc3VwKSArICd9JztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgcGFyc2UoZXhwciwgcGFyc2VDYWxsYmFjaywgU3RhdGljID0gT2JqKSB7XHJcblx0XHRpZiAoX3dyYXBwZWQoZXhwciwgJ3snLCAnfScpICYmICFMZXhlci5tYXRjaChleHByLnRyaW0oKSwgWycgJ10pLmxlbmd0aCkge1xyXG5cdFx0XHR2YXIgZW50cmllcyA9IHt9O1xyXG5cdFx0XHR2YXIgX2VudHJpZXNTcGxpdCA9IExleGVyLnNwbGl0KF91bndyYXAoZXhwciwgJ3snLCAnfScpLCBbT2JqLm9wZXJhdG9ycy5zdXBdKVxyXG5cdFx0XHRcdC5tYXAobiA9PiBuLnRyaW0oKSkuZmlsdGVyKG4gPT4gbik7XHJcblx0XHRcdF9lYWNoKF9lbnRyaWVzU3BsaXQsIChrZXksIGV4cHIpID0+IHtcclxuXHRcdFx0XHR2YXIgZW50cnkgPSBMZXhlci5zcGxpdChleHByLCBbT2JqLm9wZXJhdG9ycy5zdWJdLCB7bGltaXQ6MX0vKklNUE9SVEFOVCovKTtcclxuXHRcdFx0XHRlbnRyaWVzW19maXJzdChlbnRyeSkudHJpbSgpXSA9IHBhcnNlQ2FsbGJhY2soX2xhc3QoZW50cnkpLnRyaW0oKSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRyZXR1cm4gbmV3IFN0YXRpYyhlbnRyaWVzKTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQHByb3Agb2JqZWN0XHJcbiAqL1xyXG5PYmoub3BlcmF0b3JzID0ge1xyXG5cdHN1cDogJywnLFxyXG5cdHN1YjogJzonLFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBPYmo7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBFeHBySW50ZXJmYWNlIGZyb20gJy4uL0V4cHJJbnRlcmZhY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBQcmVzZW5jZUludGVyZmFjZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IEludGVyZmFjZSA9IGNsYXNzIGV4dGVuZHMgRXhwckludGVyZmFjZSB7fTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEludGVyZmFjZS5wcm90b3R5cGUsICdqc2VuVHlwZScsIHtcclxuXHRnZXQoKSB7IHJldHVybiAnUHJlc2VuY2VPcGVyYXRvcic7IH0sXHJcbn0pO1xyXG5leHBvcnQgZGVmYXVsdCBJbnRlcmZhY2U7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfbGFzdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9sYXN0LmpzJztcclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVW5kZWZpbmVkLmpzJztcclxuaW1wb3J0IFByZXNlbmNlSW50ZXJmYWNlIGZyb20gJy4vUHJlc2VuY2VJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgUmVmZXJlbmNlSW50ZXJmYWNlIGZyb20gJy4vUmVmZXJlbmNlSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IENvbnRleHRzIGZyb20gJy4uL0NvbnRleHRzLmpzJztcclxuaW1wb3J0IExleGVyIGZyb20gJy4uL0xleGVyLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogUHJlc2VuY2UgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBQcmVzZW5jZSA9IGNsYXNzIGV4dGVuZHMgUHJlc2VuY2VJbnRlcmZhY2Uge1xyXG5cclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKHByb3AsIHJlZmVyZW5jZSwgb3BlcmF0b3IgPSAnaW4nKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5wcm9wID0gcHJvcDtcclxuXHRcdHRoaXMucmVmZXJlbmNlID0gcmVmZXJlbmNlO1xyXG5cdFx0dGhpcy5vcGVyYXRvciA9IG9wZXJhdG9yO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRldmFsKGNvbnRleHQgPSBudWxsLCB0cmFwID0ge30pIHtcclxuXHRcdHZhciByZWZlcmVuY2UgPSB0aGlzLnJlZmVyZW5jZS5nZXRFdmFsKGNvbnRleHQsIHRyYXApO1xyXG5cdFx0dmFyIHByb3AgPSB0aGlzLnByb3AuZXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHRcdGlmICghX2lzVW5kZWZpbmVkKHJlZmVyZW5jZS5jb250ZXh0KSAmJiAhX2lzVW5kZWZpbmVkKHJlZmVyZW5jZS5uYW1lKSkge1xyXG5cdFx0XHRyZXR1cm4gQ29udGV4dHMuY3JlYXRlKHJlZmVyZW5jZS5jb250ZXh0KS5oYXMocmVmZXJlbmNlLm5hbWUsIHByb3AsIHRyYXApO1xyXG5cdFx0fVxyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdcIicgKyB0aGlzICsgJ1wiIGlzIHVuZGVmaW5lZCEnKTtcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0dG9TdHJpbmcoY29udGV4dCA9IG51bGwpIHtcclxuXHRcdHJldHVybiBbdGhpcy5wcm9wLnRvU3RyaW5nKGNvbnRleHQpLCB0aGlzLm9wZXJhdG9yLCB0aGlzLnJlZmVyZW5jZS50b1N0cmluZyhjb250ZXh0KV0uam9pbignICcpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZShleHByLCBwYXJzZUNhbGxiYWNrLCBTdGF0aWMgPSBQcmVzZW5jZSkge1xyXG5cdFx0dmFyIHBhcnNlID0gTGV4ZXIubGV4KGV4cHIsIFN0YXRpYy5vcGVyYXRvcnMpO1xyXG5cdFx0aWYgKHBhcnNlLnRva2Vucy5sZW5ndGggPT09IDIpIHtcclxuXHRcdFx0dmFyIHByb3AsIHJlZmVyZW5jZTtcclxuXHRcdFx0aWYgKCEocHJvcCA9IHBhcnNlQ2FsbGJhY2socGFyc2UudG9rZW5zLnNoaWZ0KCkudHJpbSgpKSlcclxuXHRcdFx0fHwgISgocmVmZXJlbmNlID0gcGFyc2VDYWxsYmFjayhwYXJzZS50b2tlbnMuc2hpZnQoKS50cmltKCkpKSBpbnN0YW5jZW9mIFJlZmVyZW5jZUludGVyZmFjZSkpIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcHJlc2VuY2UgY2hlY2sgZXhwcmVzc2lvbjogJyArIGV4cHIpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBuZXcgU3RhdGljKHByb3AsIHJlZmVyZW5jZSwgcGFyc2UubWF0Y2hlc1swXS50cmltKCkpO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcdFxyXG5cclxuLyoqXHJcbiAqIEBwcm9wIGFycmF5XHJcbiAqL1xyXG5QcmVzZW5jZS5vcGVyYXRvcnMgPSBbJyBpbiAnXTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgUHJlc2VuY2U7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1VuZGVmaW5lZC5qcyc7XHJcbmltcG9ydCBfd3JhcHBlZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci93cmFwcGVkLmpzJztcclxuaW1wb3J0IF91bndyYXAgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvdW53cmFwLmpzJztcclxuaW1wb3J0IFJlZmVyZW5jZUludGVyZmFjZSBmcm9tICcuL1JlZmVyZW5jZUludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBFeHBySW50ZXJmYWNlIGZyb20gJy4uL0V4cHJJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgQ29udGV4dHMgZnJvbSAnLi4vQ29udGV4dHMuanMnO1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi4vTGV4ZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBSZWZlcmVuY2UgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBSZWZlcmVuY2UgPSBjbGFzcyBleHRlbmRzIFJlZmVyZW5jZUludGVyZmFjZSB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoY29udGV4dCwgbmFtZSwgYmFja3RpY2tzID0gZmFsc2UpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG5cdFx0dGhpcy5uYW1lID0gbmFtZTtcclxuXHRcdHRoaXMuYmFja3RpY2tzID0gYmFja3RpY2tzO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRnZXRFdmFsKGNvbnRleHQgPSBudWxsLCB0cmFwID0ge30pIHtcclxuXHRcdHZhciBzb3VyY2VDb250ZXh0ID0gY29udGV4dCwgbmFtZSA9IHRoaXMubmFtZTtcclxuXHRcdGlmICh0aGlzLmNvbnRleHQpIHtcclxuXHRcdFx0aWYgKG5hbWUgaW5zdGFuY2VvZiBFeHBySW50ZXJmYWNlKSB7XHJcblx0XHRcdFx0bmFtZSA9IG5hbWUuZXZhbChjb250ZXh0LCB0cmFwKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRzb3VyY2VDb250ZXh0ID0gdGhpcy5jb250ZXh0LmV2YWwoY29udGV4dCwgdHJhcCk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4ge2NvbnRleHQ6c291cmNlQ29udGV4dCwgbmFtZTpuYW1lLH07XHJcblx0fVxyXG5cdCBcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGV2YWwoY29udGV4dCA9IG51bGwsIHRyYXAgPSB7fSkge1xyXG5cdFx0dmFyIHBhcnRzID0gdGhpcy5nZXRFdmFsKGNvbnRleHQsIHRyYXApO1xyXG5cdFx0aWYgKCFfaXNVbmRlZmluZWQocGFydHMuY29udGV4dCkgJiYgIV9pc1VuZGVmaW5lZChwYXJ0cy5uYW1lKSkge1xyXG5cdFx0XHRyZXR1cm4gQ29udGV4dHMuY3JlYXRlKHBhcnRzLmNvbnRleHQpLmdldChwYXJ0cy5uYW1lLCB0cmFwKTtcclxuXHRcdH1cclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0dG9TdHJpbmcoY29udGV4dCA9IG51bGwpIHtcclxuXHRcdHZhciBuYW1lID0gdGhpcy5uYW1lO1xyXG5cdFx0aWYgKHRoaXMuY29udGV4dCkge1xyXG5cdFx0XHR2YXIgc3ViamVjdENvbnRleHQgPSB0aGlzLmNvbnRleHQudG9TdHJpbmcoY29udGV4dCk7XHJcblx0XHRcdGlmIChuYW1lIGluc3RhbmNlb2YgRXhwckludGVyZmFjZSkge1xyXG5cdFx0XHRcdG5hbWUgPSAnWycgKyBuYW1lLnRvU3RyaW5nKGNvbnRleHQpICsgJ10nO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMuYmFja3RpY2tzKSB7XHJcblx0XHRcdFx0bmFtZSA9ICdgJyArIG5hbWUgKyAnYCc7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHZhciBzdWJqZWN0Q29udGV4dCA9IGNvbnRleHQ7XHJcblx0XHRcdGlmICh0aGlzLmJhY2t0aWNrcykge1xyXG5cdFx0XHRcdG5hbWUgPSAnYCcgKyBuYW1lICsgJ2AnO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gKHN1YmplY3RDb250ZXh0IHx8ICcnKSArIChzdWJqZWN0Q29udGV4dCAmJiAhbmFtZS5zdGFydHNXaXRoKCdbJykgPyBSZWZlcmVuY2Uuc2VwYXJhdG9yIDogJycpICsgbmFtZTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgcGFyc2UoZXhwciwgcGFyc2VDYWxsYmFjaywgU3RhdGljID0gUmVmZXJlbmNlKSB7XHJcblx0XHRpZiAoIUxleGVyLm1hdGNoKGV4cHIudHJpbSgpLCBbJyAnXSkubGVuZ3RoKSB7XHJcblx0XHRcdHZhciBzcGxpdHMgPSBMZXhlci5zcGxpdChleHByLCBbXSk7XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHQvLyBuYW1lLCBmaXJzdFxyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0dmFyIGNvbnRleHQsIG5hbWUgPSBzcGxpdHMucG9wKCksIGJhY2t0aWNrcztcclxuXHRcdFx0dmFyIG5hbWVTcGxpdCA9IExleGVyLnNwbGl0KG5hbWUudHJpbSgpLCBbU3RhdGljLnNlcGFyYXRvcl0sIHtwcmVzZXJ2ZURlbGltczp0cnVlfSk7XHJcblx0XHRcdGlmIChuYW1lU3BsaXQubGVuZ3RoID4gMSkge1xyXG5cdFx0XHRcdG5hbWUgPSBuYW1lU3BsaXQucG9wKCkuc3Vic3RyKDEpO1xyXG5cdFx0XHRcdHNwbGl0cyA9IHNwbGl0cy5jb25jYXQobmFtZVNwbGl0KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoX3dyYXBwZWQobmFtZSwgJ2AnLCAnYCcpKSB7XHJcblx0XHRcdFx0bmFtZSA9IF91bndyYXAobmFtZSwgJ2AnLCAnYCcpO1xyXG5cdFx0XHRcdGJhY2t0aWNrcyA9IHRydWU7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdC8vIGNvbnRleHQsIHNlY29uZFxyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0aWYgKHNwbGl0cy5sZW5ndGgpIHtcclxuXHRcdFx0XHRjb250ZXh0ID0gcGFyc2VDYWxsYmFjayhzcGxpdHMuam9pbignJykpO1xyXG5cdFx0XHRcdGNvbnRleHQuaXNDb250ZXh0ID0gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoX3dyYXBwZWQobmFtZSwgJ1snLCAnXScpKSB7XHJcblx0XHRcdFx0aWYgKCFjb250ZXh0KSB7XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcmVmZXJlbmNlOiAnICsgZXhwciArICchJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdG5hbWUgPSBwYXJzZUNhbGxiYWNrKF91bndyYXAobmFtZSwgJ1snLCAnXScpKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbmV3IFN0YXRpYyhjb250ZXh0LCBuYW1lLCBiYWNrdGlja3MpO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcHJvcCBzdHJpbmdcclxuICovXHJcblJlZmVyZW5jZS5zZXBhcmF0b3IgPSAnLic7XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IFJlZmVyZW5jZTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IExleGVyIGZyb20gJy4uL0xleGVyLmpzJztcclxuaW1wb3J0IFJldHVybkludGVyZmFjZSBmcm9tICcuL1JldHVybkludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFJldCAocmV0dXJuKSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmNvbnN0IFJldHVybiA9IGNsYXNzIGV4dGVuZHMgUmV0dXJuSW50ZXJmYWNlIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGV4cHIpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLmV4cHIgPSBleHByO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRldmFsKGNvbnRleHQgPSBudWxsLCB0cmFwID0ge30pIHtcclxuXHRcdHJldHVybiB0aGlzLmV4cHIgPyB0aGlzLmV4cHIuZXZhbChjb250ZXh0LCB0cmFwKSA6IHVuZGVmaW5lZDtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHR0b1N0cmluZyhjb250ZXh0ID0gbnVsbCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZXhwciA/ICdyZXR1cm4gJyArIHRoaXMuZXhwci50b1N0cmluZyhjb250ZXh0KSA6ICdyZXR1cm4nO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0ICovXHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IFJldHVybikge1xyXG5cdFx0dmFyIGV4cHJMYyA9IGV4cHIudG9Mb3dlckNhc2UoKTtcclxuXHRcdGlmIChleHByTGMuc3RhcnRzV2l0aCgncmV0dXJuICcpIHx8IGV4cHJMYyA9PT0gJ3JldHVybicpIHtcclxuXHRcdFx0cmV0dXJuIG5ldyBTdGF0aWMoXHJcblx0XHRcdFx0cGFyc2VDYWxsYmFjayhleHByLnN1YnN0cig2KS50cmltKCkpXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBSZXR1cm47XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBFeHBySW50ZXJmYWNlIGZyb20gJy4uL0V4cHJJbnRlcmZhY2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBTdHJJbnRlcmZhY2VcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcblxyXG5jb25zdCBJbnRlcmZhY2UgPSBjbGFzcyBleHRlbmRzIEV4cHJJbnRlcmZhY2Uge307XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShJbnRlcmZhY2UucHJvdG90eXBlLCAnanNlblR5cGUnLCB7XHJcblx0Z2V0KCkgeyByZXR1cm4gJ1N0cmluZ1R5cGUnOyB9LFxyXG59KTtcclxuZXhwb3J0IGRlZmF1bHQgSW50ZXJmYWNlO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX3dyYXBwZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvd3JhcHBlZC5qcyc7XHJcbmltcG9ydCBfdW53cmFwIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3Vud3JhcC5qcyc7XHJcbmltcG9ydCBTdHJJbnRlcmZhY2UgZnJvbSAnLi9TdHJJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgTGV4ZXIgZnJvbSAnLi4vTGV4ZXIuanMnO1xyXG5pbXBvcnQgQm9vbCBmcm9tICcuL0Jvb2wuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBTdHJpbmcgdXRpbHNcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5cclxuY29uc3QgU3RyID0gY2xhc3MgZXh0ZW5kcyBTdHJJbnRlcmZhY2Uge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoZXhwciwgcXVvdGUpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLmV4cHIgPSBleHByO1xyXG5cdFx0dGhpcy5xdW90ZSA9IHF1b3RlO1xyXG5cdH1cclxuXHQgXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRldmFsKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZXhwcjtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHR0b1N0cmluZygpIHtcclxuXHRcdHJldHVybiB0aGlzLnF1b3RlICsgdGhpcy5leHByICsgdGhpcy5xdW90ZTtcclxuXHR9XHJcblx0IFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcnNlQ2FsbGJhY2ssIFN0YXRpYyA9IFN0cikge1xyXG5cdFx0ZXhwciA9IGV4cHIudHJpbSgpO1xyXG5cdFx0aWYgKChfd3JhcHBlZChleHByLCAnXCInLCAnXCInKSB8fCBfd3JhcHBlZChleHByLCBcIidcIiwgXCInXCIpKSBcclxuXHRcdCYmICFMZXhlci5tYXRjaChleHByLCBbJyAnXSkubGVuZ3RoKSB7XHJcblx0XHRcdHZhciBxdW90ZSA9IF93cmFwcGVkKGV4cHIsICdcIicsICdcIicpID8gJ1wiJyA6IFwiJ1wiO1xyXG5cdFx0XHRyZXR1cm4gbmV3IFN0YXRpYyhcclxuXHRcdFx0XHRfdW53cmFwKGV4cHIsIHF1b3RlLCBxdW90ZSksXHJcblx0XHRcdFx0cXVvdGVcclxuXHRcdFx0KTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IFN0cjtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IEpzZW4gZnJvbSAnLi9Kc2VuLmpzJztcclxuaW1wb3J0IEV4cHJJbnRlcmZhY2UgZnJvbSAnLi9FeHBySW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IExleGVyIGZyb20gJy4vTGV4ZXIuanMnO1xyXG5pbXBvcnQgQ29udGV4dHMgZnJvbSAnLi9Db250ZXh0cy5qcyc7XHJcbmltcG9ydCBBYnN0cmFjdGlvbiBmcm9tICcuL0V4cHIvQWJzdHJhY3Rpb24uanMnO1xyXG5pbXBvcnQgQWJzdHJhY3Rpb25JbnRlcmZhY2UgZnJvbSAnLi9FeHByL0Fic3RyYWN0aW9uSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IEFyciBmcm9tICcuL0V4cHIvQXJyLmpzJztcclxuaW1wb3J0IEFyckludGVyZmFjZSBmcm9tICcuL0V4cHIvQXJySW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IEFyZ3VtZW50cyBmcm9tICcuL0V4cHIvQXJndW1lbnRzLmpzJztcclxuaW1wb3J0IEFyZ3VtZW50c0ludGVyZmFjZSBmcm9tICcuL0V4cHIvQXJndW1lbnRzSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IEFzc2VydGlvbiBmcm9tICcuL0V4cHIvQXNzZXJ0aW9uLmpzJztcclxuaW1wb3J0IEFzc2VydGlvbkludGVyZmFjZSBmcm9tICcuL0V4cHIvQXNzZXJ0aW9uSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IEFzc2lnbm1lbnQgZnJvbSAnLi9FeHByL0Fzc2lnbm1lbnQuanMnO1xyXG5pbXBvcnQgQXNzaWdubWVudEludGVyZmFjZSBmcm9tICcuL0V4cHIvQXNzaWdubWVudEludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBCb29sIGZyb20gJy4vRXhwci9Cb29sLmpzJztcclxuaW1wb3J0IEJvb2xJbnRlcmZhY2UgZnJvbSAnLi9FeHByL0Jvb2xJbnRlcmZhY2UuanMnO1xyXG5pbXBvcnQgQ2FsbCBmcm9tICcuL0V4cHIvQ2FsbC5qcyc7XHJcbmltcG9ydCBDYWxsSW50ZXJmYWNlIGZyb20gJy4vRXhwci9DYWxsSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IENvbXBhcmlzb24gZnJvbSAnLi9FeHByL0NvbXBhcmlzb24uanMnO1xyXG5pbXBvcnQgQ29tcGFyaXNvbkludGVyZmFjZSBmcm9tICcuL0V4cHIvQ29tcGFyaXNvbkludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBDb25kaXRpb24gZnJvbSAnLi9FeHByL0NvbmRpdGlvbi5qcyc7XHJcbmltcG9ydCBDb25kaXRpb25JbnRlcmZhY2UgZnJvbSAnLi9FeHByL0NvbmRpdGlvbkludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBEZWxldGlvbiBmcm9tICcuL0V4cHIvRGVsZXRpb24uanMnO1xyXG5pbXBvcnQgRGVsZXRpb25JbnRlcmZhY2UgZnJvbSAnLi9FeHByL0RlbGV0aW9uSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IEZ1bmMgZnJvbSAnLi9FeHByL0Z1bmMuanMnO1xyXG5pbXBvcnQgRnVuY0ludGVyZmFjZSBmcm9tICcuL0V4cHIvRnVuY0ludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBJZiBmcm9tICcuL0V4cHIvSWYuanMnO1xyXG5pbXBvcnQgSWZJbnRlcmZhY2UgZnJvbSAnLi9FeHByL0lmSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IE1hdGggZnJvbSAnLi9FeHByL01hdGguanMnO1xyXG5pbXBvcnQgTWF0aEludGVyZmFjZSBmcm9tICcuL0V4cHIvTWF0aEludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBOdW0gZnJvbSAnLi9FeHByL051bS5qcyc7XHJcbmltcG9ydCBOdW1JbnRlcmZhY2UgZnJvbSAnLi9FeHByL051bUludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBPYmogZnJvbSAnLi9FeHByL09iai5qcyc7XHJcbmltcG9ydCBPYmpJbnRlcmZhY2UgZnJvbSAnLi9FeHByL09iakludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBQcmVzZW5jZSBmcm9tICcuL0V4cHIvUHJlc2VuY2UuanMnO1xyXG5pbXBvcnQgUHJlc2VuY2VJbnRlcmZhY2UgZnJvbSAnLi9FeHByL1ByZXNlbmNlSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IFJlZmVyZW5jZSBmcm9tICcuL0V4cHIvUmVmZXJlbmNlLmpzJztcclxuaW1wb3J0IFJlZmVyZW5jZUludGVyZmFjZSBmcm9tICcuL0V4cHIvUmVmZXJlbmNlSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IFJldHVybiBmcm9tICcuL0V4cHIvUmV0dXJuLmpzJztcclxuaW1wb3J0IFJldHVybkludGVyZmFjZSBmcm9tICcuL0V4cHIvUmV0dXJuSW50ZXJmYWNlLmpzJztcclxuaW1wb3J0IFN0YXRlbWVudHMgZnJvbSAnLi9FeHByL1N0YXRlbWVudHMuanMnO1xyXG5pbXBvcnQgU3RhdGVtZW50c0ludGVyZmFjZSBmcm9tICcuL0V4cHIvU3RhdGVtZW50c0ludGVyZmFjZS5qcyc7XHJcbmltcG9ydCBTdHIgZnJvbSAnLi9FeHByL1N0ci5qcyc7XHJcbmltcG9ydCBTdHJJbnRlcmZhY2UgZnJvbSAnLi9FeHByL1N0ckludGVyZmFjZS5qcyc7XHJcblxyXG4vKipcclxuICogQHZhciBvYmplY3RcclxuICovXHJcbkpzZW4uZ3JhbW1hcnMgPSB7XHJcblx0SWY6IElmLFx0XHRcdFx0XHRcdC8vIGlmIChjb25kaXRpb24pIGV4cHIxIGVsc2UgZXhwcmUyXHJcblx0Ly9TdGF0ZW1lbnRzOiBTdGF0ZW1lbnRzLFx0XHQvLyBmaWVsZDEgPSAzOyBmaWVsZDIgPSB2YWwyXHJcblx0UmV0dXJuOiBSZXR1cm4sXHRcdFx0XHQvLyByZXR1cm4gZmllbGQxXHJcblx0RGVsZXRpb246IERlbGV0aW9uLFx0XHRcdC8vIGRlbGV0ZSBmaWVsZDFcclxuXHRBc3NpZ25tZW50OiBBc3NpZ25tZW50LFx0XHQvLyBmaWVsZDFba2V5MV0ua2V5MiA9IGtcclxuXHRQcmVzZW5jZTogUHJlc2VuY2UsXHRcdFx0Ly8ga2V5MSBpbiBmaWVsZDFcclxuXHRGdW5jOiBGdW5jLFx0XHRcdFx0XHQvLyAoZmllbGQxLCBmaWVsZDIpID0+IHt9XHJcblx0QWJzdHJhY3Rpb246IEFic3RyYWN0aW9uLFx0Ly8gKGZpZWxkMSlcclxuXHRDb25kaXRpb246IENvbmRpdGlvbixcdFx0Ly8gZmllbGQxID4gZmllbGQyID8gdmFsMSA6IHZhbDJcclxuXHRBc3NlcnRpb246IEFzc2VydGlvbixcdFx0Ly8gIWZpZWxkMSAmJiBmaWVsZDJcclxuXHRDb21wYXJpc29uOiBDb21wYXJpc29uLFx0XHQvLyBmaWVsZDEgPiBmaWVsZDJcclxuXHRNYXRoOiBNYXRoLFx0XHRcdFx0XHQvLyBmaWVsZDEgKyBmaWVsZDJcclxuXHRBcnI6IEFycixcdFx0XHRcdFx0Ly8gW2ZpZWxkMSwgZmllbGQyXVxyXG5cdE9iajogT2JqLFx0XHRcdFx0XHQvLyB7ZmllbGQxOnZhbDEsIGZpZWxkMjp2YWwyfVxyXG5cdE51bTogTnVtLFx0XHRcdFx0XHQvLyBbMC05XVxyXG5cdFN0cjogU3RyLFx0XHRcdFx0XHQvLyBcIlwiXHJcblx0Qm9vbDogQm9vbCxcdFx0XHRcdFx0Ly8gdHJ1ZVxyXG5cdENhbGw6IENhbGwsXHRcdFx0XHRcdC8vIGZpZWxkMSgpXHJcblx0UmVmZXJlbmNlOiBSZWZlcmVuY2UsXHRcdC8vIGZpZWxkMVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQge1xyXG5cdEV4cHJJbnRlcmZhY2UsXHJcblx0TGV4ZXIsXHJcblx0Q29udGV4dHNcclxufTtcclxuZXhwb3J0IHtcclxuXHRBYnN0cmFjdGlvbixcclxuXHRBcnIsXHJcblx0QXJndW1lbnRzLFxyXG5cdEFzc2VydGlvbixcclxuXHRBc3NpZ25tZW50LFxyXG5cdEJvb2wsXHJcblx0Q2FsbCxcclxuXHRDb21wYXJpc29uLFxyXG5cdENvbmRpdGlvbixcclxuXHREZWxldGlvbixcclxuXHRGdW5jLFxyXG5cdElmLFxyXG5cdE1hdGgsXHJcblx0TnVtLFxyXG5cdE9iaixcclxuXHRQcmVzZW5jZSxcclxuXHRSZWZlcmVuY2UsXHJcblx0UmV0dXJuLFxyXG5cdFN0cixcclxuXHRTdGF0ZW1lbnRzXHJcbn07XHJcbmV4cG9ydCB7XHJcblx0QWJzdHJhY3Rpb25JbnRlcmZhY2UsXHJcblx0QXJySW50ZXJmYWNlLFxyXG5cdEFyZ3VtZW50c0ludGVyZmFjZSxcclxuXHRBc3NlcnRpb25JbnRlcmZhY2UsXHJcblx0QXNzaWdubWVudEludGVyZmFjZSxcclxuXHRCb29sSW50ZXJmYWNlLFxyXG5cdENhbGxJbnRlcmZhY2UsXHJcblx0Q29tcGFyaXNvbkludGVyZmFjZSxcclxuXHRDb25kaXRpb25JbnRlcmZhY2UsXHJcblx0RGVsZXRpb25JbnRlcmZhY2UsXHJcblx0RnVuY0ludGVyZmFjZSxcclxuXHRJZkludGVyZmFjZSxcclxuXHRNYXRoSW50ZXJmYWNlLFxyXG5cdE51bUludGVyZmFjZSxcclxuXHRPYmpJbnRlcmZhY2UsXHJcblx0UHJlc2VuY2VJbnRlcmZhY2UsXHJcblx0UmVmZXJlbmNlSW50ZXJmYWNlLFxyXG5cdFJldHVybkludGVyZmFjZSxcclxuXHRTdHJJbnRlcmZhY2UsXHJcblx0U3RhdGVtZW50c0ludGVyZmFjZVxyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBKc2VuO1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwib2JqZWN0XCIuXHJcbiAqIFRoaXMgaG9sZHMgdHJ1ZSBmb3IgYW55dGhpbmcgb2JqZWN0LCBpbmNsdWRpbmcgYnVpbHQtaW5zLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpIHx8IHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwiYXJyYXlcIi5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcInN0cmluZ1wiLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyB1bmRlZmluZWQgb3IgaXMgb2YgdHlwZSBcInVuZGVmaW5lZFwiLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggJiYgKHZhbCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgdW5kZWZpbmVkIG9yIGlzIG51bGwuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gdmFsID09PSBudWxsIHx8IHZhbCA9PT0gJyc7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIHB1cmUgb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gIUFycmF5LmlzQXJyYXkodmFsKSAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWw7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc1R5cGVBcnJheSBmcm9tICcuLi9qcy9pc1R5cGVBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNFbXB0eSBmcm9tICcuLi9qcy9pc0VtcHR5LmpzJztcclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICcuLi9qcy9pc09iamVjdC5qcyc7XHJcblxyXG4vKipcclxuICogQ2FzdHMgYW4gYXJyYXktbGlrZSBvYmplY3QgdG8gYW4gYXJyYXkuXHJcbiAqXHJcbiAqIEBwYXJhbSBtaXhlZCBcdHZhbFxyXG4gKiBAcGFyYW0gYm9vbFx0IFx0Y2FzdE9iamVjdFxyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwsIGNhc3RPYmplY3QgPSB0cnVlKSB7XHJcblx0aWYgKF9pc0FycmF5KHZhbCkpIHtcclxuXHRcdHJldHVybiB2YWw7XHJcblx0fTtcclxuXHRpZiAoIWNhc3RPYmplY3QgJiYgX2lzT2JqZWN0KHZhbCkpIHtcclxuXHRcdHJldHVybiBbdmFsXTtcclxuXHR9O1xyXG5cdGlmICh2YWwgIT09IGZhbHNlICYmIHZhbCAhPT0gMCAmJiBfaXNFbXB0eSh2YWwpKSB7XHJcblx0XHRyZXR1cm4gW107XHJcblx0fTtcclxuXHRpZiAoX2lzVHlwZUFycmF5KHZhbCkpIHtcclxuXHRcdHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh2YWwpO1xyXG5cdH07XHJcblx0aWYgKF9pc09iamVjdCh2YWwpKSB7XHJcblx0XHRyZXR1cm4gT2JqZWN0LnZhbHVlcyh2YWwpO1xyXG5cdH07XHJcblx0cmV0dXJuIFt2YWxdO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzTnVsbCBmcm9tICcuL2lzTnVsbC5qcyc7XHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnLi9pc1VuZGVmaW5lZC5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJy4vaXNUeXBlT2JqZWN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgZW1wdHkgaW4gaXRzIG93biB0eXBlLlxyXG4gKiBUaGlzIGhvbGRzIHRydWUgZm9yIE5VTExzLCBVTkRFRklORUQsIEZBTFNFLCAwLFxyXG4gKiBvYmplY3RzIHdpdGhvdXQga2V5cywgZW1wdHkgYXJyYXlzLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIF9pc051bGwodmFsKSB8fCBfaXNVbmRlZmluZWQodmFsKSB8fCB2YWwgPT09IGZhbHNlIHx8IHZhbCA9PT0gMCBcclxuXHRcdHx8IChfaXNUeXBlT2JqZWN0KHZhbCkgJiYgIU9iamVjdC5rZXlzKHZhbCkubGVuZ3RoKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1N0cmluZyBmcm9tICcuL2lzU3RyaW5nLmpzJztcclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICcuL2lzVW5kZWZpbmVkLmpzJztcclxuXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgXCJhcnJheS1saWtlXCIuXHJcbiAqIFRoaXMgaG9sZHMgdHJ1ZSBmb3IgYW55dGhpbmcgdGhhdCBoYXMgYSBsZW5ndGggcHJvcGVydHkuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiAhX2lzU3RyaW5nKHZhbCkgJiYgIV9pc1VuZGVmaW5lZCh2YWwubGVuZ3RoKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzU3RyaW5nIGZyb20gJy4uL2pzL2lzU3RyaW5nLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gYW4gb2JqZWN0IGZvciB0aGUgZ2l2ZW4gcGFpcihzKSBvZiBpbnB1dC5cclxuICpcclxuICogQHBhcmFtIHN0cmluZ3xhcnJheSBcdFx0XHRrZXlcclxuICogQHBhcmFtIG1peGVkfGFycmF5XHRcdFx0dmFsIFxyXG4gKlxyXG4gKiBAcmV0dXJuIG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oa2V5LCB2YWwgPSBudWxsKSB7XHJcblx0dmFyIG9iaiA9IHt9O1xyXG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XHJcblx0XHRpZiAoX2lzU3RyaW5nKGtleSkpIHtcclxuXHRcdFx0b2JqW2tleV0gPSB2YWw7XHJcblx0XHR9IGVsc2UgaWYgKF9pc0FycmF5KGtleSkgJiYgX2lzQXJyYXkodmFsKSkge1xyXG5cdFx0XHRrZXkuZm9yRWFjaCgoaywgaSkgPT4gb2JqW2tdID0gdmFsW2ldKTtcclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIG9iajtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcInN0cmluZ1wiIG9yIGEgbnVtZXJpYyBzdHJpbmcuXHJcbiAqIFRoaXMgaG9sZHMgdHJ1ZSBmb3IgYm90aCBudW1iZXJzIGFuZCBudW1lcmljIHN0cmluZ3MuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gdmFsICE9PSB0cnVlICYmIHZhbCAhPT0gZmFsc2UgJiYgdmFsICE9PSBudWxsICYmIHZhbCAhPT0gJycgJiYgIWlzTmFOKHZhbCAqIDEpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVHlwZUZ1bmN0aW9uIGZyb20gJy4vaXNUeXBlRnVuY3Rpb24uanMnO1xyXG5cclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwiZnVuY3Rpb25cIi5cclxuICpcclxuICogQHBhcmFtIG9iamVjdCBcdFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIF9pc1R5cGVGdW5jdGlvbih2YWwpIHx8ICh2YWwgJiYge30udG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBmdW5jdGlvbl0nKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcImZ1bmN0aW9uXCIuXHJcbiAqIFRoaXMgaG9sZHMgdHJ1ZSBmb3IgYm90aCByZWd1bGFyIGZ1bmN0aW9ucyBhbmQgY2xhc3Nlcy5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbic7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJy4uL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNOdW1lcmljIGZyb20gJy4uL2pzL2lzTnVtZXJpYy5qcyc7XHJcblxyXG4vKipcclxuICogTG9vcHMgdGhydSBvYmogZmxhdGx5IHdpdGggYSBjYWxsYmFjayBmdW5jdGlvbi5cclxuICogU3RvcHMgd2hlbiBjYWxsYmFjayByZXR1cm5zIGEgbm9uLXVuZGVmaW5lZCB2YWx1ZS5cclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdCBcdFx0XHRvYmogXHRcdFx0VGhlIGFycmF5IG9yIG9iamVjdCB0byBpdGVyYXRlLlxyXG4gKiBAcGFyYW0gZnVuY3Rpb24gXHRcdFx0XHRjYWxsYmFjayBcdFx0VGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcmV0dXJuIG1peGVkfG51bGxcdFx0XHRBbnkgbm9uLW51bGwgcmV0dXJuIGZyb20gY2FsbGJhY2tcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iaiwgY2FsbGJhY2spIHtcclxuXHR2YXIgcmV0dXJuVmFsdWUgPSB1bmRlZmluZWQ7XHJcblx0aWYgKF9pc1R5cGVPYmplY3Qob2JqKSkge1xyXG5cdFx0T2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKChrLCBpKSA9PiB7XHJcblx0XHRcdGlmIChyZXR1cm5WYWx1ZSAhPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRyZXR1cm5WYWx1ZSA9IGNhbGxiYWNrKF9pc051bWVyaWMoaykgPyBwYXJzZUZsb2F0KGspIDogaywgb2JqW2tdLCBpKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cdHJldHVybiByZXR1cm5WYWx1ZTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVW5kZWZpbmVkLmpzJztcclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzT2JqZWN0LmpzJztcclxuaW1wb3J0IF9lYWNoIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2VhY2guanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgRXZlbnQgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEluaXRpYWxpemVzIHRoZSBpbnN0YW5jZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBhcnJheXxvYmplY3RcdFx0dGFyZ2V0XHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHRcdGRldGFpbHNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKHRhcmdldCwgZGV0YWlscyA9IHt9KSB7XHJcblx0XHR0aGlzLiQgPSB7fTtcclxuXHRcdHRoaXMuJC50YXJnZXQgPSB0YXJnZXQ7XHJcblx0XHR0aGlzLiQuZGV0YWlscyA9IGRldGFpbHM7XHJcblx0XHR0aGlzLiQucHJvcGFnYXRpb25TdG9wcGVkID0gZmFsc2U7XHJcblx0XHR0aGlzLiQuZGVmYXVsdFByZXZlbnRlZCA9IGZhbHNlO1xyXG5cdFx0dGhpcy4kLnByb21pc2VzSW5zdGFuY2UgPSBudWxsO1xyXG5cdFx0dGhpcy4kLnByb21pc2VzID0gW107XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0X2VhY2goZGV0YWlscywgKHByb3AsIHZhbHVlKSA9PiB7XHJcblx0XHRcdGlmIChwcm9wICE9PSAnJCcpIHtcclxuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgcHJvcCwge3ZhbHVlfSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogR2V0cyB0aGUgXCJ0YXJnZXRcIiBvYmplY3QuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGFycmF5fG9iamVjdFxyXG5cdCAqL1xyXG5cdGdldCB0YXJnZXQoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy4kLnRhcmdldDtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdldHMgdGhlIFwiZGV0YWlsc1wiIG9iamVjdC5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gb2JqZWN0XHJcblx0ICovXHJcblx0Z2V0IGRldGFpbHMoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy4kLmRldGFpbHM7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdCAqIFJFU1BPTlNFIEhBTkRMRVJTXHJcblx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICogU3RvcHMgdGhlIGV2bnQgZnJvbSByZWFjaGluZyBvdGhlciBsaXN0ZW5lcnMuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGJvb2xcclxuXHQgKi9cclxuXHRzdG9wUHJvcGFnYXRpb24oKSB7XHJcblx0XHR0aGlzLiQucHJvcGFnYXRpb25TdG9wcGVkID0gdHJ1ZTtcclxuXHR9XHJcblx0XHRcclxuXHQvKipcclxuXHQgKiAoUmVhZG9ubHkpIHRlbGxzIGlmIHN0b3BQcm9wYWdhdGlvbigpIGhhcyBiZWVuIGNhbGxlZC5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYm9vbFxyXG5cdCAqL1xyXG5cdGdldCBwcm9wYWdhdGlvblN0b3BwZWQoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy4kLnByb3BhZ2F0aW9uU3RvcHBlZDtcclxuXHR9XHJcblx0XHRcclxuXHQvKipcclxuXHQgKiBTZXRzIGEgZGlzcG9zaXRpb24gdGhhdCBhc2tzIGV2ZW50IGluaXRpYXRvciBub3QgdG9cclxuXHQgKiBwcm9jZWVkIHdpdGggZGVmYXVsdCBhY3Rpb24uXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRwcmV2ZW50RGVmYXVsdCgpIHtcclxuXHRcdHRoaXMuJC5kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcclxuXHR9XHJcblx0XHRcclxuXHQvKipcclxuXHQgKiAoUmVhZG9ubHkpIHRlbGxzIGlmIHByZXZlbnREZWZhdWx0KCkgaGFzIGJlZW4gY2FsbGVkLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBib29sXHJcblx0ICovXHJcblx0Z2V0IGRlZmF1bHRQcmV2ZW50ZWQoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy4kLmRlZmF1bHRQcmV2ZW50ZWQ7XHJcblx0fVxyXG5cdFx0XHJcblx0LyoqXHJcblx0ICogU2V0cyBhIFByb21pc2UgZGlzcG9zaXRpb24uXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gUHJvbWlzZVx0cHJvbWlzZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0cHJvbWlzZShwcm9taXNlKSB7XHJcblx0XHRpZiAoIShwcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdFdmVudC5wcm9taXNlKCkgbXVzdCBiZSBjYWxsZWQgd2l0aCBhIFByb21pc2UuJyk7XHJcblx0XHR9XHJcblx0XHR0aGlzLiQucHJvbWlzZXMucHVzaChwcm9taXNlKTtcclxuXHRcdHRoaXMuJC5wcm9taXNlc0luc3RhbmNlID0gbnVsbDtcclxuXHR9XHJcblx0XHRcclxuXHQvKipcclxuXHQgKiAoUmVhZG9ubHkpIHJldHVybnMgYWxsIHByb21pc2VzLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBQcm9taXNlfG51bGxcclxuXHQgKi9cclxuXHRnZXQgcHJvbWlzZXMoKSB7XHJcblx0XHRpZiAoIXRoaXMuJC5wcm9taXNlc0luc3RhbmNlICYmIHRoaXMuJC5wcm9taXNlcy5sZW5ndGgpIHtcclxuXHRcdFx0dGhpcy4kLnByb21pc2VzSW5zdGFuY2UgPSBQcm9taXNlLmFsbCh0aGlzLiQucHJvbWlzZXMpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMuJC5wcm9taXNlc0luc3RhbmNlO1xyXG5cdH1cclxuXHRcdFxyXG5cdC8qKlxyXG5cdCAqIEV2YWx1YXRlcyB0aGUgZ2l2ZW4gZGlzcG9zaXRpb24gdmFsdWUgYW5kXHJcblx0ICogY2FsbHMgYW4gYXBwcm9wcmlhdGUgZGlzcG9zaXRpb24gbWV0aG9kLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtcyBtaXhlZCBcdHJzcG5zXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRyZXNwb25zZShyc3Bucykge1xyXG5cdFx0dmFyIHByb21zO1xyXG5cdFx0dmFyIGlzRXZlbnQgPSBfaXNPYmplY3QocnNwbnMpICYmICFfaXNVbmRlZmluZWQocnNwbnMucHJvcGFnYXRpb25TdG9wcGVkKSAmJiAhX2lzVW5kZWZpbmVkKHJzcG5zLmRlZmF1bHRQcmV2ZW50ZWQpXHJcblx0XHRpZiAoKHJzcG5zID09PSBmYWxzZSkgfHwgKGlzRXZlbnQgJiYgcnNwbnMucHJvcGFnYXRpb25TdG9wcGVkKSkge1xyXG5cdFx0XHR0aGlzLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cdFx0fSBlbHNlIGlmICgocnNwbnMgPT09IGZhbHNlKSB8fCAoaXNFdmVudCAmJiByc3Bucy5kZWZhdWx0UHJldmVudGVkKSkge1xyXG5cdFx0XHR0aGlzLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHR9IGVsc2UgaWYgKChyc3BucyBpbnN0YW5jZW9mIFByb21pc2UgJiYgKHByb21zID0gcnNwbnMpKVxyXG5cdFx0fHwgKGlzRXZlbnQgJiYgKHByb21zID0gcnNwbnMucHJvbWlzZXMpKSkge1xyXG5cdFx0XHR0aGlzLnByb21pc2UocHJvbXMpO1xyXG5cdFx0fVxyXG5cdH1cclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRXZlbnQgZnJvbSAnLi9FdmVudC5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBRdWVyeUV2ZW50IGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgRXZlbnQge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEluaXRpYWxpemVzIHRoZSBpbnN0YW5jZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBhcnJheXxvYmplY3RcdFx0dGFyZ2V0XHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHRcdGRldGFpbHNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKHRhcmdldCwgZGV0YWlscyA9IHt9KSB7XHJcblx0XHRzdXBlcih0YXJnZXQsIGRldGFpbHMpO1xyXG5cdH1cclxufTsiLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwibnVtYmVyXCIuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XHJcblxyXG4vKipcclxuICogVGVsbHMgaWYgYW4gb2JqZWN0IGlzIGRpcmVjdCBpbnN0YW5jZSBvZiBPYmplY3QucHJvdG90eXBlLlxyXG4gKiBRdWl0ZSB1c2VmdWwgaW4gZGlmZmVyZW50aWF0aW5nIG5hdGl2ZSBvYmplY3RzIGFuZCBjbGFzcyBpbnN0YW5jZXMgZnJvbSBwbGFpbiBvYmplY3RzICh7fSkuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3QgXHRvYmpcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmopIHtcclxuXHRyZXR1cm4gX2lzT2JqZWN0KG9iaikgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IE9iamVjdC5wcm90b3R5cGU7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIHVuZGVmaW5lZCBvciBpcyBvZiB0eXBlIFwiYm9vbGVhblwiLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHZhbCA9PT0gdHJ1ZSB8fCB2YWwgPT09IGZhbHNlO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzTnVtYmVyIGZyb20gJy4uL2pzL2lzTnVtYmVyLmpzJztcclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJy4uL2pzL2lzT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnLi4vanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc0Z1bmN0aW9uIGZyb20gJy4uL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzUGxhaW5PYmplY3QgZnJvbSAnLi4vanMvaXNQbGFpbk9iamVjdC5qcyc7XHJcbmltcG9ydCBfY29tcGFyZUNhbGxiYWNrIGZyb20gJy4vY29tcGFyZUNhbGxiYWNrLmpzJztcclxuXHJcbi8qKlxyXG4gKiBBc3NlcnRzIChtZW1iZXJzIG9mKSB0aGUgZmlyc3QgdmFsdWUgYWdhaW5zdCAobWVtYmVycyBvZikgc3Vic2VxdWVudCB2YWx1ZXMuXHJcbiAqIEFzc2VydGlvbiBjb3VsZCBiZSBUUlVFLCBGQUxTRSwgb3IgY3VzdG9tLlxyXG4gKlxyXG4gKiBAcGFyYW0gbWl4ZWQgXHRcdFx0b2JqMVxyXG4gKiBAcGFyYW0gbWl4ZWQgXHRcdFx0b2JqMlxyXG4gKiBAcGFyYW0gYm9vbHxmdW5jdGlvblx0XHRhc3NlcnRpb25cclxuICogQHBhcmFtIGludFx0XHRcdFx0ZGVwdGhcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5jb25zdCBfZXZlbiA9IGZ1bmN0aW9uKG9iajEsIG9iajIsIGFzc2VydGlvbiA9IHRydWUsIGRlcHRoID0gMSkge1xyXG5cdGlmIChfaXNBcnJheShvYmoxKSAmJiBfaXNBcnJheShvYmoyKSAmJiBvYmoxLmxlbmd0aCAhPT0gb2JqMi5sZW5ndGgpIHtcclxuXHRcdHJldHVybiAhYXNzZXJ0aW9uO1xyXG5cdH1cclxuXHRpZiAoX2lzT2JqZWN0KG9iajEpICYmIF9pc09iamVjdChvYmoyKSkge1xyXG5cdFx0dmFyIG9iajFLZXlzID0gT2JqZWN0LmtleXMob2JqMSk7XHJcblx0XHR2YXIgb2JqMktleXMgPSBPYmplY3Qua2V5cyhvYmoyKTtcclxuXHRcdGlmICghb2JqMUtleXMubGVuZ3RoICYmICFvYmoyS2V5cy5sZW5ndGgpIHtcclxuXHRcdFx0Ly8gT2JqZWN0cyB0aGF0IHdvbid0IHNob3cga2V5cyBtdXN0IGJlIGNvbXBhcmVkIGJ5IGluc3RhbmNlXHJcblx0XHRcdC8vIE1hbnkgbmF0aXZlIG9iamVjdHMgd29uJ3QuIFNvIHdlIGNhbid0IGp1ZGdlIGJ5IGtleXMgYWxvbmUuXHJcblx0XHRcdHJldHVybiBfaXNQbGFpbk9iamVjdChvYmoxKSAmJiBfaXNQbGFpbk9iamVjdChvYmoyKSBcclxuXHRcdFx0XHQ/IGFzc2VydGlvblxyXG5cdFx0XHRcdDogKG9iajEgPT09IG9iajIpID09PSBhc3NlcnRpb247XHJcblx0XHR9XHJcblx0XHRpZiAoIV9ldmVuKG9iajFLZXlzLCBvYmoyS2V5cykpIHtcclxuXHRcdFx0cmV0dXJuICFhc3NlcnRpb247XHJcblx0XHR9XHJcblx0fVxyXG5cdGlmIChkZXB0aCA+IDAgJiYgKChfaXNBcnJheShvYmoxKSAmJiBfaXNBcnJheShvYmoyKSkgfHwgKF9pc09iamVjdChvYmoxKSAmJiBfaXNPYmplY3Qob2JqMikpKSkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IF9jb21wYXJlQ2FsbGJhY2sob2JqMSwgb2JqMiwgKHYxLCB2MikgPT4ge1xyXG5cdFx0XHRyZXR1cm4gX2V2ZW4odjEsIHYyLCBhc3NlcnRpb24sIGRlcHRoIC0gMSk7XHJcblx0XHR9LCBmYWxzZS8qbmV0Q29tcGFyaXNvbiovLCBmYWxzZS8qY29udHJhc3QqLywgdHJ1ZS8qcmV0dXJuT25GaXJzdEZhbHNlKi8pO1xyXG5cdFx0cmV0dXJuIF9pc0FycmF5KHJlc3VsdCkgXHJcblx0XHRcdD8gcmVzdWx0Lmxlbmd0aCA9PT0gb2JqMS5sZW5ndGggJiYgcmVzdWx0Lmxlbmd0aCA9PT0gb2JqMi5sZW5ndGggXHJcblx0XHRcdDogKF9pc09iamVjdChyZXN1bHQpICYmIF9pc09iamVjdChvYmoxKSBcclxuXHRcdFx0XHQ/IE9iamVjdC5rZXlzKHJlc3VsdCkubGVuZ3RoID09PSBPYmplY3Qua2V5cyhvYmoxKS5sZW5ndGggJiYgT2JqZWN0LmtleXMocmVzdWx0KS5sZW5ndGggPT09ICBPYmplY3Qua2V5cyhvYmoyKS5sZW5ndGggXHJcblx0XHRcdFx0OiByZXN1bHQpO1xyXG5cdH1cclxuXHRyZXR1cm4gX2lzRnVuY3Rpb24oYXNzZXJ0aW9uKSA/IGFzc2VydGlvbihvYmoxLCBvYmoyKSA6IChcclxuXHRcdF9pc051bWJlcihvYmoxKSAmJiBfaXNOdW1iZXIob2JqMikgJiYgaXNOYU4ob2JqMSkgJiYgaXNOYU4ob2JqMikgXHJcblx0XHRcdD8gYXNzZXJ0aW9uIFxyXG5cdFx0XHQ6IChvYmoxID09PSBvYmoyKSA9PT0gYXNzZXJ0aW9uXHJcblx0KTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgX2V2ZW47XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICcuLi9qcy9pc09iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJy4uL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNCb29sZWFuIGZyb20gJy4uL2pzL2lzQm9vbGVhbi5qcyc7XHJcbmltcG9ydCBfZWFjaCBmcm9tICcuL2VhY2guanMnO1xyXG5cclxuLyoqXHJcbiAqIEdldHMgdGhlIG1hdGNoKGVzKSBiZXR3ZWVuIChtZW1iZXJzIG9mKSB0d28gdmFsdWVzO1xyXG4gKiBhc3NlcnRpb24gb3B0aW9uYWxseSBjdXN0b20uXHJcbiAqXHJcbiAqIEBwYXJhbSBtaXhlZCBcdFx0XHRvYjFcclxuICogQHBhcmFtIG1peGVkIFx0XHRcdG9iajJcclxuICogQHBhcmFtIHN0cmluZ3xmdW5jdGlvblx0YXNzZXJ0aW9uXHJcbiAqIEBwYXJhbSBib29sXHRcdFx0XHRuZXRDb21wYXJpc29uXHJcbiAqIEBwYXJhbSBib29sXHRcdFx0XHRjb250cmFzdFxyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdFx0cmV0dXJuT25GaXJzdEZhbHNlXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbHxhcnJheXxvYmplY3RcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iajEsIG9iajIsIGFzc2VydGlvbiA9IHRydWUsIG5ldENvbXBhcmlzb24gPSB0cnVlLCBjb250cmFzdCA9IGZhbHNlLCByZXR1cm5PbkZpcnN0RmFsc2UgPSBmYWxzZSkge1xyXG5cdGlmIChfaXNBcnJheShvYmoxKSAmJiBfaXNBcnJheShvYmoyKSkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xyXG5cdFx0dmFyIGNvbnRuID0gdHJ1ZTtcclxuXHRcdG9iajEuZm9yRWFjaCh2MSA9PiB7XHJcblx0XHRcdGlmICghY29udG4pIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIHRlc3RQYXNzID0gZmFsc2U7XHJcblx0XHRcdF9lYWNoKG9iajIsIChrLCB2MikgPT4ge1xyXG5cdFx0XHRcdGlmICghdGVzdFBhc3MgfHwgKG5ldENvbXBhcmlzb24gJiYgX2lzVHlwZU9iamVjdCh2MSkpKSB7XHJcblx0XHRcdFx0XHR0ZXN0UGFzcyA9IGFzc2VydGlvbih2MSwgdjIpO1xyXG5cdFx0XHRcdFx0aWYgKChfaXNBcnJheSh0ZXN0UGFzcykgJiYgIXRlc3RQYXNzLmxlbmd0aCkgfHwgKF9pc09iamVjdCh0ZXN0UGFzcykgJiYgIU9iamVjdC5rZXlzKHRlc3RQYXNzKS5sZW5ndGgpKSB7XHJcblx0XHRcdFx0XHRcdHRlc3RQYXNzID0gZmFsc2U7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRpZiAoX2lzVHlwZU9iamVjdCh0ZXN0UGFzcykgJiYgbmV0Q29tcGFyaXNvbikge1xyXG5cdFx0XHRcdFx0XHQvLyBGdXJ0aGVyIHJlY3Vyc2lvbnMgc2hvdWxkIHVzZSB0aGlzIHRlc3RQYXNzIGFzIHYxXHJcblx0XHRcdFx0XHRcdHYxID0gdGVzdFBhc3M7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0aWYgKF9pc1R5cGVPYmplY3QodGVzdFBhc3MpKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2gobmV0Q29tcGFyaXNvbiA/IHRlc3RQYXNzIDogdjEpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKCFfaXNCb29sZWFuKHRlc3RQYXNzKSkge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKHRlc3RQYXNzKTtcclxuXHRcdFx0fSBlbHNlIGlmICgoY29udHJhc3QgJiYgIXRlc3RQYXNzKSB8fCAoIWNvbnRyYXN0ICYmIHRlc3RQYXNzKSkge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKHYxKTtcclxuXHRcdFx0fSBlbHNlIGlmIChyZXR1cm5PbkZpcnN0RmFsc2UpIHtcclxuXHRcdFx0XHRjb250biA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG5cdFxyXG5cdGlmIChfaXNPYmplY3Qob2JqMSkgJiYgX2lzT2JqZWN0KG9iajIpKSB7XHJcblx0XHR2YXIgcmVzdWx0ID0ge307XHJcblx0XHR2YXIgY29udG4gPSB0cnVlO1xyXG5cdFx0T2JqZWN0LmtleXMob2JqMSkuZm9yRWFjaChrID0+IHtcclxuXHRcdFx0aWYgKCFjb250bikge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgdGVzdFBhc3MgPSBhc3NlcnRpb24ob2JqMVtrXSwgb2JqMltrXSk7XHJcblx0XHRcdGlmICgoX2lzQXJyYXkodGVzdFBhc3MpICYmICF0ZXN0UGFzcy5sZW5ndGgpIHx8IChfaXNPYmplY3QodGVzdFBhc3MpICYmICFPYmplY3Qua2V5cyh0ZXN0UGFzcykubGVuZ3RoKSkge1xyXG5cdFx0XHRcdHRlc3RQYXNzID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKF9pc1R5cGVPYmplY3QodGVzdFBhc3MpKSB7XHJcblx0XHRcdFx0cmVzdWx0W2tdID0gbmV0Q29tcGFyaXNvbiA/IHRlc3RQYXNzIDogb2JqMVtrXTtcclxuXHRcdFx0fSBlbHNlIGlmICghX2lzQm9vbGVhbih0ZXN0UGFzcykpIHtcclxuXHRcdFx0XHRyZXN1bHRba10gPSB0ZXN0UGFzcztcclxuXHRcdFx0fSBlbHNlIGlmICgoY29udHJhc3QgJiYgIXRlc3RQYXNzKSB8fCAoIWNvbnRyYXN0ICYmIHRlc3RQYXNzKSkge1xyXG5cdFx0XHRcdHJlc3VsdFtrXSA9IG9iajFba107XHJcblx0XHRcdH0gZWxzZSBpZiAocmV0dXJuT25GaXJzdEZhbHNlKSB7XHJcblx0XHRcdFx0Y29udG4gPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIEZpcmVhYmxlIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBTZXRzIGEgXCJkaXNjb25uZWN0ZWRcIiBmbGFnIG9uIHRoZSBGaXJlYWJsZS5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGRpc2Nvbm5lY3QoKSB7XHJcblx0XHR0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XHJcblx0fVxyXG59OyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaW50ZXJzZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ludGVyc2VjdC5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IEZpcmVhYmxlIGZyb20gJy4vRmlyZWFibGUuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgRmlyZWJhc2UgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEluaXRpYWxpemVzIHRoZSBpbnN0YW5jZS5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0dGhpcy5maXJlYWJsZXMgPSBbXTtcclxuXHRcdHRoaXMuY3VycmVudGx5RmlyaW5nRXZlbnRzID0gW107XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEFkZHMgYW4gRmlyZWFibGUgaW5zdGFuY2VcclxuXHQgKiB3aXRoIG9wdGlvbmFsIHRhZ3MuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gRmlyZWFibGVcdFx0XHRmaXJlYWJsZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBGaXJlYWJsZVxyXG5cdCAqL1xyXG5cdGFkZEZpcmVhYmxlKGZpcmVhYmxlKSB7XHJcblx0XHR0aGlzLmZpcmVhYmxlcy5wdXNoKGZpcmVhYmxlKTtcclxuXHRcdHJldHVybiBmaXJlYWJsZTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogUmVtb3ZlcyBhbiBGaXJlYWJsZSBpbnN0YW5jZVxyXG5cdCAqIHdpdGggb3B0aW9uYWwgdGFncy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBGaXJlYWJsZVx0XHRcdGZpcmVhYmxlXHJcblx0ICogQHBhcmFtIGFycmF5XHRcdFx0XHR0YWdzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRyZW1vdmVGaXJlYWJsZShmaXJlYWJsZSwgdGFncyA9IFtdKSB7XHJcblx0XHR0aGlzLmZpcmVhYmxlcyA9IHRoaXMuZmlyZWFibGVzLmZpbHRlcihfZmlyZWFibGUgPT4gX2ZpcmVhYmxlICE9PSBmaXJlYWJsZSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEZpbmRzIHRoZSBPYnNlcnZlciBpbnN0YW5jZXNcclxuXHQgKiB3aXRoIHRoZSBnaXZlbiBxdWVyeSBwYXJhbWV0ZXJzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHRcdHF1ZXJ5XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGFycmF5XHJcblx0ICovXHJcblx0ZmluZEZpcmVhYmxlcyhxdWVyeSkge1xyXG5cdFx0cmV0dXJuIHRoaXMuZmlyZWFibGVzLmZpbHRlcihvYnNlcnZlciA9PiB7XHJcblx0XHRcdHJldHVybiAoIXF1ZXJ5LmhhbmRsZXIgfHwgb2JzZXJ2ZXIuaGFuZGxlciA9PT0gcXVlcnkuaGFuZGxlcikgJiYgKCFxdWVyeS5wYXJhbXMgfHwgKFxyXG5cdFx0XHRcdCghcXVlcnkucGFyYW1zLnR5cGUgfHwgb2JzZXJ2ZXIucGFyYW1zLnR5cGUgPT09IHF1ZXJ5LnBhcmFtcy50eXBlKVxyXG5cdFx0XHRcdCYmICghcXVlcnkucGFyYW1zLnRhZ3MgfHwgX2ludGVyc2VjdChvYnNlcnZlci5wYXJhbXMudGFncyB8fCBbXSwgcXVlcnkucGFyYW1zLnRhZ3MpLmxlbmd0aCA9PT0gcXVlcnkucGFyYW1zLnRhZ3MubGVuZ3RoKVxyXG5cdFx0XHQpKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBDcmVhdGUgYW4gb2JqZWN0J3MgZmlyZWJhc2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHRvYmplY3RcclxuXHQgKiBAcGFyYW0gc3RyaW5nXHRcdHR5cGVcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gRmlyZWJhc2VcclxuXHQgKi9cclxuXHRzdGF0aWMgY3JlYXRlRm9yVGFyZ2V0IChvYmplY3QsIHR5cGUsIEJhc2UpIHtcclxuXHRcdGlmIChvYmplY3QgJiYgX2lzVHlwZU9iamVjdChvYmplY3QpKSB7XHJcblx0XHRcdHZhciBmaXJlYmFzZXM7XHJcblx0XHRcdGlmICghKGZpcmViYXNlcyA9IG9iamVjdFtmaXJlYmFzZUtleV0pKSB7XHJcblx0XHRcdFx0ZmlyZWJhc2VzID0ge307XHJcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iamVjdCwgZmlyZWJhc2VLZXksIHtcclxuXHRcdFx0XHRcdGdldDooKSA9PiBmaXJlYmFzZXMsXHJcblx0XHRcdFx0XHRzZXQ6dmFsdWUgPT4ge1xyXG5cdFx0XHRcdFx0XHRpZiAodmFsdWUgIT09IGZpcmViYXNlcykge1xyXG5cdFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignQXR0ZW1wdCB0byBvdmVyd3JpdGUgdGhlIFwiJyArIGZpcmViYXNlS2V5ICsgJ1wiIHNwZWNpYWwgcHJvcGVydHkhJyk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHRlbnVtZXJhYmxlOmZhbHNlLFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdGZpcmViYXNlc1t0eXBlXSA9IHR5cGUgPT09ICdsaXN0ZW5lcnMnID8gbmV3IEJhc2Uob2JqZWN0KSA6IG5ldyBCYXNlO1xyXG5cdFx0XHRyZXR1cm4gZmlyZWJhc2VzW3R5cGVdO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBSZXR1cm5zIGFuIG9iamVjdCdzIGZpcmViYXNlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGFycmF5fG9iamVjdFx0b2JqZWN0XHJcblx0ICogQHBhcmFtIHN0cmluZ1x0XHR0eXBlXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIEZpcmViYXNlXHJcblx0ICovXHJcblx0c3RhdGljIGdldEZvclRhcmdldChvYmplY3QsIHR5cGUpIHtcclxuXHRcdHZhciBmaXJlYmFzZXM7XHJcblx0XHRpZiAob2JqZWN0ICYmIF9pc1R5cGVPYmplY3Qob2JqZWN0KSAmJiAoZmlyZWJhc2VzID0gb2JqZWN0W2ZpcmViYXNlS2V5XSkpIHtcclxuXHRcdFx0cmV0dXJuIGZpcmViYXNlc1t0eXBlXTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQHZhciBzdHJpbmdcclxuICovXHJcbmNvbnN0IGZpcmViYXNlS2V5ID0gJzwgciBlIGYgbCBlIHggPic7XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBpbnRlcnNlY3Rpb24gb2YgdHdvIGFycmF5cztcclxuICogb3B0aW9uYWxseSB1c2luZyBhIGN1c3RvbSBtYXRjaGluZyBmdW5jdGlvbi5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqIEBwYXJhbSBhcnJheVx0IFx0YXJyMlxyXG4gKiBAcGFyYW0gZnVuY3Rpb24gXHRjYWxsYmFja1xyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIGFycjIsIGNhbGxiYWNrID0gbnVsbCkge1xyXG5cdHJldHVybiAhX2lzQXJyYXkoYXJyMikgPyBbXSA6IGFyci5maWx0ZXIodmFsMSA9PiBjYWxsYmFjayBcclxuXHRcdD8gYXJyMi5maWx0ZXIodmFsMiA9PiBjYWxsYmFjayh2YWwxLCB2YWwyKSkubGVuZ3RoIFxyXG5cdFx0OiBhcnIyLmluZGV4T2YodmFsMSkgIT09IC0xXHJcblx0KTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9hcnJGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Zyb20uanMnO1xyXG5pbXBvcnQgUXVlcnlFdmVudCBmcm9tICcuL1F1ZXJ5RXZlbnQuanMnO1xyXG5pbXBvcnQgRmlyZWFibGUgZnJvbSAnLi9GaXJlYWJsZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBUcmFwIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgRmlyZWFibGUge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEluaXRpYWxpemVzIHRoZSBpbnN0YW5jZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBmdW5jdGlvblx0XHRoYW5kbGVyXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHRwYXJhbXNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGhhbmRsZXIsIHBhcmFtcyA9IHt9KSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcclxuXHRcdHRoaXMucGFyYW1zID0gcGFyYW1zO1xyXG5cclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQ2FsbHMgdGhlIG9ic2VydmVyJ3MgaGFuZGxlciBmdW5jdGlvblxyXG5cdCAqIG9uIG1hdGNoaW5nIHdpdGggdGhlIGV2ZW50J3MgZmllbGRzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIE11dGF0aW9uRXZlbnRcdFx0XHQgXHRldnRcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb25cdFx0XHRcdFx0bmV4dFxyXG5cdCAqIEBwYXJhbSBtaXhlZFx0XHRcdFx0XHQgXHRyZWNpZXZlZFxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0ZmlyZShldnQsIG5leHQsIHJlY2lldmVkKSB7XHJcblx0XHRpZiAodGhpcy5kaXNjb25uZWN0ZWQgfHwgKHRoaXMucGFyYW1zLnR5cGUgJiYgdGhpcy5wYXJhbXMudHlwZSAhPT0gZXZ0LnR5cGUpKSB7XHJcblx0XHRcdHJldHVybiBuZXh0KC4uLl9hcnJGcm9tKGFyZ3VtZW50cykuc2xpY2UoMikpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMuaGFuZGxlcihldnQsIHJlY2lldmVkLCBuZXh0KTtcclxuXHR9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9ldmVuIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2V2ZW4uanMnO1xyXG5pbXBvcnQgUXVlcnlFdmVudCBmcm9tICcuL1F1ZXJ5RXZlbnQuanMnO1xyXG5pbXBvcnQgRmlyZWJhc2UgZnJvbSAnLi9GaXJlYmFzZS5qcyc7XHJcbmltcG9ydCBUcmFwIGZyb20gJy4vVHJhcC5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBSZWFjdGl2ZSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFwQmFzZSBleHRlbmRzIEZpcmViYXNlIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBGaXJlcyBhbGwgb2JzZXJ2ZXJzIHdpdGggdGhlIGdpdmVuIGV2dCAoY2hhbmdlKS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBFdmVudFx0XHRcdFx0ZXZ0XHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uXHRcdFx0ZGVmYXVsdEhhbmRsZXJcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gbWl4ZWRcclxuXHQgKi9cclxuXHRmaXJlKGV2dCwgZGVmYXVsdEhhbmRsZXIgPSBudWxsKSB7XHJcblx0XHRpZiAodGhpcy5jdXJyZW50bHlGaXJpbmdFdmVudHMuZmlsdGVyKGUgPT4gZS50eXBlID09PSBldnQudHlwZSAmJiBlLnF1ZXJ5ID09PSBldnQucXVlcnkpLmxlbmd0aCkge1xyXG5cdFx0XHRyZXR1cm4gZGVmYXVsdEhhbmRsZXIgPyBkZWZhdWx0SGFuZGxlcigpIDogdW5kZWZpbmVkO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5jdXJyZW50bHlGaXJpbmdFdmVudHMucHVzaChldnQpO1xyXG5cdFx0Y29uc3QgbmV4dCA9IChpbmRleCwgLi4uX2FyZ3MpID0+IHtcclxuXHRcdFx0dmFyIHRyYXAgPSB0aGlzLmZpcmVhYmxlc1tpbmRleF07XHJcblx0XHRcdGlmICh0cmFwKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRyYXAuZmlyZShldnQsICguLi5hcmdzKSA9PiB7XHJcblx0XHRcdFx0XHRyZXR1cm4gbmV4dChpbmRleCArIDEsIC4uLmFyZ3MpO1xyXG5cdFx0XHRcdH0vKm5leHQqLywgLi4uX2FyZ3MpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBkZWZhdWx0SGFuZGxlciA/IGRlZmF1bHRIYW5kbGVyKC4uLl9hcmdzKSA6IF9hcmdzWzBdO1xyXG5cdFx0fTtcclxuXHRcdHZhciB2YWx1ZSA9IG5leHQoMCk7XHJcblx0XHR0aGlzLmN1cnJlbnRseUZpcmluZ0V2ZW50cy5wb3AoKTtcclxuXHRcdHJldHVybiB2YWx1ZTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgY3JlYXRlRm9yVGFyZ2V0KG9iamVjdCkge1xyXG5cdFx0cmV0dXJuIHN1cGVyLmNyZWF0ZUZvclRhcmdldChvYmplY3QsICd0cmFwcycsIFRyYXBCYXNlKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgZ2V0Rm9yVGFyZ2V0KG9iamVjdCkge1xyXG5cdFx0cmV0dXJuIHN1cGVyLmdldEZvclRhcmdldChvYmplY3QsICd0cmFwcycpO1xyXG5cdH1cclxufTsiLCJcclxuLyoqXHJcbiAqIEFkZHMgYW4gaXRlbSBpZiBub3QgYWxyZWFkeSBleGlzdC5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqIEBwYXJhbSBhcnJheVx0IFx0Li4uaXRtc1xyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIC4uLml0ZW1zKSB7XHJcblx0aXRlbXMuZm9yRWFjaChpdG0gPT4ge1xyXG5cdFx0aWYgKGFyci5pbmRleE9mKGl0bSkgPCAwKSB7XHJcblx0XHRcdGFyci5wdXNoKGl0bSk7XHJcblx0XHR9XHJcblx0fSk7XHJcblx0cmV0dXJuIGFycjtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9wdXNoVW5pcXVlIGZyb20gJy4uL2Fyci9wdXNoVW5pcXVlLmpzJztcclxuaW1wb3J0IF9nZXRQcm90b3R5cGVDaGFpbiBmcm9tICcuL2dldFByb3RvdHlwZUNoYWluLmpzJztcclxuXHJcbi8qKlxyXG4gKiBFYWdlcmx5IHJldHJpZXZlcyBvYmplY3QgbWVtYmVycyBhbGwgZG93biB0aGUgcHJvdG90eXBlIGNoYWluLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHQgXHRvYmpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dW50aWxcclxuICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqLCB1bnRpbCkge1xyXG5cdHZhciBrZXlzQWxsID0gW107XHJcblx0X2dldFByb3RvdHlwZUNoYWluKG9iaiwgdW50aWwpLmZvckVhY2gob2JqID0+IHtcclxuXHRcdF9wdXNoVW5pcXVlKGtleXNBbGwsIC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikpO1xyXG5cdH0pO1xyXG5cdHJldHVybiBrZXlzQWxsO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgcHJvdG90eXBlIGNoYWluLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0IFx0XHRvYmpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dW50aWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmosIHVudGlsKSB7XHJcblx0dW50aWwgPSB1bnRpbCB8fCBPYmplY3QucHJvdG90eXBlO1xyXG5cdHVudGlsID0gdW50aWwgJiYgIV9pc0FycmF5KHVudGlsKSA/IFt1bnRpbF0gOiB1bnRpbDtcclxuXHQvLyBXZSBnZXQgdGhlIGNoYWluIG9mIGluaGVyaXRhbmNlXHJcblx0dmFyIHByb3RvdHlwYWxDaGFpbiA9IFtdO1xyXG5cdHZhciBvYmogPSBvYmo7XHJcblx0d2hpbGUoKG9iaiAmJiAoIXVudGlsIHx8IHVudGlsLmluZGV4T2Yob2JqKSA8IDApICYmIG9iai5uYW1lICE9PSAnZGVmYXVsdCcpKSB7XHJcblx0XHRwcm90b3R5cGFsQ2hhaW4ucHVzaChvYmopO1xyXG5cdFx0b2JqID0gb2JqID8gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgOiBudWxsO1xyXG5cdH1cclxuXHRyZXR1cm4gcHJvdG90eXBhbENoYWluO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICcuLi9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICcuLi9qcy9pc09iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJy4uL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNOdW1lcmljIGZyb20gJy4uL2pzL2lzTnVtZXJpYy5qcyc7XHJcbmltcG9ydCBfZ2V0QWxsUHJvcGVydHlOYW1lcyBmcm9tICcuL2dldEFsbFByb3BlcnR5TmFtZXMuanMnO1xyXG5cclxuLyoqXHJcbiAgKiBNZXJnZXMgdmFsdWVzIGZyb20gc3Vic2VxdWVudCBhcnJheXMvb2JqZWN0cyBmaXJzdCBhcnJheS9vYmplY3Q7XHJcbiAgKiBvcHRpb25hbGx5IHJlY3Vyc2l2ZVxyXG4gICpcclxuICAqIEBwYXJhbSBhcnJheSAuLi5vYmpzXHJcbiAgKlxyXG4gICogQHJldHVybiB2b2lkXHJcbiAgKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VDYWxsYmFjayhvYmpzLCBjYWxsYmFjaywgZGVlcFByb3BzID0gZmFsc2UsIGlzUmVwbGFjZSA9IGZhbHNlLCB3aXRoU3ltYm9scyA9IHRydWUpIHtcclxuXHR2YXIgZGVwdGggPSAwO1xyXG5cdHZhciBvYmoxID0gb2Jqcy5zaGlmdCgpO1xyXG5cdGlmIChfaXNOdW1lcmljKG9iajEpIHx8IG9iajEgPT09IHRydWUgfHwgb2JqMSA9PT0gZmFsc2UpIHtcclxuXHRcdGRlcHRoID0gb2JqMTtcclxuXHRcdG9iajEgPSBvYmpzLnNoaWZ0KCk7XHJcblx0fVxyXG5cdGlmICghb2Jqcy5sZW5ndGgpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignX21lcmdlKCkgcmVxdWlyZXMgdHdvIG9yIG1vcmUgYXJyYXkvb2JqZWN0cy4nKTtcclxuXHR9XHJcblx0b2Jqcy5mb3JFYWNoKChvYmoyLCBpKSA9PiB7XHJcblx0XHRpZiAoIV9pc1R5cGVPYmplY3Qob2JqMikgJiYgIV9pc0Z1bmN0aW9uKG9iajIpKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdChkZWVwUHJvcHMgPyBfZ2V0QWxsUHJvcGVydHlOYW1lcyhvYmoyKSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iajIpKS5mb3JFYWNoKGtleSA9PiB7XHJcblx0XHRcdHZhciB2YWxBdE9iajEgPSBvYmoxW2tleV07XHJcblx0XHRcdHZhciB2YWxBdE9iajIgPSBvYmoyW2tleV07XHJcblx0XHRcdGlmICgoKF9pc0FycmF5KHZhbEF0T2JqMSkgJiYgX2lzQXJyYXkodmFsQXRPYmoyKSkgfHwgKF9pc09iamVjdCh2YWxBdE9iajEpICYmIF9pc09iamVjdCh2YWxBdE9iajIpKSkgXHJcblx0XHRcdCYmIChkZXB0aCA9PT0gdHJ1ZSB8fCBkZXB0aCA+IDApKSB7XHJcblx0XHRcdFx0Ly8gUkVDVVJTRS4uLlxyXG5cdFx0XHRcdG9iajFba2V5XSA9IF9pc0FycmF5KHZhbEF0T2JqMSkgJiYgX2lzQXJyYXkodmFsQXRPYmoyKSA/IFtdIDoge307XHJcblx0XHRcdFx0bWVyZ2VDYWxsYmFjayhbX2lzTnVtZXJpYyhkZXB0aCkgPyBkZXB0aCAtIDEgOiBkZXB0aCwgb2JqMVtrZXldLCB2YWxBdE9iajEsIHZhbEF0T2JqMl0sIGNhbGxiYWNrLCBkZWVwUHJvcHMsIGlzUmVwbGFjZSwgd2l0aFN5bWJvbHMpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKGNhbGxiYWNrKGtleSwgb2JqMSwgb2JqMiwgaSkpIHtcclxuXHRcdFx0XHRpZiAoX2lzQXJyYXkob2JqMSkgJiYgX2lzQXJyYXkob2JqMikpIHtcclxuXHRcdFx0XHRcdGlmIChpc1JlcGxhY2UpIHtcclxuXHRcdFx0XHRcdFx0b2JqMVtrZXldID0gdmFsQXRPYmoyO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0b2JqMS5wdXNoKHZhbEF0T2JqMik7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC8vIEluIGNhc2Ugd2UncmUgc2V0dGluZyBhIHJlYWQtb25seSBwcm9wZXJ0eVxyXG5cdFx0XHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRcdFx0aWYgKHdpdGhTeW1ib2xzKSB7XHJcblx0XHRcdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG9iajEsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmoyLCBrZXkpKTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHRvYmoxW2tleV0gPSBvYmoyW2tleV07XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH0gY2F0Y2goZSkge31cclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0pO1xyXG5cdHJldHVybiBvYmoxO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICcuLi9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9pc051bWVyaWMgZnJvbSAnLi4vanMvaXNOdW1lcmljLmpzJztcclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnLi4vanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IF9tZXJnZUNhbGxiYWNrIGZyb20gJy4vbWVyZ2VDYWxsYmFjay5qcyc7XHJcblxyXG4vKipcclxuICogQ29waWVzIGFuIG9iamVjdC5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0b2JqXHJcbiAqIEBwYXJhbSBhcnJheVx0XHQgXHRmaWx0ZXJcclxuICpcclxuICogQHJldHVybiBvYmplY3RcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iaiwgZmlsdGVyID0gW10sIHdpdGhTeW1ib2xzID0gdHJ1ZSkge1xyXG5cdHZhciBkZXB0aCA9IDA7XHJcblx0aWYgKF9pc051bWVyaWMoYXJndW1lbnRzWzBdKSAmJiBfaXNUeXBlT2JqZWN0KGFyZ3VtZW50c1sxXSkpIHtcclxuXHRcdGRlcHRoID0gYXJndW1lbnRzWzBdO1xyXG5cdFx0b2JqID0gYXJndW1lbnRzWzFdO1xyXG5cdFx0ZmlsdGVyID0gYXJndW1lbnRzWzJdIHx8IFtdO1xyXG5cdH1cclxuXHRyZXR1cm4gX21lcmdlQ2FsbGJhY2soW2RlcHRoLCB7fSwgb2JqXSwgKGtleSwgb2JqMSwgb2JqMikgPT4ge1xyXG5cdFx0cmV0dXJuIF9pc0Z1bmN0aW9uKGZpbHRlcikgPyBmaWx0ZXIoa2V5KSBcclxuXHRcdFx0OiAoX2lzQXJyYXkoZmlsdGVyKSAmJiBmaWx0ZXIubGVuZ3RoID8gZmlsdGVyLmluZGV4T2Yoa2V5KSA+IC0xIDogdHJ1ZSk7XHJcblx0fSwgZmFsc2UvKmRlZXBQcm9wcyovLCBmYWxzZS8qaXNSZXBsYWNlKi8sIHdpdGhTeW1ib2xzKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9tZXJnZUNhbGxiYWNrIGZyb20gJy4vbWVyZ2VDYWxsYmFjay5qcyc7XHJcblxyXG4vKipcclxuICAqIE1lcmdlcyB2YWx1ZXMgZnJvbSBzdWJzZXF1ZW50IGFycmF5cy9vYmplY3RzIGZpcnN0IGFycmF5L29iamVjdDtcclxuICAqIG9wdGlvbmFsbHkgcmVjdXJzaXZlXHJcbiAgKlxyXG4gICogQHBhcmFtIGFycmF5IC4uLm9ianNcclxuICAqXHJcbiAgKiBAcmV0dXJuIHZvaWRcclxuICAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiguLi5vYmpzKSB7XHJcblx0cmV0dXJuIF9tZXJnZUNhbGxiYWNrKG9ianMsIChrLCBvYmoxLCBvYmoyKSA9PiB7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9LCBmYWxzZS8qZGVlcFByb3BzKi8sIGZhbHNlLyppc1JlcGxhY2UqLywgZmFsc2UvKndpdGhTeW1ib2xzKi8pO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2V2ZW4gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZXZlbi5qcyc7XHJcbmltcG9ydCBFdmVudCBmcm9tICcuL0V2ZW50LmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIE11dGF0aW9uRXZlbnQgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBFdmVudCB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogSW5pdGlhbGl6ZXMgdGhlIGluc3RhbmNlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGFycmF5fG9iamVjdFx0XHR0YXJnZXRcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdFx0ZGV0YWlsc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IodGFyZ2V0LCBkZXRhaWxzID0ge30pIHtcclxuXHRcdGlmIChkZXRhaWxzLmRhdGEpIHtcclxuXHRcdFx0ZGV0YWlscy5maWVsZHMgPSBPYmplY3Qua2V5cyhkZXRhaWxzLmRhdGEpO1xyXG5cdFx0fVxyXG5cdFx0c3VwZXIodGFyZ2V0LCBkZXRhaWxzKTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRpZiAodGhpcy5zcmNFdnQpIHtcclxuXHRcdFx0dGhpcy5kYXRhRXZlbiA9IHRoaXMuc3JjRXZ0LmRhdGFFdmVuO1xyXG5cdFx0XHR0aGlzLm9yaWdpbmF0aW5nVGFyZ2V0ID0gdGhpcy5zcmNFdnQub3JpZ2luYXRpbmdUYXJnZXQ7XHJcblx0XHRcdHRoaXMub3JpZ2luYXRpbmdUeXBlID0gdGhpcy5zcmNFdnQub3JpZ2luYXRpbmdUeXBlO1xyXG5cdFx0XHR0aGlzLm9yaWdpbmF0aW5nRmllbGRzID0gW107XHJcblx0XHRcdHRoaXMub3JpZ2luYXRpbmdEYXRhID0ge307XHJcblx0XHRcdHRoaXMuX29yaWdpbmF0aW5nRGF0YSA9IHt9O1xyXG5cdFx0XHR2YXIgZmllbGQgPSB0aGlzLmZpZWxkc1swXTtcclxuXHRcdFx0T2JqZWN0LmtleXModGhpcy5zcmNFdnQub3JpZ2luYXRpbmdEYXRhKS5mb3JFYWNoKHBhdGggPT4ge1xyXG5cdFx0XHRcdHZhciBfcGF0aCA9IGZpZWxkICsgJy4nICsgcGF0aDtcclxuXHRcdFx0XHR0aGlzLm9yaWdpbmF0aW5nRmllbGRzLnB1c2goX3BhdGgpO1xyXG5cdFx0XHRcdHRoaXMub3JpZ2luYXRpbmdEYXRhW19wYXRoXSA9IHRoaXMuc3JjRXZ0Lm9yaWdpbmF0aW5nRGF0YVtwYXRoXTtcclxuXHRcdFx0XHR0aGlzLl9vcmlnaW5hdGluZ0RhdGFbX3BhdGhdID0gdGhpcy5zcmNFdnQuX29yaWdpbmF0aW5nRGF0YVtwYXRoXTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdHRoaXMub3JpZ2luYXRpbmdDcmVhdGVkID0gdGhpcy5zcmNFdnQub3JpZ2luYXRpbmdDcmVhdGVkO1xyXG5cdFx0XHR0aGlzLm9yaWdpbmF0aW5nRGVsZXRlZCA9IHRoaXMuc3JjRXZ0Lm9yaWdpbmF0aW5nRGVsZXRlZDtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuZGF0YUV2ZW4gPSBfZXZlbih0aGlzLmRhdGEsIHRoaXMuX2RhdGEpO1xyXG5cdFx0XHR0aGlzLm9yaWdpbmF0aW5nVGFyZ2V0ID0gdGhpcy50YXJnZXQ7XHJcblx0XHRcdHRoaXMub3JpZ2luYXRpbmdUeXBlID0gdGhpcy50eXBlO1xyXG5cdFx0XHR0aGlzLm9yaWdpbmF0aW5nRmllbGRzID0gdGhpcy5maWVsZHM7XHJcblx0XHRcdHRoaXMub3JpZ2luYXRpbmdEYXRhID0gdGhpcy5kYXRhO1xyXG5cdFx0XHR0aGlzLl9vcmlnaW5hdGluZ0RhdGEgPSB0aGlzLl9kYXRhO1xyXG5cdFx0XHR0aGlzLm9yaWdpbmF0aW5nQ3JlYXRlZCA9IHRoaXMuY3JlYXRlZDtcclxuXHRcdFx0dGhpcy5vcmlnaW5hdGluZ0RlbGV0ZWQgPSB0aGlzLmRlbGV0ZWQ7XHJcblx0XHR9XHJcblx0fVxyXG59OyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfZXZlbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9ldmVuLmpzJztcclxuaW1wb3J0IF9hcnJGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Zyb20uanMnO1xyXG5pbXBvcnQgX2ludGVyc2VjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9pbnRlcnNlY3QuanMnO1xyXG5pbXBvcnQgX2NvbmNhdFVuaXF1ZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9jb25jYXRVbmlxdWUuanMnO1xyXG5pbXBvcnQgX2V4Y2x1ZGUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZXhjbHVkZS5qcyc7XHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1VuZGVmaW5lZC5qcyc7XHJcbmltcG9ydCBfaXNOdWxsIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNOdWxsLmpzJztcclxuaW1wb3J0IE11dGF0aW9uRXZlbnQgZnJvbSAnLi9NdXRhdGlvbkV2ZW50LmpzJztcclxuaW1wb3J0IEZpcmViYXNlIGZyb20gJy4vRmlyZWJhc2UuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgUmVhY3RpdmUgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT2JzZXJ2ZXJCYXNlIGV4dGVuZHMgRmlyZWJhc2Uge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEZpbmRzIHRoZSBPYnNlcnZlciBpbnN0YW5jZXNcclxuXHQgKiB3aXRoIHRoZSBnaXZlbiBxdWVyeSBwYXJhbWV0ZXJzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHRcdHF1ZXJ5XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGFycmF5XHJcblx0ICovXHJcblx0ZmluZEZpcmVhYmxlcyhxdWVyeSkge1xyXG5cdFx0cmV0dXJuIHN1cGVyLmZpbmRGaXJlYWJsZXMocXVlcnkpLmZpbHRlcihvYnNlcnZlciA9PiB7XHJcblx0XHRcdHJldHVybiBfaXNOdWxsKHF1ZXJ5LmZpZWxkcykgfHwgX2lzVW5kZWZpbmVkKHF1ZXJ5LmZpZWxkcykgfHwgX2V2ZW4oX2FyckZyb20ob2JzZXJ2ZXIuZmllbGRzKSwgX2FyckZyb20ocXVlcnkuZmllbGRzKSk7XHJcblx0XHR9KTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogRmlyZXMgYWxsIG9ic2VydmVycyB3aXRoIHRoZSBnaXZlbiBldnQgKGNoYW5nZSkuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gRXZlbnRcdFx0XHRcdGV2dFxyXG5cdCAqXHJcblx0ICogQHJldHVybiBFdmVudFxyXG5cdCAqL1xyXG5cdGZpcmUoZXZ0KSB7XHJcblx0XHRpZiAodGhpcy5jdXJyZW50bHlGaXJpbmdFdmVudHMuZmlsdGVyKGUgPT4gZS50eXBlID09PSBldnQudHlwZSAmJiBlLmZpZWxkcyA9PT0gZXZ0LmZpZWxkcykubGVuZ3RoKSB7XHJcblx0XHRcdHJldHVybiBldnQ7XHJcblx0XHR9XHJcblx0XHR0aGlzLmN1cnJlbnRseUZpcmluZ0V2ZW50cy5wdXNoKGV2dCk7XHJcblx0XHR0aGlzLmZpcmVhYmxlcy5mb3JFYWNoKG9ic2VydmVyID0+IHtcclxuXHRcdFx0aWYgKGV2dC5wcm9wYWdhdGlvblN0b3BwZWQgfHwgKG9ic2VydmVyLnBhcmFtcy50eXBlICYmIG9ic2VydmVyLnBhcmFtcy50eXBlICE9PSBldnQudHlwZSkpIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0b2JzZXJ2ZXIuZmlyZShldnQpO1xyXG5cdFx0fSk7XHJcblx0XHR0aGlzLmN1cnJlbnRseUZpcmluZ0V2ZW50cy5wb3AoKTtcclxuXHRcdHJldHVybiBldnQ7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIGNyZWF0ZUZvclRhcmdldChvYmplY3QpIHtcclxuXHRcdHJldHVybiBzdXBlci5jcmVhdGVGb3JUYXJnZXQob2JqZWN0LCAnb2JzZXJ2ZXJzJywgT2JzZXJ2ZXJCYXNlKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgZ2V0Rm9yVGFyZ2V0KG9iamVjdCkge1xyXG5cdFx0cmV0dXJuIHN1cGVyLmdldEZvclRhcmdldChvYmplY3QsICdvYnNlcnZlcnMnKTtcclxuXHR9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc051bGwgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bGwuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNVbmRlZmluZWQuanMnO1xyXG5pbXBvcnQgT2JzZXJ2ZXJCYXNlIGZyb20gJy4vaW50ZXJuYWwvT2JzZXJ2ZXJCYXNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZW1vdmVzIGFuIG9ic2VydmVyIGZyb20gYW4gb2JqZWN0J3MgZmlyZWJhc2UuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdFx0XHRcdG9iamVjdFxyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF5fGZ1bmN0aW9uXHRcdGZpZWxkc1xyXG4gKiBAcGFyYW0gZnVuY3Rpb25cdFx0XHRcdFx0b3JpZ2luYWxDYWxsYmFja1xyXG4gKiBAcGFyYW0gb2JqZWN0XHRcdFx0XHRcdHBhcmFtc1xyXG4gKlxyXG4gKiBAcmV0dXJuIHZvaWRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iamVjdCwgZmllbGRzLCBvcmlnaW5hbENhbGxiYWNrID0gbnVsbCwgcGFyYW1zID0ge30pIHtcclxuXHRpZiAoIW9iamVjdCB8fCAhX2lzVHlwZU9iamVjdChvYmplY3QpKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ09iamVjdCBtdXN0IGJlIG9mIHR5cGUgb2JqZWN0IScpO1xyXG5cdH1cclxuXHRpZiAoX2lzRnVuY3Rpb24oZmllbGRzKSB8fCBfaXNOdWxsKGZpZWxkcykgfHwgX2lzVW5kZWZpbmVkKGZpZWxkcykpIHtcclxuXHRcdHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gb3JpZ2luYWxDYWxsYmFjayA6IHt9O1xyXG5cdFx0b3JpZ2luYWxDYWxsYmFjayA9IGZpZWxkcztcclxuXHRcdGZpZWxkcyA9IG51bGw7XHJcblx0fVxyXG5cdHZhciBmaXJlYmFzZTtcclxuXHRpZiAoZmlyZWJhc2UgPSBPYnNlcnZlckJhc2UuZ2V0Rm9yVGFyZ2V0KG9iamVjdCkpIHtcclxuXHRcdGZpcmViYXNlLmZpbmRGaXJlYWJsZXMoe2hhbmRsZXI6b3JpZ2luYWxDYWxsYmFjaywgZmllbGRzLCBwYXJhbXN9KS5mb3JFYWNoKG9ic2VydmVyID0+IHtcclxuXHRcdFx0ZmlyZWJhc2UucmVtb3ZlRmlyZWFibGUob2JzZXJ2ZXIpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG59XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCB1bm9ic2VydmUgZnJvbSAnLi91bm9ic2VydmUuanMnO1xyXG5cclxuLyoqXHJcbiAqIFVuYnViYmxlIGhlbHBlclxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHR0YXJnZXRcclxuICogQHBhcmFtIHN0cmluZ1x0XHRmaWVsZFxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHRvYmplY3RcclxuICpcclxuICogQHJldHVybiB2b2lkXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0YXJnZXQsIGZpZWxkLCBvYmplY3QpIHtcclxuXHR1bm9ic2VydmUob2JqZWN0LCBudWxsLCB7dGFnczpbJyNlLWJ1YmJsaW5nJywgZmllbGQsIHRhcmdldF19KTtcclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHZhbCdzIHR5cGUuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiB0eXBlb2YgdmFsO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuLi9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJy4uL2pzL2lzVW5kZWZpbmVkLmpzJztcclxuaW1wb3J0IF9pc051bGwgZnJvbSAnLi4vanMvaXNOdWxsLmpzJztcclxuaW1wb3J0IF9hcnJGcm9tIGZyb20gJy4uL2Fyci9mcm9tLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXRyaWV2ZXMgdGhlIHZhbHVlIGF0IHRoZSBnaXZlbiBwYXRoLlxyXG4gKlxyXG4gKiBBIHJldHVybiB2YWx1ZSBvZiB1bmRlZmluZWQgaXMgYW1iaWd1b3VzLCBhbmQgY2FuIG1lYW4gZWl0aGVyIHRoYXQgdGhlXHJcbiAqIHBhdGggZG9lcyBub3QgZXhpc3QsIG9yIHRoYXQgdGhlIHBhdGggYWN0dWFsbHkgZXhpc3RzIGJ1dCB3aXRoIGEgdmFsdWUgb2YgdW5kZWZpbmVkLiBJZiBpdCBpcyByZXF1aXJlZCB0b1xyXG4gKiBrbm93IHdoZXRoZXIgdGhlIHBhdGggYWN0dWFsbHkgZXhpc3RzLCBwYXNzIGFuIG9iamVjdCBhcyBhIHRoaXJkIGFyZ3VtZW50LlxyXG4gKiBUaGlzIG9iamVjdCB3aWxsIGhhdmUgYW4gXCJleGlzdHNcIiBrZXkgc2V0IHRvIHRydWUvZmFsc2UuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3QgXHRcdFx0XHRjdHh0XHJcbiAqIEBwYXJhbSBhcnJheSBcdFx0XHRcdHBhdGhcclxuICogQHBhcmFtIG9iamVjdCBcdFx0XHRcdHRyYXBcclxuICogQHBhcmFtIG9iamVjdCBcdFx0XHRcdHJlY2lldmVyXHJcbiAqXHJcbiAqIEByZXR1cm4gbWl4ZWRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGN0eHQsIHBhdGgsIHRyYXAgPSB7fSwgcmVjaWV2ZXIgPSB7fSkge1xyXG5cdHBhdGggPSBfYXJyRnJvbShwYXRoKS5zbGljZSgpO1xyXG5cdHZhciBfY3R4dCA9IGN0eHQ7XHJcblx0d2hpbGUoIV9pc1VuZGVmaW5lZChfY3R4dCkgJiYgIV9pc051bGwoX2N0eHQpICYmIHBhdGgubGVuZ3RoKSB7XHJcblx0XHR2YXIgX2tleSA9IHBhdGguc2hpZnQoKTtcclxuXHRcdGlmICghKHRyYXAuZ2V0ID8gdHJhcC5nZXQoX2N0eHQsIF9rZXkpIDogKF9pc1R5cGVPYmplY3QoX2N0eHQpID8gX2tleSBpbiBfY3R4dCA6IF9jdHh0W19rZXldKSkpIHtcclxuXHRcdFx0cmVjaWV2ZXIuZXhpc3RzID0gZmFsc2U7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdF9jdHh0ID0gdHJhcC5nZXQgPyB0cmFwLmdldChfY3R4dCwgX2tleSkgOiBfY3R4dFtfa2V5XTtcclxuXHR9XHJcblx0cmVjaWV2ZXIuZXhpc3RzID0gdHJ1ZTtcclxuXHRyZXR1cm4gX2N0eHQ7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfY3Jvc3NKb2luIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Nyb3NzSm9pbi5qcyc7XHJcbmltcG9ydCBfcHVzaFVuaXF1ZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9wdXNoVW5pcXVlLmpzJztcclxuaW1wb3J0IF9hcnJGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Zyb20uanMnO1xyXG5pbXBvcnQgX3N0ckFmdGVyIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL2FmdGVyLmpzJztcclxuaW1wb3J0IF9pc1N0cmluZyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzU3RyaW5nLmpzJztcclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfY29tbW9uc0dldCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9nZXQuanMnO1xyXG5pbXBvcnQgRmlyZWFibGUgZnJvbSAnLi9GaXJlYWJsZS5qcyc7XHJcbmltcG9ydCBNdXRhdGlvbkV2ZW50IGZyb20gJy4vTXV0YXRpb25FdmVudC5qcyc7XHJcbmltcG9ydCByZWZsZXhHZXQgZnJvbSAnLi4vZ2V0LmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIE9ic2VydmVyIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIGV4dGVuZHMgRmlyZWFibGUge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEluaXRpYWxpemVzIHRoZSBpbnN0YW5jZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBmdW5jdGlvblx0XHRoYW5kbGVyXHJcblx0ICogQHBhcmFtIHN0cmluZ3xhcnJheVx0ZmllbGRzXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHRwYXJhbXNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGhhbmRsZXIsIGZpZWxkcyA9IG51bGwsIHBhcmFtcyA9IHt9KSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5oYW5kbGVyID0gaGFuZGxlcjtcclxuXHRcdHRoaXMuZmllbGRzID0gZmllbGRzO1xyXG5cdFx0dGhpcy5wYXJhbXMgPSBwYXJhbXM7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0dGhpcy5maWVsZHNBcnJheSA9IF9hcnJGcm9tKHRoaXMuZmllbGRzKTtcclxuXHRcdHRoaXMuaXNEeW5hbWljRmllbGQgPSB0aGlzLmZpZWxkc0FycmF5LmZpbHRlcihcclxuXHRcdFx0ZmllbGQgPT4gZmllbGQuaW5kZXhPZignLi4nKSA+IC0xIHx8IGZpZWxkLnN0YXJ0c1dpdGgoJy4nKSB8fCBmaWVsZC5lbmRzV2l0aCgnLicpXHJcblx0XHQpLmxlbmd0aDtcclxuXHRcdGlmICh0aGlzLmlzRHluYW1pY0ZpZWxkICYmIHRoaXMuZmllbGRzQXJyYXkubGVuZ3RoID4gMSkge1xyXG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ09ubHkgb25lIFwiRHluYW1pYyBGaWVsZFwiIG11c3QgYmUgb2JzZXJ2ZWQgYXQgYSB0aW1lISBcIicgKyB0aGlzLmZpZWxkc0FycmF5LmpvaW4oJywgJykgKyAnXCIgaGF2ZSBiZWVuIGJvdW5kIHRvZ2V0aGVyLicpO1xyXG5cdFx0fVxyXG5cclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQ2FsbHMgdGhlIG9ic2VydmVyJ3MgaGFuZGxlciBmdW5jdGlvblxyXG5cdCAqIG9uIG1hdGNoaW5nIHdpdGggdGhlIGV2ZW50J3MgZmllbGRzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIE11dGF0aW9uRXZlbnRcdFx0XHQgXHRldnRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGZpcmUoZXZ0KSB7XHJcblx0XHRpZiAodGhpcy5kaXNjb25uZWN0ZWQgfHwgKHRoaXMucGFyYW1zLnR5cGUgJiYgdGhpcy5wYXJhbXMudHlwZSAhPT0gZXZ0LnR5cGUpKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdGlmIChldnQuZGF0YUV2ZW4gJiYgdGhpcy5wYXJhbXMuZGlmZiAhPT0gZmFsc2UpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy5maXJlQ2FsbGJhY2soZXZ0LCBmaWVsZHMgPT4ge1xyXG5cdFx0XHRpZiAoZmllbGRzKSB7XHJcblx0XHRcdFx0Ly8gQ2FsbCBsaXN0ZW5lci4uLlxyXG5cdFx0XHRcdHZhciBkYXRhID0gW107XHJcblx0XHRcdFx0dmFyIF9kYXRhID0gW107XHJcblx0XHRcdFx0ZmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xyXG5cdFx0XHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0XHRcdC8vIFRoZSBORVcvT0xEIHZhbHVlcyBvZiB0aGUgY2hhbmdlIG9mIGZpZWxkIHdoaWNoIGNvdWxkIGJlIGEgcGF0aFxyXG5cdFx0XHRcdFx0dmFyIGZpZWxkRGF0YSA9IGV2dC5vcmlnaW5hdGluZ0ZpZWxkcy5yZWR1Y2UoKGZpZWxkRGF0YSwgb3JpZ2luYXRpbmdGaWVsZCkgPT4ge1xyXG5cdFx0XHRcdFx0XHQvLyBTbyBmaWVsZCBpcyB0aGUgZXhhY3Qgb3JpZ2luYXRpbmdGaWVsZCBwYXRoP1xyXG5cdFx0XHRcdFx0XHR2YXIgdmFsdWUgPSBldnQub3JpZ2luYXRpbmdEYXRhW29yaWdpbmF0aW5nRmllbGRdO1xyXG5cdFx0XHRcdFx0XHR2YXIgX3ZhbHVlID0gZXZ0Ll9vcmlnaW5hdGluZ0RhdGFbb3JpZ2luYXRpbmdGaWVsZF07XHJcblx0XHRcdFx0XHRcdGlmICghZmllbGREYXRhICYmIGZpZWxkID09PSBvcmlnaW5hdGluZ0ZpZWxkKSB7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFt2YWx1ZSwgX3ZhbHVlXTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHQvLyBGaWVsZCBtYXRjaGVzLCBidXQgaXMgZGVlcGVyIHRoYW4sIG9yaWdpbmF0aW5nRmllbGQgcGF0aD9cclxuXHRcdFx0XHRcdFx0aWYgKCFmaWVsZERhdGEgJiYgKGZpZWxkICsgJy4nKS5zdGFydHNXaXRoKChvcmlnaW5hdGluZ0ZpZWxkICsgJy4nKSkpIHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgZmllbGRRdWVyeSA9IF9zdHJBZnRlcihmaWVsZCwgb3JpZ2luYXRpbmdGaWVsZCArICcuJyk7XHJcblx0XHRcdFx0XHRcdFx0cmV0dXJuIFtcclxuXHRcdFx0XHRcdFx0XHRcdC8vIE5vdGljZSB3ZSdyZSB1c2luZyBfY29tbW9uc0dldCB0byBkaWcgdGhlIHBhdGhcclxuXHRcdFx0XHRcdFx0XHRcdC8vIGJ1dCB3aXRoIHJlZmxleEdldCBhcyB0cmFwIGZvciBcInJlYWN0aXZlIGdldHRpbmdcIlxyXG5cdFx0XHRcdFx0XHRcdFx0X2NvbW1vbnNHZXQodmFsdWUsIGZpZWxkUXVlcnkuc3BsaXQoJy4nKSwge2dldDpyZWZsZXhHZXR9KSxcclxuXHRcdFx0XHRcdFx0XHRcdF9jb21tb25zR2V0KF92YWx1ZSwgZmllbGRRdWVyeS5zcGxpdCgnLicpLCB7Z2V0OnJlZmxleEdldH0pXHJcblx0XHRcdFx0XHRcdFx0XTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZmllbGREYXRhO1xyXG5cdFx0XHRcdFx0fSwgbnVsbCk7XHJcblx0XHRcdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHRcdFx0aWYgKGZpZWxkRGF0YSkge1xyXG5cdFx0XHRcdFx0XHRkYXRhLnB1c2goZmllbGREYXRhLnNoaWZ0KCkpO1xyXG5cdFx0XHRcdFx0XHRfZGF0YS5wdXNoKGZpZWxkRGF0YS5zaGlmdCgpKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHZhciBjdXJyZW50VmFsdWUgPSBfY29tbW9uc0dldChldnQudGFyZ2V0LCBfaXNTdHJpbmcoZmllbGQpID8gZmllbGQuc3BsaXQoJy4nKSA6IGZpZWxkLCB7Z2V0OnJlZmxleEdldH0pO1xyXG5cdFx0XHRcdFx0XHRkYXRhLnB1c2goY3VycmVudFZhbHVlKTtcclxuXHRcdFx0XHRcdFx0X2RhdGEucHVzaChjdXJyZW50VmFsdWUpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHJldHVybiBfaXNBcnJheSh0aGlzLmZpZWxkcykgLy8gTk9URTp3ZSdyZSBhc2tpbmcgdGhlIG9yaWdpbmFsIGZvcm1hdCFcclxuXHRcdFx0XHRcdD8gZXZ0LnJlc3BvbnNlKHRoaXMuaGFuZGxlcihkYXRhLCBfZGF0YSwgZXZ0KSlcclxuXHRcdFx0XHRcdDogZXZ0LnJlc3BvbnNlKHRoaXMuaGFuZGxlcihkYXRhWzBdLCBfZGF0YVswXSwgZXZ0KSk7XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIGRhdGEgPSB7fTtcclxuXHRcdFx0dmFyIF9kYXRhID0ge307XHJcblx0XHRcdGV2dC5maWVsZHMuZm9yRWFjaChmaWVsZCA9PiB7XHJcblx0XHRcdFx0Ly8gUmVtZWJlciB0aGF0IGV2dC5vcmlnaW5hdGluZ0RhdGEgbWlnaHQgYWN0dWFsbHkgYmUgYnViYmxpbmdcclxuXHRcdFx0XHQvLyBpbiB3aGljaCBjYXNlIHdlIGRvbid0IGV4cGVjdCB0byBzZWUgZXZlbnROYW1lIGtleS5cclxuXHRcdFx0XHR2YXIgY3VycmVudFZhbHVlID0gZmllbGQgaW4gZXZ0LmRhdGEgXHJcblx0XHRcdFx0XHQ/IGV2dC5kYXRhW2ZpZWxkXSBcclxuXHRcdFx0XHRcdDogcmVmbGV4R2V0KGV2dC50YXJnZXQsIGZpZWxkKTtcclxuXHRcdFx0XHR2YXIgcHJldlZhbHVlID0gZmllbGQgaW4gZXZ0Ll9kYXRhXHJcblx0XHRcdFx0XHQ/IGV2dC5fZGF0YVtmaWVsZF0gXHJcblx0XHRcdFx0XHQ6IGN1cnJlbnRWYWx1ZTtcclxuXHRcdFx0XHRkYXRhW2ZpZWxkXSA9IGN1cnJlbnRWYWx1ZTtcclxuXHRcdFx0XHRfZGF0YVtmaWVsZF0gPSBwcmV2VmFsdWU7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHQvLyBDYWxsIGxpc3RlbmVyLi4uXHJcblx0XHRcdHJldHVybiBldnQucmVzcG9uc2UodGhpcy5oYW5kbGVyKGRhdGEsIF9kYXRhLCBldnQpKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBWYWxpZGF0ZXMgYSBwcm9wb3NlZCBmaXJlIG9wZXJhdGlvbi5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBNdXRhdGlvbkV2ZW50XHRcdCBcdGV2dFxyXG5cdCAqXHJcblx0ICogQHJldHVybiBib29sXHJcblx0ICovXHJcblx0ZmlyZUNhbGxiYWNrKGV2dCwgY2FsbGJhY2spIHtcclxuXHRcdGlmICh0aGlzLmZpZWxkc0FycmF5Lmxlbmd0aCkge1xyXG5cdFx0XHR2YXIgZHluYW1pY0ZpZWxkT3V0Y29tZXMgPSBbXTtcclxuXHRcdFx0dmFyIG1hdGNoZXMgPSB0aGlzLmZpZWxkc0FycmF5LmZpbHRlcigob2JzZXJ2ZWRGaWVsZCwgaSkgPT4ge1xyXG5cdFx0XHRcdG9ic2VydmVkRmllbGQgPSBfaXNTdHJpbmcob2JzZXJ2ZWRGaWVsZCkgXHJcblx0XHRcdFx0XHQ/IG9ic2VydmVkRmllbGQucmVwbGFjZSgvYC9nLCAnJylcclxuXHRcdFx0XHRcdDogb2JzZXJ2ZWRGaWVsZDtcclxuXHRcdFx0XHRkeW5hbWljRmllbGRPdXRjb21lc1tpXSA9IFtdO1xyXG5cdFx0XHRcdC8vIG9uZSBvYnNlcnZlZEZpZWxkIGNhbiB0dXJuIG91dCB0byBiZSB0d28gaWYgZHluYW1pY1xyXG5cdFx0XHRcdC8vIGFuZCBldnQub3JpZ2luYXRpbmdGaWVsZHMgaXMgbXVsdGlwbGVcclxuXHRcdFx0XHRyZXR1cm4gZXZ0Lm9yaWdpbmF0aW5nRmllbGRzLmZpbHRlcihpbnB1dE9yaWdpbmF0aW5nRmllbGQgPT4ge1xyXG5cdFx0XHRcdFx0dmFyIGlucHV0T3JpZ2luYXRpbmdGaWVsZFNwbGl0ID0gaW5wdXRPcmlnaW5hdGluZ0ZpZWxkLnNwbGl0KCcuJyk7XHJcblx0XHRcdFx0XHR2YXIgb2JzZXJ2ZWREeW5hbWljRmllbGRPdXRjb21lID0gdGhpcy5pc0R5bmFtaWNGaWVsZCBcclxuXHRcdFx0XHRcdFx0PyBvYnNlcnZlZEZpZWxkLnNwbGl0KCcuJykubWFwKChzZWcsIGspID0+IHNlZyB8fCBpbnB1dE9yaWdpbmF0aW5nRmllbGRTcGxpdFtrXSB8fCAnJykuam9pbignLicpXHJcblx0XHRcdFx0XHRcdDogb2JzZXJ2ZWRGaWVsZDtcclxuXHRcdFx0XHRcdF9wdXNoVW5pcXVlKGR5bmFtaWNGaWVsZE91dGNvbWVzW2ldLCBvYnNlcnZlZER5bmFtaWNGaWVsZE91dGNvbWUpO1xyXG5cdFx0XHRcdFx0cmV0dXJuIChvYnNlcnZlZER5bmFtaWNGaWVsZE91dGNvbWUgPT09IGlucHV0T3JpZ2luYXRpbmdGaWVsZCAmJiAhZXZ0LnNyY0V2dFxyXG5cdFx0XHRcdFx0XHR8fCAodGhpcy5wYXJhbXMub2JzZXJ2ZVVwICE9PSBmYWxzZSAmJiAob2JzZXJ2ZWREeW5hbWljRmllbGRPdXRjb21lICsgJy4nKS5zdGFydHNXaXRoKGlucHV0T3JpZ2luYXRpbmdGaWVsZCArICcuJykpXHJcblx0XHRcdFx0XHRcdHx8ICh0aGlzLnBhcmFtcy5vYnNlcnZlRG93biAmJiAoaW5wdXRPcmlnaW5hdGluZ0ZpZWxkICsgJy4nKS5zdGFydHNXaXRoKG9ic2VydmVkRHluYW1pY0ZpZWxkT3V0Y29tZSArICcuJykpXHJcblx0XHRcdFx0XHQpICYmICghdGhpcy5pc0R5bmFtaWNGaWVsZCB8fCAhb2JzZXJ2ZWREeW5hbWljRmllbGRPdXRjb21lLnNwbGl0KCcuJykuZmlsdGVyKHNlZyA9PiAhc2VnKS5sZW5ndGgpO1xyXG5cdFx0XHRcdH0pLmxlbmd0aDtcclxuXHRcdFx0fSkubGVuZ3RoO1xyXG5cdFx0XHRpZiAobWF0Y2hlcykge1xyXG5cdFx0XHRcdF9jcm9zc0pvaW4oZHluYW1pY0ZpZWxkT3V0Y29tZXMpLmZvckVhY2goY2FsbGJhY2spO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2UgaWYgKCFldnQuc3JjRXZ0IHx8IHRoaXMucGFyYW1zLm9ic2VydmVEb3duKSB7XHJcblx0XHRcdGNhbGxiYWNrKCk7XHJcblx0XHR9XHJcblx0fVxyXG59OyIsIlxyXG4vKipcclxuICogUmV0dXJuIHRoZSByZW1haW5kZXIgb2YgYSBzdHJpbmcgYWZ0ZXIgYSBnaXZlbiB2YWx1ZS5cclxuICpcclxuICogQHBhcmFtICBzdHJpbmcgIHN1YmplY3RcclxuICogQHBhcmFtICBzdHJpbmcgIHNlYXJjaFxyXG4gKiBAcGFyYW0gIGJvb2xcdCAgIGFmdGVyTGFzdFxyXG4gKlxyXG4gKiBAcmV0dXJuIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3ViamVjdCwgc2VhcmNoLCBhZnRlckxhc3QgPSBmYWxzZSkge1xyXG5cdGlmIChzZWFyY2ggPT0gJycpIHtcclxuXHRcdHJldHVybiBzdWJqZWN0O1xyXG5cdH1cclxuXHR2YXIgcG9zID0gYWZ0ZXJMYXN0ID8gc3ViamVjdC5sYXN0SW5kZXhPZihzZWFyY2gpIDogc3ViamVjdC5pbmRleE9mKHNlYXJjaCk7XHJcblx0aWYgKHBvcyA9PT0gLTEpIHtcclxuXHRcdHJldHVybiAnJztcclxuXHR9XHJcblx0cmV0dXJuIHN1YmplY3Quc3Vic3RyKHBvcyArIHNlYXJjaC5sZW5ndGgpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnLi9mcm9tLmpzJztcclxuXHJcbi8qKlxyXG4gKiBBY2NlcHRzIGEgbGlzdCBvZiBjb2x1bW4gYW5kIGpvaW5zIHRoZW0gdG8gYSB0YWJsZS5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqXHJcbiAqIEByZXR1cm4gbnVtYmVyXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIpIHtcclxuXHRyZXR1cm4gYXJyLnJlZHVjZSgoY3VyclRhYmxlLCBjb2x1bW4pID0+IHtcclxuXHRcdHZhciBuZXdUYWJsZSA9IFtdO1xyXG5cdFx0Y3VyclRhYmxlLmZvckVhY2gocm93ID0+IHtcclxuXHRcdFx0X2FyckZyb20oY29sdW1uKS5mb3JFYWNoKGNvbHVtbiA9PiB7XHJcblx0XHRcdFx0dmFyIF9yb3cgPSByb3cuc2xpY2UoKTtcclxuXHRcdFx0XHRfcm93LnB1c2goY29sdW1uKTtcclxuXHRcdFx0XHRuZXdUYWJsZS5wdXNoKF9yb3cpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIG5ld1RhYmxlO1xyXG5cdH0sIFtbXV0pO1xyXG59OyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfZ2V0VHlwZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2dldFR5cGUuanMnO1xyXG5pbXBvcnQgT2JzZXJ2ZXJCYXNlIGZyb20gJy4vaW50ZXJuYWwvT2JzZXJ2ZXJCYXNlLmpzJztcclxuaW1wb3J0IE9ic2VydmVyIGZyb20gJy4vaW50ZXJuYWwvT2JzZXJ2ZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIEFkZHMgYW4gb2JzZXJ2ZXIgdG8gYW4gb2JqZWN0J3MgZmlyZWJhc2UuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdFx0XHRcdG9iamVjdFxyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF5fGZ1bmN0aW9uXHRcdGZpZWxkc1xyXG4gKiBAcGFyYW0gZnVuY3Rpb25cdFx0XHRcdFx0Y2FsbGJhY2tcclxuICogQHBhcmFtIG9iamVjdFx0XHRcdFx0XHRwYXJhbXNcclxuICpcclxuICogQHJldHVybiBPYnNlcnZlclxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0LCBmaWVsZHMsIGNhbGxiYWNrID0gbnVsbCwgcGFyYW1zID0ge30pIHtcclxuXHRpZiAoIW9iamVjdCB8fCAhX2lzVHlwZU9iamVjdChvYmplY3QpKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ09iamVjdCBtdXN0IGJlIG9mIHR5cGUgb2JqZWN0IScpO1xyXG5cdH1cclxuXHRpZiAoX2lzRnVuY3Rpb24oZmllbGRzKSkge1xyXG5cdFx0cGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBjYWxsYmFjayA6IHt9O1xyXG5cdFx0Y2FsbGJhY2sgPSBmaWVsZHM7XHJcblx0XHRmaWVsZHMgPSBudWxsO1xyXG5cdH1cclxuXHRpZiAoIV9pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdDYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb247IFwiJyArIF9nZXRUeXBlKGNhbGxiYWNrKSArICdcIiBnaXZlbiEnKTtcclxuXHR9XHJcblx0dmFyIGZpcmViYXNlO1xyXG5cdGlmICghKGZpcmViYXNlID0gT2JzZXJ2ZXJCYXNlLmdldEZvclRhcmdldChvYmplY3QpKSkge1xyXG5cdFx0ZmlyZWJhc2UgPSBPYnNlcnZlckJhc2UuY3JlYXRlRm9yVGFyZ2V0KG9iamVjdCk7XHJcblx0fVxyXG5cdHJldHVybiBmaXJlYmFzZS5hZGRGaXJlYWJsZShuZXcgT2JzZXJ2ZXIoY2FsbGJhY2ssIGZpZWxkcywgcGFyYW1zKSk7XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9vYmpGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2Zyb20uanMnO1xyXG5pbXBvcnQgTXV0YXRpb25FdmVudCBmcm9tICcuL2ludGVybmFsL011dGF0aW9uRXZlbnQuanMnO1xyXG5pbXBvcnQgT2JzZXJ2ZXJCYXNlIGZyb20gJy4vaW50ZXJuYWwvT2JzZXJ2ZXJCYXNlLmpzJztcclxuaW1wb3J0IG9ic2VydmUgZnJvbSAnLi9vYnNlcnZlLmpzJztcclxuXHJcbi8qKlxyXG4gKiBCdWJibGUgaGVscGVyXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdHRhcmdldFxyXG4gKiBAcGFyYW0gc3RyaW5nXHRcdGZpZWxkXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdG9iamVjdFxyXG4gKlxyXG4gKiBAcmV0dXJuIHZvaWRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldCwgZmllbGQsIG9iamVjdCkge1xyXG5cdHZhciBmaXJlYmFzZTtcclxuXHRvYnNlcnZlKG9iamVjdCwgKGVudHJpZXMsIF9lbnRyaWVzLCBlKSA9PiB7XHJcblx0XHRpZiAoZmlyZWJhc2UgPSBPYnNlcnZlckJhc2UuZ2V0Rm9yVGFyZ2V0KHRhcmdldCkpIHtcclxuXHRcdFx0dmFyIGJhc2UgPSBfb2JqRnJvbShmaWVsZCwgb2JqZWN0KTtcclxuXHRcdFx0cmV0dXJuIGZpcmViYXNlLmZpcmUobmV3IE11dGF0aW9uRXZlbnQodGFyZ2V0LCB7dHlwZTplLnR5cGUsIGJ1YmJsaW5nOnRydWUsIGRhdGE6YmFzZSwgX2RhdGE6YmFzZSwgc3JjRXZ0OmV9KSk7XHJcblx0XHR9XHJcblx0fSwge29ic2VydmVEb3duOnRydWUsIHRhZ3M6WycjZS1idWJibGluZycsIGZpZWxkLCB0YXJnZXRdfSk7XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9jb3B5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2NvcHkuanMnO1xyXG5pbXBvcnQgX21lcmdlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL21lcmdlLmpzJztcclxuaW1wb3J0IF91bmlxdWUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvdW5pcXVlLmpzJztcclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IE11dGF0aW9uRXZlbnQgZnJvbSAnLi9pbnRlcm5hbC9NdXRhdGlvbkV2ZW50LmpzJztcclxuaW1wb3J0IE9ic2VydmVyQmFzZSBmcm9tICcuL2ludGVybmFsL09ic2VydmVyQmFzZS5qcyc7XHJcbmltcG9ydCB1bmxpbmsgZnJvbSAnLi91bmxpbmsuanMnO1xyXG5pbXBvcnQgbGluayBmcm9tICcuL2xpbmsuanMnO1xyXG5cclxuLyoqXHJcbiAqIEV4ZWN1dGVzIGEgY2FsbGJhY2sgZnVuY3Rpb24gb24gYSB0YXJnZXQgaW4gXCJ0cmFuc2FjdGlvblwiIG1vZGUuXHJcbiAqIEZpcmVzIGFueSBvYnNlcnZlcnMgdGhhdCBtYXkgYmUgYm91bmQgdG8gdGFyZ2V0IG9uIHJlY29yZGVkIGNoYW5nZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheVx0XHRcdHRhcmdldHNcclxuICogQHBhcmFtIGZ1bmN0aW9uXHRcdGNhbGxiYWNrXHJcbiAqIEBwYXJhbSBhcnJheVx0XHRcdGtleXNcclxuICogQHBhcmFtIGJvb2xcdFx0XHRyZXR1cm5FdmVudFxyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5fEV2ZW50XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0YXJnZXRzLCBjYWxsYmFjaywga2V5cyA9IFtdLCByZXR1cm5FdmVudCA9IGZhbHNlKSB7XHJcblx0dmFyIGNvbnRleHQgPSB0YXJnZXRzLm1hcCgodGFyZ2V0LCBpKSA9PiB7XHJcblx0XHRpZiAoIXRhcmdldCB8fCAhX2lzVHlwZU9iamVjdCh0YXJnZXQpKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignVGFyZ2V0IG11c3QgYmUgb2YgdHlwZSBvYmplY3QhJyk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4ge1xyXG5cdFx0XHR0YXJnZXQsXHJcblx0XHRcdHRhcmdldENvcHk6IF9jb3B5KHRhcmdldCwga2V5cyksXHJcblx0XHRcdHNldERhdGE6IHt9LFxyXG5cdFx0XHRfc2V0RGF0YToge30sXHJcblx0XHRcdGRlbERhdGE6IHt9LCBcclxuXHRcdFx0X2RlbERhdGE6IHt9LFxyXG5cdFx0XHRjcmVhdGVkOiBbXSxcclxuXHRcdFx0ZGVsZXRlZDogW10sXHJcblx0XHR9O1xyXG5cdH0pO1xyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdHZhciByZXN1bHQgPSBjYWxsYmFjayguLi50YXJnZXRzKTtcclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRjb250ZXh0Lm1hcChjbnR4dCA9PiB7XHJcblx0XHR2YXIgaW5pdGlhbEtleXMgPSBPYmplY3Qua2V5cyhjbnR4dC50YXJnZXRDb3B5KTtcclxuXHRcdHZhciBjdXJyZW50S2V5cyA9IE9iamVjdC5rZXlzKGNudHh0LnRhcmdldCk7XHJcblx0XHR2YXIgY2hhbmdlZEtleXMgPSBfdW5pcXVlKGluaXRpYWxLZXlzLmNvbmNhdChjdXJyZW50S2V5cykpLmZpbHRlcihrZXkgPT4ge1xyXG5cdFx0XHRpZiAoKGtleXMubGVuZ3RoICYmICFrZXlzLmluY2x1ZGVzKGtleSkpIFxyXG5cdFx0XHR8fCAoX2lzQXJyYXkoY250eHQudGFyZ2V0KSAmJiAoa2V5ID09PSAnbGVuZ3RoJyB8fCBrZXkgPT09ICc8IHIgZSBmIGwgZSB4ID4nKSkpIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCFjdXJyZW50S2V5cy5pbmNsdWRlcyhrZXkpKSB7XHJcblx0XHRcdFx0Y250eHQuX2RlbERhdGFba2V5XSA9IGNudHh0LnRhcmdldENvcHlba2V5XTtcclxuXHRcdFx0XHRjbnR4dC5kZWxEYXRhW2tleV0gPSB1bmRlZmluZWQ7XHJcblx0XHRcdFx0Y250eHQuZGVsZXRlZC5wdXNoKGtleSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Y250eHQuX3NldERhdGFba2V5XSA9IGNudHh0LnRhcmdldENvcHlba2V5XTtcclxuXHRcdFx0XHRjbnR4dC5zZXREYXRhW2tleV0gPSBjbnR4dC50YXJnZXRba2V5XTtcclxuXHRcdFx0XHRpZiAoIWluaXRpYWxLZXlzLmluY2x1ZGVzKGtleSkpIHtcclxuXHRcdFx0XHRcdGNudHh0LmNyZWF0ZWQucHVzaChrZXkpO1xyXG5cdFx0XHRcdH0gXHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKGNudHh0LnRhcmdldENvcHlba2V5XSAhPT0gY250eHQudGFyZ2V0W2tleV0pIHtcclxuXHRcdFx0XHQvLyBVbm9ic2VydmUgb3V0Z29pbmcgdmFsdWUgZm9yIGJ1YmJsaW5nXHJcblx0XHRcdFx0aWYgKGNudHh0LnRhcmdldENvcHlba2V5XSAmJiBfaXNUeXBlT2JqZWN0KGNudHh0LnRhcmdldENvcHlba2V5XSkpIHtcclxuXHRcdFx0XHRcdHVubGluayhjbnR4dC50YXJnZXQsIGtleSwgY250eHQudGFyZ2V0Q29weVtrZXldKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Ly8gT2JzZXJ2ZSBpbmNvbWluZyB2YWx1ZSBmb3IgYnViYmxpbmdcclxuXHRcdFx0XHRpZiAoY250eHQudGFyZ2V0W2tleV0gJiYgX2lzVHlwZU9iamVjdChjbnR4dC50YXJnZXRba2V5XSkpIHtcclxuXHRcdFx0XHRcdGxpbmsoY250eHQudGFyZ2V0LCBrZXksIGNudHh0LnRhcmdldFtrZXldKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdFx0ZGVsZXRlIGNudHh0LnNldERhdGFba2V5XTtcclxuXHRcdFx0ZGVsZXRlIGNudHh0Ll9zZXREYXRhW2tleV07XHJcblx0XHR9KTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0dmFyIGV2dCwgbXV0YXRpb25CYXNlO1xyXG5cdFx0aWYgKChtdXRhdGlvbkJhc2UgPSBPYnNlcnZlckJhc2UuZ2V0Rm9yVGFyZ2V0KGNudHh0LnRhcmdldCkpIHx8IHJldHVybkV2ZW50KSB7XHJcblx0XHRcdGV2dCA9IG5ldyBNdXRhdGlvbkV2ZW50KGNudHh0LnRhcmdldCwge1xyXG5cdFx0XHRcdHR5cGU6J3RyYW5zYWN0aW9uJywgXHJcblx0XHRcdFx0ZGF0YTpfbWVyZ2UoY250eHQuc2V0RGF0YSwgY250eHQuZGVsRGF0YSksXHJcblx0XHRcdFx0X2RhdGE6X21lcmdlKGNudHh0Ll9zZXREYXRhLCBjbnR4dC5fZGVsRGF0YSksXHJcblx0XHRcdFx0Y3JlYXRlZDpjbnR4dC5jcmVhdGVkLFxyXG5cdFx0XHRcdGRlbGV0ZWQ6Y250eHQuZGVsZXRlZFxyXG5cdFx0XHR9KTtcclxuXHRcdFx0aWYgKG11dGF0aW9uQmFzZSkge1xyXG5cdFx0XHRcdGlmIChPYmplY3Qua2V5cyhjbnR4dC5kZWxEYXRhKS5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdGV2dC5yZXNwb25zZShtdXRhdGlvbkJhc2UuZmlyZShcclxuXHRcdFx0XHRcdFx0bmV3IE11dGF0aW9uRXZlbnQoY250eHQudGFyZ2V0LCB7dHlwZTonZGVsJywgZGF0YTpjbnR4dC5kZWxEYXRhLCBfZGF0YTpjbnR4dC5fZGVsRGF0YSwgZGVsZXRlZDpjbnR4dC5kZWxldGVkfSlcclxuXHRcdFx0XHRcdCkpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRpZiAoT2JqZWN0LmtleXMoY250eHQuc2V0RGF0YSkubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHRldnQucmVzcG9uc2UobXV0YXRpb25CYXNlLmZpcmUoXHJcblx0XHRcdFx0XHRcdG5ldyBNdXRhdGlvbkV2ZW50KGNudHh0LnRhcmdldCwge3R5cGU6J3NldCcsIGRhdGE6Y250eHQuc2V0RGF0YSwgX2RhdGE6Y250eHQuX3NldERhdGEsIGNyZWF0ZWQ6Y250eHQuY3JlYXRlZH0pXHJcblx0XHRcdFx0XHQpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiByZXR1cm5FdmVudCA/IGV2dCA6IGNoYW5nZWRLZXlzO1xyXG5cdH0pO1xyXG5cdHJldHVybiByZXN1bHQ7XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgbGlzdCBvZiB1bmlxdWUgaXRlbXMuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheVx0IFx0XHRcdFx0YXJyXHJcbiAqXHQgKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIpIHtcclxuXHRjb25zdCBkaXN0aW5jdCA9ICh2YWx1ZSwgaW5kZXgsIHNlbGYpID0+IHtcclxuXHRcdHJldHVybiBzZWxmLmluZGV4T2YodmFsdWUpID09PSBpbmRleDtcclxuXHR9O1xyXG5cdHJldHVybiBhcnIuZmlsdGVyKGRpc3RpbmN0KTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9vYmpGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2Zyb20uanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc051bWVyaWMgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bWVyaWMuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgUXVlcnlFdmVudCBmcm9tICcuL2ludGVybmFsL1F1ZXJ5RXZlbnQuanMnO1xyXG5pbXBvcnQgVHJhcEJhc2UgZnJvbSAnLi9pbnRlcm5hbC9UcmFwQmFzZS5qcyc7XHJcbmltcG9ydCB0cmFuc2FjdGlvbiBmcm9tICcuL3RyYW5zYWN0aW9uLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSdW5zIGEgXCJnZXRcIiBxdWVyeSBvcGVyYXRpb24gb24gYSB0YXJnZXQuXHJcbiAqIEZpcmVzIGFueSBzdWNoIHF1ZXJ5IG9ic2VydmVycyB0aGF0IG1heSBiZSBib3VuZCB0byB0YXJnZXQuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdHRhcmdldFxyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF5XHRrZXlzXHJcbiAqXHJcbiAqIEByZXR1cm4gbWl4ZWRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldCwga2V5cykge1xyXG5cdGlmICghdGFyZ2V0IHx8ICFfaXNUeXBlT2JqZWN0KHRhcmdldCkpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignVGFyZ2V0IG11c3QgYmUgb2YgdHlwZSBvYmplY3QhJyk7XHJcblx0fVxyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdC8vIEV4ZWN1dGUgYW55IFwiZ2V0XCIgdHJhcHMsIG90aGVyd2lzZSBcImdldFwiIHRoZSBkZWZhdWx0IHdheVxyXG5cdHZhciB2YWx1ZSwgdHJhcEJhc2UsIGRlZmF1bHRHZXQgPSBmdW5jdGlvbihfdmFsdWUpIHtcclxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gX3ZhbHVlIDogKF9pc0FycmF5KGtleXMpID8gX29iakZyb20oa2V5cywgdGFyZ2V0KSA6IHRhcmdldFtrZXlzXSk7XHJcblx0fTtcclxuXHRpZiAodHJhcEJhc2UgPSBUcmFwQmFzZS5nZXRGb3JUYXJnZXQodGFyZ2V0KSkge1xyXG5cdFx0dmFsdWUgPSB0cmFwQmFzZS5maXJlKG5ldyBRdWVyeUV2ZW50KHRhcmdldCwge3R5cGU6J2dldCcsIHF1ZXJ5OmtleXN9KSwgZGVmYXVsdEdldCk7XHJcblx0fSBlbHNlIHtcclxuXHRcdHZhbHVlID0gZGVmYXVsdEdldCgpO1xyXG5cdH1cclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHQvLyBFeGVjdXRlIGFycmF5IG1ldGhvZHMgaW4gXCJtdXRhdGlvblwiIG1vZGVcclxuXHRpZiAoX2lzQXJyYXkodGFyZ2V0KSAmJiAhX2lzTnVtZXJpYyhrZXlzKSAmJiBfaXNGdW5jdGlvbih2YWx1ZSkpIHtcclxuXHRcdHJldHVybiBmdW5jdGlvbiByZWZsZXhBcnJheU1ldGhvZFdyYXBwZXIoLi4uYXJncykge1xyXG5cdFx0XHRyZXR1cm4gdHJhbnNhY3Rpb24oW3RhcmdldF0sICgpID0+IHtcclxuXHRcdFx0XHRyZXR1cm4gdmFsdWUuYXBwbHkodGFyZ2V0LCBhcmdzKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9O1xyXG5cdH1cclxuXHRyZXR1cm4gdmFsdWU7XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiBBTEwgaXRlbXMgcGFzcyB0aGUgdGVzdC5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqIEBwYXJhbSBmdW5jdGlvbiBcdGNhbGxiYWNrXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyLCBjYWxsYmFjaykge1xyXG5cdHJldHVybiBhcnIucmVkdWNlKChwcmV2VGVzdCwgaXRtKSA9PiBwcmV2VGVzdCAmJiBjYWxsYmFjayhpdG0pLCB0cnVlKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgUXVlcnlFdmVudCBmcm9tICcuL2ludGVybmFsL1F1ZXJ5RXZlbnQuanMnO1xyXG5pbXBvcnQgVHJhcEJhc2UgZnJvbSAnLi9pbnRlcm5hbC9UcmFwQmFzZS5qcyc7XHJcblxyXG4vKipcclxuICogUnVucyBhbiBcImluXCIgcXVlcnkgb3BlcmF0aW9uIG9uIGEgdGFyZ2V0LlxyXG4gKiBGaXJlcyBhbnkgc3VjaCBxdWVyeSBvYnNlcnZlcnMgdGhhdCBtYXkgYmUgYm91bmQgdG8gdGFyZ2V0LlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHR0YXJnZXRcclxuICogQHBhcmFtIHN0cmluZ1x0XHRrZXlcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0YXJnZXQsIGtleSkge1xyXG5cdGlmICghdGFyZ2V0IHx8ICFfaXNUeXBlT2JqZWN0KHRhcmdldCkpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignVGFyZ2V0IG11c3QgYmUgb2YgdHlwZSBvYmplY3QhJyk7XHJcblx0fVxyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdC8vIEV4ZWN1dGUgYW55IFwiaGFzXCIgdHJhcHMsIG90aGVyd2lzZSBcInRlc3RcIiB0aGUgZGVmYXVsdCB3YXlcclxuXHR2YXIgdHJhcEJhc2UsIGRlZmF1bHRIYXMgPSBmdW5jdGlvbihfc3RhdGUpIHtcclxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gX3N0YXRlIDogKGtleSBpbiB0YXJnZXQpO1xyXG5cdH07XHJcblx0aWYgKHRyYXBCYXNlID0gVHJhcEJhc2UuZ2V0Rm9yVGFyZ2V0KHRhcmdldCkpIHtcclxuXHRcdHJldHVybiB0cmFwQmFzZS5maXJlKG5ldyBRdWVyeUV2ZW50KHRhcmdldCwge3R5cGU6J2hhcycsIHF1ZXJ5OmtleX0pLCBkZWZhdWx0SGFzKTtcclxuXHR9XHJcblx0cmV0dXJuIGRlZmF1bHRIYXMoKTtcclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCBfYWxsIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2FsbC5qcyc7XHJcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1N0cmluZy5qcyc7XHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzTnVtYmVyIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNOdW1iZXIuanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBNdXRhdGlvbkV2ZW50IGZyb20gJy4vaW50ZXJuYWwvTXV0YXRpb25FdmVudC5qcyc7XHJcbmltcG9ydCBRdWVyeUV2ZW50IGZyb20gJy4vaW50ZXJuYWwvUXVlcnlFdmVudC5qcyc7XHJcbmltcG9ydCBPYnNlcnZlckJhc2UgZnJvbSAnLi9pbnRlcm5hbC9PYnNlcnZlckJhc2UuanMnO1xyXG5pbXBvcnQgVHJhcEJhc2UgZnJvbSAnLi9pbnRlcm5hbC9UcmFwQmFzZS5qcyc7XHJcbmltcG9ydCB1bmxpbmsgZnJvbSAnLi91bmxpbmsuanMnO1xyXG5pbXBvcnQgbGluayBmcm9tICcuL2xpbmsuanMnO1xyXG5pbXBvcnQgcmVmbGV4SGFzIGZyb20gJy4vaGFzLmpzJztcclxuXHJcbi8qKlxyXG4gKiBFeGVjdXRlcyBhIFwiX3NldFByb3BcIiB0eXBlIG9mIG9wZXJhdGlvbiBvbiBhIHRhcmdldC5cclxuICogRmlyZXMgYW55IG9ic2VydmVycyBmb3IgdGhlIHNwZWNpZmljIHR5cGUgdGhhdCBtYXkgYmUgYm91bmQgdG8gdGFyZ2V0LlxyXG4gKlxyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdGRlZmluZVxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHR0YXJnZXRcclxuICogQHBhcmFtIHN0cmluZ3xhcnJheVx0a2V5c09yUGF5bG9hZFxyXG4gKiBAcGFyYW0gbWl4ZWRcdFx0XHR2YWx1ZVxyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdHJldHVybkV2ZW50XHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbHxFdmVudFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVmaW5lLCB0YXJnZXQsIGtleXNPclBheWxvYWQsIHZhbHVlID0gbnVsbCwgcmV0dXJuRXZlbnQgPSBmYWxzZSkge1xyXG5cdGlmICghdGFyZ2V0IHx8ICFfaXNUeXBlT2JqZWN0KHRhcmdldCkpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignVGFyZ2V0IG11c3QgYmUgb2YgdHlwZSBvYmplY3QhJyk7XHJcblx0fVxyXG5cdGlmIChfaXNPYmplY3Qoa2V5c09yUGF5bG9hZCkpIHtcclxuXHRcdHJldHVybkV2ZW50ID0gdmFsdWU7XHJcblx0fVxyXG5cdHZhciBrZXlzID0ga2V5c09yUGF5bG9hZCwgX2RhdGEgPSB7fSwgZGF0YSA9IHt9LCBjcmVhdGVkID0gW107XHJcblx0dmFyIGhhbmRsZVNldCA9IChrZXksIHZhbHVlLCByZWxhdGVkKSA9PiB7XHJcblx0XHRfZGF0YVtrZXldID0gdGFyZ2V0W2tleV07XHJcblx0XHRpZiAoIXJlZmxleEhhcyh0YXJnZXQsIGtleSkpIHtcclxuXHRcdFx0Y3JlYXRlZC5wdXNoKGtleSk7XHJcblx0XHR9XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdHZhciBkZXNjcmlwdG9yO1xyXG5cdFx0aWYgKGRlZmluZSkge1xyXG5cdFx0XHRkZXNjcmlwdG9yID0gdmFsdWUgfHwge307XHJcblx0XHRcdHZhbHVlID0gZGVzY3JpcHRvci52YWx1ZTtcclxuXHRcdH1cclxuXHRcdC8vIEV4ZWN1dGUgYW55IFwic2V0XCIgdHJhcHMsIG90aGVyd2lzZSBcInNldFwiIHRoZSBkZWZhdWx0IHdheVxyXG5cdFx0dmFyIHN1Y2Nlc3MsIHRyYXBCYXNlLCBkZWZhdWx0U2V0ID0gZnVuY3Rpb24oX3N1Y2Nlc3MpIHtcclxuXHRcdFx0aWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XHJcblx0XHRcdFx0aWYgKGRlc2NyaXB0b3IpIHtcclxuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZGVzY3JpcHRvcik7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHRhcmdldFtrZXldID0gdmFsdWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBfc3VjY2VzcztcclxuXHRcdH07XHJcblx0XHRpZiAodHJhcEJhc2UgPSBUcmFwQmFzZS5nZXRGb3JUYXJnZXQodGFyZ2V0KSkge1xyXG5cdFx0XHR2YXIgZGV0YWlscyA9IGRlc2NyaXB0b3IgXHJcblx0XHRcdFx0PyB7dHlwZTonZGVmJywgcXVlcnk6a2V5LCBkZXNjcmlwdG9yLCByZWxhdGVkfSBcclxuXHRcdFx0XHQ6IHt0eXBlOidzZXQnLCBxdWVyeTprZXksIHZhbHVlLCByZWxhdGVkfTtcclxuXHRcdFx0c3VjY2VzcyA9IHRyYXBCYXNlLmZpcmUobmV3IFF1ZXJ5RXZlbnQodGFyZ2V0LCBkZXRhaWxzKSwgZGVmYXVsdFNldCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRzdWNjZXNzID0gZGVmYXVsdFNldCgpO1xyXG5cdFx0fVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRpZiAoc3VjY2Vzcykge1xyXG5cdFx0XHRkYXRhW2tleV0gPSB2YWx1ZTtcclxuXHRcdFx0aWYgKGRhdGFba2V5XSAhPT0gX2RhdGFba2V5XSkge1xyXG5cdFx0XHRcdC8vIFVub2JzZXJ2ZSBvdXRnb2luZyB2YWx1ZSBmb3IgYnViYmxpbmdcclxuXHRcdFx0XHRpZiAoX2RhdGFba2V5XSAmJiBfaXNUeXBlT2JqZWN0KF9kYXRhW2tleV0pKSB7XHJcblx0XHRcdFx0XHR1bmxpbmsodGFyZ2V0LCBrZXksIF9kYXRhW2tleV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQvLyBPYnNlcnZlIGluY29taW5nIHZhbHVlIGZvciBidWJibGluZ1xyXG5cdFx0XHRcdGlmIChkYXRhW2tleV0gJiYgX2lzVHlwZU9iamVjdChkYXRhW2tleV0pKSB7XHJcblx0XHRcdFx0XHRsaW5rKHRhcmdldCwga2V5LCBkYXRhW2tleV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRkZWxldGUgZGF0YVtrZXldO1xyXG5cdFx0XHRcdGRlbGV0ZSBfZGF0YVtrZXldO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRkZWxldGUgX2RhdGFba2V5XTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBzdWNjZXNzO1xyXG5cdH07XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0dmFyIHN1Y2Nlc3NTdGF0ZXMgPSBbXTtcclxuXHRpZiAoX2lzQXJyYXkoa2V5cykgfHwgKChfaXNTdHJpbmcoa2V5cykgfHwgX2lzTnVtYmVyKGtleXMpKSAmJiAoa2V5cyA9IF9hcnJGcm9tKGtleXMpKSkpIHtcclxuXHRcdHN1Y2Nlc3NTdGF0ZXMgPSBrZXlzLm1hcChrZXkgPT4gaGFuZGxlU2V0KGtleSwgdmFsdWUsIGtleXMpKVxyXG5cdH0gZWxzZSBpZiAoX2lzT2JqZWN0KGtleXNPclBheWxvYWQpKSB7XHJcblx0XHR2YXIgcGF5bG9hZEtleXMgPSBPYmplY3Qua2V5cyhrZXlzT3JQYXlsb2FkKTtcclxuXHRcdHN1Y2Nlc3NTdGF0ZXMgPSBwYXlsb2FkS2V5cy5tYXAoa2V5ID0+IGhhbmRsZVNldChrZXksIGtleXNPclBheWxvYWRba2V5XSwgcGF5bG9hZEtleXMpKVxyXG5cdH1cclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHR2YXIgZXZ0LCBtdXRhdGlvbkJhc2U7XHJcblx0aWYgKChtdXRhdGlvbkJhc2UgPSBPYnNlcnZlckJhc2UuZ2V0Rm9yVGFyZ2V0KHRhcmdldCkpIHx8IHJldHVybkV2ZW50KSB7XHJcblx0XHRldnQgPSBuZXcgTXV0YXRpb25FdmVudCh0YXJnZXQsIHt0eXBlOidzZXQnLCBkYXRhLCBfZGF0YSwgY3JlYXRlZH0pO1xyXG5cdFx0aWYgKG11dGF0aW9uQmFzZSkge1xyXG5cdFx0XHRtdXRhdGlvbkJhc2UuZmlyZShldnQpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gcmV0dXJuRXZlbnQgPyBldnQgOiBfYWxsKHN1Y2Nlc3NTdGF0ZXMsIHN0YXRlID0+IHN0YXRlKTtcclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX3NldFByb3AgZnJvbSAnLi9fc2V0UHJvcC5qcyc7XHJcblxyXG4vKipcclxuICogRXhlY3V0ZXMgYSBcInNldFwiIG9wZXJhdGlvbiBvbiBhIHRhcmdldC5cclxuICogRmlyZXMgYW55IG9ic2VydmVycyB0aGF0IG1heSBiZSBib3VuZCB0byB0YXJnZXQuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdHRhcmdldFxyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF5XHRrZXlzT3JQYXlsb2FkXHJcbiAqIEBwYXJhbSBtaXhlZFx0XHRcdHZhbHVlXHJcbiAqIEBwYXJhbSBib29sXHRcdFx0cmV0dXJuRXZlbnRcclxuICpcclxuICogQHJldHVybiBib29sfEV2ZW50XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0YXJnZXQsIGtleXNPclBheWxvYWQsIHZhbHVlID0gbnVsbCwgcmV0dXJuRXZlbnQgPSBmYWxzZSkge1xyXG5cdHJldHVybiBfc2V0UHJvcChmYWxzZS8qZGVmaW5lKi8sIC4uLmFyZ3VtZW50cyk7XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9hcnJGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Zyb20uanMnO1xyXG5pbXBvcnQgcmVmbGV4R2V0IGZyb20gJy4vZ2V0LmpzJztcclxuaW1wb3J0IHJlZmxleFNldCBmcm9tICcuL3NldC5qcyc7XHJcblxyXG4vKipcclxuICogSW5pdGlhbGl6ZXMgXCJSZWZseGl2ZSBnZXR0ZXIvc2V0dGVyXCIgdHJhcHMgb24gdGhlIHRhcmdldC5cclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdFx0dGFyZ2V0XHJcbiAqIEBwYXJhbSBzdHJpbmd8YXJyYXlcdGtleXNcclxuICpcclxuICogQHJldHVybiB2b2lkXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0YXJnZXQsIGtleXMpIHtcclxuXHRfYXJyRnJvbShrZXlzKS5mb3JFYWNoKGtleSA9PiB7XHJcblx0XHR2YXIgdmFsdWUgPSB0YXJnZXRba2V5XSwgb25HZXRGaXJlLCBvblNldEZpcmU7XHJcblx0XHR2YXIgY3VycmVudERlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KVxyXG5cdFx0fHwge2VudW1lcmFibGU6IGtleSBpbiB0YXJnZXQgPyBmYWxzZS8qZXhpc3RpbmcgYnV0IGhpZGRlbiovIDogdHJ1ZX07XHJcblx0XHRpZiAoJ3ZhbHVlJyBpbiBjdXJyZW50RGVzY3JpcHRvcikge1xyXG5cdFx0XHRkZWxldGUgY3VycmVudERlc2NyaXB0b3IudmFsdWU7XHJcblx0XHR9XHJcblx0XHRpZiAoJ3dyaXRhYmxlJyBpbiBjdXJyZW50RGVzY3JpcHRvcikge1xyXG5cdFx0XHRkZWxldGUgY3VycmVudERlc2NyaXB0b3Iud3JpdGFibGU7XHJcblx0XHR9XHJcblx0XHRjdXJyZW50RGVzY3JpcHRvci5nZXQgPSAoKSA9PiB7XHJcblx0XHRcdGlmIChvbkdldEZpcmUpIHtcclxuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XHJcblx0XHRcdH1cclxuXHRcdFx0b25HZXRGaXJlID0gdHJ1ZTtcclxuXHRcdFx0dmFyIF92YWx1ZSA9IHJlZmxleEdldCh0YXJnZXQsIGtleSk7XHJcblx0XHRcdG9uR2V0RmlyZSA9IGZhbHNlO1xyXG5cdFx0XHRyZXR1cm4gX3ZhbHVlO1xyXG5cdFx0fTtcclxuXHRcdGN1cnJlbnREZXNjcmlwdG9yLnNldCA9IG5ld1ZhbHVlID0+IHtcclxuXHRcdFx0aWYgKG9uU2V0RmlyZSkge1xyXG5cdFx0XHRcdHZhbHVlID0gbmV3VmFsdWU7XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdFx0b25TZXRGaXJlID0gdHJ1ZTtcclxuXHRcdFx0dmFyIHJzcG5zID0gcmVmbGV4U2V0KHRhcmdldCwga2V5LCBuZXdWYWx1ZSk7XHJcblx0XHRcdG9uU2V0RmlyZSA9IGZhbHNlO1xyXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdH07XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGN1cnJlbnREZXNjcmlwdG9yKTtcclxuXHR9KTtcclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBRdWVyeUV2ZW50IGZyb20gJy4vaW50ZXJuYWwvUXVlcnlFdmVudC5qcyc7XHJcbmltcG9ydCBUcmFwQmFzZSBmcm9tICcuL2ludGVybmFsL1RyYXBCYXNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSdW5zIGEgXCJnZXRQcm9wc1wiIHR5cGUgb2YgcXVlcnkgb3BlcmF0aW9uIG9uIGEgdGFyZ2V0LlxyXG4gKiBGaXJlcyBhbnkgb2JzZXJ2ZXJzIGZvciB0aGUgc3BlY2lmaWMgdHlwZSB0aGF0IG1heSBiZSBib3VuZCB0byB0YXJnZXQuXHJcbiAqXHJcbiAqIEBwYXJhbSBib29sXHRcdFx0b3duS2V5c1xyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHR0YXJnZXRcclxuICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob3duS2V5cywgdGFyZ2V0KSB7XHJcblx0aWYgKCF0YXJnZXQgfHwgIV9pc1R5cGVPYmplY3QodGFyZ2V0KSkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdUYXJnZXQgbXVzdCBiZSBvZiB0eXBlIG9iamVjdCEnKTtcclxuXHR9XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0Ly8gRXhlY3V0ZSBhbnkgXCJrZXlzXCIgdHJhcHMsIG90aGVyd2lzZSBcInRlc3RcIiB0aGUgZGVmYXVsdCB3YXlcclxuXHR2YXIgdHJhcEJhc2UsIGRlZmF1bHRLZXlzID0gZnVuY3Rpb24oX2tleXMpIHtcclxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gX2tleXMgOiAoXHJcblx0XHRcdG93bktleXMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpIDogT2JqZWN0LmtleXModGFyZ2V0KVxyXG5cdFx0KTtcclxuXHR9O1xyXG5cdGlmICh0cmFwQmFzZSA9IFRyYXBCYXNlLmdldEZvclRhcmdldCh0YXJnZXQpKSB7XHJcblx0XHRyZXR1cm4gdHJhcEJhc2UuZmlyZShuZXcgUXVlcnlFdmVudCh0YXJnZXQsIHt0eXBlOm93bktleXMgPyAnb3duS2V5cycgOiAna2V5cyd9KSwgZGVmYXVsdEtleXMpO1xyXG5cdH1cclxuXHRyZXR1cm4gZGVmYXVsdEtleXMoKTtcclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2dldFByb3BzIGZyb20gJy4vX2dldFByb3BzLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSdW5zIGEgXCJrZXlzXCIgcXVlcnkgb3BlcmF0aW9uIG9uIGEgdGFyZ2V0LlxyXG4gKiBGaXJlcyBhbnkgc3VjaCBxdWVyeSBvYnNlcnZlcnMgdGhhdCBtYXkgYmUgYm91bmQgdG8gdGFyZ2V0LlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHR0YXJnZXRcclxuICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odGFyZ2V0KSB7XHJcblx0cmV0dXJuIF9nZXRQcm9wcyhmYWxzZS8qb3duS2V5cyovLCAuLi5hcmd1bWVudHMpO1xyXG59XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfZ2V0VHlwZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2dldFR5cGUuanMnO1xyXG5pbXBvcnQgVHJhcEJhc2UgZnJvbSAnLi9pbnRlcm5hbC9UcmFwQmFzZS5qcyc7XHJcbmltcG9ydCBUcmFwIGZyb20gJy4vaW50ZXJuYWwvVHJhcC5qcyc7XHJcblxyXG4vKipcclxuICogQWRkcyBhIHRyYXAgdG8gYW4gb2JqZWN0J3MgZmlyZWJhc2UuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdFx0XHRcdG9iamVjdFxyXG4gKiBAcGFyYW0gZnVuY3Rpb25cdFx0XHRcdFx0Y2FsbGJhY2tcclxuICogQHBhcmFtIG9iamVjdFx0XHRcdFx0XHRwYXJhbXNcclxuICpcclxuICogQHJldHVybiBUcmFwXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmplY3QsIGNhbGxiYWNrLCBwYXJhbXMgPSB7fSkge1xyXG5cdGlmICghb2JqZWN0IHx8ICFfaXNUeXBlT2JqZWN0KG9iamVjdCkpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignT2JqZWN0IG11c3QgYmUgb2YgdHlwZSBvYmplY3QhJyk7XHJcblx0fVxyXG5cdGlmICghX2lzRnVuY3Rpb24oY2FsbGJhY2spKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0NhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbjsgXCInICsgX2dldFR5cGUoY2FsbGJhY2spICsgJ1wiIGdpdmVuIScpO1xyXG5cdH1cclxuXHR2YXIgZmlyZWJhc2U7XHJcblx0aWYgKCEoZmlyZWJhc2UgPSBUcmFwQmFzZS5nZXRGb3JUYXJnZXQob2JqZWN0KSkpIHtcclxuXHRcdGZpcmViYXNlID0gVHJhcEJhc2UuY3JlYXRlRm9yVGFyZ2V0KG9iamVjdCk7XHJcblx0fVxyXG5cdHJldHVybiBmaXJlYmFzZS5hZGRGaXJlYWJsZShuZXcgVHJhcChjYWxsYmFjaywgcGFyYW1zKSk7XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9zZXRQcm9wIGZyb20gJy4vX3NldFByb3AuanMnO1xyXG5cclxuLyoqXHJcbiAqIEV4ZWN1dGVzIGEgXCJzZXRcIiBvcGVyYXRpb24gb24gYSB0YXJnZXQuXHJcbiAqIEZpcmVzIGFueSBvYnNlcnZlcnMgdGhhdCBtYXkgYmUgYm91bmQgdG8gdGFyZ2V0LlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHR0YXJnZXRcclxuICogQHBhcmFtIHN0cmluZ3xhcnJheVx0a2V5c09yUGF5bG9hZFxyXG4gKiBAcGFyYW0gbWl4ZWRcdFx0XHR2YWx1ZVxyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdHJldHVybkV2ZW50XHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbHxFdmVudFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odGFyZ2V0LCBrZXlzT3JQYXlsb2FkLCB2YWx1ZSA9IG51bGwsIHJldHVybkV2ZW50ID0gZmFsc2UpIHtcclxuXHRyZXR1cm4gX3NldFByb3AodHJ1ZS8qZGVmaW5lKi8sIC4uLmFyZ3VtZW50cyk7XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9hcnJGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Zyb20uanMnO1xyXG5pbXBvcnQgX2FsbCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9hbGwuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBNdXRhdGlvbkV2ZW50IGZyb20gJy4vaW50ZXJuYWwvTXV0YXRpb25FdmVudC5qcyc7XHJcbmltcG9ydCBRdWVyeUV2ZW50IGZyb20gJy4vaW50ZXJuYWwvUXVlcnlFdmVudC5qcyc7XHJcbmltcG9ydCBPYnNlcnZlckJhc2UgZnJvbSAnLi9pbnRlcm5hbC9PYnNlcnZlckJhc2UuanMnO1xyXG5pbXBvcnQgVHJhcEJhc2UgZnJvbSAnLi9pbnRlcm5hbC9UcmFwQmFzZS5qcyc7XHJcbmltcG9ydCB1bmxpbmsgZnJvbSAnLi91bmxpbmsuanMnO1xyXG5pbXBvcnQgcmVmbGV4SGFzIGZyb20gJy4vaGFzLmpzJztcclxuXHJcbi8qKlxyXG4gKiBFeGVjdXRlcyBhIFwiZGVsZXRlXCIgb3BlcmF0aW9uIG9uIGEgdGFyZ2V0LlxyXG4gKiBGaXJlcyBhbnkgb2JzZXJ2ZXJzIHRoYXQgbWF5IGJlIGJvdW5kIHRvIHRhcmdldC5cclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdFx0dGFyZ2V0XHJcbiAqIEBwYXJhbSBzdHJpbmd8YXJyYXlcdGtleXNcclxuICogQHBhcmFtIGJvb2xcdFx0XHRyZXR1cm5FdmVudFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2x8RXZlbnRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldCwga2V5cywgcmV0dXJuRXZlbnQgPSBmYWxzZSkge1xyXG5cdGlmICghdGFyZ2V0IHx8ICFfaXNUeXBlT2JqZWN0KHRhcmdldCkpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignVGFyZ2V0IG11c3QgYmUgb2YgdHlwZSBvYmplY3QhJyk7XHJcblx0fVxyXG5cdHZhciBrZXlzID0gX2FyckZyb20oa2V5cyksIF9kYXRhID0ge30sIGRhdGEgPSB7fSwgZGVsZXRlZCA9IFtdO1xyXG5cdHZhciBzdWNjZXNzU3RhdGVzID0ga2V5cy5tYXAoa2V5ID0+IHtcclxuXHRcdF9kYXRhW2tleV0gPSB0YXJnZXRba2V5XTtcclxuXHRcdGlmIChyZWZsZXhIYXModGFyZ2V0LCBrZXkpKSB7XHJcblx0XHRcdGRlbGV0ZWQucHVzaChrZXkpO1xyXG5cdFx0fVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBFeGVjdXRlIGFueSBcImRlbFwiIHRyYXBzLCBvdGhlcndpc2UgXCJkZWxcIiB0aGUgZGVmYXVsdCB3YXlcclxuXHRcdHZhciBzdWNjZXNzLCB0cmFwQmFzZSwgZGVmYXVsdERlbCA9IGZ1bmN0aW9uKF9zdWNjZXNzKSB7XHJcblx0XHRcdGlmICghYXJndW1lbnRzLmxlbmd0aCkge1xyXG5cdFx0XHRcdGRlbGV0ZSB0YXJnZXRba2V5XTtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gX3N1Y2Nlc3M7XHJcblx0XHR9O1xyXG5cdFx0aWYgKHRyYXBCYXNlID0gVHJhcEJhc2UuZ2V0Rm9yVGFyZ2V0KHRhcmdldCkpIHtcclxuXHRcdFx0c3VjY2VzcyA9IHRyYXBCYXNlLmZpcmUobmV3IFF1ZXJ5RXZlbnQodGFyZ2V0LCB7dHlwZTonZGVsJywgcXVlcnk6a2V5LCByZWxhdGVkOmtleXN9KSwgZGVmYXVsdERlbCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRzdWNjZXNzID0gZGVmYXVsdERlbCgpO1xyXG5cdFx0fVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRpZiAoc3VjY2Vzcykge1xyXG5cdFx0XHRkYXRhW2tleV0gPSB1bmRlZmluZWQ7XHJcblx0XHRcdC8vIFVub2JzZXJ2ZSBvdXRnb2luZyB2YWx1ZSBmb3IgYnViYmxpbmdcclxuXHRcdFx0aWYgKF9kYXRhW2tleV0gJiYgX2lzVHlwZU9iamVjdChfZGF0YVtrZXldKSkge1xyXG5cdFx0XHRcdHVubGluayh0YXJnZXQsIGtleSwgX2RhdGFba2V5XSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiBzdWNjZXNzO1xyXG5cdH0pO1xyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdHZhciBldnQsIG11dGF0aW9uQmFzZTtcclxuXHRpZiAoKG11dGF0aW9uQmFzZSA9IE9ic2VydmVyQmFzZS5nZXRGb3JUYXJnZXQodGFyZ2V0KSkgfHwgcmV0dXJuRXZlbnQpIHtcclxuXHRcdGV2dCA9IG5ldyBNdXRhdGlvbkV2ZW50KHRhcmdldCwge3R5cGU6J2RlbCcsIGRhdGEsIF9kYXRhLCBkZWxldGVkfSk7XHJcblx0XHRpZiAobXV0YXRpb25CYXNlICYmIE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCkge1xyXG5cdFx0XHRtdXRhdGlvbkJhc2UuZmlyZShldnQpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRyZXR1cm4gcmV0dXJuRXZlbnQgPyBldnQgOiBfYWxsKHN1Y2Nlc3NTdGF0ZXMsIHN0YXRlID0+IHN0YXRlKTtcclxufVxyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRmlyZWJhc2UgZnJvbSAnLi9GaXJlYmFzZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBMaXN0ZW5lckJhc2UgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1x0XHRcdFx0XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpc3RlbmVyQmFzZSBleHRlbmRzIEZpcmViYXNlIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBGaXJlcyBhbGwgb2JzZXJ2ZXJzIHdpdGggdGhlIGdpdmVuIGV2dCAoY2hhbmdlKS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBFdmVudFx0XHRcdFx0ZXZ0XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIEV2ZW50XHJcblx0ICovXHJcblx0ZmlyZShldnQpIHtcclxuXHRcdHRoaXMuZmlyZWFibGVzLmZvckVhY2gobGlzdGVuZXIgPT4ge1xyXG5cdFx0XHRpZiAoZXZ0LnByb3BhZ2F0aW9uU3RvcHBlZCkge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHRsaXN0ZW5lci5maXJlKGV2dCk7XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiBldnQ7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIGNyZWF0ZUZvclRhcmdldChvYmplY3QsIFN0YXRpYyA9IExpc3RlbmVyQmFzZSkge1xyXG5cdFx0cmV0dXJuIHN1cGVyLmNyZWF0ZUZvclRhcmdldChvYmplY3QsICdsaXN0ZW5lcnMnLCBTdGF0aWMpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAaW5oZXJpdGRvY1xyXG5cdCAqL1xyXG5cdHN0YXRpYyBnZXRGb3JUYXJnZXQob2JqZWN0KSB7XHJcblx0XHRyZXR1cm4gc3VwZXIuZ2V0Rm9yVGFyZ2V0KG9iamVjdCwgJ2xpc3RlbmVycycpO1xyXG5cdH1cclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgRmlyZWFibGUgZnJvbSAnLi9GaXJlYWJsZS5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBMaXN0ZW5lciBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgZXh0ZW5kcyBGaXJlYWJsZSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogSW5pdGlhbGl6ZXMgdGhlIGluc3RhbmNlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uXHRcdGhhbmRsZXJcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdHBhcmFtc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoaGFuZGxlciwgcGFyYW1zID0ge30pIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLmhhbmRsZXIgPSBoYW5kbGVyO1xyXG5cdFx0dGhpcy5wYXJhbXMgPSBwYXJhbXM7XHJcblxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQ2FsbHMgdGhlIG9ic2VydmVyJ3MgaGFuZGxlciBmdW5jdGlvblxyXG5cdCAqIG9uIG1hdGNoaW5nIHdpdGggdGhlIGV2ZW50J3MgZmllbGRzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIE11dGF0aW9uRXZlbnRcdFx0XHQgXHRldnRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGZpcmUoZXZ0KSB7XHJcblx0XHRpZiAodGhpcy5wYXJhbXMudHlwZSA9PT0gZXZ0LnR5cGUpIHtcclxuXHRcdFx0ZXZ0LnJlc3BvbnNlKHRoaXMuaGFuZGxlci5jYWxsKHRoaXMudGFyZ2V0LCBldnQuZSkpO1xyXG5cdFx0fVxyXG5cdH1cclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgYnVpbGQgZnJvbSAnLi9idWlsZC5qcyc7XHJcbmltcG9ydCBvYnNlcnZlIGZyb20gJy4vb2JzZXJ2ZS5qcyc7XHJcbmltcG9ydCB1bm9ic2VydmUgZnJvbSAnLi91bm9ic2VydmUuanMnO1xyXG5pbXBvcnQgdHJhcCBmcm9tICcuL3RyYXAuanMnO1xyXG5pbXBvcnQgdW50cmFwIGZyb20gJy4vdW50cmFwLmpzJztcclxuaW1wb3J0IGRlZiBmcm9tICcuL2RlZi5qcyc7XHJcbmltcG9ydCBzZXQgZnJvbSAnLi9zZXQuanMnO1xyXG5pbXBvcnQgZGVsIGZyb20gJy4vZGVsLmpzJztcclxuaW1wb3J0IGxpbmsgZnJvbSAnLi9saW5rLmpzJztcclxuaW1wb3J0IHVubGluayBmcm9tICcuL3VubGluay5qcyc7XHJcbmltcG9ydCB0cmFuc2FjdGlvbiBmcm9tICcuL3RyYW5zYWN0aW9uLmpzJztcclxuaW1wb3J0IGdldCBmcm9tICcuL2dldC5qcyc7XHJcbmltcG9ydCBoYXMgZnJvbSAnLi9oYXMuanMnO1xyXG5pbXBvcnQgaW5pdCBmcm9tICcuL2luaXQuanMnO1xyXG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xyXG5pbXBvcnQgb3duS2V5cyBmcm9tICcuL293bktleXMuanMnO1xyXG5pbXBvcnQgb24gZnJvbSAnLi9vbi5qcyc7XHJcbmltcG9ydCBvZmYgZnJvbSAnLi9vZmYuanMnO1xyXG5pbXBvcnQgdHJpZ2dlciBmcm9tICcuL3RyaWdnZXIuanMnO1xyXG5pbXBvcnQgTXV0YXRpb25FdmVudCBmcm9tICcuL2ludGVybmFsL011dGF0aW9uRXZlbnQuanMnO1xyXG5pbXBvcnQgUXVlcnlFdmVudCBmcm9tICcuL2ludGVybmFsL1F1ZXJ5RXZlbnQuanMnO1xyXG5pbXBvcnQgRXZlbnQgZnJvbSAnLi9pbnRlcm5hbC9FdmVudC5qcyc7XHJcblxyXG4vLyBOb3cgd2UnbGwgbWltaWNrIHN0YW5kYXJkIFRyYXAgcHJvcGVydGllc1xyXG4vLyBzbyB0aGF0IGNhbiBiZSB1c2VkIGFzIHN0YW5kYXJkIFRyYXAgb3V0IG9mIHRoZSBib3guXHJcbmNvbnN0IGRlbGV0ZVByb3BlcnR5ID0gZGVsO1xyXG5jb25zdCBkZWZpbmVQcm9wZXJ0eSA9IGRlZjtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQge1xyXG5cdGJ1aWxkLFxyXG5cdG9ic2VydmUsXHJcblx0dW5vYnNlcnZlLFxyXG5cdHRyYXAsXHJcblx0dW50cmFwLFxyXG5cdGRlZixcclxuXHRkZWZpbmVQcm9wZXJ0eSxcclxuXHRzZXQsXHJcblx0ZGVsLFxyXG5cdGRlbGV0ZVByb3BlcnR5LFxyXG5cdGxpbmssXHJcblx0dW5saW5rLFxyXG5cdHRyYW5zYWN0aW9uLFxyXG5cdGdldCxcclxuXHRoYXMsXHJcblx0aW5pdCxcclxuXHRrZXlzLFxyXG5cdG93bktleXMsXHJcblx0b24sXHJcblx0b2ZmLFxyXG5cdHRyaWdnZXIsXHJcblx0Ly8gRXZlbnRzXHJcblx0TXV0YXRpb25FdmVudCxcclxuXHRRdWVyeUV2ZW50LFxyXG5cdEV2ZW50LFxyXG59OyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IGluaXQgZnJvbSAnLi9pbml0LmpzJztcclxuaW1wb3J0IHJlZmxleEtleXMgZnJvbSAnLi9rZXlzLmpzJztcclxuaW1wb3J0IHJlZmxleEdldCBmcm9tICcuL2dldC5qcyc7XHJcbmltcG9ydCBsaW5rIGZyb20gJy4vbGluay5qcyc7XHJcblxyXG4vKipcclxuICogUmVjdXJzaXZlbHkgXCJjb25uZWN0c1wiIGFuIG9iamVjdCdzIG1lbWJlcnMgdG8gdGhlIG9iamVjdFxyXG4gKiBmb3IgcmVmbGV4IGFjdGlvbnMuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3RcdHRhcmdldFxyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdF9pbml0XHJcbiAqXHJcbiAqIEByZXR1cm4gdm9pZFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGQodGFyZ2V0LCBfaW5pdCA9IGZhbHNlKSB7XHJcblx0aWYgKCF0YXJnZXQgfHwgIV9pc1R5cGVPYmplY3QodGFyZ2V0KSkge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdUYXJnZXQgbXVzdCBiZSBvZiB0eXBlIG9iamVjdCEnKTtcclxuXHR9XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0dmFyIGtleXMgPSByZWZsZXhLZXlzKHRhcmdldCk7XHJcblx0a2V5cy5mb3JFYWNoKGtleSA9PiB7XHJcblx0XHR2YXIgdmFsdWUgPSByZWZsZXhHZXQodGFyZ2V0LCBrZXkpO1xyXG5cdFx0aWYgKF9pc1R5cGVPYmplY3QodmFsdWUpICYmIHZhbHVlKSB7XHJcblx0XHRcdGxpbmsodGFyZ2V0LCBrZXksIHZhbHVlKTtcclxuXHRcdFx0YnVpbGQodmFsdWUsIF9pbml0KTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHRpZiAoX2luaXQpIHtcclxuXHRcdGluaXQodGFyZ2V0LCBrZXlzKTtcclxuXHR9XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgT2JzZXJ2ZXJCYXNlIGZyb20gJy4vaW50ZXJuYWwvT2JzZXJ2ZXJCYXNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZW1vdmVzIGEgdHJhcCBmcm9tIGFuIG9iamVjdCdzIGZpcmViYXNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHRcdFx0XHRvYmplY3RcclxuICogQHBhcmFtIGZ1bmN0aW9uXHRcdFx0XHRcdG9yaWdpbmFsQ2FsbGJhY2tcclxuICogQHBhcmFtIG9iamVjdFx0XHRcdFx0XHRwYXJhbXNcclxuICpcclxuICogQHJldHVybiB2b2lkXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmplY3QsIG9yaWdpbmFsQ2FsbGJhY2sgPSBudWxsLCBwYXJhbXMgPSB7fSkge1xyXG5cdGlmICghb2JqZWN0IHx8ICFfaXNUeXBlT2JqZWN0KG9iamVjdCkpIHtcclxuXHRcdHRocm93IG5ldyBFcnJvcignT2JqZWN0IG11c3QgYmUgb2YgdHlwZSBvYmplY3QhJyk7XHJcblx0fVxyXG5cdHZhciBmaXJlYmFzZTtcclxuXHRpZiAoZmlyZWJhc2UgPSBPYnNlcnZlckJhc2UuZ2V0Rm9yVGFyZ2V0KG9iamVjdCkpIHtcclxuXHRcdGZpcmViYXNlLmZpbmRGaXJlYWJsZXMoe2hhbmRsZXI6b3JpZ2luYWxDYWxsYmFjaywgcGFyYW1zfSkuZm9yRWFjaCh0cmFwID0+IHtcclxuXHRcdFx0ZmlyZWJhc2UucmVtb3ZlRmlyZWFibGUodHJhcCk7XHJcblx0XHR9KTtcclxuXHR9XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9nZXRQcm9wcyBmcm9tICcuL19nZXRQcm9wcy5qcyc7XHJcblxyXG4vKipcclxuICogUnVucyBhIFwib3duS2V5c1wiIHF1ZXJ5IG9wZXJhdGlvbiBvbiBhIHRhcmdldC5cclxuICogRmlyZXMgYW55IHN1Y2ggcXVlcnkgb2JzZXJ2ZXJzIHRoYXQgbWF5IGJlIGJvdW5kIHRvIHRhcmdldC5cclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdFx0dGFyZ2V0XHJcbiAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRhcmdldCkge1xyXG5cdHJldHVybiBfZ2V0UHJvcHModHJ1ZS8qb3duS2V5cyovLCAuLi5hcmd1bWVudHMpO1xyXG59XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfbWVyZ2UgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovbWVyZ2UuanMnO1xyXG5pbXBvcnQgTGlzdGVuZXJCYXNlIGZyb20gJy4vaW50ZXJuYWwvTGlzdGVuZXJCYXNlLmpzJztcclxuaW1wb3J0IExpc3RlbmVyIGZyb20gJy4vaW50ZXJuYWwvTGlzdGVuZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIEJpbmRzIGxpc3RlbmVycyB0byBhbiBlbGVtZW50J3MgZXZlbnQgY29udHJvbGxlci5cclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdCBcdFx0XHRcdG9iamVjdFxyXG4gKiBAcGFyYW0gc3RyaW5nXHRcdCBcdFx0XHR0eXBlXHJcbiAqIEBwYXJhbSBmdW5jdGlvblx0XHQgXHRcdFx0Y2FsbGJhY2tcclxuICogQHBhcmFtIG9iamVjdFx0XHRcdFx0XHRwYXJhbXNcclxuICpcclxuICogQHJldHVybiBvYmplY3RcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iamVjdCwgdHlwZSwgY2FsbGJhY2ssIHBhcmFtcyA9IHt9KSB7XHJcblx0dmFyIGZpcmViYXNlO1xyXG5cdGlmICghKGZpcmViYXNlID0gTGlzdGVuZXJCYXNlLmdldEZvclRhcmdldChvYmplY3QpKSkge1xyXG5cdFx0ZmlyZWJhc2UgPSBMaXN0ZW5lckJhc2UuY3JlYXRlRm9yVGFyZ2V0KG9iamVjdCk7XHJcblx0fVxyXG5cdHJldHVybiBmaXJlYmFzZS5hZGRGaXJlYWJsZShuZXcgTGlzdGVuZXIoY2FsbGJhY2ssIF9tZXJnZShwYXJhbXMsIHt0eXBlfSkpKTtcclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgTGlzdGVuZXJCYXNlIGZyb20gJy4vaW50ZXJuYWwvTGlzdGVuZXJCYXNlLmpzJztcclxuXHJcbi8qKlxyXG4gKiBVbmJpbmRzIGxpc3RlbmVycyBmcm9tIGFuIGVsZW1lbnQncyBldmVudCBjb250cm9sbGVyLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0IFx0XHRcdFx0b2JqZWN0XHJcbiAqIEBwYXJhbSBzdHJpbmdcdFx0IFx0XHRcdHR5cGVcclxuICogQHBhcmFtIGZ1bmN0aW9uXHRcdCBcdFx0XHRvcmlnaW5hbENhbGxiYWNrXHJcbiAqIEBwYXJhbSBvYmplY3RcdFx0XHRcdFx0cGFyYW1zXHJcbiAqXHJcbiAqIEByZXR1cm4gdm9pZFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0LCB0eXBlLCBvcmlnaW5hbENhbGxiYWNrID0gbnVsbCwgcGFyYW1zID0ge30pIHtcclxuXHR2YXIgZmlyZWJhc2U7XHJcblx0aWYgKGZpcmViYXNlID0gTGlzdGVuZXJCYXNlLmdldEZvclRhcmdldChvYmplY3QpKSB7XHJcblx0XHRmaXJlYmFzZS5maW5kRmlyZWFibGVzKHtoYW5kbGVyOm9yaWdpbmFsQ2FsbGJhY2ssIHR5cGUsIHBhcmFtc30pLmZvckVhY2gobGlzdGVuZXIgPT4ge1xyXG5cdFx0XHRmaXJlYmFzZS5yZW1vdmVGaXJlYWJsZShsaXN0ZW5lcik7XHJcblx0XHR9KTtcclxuXHR9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9tZXJnZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9tZXJnZS5qcyc7XHJcbmltcG9ydCBMaXN0ZW5lckJhc2UgZnJvbSAnLi9pbnRlcm5hbC9MaXN0ZW5lckJhc2UuanMnO1xyXG5pbXBvcnQgRXZlbnQgZnJvbSAnLi9pbnRlcm5hbC9FdmVudC5qcyc7XHJcblxyXG4vKipcclxuICogRmlyZXMgYW4gZXZlbnQgb24gYW4gb2JqZWN0J3MgbGlzdGVuZXJCYXNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXl8b2JqZWN0IFx0XHRcdG9iamVjdFxyXG4gKiBAcGFyYW0gc3RyaW5nICAgICAgICAgICAgICAgIHR5cGVcclxuICogQHBhcmFtIG9iamVjdCAgICAgICAgICAgICAgICBkYXRhXHJcbiAqXHJcbiAqIEByZXR1cm4gRXZlbnRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iamVjdCwgdHlwZSwgZGF0YSA9IHt9KSB7XHJcblx0dmFyIGZpcmViYXNlO1xyXG5cdGlmIChmaXJlYmFzZSA9IExpc3RlbmVyQmFzZS5nZXRGb3JUYXJnZXQob2JqZWN0KSkge1xyXG5cdFx0cmV0dXJuIGZpcmViYXNlLmZpcmUobmV3IEV2ZW50KG9iamVjdCwgX21lcmdlKGRhdGEsIHt0eXBlfSkpKTtcclxuXHR9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBTdGF0aWMgcGFyYW1ldGVyc1xyXG4gKiB1c2VkIGFjcm9zcyBDSFRNTFxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQge1xyXG5cdGVudjogJycsXHJcblx0Y29udGV4dDp7fSxcclxuXHRhdHRyTWFwOiB7XHJcblx0XHRoaW50OiAnYy1oaW50JyxcclxuXHRcdG5hbWVzcGFjZTogJ2MtbmFtZXNwYWNlJyxcclxuXHRcdHN1cGVycm9sZTogJ2Mtcm9sZScsXHJcblx0XHRzdWJyb2xlOiAnYy1yb2xlJyxcclxuXHRcdGJ1bmRsZTogJ2MtYnVuZGxlJyxcclxuXHRcdG5vY29tcG9zZTogWydub2NvbXBvc2UnLCAnc2hhZG93JyxdLFxyXG5cdH0sXHJcblx0dGFnTWFwOiB7XHJcblx0XHRqc2VuOiAnc2NyaXB0W3R5cGU9XCJ0ZXh0L2pzZW5cIl0nLFxyXG5cdFx0YnVuZGxlOiAndGVtcGxhdGVbaXM9XCJjLWJ1bmRsZVwiXScsXHJcblx0XHRpbXBvcnQ6ICdjLWltcG9ydCcsXHJcblx0fSxcclxuXHR0cmVlUHJvcGVydHk6J3RyZWUnLFxyXG5cdGJpbmRpbmdQcm9wZXJ0eTonYmluZGluZycsXHJcblx0a2V5VmFsQXR0cmlidXRlczpbXSxcclxuXHRsaXN0QXR0cmlidXRlczpbXSxcclxuXHRyZW1vZGVsQ2FsbGJhY2s6bnVsbCxcclxuXHRyZWNvbXBvc2VDYWxsYmFjazpudWxsLFxyXG5cdGhpZGVEYXRhQmxvY2tTY3JpcHQ6dHJ1ZSxcclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVHlwZUZ1bmN0aW9uIGZyb20gJy4vaXNUeXBlRnVuY3Rpb24uanMnO1xyXG5cclxuLyoqXHJcbiAqIFRlbGxzIGlmIHZhbCBpcyBvZiB0eXBlIFwiZnVuY3Rpb25cIi5cclxuICpcclxuICogQHBhcmFtIG9iamVjdCBcdFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIF9pc1R5cGVGdW5jdGlvbih2YWwpIHx8ICh2YWwgJiYge30udG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBmdW5jdGlvbl0nKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcImZ1bmN0aW9uXCIuXHJcbiAqIFRoaXMgaG9sZHMgdHJ1ZSBmb3IgYm90aCByZWd1bGFyIGZ1bmN0aW9ucyBhbmQgY2xhc3Nlcy5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbic7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJzdHJpbmdcIiBvciBhIG51bWVyaWMgc3RyaW5nLlxyXG4gKiBUaGlzIGhvbGRzIHRydWUgZm9yIGJvdGggbnVtYmVycyBhbmQgbnVtZXJpYyBzdHJpbmdzLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHZhbCAhPT0gdHJ1ZSAmJiB2YWwgIT09IGZhbHNlICYmIHZhbCAhPT0gbnVsbCAmJiB2YWwgIT09ICcnICYmICFpc05hTih2YWwgKiAxKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgbGlzdCBvZiB1bmlxdWUgaXRlbXMuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheVx0IFx0XHRcdFx0YXJyXHJcbiAqXHQgKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIpIHtcclxuXHRjb25zdCBkaXN0aW5jdCA9ICh2YWx1ZSwgaW5kZXgsIHNlbGYpID0+IHtcclxuXHRcdHJldHVybiBzZWxmLmluZGV4T2YodmFsdWUpID09PSBpbmRleDtcclxuXHR9O1xyXG5cdHJldHVybiBhcnIuZmlsdGVyKGRpc3RpbmN0KTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBSZXR1cm4gdGhlIHBhcnQgb2YgYSBzdHJpbmcgYmVmb3JlIGEgZ2l2ZW4gdmFsdWUuXHJcbiAqXHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzdWJqZWN0XHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzZWFyY2hcclxuICogQHBhcmFtICBib29sXHQgICBiZWZvcmVMYXN0XHJcbiAqXHJcbiAqIEByZXR1cm4gc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdWJqZWN0LCBzZWFyY2gsIGJlZm9yZUxhc3QgPSBmYWxzZSkge1xyXG5cdGlmIChzZWFyY2ggPT0gJycpIHtcclxuXHRcdHJldHVybiBzdWJqZWN0O1xyXG5cdH1cclxuXHR2YXIgcG9zID0gYmVmb3JlTGFzdCA/IHN1YmplY3QubGFzdEluZGV4T2Yoc2VhcmNoKSA6IHN1YmplY3QuaW5kZXhPZihzZWFyY2gpO1xyXG5cdGlmIChwb3MgPT09IC0xKSB7XHJcblx0XHRyZXR1cm4gc3ViamVjdDtcclxuXHR9XHJcblx0cmV0dXJuIHN1YmplY3Quc3Vic3RyKDAsIHBvcyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfYmVmb3JlIGZyb20gJy4vYmVmb3JlLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm4gdGhlIHBhcnQgb2YgYSBzdHJpbmcgYmVmb3JlIGxhc3Qgb2NjdXJlbmNlIG9mIGEgZ2l2ZW4gdmFsdWUuXHJcbiAqXHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzdWJqZWN0XHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzZWFyY2hcclxuICpcclxuICogQHJldHVybiBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN1YmplY3QsIHNlYXJjaCkge1xyXG5cdHJldHVybiBfYmVmb3JlKHN1YmplY3QsIHNlYXJjaCwgdHJ1ZSk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfYXJyRnJvbSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mcm9tLmpzJztcclxuaW1wb3J0IF91bmlxdWUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvdW5pcXVlLmpzJztcclxuaW1wb3J0IF9pc0Z1bmN0aW9uIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1N0cmluZy5qcyc7XHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgcmVjb21wb3NlRGlyZWN0aXZlcyBmcm9tICcuL3JlY29tcG9zZURpcmVjdGl2ZXMuanMnO1xyXG5pbXBvcnQgZ2xvYmFsUGFyYW1zIGZyb20gJy4uL3BhcmFtcy5qcyc7XHJcblxyXG4vKipcclxuICogQ29tcG9zZXMgZGVmaW5pdGlvbnMgZnJvbSBlbEZyb20gaW50byBlbFRvLlxyXG4gKlxyXG4gKiBAcGFyYW0gSFRNTEVsZW1lbnRcdFx0XHRcdGVsRnJvbVxyXG4gKiBAcGFyYW0gSFRNTEVsZW1lbnRcdFx0XHRcdGVsVG9cclxuICogQHBhcmFtIHN0cmluZ1x0XHRcdFx0XHRhcHBlbmRPclByZXBlbmRcclxuICogQHBhcmFtIGFycmF5XHRcdFx0XHRcdFx0bm9yZWNvbXBvc2VcclxuICpcclxuICogQHJldHVybiBIVE1MRWxlbWVudFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZWxGcm9tLCBlbFRvLCBhcHBlbmRPclByZXBlbmQsIG5vcmVjb21wb3NlID0gW10pIHtcclxuXHRub3JlY29tcG9zZSA9IG5vcmVjb21wb3NlLmNvbmNhdChbZ2xvYmFsUGFyYW1zLmF0dHJNYXAubmFtZXNwYWNlLCAuLi5nbG9iYWxQYXJhbXMuYXR0ck1hcC5ub2NvbXBvc2VdKTtcclxuXHRpZiAoZWxUby5oYXNBdHRyaWJ1dGUoJ25vcmVjb21wb3NlJykpIHtcclxuXHRcdG5vcmVjb21wb3NlID0gbm9yZWNvbXBvc2UuY29uY2F0KChlbFRvLmdldEF0dHJpYnV0ZSgnbm9yZWNvbXBvc2UnKSB8fCAnKicpLnNwbGl0KCcgJykubWFwKHZhbCA9PiB2YWwudHJpbSgpKSk7XHJcblx0fVxyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHQvLyBDdXN0b20gQ29tcG9zaXRpb24uLi5cclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0aWYgKF9pc0Z1bmN0aW9uKGdsb2JhbFBhcmFtcy5yZWNvbXBvc2VDYWxsYmFjaykpIHtcclxuXHRcdHZhciBkaXNwb3NpdGlvbiA9IGdsb2JhbFBhcmFtcy5yZWNvbXBvc2VDYWxsYmFjayhlbEZyb20sIGVsVG8sIGFwcGVuZE9yUHJlcGVuZCwgbm9yZWNvbXBvc2UpO1xyXG5cdFx0aWYgKGRpc3Bvc2l0aW9uID09PSBmYWxzZSkge1xyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHR9IGVsc2UgaWYgKF9pc1N0cmluZyhkaXNwb3NpdGlvbikgfHwgX2lzQXJyYXkoZGlzcG9zaXRpb24pKSB7XHJcblx0XHRcdG5vcmVjb21wb3NlID0gbm9yZWNvbXBvc2UuY29uY2F0KGRpc3Bvc2l0aW9uKTtcclxuXHRcdH1cclxuXHR9XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdC8vIE1lcmdlIGxpc3QgYXR0cmlidXRlcy4uLlxyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRfdW5pcXVlKGdsb2JhbFBhcmFtcy5saXN0QXR0cmlidXRlcy5jb25jYXQoW2dsb2JhbFBhcmFtcy5hdHRyTWFwLmhpbnQsIGdsb2JhbFBhcmFtcy5hdHRyTWFwLnN1cGVycm9sZSwgZ2xvYmFsUGFyYW1zLmF0dHJNYXAuc3Vicm9sZSwgJ3JvbGUnLCAnY2xhc3MnXSkpLmZvckVhY2godHlwZSA9PiB7XHJcblx0XHR2YXIgYl9hdHRyLCBhX2F0dHI7XHJcblx0XHRpZiAoIW5vcmVjb21wb3NlLmluY2x1ZGVzKHR5cGUpICYmICFub3JlY29tcG9zZS5pbmNsdWRlcygnKicpICYmIChiX2F0dHIgPSBlbEZyb20uZ2V0QXR0cmlidXRlKHR5cGUpKSkge1xyXG5cdFx0XHRpZiAoYV9hdHRyID0gZWxUby5nZXRBdHRyaWJ1dGUodHlwZSkpIHtcclxuXHRcdFx0XHR2YXIgam9pbnRMaXN0ID0gYXBwZW5kT3JQcmVwZW5kID09PSAncHJlcGVuZCcgPyBbYl9hdHRyLCBhX2F0dHJdIDogW2FfYXR0ciwgYl9hdHRyXTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR2YXIgam9pbnRMaXN0ID0gW2JfYXR0cl07XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxUby5zZXRBdHRyaWJ1dGUodHlwZSwgX3VuaXF1ZShqb2ludExpc3Quam9pbignICcpLnNwbGl0KCcgJykubWFwKHIgPT4gci50cmltKCkpKS5qb2luKCcgJykpO1xyXG5cdFx0XHRub3JlY29tcG9zZS5wdXNoKHR5cGUpO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHQvLyBNZXJnZSBrZXkvdmFsIGF0dHJpYnV0ZXMuLi5cclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0X3VuaXF1ZShnbG9iYWxQYXJhbXMua2V5VmFsQXR0cmlidXRlcy5jb25jYXQoJ3N0eWxlJykpLmZvckVhY2godHlwZSA9PiB7XHJcblx0XHR2YXIgYl9hdHRyLCBhX2F0dHI7XHJcblx0XHRpZiAoIW5vcmVjb21wb3NlLmluY2x1ZGVzKHR5cGUpICYmICFub3JlY29tcG9zZS5pbmNsdWRlcygnKicpICYmIChiX2F0dHIgPSBlbEZyb20uZ2V0QXR0cmlidXRlKHR5cGUpKSkge1xyXG5cdFx0XHRpZiAoYV9hdHRyID0gZWxUby5nZXRBdHRyaWJ1dGUodHlwZSkpIHtcclxuXHRcdFx0XHR2YXIgam9pbnREZWZzID0gYXBwZW5kT3JQcmVwZW5kID09PSAncHJlcGVuZCcgPyBbYl9hdHRyLCBhX2F0dHJdIDogW2FfYXR0ciwgYl9hdHRyXTtcclxuXHRcdFx0XHRpZiAoIWpvaW50RGVmc1swXS50cmltKCkuZW5kc1dpdGgoJzsnKSkge1xyXG5cdFx0XHRcdFx0am9pbnREZWZzWzBdID0gam9pbnREZWZzWzBdICsgJzsnO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHR2YXIgam9pbnREZWZzID0gW2JfYXR0cl07XHJcblx0XHRcdH1cclxuXHRcdFx0ZWxUby5zZXRBdHRyaWJ1dGUodHlwZSwgam9pbnREZWZzLmpvaW4oJyAnKSk7XHJcblx0XHRcdG5vcmVjb21wb3NlLnB1c2godHlwZSk7XHJcblx0XHR9XHJcblx0fSk7XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdC8vIFBvcnQgYWxsIG90aGVyIGF0dHJpYnV0ZXMuLi5cclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbEZyb20uYXR0cmlidXRlcy5sZW5ndGg7IGkgKyspIHtcclxuXHRcdHZhciBhdHRyID0gZWxGcm9tLmF0dHJpYnV0ZXNbaV07XHJcblx0XHRpZiAoIW5vcmVjb21wb3NlLmluY2x1ZGVzKGF0dHIubmFtZSkgJiYgIW5vcmVjb21wb3NlLmluY2x1ZGVzKCcqJykgJiYgIWVsVG8uaGFzQXR0cmlidXRlKGF0dHIubmFtZSkpIHtcclxuXHRcdFx0ZWxUby5zZXRBdHRyaWJ1dGUoYXR0ci5uYW1lLCBhdHRyLnZhbHVlKTtcclxuXHRcdFx0bm9yZWNvbXBvc2UucHVzaChhdHRyLm5hbWUpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0Ly8gRm9yIGRhdGEgYmxvY2tzLi4uXHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdGlmICghbm9yZWNvbXBvc2UuaW5jbHVkZXMoJ0BkaXJlY3RpdmVzJykgJiYgIW5vcmVjb21wb3NlLmluY2x1ZGVzKCcqJykpIHtcclxuXHRcdHZhciBlbFRvRGVmcyA9IF9hcnJGcm9tKChlbFRvLnNoYWRvd1Jvb3QgfHwgZWxUbykuY2hpbGRyZW4pXHJcblx0XHRcdC5maWx0ZXIobm9kZSA9PiBub2RlLm1hdGNoZXMoZ2xvYmFsUGFyYW1zLnRhZ01hcC5qc2VuKSk7XHJcblx0XHR2YXIgZWxGcm9tRGVmcyA9IF9hcnJGcm9tKChlbEZyb20uc2hhZG93Um9vdCB8fCBlbEZyb20pLmNoaWxkcmVuKVxyXG5cdFx0XHQuZmlsdGVyKG5vZGUgPT4gbm9kZS5tYXRjaGVzKGdsb2JhbFBhcmFtcy50YWdNYXAuanNlbikpO1xyXG5cdFx0aWYgKGVsRnJvbURlZnMubGVuZ3RoKSB7XHJcblx0XHRcdGlmIChlbFRvRGVmcy5sZW5ndGgpIHtcclxuXHRcdFx0XHRlbFRvRGVmc1swXVthcHBlbmRPclByZXBlbmRdKGVsRnJvbURlZnNbMF0udGV4dENvbnRlbnQpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGVsVG8ucHJlcGVuZChlbEZyb21EZWZzWzBdLmNsb25lTm9kZSh0cnVlKSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIGVsVG87XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCByZWNvbXBvc2VOb2RlcyBmcm9tICcuL3JlY29tcG9zZU5vZGVzLmpzJztcclxuaW1wb3J0IHJlY29tcG9zZURpcmVjdGl2ZXMgZnJvbSAnLi9yZWNvbXBvc2VEaXJlY3RpdmVzLmpzJztcclxuaW1wb3J0IGdsb2JhbFBhcmFtcyBmcm9tICcuLi9wYXJhbXMuanMnO1xyXG5cclxuLyoqXHJcbiAqIENvbXBvc2VzIGEgY29tcG9uZW50IGZyb20gYSBzdXBlciBjb21wb25lbnQuXHJcbiAqXHJcbiAqIEFsbCBkZWZpbml0aW9ucyB3aWxsIGJlIGluaGVyaXRlZC5cclxuICogSWYgdGhlIGlkZWEgaXMgdG8gaW1wb3J0LCB0aGUgc3VwZXIgY29tcG9uZW50J3MgZWxlbWVudCB3aWxsIGJlIHJldHVybmVkLFxyXG4gKiAoT24gaW1wb3J0LCBub2RlcyBpbiBjb21wb25lbnQgKGFzIGRlZmluZWQsIGlmKSB3aWxsIGJlIHVwbG9hZGVkIGludG8gc2xvdHMgaW4gdGhlIHN1cGVyIGNvbXBvbmVudC4pXHJcbiAqXHJcbiAqIEBwYXJhbSBIVE1MRWxlbWVudFx0XHRcdFx0ZWxUb1xyXG4gKiBAcGFyYW0gSFRNTEVsZW1lbnRcdFx0XHRcdGVsRnJvbVxyXG4gKlxyXG4gKiBAcmV0dXJuIEhUTUxFbGVtZW50XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihlbEZyb20sIGVsVG8pIHtcclxuXHRpZiAoZWxUby5tYXRjaGVzKGdsb2JhbFBhcmFtcy50YWdNYXAuaW1wb3J0KSkge1xyXG5cdFx0cmV0dXJuIHJlY29tcG9zZU5vZGVzKGVsVG8vKmZyb20gaW1wb3J0IGFjdHVhbGx5Ki8sIGVsRnJvbS8qdG8gZWxlbWVudCBhY3R1YWxseSovKTtcclxuXHR9XHJcblx0Ly8gV2Ugd2lsbCBhcHBlbmQgZGVmcyBmcm9tIHRoZSBlbEZyb20gaW50byBlbFRvXHJcblx0cmV0dXJuIHJlY29tcG9zZURpcmVjdGl2ZXMoZWxGcm9tLCBlbFRvLCAncHJlcGVuZCcpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCByZWNvbXBvc2VEaXJlY3RpdmVzIGZyb20gJy4vcmVjb21wb3NlRGlyZWN0aXZlcy5qcyc7XHJcbmltcG9ydCBnbG9iYWxQYXJhbXMgZnJvbSAnLi4vcGFyYW1zLmpzJztcclxuXHRcclxuLyoqXHJcbiAqIENvbXBvc2VzIGEgY29tcG9uZW50IGZyb20gYSBzdXBlciBjb21wb25lbnQuXHJcbiAqXHJcbiAqIEFsbCBkZWZpbml0aW9ucyB3aWxsIGJlIGluaGVyaXRlZC5cclxuICogSWYgdGhlIGlkZWEgaXMgdG8gaW1wb3J0LCB0aGUgc3VwZXIgY29tcG9uZW50J3MgZWxlbWVudCB3aWxsIGJlIHJldHVybmVkLFxyXG4gKiAoT24gaW1wb3J0LCBub2RlcyBpbiBjb21wb25lbnQgKGFzIGRlZmluZWQsIGlmKSB3aWxsIGJlIHVwbG9hZGVkIGludG8gc2xvdHMgaW4gdGhlIHN1cGVyIGNvbXBvbmVudC4pXHJcbiAqXHJcbiAqIEBwYXJhbSBIVE1MRWxlbWVudFx0XHRcdFx0ZWxGcm9tXHJcbiAqIEBwYXJhbSBIVE1MRWxlbWVudFx0XHRcdFx0ZWxUb1xyXG4gKlxyXG4gKiBAcmV0dXJuIEhUTUxFbGVtZW50XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihlbEZyb20sIGVsVG8pIHtcclxuXHRlbFRvID0gZWxUby5jbG9uZU5vZGUodHJ1ZSk7XHJcblx0dmFyIGVsRnJvbU5zID0gZWxGcm9tLmdldEF0dHJpYnV0ZShnbG9iYWxQYXJhbXMuYXR0ck1hcC5uYW1lc3BhY2UpO1xyXG5cdHZhciBlbFRvTnMgPSBlbFRvLmdldEF0dHJpYnV0ZShnbG9iYWxQYXJhbXMuYXR0ck1hcC5uYW1lc3BhY2UpO1xyXG5cdHZhciBlbFRvUm9sZXMgPSAoZWxUby5nZXRBdHRyaWJ1dGUoZ2xvYmFsUGFyYW1zLmF0dHJNYXAuc3VwZXJyb2xlKSB8fCAnJykuc3BsaXQoJyAnKS5tYXAociA9PiByLnRyaW0oKSk7XHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdC8vIFNvIHdlIGNvbmNhdCgpIHRoZSByb2xlIGF0dHJpYnV0ZVxyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRlbFRvLnNldEF0dHJpYnV0ZShnbG9iYWxQYXJhbXMuYXR0ck1hcC5uYW1lc3BhY2UsIGVsRnJvbU5zKTtcclxuXHQvLyBXZSB3aWxsIHByZXBlbmQgZGVmcyBmcm9tIHRoZSBlbEZyb20gaW50byBlbFRvXHJcblx0cmVjb21wb3NlRGlyZWN0aXZlcyhlbEZyb20sIGVsVG8sICdhcHBlbmQnKTtcclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0Ly8gVXBsb2FkIG5vZGVzIGludG8gZWxUbyBqdXN0IHRoZSB3YXkgc2xvdHMgd29yayBpbiBXZWIgQ29tcG9vbmVudHNcclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0X2FyckZyb20oKGVsRnJvbS5zaGFkb3dSb290IHx8IGVsRnJvbSkuY2hpbGRyZW4pLmZvckVhY2goKHJlcGxhY2VtZW50Tm9kZSwgaSkgPT4ge1xyXG5cdFx0aWYgKHJlcGxhY2VtZW50Tm9kZS5tYXRjaGVzKGdsb2JhbFBhcmFtcy50YWdNYXAuanNlbikpIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0cmVwbGFjZW1lbnROb2RlID0gcmVwbGFjZW1lbnROb2RlLmNsb25lTm9kZSh0cnVlKTtcclxuXHRcdHZhciBhcHBsaWNhYmxlQ29udGV4dFJvbGVzID0gW10sIGFwcGxpY2FibGVSZXBsYWNlbWVudE5vZGVSb2xlcyA9IFtdO1xyXG5cdFx0dmFyIHJlcGxhY2VtZW50Tm9kZVJvbGVzID0gKHJlcGxhY2VtZW50Tm9kZS5nZXRBdHRyaWJ1dGUoZ2xvYmFsUGFyYW1zLmF0dHJNYXAuc3Vicm9sZSkgfHwgJycpLnNwbGl0KCcgJykubWFwKHIgPT4gci50cmltKCkpO1xyXG5cdFx0cmVwbGFjZW1lbnROb2RlUm9sZXMuZm9yRWFjaChyZXBsYWNlbWVudE5vZGVSb2xlID0+IHtcclxuXHRcdFx0dmFyIF9hcHBsaWNhYmxlQ29udGV4dFJvbGVzID0gZWxUb1JvbGVzLmZpbHRlcihjb250ZXh0Um9sZSA9PiByZXBsYWNlbWVudE5vZGVSb2xlLnN0YXJ0c1dpdGgoY29udGV4dFJvbGUgKyAnLScpKTtcclxuXHRcdFx0aWYgKF9hcHBsaWNhYmxlQ29udGV4dFJvbGVzLmxlbmd0aCkge1xyXG5cdFx0XHRcdGFwcGxpY2FibGVDb250ZXh0Um9sZXMucHVzaChfYXBwbGljYWJsZUNvbnRleHRSb2xlc1swXSk7XHJcblx0XHRcdFx0YXBwbGljYWJsZVJlcGxhY2VtZW50Tm9kZVJvbGVzLnB1c2gocmVwbGFjZW1lbnROb2RlUm9sZSk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0dmFyIENTU0VzY2FwZSA9IGdsb2JhbFBhcmFtcy5jb250ZXh0LkNTUyA/IGdsb2JhbFBhcmFtcy5jb250ZXh0LkNTUy5lc2NhcGUgOiBzdHIgPT4gc3RyO1xyXG5cdFx0aWYgKGFwcGxpY2FibGVDb250ZXh0Um9sZXMubGVuZ3RoKSB7XHJcblx0XHRcdHZhciBzbG90Tm9kZXM7XHJcblx0XHRcdHZhciBjb250ZXh0U2VsZWN0b3IgPSBhcHBsaWNhYmxlQ29udGV4dFJvbGVzLm1hcChjb250ZXh0Um9sZSA9PiAnWycgKyBDU1NFc2NhcGUoZ2xvYmFsUGFyYW1zLmF0dHJNYXAuc3VwZXJyb2xlKSArICd+PVwiJyArIGNvbnRleHRSb2xlICsgJ1wiXScpO1xyXG5cdFx0XHR2YXIgc2xvdE5vZGVTZWxlY3RvciA9IGFwcGxpY2FibGVSZXBsYWNlbWVudE5vZGVSb2xlcy5tYXAocmVwbGFjZW1lbnROb2RlUm9sZSA9PiAnWycgKyBDU1NFc2NhcGUoZ2xvYmFsUGFyYW1zLmF0dHJNYXAuc3Vicm9sZSkgKyAnfj1cIicgKyByZXBsYWNlbWVudE5vZGVSb2xlICsgJ1wiXScpO1xyXG5cdFx0XHRpZiAoKGVsVG8uc2hhZG93Um9vdCAmJiAoc2xvdE5vZGVzID0gZWxUby5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3JBbGwoc2xvdE5vZGVTZWxlY3RvcikpKVxyXG5cdFx0XHR8fCAoKHNsb3ROb2RlcyA9IGVsVG8ucXVlcnlTZWxlY3RvckFsbChzbG90Tm9kZVNlbGVjdG9yKSkubGVuZ3RoID09PSAxICYmIHNsb3ROb2Rlc1swXS5jbG9zZXN0KGNvbnRleHRTZWxlY3RvcikgPT09IGVsVG8pKSB7XHJcblx0XHRcdFx0Ly8gV2Ugd2lsbCBwcmVwZW5kIGRlZnMgZnJvbSB0aGUgc2xvdCBub2RlIGludG8gcmVwbGFjZW1lbnQgbm9kZVxyXG5cdFx0XHRcdHJlY29tcG9zZURpcmVjdGl2ZXMoc2xvdE5vZGVzWzBdLCByZXBsYWNlbWVudE5vZGUsICdwcmVwZW5kJyk7XHJcblx0XHRcdFx0Ly8gUG9ydCB0byB0YXJnZXQuLi5cclxuXHRcdFx0XHRzbG90Tm9kZXNbMF0ucmVwbGFjZVdpdGgocmVwbGFjZW1lbnROb2RlKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvL3Rocm93IG5ldyBFcnJvcignQ29tcG9zaXRpb24gRXJyb3I6IE5vZGUgIycgKyBpICsgJyAoYXQgJyArIGVsRnJvbU5zICsgJykgbXVzdCBtYXRjaCBleGFjdGx5IG9uZSB0YXJnZXROb2RlIGluICcgKyBlbFRvTnMgKyAnISAoJyArIHNsb3ROb2Rlcy5sZW5ndGggKyAnIG1hdGNoZWQpJyk7XHJcblx0XHRcdFx0ZWxUby5hcHBlbmQocmVwbGFjZW1lbnROb2RlKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0ZWxUby5hcHBlbmQocmVwbGFjZW1lbnROb2RlKTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHRyZXR1cm4gZWxUbztcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9hcnJGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Zyb20uanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgTWF0cml4IGxvYWRlclxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdHJpeCB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogQ3JlYXRlcyBhIG5ldyBNYXRyaXggaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gYXJyYXkgXHRcdFx0c291cmNlc1xyXG5cdCAqIEBwYXJhbSBzdHJpbmd8YXJyYXkgXHRcdG5hbWVzcGFjZVxyXG5cdCAqIEBwYXJhbSBmdW5jdGlvbiBcdFx0XHRnZXR0ZXJcclxuXHQgKiBAcGFyYW0gTWF0cml4SW50ZXJmYWNlXHRjYXJyeVxyXG5cdCAqXHJcblx0ICogQHJldHVybiB0aGlzXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3Ioc291cmNlcywgbmFtZXNwYWNlLCBnZXR0ZXIsIGNhcnJ5ID0gbnVsbCkge1xyXG5cdFx0dGhpcy5zb3VyY2VzID0gX2FyckZyb20oc291cmNlcyk7XHJcblx0XHR0aGlzLm5hbWVzcGFjZSA9IF9hcnJGcm9tKG5hbWVzcGFjZSk7XHJcblx0XHR0aGlzLmdldHRlciA9IGdldHRlcjtcclxuXHRcdHRoaXMuY2FycnkgPSBjYXJyeTtcclxuXHRcdHRoaXMuY29sbGVjdGlvbnMgPSB7fTtcclxuXHRcdHRoaXMudmFsdWU7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBFbnRlcnMgaW50byBhIHN1YiBjb2xsZWN0aW9uIGlmIGV4aXN0cy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmcgXHRcdFx0bmFtZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBNYXRyaXhJbnRlcmZhY2VcclxuXHQgKi9cclxuXHRlbnRlcihuYW1lKSB7XHJcblx0XHRpZiAoIShuYW1lIGluIHRoaXMuY29sbGVjdGlvbnMpKSB7XHJcblx0XHRcdHRoaXMuY29sbGVjdGlvbnNbbmFtZV0gPSBuZXcgTWF0cml4KFxyXG5cdFx0XHRcdHRoaXMuc291cmNlcywgXHJcblx0XHRcdFx0dGhpcy5uYW1lc3BhY2UuY29uY2F0KG5hbWUpLFxyXG5cdFx0XHRcdHRoaXMuZ2V0dGVyLFxyXG5cdFx0XHRcdHRoaXMgXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcy5jb2xsZWN0aW9uc1tuYW1lXTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIExlYXZlcyB0aGUgY3VycmVudCBjdXJyZW50IGNvbGxlY3Rpb24gaW50byB0aGUgc3VwZXIgY29sbGVjdGlvbiBpZiBleGlzdHMuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIE1hdHJpeEludGVyZmFjZVxyXG5cdCAqL1xyXG5cdGxlYXZlKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuY2Fycnk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBMYXp5LWxvYWRzIGEgcHJvcGVydHkgZnJvbSBzb3VyY2VzLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBtaXhlZFxyXG5cdCAqL1xyXG5cdGdldCgpIHtcclxuXHRcdGlmICghdGhpcy52YWx1ZSkge1xyXG5cdFx0XHR2YXIgbmFtZXNwYWNlID0gdGhpcy5uYW1lc3BhY2Uuc2xpY2UoKTtcclxuXHRcdFx0dmFyIHZhbHVlID0gdGhpcy5jYXJyeSA/IHRoaXMuY2FycnkuZ2V0KCkgOiBudWxsO1xyXG5cdFx0XHR0aGlzLnNvdXJjZXMuZm9yRWFjaCgoc291cmNlLCBpKSA9PiB7XHJcblx0XHRcdFx0aWYgKHZhbHVlID0gdGhpcy5nZXR0ZXIuY2FsbChudWxsLCBzb3VyY2UsIG5hbWVzcGFjZSwgdmFsdWUsIGkpKSB7XHJcblx0XHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsdWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB0aGlzLnZhbHVlO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBGaW5kcyB0aGUgbW9zdC1zcGVjaWZpYyBtb2R1bGUgZm9yIHRoZSBnaXZlbiBuYW1lc3BhY2UgZnJvbSBzb3VyY2VzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0aW5nXHRcdFx0XHRcdG5hbWVzcGFjZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBvYmplY3RcclxuXHQgKi9cclxuXHRmaW5kKG5hbWVzcGFjZSkge1xyXG5cdFx0dmFyIG5zQXJyYXkgPSBuYW1lc3BhY2Uuc3BsaXQoJy8nKTtcclxuXHRcdHZhciBzdWJNYXRyaXgsIG5zS2V5LCBuc0RyaWxsID0gdGhpcztcclxuXHRcdHdoaWxlKChuc0tleSA9IG5zQXJyYXkuc2hpZnQoKSkgJiYgKG5zRHJpbGwgPSBuc0RyaWxsLmVudGVyKG5zS2V5KSkpIHtcclxuXHRcdFx0c3ViTWF0cml4ID0gbnNEcmlsbDsgXHJcblx0XHR9XHJcblx0XHQvLyBDbG9uZSBub3cuLi5cclxuXHRcdHZhciBlbCA9IHN1Yk1hdHJpeC5nZXQoKTtcclxuXHRcdGlmIChlbCkge1xyXG5cdFx0XHRyZXR1cm4gZWwuY2xvbmVOb2RlKHRydWUpO1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9kaXZpZGUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZGl2aWRlLmpzJztcclxuaW1wb3J0IGdsb2JhbFBhcmFtcyBmcm9tICcuLi9wYXJhbXMuanMnO1xyXG5pbXBvcnQgcmVjb21wb3NlIGZyb20gJy4vcmVjb21wb3NlLmpzJztcclxuaW1wb3J0IE1hdHJpeCBmcm9tICcuL01hdHJpeC5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBjbGllbnQtYnVpbGQgZW50cnlcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihidW5kbGVFbGVtZW50cywgcHJvbWlzZVJlY2lldmVyID0gbnVsbCkge1xyXG5cdFxyXG5cdHZhciBbbG9hZGluZ0J1bmRsZXMsIHJlYWR5QnVuZGxlc10gPSBfZGl2aWRlKGJ1bmRsZUVsZW1lbnRzLCBiID0+IGIgaW5zdGFuY2VvZiBQcm9taXNlKTtcclxuXHRjb25zdCBsb2FkaW5nQnVuZGxlc1Byb21pc2UgPSBQcm9taXNlLmFsbChsb2FkaW5nQnVuZGxlcykudGhlbihmZXRjaGVkQnVuZGxlcyA9PiB7XHJcblx0XHRyZWFkeUJ1bmRsZXMucHVzaCguLi5mZXRjaGVkQnVuZGxlcyk7XHJcblx0XHRsb2FkaW5nQnVuZGxlcyA9IFtdO1xyXG5cdH0pO1xyXG5cdGlmIChwcm9taXNlUmVjaWV2ZXIpIHtcclxuXHRcdHByb21pc2VSZWNpZXZlcihsb2FkaW5nQnVuZGxlc1Byb21pc2UpO1xyXG5cdH1cclxuXHR2YXIgd2FybmVkRWFybHlCdW5kbGVBY2Nlc3M7XHJcblx0Y29uc3QgYW50aWN5Y2xpY0J1bmRsZXNRdWVyeSA9IFtdO1xyXG5cdGNvbnN0IGJ1bmRsZU1hdHJpeCA9IG5ldyBNYXRyaXgocmVhZHlCdW5kbGVzLypzb3VyY2VzKi8sIFtdLypuYW1lc3BhY2UqLywgKGJ1bmRsZSwgbmFtZXNwYWNlLCBzdXBlckVsLCBidW5kbGVJbmRleCkgPT4ge1xyXG5cdFx0dmFyIF9uYW1lc3BhY2UgPSBuYW1lc3BhY2Uuam9pbignLycpO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBJcyB0aGUgY3VycmVudCBpbXBvcnQgcHJvY2VzcyB0cnlpbmcgdG8gYmUgY3ljbGljP1xyXG5cdFx0Ly8gV2UgbW92ZSBvbmUtbGV2ZWwgdXAgdGhlIG5hbWVzcGFjZSBoaWVyYXJjaHkuXHJcblx0XHRpZiAoYW50aWN5Y2xpY0J1bmRsZXNRdWVyeS5pbmNsdWRlcyhfbmFtZXNwYWNlKSkge1xyXG5cdFx0XHRyZXR1cm4gYnVuZGxlTWF0cml4LmZpbmQobmFtZXNwYWNlLnNsaWNlKDAsIC0xKS5qb2luKCcvJykpO1xyXG5cdFx0fVxyXG5cdFx0YW50aWN5Y2xpY0J1bmRsZXNRdWVyeS5wdXNoKF9uYW1lc3BhY2UpO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBJcyBzb21lb25lIHRyeWluZyB0byBpbXBvcnQgd2hpbGUgYnVuZGxlcyBhcmUgc3RpbGwgbG9hZGluZz9cclxuXHRcdGlmIChsb2FkaW5nQnVuZGxlcy5sZW5ndGggJiYgIXdhcm5lZEVhcmx5QnVuZGxlQWNjZXNzKSB7XHJcblx0XHRcdHdhcm5lZEVhcmx5QnVuZGxlQWNjZXNzID0gdHJ1ZTtcclxuXHRcdFx0Y29uc29sZS53YXJuKCdSZW1vdGUgYnVuZGxlcyBhcmUgc3RpbGwgbG9hZGluZyBhdCB0aGlzIHRpbWUhIFlvdSBzaG91bGQgcHJvYmFiYmx5IHdyYXAgYnVuZGxlLWRlcGVuZGVudCBjb2RlIHdpdGhpbiBDaHRtbC5yZWFkeShjYWxsYmFja1ssIHRydWUvKndhaXRGb3JCdW5kbGVzKi9dKS4nKTtcclxuXHRcdH1cclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gV2UgcXVlcnkgbm93Li4uXHJcblx0XHR2YXIgQ1NTRXNjYXBlID0gZ2xvYmFsUGFyYW1zLmNvbnRleHQuQ1NTIFxyXG5cdFx0XHQ/IGdsb2JhbFBhcmFtcy5jb250ZXh0LkNTUy5lc2NhcGUgXHJcblx0XHRcdDogc3RyID0+IHN0cjtcclxuXHRcdHZhciBlbCA9IGJ1bmRsZS5jb250ZW50LnF1ZXJ5U2VsZWN0b3IoJ1snICsgQ1NTRXNjYXBlKGdsb2JhbFBhcmFtcy5hdHRyTWFwLm5hbWVzcGFjZSkgKyAnPVwiJyArIF9uYW1lc3BhY2UgKyAnXCJdJyk7XHJcblxyXG5cdFx0aWYgKGVsICYmIHN1cGVyRWwpIHtcclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHR2YXIgbm9yZWNvbXBvc2UgPSBbXTtcclxuXHRcdFx0XHRpZiAoYnVuZGxlLmhhc0F0dHJpYnV0ZSgnbm9yZWNvbXBvc2UnKSkge1xyXG5cdFx0XHRcdFx0bm9yZWNvbXBvc2UgPSAoYnVuZGxlLmdldEF0dHJpYnV0ZSgnbm9yZWNvbXBvc2UnKSB8fCAnKicpLnNwbGl0KCcgJykubWFwKHZhbCA9PiB2YWwudHJpbSgpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0ZWwgPSByZWNvbXBvc2Uoc3VwZXJFbCwgZWwsICdwcmVwZW5kJywgbm9yZWNvbXBvc2UpO1xyXG5cdFx0XHR9IGNhdGNoKGUpIHtcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKCdbSW5oZXJpdGFuY2UgZXJyb3IgYXQgc291cmNlICMnICsgYnVuZGxlSW5kZXggKyAnXTogJyArIGUubWVzc2FnZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0YW50aWN5Y2xpY0J1bmRsZXNRdWVyeS5wb3AoKTtcclxuXHRcdFx0cmV0dXJuIGVsO1xyXG5cdFx0fVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBVcGRhdGUgY3ljbGljaXNtLi4uIGxvbFxyXG5cdFx0YW50aWN5Y2xpY0J1bmRsZXNRdWVyeS5wb3AoKTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gSWYgdGhlcmUgd2FzIG5vIG1vZHVsZSB3aXRoIHRoZSByZXF1ZXN0ZWQgbmFtZXNwYWNlXHJcblx0XHQvLyB3ZSByZXR1cm4gdGhlIHN1cGVyIG1vZHVsZVxyXG5cdFx0cmV0dXJuIGVsID8gZWwuY2xvbmVOb2RlKHRydWUpIDogKFxyXG5cdFx0XHRzdXBlckVsID8gc3VwZXJFbC5jbG9uZU5vZGUodHJ1ZSkgOiBudWxsXHJcblx0XHQpO1xyXG5cdH0vKmdldHRlciovKTtcclxuXHRcclxuXHRyZXR1cm4gYnVuZGxlTWF0cml4O1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFJldHVybiB0aGUgcmVtYWluZGVyIG9mIGEgc3RyaW5nIGFmdGVyIGEgZ2l2ZW4gdmFsdWUuXHJcbiAqXHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzdWJqZWN0XHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzZWFyY2hcclxuICogQHBhcmFtICBib29sXHQgICBhZnRlckxhc3RcclxuICpcclxuICogQHJldHVybiBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN1YmplY3QsIHNlYXJjaCwgYWZ0ZXJMYXN0ID0gZmFsc2UpIHtcclxuXHRpZiAoc2VhcmNoID09ICcnKSB7XHJcblx0XHRyZXR1cm4gc3ViamVjdDtcclxuXHR9XHJcblx0dmFyIHBvcyA9IGFmdGVyTGFzdCA/IHN1YmplY3QubGFzdEluZGV4T2Yoc2VhcmNoKSA6IHN1YmplY3QuaW5kZXhPZihzZWFyY2gpO1xyXG5cdGlmIChwb3MgPT09IC0xKSB7XHJcblx0XHRyZXR1cm4gJyc7XHJcblx0fVxyXG5cdHJldHVybiBzdWJqZWN0LnN1YnN0cihwb3MgKyBzZWFyY2gubGVuZ3RoKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBBZGRzIGFuIGl0ZW0gaWYgbm90IGFscmVhZHkgZXhpc3QuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheSBcdGFyclxyXG4gKiBAcGFyYW0gYXJyYXlcdCBcdC4uLml0bXNcclxuICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyLCAuLi5pdGVtcykge1xyXG5cdGl0ZW1zLmZvckVhY2goaXRtID0+IHtcclxuXHRcdGlmIChhcnIuaW5kZXhPZihpdG0pIDwgMCkge1xyXG5cdFx0XHRhcnIucHVzaChpdG0pO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG5cdHJldHVybiBhcnI7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfcHVzaFVuaXF1ZSBmcm9tICcuLi9hcnIvcHVzaFVuaXF1ZS5qcyc7XHJcbmltcG9ydCBfZ2V0UHJvdG90eXBlQ2hhaW4gZnJvbSAnLi9nZXRQcm90b3R5cGVDaGFpbi5qcyc7XHJcblxyXG4vKipcclxuICogRWFnZXJseSByZXRyaWV2ZXMgb2JqZWN0IG1lbWJlcnMgYWxsIGRvd24gdGhlIHByb3RvdHlwZSBjaGFpbi5cclxuICpcclxuICogQHBhcmFtIG9iamVjdFx0IFx0b2JqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHVudGlsXHJcbiAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iaiwgdW50aWwpIHtcclxuXHR2YXIga2V5c0FsbCA9IFtdO1xyXG5cdF9nZXRQcm90b3R5cGVDaGFpbihvYmosIHVudGlsKS5mb3JFYWNoKG9iaiA9PiB7XHJcblx0XHRfcHVzaFVuaXF1ZShrZXlzQWxsLCAuLi5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopKTtcclxuXHR9KTtcclxuXHRyZXR1cm4ga2V5c0FsbDtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHByb3RvdHlwZSBjaGFpbi5cclxuICpcclxuICogQHBhcmFtIG9iamVjdCBcdFx0b2JqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHVudGlsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqLCB1bnRpbCkge1xyXG5cdHVudGlsID0gdW50aWwgfHwgT2JqZWN0LnByb3RvdHlwZTtcclxuXHR1bnRpbCA9IHVudGlsICYmICFfaXNBcnJheSh1bnRpbCkgPyBbdW50aWxdIDogdW50aWw7XHJcblx0Ly8gV2UgZ2V0IHRoZSBjaGFpbiBvZiBpbmhlcml0YW5jZVxyXG5cdHZhciBwcm90b3R5cGFsQ2hhaW4gPSBbXTtcclxuXHR2YXIgb2JqID0gb2JqO1xyXG5cdHdoaWxlKChvYmogJiYgKCF1bnRpbCB8fCB1bnRpbC5pbmRleE9mKG9iaikgPCAwKSAmJiBvYmoubmFtZSAhPT0gJ2RlZmF1bHQnKSkge1xyXG5cdFx0cHJvdG90eXBhbENoYWluLnB1c2gob2JqKTtcclxuXHRcdG9iaiA9IG9iaiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopIDogbnVsbDtcclxuXHR9XHJcblx0cmV0dXJuIHByb3RvdHlwYWxDaGFpbjtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnLi4vanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnLi4vanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuLi9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICcuLi9qcy9pc051bWVyaWMuanMnO1xyXG5pbXBvcnQgX2dldEFsbFByb3BlcnR5TmFtZXMgZnJvbSAnLi9nZXRBbGxQcm9wZXJ0eU5hbWVzLmpzJztcclxuXHJcbi8qKlxyXG4gICogTWVyZ2VzIHZhbHVlcyBmcm9tIHN1YnNlcXVlbnQgYXJyYXlzL29iamVjdHMgZmlyc3QgYXJyYXkvb2JqZWN0O1xyXG4gICogb3B0aW9uYWxseSByZWN1cnNpdmVcclxuICAqXHJcbiAgKiBAcGFyYW0gYXJyYXkgLi4ub2Jqc1xyXG4gICpcclxuICAqIEByZXR1cm4gdm9pZFxyXG4gICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQ2FsbGJhY2sob2JqcywgY2FsbGJhY2ssIGRlZXBQcm9wcyA9IGZhbHNlLCBpc1JlcGxhY2UgPSBmYWxzZSwgd2l0aFN5bWJvbHMgPSB0cnVlKSB7XHJcblx0dmFyIGRlcHRoID0gMDtcclxuXHR2YXIgb2JqMSA9IG9ianMuc2hpZnQoKTtcclxuXHRpZiAoX2lzTnVtZXJpYyhvYmoxKSB8fCBvYmoxID09PSB0cnVlIHx8IG9iajEgPT09IGZhbHNlKSB7XHJcblx0XHRkZXB0aCA9IG9iajE7XHJcblx0XHRvYmoxID0gb2Jqcy5zaGlmdCgpO1xyXG5cdH1cclxuXHRpZiAoIW9ianMubGVuZ3RoKSB7XHJcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ19tZXJnZSgpIHJlcXVpcmVzIHR3byBvciBtb3JlIGFycmF5L29iamVjdHMuJyk7XHJcblx0fVxyXG5cdG9ianMuZm9yRWFjaCgob2JqMiwgaSkgPT4ge1xyXG5cdFx0aWYgKCFfaXNUeXBlT2JqZWN0KG9iajIpICYmICFfaXNGdW5jdGlvbihvYmoyKSkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHQoZGVlcFByb3BzID8gX2dldEFsbFByb3BlcnR5TmFtZXMob2JqMikgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmoyKSkuZm9yRWFjaChrZXkgPT4ge1xyXG5cdFx0XHR2YXIgdmFsQXRPYmoxID0gb2JqMVtrZXldO1xyXG5cdFx0XHR2YXIgdmFsQXRPYmoyID0gb2JqMltrZXldO1xyXG5cdFx0XHRpZiAoKChfaXNBcnJheSh2YWxBdE9iajEpICYmIF9pc0FycmF5KHZhbEF0T2JqMikpIHx8IChfaXNPYmplY3QodmFsQXRPYmoxKSAmJiBfaXNPYmplY3QodmFsQXRPYmoyKSkpIFxyXG5cdFx0XHQmJiAoZGVwdGggPT09IHRydWUgfHwgZGVwdGggPiAwKSkge1xyXG5cdFx0XHRcdC8vIFJFQ1VSU0UuLi5cclxuXHRcdFx0XHRvYmoxW2tleV0gPSBfaXNBcnJheSh2YWxBdE9iajEpICYmIF9pc0FycmF5KHZhbEF0T2JqMikgPyBbXSA6IHt9O1xyXG5cdFx0XHRcdG1lcmdlQ2FsbGJhY2soW19pc051bWVyaWMoZGVwdGgpID8gZGVwdGggLSAxIDogZGVwdGgsIG9iajFba2V5XSwgdmFsQXRPYmoxLCB2YWxBdE9iajJdLCBjYWxsYmFjaywgZGVlcFByb3BzLCBpc1JlcGxhY2UsIHdpdGhTeW1ib2xzKTtcclxuXHRcdFx0fSBlbHNlIGlmIChjYWxsYmFjayhrZXksIG9iajEsIG9iajIsIGkpKSB7XHJcblx0XHRcdFx0aWYgKF9pc0FycmF5KG9iajEpICYmIF9pc0FycmF5KG9iajIpKSB7XHJcblx0XHRcdFx0XHRpZiAoaXNSZXBsYWNlKSB7XHJcblx0XHRcdFx0XHRcdG9iajFba2V5XSA9IHZhbEF0T2JqMjtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdG9iajEucHVzaCh2YWxBdE9iajIpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQvLyBJbiBjYXNlIHdlJ3JlIHNldHRpbmcgYSByZWFkLW9ubHkgcHJvcGVydHlcclxuXHRcdFx0XHRcdHRyeSB7XHJcblx0XHRcdFx0XHRcdGlmICh3aXRoU3ltYm9scykge1xyXG5cdFx0XHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmoxLCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqMiwga2V5KSk7XHJcblx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0b2JqMVtrZXldID0gb2JqMltrZXldO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9IGNhdGNoKGUpIHt9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHRyZXR1cm4gb2JqMTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9tZXJnZUNhbGxiYWNrIGZyb20gJy4vbWVyZ2VDYWxsYmFjay5qcyc7XHJcblxyXG4vKipcclxuICAqIE1lcmdlcyB2YWx1ZXMgZnJvbSBzdWJzZXF1ZW50IGFycmF5cy9vYmplY3RzIGZpcnN0IGFycmF5L29iamVjdDtcclxuICAqIG9wdGlvbmFsbHkgcmVjdXJzaXZlXHJcbiAgKlxyXG4gICogQHBhcmFtIGFycmF5IC4uLm9ianNcclxuICAqXHJcbiAgKiBAcmV0dXJuIHZvaWRcclxuICAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiguLi5vYmpzKSB7XHJcblx0cmV0dXJuIF9tZXJnZUNhbGxiYWNrKG9ianMsIChrLCBvYmoxLCBvYmoyKSA9PiB7XHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9LCBmYWxzZS8qZGVlcFByb3BzKi8sIGZhbHNlLyppc1JlcGxhY2UqLywgZmFsc2UvKndpdGhTeW1ib2xzKi8pO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgSnNlbiwge1xyXG5cdFN0YXRlbWVudHNcclxufSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9qc2VuJztcclxuaW1wb3J0IF93cmFwcGVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3dyYXBwZWQuanMnO1xyXG5pbXBvcnQgX3Vud3JhcCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci91bndyYXAuanMnO1xyXG5pbXBvcnQgX21lcmdlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL21lcmdlLmpzJztcclxuaW1wb3J0IF9pc1N0cmluZyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzU3RyaW5nLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ2FsbCBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERpcmVjdGl2ZXMgZXh0ZW5kcyBTdGF0ZW1lbnRzIHtcclxuXHQgXHJcblx0LyoqXHJcblx0ICogUmV0dXJucyBhIGZsYXQgbGlzdCBvZiBydWxlcyB3aG9zZVxyXG5cdCAqIHRoYXQgaGF2ZSBub3QgYmVlbiBvdmVycmlkZW4uXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGFycmF5XHJcblx0ICovXHJcblx0ZmlsdGVyKCkge1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gQ0FTQ0FESU5HIEFORCBPVkVSUklESU5HXHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHR2YXIgZGlyZWN0aXZlcyA9IFtdO1xyXG5cdFx0dGhpcy5zdG10cy5mb3JFYWNoKGRpcmVjdGl2ZSA9PiB7XHJcblx0XHRcdERpcmVjdGl2ZXMuZmxhdHRlbihkaXJlY3RpdmUsIF9kaXJlY3RpdmUgPT4ge1xyXG5cdFx0XHRcdGRpcmVjdGl2ZXMucHVzaChfZGlyZWN0aXZlKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdGRpcmVjdGl2ZXMgPSBkaXJlY3RpdmVzLnJlZHVjZSgoYnVpbGQsIGN1cnJlbnQpID0+IHtcclxuXHRcdFx0YnVpbGQuZm9yRWFjaChleGlzdGluZyA9PiB7XHJcblx0XHRcdFx0aWYgKGV4aXN0aW5nLmlzRHVwbGljYXRlIHx8IGV4aXN0aW5nLm92ZXJyaWRkZW4pIHtcclxuXHRcdFx0XHRcdHJldHVybjtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKGN1cnJlbnQudG9TdHJpbmcoKSA9PT0gZXhpc3RpbmcudG9TdHJpbmcoKSBcclxuXHRcdFx0XHQmJiAoY3VycmVudC5pbXBvcnRhbnQgPT09IGV4aXN0aW5nLmltcG9ydGFudCB8fCBjdXJyZW50LmZhbGxiYWNrID09PSBleGlzdGluZy5mYWxsYmFjaykpIHtcclxuXHRcdFx0XHRcdGN1cnJlbnQuaXNEdXBsaWNhdGUgPSB0cnVlO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAoY3VycmVudC5pbXBvcnRhbnQgIHx8IGV4aXN0aW5nLmZhbGxiYWNrKSB7XHJcblx0XHRcdFx0XHRleGlzdGluZy5vdmVycmlkZGVuID0gdHJ1ZTtcclxuXHRcdFx0XHR9IGVsc2UgaWYgKChleGlzdGluZy5pbXBvcnRhbnQgfHwgY3VycmVudC5mYWxsYmFjaykpIHtcclxuXHRcdFx0XHRcdGN1cnJlbnQub3ZlcnJpZGRlbiA9IHRydWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0cmV0dXJuIGJ1aWxkLmNvbmNhdChbY3VycmVudF0pO1xyXG5cdFx0fSwgW10pO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gRklOQUwgRklMVEVSSU5HIEFORCBQQVJTSU5HXHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRyZXR1cm4gZGlyZWN0aXZlcy5maWx0ZXIoZGlyZWN0aXZlID0+ICFkaXJlY3RpdmUuaXNEdXBsaWNhdGUgJiYgIWRpcmVjdGl2ZS5vdmVycmlkZGVuKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogUmV3cml0ZXMgZGlyZWN0aXZlcy5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYXJyYXlcclxuXHQgKi9cclxuXHRzdGF0aWMgZmxhdHRlbihkaXJlY3RpdmUsIGNhbGxiYWNrLCBhc3NlcnRpb24gPSAnJykge1xyXG5cdFx0aWYgKGRpcmVjdGl2ZS5qc2VuVHlwZSA9PT0gJ0lmQ29uZGl0aW9uYWwnKSB7XHJcblx0XHRcdC8vID09PT09PT09PT09PT09PT09PT09PT1cclxuXHRcdFx0Ly8gT24gdHJ1ZVxyXG5cdFx0XHQvLyA9PT09PT09PT09PT09PT09PT09PT09XHJcblx0XHRcdHZhciBfYXNzZXJ0aW9uID0gJygnICsgZGlyZWN0aXZlLmFzc2VydGlvbi50b1N0cmluZygpICsgJyknO1xyXG5cdFx0XHRpZiAoZGlyZWN0aXZlLm9uVHJ1ZSkge1xyXG5cdFx0XHRcdGlmIChkaXJlY3RpdmUub25UcnVlLmpzZW5UeXBlID09PSAnU3RhdGVtZW50cycpIHtcclxuXHRcdFx0XHRcdGRpcmVjdGl2ZS5vblRydWUuc3RtdHMuZm9yRWFjaChfZGlyZWN0aXZlID0+IHtcclxuXHRcdFx0XHRcdFx0RGlyZWN0aXZlcy5mbGF0dGVuKF9kaXJlY3RpdmUsIGNhbGxiYWNrLCAoYXNzZXJ0aW9uID8gYXNzZXJ0aW9uICsgJyAmJiAnIDogJycpICsgX2Fzc2VydGlvbilcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHREaXJlY3RpdmVzLmZsYXR0ZW4oZGlyZWN0aXZlLm9uVHJ1ZSwgY2FsbGJhY2ssIChhc3NlcnRpb24gPyBhc3NlcnRpb24gKyAnICYmICcgOiAnJykgKyBfYXNzZXJ0aW9uKVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHQvLyA9PT09PT09PT09PT09PT09PT09PT09XHJcblx0XHRcdC8vIE9uIGZhbHNlXHJcblx0XHRcdC8vID09PT09PT09PT09PT09PT09PT09PT1cclxuXHRcdFx0aWYgKGRpcmVjdGl2ZS5vbkZhbHNlKSB7XHJcblx0XHRcdFx0aWYgKGRpcmVjdGl2ZS5vbkZhbHNlLmpzZW5UeXBlID09PSAnU3RhdGVtZW50cycpIHtcclxuXHRcdFx0XHRcdGRpcmVjdGl2ZS5vbkZhbHNlLnN0bXRzLmZvckVhY2goX2RpcmVjdGl2ZSA9PiB7XHJcblx0XHRcdFx0XHRcdERpcmVjdGl2ZXMuZmxhdHRlbihfZGlyZWN0aXZlLCBjYWxsYmFjaywgKGFzc2VydGlvbiA/IGFzc2VydGlvbiArICcgJiYgJyA6ICcnKSArICchJyArIF9hc3NlcnRpb24pXHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0RGlyZWN0aXZlcy5mbGF0dGVuKGRpcmVjdGl2ZS5vbkZhbHNlLCBjYWxsYmFjaywgKGFzc2VydGlvbiA/IGFzc2VydGlvbiArICcgJiYgJyA6ICcnKSArICchJyArIF9hc3NlcnRpb24pXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpZiAoYXNzZXJ0aW9uKSB7XHJcblx0XHRcdFx0Y2FsbGJhY2soSnNlbi5wYXJzZShhc3NlcnRpb24gKyAnICYmIFwiW0VORElGXVwiICYmICcgKyBkaXJlY3RpdmUudG9TdHJpbmcoKSkpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGNhbGxiYWNrKGRpcmVjdGl2ZSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKGV4cHIsIHBhcmFtcyA9IHt9KSB7XHJcblx0XHRyZXR1cm4gc3VwZXIucGFyc2UoXHJcblx0XHRcdCFleHByLnRyaW0oKS5lbmRzV2l0aCgnOycpID8gZXhwciArICc7JyA6IGV4cHIsIFxyXG5cdFx0XHQoX2V4cHIsIF9QYXJzZXJzID0gbnVsbCwgX3BhcmFtcyA9IG51bGwpICA9PiBKc2VuLnBhcnNlKF9leHByLCBfUGFyc2VycywgX3BhcmFtcyA/IF9tZXJnZShwYXJhbXMsIF9wYXJhbXMpIDogcGFyYW1zKS8qcGFyc2VDYWxsYmFjayovLCBcclxuXHRcdFx0RGlyZWN0aXZlcy8qU3RhdGljKi9cclxuXHRcdCk7XHJcblx0fVxyXG59OyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJy4uL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNOdW1lcmljIGZyb20gJy4uL2pzL2lzTnVtZXJpYy5qcyc7XHJcblxyXG4vKipcclxuICogTG9vcHMgdGhydSBvYmogZmxhdGx5IHdpdGggYSBjYWxsYmFjayBmdW5jdGlvbi5cclxuICogU3RvcHMgd2hlbiBjYWxsYmFjayByZXR1cm5zIGEgbm9uLXVuZGVmaW5lZCB2YWx1ZS5cclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdCBcdFx0XHRvYmogXHRcdFx0VGhlIGFycmF5IG9yIG9iamVjdCB0byBpdGVyYXRlLlxyXG4gKiBAcGFyYW0gZnVuY3Rpb24gXHRcdFx0XHRjYWxsYmFjayBcdFx0VGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcmV0dXJuIG1peGVkfG51bGxcdFx0XHRBbnkgbm9uLW51bGwgcmV0dXJuIGZyb20gY2FsbGJhY2tcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iaiwgY2FsbGJhY2spIHtcclxuXHR2YXIgcmV0dXJuVmFsdWUgPSB1bmRlZmluZWQ7XHJcblx0aWYgKF9pc1R5cGVPYmplY3Qob2JqKSkge1xyXG5cdFx0T2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKChrLCBpKSA9PiB7XHJcblx0XHRcdGlmIChyZXR1cm5WYWx1ZSAhPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRyZXR1cm5WYWx1ZSA9IGNhbGxiYWNrKF9pc051bWVyaWMoaykgPyBwYXJzZUZsb2F0KGspIDogaywgb2JqW2tdLCBpKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cdHJldHVybiByZXR1cm5WYWx1ZTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnLi4vanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBfaXNOdW1lcmljIGZyb20gJy4uL2pzL2lzTnVtZXJpYy5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJy4uL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfbWVyZ2VDYWxsYmFjayBmcm9tICcuL21lcmdlQ2FsbGJhY2suanMnO1xyXG5cclxuLyoqXHJcbiAqIENvcGllcyBhbiBvYmplY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdG9ialxyXG4gKiBAcGFyYW0gYXJyYXlcdFx0IFx0ZmlsdGVyXHJcbiAqXHJcbiAqIEByZXR1cm4gb2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmosIGZpbHRlciA9IFtdLCB3aXRoU3ltYm9scyA9IHRydWUpIHtcclxuXHR2YXIgZGVwdGggPSAwO1xyXG5cdGlmIChfaXNOdW1lcmljKGFyZ3VtZW50c1swXSkgJiYgX2lzVHlwZU9iamVjdChhcmd1bWVudHNbMV0pKSB7XHJcblx0XHRkZXB0aCA9IGFyZ3VtZW50c1swXTtcclxuXHRcdG9iaiA9IGFyZ3VtZW50c1sxXTtcclxuXHRcdGZpbHRlciA9IGFyZ3VtZW50c1syXSB8fCBbXTtcclxuXHR9XHJcblx0cmV0dXJuIF9tZXJnZUNhbGxiYWNrKFtkZXB0aCwge30sIG9ial0sIChrZXksIG9iajEsIG9iajIpID0+IHtcclxuXHRcdHJldHVybiBfaXNGdW5jdGlvbihmaWx0ZXIpID8gZmlsdGVyKGtleSkgXHJcblx0XHRcdDogKF9pc0FycmF5KGZpbHRlcikgJiYgZmlsdGVyLmxlbmd0aCA/IGZpbHRlci5pbmRleE9mKGtleSkgPiAtMSA6IHRydWUpO1xyXG5cdH0sIGZhbHNlLypkZWVwUHJvcHMqLywgZmFsc2UvKmlzUmVwbGFjZSovLCB3aXRoU3ltYm9scyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBpbnRlcnNlY3Rpb24gb2YgdHdvIGFycmF5cztcclxuICogb3B0aW9uYWxseSB1c2luZyBhIGN1c3RvbSBtYXRjaGluZyBmdW5jdGlvbi5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqIEBwYXJhbSBhcnJheVx0IFx0YXJyMlxyXG4gKiBAcGFyYW0gZnVuY3Rpb24gXHRjYWxsYmFja1xyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIGFycjIsIGNhbGxiYWNrID0gbnVsbCkge1xyXG5cdHJldHVybiAhX2lzQXJyYXkoYXJyMikgPyBbXSA6IGFyci5maWx0ZXIodmFsMSA9PiBjYWxsYmFjayBcclxuXHRcdD8gYXJyMi5maWx0ZXIodmFsMiA9PiBjYWxsYmFjayh2YWwxLCB2YWwyKSkubGVuZ3RoIFxyXG5cdFx0OiBhcnIyLmluZGV4T2YodmFsMSkgIT09IC0xXHJcblx0KTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzT2JqZWN0LmpzJztcclxuaW1wb3J0IF9wdXNoVW5pcXVlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3B1c2hVbmlxdWUuanMnO1xyXG5pbXBvcnQgX2ludGVyc2VjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9pbnRlcnNlY3QuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgSFRNTCBDb250ZXh0IE1vZGVsIFNjaGVtYS5cclxuICogQHNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuXHJcbi8qKlxyXG4gKiBAb2JqZWN0XHJcbiAqL1xyXG5jb25zdCBTY2hlbWEgPSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogQG9iamVjdFxyXG5cdCAqL1xyXG5cdHN0ZDoge1xyXG5cdFx0LyoqXHJcblx0XHQgKiBAdW5jYXRlZ29yaXplZFxyXG5cdFx0ICovXHJcblx0XHRodG1sOiB7XHJcblx0XHRcdHR5cGU6IFsnI3NlY3Rpb25pbmctcm9vdCddLFxyXG5cdFx0XHRtb2RlbDogWydoZWFkJywgJ2JvZHknXSxcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdGNhcHRpb246IHtcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnLCAnIXRhYmxlJ10sXHJcblx0XHRcdHNpbmdsZXRvbjogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHRjb2w6IHtcclxuXHRcdFx0bW9kZWw6IFsnI25vdGhpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRjb2xncm91cDoge1xyXG5cdFx0XHRtb2RlbDogW3snY29sZ3JvdXBbc3Bhbl0nOiBbJyNub3RoaW5nJ119LCB7Jzpub3QoY29sZ3JvdXBbc3Bhbl0pJzogWydjb2wnLCAndGVtcGxhdGUnXX1dLFxyXG5cdFx0XHRzaW5nbGV0b246IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0ZGQ6IHtcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAnZGVmaW5pdGlvbicsXHJcblx0XHR9LFxyXG5cdFx0ZHQ6IHtcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnLCAnISNoZWFkaW5nJywgJyEjc2VjdGlvbmluZycsICchaGVhZGVyJywgJyFmb290ZXInXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAndGVybScsXHJcblx0XHR9LFxyXG5cdFx0ZmlnY2FwdGlvbjoge1xyXG5cdFx0XHRtb2RlbDogWycjZmxvdyddLFxyXG5cdFx0XHRzaW5nbGV0b246IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0aGVhZDoge1xyXG5cdFx0XHRtb2RlbDogWycjbWV0YWRhdGEnXSxcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdGxlZ2VuZDoge1xyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdGxpOiB7XHJcblx0XHRcdG1vZGVsOiBbJyNmbG93J10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ2xpc3RpdGVtJyxcclxuXHRcdH0sXHJcblx0XHRvcHRncm91cDoge1xyXG5cdFx0XHRtb2RlbDogWydvcHRpb24nLCAnI3NjcmlwdC1zdXBwb3J0aW5nJ10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ2dyb3VwJyxcclxuXHRcdH0sXHJcblx0XHRvcHRpb246IHtcclxuXHRcdFx0bW9kZWw6IFt7J29wdGlvbltsYWJlbF1bdmFsdWVdJzogWycjbm90aGluZyddfSwgeydvcHRpb25bbGFiZWxdOm5vdChvcHRpb25bdmFsdWVdKSc6IFsnI3RleHQnXX0sIHsnOm5vdChvcHRpb25bbGFiZWxdKSc6IFsnI3RleHQnXX1dLFxyXG5cdFx0fSxcclxuXHRcdHBhcmFtOiB7XHJcblx0XHRcdG1vZGVsOiBbJyNub3RoaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0cnA6IHtcclxuXHRcdFx0bW9kZWw6IFsnI3RleHQnXSxcclxuXHRcdH0sXHJcblx0XHRydDoge1xyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRzb3VyY2U6IHtcclxuXHRcdFx0bW9kZWw6IFsnI25vdGhpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRzdW1tYXJ5OiB7XHJcblx0XHRcdC8qY29tcGxpY2F0ZWQqL1xyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnLCAnI2hlYWRpbmcnXSxcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdHRyYWNrOiB7XHJcblx0XHRcdG1vZGVsOiBbJyNub3RoaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0dGJvZHk6IHtcclxuXHRcdFx0bW9kZWw6IFsnI3NjcmlwdC1zdXBwb3J0aW5nJywgJ3RyJ10sXHJcblx0XHR9LFxyXG5cdFx0dGQ6IHtcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnLCAnISNoZWFkaW5nJywgJyEjc2VjdGlvbmluZycsICchaGVhZGVyJywgJyFmb290ZXInXSxcclxuXHRcdH0sXHJcblx0XHR0Zm9vdDoge1xyXG5cdFx0XHRtb2RlbDogWyd0cicsICcjc2NyaXB0LXN1cHBvcnRpbmcnXSxcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdHRoZWFkOiB7XHJcblx0XHRcdG1vZGVsOiBbJ3RyJywgJyNzY3JpcHQtc3VwcG9ydGluZyddLFxyXG5cdFx0XHRzaW5nbGV0b246IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0dHI6IHtcclxuXHRcdFx0bW9kZWw6IFsnI3NjcmlwdC1zdXBwb3J0aW5nJywgJ3RkJywgJ3RoJ10sXHJcblx0XHR9LFxyXG5cdFx0LyoqXHJcblx0XHQgKiBAY2F0ZWdvcml6ZWRcclxuXHRcdCAqL1xyXG5cdFx0YToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsIHsnYVtocmVmXSc6IFsnI2ludGVyYWN0aXZlJywgJyNwYWxwYWJsZSddfV0sIFxyXG5cdFx0XHRtb2RlbDogWycjdHJhbnNwYXJlbnQnLCAnISNpbnRlcmFjdGl2ZScsICchYSddLFxyXG5cdFx0fSxcclxuXHRcdGFiYnI6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnLCAnI3BocmFzaW5nJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZycsXSxcclxuXHRcdH0sXHJcblx0XHRhZGRyZXNzOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjZmxvdycsICchI2hlYWRpbmcnLCAnISNzZWN0aW9uaW5nJywgJyFoZWFkZXInLCAnIWZvb3RlcicsICchYWRkcmVzcycsXSxcclxuXHRcdH0sXHJcblx0XHQvLyBJZiBhIGNoaWxkIG9mIDxtYXA+XHJcblx0XHRhcmVhOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjbm90aGluZyddLFxyXG5cdFx0fSxcclxuXHRcdGFydGljbGU6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnLCAnI3NlY3Rpb25pbmctY29udGVudCddLCBcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAnYXJ0aWNsZScsXHJcblx0XHRcdGFjY2VwdGFibGVSb2xlczogWydhcHBsaWNhdGlvbicsICdhcnRpY2xlJywgJ2RvY3VtZW50JywgJ21haW4nLF0sXHJcblx0XHR9LFxyXG5cdFx0YXNpZGU6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnLCAnI3NlY3Rpb25pbmctY29udGVudCddLCBcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAnY29tcGxlbWVudGFyeScsXHJcblx0XHRcdGFjY2VwdGFibGVSb2xlczogWydjb21wbGVtZW50YXJ5JywgJ25vdGUnLCAnc2VhcmNoJyxdLFxyXG5cdFx0fSxcclxuXHRcdGF1ZGlvOiB7XHJcblx0XHRcdHR5cGU6IFsnI2VtYmVkZGVkJywgJyNmbG93JywgJyNwaHJhc2luZycsIHsnYXVkaW9bY29udHJvbHNdJzogWycjaW50ZXJhY3RpdmUnLCAnI3BhbHBhYmxlJ119XSwgXHJcblx0XHRcdG1vZGVsOiBbJyN0cmFuc3BhcmVudCcsICchI21lZGlhJywgJ3RyYWNrJywgeyc6bm90KGF1ZGlvW3NyY10pJzogWydzb3VyY2UnXX1dLFxyXG5cdFx0fSxcclxuXHRcdGI6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnLCAnI3BocmFzaW5nJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdGJhc2U6IHtcclxuXHRcdFx0dHlwZTogWycjbWV0YWRhdGEnXSxcclxuXHRcdFx0bW9kZWw6IFsnI25vdGhpbmcnXSxcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdGJkaToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwYWxwYWJsZScsICcjcGhyYXNpbmcnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0YmRvOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJywgJyNwaHJhc2luZyddLFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRibG9ja3F1b3RlOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJywgJyNzZWN0aW9uaW5nLXJvb3QnXSxcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnXSxcclxuXHRcdH0sXHJcblx0XHRib2R5OiB7XHJcblx0XHRcdHR5cGU6IFsnI3NlY3Rpb25pbmctcm9vdCddLCBcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnLCAnQGJhbm5lcicsICdAY29udGVudGluZm8nLCAnQGNvbXBsZW1lbnRhcnknLCAnQG1haW4nXSxcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdGJyOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjbm90aGluZyddLFxyXG5cdFx0fSxcclxuXHRcdGJ1dHRvbjoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNpbnRlcmFjdGl2ZScsICcjcGFscGFibGUnLCAnI3BocmFzaW5nJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnLCAnISNpbnRlcmFjdGl2ZSddLFxyXG5cdFx0fSxcclxuXHRcdGNhbnZhczoge1xyXG5cdFx0XHR0eXBlOiBbJyNlbWJlZGRlZCcsICcjZmxvdycsICcjcGFscGFibGUnLCAnI3BocmFzaW5nJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjdHJhbnNwYXJlbnQnLCAnISNpbnRlcmFjdGl2ZScsICdhJywgJ2ltZ1t1c2VtYXBdJywgJ2J1dHRvbicsICdpbnB1dFt0eXBlPVwiYnV0dG9uXCJdJywgJ2lucHV0W3R5cGU9XCJyYWRpb1wiXScsICdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nLCAnc2VsZWN0W211bHRpcGxlXScsICdzZWxlY3Rbc2l6ZT49MV0nLCAvKmhhcyB0YWJpbmRleCBidXQgbm90ICNpbnRlcmFjdGl2ZSovJ1t0YWJpbmRleF0hI2ludGVyYWN0aXZlJ10sXHJcblx0XHR9LFxyXG5cdFx0Y2l0ZToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwYWxwYWJsZScsICcjcGhyYXNpbmcnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0Y29kZToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwYWxwYWJsZScsICcjcGhyYXNpbmcnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0ZGF0YToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwYWxwYWJsZScsICcjcGhyYXNpbmcnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0ZGF0YWxpc3Q6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJywgJyNzY3JpcHQtc3VwcG9ydGluZycsICdvcHRpb24nXSxcclxuXHRcdH0sXHJcblx0XHRkZWw6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3RyYW5zcGFyZW50J10sXHJcblx0XHR9LFxyXG5cdFx0ZGV0YWlsczoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNpbnRlcmFjdGl2ZScsICcjcGFscGFibGUnLCAnI3NlY3Rpb25pbmctcm9vdCddLFxyXG5cdFx0XHRtb2RlbDogWycjZmxvdycsICdzdW1tYXJ5J10sXHJcblx0XHR9LFxyXG5cdFx0ZGZuOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJywgJyNwaHJhc2luZyddLFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnLCAnIWRmbiddLFxyXG5cdFx0XHRpbXBsaWNpdFJvbGU6ICd0ZXJtJyxcclxuXHRcdH0sXHJcblx0XHRkaWFsb2c6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjc2VjdGlvbmluZy1yb290J10sXHJcblx0XHRcdG1vZGVsOiBbJyNmbG93J10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ2RpYWxvZycsXHJcblx0XHR9LFxyXG5cdFx0ZGl2OiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJ10sXHJcblx0XHRcdC8qY29tcGxpY2F0ZWQqL1xyXG5cdFx0XHRtb2RlbDogW3snZGwgPiBkaXYnOiBbJ2R0JywgJ2RkJ119LCB7ZGl2LypUT0RPJzpub3QoZGwgPiBkaXYpJyovOiBbJyNmbG93J119XSxcclxuXHRcdH0sXHJcblx0XHRkbDoge1xyXG5cdFx0XHQvKmNvbXBsaWNhdGVkKi9cclxuXHRcdFx0dHlwZTogWycjZmxvdycsIC8qezpjb250YWlucyg+ICogbmFtZS12YWx1ZSBncm91cCk6IFsnI3BhbHBhYmxlJ119Ki9dLFxyXG5cdFx0XHQvKmNvbXBsaWNhdGVkKi9cclxuXHRcdFx0bW9kZWw6IFsnI3NjcmlwdC1zdXBwb3J0aW5nJywgJ2RsJywgJ2R0JywgJ2RpdiddLFxyXG5cdFx0fSxcclxuXHRcdGVtOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJywgJyNwaHJhc2luZyddLFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRlbWJlZDoge1xyXG5cdFx0XHR0eXBlOiBbJyNlbWJlZGRlZCcsICcjZmxvdycsICcjcGhyYXNpbmcnLCAnI2ludGVyYWN0aXZlJywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFsnI25vdGhpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRmaWVsZHNldDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNzZWN0aW9uaW5nLXJvb3QnLCAnI3BhbHBhYmxlJ10sXHJcblx0XHRcdG1vZGVsOiBbJ2xlZ2VuZCcsICcjZmxvdyddLFxyXG5cdFx0fSxcclxuXHRcdGZpZ3VyZToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNzZWN0aW9uaW5nLXJvb3QnLCAnI3BhbHBhYmxlJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNmbG93JywgJ2ZpZ2NhcHRpb24nXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAnZmlndXJlJyxcclxuXHRcdH0sXHJcblx0XHRmb290ZXI6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnXSxcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnLCAnIWhlYWRlcicsICchZm9vdGVyJ10sXHJcblx0XHRcdGFjY2VwdGFibGVSb2xlczogWydjb250ZW50aW5mbycsXSxcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdGZvcm06IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnXSxcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnLCAnIWZvcm0nXSxcclxuXHRcdH0sXHJcblx0XHRoMToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNoZWFkaW5nJywgJyNwYWxwYWJsZSddLFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAnaGVhZGluZycsXHJcblx0XHR9LFxyXG5cdFx0aDI6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjaGVhZGluZycsICcjcGFscGFibGUnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ2hlYWRpbmcnLFxyXG5cdFx0fSxcclxuXHRcdGgzOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI2hlYWRpbmcnLCAnI3BhbHBhYmxlJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0XHRpbXBsaWNpdFJvbGU6ICdoZWFkaW5nJyxcclxuXHRcdH0sXHJcblx0XHRoNDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNoZWFkaW5nJywgJyNwYWxwYWJsZSddLFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAnaGVhZGluZycsXHJcblx0XHR9LFxyXG5cdFx0aDU6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjaGVhZGluZycsICcjcGFscGFibGUnXSxcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ2hlYWRpbmcnLFxyXG5cdFx0fSxcclxuXHRcdGg2OiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI2hlYWRpbmcnLCAnI3BhbHBhYmxlJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0XHRpbXBsaWNpdFJvbGU6ICdoZWFkaW5nJyxcclxuXHRcdH0sXHJcblx0XHRoZWFkZXI6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnXSxcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnLCAnIWhlYWRlcicsICchZm9vdGVyJ10sXHJcblx0XHRcdGFjY2VwdGFibGVSb2xlczogWydiYW5uZXInLF0sXHJcblx0XHRcdHNpbmdsZXRvbjogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHRoZ3JvdXA6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjaGVhZGluZycsICcjcGFscGFibGUnXSxcclxuXHRcdFx0bW9kZWw6IFsnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCAnI3NjcmlwdC1zdXBwb3J0aW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0aHI6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdyddLFxyXG5cdFx0XHRtb2RlbDogWycjbm90aGluZyddLFxyXG5cdFx0XHRpbXBsaWNpdFJvbGU6ICdzZXBhcmF0b3InLFxyXG5cdFx0fSxcclxuXHRcdGk6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnLCAnI3BocmFzaW5nJ10sXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdGlmcmFtZToge1xyXG5cdFx0XHR0eXBlOiBbJyNlbWJlZGRlZCcsICcjZmxvdycsICcjcGhyYXNpbmcnLCAnI2ludGVyYWN0aXZlJywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFsnI25vdGhpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRpbWc6IHtcclxuXHRcdFx0dHlwZTogWycjZW1iZWRkZWQnLCAnI2Zsb3cnLCAnI3BocmFzaW5nJywgeydpbWdbdXNlbWFwXSc6IFsnI2ludGVyYWN0aXZlJywgJyNwYWxwYWJsZSddfV0sIFxyXG5cdFx0XHRtb2RlbDogWycjbm90aGluZyddLFxyXG5cdFx0fSxcclxuXHRcdGlucHV0OiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJywgeydpbnB1dDpub3QoW3R5cGUhPVwiaGlkZGVuXCJdKSc6IFsnI2ludGVyYWN0aXZlJywgJyNwYWxwYWJsZSddfV0sIFxyXG5cdFx0XHRtb2RlbDogWycjbm90aGluZyddLFxyXG5cdFx0fSxcclxuXHRcdGluczoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyN0cmFuc3BhcmVudCddLFxyXG5cdFx0fSxcclxuXHRcdGtiZDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdGxhYmVsOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJywgJyNpbnRlcmFjdGl2ZScsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZycsICchbGFiZWwnXSxcclxuXHRcdH0sXHJcblx0XHRsaW5rOiB7XHJcblx0XHRcdHR5cGU6IFsnI21ldGFkYXRhJywgeydib2R5IGxpbmsnOiBbJyNmbG93JywgJyNwaHJhc2luZyddfV0sIFxyXG5cdFx0XHRtb2RlbDogWycjbm90aGluZyddLFxyXG5cdFx0fSxcclxuXHRcdG1haW46IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNmbG93J10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ21haW4nLFxyXG5cdFx0XHRzaW5nbGV0b246IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0bWFwOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFsnI3RyYW5zcGFyZW50J10sXHJcblx0XHR9LFxyXG5cdFx0bWFyazoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyN0cmFuc3BhcmVudCddLFxyXG5cdFx0fSxcclxuXHRcdG1hdGg6IHtcclxuXHRcdFx0dHlwZTogWycjZW1iZWRkZWQnLCAnI2Zsb3cnLCAnI3BocmFzaW5nJywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0Lypjb21wbGljYXRlZCovXHJcblx0XHRcdG1vZGVsOiBbXSxcclxuXHRcdH0sXHJcblx0XHRtZW51OiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCB7Jzpjb250YWlucyg+IGxpKSc6IFsnI3BhbHBhYmxlJ119XSwgXHJcblx0XHRcdG1vZGVsOiBbJyNzY3JpcHQtc3VwcG9ydGluZycsICdsaSddLFxyXG5cdFx0XHRpbXBsaWNpdFJvbGU6ICdsaXN0JyxcclxuXHRcdH0sXHJcblx0XHRtZXRhOiB7XHJcblx0XHRcdHR5cGU6IFsnI21ldGFkYXRhJywgeydtZXRhW2l0ZW1wcm9wXSc6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJ119XSwgXHJcblx0XHRcdG1vZGVsOiBbJyNub3RoaW5nJ10sXHJcblx0XHRcdG5hbWVzOiBbJ2FwcGxpY2F0aW9uLW5hbWUnLCAnYXV0aG9yJywgJ2Rlc2NyaXB0aW9uJywgJ2dlbmVyYXRvcicsICdrZXl3b3JkcycsICdyZWZlcnJlcicsICd0aGVtZS1jb2xvciddLFxyXG5cdFx0fSxcclxuXHRcdG1ldGVyOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI2xhYmVsYWJsZScsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnLCAnIW1ldGVyJ10sXHJcblx0XHR9LFxyXG5cdFx0bmF2OiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3NlY3Rpb25pbmctY29udGVudCcsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNmbG93J10sXHJcblx0XHRcdGltcGxpY2l0Um9sZTogJ25hdmlnYXRpb24nLFxyXG5cdFx0XHRhY2NlcHRhYmxlUm9sZXM6IFsnbmF2aWdhdGlvbicsXSxcclxuXHRcdH0sXHJcblx0XHRub3NjcmlwdDoge1xyXG5cdFx0XHR0eXBlOiBbJyNtZXRhZGF0YScsICcjZmxvdycsICcjcGhyYXNpbmcnXSwgXHJcblx0XHRcdG1vZGVsOiBbeydoZWFkIGxpbmsnOiBbJ3N0eWxlJywgJ21ldGEnLCAnbGluayddfSwgeyc6bm90KGhlYWQgbGluayknOiBbJyN0cmFuc3BhcmVudCcsICchbm9zY3JpcHQnXX1dLFxyXG5cdFx0fSxcclxuXHRcdG9iamVjdDoge1xyXG5cdFx0XHR0eXBlOiBbJyNlbWJlZGRlZCcsICcjZmxvdycsICcjcGhyYXNpbmcnLCB7J29iamVjdFt1c2VtYXBdJzogWycjaW50ZXJhY3RpdmUnLCAnI3BhbHBhYmxlJ119XSwgXHJcblx0XHRcdG1vZGVsOiBbJyN0cmFuc3BhcmVudCcsICdwYXJhbSddLFxyXG5cdFx0fSxcclxuXHRcdG9sOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCB7Jzpjb250YWlucyg+IGxpKSc6IFsnI3BhbHBhYmxlJ119XSwgXHJcblx0XHRcdG1vZGVsOiBbJyNzY3JpcHQtc3VwcG9ydGluZycsICdsaSddLFxyXG5cdFx0XHRpbXBsaWNpdFJvbGU6ICdsaXN0JyxcclxuXHRcdH0sXHJcblx0XHRvdXRwdXQ6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjbGFiZWxhYmxlJywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZycsICchbWV0ZXInXSxcclxuXHRcdH0sXHJcblx0XHRwOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRwaWN0dXJlOiB7XHJcblx0XHRcdHR5cGU6IFsnI2VtYmVkZGVkJywgJyNmbG93JywgJyNwaHJhc2luZyddLCBcclxuXHRcdFx0bW9kZWw6IFsnc291cmNlJywgJ2ltZycsICcjYWNyaXB0LXN1cHBvcnRpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRwcmU6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdHByb2dyZXNzOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI2xhYmVsYWJsZScsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnLCAnIXByb2dyZXNzJ10sXHJcblx0XHR9LFxyXG5cdFx0cToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdHJ1Ynk6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sXHJcblx0XHRcdC8qY29tcGxpY2F0ZWQqLyBcclxuXHRcdFx0bW9kZWw6IFsncnAnLCAncnQnXSxcclxuXHRcdH0sXHJcblx0XHRzOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFsnI3BocmFzaW5nJ10sXHJcblx0XHR9LFxyXG5cdFx0c2FtcDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdHNjcmlwdDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNtZXRhZGF0YScsICcjcGhyYXNpbmcnLCAnI2FjcmlwdC1zdXBwb3J0aW5nJ10sIFxyXG5cdFx0XHRtb2RlbDogW3snc2NyaXB0W3NyY10nOiBbXX1dLFxyXG5cdFx0fSxcclxuXHRcdHNlY3Rpb246IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjc2VjdGlvbmluZy1jb250ZW50JywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnXSxcclxuXHRcdFx0aW1wbGljaXRSb2xlOiAncmVnaW9uJyxcclxuXHRcdFx0YWNjZXB0YWJsZVJvbGVzOiBbJ2FsZXJ0JywgJ2FsZXJ0ZGlhbG9nJywgJ2FwcGxpY2F0aW9uJywgJ2NvbnRlbnRpbmZvJywgJ2RpYWxvZycsICdkb2N1bWVudCcsICdsb2cnLCAnbWFpbicsICdtYXJxdWVlJywgJ3JlZ2lvbicsICdzZWFyY2gnLCAnc3RhdHVzJyxdLFxyXG5cdFx0fSxcclxuXHRcdHNlbGVjdDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNpbnRlcmFjdGl2ZScsICcjbGFiZWxhYmxlJywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJ29wdGlvbicsICdvcHRncm91cCcsICcjYWNyaXB0LXN1cHBvcnRpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRzbG90OiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjdHJhbnNwYXJlbnQnXSxcclxuXHRcdH0sXHJcblx0XHRzbWFsbDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdHNwYW46IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRzdHJvbmc6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHRzdHlsZToge1xyXG5cdFx0XHR0eXBlOiBbJyNtZXRhZGF0YSddLFxyXG5cdFx0XHRtb2RlbDogWycjdGV4dCddLFxyXG5cdFx0fSxcclxuXHRcdHN1Yjoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdHN1cDoge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdHN2Zzoge1xyXG5cdFx0XHR0eXBlOiBbJyNlbWJlZGRlZCcsICcjZmxvdycsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHQvKmNvbXBsaWNhdGVkKi9cclxuXHRcdFx0bW9kZWw6IFtdLFxyXG5cdFx0fSxcclxuXHRcdHRhYmxlOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWydjYXB0aW9uJywgJ2NvbGdyb3VwJywgJ3RoZWFkJywgJ3Rib2R5JywgJ3RyJywgJ3Rmb290JywgJyNzY3JpcHQtc3VwcG9ydGluZyddLFxyXG5cdFx0fSxcclxuXHRcdHRkOiB7XHJcblx0XHRcdHR5cGU6IFsnI3NlY3Rpb25pbmctcm9vdCddLCBcclxuXHRcdFx0bW9kZWw6IFsnI2Zsb3cnXSxcclxuXHRcdH0sXHJcblx0XHR0ZW1wbGF0ZToge1xyXG5cdFx0XHR0eXBlOiBbJyNtZXRhZGF0YScsICcjZmxvdycsICcjcGhyYXNpbmcnLCAnI3NjcmlwdC1zdXBwb3J0aW5nJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjbm90aGluZyddLFxyXG5cdFx0fSxcclxuXHRcdHRleHRhcmVhOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI2ludGVyYWN0aXZlJywgJyNsYWJlbGFibGUnLCAnI3BocmFzaW5nJywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFsnI3RleHQnXSxcclxuXHRcdH0sXHJcblx0XHR0aW1lOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCAnI3BocmFzaW5nJywgJyNwYWxwYWJsZSddLCBcclxuXHRcdFx0bW9kZWw6IFt7J3RpbWVbZGF0ZXRpbWVdJzogWycjcGhyYXNpbmcnXX0sIHsnOm5vdCh0aW1lW2RhdGV0aW1lXSknOiBbJyN0ZXh0J119XSxcclxuXHRcdH0sXHJcblx0XHR0aXRsZToge1xyXG5cdFx0XHR0eXBlOiBbJyNtZXRhZGF0YSddLFxyXG5cdFx0XHRtb2RlbDogWycjdGV4dCddLFxyXG5cdFx0XHRzaW5nbGV0b246IHRydWUsXHJcblx0XHR9LFxyXG5cdFx0dToge1xyXG5cdFx0XHR0eXBlOiBbJyNmbG93JywgJyNwaHJhc2luZycsICcjcGFscGFibGUnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNwaHJhc2luZyddLFxyXG5cdFx0fSxcclxuXHRcdHVsOiB7XHJcblx0XHRcdHR5cGU6IFsnI2Zsb3cnLCB7Jzpjb250YWlucyg+IGxpKSc6IFsnI3BhbHBhYmxlJ119XSwgXHJcblx0XHRcdG1vZGVsOiBbJyNzY3JpcHQtc3VwcG9ydGluZycsICdsaSddLFxyXG5cdFx0XHRpbXBsaWNpdFJvbGU6ICdsaXN0JyxcclxuXHRcdH0sXHJcblx0XHR2YXI6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnLCAnI3BhbHBhYmxlJ10sIFxyXG5cdFx0XHRtb2RlbDogWycjcGhyYXNpbmcnXSxcclxuXHRcdH0sXHJcblx0XHR2aWRlbzoge1xyXG5cdFx0XHR0eXBlOiBbJyNlbWJlZGRlZCcsICcjZmxvdycsICcjcGhyYXNpbmcnLCB7J3ZpZGVvW2NvbnRyb2xzXSc6IFsnI2ludGVyYWN0aXZlJywgJyNwYWxwYWJsZSddfV0sIFxyXG5cdFx0XHRtb2RlbDogWycjdHJhbnNwYXJlbnQnLCAnISNtZWRpYScsICd0cmFjaycsIHsnOm5vdCh2aWRlb1tzcmNdKSc6IFsnc291cmNlJ119XSxcclxuXHRcdH0sXHJcblx0XHR3YnI6IHtcclxuXHRcdFx0dHlwZTogWycjZmxvdycsICcjcGhyYXNpbmcnXSwgXHJcblx0XHRcdG1vZGVsOiBbJyNub3RoaW5nJ10sXHJcblx0XHR9LFxyXG5cdH0sXHJcblx0XHJcblx0LyoqXHJcblx0ICogQG9iamVjdFxyXG5cdCAqL1xyXG5cdGFyaWE6IHtcclxuXHRcdGJhbm5lcjoge1xyXG5cdFx0XHR0eXBlOiBbJ0BiYW5uZXInXSwgXHJcblx0XHRcdHNpbmdsZXRvbjogdHJ1ZSxcclxuXHRcdH0sXHJcblx0XHRjb250ZW50aW5mbzoge1xyXG5cdFx0XHR0eXBlOiBbJ0Bjb250ZW50aW5mbyddLCBcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdGNvbXBsZW1lbnRhcnk6IHtcclxuXHRcdFx0dHlwZTogWydAY29tcGxlbWVudGFyeSddLCBcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdG5hdmlnYXRpb246IHtcclxuXHRcdFx0dHlwZTogWydAbmF2aWdhdGlvbiddLCBcclxuXHRcdFx0c2luZ2xldG9uOiB0cnVlLFxyXG5cdFx0fSxcclxuXHRcdGxpc3Q6IHtcclxuXHRcdFx0dHlwZTogWydAbGlzdCddLCBcclxuXHRcdH0sXHJcblx0XHRsaXN0aXRlbToge1xyXG5cdFx0XHR0eXBlOiBbJ0BsaXN0aXRlbSddLCBcclxuXHRcdH0sXHJcblx0fSxcclxuXHRcclxuXHQvKipcclxuXHQgKiBSZXR1cm5zIHRoZSBzZW1hbnRpYyBjb250ZW50IG1vZGVsIGZvciB0aGUgZ2l2ZW4gZWxlbWVudC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBIVE1MRWxlbWVudFx0XHRcdFx0ZWxcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYXJyYXlcclxuXHQgKi9cclxuXHRnZXRDb250ZW50TW9kZWxGb3IoZWwpIHsgXHJcblx0XHR2YXIgZWxUYWdOYW1lID0gZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdHJldHVybiBTY2hlbWEuc3RkW2VsVGFnTmFtZV0gPyBTY2hlbWEuZXhwYW5kUnVsZXMoZWwsIFNjaGVtYS5zdGRbZWxUYWdOYW1lXS5tb2RlbCB8fCBbXSkgOiBbXTtcclxuXHR9LFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFJldHVybnMgdGhlIHNlbWFudGljIGNhdGVnb3JpZXMgZm9yIHRoZSBnaXZlbiBlbGVtZW50LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIEhUTUxFbGVtZW50XHRcdFx0XHRlbFxyXG5cdCAqIEBwYXJhbSBib29sXHRcdFx0XHRcdFx0cm9sZUluY2x1c2l2ZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBhcnJheVxyXG5cdCAqL1xyXG5cdGdldENhdGVnb3JpZXNGb3IoZWwsIHJvbGVJbmNsdXNpdmUgPSB0cnVlKSB7XHJcblx0XHR2YXIgZWxUYWdOYW1lID0gZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcclxuXHRcdHZhciBlbFNjaGVtYSA9IFNjaGVtYS5zdGRbZWxUYWdOYW1lXSB8fCBTY2hlbWEuYXJpYVtlbFRhZ05hbWVdIHx8IHt9O1xyXG5cdFx0dmFyIGN1cnJlbnRFbENhdGVnb3JpZXMgPSBbXTtcclxuXHRcdGlmIChyb2xlSW5jbHVzaXZlICYmICFlbC5ub2RlTmFtZS5zdGFydHNXaXRoKCcjJykgXHJcblx0XHQmJiAoZWwuaGFzQXR0cmlidXRlKCdyb2xlJykgfHwgZWxTY2hlbWEuaW1wbGljaXRSb2xlKSkge1xyXG5cdFx0XHQvLyBDdXJyZW50IGVsJ3MgaW1wbGlhYmxlL2FjY2VwdGFibGUgcm9sZXNcclxuXHRcdFx0Ly8gKFRoZXNlIHRha2UgcHJlY2VkZW5jZSBvdmVyIG5hdGl2ZSBzZW1hbnRpY3MpXHJcblx0XHRcdGlmIChlbC5oYXNBdHRyaWJ1dGUoJ3JvbGUnKSkge1xyXG5cdFx0XHRcdHZhciBkZWZpbmVkUm9sZXMgPSBlbC5nZXRBdHRyaWJ1dGUoJ3JvbGUnKS5zcGxpdCgnICcpO1xyXG5cdFx0XHRcdGVsLmdldEF0dHJpYnV0ZSgncm9sZScpLnNwbGl0KCcgJykuZm9yRWFjaChyb2xlID0+IHtcclxuXHRcdFx0XHRcdGlmIChlbFNjaGVtYSAmJiBlbFNjaGVtYS5hY2NlcHRhYmxlUm9sZXMgJiYgIWVsU2NoZW1hLmFjY2VwdGFibGVSb2xlcy5pbmNsdWRlcyhyb2xlKSkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyb2xlID0gcm9sZS50cmltKCk7XHJcblx0XHRcdFx0XHRjdXJyZW50RWxDYXRlZ29yaWVzLnB1c2goJ0AnICsgcm9sZSk7XHJcblx0XHRcdFx0XHRpZiAoU2NoZW1hLmFyaWFbcm9sZV0gJiYgU2NoZW1hLmFyaWFbcm9sZV0udHlwZSkge1xyXG5cdFx0XHRcdFx0XHRjdXJyZW50RWxDYXRlZ29yaWVzID0gY3VycmVudEVsQ2F0ZWdvcmllcy5jb25jYXQoU2NoZW1hLmV4cGFuZFJ1bGVzKGVsLCBTY2hlbWEuYXJpYVtyb2xlXS50eXBlIHx8IFtdKSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0gZWxzZSBpZiAoZWxTY2hlbWEuaW1wbGljaXRSb2xlKSB7XHJcblx0XHRcdFx0X3B1c2hVbmlxdWUoY3VycmVudEVsQ2F0ZWdvcmllcywgJ0AnICsgZWxTY2hlbWEuaW1wbGljaXRSb2xlLCBlbFRhZ05hbWUpO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBDdXJyZW50IG5vZGUncyBjYXRlZ29yaWVzL3RhZ25hbWVcclxuXHRcdFx0dmFyIGN1cnJlbnRFbENhdGVnb3JpZXMgPSBfcHVzaFVuaXF1ZShTY2hlbWEuZXhwYW5kUnVsZXMoZWwsIGVsU2NoZW1hLnR5cGUgfHwgW10pLCBlbFRhZ05hbWUpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGN1cnJlbnRFbENhdGVnb3JpZXM7XHJcblx0fSxcclxuXHJcblx0LyoqXHJcblx0ICogVmFsaWRhdGVzIHRoYXQgdGhlIGdpdmVuIG5vZGUgYmVsb25ncyBpbiB0aGUgY29udGV4dCdzIGNvbnRlbnQgbW9kZWxcclxuXHQgKiBnb2luZyBieSB0aGUgc2VtYW50aWNzXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gSFRNTEVsZW1lbnRcdFx0XHRcdGNvbnRleHRcclxuXHQgKiBAcGFyYW0gSFRNTEVsZW1lbnRcdFx0XHRcdG5vZGVcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gYm9vbFxyXG5cdCAqL1xyXG5cdGFzc2VydE5vZGVCZWxvbmdzSW5Db250ZW50TW9kZWwoY29udGV4dCwgbm9kZSkge1xyXG5cdFx0dmFyIGNvbnRleHRNb2RlbCA9IGNvbnRleHQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCBcclxuXHRcdFx0PyBTY2hlbWEuZ2V0Q29udGVudE1vZGVsRm9yKGNvbnRleHQpXHJcblx0XHRcdDogY29udGV4dDtcclxuXHRcdHZhciBub2RlQ2F0ZWdvcmllcyA9IG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCBcclxuXHRcdFx0PyBTY2hlbWEuZ2V0Q2F0ZWdvcmllc0Zvcihub2RlKVxyXG5cdFx0XHQ6IG5vZGU7XHJcblx0XHRpZiAoX2ludGVyc2VjdChjb250ZXh0TW9kZWwsIFsnI25vdGhpbmcnLCAnI3RleHQnXSkubGVuZ3RoKSB7XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH1cclxuXHRcdHZhciB2YWxpZDtcclxuXHRcdC8vIFNvIGN1cnJlbnQgY29udGVudCBtb2RlbCBoYXMgdG8gbGlzdCBlaXRoZXIgdGhpcyBub2RlJ3MgY2F0ZWdvcmllcyxcclxuXHRcdC8vIHRhZ25hbWUsIG9yIGltcGxpYWJsZS9hY2NlcHRhYmxlIHJvbGVzXHJcblx0XHRjb250ZXh0TW9kZWwuZm9yRWFjaChhbGxvd2VkTm9kZSA9PiB7XHJcblx0XHRcdGlmIChhbGxvd2VkTm9kZS5zdGFydHNXaXRoKCchJykpIHtcclxuXHRcdFx0XHR2YXIgZGlzYWxsb3dlZE5vZGUgPSBhbGxvd2VkTm9kZS5zdWJzdHIoMSk7XHJcblx0XHRcdFx0aWYgKG5vZGVDYXRlZ29yaWVzLmluY2x1ZGVzKGRpc2FsbG93ZWROb2RlKSkge1xyXG5cdFx0XHRcdFx0dmFsaWQgPSBmYWxzZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSBpZiAodmFsaWQgIT09IGZhbHNlKSB7XHJcblx0XHRcdFx0aWYgKG5vZGVDYXRlZ29yaWVzLmluY2x1ZGVzKGFsbG93ZWROb2RlKSkge1xyXG5cdFx0XHRcdFx0dmFsaWQgPSB0cnVlO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gdmFsaWQgJiYgdHJ1ZTtcclxuXHR9LFxyXG5cclxuXHQvKipcclxuXHQgKiBWYWxpZGF0ZXMgdGhhdCB0aGUgZ2l2ZW4gbm9kZSBpcyBhc3NvY2lhdGVkIHRvIHRoZSBjb250ZXh0IGRpcmVjdGx5XHJcblx0ICogZ29pbmcgYnkgdGhlIHNlbWFudGljc1xyXG5cdCAqXHJcblx0ICogQHBhcmFtIEhUTUxFbGVtZW50XHRcdFx0XHRzY29wZVxyXG5cdCAqIEBwYXJhbSBIVE1MRWxlbWVudFx0XHRcdFx0bm9kZVxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0XHRcdFx0bm9kZVNjaGVtYVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBib29sXHJcblx0ICovXHJcblx0YXNzZXJ0Tm9kZUJlbG9uZ3NJblNjb3BlQXMoc2NvcGUsIG5vZGUsIG5vZGVTY2hlbWEgPSBudWxsKSB7XHJcblx0XHR2YXIgY29udGV4dENhdGVnb3JpZXMgPSBTY2hlbWEuZ2V0Q2F0ZWdvcmllc0ZvcihzY29wZSk7XHJcblx0XHR2YXIgY2xvc2VzdCwgY3VycmVudCA9IG5vZGUsIG5vZGVNb2RlbDtcclxuXHRcdHdoaWxlICghY2xvc2VzdCAmJiAoY3VycmVudCA9IGN1cnJlbnQucGFyZW50Tm9kZSkpIHtcclxuXHRcdFx0aWYgKF9pbnRlcnNlY3QoY29udGV4dENhdGVnb3JpZXMsIFNjaGVtYS5nZXRDYXRlZ29yaWVzRm9yKGN1cnJlbnQpKS5sZW5ndGhcclxuXHRcdFx0XHQmJiBTY2hlbWEuYXNzZXJ0Tm9kZUJlbG9uZ3NJbkNvbnRlbnRNb2RlbChjdXJyZW50LCBub2RlU2NoZW1hID8gKG5vZGVTY2hlbWEudHlwZSB8fCBub2RlKSA6IG5vZGUpXHJcblx0XHRcdCkge1xyXG5cdFx0XHRcdGNsb3Nlc3QgPSBjdXJyZW50O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gY2xvc2VzdCA9PT0gc2NvcGU7XHJcblx0fSxcclxuXHRcclxuXHQvKipcclxuXHQgKiBGbGF0dGVucyB0aGUgc2NoZW1hIHJ1bGVzIGZvciB0aGUgZ2l2ZW4gZWxlbWVudC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBIVE1MRWxlbWVudFx0XHRcdFx0ZWxcclxuXHQgKiBAcGFyYW0gYXJyYXlcdFx0XHRcdFx0XHRydWxlc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiBhcnJheVxyXG5cdCAqL1xyXG5cdGV4cGFuZFJ1bGVzKGVsLCBydWxlcykge1xyXG5cdFx0dmFyIHJsZXMgPSBydWxlcy5yZWR1Y2UoKGNhdGVnb3JpZXMsIHJ1bGUpID0+IHtcclxuXHRcdFx0aWYgKF9pc09iamVjdChydWxlKSkge1xyXG5cdFx0XHRcdGlmIChlbC5tYXRjaGVzKE9iamVjdC5rZXlzKHJ1bGUpWzBdKSkge1xyXG5cdFx0XHRcdFx0Y2F0ZWdvcmllcyA9IGNhdGVnb3JpZXMuY29uY2F0KE9iamVjdC52YWx1ZXMocnVsZSlbMF0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRjYXRlZ29yaWVzLnB1c2gocnVsZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIGNhdGVnb3JpZXM7XHJcblx0XHR9LCBbXSk7XHJcblx0XHRpZiAocmxlcy5pbmNsdWRlcygnI3NlY3Rpb25pbmctcm9vdCcpKSB7XHJcblx0XHRcdHJsZXMucHVzaCgnI3NlY3Rpb25pbmctY29udGVudCcpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHJsZXM7XHJcblx0fSxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgU2NoZW1hO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCBKc2VuIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2pzZW4nO1xyXG5pbXBvcnQgUmVmbGV4IGZyb20gJ0B3ZWItbmF0aXZlLWpzL3JlZmxleCc7XHJcbmltcG9ydCBwYXJhbXMgZnJvbSAnLi9wYXJhbXMuanMnO1xyXG5pbXBvcnQgQ2h0bWwgZnJvbSAnLi9DaHRtbC5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBjbGllbnQtYnVpbGQgZW50cnlcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIENvbmZpZ3VyZSBDSFRNIHdpdGhcclxuICogYSBnbG9iYWwgd2luZG93LlxyXG4gKi9cclxuKGZ1bmN0aW9uKFdpbmRvdykge1xyXG5cdENodG1sLmluaXQoV2luZG93LCAoKSA9PiB7XHJcblx0XHR2YXIgYnVuZGxlcyA9IF9hcnJGcm9tKFdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy50YWdNYXAuYnVuZGxlKSkucmV2ZXJzZSgpO1xyXG5cdFx0cmV0dXJuIGJ1bmRsZXMubWFwKGIgPT4ge1xyXG5cdFx0XHRpZiAoYi5oYXNBdHRyaWJ1dGUoJ3NyYycpICYmICFiLmNvbnRlbnQuY2hpbGRyZW4ubGVuZ3RoKSB7XHJcblx0XHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG5cdFx0XHRcdFx0Yi5hZGRFdmVudExpc3RlbmVyKCdidW5kbGVsb2Fkc3VjY2VzcycsICgpID0+IHJlc29sdmUoYikpO1xyXG5cdFx0XHRcdFx0Yi5hZGRFdmVudExpc3RlbmVyKCdidW5kbGVsb2FkZXJyb3InLCAoKSA9PiByZXNvbHZlKGIpKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gYjtcclxuXHRcdH0pXHJcblx0fSk7XHJcbn0pKHRoaXMgfHwgd2luZG93KTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IHtcclxuXHRwYXJhbXMsXHJcblx0SnNlbixcclxuXHRSZWZsZXgsXHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IENodG1sO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgSnNlbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9qc2VuJztcclxuaW1wb3J0IFJlZmxleCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9yZWZsZXgnO1xyXG5pbXBvcnQgX2lzU3RyaW5nIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNTdHJpbmcuanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc051bWVyaWMgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bWVyaWMuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9hcnJGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Zyb20uanMnO1xyXG5pbXBvcnQgX21lcmdlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL21lcmdlLmpzJztcclxuaW1wb3J0IF9lYWNoIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2VhY2guanMnO1xyXG5pbXBvcnQgX2NvcHkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovY29weS5qcyc7XHJcbmltcG9ydCBfYmVmb3JlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL2JlZm9yZS5qcyc7XHJcbmltcG9ydCBkaXNjb25uZWN0ZWRDYWxsYmFjayBmcm9tICcuL2Rpc2Nvbm5lY3RlZENhbGxiYWNrLmpzJztcclxuaW1wb3J0IGNyZWF0ZUVsZW1lbnQgZnJvbSAnLi9jcmVhdGVFbGVtZW50LmpzJztcclxuaW1wb3J0IHNjaGVtYSBmcm9tICcuL3NjaGVtYS5qcyc7XHJcbmltcG9ydCBnbG9iYWxQYXJhbXMgZnJvbSAnLi4vcGFyYW1zLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIENodG1sIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29yZSB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIEluaXRpYWxpemVzIHRoZSBuZXcgQ2h0bWwgaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gZG9jdW1lbnR8SFRNTEVsZW1lbnRcdGVsXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHRcdFx0cGFyYW1zXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihlbCwgcGFyYW1zID0ge30pIHtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncGFyYW1zJywge1xyXG5cdFx0XHR2YWx1ZTpfbWVyZ2UoZ2xvYmFsUGFyYW1zLCBwYXJhbXMpLFxyXG5cdFx0fSk7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnZGVzY2VuZGFudFBhcmFtcycsIHtcclxuXHRcdFx0dmFsdWU6X2NvcHkodGhpcy5wYXJhbXMpLFxyXG5cdFx0fSk7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX2VsJywge3ZhbHVlOmVsLCBlbnVtZXJhYmxlOnRydWUsfSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2VsJywge1xyXG5cdFx0XHR2YWx1ZTplbC5ub2RlTmFtZSA9PT0gJyNkb2N1bWVudCcgPyBlbC5xdWVyeVNlbGVjdG9yKCdodG1sJykgOiBlbCxcclxuXHRcdFx0ZW51bWVyYWJsZTp0cnVlLFxyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBST0xFU1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tXHJcblx0XHRcclxuXHRcdGNvbnN0IHJvbGVzID0gKGVsLmdldEF0dHJpYnV0ZShnbG9iYWxQYXJhbXMuYXR0ck1hcC5zdXBlcnJvbGUpIHx8ICcnKVxyXG5cdFx0XHQuc3BsaXQoJyAnKS5tYXAociA9PiByLnRyaW0oKSkuZmlsdGVyKHIgPT4gcik7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3JvbGVzJywge3ZhbHVlOnJvbGVzLCBlbnVtZXJhYmxlOnRydWUsfSk7XHJcblx0XHRcclxuXHRcdC8vIC0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gVFJFRVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tXHJcblx0XHRcclxuXHRcdGNvbnN0IHRyZWUgPSB7fTtcclxuXHRcdFJlZmxleC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBnbG9iYWxQYXJhbXMudHJlZVByb3BlcnR5LCB7dmFsdWU6dHJlZSwgZW51bWVyYWJsZTp0cnVlLH0pO1xyXG5cdFx0UmVmbGV4LnRyYXAodHJlZSwgKGUsIHJlY2lldmVkLCBuZXh0KSA9PiB7XHJcblx0XHRcdHJldHVybiBuZXh0KHJlY2lldmVkIHx8IHRoaXMuZ2V0Tm9kZXMoZS5xdWVyeSkpO1xyXG5cdFx0fSwge3R5cGU6J2dldCd9KTtcclxuXHRcdC8vIFRoZSBmb2xsb3dpbmcgbm9kZXMsIGJlaW5nIHByZWxpc3RlZCxcclxuXHRcdC8vIGNhbiBiZSBhY2Nlc3NlZCBkeW5hbWljYWxseVxyXG5cdFx0Y29uc3Qgbm9kZXNIaW50ID0gKGVsLmdldEF0dHJpYnV0ZShnbG9iYWxQYXJhbXMuYXR0ck1hcC5oaW50KSB8fCAnJylcclxuXHRcdFx0LnNwbGl0KCcgJykubWFwKHIgPT4gci50cmltKCkpLmZpbHRlcihyID0+IHIpO1xyXG5cdFx0UmVmbGV4LmluaXQodGhpc1tnbG9iYWxQYXJhbXMudHJlZVByb3BlcnR5XSwgbm9kZXNIaW50KTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogR2V0cyBhIG5vZGUgb3IgbGlzdCBvZiBub2Rlcy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmd8aW50fGFycmF5XHQgbm9kZU5hbWVzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIENodG1sfGFycmF5fG9iamVjdFxyXG5cdCAqL1xyXG5cdGdldE5vZGVzKG5vZGVOYW1lcykge1xyXG5cdFx0X2FyckZyb20obm9kZU5hbWVzKS5mb3JFYWNoKG5vZGVOYW1lID0+IHtcclxuXHRcdFx0aWYgKG5vZGVOYW1lIGluIHRoaXNbZ2xvYmFsUGFyYW1zLnRyZWVQcm9wZXJ0eV0gJiYgdGhpc1tnbG9iYWxQYXJhbXMudHJlZVByb3BlcnR5XVtub2RlTmFtZV0gaW5zdGFuY2VvZiBDb3JlKSB7XHJcblx0XHRcdFx0Ly8gQXJyYXlzIG11c3Qgbm90IGJlIHJldXNlZCFcclxuXHRcdFx0XHQvLyBUaGVpciBzb3VyY2VzIG9mIG5vZGVzIGNhbnQgYmUgZ3VhcmFudGVlZCB0byBiZSBzYW1lLlxyXG5cdFx0XHRcdC8vIHRoaXNbZ2xvYmFsUGFyYW1zLnRyZWVQcm9wZXJ0eV1bbm9kZU5hbWVdIGNvdWxkIGFsc28gYmUgYW4gZW1wdHkgZ2V0dGVyL3NldHRlclxyXG5cdFx0XHRcdC8vIFNvIHRoZSBpbnN0YW5jZW9mIGlzIHRoZSB3YXkgdG8gZ28gZm9yIGJvdGggcHJvYmxlbXNcclxuXHRcdFx0XHRyZXR1cm4gdGhpc1tnbG9iYWxQYXJhbXMudHJlZVByb3BlcnR5XVtub2RlTmFtZV07XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIG5vZGU7XHJcblx0XHRcdGlmICgobm9kZSA9IHRoaXMuZ2V0RXhwbGljaXROb2RlKG5vZGVOYW1lKSlcclxuXHRcdFx0fHwgKG5vZGUgPSB0aGlzLmdldEltcGxpY2l0Tm9kZShub2RlTmFtZSkpKSB7XHJcblx0XHRcdFx0dGhpcy5hZGROb2RlKG5vZGVOYW1lLCBub2RlKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gX2lzQXJyYXkobm9kZU5hbWVzKSA/IF9vYmpGcm9tKG5vZGVOYW1lcywgdGhpc1tnbG9iYWxQYXJhbXMudHJlZVByb3BlcnR5XSkgOiB0aGlzW2dsb2JhbFBhcmFtcy50cmVlUHJvcGVydHldW25vZGVOYW1lc107XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEF0dGVtcHRzIHRvIHJlc29sdmUgYSBub2RlIGZyb20gZXhwbGljaXQgdHJlZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmdcdFx0XHRcdHJlcXVlc3ROb2RlTmFtZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBIVE1MRWxlbWVudFxyXG5cdCAqL1xyXG5cdGdldEV4cGxpY2l0Tm9kZShyZXF1ZXN0Tm9kZU5hbWUpIHtcclxuXHRcdC8vIElmIGdpdmVuIGEgcm9sZWNhc2UsIHdlIGNhbiBwZXJmb3JtIGEgcXVlcnkgaWYgd2UgdW5kZXJzdGFuZCB0aGUgc2VtYW50aWNzLlxyXG5cdFx0aWYgKHRoaXMucm9sZXMgJiYgdGhpcy5yb2xlcy5sZW5ndGgpIHtcclxuXHRcdFx0dmFyIHJvbGVzID0gZ2xvYmFsUGFyYW1zLnJvbGVjYXNlID8gW2dsb2JhbFBhcmFtcy5yb2xlY2FzZV0gOiB0aGlzLnJvbGVzO1xyXG5cdFx0XHQvLyBGaW5kIG1hdGNoZXMuLi5cclxuXHRcdFx0dmFyIENTU0VzY2FwZSA9IGdsb2JhbFBhcmFtcy5jb250ZXh0LkNTUyA/IGdsb2JhbFBhcmFtcy5jb250ZXh0LkNTUy5lc2NhcGUgOiBzdHIgPT4gc3RyO1xyXG5cdFx0XHRyZXR1cm4gcm9sZXMucmVkdWNlKChtYXRjaGVkTm9kZSwgcm9sZSkgPT4ge1xyXG5cdFx0XHRcdGlmICghbWF0Y2hlZE5vZGUpIHtcclxuXHRcdFx0XHRcdHZhciBjbG9zZXN0U3VwZXJTZWxlY3RvciA9ICdbJyArIENTU0VzY2FwZShnbG9iYWxQYXJhbXMuYXR0ck1hcC5zdXBlcnJvbGUpICsgJ349XCInICsgcm9sZSArICdcIl0nO1xyXG5cdFx0XHRcdFx0dmFyIG5vZGVTZWxlY3RvciA9ICdbJyArIENTU0VzY2FwZShnbG9iYWxQYXJhbXMuYXR0ck1hcC5zdWJyb2xlKSArICd+PVwiJyArIHJvbGUgKyAnLScgKyByZXF1ZXN0Tm9kZU5hbWUgKyAnXCJdJztcclxuXHRcdFx0XHRcdHZhciBjbG9zZXN0U3VwZXIsIF9tYXRjaGVkTm9kZTtcclxuXHRcdFx0XHRcdGlmICgoX21hdGNoZWROb2RlID0gKHRoaXMuZWwuc2hhZG93Um9vdCB8fCB0aGlzLmVsKS5xdWVyeVNlbGVjdG9yKG5vZGVTZWxlY3RvcikpXHJcblx0XHRcdFx0XHQvLyBJZiB0aGlzLmVsIGhhcyBhIHNoYWRvd1Jvb3QsIHdlIGRvbid0IGV4cGVjdCBfbWF0Y2hlZE5vZGUgdG8gYmUgYWJsZSB0byBmaW5kIGlzIHN1cGVyUm9sZSBlbGVtZW50LlxyXG5cdFx0XHRcdFx0Ly8gSWYgaXQgZmluZHMgb25lLCB0aGVuIGl0cyBub3QgZm9yIHRoZSBjdXJyZW4gc3VwZXJSb2xlIGVsZW1lbnQuXHJcblx0XHRcdFx0XHQmJiAoKHRoaXMuZWwuc2hhZG93Um9vdCAmJiAhKF9tYXRjaGVkTm9kZS5wYXJlbnROb2RlLmNsb3Nlc3QgJiYgX21hdGNoZWROb2RlLnBhcmVudE5vZGUuY2xvc2VzdChjbG9zZXN0U3VwZXJTZWxlY3RvcikpKVxyXG5cdFx0XHRcdFx0Ly8gX21hdGNoZWROb2RlIG11c3QgZmluZCB0aGlzLmVsIGFzIGl0cyBzdXBlclJvbGUgZWxlbWVudCB0byBxdWFsaWZ5LlxyXG5cdFx0XHRcdFx0XHR8fCAoIXRoaXMuZWwuc2hhZG93Um9vdCAmJiBfbWF0Y2hlZE5vZGUucGFyZW50Tm9kZSAmJiAoY2xvc2VzdFN1cGVyID0gX21hdGNoZWROb2RlLnBhcmVudE5vZGUuY2xvc2VzdChjbG9zZXN0U3VwZXJTZWxlY3RvcikpICYmIGNsb3Nlc3RTdXBlci5pc1NhbWVOb2RlKHRoaXMuZWwpKVxyXG5cdFx0XHRcdFx0KSkge1xyXG5cdFx0XHRcdFx0XHRtYXRjaGVkTm9kZSA9IF9tYXRjaGVkTm9kZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0cmV0dXJuIG1hdGNoZWROb2RlO1xyXG5cdFx0XHR9LCBudWxsKTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQXR0ZW1wdHMgdG8gcmVzb2x2ZSBhIG5vZGUgZnJvbSBpbXBsaWNpdCB0cmVlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZ1x0XHRcdFx0cmVxdWVzdE5vZGVOYW1lXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIEhUTUxFbGVtZW50fGFycmF5XHJcblx0ICovXHJcblx0Z2V0SW1wbGljaXROb2RlKHJlcXVlc3ROb2RlTmFtZSkge1xyXG5cdFx0aWYgKF9pc051bWVyaWMocmVxdWVzdE5vZGVOYW1lKSB8fCByZXF1ZXN0Tm9kZU5hbWUubWF0Y2goL1teYS16QS1aMC05XFwtXS8pKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdC8vIFVzZSBzY2hlbWEuLi5cclxuXHRcdHZhciBub2RlU2NoZW1hLCBub2RlU2VsZWN0b3IgPSBbXTtcclxuXHRcdHZhciB0cmllcyA9IFtdO1xyXG5cdFx0aWYgKHNjaGVtYS5hcmlhW3JlcXVlc3ROb2RlTmFtZV0pIHtcclxuXHRcdFx0dHJpZXMucHVzaCh7XHJcblx0XHRcdFx0c2NoZW1hOiBzY2hlbWEuYXJpYVtyZXF1ZXN0Tm9kZU5hbWVdLFxyXG5cdFx0XHRcdHNlbGVjdG9yOiBbJ1tyb2xlPVwiJyArIHJlcXVlc3ROb2RlTmFtZSArICdcIl0nXSxcclxuXHRcdFx0fSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0cmllcy5wdXNoKHtcclxuXHRcdFx0XHRzY2hlbWE6IHNjaGVtYS5zdGRbcmVxdWVzdE5vZGVOYW1lXSB8fCBzY2hlbWEuYXJpYVtyZXF1ZXN0Tm9kZU5hbWVdLFxyXG5cdFx0XHRcdHNlbGVjdG9yOiBbcmVxdWVzdE5vZGVOYW1lLCAnW3JvbGU9XCInICsgcmVxdWVzdE5vZGVOYW1lICsgJ1wiXSddLFxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHRcdF9lYWNoKHNjaGVtYS5zdGQsICh0YWduYW1lLCBzY2hlbWEpID0+IHtcclxuXHRcdFx0aWYgKHNjaGVtYS5pbXBsaWNpdFJvbGUgPT09IHJlcXVlc3ROb2RlTmFtZSkge1xyXG5cdFx0XHRcdHRyaWVzLnB1c2goe1xyXG5cdFx0XHRcdFx0c2NoZW1hOiBzY2hlbWEsXHJcblx0XHRcdFx0XHRzZWxlY3RvcjogW3RhZ25hbWVdLFxyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHZhciBtYXRjaGVzID0gbnVsbDtcclxuXHRcdHRyaWVzLmZvckVhY2godHJpZSA9PiB7XHJcblx0XHRcdCh0aGlzLmVsLnNoYWRvd1Jvb3QgfHwgdGhpcy5lbCkucXVlcnlTZWxlY3RvckFsbCh0cmllLnNlbGVjdG9yLmpvaW4oJywnKSkuZm9yRWFjaChub2RlID0+IHtcclxuXHRcdFx0XHRpZiAoc2NoZW1hLmFzc2VydE5vZGVCZWxvbmdzSW5TY29wZUFzKHRoaXMuZWwsIG5vZGUsIHRyaWUuc2NoZW1hKSkge1xyXG5cdFx0XHRcdFx0aWYgKHRyaWUuc2NoZW1hICYmIHRyaWUuc2NoZW1hLnNpbmdsZXRvbikge1xyXG5cdFx0XHRcdFx0XHRtYXRjaGVzID0gbm9kZTtcclxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIW1hdGNoZXMgfHwgX2lzQXJyYXkobWF0Y2hlcykpIHtcclxuXHRcdFx0XHRcdFx0bWF0Y2hlcyA9IG1hdGNoZXMgfHwgW107XHJcblx0XHRcdFx0XHRcdG1hdGNoZXMucHVzaChub2RlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRpZiAoIW1hdGNoZXMgJiYgdHJpZS5zY2hlbWEgJiYgIXRyaWUuc2NoZW1hLnNpbmdsZXRvbikge1xyXG5cdFx0XHRcdG1hdGNoZXMgPSBbXTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRyZXR1cm4gbWF0Y2hlcztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQWRkcyBhIG5vZGUgaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nfGludFx0IG5vZGVOYW1lXHJcblx0ICogQHBhcmFtIG1peGVkXHRcdFx0IG5vZGVcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gQ29yZVxyXG5cdCAqL1xyXG5cdGFkZE5vZGUobm9kZU5hbWUsIG5vZGUpIHtcclxuXHRcdHZhciBub2RlQ29tcG9uZW50LCBmYWN0b3J5ID0gdGhpcy5wYXJhbXMuZmFjdG9yeSB8fCAoKGVsLCBwYXJhbXMpID0+IG5ldyBDb3JlKGVsLCBwYXJhbXMpKTtcclxuXHRcdGlmIChfaXNBcnJheShub2RlKSkge1xyXG5cdFx0XHQvLyBTdGlsbCBzZXQgdGhlIGNvbGxlY3Rpb24gYXMgbm9kZSwgZXZlbiB0aG8gaXQgd29udCBiZSByZXVzZWQuXHJcblx0XHRcdG5vZGVDb21wb25lbnQgPSBub2RlLm1hcChfbm9kZSA9PiBmYWN0b3J5KF9ub2RlLCB0aGlzLmRlc2NlbmRhbnRQYXJhbXMpKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdG5vZGVDb21wb25lbnQgPSBmYWN0b3J5KG5vZGUsIHRoaXMuZGVzY2VuZGFudFBhcmFtcyk7XHJcblx0XHRcdC8vIFdlJ2xsIHJlbW92ZSBmcm9tIHRyZWUgYXQgdGhlXHJcblx0XHRcdC8vIHRpbWUgaXQgbGVhdmVzIHRoZSBET01cclxuXHRcdFx0ZGlzY29ubmVjdGVkQ2FsbGJhY2sobm9kZSwgKCkgPT4ge1xyXG5cdFx0XHRcdFJlZmxleC5kZWwodGhpc1tnbG9iYWxQYXJhbXMudHJlZVByb3BlcnR5XSwgbm9kZU5hbWUpO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHRcdFJlZmxleC5zZXQodGhpc1tnbG9iYWxQYXJhbXMudHJlZVByb3BlcnR5XSwgbm9kZU5hbWUsIG5vZGVDb21wb25lbnQpO1xyXG5cdFx0cmV0dXJuIG5vZGVDb21wb25lbnQ7XHJcblx0fVxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCBnbG9iYWxQYXJhbXMgZnJvbSAnLi4vcGFyYW1zLmpzJztcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgTXV0YXRpb25PYnNlcnZlciB0aGF0IGZpcmVzIHdoZW5cclxuICogdGhlIGVsZW1lbnQgbGVhdmVzIHRoZSBET00uXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmdcdFx0XHRcdFx0XHRpbnB1dFxyXG4gKiBAcGFyYW0gZnVuY3Rpb25cdFx0XHRcdFx0Y2FsbGJhY2tcclxuICpcclxuICogQHJldHVybiB2b2lkXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaXNjb25uZWN0ZWRDYWxsYmFjayhlbCwgY2FsbGJhY2spIHtcclxuXHRpZiAoZWwucGFyZW50Tm9kZSAmJiBnbG9iYWxQYXJhbXMuY29udGV4dC5NdXRhdGlvbk9ic2VydmVyKSB7XHJcblx0XHR2YXIgY2FsbGVkID0gZmFsc2U7XHJcblx0XHR2YXIgb2JzZXJ2ZXIgPSBuZXcgZ2xvYmFsUGFyYW1zLmNvbnRleHQuTXV0YXRpb25PYnNlcnZlcihtdXRhdGlvbnMgPT4ge1xyXG5cdFx0XHRtdXRhdGlvbnMuZm9yRWFjaChtID0+IHtcclxuXHRcdFx0XHRpZiAoIWNhbGxlZCAmJiBfYXJyRnJvbShtLnJlbW92ZWROb2RlcykuaW5jbHVkZXMoZWwpKSB7XHJcblx0XHRcdFx0XHRjYWxsZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fSk7XHJcblx0XHRvYnNlcnZlci5vYnNlcnZlKGVsLnBhcmVudE5vZGUsIHtjaGlsZExpc3Q6dHJ1ZX0pO1xyXG5cdFx0ZGlzY29ubmVjdGVkQ2FsbGJhY2soZWwucGFyZW50Tm9kZSwgKCkgPT4ge1xyXG5cdFx0XHRpZiAoIWNhbGxlZCkge1xyXG5cdFx0XHRcdGNhbGxlZCA9IHRydWU7XHJcblx0XHRcdFx0Y2FsbGJhY2soKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgSnNlbiwge0NvbnRleHRzfSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9qc2VuJztcclxuaW1wb3J0IFJlZmxleCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9yZWZsZXgnO1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1N0cmluZy5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVtZXJpYy5qcyc7XHJcbmltcG9ydCBfdW5pcXVlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3VuaXF1ZS5qcyc7XHJcbmltcG9ydCBfZm9sbG93aW5nIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ZvbGxvd2luZy5qcyc7XHJcbmltcG9ydCBfYmVmb3JlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL2JlZm9yZS5qcyc7XHJcbmltcG9ydCBfYmVmb3JlTGFzdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci9iZWZvcmVMYXN0LmpzJztcclxuaW1wb3J0IGNyZWF0ZUVsZW1lbnQgZnJvbSAnLi9jb3JlL2NyZWF0ZUVsZW1lbnQuanMnO1xyXG5pbXBvcnQgZGVmaW5lQnVuZGxlRWxlbWVudHMgZnJvbSAnLi9jb21wb3NpbmcvZGVmaW5lQnVuZGxlRWxlbWVudHMuanMnO1xyXG5pbXBvcnQgZGVmaW5lSW1wb3J0RWxlbWVudHMgZnJvbSAnLi9jb21wb3NpbmcvZGVmaW5lSW1wb3J0RWxlbWVudHMuanMnO1xyXG5pbXBvcnQgY3JlYXRlQnVuZGxlTWF0cml4IGZyb20gJy4vY29tcG9zaW5nL2NyZWF0ZUJ1bmRsZU1hdHJpeC5qcyc7XHJcbmltcG9ydCBwYXJzZU5hbWVzcGFjZSBmcm9tICcuL2NvbXBvc2luZy9wYXJzZU5hbWVzcGFjZS5qcyc7XHJcbmltcG9ydCByZWNvbXBvc2UgZnJvbSAnLi9jb21wb3NpbmcvcmVjb21wb3NlLmpzJztcclxuaW1wb3J0IERpcmVjdGl2ZXMgZnJvbSAnLi9EaXJlY3RpdmVzLmpzJztcclxuaW1wb3J0IENvcmUgZnJvbSAnLi9jb3JlL0NvcmUuanMnO1xyXG5pbXBvcnQgZ2xvYmFsUGFyYW1zIGZyb20gJy4vcGFyYW1zLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIENodG1sIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cdFx0XHRcdFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2h0bWwgZXh0ZW5kcyBDb3JlIHtcclxuXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihlbCwgcGFyYW1zID0ge30pIHtcclxuXHRcdHN1cGVyKGVsLCBwYXJhbXMpO1xyXG5cclxuXHRcdC8vIENyZWF0ZSB0aGUgZmFjdG9yeSB1c2VkIGluIENvcmVcclxuXHRcdHRoaXMucGFyYW1zLmZhY3RvcnkgPSB0aGlzLmNvbnN0cnVjdG9yLmZyb207XHJcblx0XHRcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gQXV0by1pbXBvcnRlZCBlbGVtZW50c1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHR0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2ltcG9ydGVkJywgZSA9PiB7XHJcblx0XHRcdHRoaXMucGFyYW1zLmZhY3RvcnkoZS50YXJnZXQpO1xyXG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBOQU1FU1BBQ0VcclxuXHRcdC8vIC0tLS0tLS0tLS0tLVxyXG5cdFx0XHJcblx0XHRjb25zdCBuYW1lc3BhY2VQYXJzZSA9IHBhcnNlTmFtZXNwYWNlKGVsLmdldEF0dHJpYnV0ZShnbG9iYWxQYXJhbXMuYXR0ck1hcC5uYW1lc3BhY2UpIHx8ICcnKTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbmFtZXNwYWNlJywge3ZhbHVlOm5hbWVzcGFjZVBhcnNlLm5hbWVzcGFjZSwgZW51bWVyYWJsZTp0cnVlLH0pO1xyXG5cdFx0XHJcblx0XHQvLyAtLS0tLS0tLS0tLS1cclxuXHRcdC8vIERJUkVDVElWRVNcclxuXHRcdC8vIC0tLS0tLS0tLS0tLVxyXG5cdFx0XHJcblx0XHRjb25zdCBkaXJlY3RpdmVzID0gW107XHJcblx0XHRSZWZsZXguZGVmaW5lUHJvcGVydHkodGhpcywgJ2RpcmVjdGl2ZXMnLCB7dmFsdWU6ZGlyZWN0aXZlcywgZW51bWVyYWJsZTp0cnVlLH0pO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdC8vIGV2YWx1YXRpb25Db250ZXh0IHdpbGwgYmUgXCJ0aGlzXCIgYXMgbWFpbiBjb250ZXh0LCBhbmQgcGFyYW1zLmVudiBhcyBzdXBlciBjb250ZXh0XHJcblx0XHR2YXIgbG9jYWxDb250ZXh0ID0ge307XHJcblx0XHR2YXIgc3VwZXJDb250ZXh0ID0gdGhpcy5wYXJhbXMuZW52O1xyXG5cdFx0dmFyIGV2YWx1YXRpb25Db250ZXh0ID0gbmV3IENvbnRleHRzKHRoaXMsIHN1cGVyQ29udGV4dCwgbG9jYWxDb250ZXh0KTtcclxuXHRcdC8vIERlc2NlbmRhbnRzIHdpbGwgcmVjaWV2ZSBteSBsb2NhbENvbnRleHQgYW5kIHN1cGVyQ29udGV4dFxyXG5cdFx0dGhpcy5kZXNjZW5kYW50UGFyYW1zLmVudiA9IG5ldyBDb250ZXh0cyhsb2NhbENvbnRleHQsIHN1cGVyQ29udGV4dCk7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gU3RyaW5naWZpZXMgSlNFTiB2YXJzXHJcblx0XHR2YXIgc3RyaW5naWZ5RWFjaCA9IGxpc3QgPT4gX3VuaXF1ZShsaXN0Lm1hcChleHByID0+IF9iZWZvcmUoX2JlZm9yZShleHByLnRvU3RyaW5nKCksICdbJyksICcoJykpKTtcclxuXHRcdC8vIFdlIGhhbmRsZSBkaXJlY3RpdmVzIGFzIHRoZXkgbWFrZSBlbnRyeVxyXG5cdFx0UmVmbGV4Lm9ic2VydmUodGhpcy5kaXJlY3RpdmVzLCAoZW50cmllcywgZXhpdHMsIGUpID0+IHtcclxuXHRcdFx0T2JqZWN0LmtleXMoZW50cmllcykuZm9yRWFjaChrID0+IHtcclxuXHRcdFx0XHQvLyAtLS0tLS0tLS0tLS1cclxuXHRcdFx0XHQvLyBVbmJpbmQgZXhpdHNcclxuXHRcdFx0XHRpZiAoZXhpdHNba10pIHtcclxuXHRcdFx0XHRcdFJlZmxleC51bm9ic2VydmUodGhpcywgbnVsbCwgbnVsbCwge3RhZ3M6WycjZGlyZWN0aXZlJywgZXhpdHNba11dLH0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQvLyAtLS0tLS0tLS0tLS1cclxuXHRcdFx0XHQvLyBCaW5kIGVudHJpZXNcclxuXHRcdFx0XHRpZiAoZW50cmllc1trXSkge1xyXG5cdFx0XHRcdFx0aWYgKHRoaXMuYXV0b0V2YWwgIT09IGZhbHNlKSB7XHJcblx0XHRcdFx0XHRcdGVudHJpZXNba10uZXZhbChldmFsdWF0aW9uQ29udGV4dCwgUmVmbGV4KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFJlZmxleC5vYnNlcnZlKHRoaXMsIHN0cmluZ2lmeUVhY2goZW50cmllc1trXS5tZXRhLnZhcnMpLCAobmV3U3RhdGUsIG9sZFN0YXRlLCBlKSA9PiB7XHJcblx0XHRcdFx0XHRcdHZhciBldmFsUmV0dXJuID0gZW50cmllc1trXS5ldmFsKGV2YWx1YXRpb25Db250ZXh0LCBSZWZsZXgpO1xyXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcmVzdWx0IG9mIHRoaXMgZXZhbHVhdGlvbiBpcyBmYWxzZSxcclxuXHRcdFx0XHRcdFx0Ly8gZS5zdG9wUHJvcGFnYXRpb24gd2lsbCBiZSBjYWxsZWQgYW5kIHN1YnNlcXVlbnQgZXhwcmVzc2lvbnNcclxuXHRcdFx0XHRcdFx0Ly8gd2lsbCBub3QgYmUgZXZhbHVhdGVkLiBTbyB3ZSBtdXN0IG5vdCBhbGxvdyBmYWxzZSB0byBiZSByZXR1cm5lZC5cclxuXHRcdFx0XHRcdFx0Ly8gQWxsIGV4cHJlc3Npb25zIGFyZSBtZWFudCB0byBiZSBldmFsdWF0ZWQgaW4gcGFyYWxsZWwsIGluZGVwZW5kZW50IG9mIGVhY2ggb3RoZXIuXHJcblx0XHRcdFx0XHRcdGlmIChldmFsUmV0dXJuICE9PSBmYWxzZSkge1xyXG5cdFx0XHRcdFx0XHRcdHJldHVybiBldmFsUmV0dXJuO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9LCB7dGFnczpbJyNkaXJlY3RpdmUnLCBlbnRyaWVzW2tdXX0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLVxyXG5cdFx0aWYgKHRoaXMuZGF0YUJsb2NrU2NyaXB0ID0gX2FyckZyb20oZWwuY2hpbGRyZW4pLmZpbHRlcihub2RlID0+IG5vZGUubWF0Y2hlcyhnbG9iYWxQYXJhbXMudGFnTWFwLmpzZW4pKVswXSkge1xyXG5cdFx0XHR2YXIgZGlyZWN0aXZlc1B1c2ggPSBSZWZsZXguZ2V0KHRoaXMuZGlyZWN0aXZlcywgJ3B1c2gnKTtcclxuXHRcdFx0RGlyZWN0aXZlcy5wYXJzZSgodGhpcy5kYXRhQmxvY2tTY3JpcHQudGV4dENvbnRlbnQgfHwgJycpLnRyaW0oKSkuZmlsdGVyKCkuZm9yRWFjaChkaXJlY3RpdmUgPT4ge1xyXG5cdFx0XHRcdHRoaXMuYXV0b0V2YWwgPSBnbG9iYWxQYXJhbXMuaW5pdGlhbFJlbmRlcmluZztcclxuXHRcdFx0XHRkaXJlY3RpdmVzUHVzaChkaXJlY3RpdmUpO1xyXG5cdFx0XHRcdHRoaXMuYXV0b0V2YWwgPSB0cnVlO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHRcdC8vIC0tLS0tLS0tLS0tLVxyXG5cdFx0aWYgKHRoaXMuZGF0YUJsb2NrU2NyaXB0ICYmIGdsb2JhbFBhcmFtcy5oaWRlRGF0YUJsb2NrU2NyaXB0KSB7XHJcblx0XHRcdHRoaXMuZGF0YUJsb2NrU2NyaXB0LnJlbW92ZSgpO1xyXG5cdFx0fVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tXHJcblx0XHRcclxuXHRcdC8vIC0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gTUlSUk9SXHJcblx0XHQvLyAtLS0tLS0tLS0tLS1cclxuXHRcdFxyXG5cdFx0UmVmbGV4LmluaXQodGhpcywgZ2xvYmFsUGFyYW1zLmJpbmRpbmdQcm9wZXJ0eSk7XHJcblx0XHQvLyBTZXR1cCBtaXJyb3JcclxuXHRcdFJlZmxleC5vYnNlcnZlKHRoaXMsIGdsb2JhbFBhcmFtcy5iaW5kaW5nUHJvcGVydHksIChkYXRhLCBfZGF0YSwgZSkgPT4ge1xyXG5cdFx0XHRpZiAobmFtZXNwYWNlUGFyc2Uuc3VibmFtZXNwYWNlKSB7XHJcblx0XHRcdFx0aWYgKF9pc1R5cGVPYmplY3QoZGF0YSkgJiYgZGF0YSkge1xyXG5cdFx0XHRcdFx0Ly8gTWlycm9yXHJcblx0XHRcdFx0XHRSZWZsZXgub2JzZXJ2ZShkYXRhLCBjaGFuZ2VzID0+IHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMucG9wdWxhdGUoZGF0YSwgbmFtZXNwYWNlUGFyc2Uuc3VibmFtZXNwYWNlLCBnbG9iYWxQYXJhbXMucmVtb2RlbENhbGxiYWNrKTtcclxuXHRcdFx0XHRcdH0sIHt0YWdzOlsnI21pcnJvcicsIHRoaXNdfSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmIChfaXNUeXBlT2JqZWN0KF9kYXRhKSAmJiBfZGF0YSkge1xyXG5cdFx0XHRcdFx0Ly8gVW5taXJyb3JcclxuXHRcdFx0XHRcdFJlZmxleC51bm9ic2VydmUoX2RhdGEsIG51bGwsIG51bGwsIHt0YWdzOlsnI21pcnJvcicsIHRoaXNdfSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdC8vIEluaXRpYWwgU3luYy4uLlxyXG5cdFx0XHRcdHJldHVybiB0aGlzLnBvcHVsYXRlKGRhdGEgfHwge30sIG5hbWVzcGFjZVBhcnNlLnN1Ym5hbWVzcGFjZSwgZ2xvYmFsUGFyYW1zLnJlbW9kZWxDYWxsYmFjayk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBBbGlhcyBvZiBzdXBlci5nZXROb2RlcygpLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZyBcdFx0bm9kZU5hbWVcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gQ2h0bWxcclxuXHQgKi9cclxuXHRnZXQobm9kZU5hbWUpIHtcclxuXHRcdHJldHVybiBzdXBlci5nZXROb2Rlcyhub2RlTmFtZSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEJpbmRzIGEgKHJlYWN0aXZlKSBjb250ZXh0IG9iamVjdCBvciBsb2dpY2FsIG9iamVjdCB0byB0aGUgaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gb2JqZWN0IFx0XHRjb250ZXh0XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIEV2ZW50XHJcblx0ICovXHJcblx0YmluZChjb250ZXh0KSB7XHJcblx0XHRpZiAoIWdsb2JhbFBhcmFtcy5iaW5kaW5nUHJvcGVydHkpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdEYXRhIGtleSBoYXMgbm90IGJlZW4gc2V0IScpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIFJlZmxleC5zZXQodGhpcywgZ2xvYmFsUGFyYW1zLmJpbmRpbmdQcm9wZXJ0eSwgY29udGV4dCk7XHJcblx0fVx0XHJcblx0LyoqXHJcblx0ICogQ2xlYXJzIHRoZSBpbnN0YW5jZSBvZiBpdHMgY29udGV4dC5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gRXZlbnRcclxuXHQgKi9cclxuXHR1bmJpbmQoKSB7XHJcblx0XHRpZiAoIWdsb2JhbFBhcmFtcy5iaW5kaW5nUHJvcGVydHkpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdEYXRhIGtleSBoYXMgbm90IGJlZW4gc2V0IScpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIFJlZmxleC5zZXQodGhpcywgZ2xvYmFsUGFyYW1zLmJpbmRpbmdQcm9wZXJ0eSwgbnVsbCk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEJpbmRzIGEgKHJlYWN0aXZlKSBsaXN0IGNvbnRleHQgdG8gdGhlIGluc3RhbmNlLlxyXG5cdCAqIENoaWxkbm9kZXMgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGNyZWF0ZWQvcmVtb3ZlZCBwZXIga2V5LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGFycmF5IFx0XHRzcmNNb2RlbFxyXG5cdCAqIEBwYXJhbSBzdHJpbmcgXHRcdHN1Ym5hbWVzcGFjZVxyXG5cdCAqIEBwYXJhbSBmdW5jdGlvbiBcdFx0cmVtb2RlbENhbGxiYWNrXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIFJlZmxleC5NdXRhdGlvbkV2ZW50XHJcblx0ICovXHJcblx0cG9wdWxhdGUoc3JjTW9kZWwsIHN1Ym5hbWVzcGFjZSwgcmVtb2RlbENhbGxiYWNrID0gbnVsbCkge1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS1cclxuXHRcdHZhciBub2RlTmFtZXNwYWNlQXJyYXkgPSBzdWJuYW1lc3BhY2Uuc3BsaXQoJy8vJyk7XHJcblx0XHQvLyBDcmVhdGUgYSBuYW1lc3BhY2UgaGFzaC4uLlxyXG5cdFx0aWYgKG5vZGVOYW1lc3BhY2VBcnJheVswXS5pbmRleE9mKCdbJykgPiAtMSkge1xyXG5cdFx0XHRub2RlTmFtZXNwYWNlQXJyYXlbMF0gPSAnXCInICsgbm9kZU5hbWVzcGFjZUFycmF5WzBdLnJlcGxhY2UoL1xcWy9nLCAnXCIgKyAnKS5yZXBsYWNlKC9cXF0vZywgJyArIFwiJykgKyAnXCInO1xyXG5cdFx0fVxyXG5cdFx0dmFyIHNyY01vZGVsS2V5cyA9IFJlZmxleC5rZXlzKHNyY01vZGVsKTtcclxuXHRcdHZhciBjdXJyZW50Tm9kZU5hbWVzID0gUmVmbGV4LmtleXModGhpc1tnbG9iYWxQYXJhbXMudHJlZVByb3BlcnR5XSk7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLVxyXG5cdFx0dmFyIGUgPSBuZXcgUmVmbGV4Lk11dGF0aW9uRXZlbnQodGhpcy5lbCwge3R5cGU6J3JlbW9kZWxsaW5nJ30pO1xyXG5cdFx0X3VuaXF1ZShzcmNNb2RlbEtleXMuY29uY2F0KGN1cnJlbnROb2RlTmFtZXMpKS5mb3JFYWNoKG5vZGVOYW1lID0+IHtcclxuXHRcdFx0bm9kZU5hbWUgPSBfaXNOdW1lcmljKG5vZGVOYW1lKSA/IHBhcnNlSW50KG5vZGVOYW1lKSA6IG5vZGVOYW1lO1xyXG5cdFx0XHR2YXIgZXhpc3RpbmdOb2RlID0gdGhpcy5nZXROb2Rlcyhub2RlTmFtZSk7XHJcblx0XHRcdHZhciByc3BucztcclxuXHRcdFx0aWYgKFJlZmxleC5oYXMoc3JjTW9kZWwsIG5vZGVOYW1lKSkge1xyXG5cdFx0XHRcdHZhciBzcmNJdGVtID0gUmVmbGV4LmdldChzcmNNb2RlbCwgbm9kZU5hbWUpLCBpc05ld05vZGUgPSBmYWxzZTtcclxuXHRcdFx0XHRpZiAoIWV4aXN0aW5nTm9kZSkge1xyXG5cdFx0XHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0XHRcdHZhciBub2RlTmFtZXNwYWNlQXJyYXlDb3B5ID0gbm9kZU5hbWVzcGFjZUFycmF5LnNsaWNlKCk7XHJcblx0XHRcdFx0XHRpZiAobm9kZU5hbWVzcGFjZUFycmF5Q29weVswXS5pbmRleE9mKCdcIicpID4gLTEpIHtcclxuXHRcdFx0XHRcdFx0bm9kZU5hbWVzcGFjZUFycmF5Q29weVswXSA9IEpzZW4ucGFyc2Uobm9kZU5hbWVzcGFjZUFycmF5Q29weVswXSkuZXZhbChzcmNJdGVtKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdG5vZGVOYW1lc3BhY2VBcnJheUNvcHlbMF0gKz0gJy8nICsgbm9kZU5hbWU7XHJcblx0XHRcdFx0XHR2YXIgbm9kZUVsID0gQ2h0bWwuaW1wb3J0KG5vZGVOYW1lc3BhY2VBcnJheUNvcHkuam9pbignLy8nKSk7XHJcblx0XHRcdFx0XHQvLyAtLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHRcdFx0aWYgKG5vZGVFbCkge1xyXG5cdFx0XHRcdFx0XHR2YXIgZm9sbG93aW5nID0gX2ZvbGxvd2luZyhzcmNNb2RlbEtleXMsIG5vZGVOYW1lICsgJycvKm51bWVyaWMgbm9kZU5hbWUgbmVlZHMgdGhpcyovLCB0cnVlLypsZW5ndGgqLylcclxuXHRcdFx0XHRcdFx0XHQucmVkdWNlKChjbG9zZXN0LCBfbm9kZU5hbWUpID0+IGNsb3Nlc3QgfHwgdGhpcy5nZXROb2Rlcyhfbm9kZU5hbWUpLCBudWxsKTtcclxuXHRcdFx0XHRcdFx0aWYgKGZvbGxvd2luZykge1xyXG5cdFx0XHRcdFx0XHRcdGZvbGxvd2luZy5lbC5iZWZvcmUobm9kZUVsKTtcclxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLmVsLmFwcGVuZChub2RlRWwpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdGV4aXN0aW5nTm9kZSA9IHRoaXMuYWRkTm9kZShub2RlTmFtZSwgbm9kZUVsKTtcclxuXHRcdFx0XHRcdFx0aXNOZXdOb2RlID0gdHJ1ZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKGV4aXN0aW5nTm9kZSkge1xyXG5cdFx0XHRcdFx0aWYgKF9pc0Z1bmN0aW9uKHJlbW9kZWxDYWxsYmFjaykpIHtcclxuXHRcdFx0XHRcdFx0cnNwbnMgPSByZW1vZGVsQ2FsbGJhY2soZXhpc3RpbmdOb2RlLCBzcmNJdGVtLCBub2RlTmFtZSwgaXNOZXdOb2RlKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHJzcG5zID0gZXhpc3RpbmdOb2RlLmJpbmQoc3JjSXRlbSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2UgaWYgKGV4aXN0aW5nTm9kZSkge1xyXG5cdFx0XHRcdGlmIChfaXNGdW5jdGlvbihyZW1vZGVsQ2FsbGJhY2spKSB7XHJcblx0XHRcdFx0XHRyc3BucyA9IHJlbW9kZWxDYWxsYmFjayhleGlzdGluZ05vZGUsIG5vZGVOYW1lKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0cnNwbnMgPSBleGlzdGluZ05vZGUudW5iaW5kKCk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHZhciByZW1vdmUgPSAoKSA9PiB7XHJcblx0XHRcdFx0XHRleGlzdGluZ05vZGUuZGVzdHJveSgpO1xyXG5cdFx0XHRcdFx0ZXhpc3RpbmdOb2RlLmVsLnJlbW92ZSgpO1xyXG5cdFx0XHRcdH07XHJcblx0XHRcdFx0aWYgKHJzcG5zIGluc3RhbmNlb2YgUHJvbWlzZSkge1xyXG5cdFx0XHRcdFx0cnNwbnMudGhlbihyZW1vdmUpLmNhdGNoKHJlbW92ZSk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdHJlbW92ZSgpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRlLnJlc3BvbnNlKHJzcG5zKTtcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIGU7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEZyZWVzIHRoZSBpbnN0YW5jZSBvZiBvYnNlcnZlZCBkaXJlY3RpdmVzLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0ZGVzdHJveSgpIHtcclxuXHRcdHRoaXMuZGlyZWN0aXZlcy5mb3JFYWNoKFxyXG5cdFx0XHRiaW5kaW5nID0+IFJlZmxleC51bm9ic2VydmUodGhpcywgbnVsbCwgbnVsbCwge3RhZ3M6WycjZGlyZWN0aXZlJywgYmluZGluZ119KVxyXG5cdFx0KTtcclxuXHRcdGlmICh0aGlzLmRhdGFCbG9ja1NjcmlwdCAmJiBnbG9iYWxQYXJhbXMuaGlkZURhdGFCbG9ja1NjcmlwdCkge1xyXG5cdFx0XHR0aGlzLnByZXBlbmQodGhpcy5kYXRhQmxvY2tTY3JpcHQpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiAtLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0ICogSU5TVEFOQ0UtUkVMQVRFRCBNRVRIT0RTXHJcblx0ICogLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdCAqL1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFRoZSBcImluaXRcIiBmdW5jdGlvbi5cclxuXHQgKiBHaXZlcyBDSFRNTCBhIGdsb2JhbCB3aW5kb3cgY29udGV4dFxyXG5cdCAqIGFuZCBsZXRzIGl0IHBlcmZvcm0gb3RoZXIgbmVjZXNzYXJ5IGluaXRpYWxpemF0aW9ucy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdGNvbnRleHRXaW5kb3dcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb25cdGJ1bmRsZXNDYWxsYmFja1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0c3RhdGljIGluaXQoY29udGV4dFdpbmRvdywgYnVuZGxlc0NhbGxiYWNrID0gbnVsbCkge1xyXG5cdFx0XHJcblx0XHRnbG9iYWxQYXJhbXMuY29udGV4dCA9IGNvbnRleHRXaW5kb3c7XHJcblx0XHQvLyBXaW5kb3cgbXVzdCBiZSBzZXQgYWJvdmUuLi4gYmVmb3JlIHRoaXNcclxuXHRcdGRlZmluZUJ1bmRsZUVsZW1lbnRzKCk7XHJcblx0XHRcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gQ2h0bWwuY29udGVudExvYWRlZFByb21pc2VcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Q2h0bWwuY29udGVudExvYWRlZFByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuXHRcdFx0aWYgKGNvbnRleHRXaW5kb3cuZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xyXG5cdFx0XHRcdHJlc29sdmUoKTsgcmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdGNvbnRleHRXaW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHJlc29sdmUsIGZhbHNlKTtcclxuXHRcdFx0Y29udGV4dFdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgcmVzb2x2ZSwgZmFsc2UpO1xyXG5cdFx0fSk7XHJcblx0XHRcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gZ2xvYmFsUGFyYW1zLmJ1bmRsZXNcclxuXHRcdC8vIENodG1sLmxvYWRpbmdCdW5kbGVzUHJvbWlzZVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRDaHRtbC5jb250ZW50TG9hZGVkUHJvbWlzZS50aGVuKCgpID0+IHtcclxuXHRcdFx0dmFyIGJ1bmRsZUVsZW1lbnRzO1xyXG5cdFx0XHRpZiAoYnVuZGxlc0NhbGxiYWNrICYmIChidW5kbGVFbGVtZW50cyA9IGJ1bmRsZXNDYWxsYmFjaygpKSkge1xyXG5cdFx0XHRcdGlmICghX2lzQXJyYXkoYnVuZGxlRWxlbWVudHMpKSB7XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1RoZSBidW5kbGVzQ2FsbGJhY2soKSBmdW5jdGlvbiBtdXN0IHJldHVybiBhbiBhcnJheSEnKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Z2xvYmFsUGFyYW1zLmJ1bmRsZXMgPSBjcmVhdGVCdW5kbGVNYXRyaXgoYnVuZGxlRWxlbWVudHMsIGxvYWRpbmdCdW5kbGVzUHJvbWlzZSA9PiB7XHJcblx0XHRcdFx0XHRDaHRtbC5sb2FkaW5nQnVuZGxlc1Byb21pc2UgPSBsb2FkaW5nQnVuZGxlc1Byb21pc2U7XHJcblx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdFx0ZGVmaW5lSW1wb3J0RWxlbWVudHMobG9hZGluZ0J1bmRsZXNQcm9taXNlKTtcclxuXHRcdFx0XHRcdH0sIDApO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogVGhlIFwicmVhZHlcIiBmdW5jdGlvbi5cclxuXHQgKiBDYWxscyB1cyB3aGVuIGl0IGJlY29tZXMgc2FmZSB0byBydW4gYnVuZGxlLXJlbGF0ZWQgY29kZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBmdW5jdGlvblx0XHRcdGNhbGxiYWNrXHJcblx0ICogQHBhcmFtIGJvb2xcdFx0XHRcdHdhaXRGb3JCdW5kbGVzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRzdGF0aWMgcmVhZHkoY2FsbGJhY2ssIHdhaXRGb3JCdW5kbGVzID0gdHJ1ZSkge1xyXG5cdFx0Q2h0bWwuY29udGVudExvYWRlZFByb21pc2UudGhlbigoKSA9PiB7XHJcblx0XHRcdGlmICghd2FpdEZvckJ1bmRsZXMpIHtcclxuXHRcdFx0XHRjYWxsYmFjaygpOyByZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0Q2h0bWwubG9hZGluZ0J1bmRsZXNQcm9taXNlLnRoZW4oY2FsbGJhY2spO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIGEgQ2h0bWwgb3ZlciBhIHJvb3QgcmVzb2x2ZWQgZnJvbSBkZWZpbml0aW9uIG9yIG1hcmt1cCBzdHJpbmcuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nfGRvY3VtZW50fEhUTUxFbGVtZW50XHRpbnB1dFxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0XHRcdFx0XHRwYXJhbXNcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdFx0XHRcdFx0U3RhdGljXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIENodG1sXHJcblx0ICovXHJcblx0c3RhdGljIGZyb20oaW5wdXQsIHBhcmFtcyA9IHt9LCBTdGF0aWMgPSBDaHRtbCkge1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdC8vIFJlc29sdmUgZWxlbWVudCBmcm9tIGlucHV0XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0dmFyIGVsID0gaW5wdXQ7XHJcblx0XHRpZiAoX2lzU3RyaW5nKGlucHV0KSAmJiAhaW5wdXQudHJpbSgpLnN0YXJ0c1dpdGgoJzwnKSAmJiBpbnB1dC5pbmRleE9mKCcvJykgIT09IC0xKSB7XHJcblx0XHRcdGlmICghKGVsID0gQ2h0bWwuaW1wb3J0KF9iZWZvcmUoaW5wdXQsICcvLycpKSkpIHtcclxuXHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdObyBlbGVtZW50IGZvdW5kIG9uIHRoZSBuYW1lc3BhY2UgXCInICsgaW5wdXQgKyAnXCIhJyk7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGlmIChfaXNTdHJpbmcoaW5wdXQpKSB7XHJcblx0XHRcdFx0aWYgKCEoZWwgPSBjcmVhdGVFbGVtZW50KGlucHV0KSkpIHtcclxuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IHJlc29sdmUgdGhlIHN0cmluZyBcIicgK2lucHV0ICsgJ1wiIHRvIGFuIGVsZW1lbnQhJyk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHZhciBucywgc3VwZXJOcywgc3VwZXJFbCwgaXNJbXBvcnQgPSBlbC5tYXRjaGVzKGdsb2JhbFBhcmFtcy50YWdNYXAuaW1wb3J0KTtcclxuXHRcdFx0aWYgKChucyA9IF9iZWZvcmUoZWwuZ2V0QXR0cmlidXRlKGdsb2JhbFBhcmFtcy5hdHRyTWFwLm5hbWVzcGFjZSkgfHwgJycsICcvLycpKVxyXG5cdFx0XHQvLyBUaGUgZW50aXJlIG5hbWVzcGFjZSBpcyB1c2VkIGZvciBlbGVtZW50cyBvZiB0eXBlIGltcG9ydC5cclxuXHRcdFx0Ly8gVGhlIHN1cGVybmFtZXNwYWNlIGlzIHVzZWQgZm9yIG5vcm1hbCBlbGVtZW50c1xyXG5cdFx0XHQmJiAoKGlzSW1wb3J0ICYmIChzdXBlck5zID0gbnMpKSB8fCAoc3VwZXJOcyA9IF9iZWZvcmVMYXN0KG5zLCAnLycpKSAmJiBzdXBlck5zLmluZGV4T2YoJy8nKSA+IC0xKVxyXG5cdFx0XHQmJiAoc3VwZXJFbCA9IENodG1sLmltcG9ydChzdXBlck5zKSkpIHtcclxuXHRcdFx0XHR2YXIgX2VsID0gZWw7XHJcblx0XHRcdFx0ZWwgPSByZWNvbXBvc2Uoc3VwZXJFbCwgZWwpO1xyXG5cdFx0XHRcdGlmIChpc0ltcG9ydCkge1xyXG5cdFx0XHRcdFx0X2VsLnJlcGxhY2VXaXRoKGVsKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSBpZiAobnMpIHtcclxuXHRcdFx0XHRjb25zb2xlLndhcm4oJ05hbWVzcGFjZSByZXNvbHV0aW9uIGZhaWxlZDogJyArIG5zKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG5ldyBTdGF0aWMoZWwsIHBhcmFtcyk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEltcG9ydHMgYSBtb2R1bGUgZnJvbSBidW5kbGVzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZ1x0XHRcdFx0XHRcdG5hbWVzcGFjZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBIVE1MRWxlbWVudFxyXG5cdCAqL1xyXG5cdHN0YXRpYyBpbXBvcnQobmFtZXNwYWNlKSB7XHJcblx0XHRpZiAoZ2xvYmFsUGFyYW1zLmJ1bmRsZXMpIHtcclxuXHRcdFx0cmV0dXJuIGdsb2JhbFBhcmFtcy5idW5kbGVzLmZpbmQobmFtZXNwYWNlKTtcclxuXHRcdH1cclxuXHR9XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfYmVmb3JlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL2JlZm9yZS5qcyc7XHJcbmltcG9ydCBfYWZ0ZXIgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvYWZ0ZXIuanMnO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBQYXJzZXMgYW4gZWxlbWVudCdzIENIVE1MIG5hbWVzcGFjZS5cclxuICogVGhpcyBleHBsYWlucyBob3cgYW4gZWxlbWVudCdzIG5hbWVzcGFjZSBpcyB1c2VkIGluIENIVE1MLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nXHRcdFx0XHRcdG5hbWVzcGFjZVN0clxyXG4gKlxyXG4gKiBAcmV0dXJuIG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZXNwYWNlU3RyKSB7XHJcblx0dmFyIG5hbWVzcGFjZVBhcnNlID0ge3JvYWRtYXA6bmFtZXNwYWNlU3RyfTtcclxuXHRpZiAobmFtZXNwYWNlUGFyc2Uucm9hZG1hcCkge1xyXG5cdFx0bmFtZXNwYWNlUGFyc2UubmFtZXNwYWNlID0gX2JlZm9yZShuYW1lc3BhY2VQYXJzZS5yb2FkbWFwLCAnLy8nKTtcclxuXHRcdG5hbWVzcGFjZVBhcnNlLnN1Ym5hbWVzcGFjZSA9IF9hZnRlcihuYW1lc3BhY2VQYXJzZS5yb2FkbWFwLCAnLy8nKTtcclxuXHRcdC8vIEluIGNhc2UgdGhpcyBpcyB0aGUgLy8vIHNwb3QuLi5cclxuXHRcdGlmIChuYW1lc3BhY2VQYXJzZS5zdWJuYW1lc3BhY2Uuc3RhcnRzV2l0aCgnLycpKSB7XHJcblx0XHRcdG5hbWVzcGFjZVBhcnNlLnN1Ym5hbWVzcGFjZSA9IF9hZnRlcihuYW1lc3BhY2VQYXJzZS5zdWJuYW1lc3BhY2UsICcvJyk7XHJcblx0XHR9XHJcblx0XHRpZiAobmFtZXNwYWNlUGFyc2Uuc3VibmFtZXNwYWNlLmVuZHNXaXRoKCcvLycpICYmIG5hbWVzcGFjZVBhcnNlLnN1Ym5hbWVzcGFjZS5pbmRleE9mKCcvLy8nKSA9PT0gLTEpIHtcclxuXHRcdFx0bmFtZXNwYWNlUGFyc2Uuc3VibmFtZXNwYWNlID0gbmFtZXNwYWNlUGFyc2Uuc3VibmFtZXNwYWNlICsgbmFtZXNwYWNlUGFyc2UubmFtZXNwYWNlICsgJy8vJztcclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIG5hbWVzcGFjZVBhcnNlO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJy4uL2pzL2lzVW5kZWZpbmVkLmpzJztcclxuaW1wb3J0IF9pc0Z1bmN0aW9uIGZyb20gJy4uL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5cclxuLyoqXHJcbiAqIDEuIFJldHVybnMgdGhlIEVOVFJZIGZvbGxvd2luZyAoZWl0aGVyIHRoZSBGSVJTVCBvciB0aGUgTEFTVCBpbnN0YW5jZSBvZikgdGhlIHJlZmVyZW5jZS5cclxuICogMi4gUmV0dXJucyBBIE5VTUJFUiBPRiBFTlRSSUVTIGNvdW50aW5nIGZvcndhcmRzIGZyb20gKGVpdGhlciB0aGUgRklSU1Qgb3IgdGhlIExBU1QgaW5zdGFuY2Ugb2YpIHRoZSBnaXZlbiByZWZlcmVuY2UuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheSBcdFx0YXJyXHJcbiAqIEBwYXJhbSBtaXhlZFx0IFx0XHRyZWZlcmVuY2VcclxuICogQHBhcmFtIGludHxib29sIFx0XHRsZW5ndGhcclxuICogQHBhcmFtIGJvb2x8ZnVuY3Rpb25cdCBsb29wXHJcbiAqIEBwYXJhbSBib29sXHQgXHRcdGxhc3RSZWZlcmVuY2VcclxuICpcclxuICogQHJldHVybiBtaXhlZHxhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyLCByZWZlcmVuY2UsIGxlbmd0aCA9IGZhbHNlLCBsb29wID0gZmFsc2UsIGxhc3RSZWZlcmVuY2UgPSBmYWxzZSkge1xyXG5cdGlmIChhcnIuaW5kZXhPZihyZWZlcmVuY2UpID09PSAtMSkge1xyXG5cdFx0cmV0dXJuIGxlbmd0aCA/IFtdIDogdW5kZWZpbmVkO1xyXG5cdH1cclxuXHR2YXIgYW1vdW50ID0gbGVuZ3RoID09PSB0cnVlID8gYXJyLmxlbmd0aCAtIDEgOiAobGVuZ3RoID09PSBmYWxzZSA/IDEgOiBsZW5ndGgpO1xyXG5cdHZhciBmcm9tID0gbGFzdFJlZmVyZW5jZSA/IGFyci5sYXN0SW5kZXhPZihyZWZlcmVuY2UpICsgMSA6IGFyci5pbmRleE9mKHJlZmVyZW5jZSkgKyAxO1xyXG5cdHZhciBhZnRlciA9ICFfaXNVbmRlZmluZWQocmVmZXJlbmNlKSA/IGFyci5zbGljZShmcm9tLCBmcm9tICsgYW1vdW50KSA6IFtdO1xyXG5cdGlmIChsb29wICYmIGFmdGVyLmxlbmd0aCA8IGFtb3VudCAmJiBhZnRlci5sZW5ndGggPCBhcnIubGVuZ3RoKSB7XHJcblx0XHRpZiAoIV9pc0Z1bmN0aW9uKGxvb3ApIHx8IGxvb3AoYW1vdW50IC0gYWZ0ZXIubGVuZ3RoKSkge1xyXG5cdFx0XHRhZnRlciA9IGFmdGVyLmNvbmNhdChhcnIuc2xpY2UoMCwgYW1vdW50IC0gYWZ0ZXIubGVuZ3RoKSk7XHJcblx0XHR9XHJcblx0fTtcclxuXHRyZXR1cm4gbGVuZ3RoID8gYWZ0ZXIgOiBhZnRlclswXTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9iZWZvcmUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvYmVmb3JlLmpzJztcclxuaW1wb3J0IHJlY29tcG9zZSBmcm9tICcuL3JlY29tcG9zZS5qcyc7XHJcbmltcG9ydCBnbG9iYWxQYXJhbXMgZnJvbSAnLi4vcGFyYW1zLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIGNsaWVudC1idWlsZCBlbnRyeVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xyXG5cdFxyXG5cdGNvbnN0IFdpbmRvdyA9IGdsb2JhbFBhcmFtcy5jb250ZXh0O1xyXG5cclxuXHQvKipcclxuXHQgKiBEZWZpbmUgdGhlIGN1c3RvbWl6ZWQgYnVpbHQtaW4gdGVtcGxhdGUgZWxlbWVudFxyXG5cdCAqIHRoYXQgc3VwcG9ydHMgcmVtb3RlIGNvbnRlbnQuXHJcblx0ICovXHJcblx0V2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZShnbG9iYWxQYXJhbXMuYXR0ck1hcC5idW5kbGUsIGNsYXNzIGV4dGVuZHMgV2luZG93LkhUTUxUZW1wbGF0ZUVsZW1lbnQge1xyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBUaGlzIGhhbmRsZXMgYm90aCB0cmlnZ2VycyByZW1vdGUgbG9hZGluZ1xyXG5cdFx0ICogd2hlbiBzbyBkZWZpbmVkLlxyXG5cdFx0ICpcclxuXHRcdCAqIEBwYXJhbSBzdHJpbmdcdG5hbWVcclxuXHRcdCAqIEBwYXJhbSBzdHJpbmdcdG9sZFZhbHVlXHJcblx0XHQgKiBAcGFyYW0gc3RyaW5nXHRuZXdWYWx1ZVxyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm4gdm9pZFxyXG5cdFx0ICovXHJcblx0XHRhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XHJcblx0XHRcdGlmIChuZXdWYWx1ZSkge1xyXG5cdFx0XHRcdHRoaXMubG9hZCgpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIEF0dGVtcHQgdG8gbG9hZCByZW1vdGUgY29udGVudCBpZiBzbyBkZWZpbmVkLlxyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm4gdm9pZFxyXG5cdFx0ICovXHJcblx0XHRsb2FkKCkge1xyXG5cdFx0XHR2YXIgc3JjID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ3NyYycpO1xyXG5cdFx0XHRpZiAoc3JjICYmIHRoaXMuY29udGVudC5jaGlsZHJlbi5sZW5ndGgpIHtcclxuXHRcdFx0XHRjb25zb2xlLndhcm4oJ0EgQ0hUTUwgYnVuZGxlIG11c3QgZGVmaW5lIG9ubHkgZWl0aGVyIGEgcmVtb3RlIGNvbnRlbnQgb3IgbG9jYWwgY29udGVudCEgQnVuZGxlIGlnbm9yZWQuJyk7XHJcblx0XHRcdH0gZWxzZSBpZiAoc3JjKSB7XHJcblx0XHRcdFx0Ly8gTWlzc2luZyBpbiBqc2RvbVxyXG5cdFx0XHRcdGlmIChXaW5kb3cuZmV0Y2gpIHtcclxuXHRcdFx0XHRcdFdpbmRvdy5mZXRjaChzcmMpLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzcG9uc2Uub2sgPyByZXNwb25zZS50ZXh0KCkgOiBQcm9taXNlLnJlamVjdChyZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuXHRcdFx0XHRcdH0pLnRoZW4oY29udGVudCA9PiB7XHJcblx0XHRcdFx0XHRcdHRoaXMuaW5uZXJIVE1MID0gY29udGVudDtcclxuXHRcdFx0XHRcdFx0Ly8gRGlzcGF0Y2ggdGhlIGV2ZW50LlxyXG5cdFx0XHRcdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQobmV3IFdpbmRvdy5FdmVudCgnYnVuZGxlbG9hZHN1Y2Nlc3MnLCB7XHJcblx0XHRcdFx0XHRcdFx0YnViYmxlczp0cnVlLFxyXG5cdFx0XHRcdFx0XHR9KSk7XHJcblx0XHRcdFx0XHR9KS5jYXRjaChlcnJvciA9PiB7XHJcblx0XHRcdFx0XHRcdC8vIERpc3BhdGNoIHRoZSBldmVudC5cclxuXHRcdFx0XHRcdFx0Y29uc29sZS53YXJuKCdFcnJvciBmZXRjaGluZyB0aGUgYnVuZGxlIGF0ICcgKyBzcmMgKyAnLiAoJyArIGVycm9yICsgJyknKTtcclxuXHRcdFx0XHRcdFx0dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBXaW5kb3cuRXZlbnQoJ2J1bmRsZWxvYWRlcnJvcicsIHtcclxuXHRcdFx0XHRcdFx0XHRidWJibGVzOnRydWUsXHJcblx0XHRcdFx0XHRcdH0pKTtcclxuXHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcclxuXHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIGV2ZW50IHdpbGwgZmlyZSBCRUZPUkUgdGhlIGNvZGUgdGhhdCBiaW5kcyB0byBpdFxyXG5cdFx0XHRcdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQobmV3IFdpbmRvdy5FdmVudCgnYnVuZGxlbG9hZHN1Y2Nlc3MnLCB7XHJcblx0XHRcdFx0XHRcdFx0YnViYmxlczp0cnVlLFxyXG5cdFx0XHRcdFx0XHR9KSk7XHJcblx0XHRcdFx0XHR9LCAwKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVGhlIGF0dHJpYnV0ZXMgd2Ugd2FudCB0byBvYnNlcnZlLlxyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm4gYXJyYXlcclxuXHRcdCAqL1xyXG5cdFx0c3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XHJcblx0XHRcdHJldHVybiBbJ3NyYyddO1xyXG5cdFx0fVxyXG5cdH0sIHtleHRlbmRzOiAndGVtcGxhdGUnfSk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogTWFrZXMgYSBzZXBhcmF0aW9uIGJldHdlZW4gaXRlbXMgdGhhdCBwYXNzIGEgY2FsbGJhY2sgdGVzdCBhbmQgdGhvc2UgdGhhdCBmYWlsLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXlcdCBcdFx0XHRcdGFyclxyXG4gKiBAcGFyYW0gZnVuY3Rpb25cdFx0XHRcdGNhbGxiYWNrXHJcbiAqXHQgKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIGNhbGxiYWNrKSB7XHJcblx0dmFyIHBhc3NlcyA9IFtdO1xyXG5cdHZhciBmYWlsdXJlcyA9IFtdO1xyXG5cdHZhciBsZW5ndGggPSBhcnIubGVuZ3RoO1xyXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuXHRcdGlmIChjYWxsYmFjayhhcnJbaV0pKSB7XHJcblx0XHRcdHBhc3Nlcy5wdXNoKGFycltpXSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRmYWlsdXJlcy5wdXNoKGFycltpXSk7XHJcblx0XHR9O1xyXG5cdH07XHJcblx0cmV0dXJuIFtwYXNzZXMsIGZhaWx1cmVzXTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9iZWZvcmUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvYmVmb3JlLmpzJztcclxuaW1wb3J0IHJlY29tcG9zZSBmcm9tICcuL3JlY29tcG9zZS5qcyc7XHJcbmltcG9ydCBnbG9iYWxQYXJhbXMgZnJvbSAnLi4vcGFyYW1zLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIGNsaWVudC1idWlsZCBlbnRyeVxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGxvYWRpbmdCdW5kbGVzUHJvbWlzZSkge1xyXG5cdFxyXG5cdGNvbnN0IFdpbmRvdyA9IGdsb2JhbFBhcmFtcy5jb250ZXh0O1xyXG5cdFx0XHRcdFxyXG5cdC8qKlxyXG5cdCAqIERlZmluZSB0aGUgY3VzdG9tIGltcG9ydCBlbGVtZW50XHJcblx0ICovXHJcblx0V2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZShnbG9iYWxQYXJhbXMudGFnTWFwLmltcG9ydCwgY2xhc3MgZXh0ZW5kcyBXaW5kb3cuSFRNTEVsZW1lbnQge1xyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBUZXN0cyBpZiBjb25kaXRpb25zIGFyZSByaWdodCB0byByZXNvbHZlIHRoZSBpbXBvcnQuXHJcblx0XHQgKlxyXG5cdFx0ICogQHJldHVybiBib29sXHJcblx0XHQgKi9cclxuXHRcdHNob3VsZFJlc29sdmUoKSB7XHJcblx0XHRcdHJldHVybiAhdGhpcy5oYXNBdHRyaWJ1dGUoJ29uZGVtYW5kJylcclxuXHRcdFx0XHQmJiAhdGhpcy5jbG9zZXN0KCd0ZW1wbGF0ZScpXHJcblx0XHRcdFx0JiYgIXRoaXMuY2xvc2VzdChnbG9iYWxQYXJhbXMudGFnTWFwLmltcG9ydCArICdbb25kZW1hbmRdJyk7XHJcblx0XHR9XHJcblx0XHJcblx0XHQvKipcclxuXHRcdCAqIFRoaXMgdHJpZ2dlcnMgc2VsZi1yZXBsYWNlbWVudFxyXG5cdFx0ICogd2hlbiBzbyBkZWZpbmVkLlxyXG5cdFx0ICpcclxuXHRcdCAqIEByZXR1cm4gdm9pZFxyXG5cdFx0ICovXHJcblx0XHRjb25uZWN0ZWRDYWxsYmFjaygpIHtcclxuXHRcdFx0dGhpcy5wcm9jZXNzZWQgPSBmYWxzZTtcclxuXHRcdFx0aWYgKHRoaXMuc2hvdWxkUmVzb2x2ZSgpKSB7XHJcblx0XHRcdFx0dGhpcy5yZXNvbHZlKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogVGhpcyB0cmlnZ2VycyBzZWxmLXJlcGxhY2VtZW50XHJcblx0XHQgKiB3aGVuIHNvIGRlZmluZWQuXHJcblx0XHQgKlxyXG5cdFx0ICogQHBhcmFtIHN0cmluZ1x0bmFtZVxyXG5cdFx0ICogQHBhcmFtIHN0cmluZ1x0b2xkVmFsdWVcclxuXHRcdCAqIEBwYXJhbSBzdHJpbmdcdG5ld1ZhbHVlXHJcblx0XHQgKlxyXG5cdFx0ICogQHJldHVybiB2b2lkXHJcblx0XHQgKi9cclxuXHRcdGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhuYW1lLCBvbGRWYWx1ZSwgbmV3VmFsdWUpIHtcclxuXHRcdFx0aWYgKHRoaXMuc2hvdWxkUmVzb2x2ZSgpKSB7XHJcblx0XHRcdFx0dGhpcy5yZXNvbHZlKCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcclxuXHRcdC8qKlxyXG5cdFx0ICogQXR0ZW1wdCBzZWxmLXJlcGxhY2VtZW50IGlmIHNvIGRlZmluZWQuXHJcblx0XHQgKlxyXG5cdFx0ICogQHJldHVybiB2b2lkXHJcblx0XHQgKi9cclxuXHRcdHJlc29sdmUoKSB7XHJcblx0XHRcdGlmICghdGhpcy5wYXJlbnROb2RlKSB7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHRcdGxvYWRpbmdCdW5kbGVzUHJvbWlzZS50aGVuKCgpID0+IHtcclxuXHRcdFx0XHR2YXIgcmVwbGFjZW1lbnQsIG5hbWVzcGFjZSwgbmFtZXNwYWNlQXR0ciA9IGdsb2JhbFBhcmFtcy5hdHRyTWFwLm5hbWVzcGFjZTtcclxuXHRcdFx0XHRpZiAoKG5hbWVzcGFjZSA9IF9iZWZvcmUodGhpcy5nZXRBdHRyaWJ1dGUobmFtZXNwYWNlQXR0cikgfHwgJycsICcvLycpKVxyXG5cdFx0XHRcdCYmIChuYW1lc3BhY2UgIT09IHRoaXMuX19uYW1lc3BhY2UpKSB7XHJcblx0XHRcdFx0XHR0aGlzLl9fbmFtZXNwYWNlID0gbmFtZXNwYWNlO1xyXG5cdFx0XHRcdFx0aWYgKCFnbG9iYWxQYXJhbXMuYnVuZGxlcyB8fCAhKHJlcGxhY2VtZW50ID0gZ2xvYmFsUGFyYW1zLmJ1bmRsZXMuZmluZChuYW1lc3BhY2UpKSkge1xyXG5cdFx0XHRcdFx0XHR0aGlzLmlubm5lclRleHQgPSAnTm8gZWxlbWVudCBmb3VuZCBvbiB0aGUgbmFtZXNwYWNlIFwiJyArIG5hbWVzcGFjZSArICdcIiEnO1xyXG5cdFx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdFx0dmFyIHJlc29sdmVkID0gcmVjb21wb3NlKHJlcGxhY2VtZW50LCB0aGlzKTtcclxuXHRcdFx0XHRcdFx0aWYgKHRoaXMuaGFzQXR0cmlidXRlKCdzaGFkb3cnKSkge1xyXG5cdFx0XHRcdFx0XHRcdGlmICghdGhpcy5wYXJlbnROb2RlLnNoYWRvd1Jvb3QpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5hdHRhY2hTaGFkb3coe21vZGU6ICdvcGVuJ30pO1xyXG5cdFx0XHRcdFx0XHRcdH0gXHJcblx0XHRcdFx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLnNoYWRvd1Jvb3QuYXBwZW5kKHJlc29sdmVkKTtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLnJlbW92ZSgpO1xyXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdHRoaXMucmVwbGFjZVdpdGgocmVzb2x2ZWQpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdHJlc29sdmVkLnNldEF0dHJpYnV0ZSgnYXV0b2ltcG9ydGVkJywgJ3RydWUnKTtcclxuXHRcdFx0XHRcdFx0cmVzb2x2ZWQuZGlzcGF0Y2hFdmVudChuZXcgV2luZG93LkV2ZW50KCdpbXBvcnRlZCcsIHtcclxuXHRcdFx0XHRcdFx0XHRidWJibGVzOnRydWUsXHJcblx0XHRcdFx0XHRcdH0pKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdFxyXG5cdFx0LyoqXHJcblx0XHQgKiBUaGUgYXR0cmlidXRlcyB3ZSB3YW50IHRvIG9ic2VydmUuXHJcblx0XHQgKlxyXG5cdFx0ICogQHJldHVybiBhcnJheVxyXG5cdFx0ICovXHJcblx0XHRzdGF0aWMgZ2V0IG9ic2VydmVkQXR0cmlidXRlcygpIHtcclxuXHRcdFx0cmV0dXJuIFsnb25kZW1hbmQnLCBnbG9iYWxQYXJhbXMuYXR0ck1hcC5uYW1lc3BhY2VdO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgZ2xvYmFsUGFyYW1zIGZyb20gJy4uL3BhcmFtcy5qcyc7XHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBvciBmaW5kcyBhIERPTSBlbGVtZW50IGZyb20gc291cmNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nXHRcdHNvdXJjZVxyXG4gKiBAcGFyYW0gb2JqZWN0XHRcdGNvbnRleHREb2N1bWVudFxyXG4gKlxyXG4gKiBAcmV0dXJuIEhUTUxFbGVtZW50XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzb3VyY2UsIGNvbnRleHREb2N1bWVudCA9IG51bGwpIHtcclxuXHRjb250ZXh0RG9jdW1lbnQgPSBjb250ZXh0RG9jdW1lbnQgfHwgZ2xvYmFsUGFyYW1zLmNvbnRleHQuZG9jdW1lbnQ7XHJcblx0aWYgKGNvbnRleHREb2N1bWVudCkge1xyXG5cdFx0dmFyIGVsO1xyXG5cdFx0aWYgKHNvdXJjZS50cmltKCkuc3RhcnRzV2l0aCgnPCcpKSB7XHJcblx0XHRcdC8vIENyZWF0ZSBhIG5vZGUgZnJvbSBtYXJrdXBcclxuXHRcdFx0dmFyIHRlbXAgPSBjb250ZXh0RG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblx0XHRcdHRlbXAuaW5uZXJIdG1sID0gc291cmNlO1xyXG5cdFx0XHRlbCA9IHRlbXAuZmlyc3RDaGlsZDtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGVsID0gY29udGV4dERvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc291cmNlKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBlbDtcclxuXHR9XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBnbG9iYWxQYXJhbXMgZnJvbSAnQHdlYi1uYXRpdmUtanMvY2h0bWwvc3JjL3BhcmFtcy5qcyc7XHJcblxyXG5nbG9iYWxQYXJhbXMucGF0aG5hbWluZyA9IHtcclxuXHQnLyc6IFsnbmFtZScsICdpZCcsXSxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZ2xvYmFsUGFyYW1zOyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfc29ydCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9zb3J0LmpzJztcclxuaW1wb3J0IF9kaWZmZXJlbmNlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2RpZmZlcmVuY2UuanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc1N0cmluZyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzU3RyaW5nLmpzJztcclxuaW1wb3J0IF9pc0VtcHR5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNFbXB0eS5qcyc7XHJcbmltcG9ydCBfY29weSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9jb3B5LmpzJztcclxuaW1wb3J0IF93aXRoIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL3dpdGguanMnO1xyXG5pbXBvcnQge1JlZmxleH0gZnJvbSAnQHdlYi1uYXRpdmUtanMvY2h0bWwnO1xyXG5pbXBvcnQgZ2xvYmFsUGFyYW1zIGZyb20gJy4uLy4uL3BhcmFtcy5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBSb3V0ZXIgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqXHJcbiAqIFRoaXMgY2xhc3MgcHJvdmlkZXMgYWRkaXRpb25hbCBmdW5jdGlvbmFsaXR5IG92ZXJcclxuICogdGhlIG5hdGl2ZSBkb2N1bWVudC5oaXN0b3J5IG9iamVjdCBhbmQgdGhlIFwib25wb3BzdGF0ZVwiIGV2ZW50LlxyXG4gKi9cclxuXHRcdFx0XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvdXRlciB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgUm91dGVyIGluc3RhbmNlLiBUeXBpY2FsbHksXHJcblx0ICogb25seSBvbmUgaW5zdGFuY2Ugd291bGQgYmUgbmVlZGVkIGFwcC13aWRlLiBTbyBhbiBzaG91bGRcclxuXHQgKiBiZSB1c2VkIGFzIGEgc2luZ2xldG9uLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gSGVscGVyc1xyXG5cdFx0dmFyIGdldFByb3BzID0gKHVybE9iaiwgc3RhdGUgPSBudWxsKSA9PiB7XHJcblx0XHRcdHVybE9iaiA9IF9jb3B5KHVybE9iaiwgdXJsUHJvcGVydGllcywgZmFsc2UvKndpdGhTeW1ib2xzKi8pO1xyXG5cdFx0XHRyZXR1cm4gc3RhdGUgPyBfd2l0aCh1cmxPYmosICdzdGF0ZScsIHN0YXRlKSA6IHVybE9iajtcclxuXHRcdH07XHJcblx0XHR2YXIgX3N0cmljdEV2ZW4gPSAoYSwgYikgPT4ge1xyXG5cdFx0XHRpZiAoX2lzT2JqZWN0KGEpICYmIF9pc09iamVjdChiKSkge1xyXG5cdFx0XHRcdHJldHVybiBfc3RyaWN0RXZlbihPYmplY3Qua2V5cyhhKSwgT2JqZWN0LmtleXMoYikpIFxyXG5cdFx0XHRcdCYmIF9zdHJpY3RFdmVuKE9iamVjdC52YWx1ZXMoYSksIE9iamVjdC52YWx1ZXMoYikpO1xyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChfaXNBcnJheShhKSAmJiBfaXNBcnJheShiKSkge1xyXG5cdFx0XHRcdHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggXHJcblx0XHRcdFx0JiYgYS5yZWR1Y2UoKHJlY2lldmVkLCBpdGVtLCBpKSA9PiByZWNpZXZlZCAmJiBpdGVtID09PSBiW2ldLCB0cnVlKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gYSA9PT0gYjtcclxuXHRcdH07XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gU2V0dGluZyB0aGUgXCJocmVmXCIgcHJvcGVydGllcyBtdXN0IGFsc28gcHVibGlzaFxyXG5cdFx0Ly8gYWxsIHRoZSBvdGhlciBwcm9wZXJ0aWVzIGluIHVybFByb3BlcnRpZXNcclxuXHRcdFJlZmxleC50cmFwKHRoaXMsIChlLCByZWNpZXZlZCwgbmV4dCkgPT4ge1xyXG5cdFx0XHRpZiAoZS5xdWVyeSA9PT0gJ2hyZWYnICYmIF9kaWZmZXJlbmNlKHVybFByb3BlcnRpZXMsIGUucmVsYXRlZCkubGVuZ3RoKSB7XHJcblx0XHRcdFx0dmFyIHVybE9iaiA9IFJvdXRlci5wYXJzZVVybChlLnZhbHVlKTtcclxuXHRcdFx0XHRSZWZsZXguc2V0KHRoaXMsIHVybE9iaik7XHJcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBuZXh0KCk7XHJcblx0XHR9LCB7dHlwZTonc2V0J30pO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdC8vIFdoZW4gYW55IG9uZSBvZiB0aGVzZSBwcm9wZXJ0aWVzIGNoYW5nZSxcclxuXHRcdC8vIHRoZSBvdGhlcnMgYXJlIGF1dG9tYXRpY2FsbHkgZGVyaXZlZFxyXG5cdFx0UmVmbGV4Lm9ic2VydmUodGhpcywgWydzZWFyY2gnLCAnc2VhcmNobWFwJywgJ3BhdGhuYW1lJywgJ3BhdGhtYXAnLCAncGF0aHNwbGl0JywgJ2hyZWYnXSwgKHZhbHMsIF92YWxzLCBlKSA9PiB7XHJcblx0XHRcdHZhciBbc2VhcmNoLCBzZWFyY2htYXAsIHBhdGhuYW1lLCBwYXRobWFwLCBwYXRoc3BsaXQsIGhyZWZdID0gdmFscztcclxuXHRcdFx0dmFyIFtfc2VhcmNoLCBfc2VhcmNobWFwLCBfcGF0aG5hbWUsIF9wYXRobWFwLCBfcGF0aHNwbGl0LCBfaHJlZl0gPSBfdmFscztcclxuXHRcdFx0aWYgKGUub3JpZ2luYXRpbmdDcmVhdGVkICYmIGUub3JpZ2luYXRpbmdDcmVhdGVkLmluZGV4T2YoJ3NlYXJjaG1hcCcpID4gLTEpIHtcclxuXHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIHVybE9iaiA9IHt9O1xyXG5cdFx0XHQvLyAtLS0tLS0tLS0tXHJcblx0XHRcdHZhciBpc1NlYXJjaG1hcFNhbWUgPSAhZS5vcmlnaW5hdGluZ0ZpZWxkcy5maWx0ZXIoZiA9PiBmLnN0YXJ0c1dpdGgoJ3NlYXJjaG1hcC4nKSkubGVuZ3RoICYmIF9zdHJpY3RFdmVuKHNlYXJjaG1hcCwgX3NlYXJjaG1hcCk7XHJcblx0XHRcdGlmIChzZWFyY2ggPT09IF9zZWFyY2ggJiYgIWlzU2VhcmNobWFwU2FtZSkge1xyXG5cdFx0XHRcdC8vIFwic2VhcmNobWFwXCIgd2FzIHVwZGF0ZWQuIFNvIHdlIHVwZGF0ZSBcInNlYXJjaFwiXHJcblx0XHRcdFx0dXJsT2JqLnNlYXJjaCA9IFJvdXRlci50b1NlYXJjaChzZWFyY2htYXApO1xyXG5cdFx0XHRcdGlmICh1cmxPYmouc2VhcmNoID09PSB0aGlzLnNlYXJjaCkge1xyXG5cdFx0XHRcdFx0ZGVsZXRlIHVybE9iai5zZWFyY2g7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChzZWFyY2ggIT09IF9zZWFyY2ggJiYgaXNTZWFyY2htYXBTYW1lKSB7XHJcblx0XHRcdFx0Ly8gXCJzZWFyY2hcIiB3YXMgdXBkYXRlZC4gU28gd2UgdXBkYXRlIFwic2VhcmNobWFwXCJcclxuXHRcdFx0XHR1cmxPYmouc2VhcmNobWFwID0gUm91dGVyLnRvU2VhcmNobWFwKHNlYXJjaCk7XHJcblx0XHRcdFx0aWYgKF9zdHJpY3RFdmVuKHVybE9iai5zZWFyY2htYXAsIHRoaXMuc2VhcmNobWFwKSkge1xyXG5cdFx0XHRcdFx0ZGVsZXRlIHVybE9iai5zZWFyY2htYXA7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdC8vIC0tLS0tLS0tLS1cclxuXHRcdFx0dmFyIGlzUGF0aG1hcFNhbWUgPSAhZS5vcmlnaW5hdGluZ0ZpZWxkcy5maWx0ZXIoZiA9PiBmLnN0YXJ0c1dpdGgoJ3BhdGhtYXAuJykpLmxlbmd0aCAmJiBfc3RyaWN0RXZlbihwYXRobWFwLCBfcGF0aG1hcCk7XHJcblx0XHRcdHZhciBpc1BhdGhzcGxpdFNhbWUgPSAhZS5vcmlnaW5hdGluZ0ZpZWxkcy5maWx0ZXIoZiA9PiBmLnN0YXJ0c1dpdGgoJ3BhdGhzcGxpdC4nKSkubGVuZ3RoICYmIF9zdHJpY3RFdmVuKHBhdGhzcGxpdCwgX3BhdGhzcGxpdCk7XHJcblx0XHRcdGlmIChwYXRobmFtZSA9PT0gX3BhdGhuYW1lICYmICghaXNQYXRobWFwU2FtZSB8fCAhaXNQYXRoc3BsaXRTYW1lKSkge1xyXG5cdFx0XHRcdC8vIFdlIHVwZGF0ZSBcInBhdGhuYW1lXCIgZnJvbSB0aGUgbmV3IFwicGF0aG1hcFwiL1wicGF0aHNwbGl0XCJcclxuXHRcdFx0XHR1cmxPYmoucGF0aG5hbWUgPSBSb3V0ZXIudG9QYXRobmFtZSghaXNQYXRoc3BsaXRTYW1lID8gcGF0aHNwbGl0IDogcGF0aG1hcCwgdGhpcy5wYXRobmFtZS8qcmVmZXJlbmNlVXJsKi8pO1xyXG5cdFx0XHRcdGlmICh1cmxPYmoucGF0aG5hbWUgPT09IHRoaXMucGF0aG5hbWUpIHtcclxuXHRcdFx0XHRcdGRlbGV0ZSB1cmxPYmoucGF0aG5hbWU7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdGlmIChpc1BhdGhtYXBTYW1lICYmIChwYXRobmFtZSAhPT0gX3BhdGhuYW1lIHx8ICFpc1BhdGhzcGxpdFNhbWUpKSB7XHJcblx0XHRcdFx0Ly8gV2UgdXBkYXRlIFwicGF0aG1hcFwiIGZyb20gdGhlIG5ldyBcInBhdGhuYW1lXCIvXCJwYXRoc3BsaXRcIlxyXG5cdFx0XHRcdHVybE9iai5wYXRobWFwID0gUm91dGVyLnRvUGF0aG1hcChwYXRobmFtZSAhPT0gX3BhdGhuYW1lID8gcGF0aG5hbWUgOiBwYXRoc3BsaXQpO1xyXG5cdFx0XHRcdGlmIChfc3RyaWN0RXZlbih1cmxPYmoucGF0aG1hcCwgdGhpcy5wYXRobWFwKSkge1xyXG5cdFx0XHRcdFx0ZGVsZXRlIHVybE9iai5wYXRobWFwO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoaXNQYXRoc3BsaXRTYW1lICYmIChwYXRobmFtZSAhPT0gX3BhdGhuYW1lIHx8ICFpc1BhdGhtYXBTYW1lKSkge1xyXG5cdFx0XHRcdC8vIFdlIHVwZGF0ZSBcInBhdGhzcGxpdFwiIGZyb20gdGhlIG5ldyBcInBhdGhuYW1lXCIvXCJwYXRobWFwXCJcclxuXHRcdFx0XHR1cmxPYmoucGF0aHNwbGl0ID0gUm91dGVyLnRvUGF0aHNwbGl0KHBhdGhuYW1lICE9PSBfcGF0aG5hbWUgPyBwYXRobmFtZSA6IHBhdGhtYXAsIHRoaXMucGF0aG5hbWUvKnJlZmVyZW5jZVVybCovKTtcclxuXHRcdFx0XHRpZiAoX3N0cmljdEV2ZW4odXJsT2JqLnBhdGhzcGxpdCwgdGhpcy5wYXRoc3BsaXQpKSB7XHJcblx0XHRcdFx0XHRkZWxldGUgdXJsT2JqLnBhdGhzcGxpdDtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gLS0tLS0tLS0tLVxyXG5cdFx0XHRpZiAoaHJlZiA9PT0gX2hyZWYgJiYgIV9pc0VtcHR5KHVybE9iaikpIHtcclxuXHRcdFx0XHQvLyBXZSB1cGRhdGUgXCJocmVmXCIgZnJvbSB0aGUgbmV3IGNvbXBvbmVudCB2YWx1ZXNcclxuXHRcdFx0XHR1cmxPYmouaHJlZiA9IHRoaXMub3JpZ2luO1xyXG5cdFx0XHRcdHVybE9iai5ocmVmICs9IHVybE9iai5wYXRobmFtZS8qaWYgcGF0aG1hcCBvciBwYXRoc3BsaXQgd2FzIHRoZSBjaGFuZ2UqLyB8fCBwYXRobmFtZS8qd2hldGhlciBvciBub3QgcGF0aG5hbWUgd2FzIHRoZSBjaGFuZ2UqLztcclxuXHRcdFx0XHR1cmxPYmouaHJlZiArPSB1cmxPYmouc2VhcmNoLyppZiBzZWFyY2htYXAgd2FzIHRoZSBjaGFuZ2UqLyB8fCBzZWFyY2gvKndoZXRoZXIgb3Igbm90IHNlYXJjaCB3YXMgdGhlIGNoYW5nZSovIHx8ICcnO1xyXG5cdFx0XHRcdGlmICh1cmxPYmouaHJlZiA9PT0gdGhpcy5ocmVmKSB7XHJcblx0XHRcdFx0XHRkZWxldGUgdXJsT2JqLmhyZWY7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2UgaWYgKF9pc0VtcHR5KHVybE9iaikgJiYgaHJlZiAhPT0gX2hyZWYpIHtcclxuXHRcdFx0XHQvLyBXZSB1cGRhdGUgY29tcG9uZW50IHZhbHVlcyBmcm9tIHRoZSBuZXcgXCJocmVmXCJcclxuXHRcdFx0XHR1cmxPYmogPSBSb3V0ZXIucGFyc2VVcmwoaHJlZik7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCFfaXNFbXB0eSh1cmxPYmopKSB7XHJcblx0XHRcdFx0cmV0dXJuIFJlZmxleC5zZXQodGhpcywgdXJsT2JqLCB0cnVlLypyZXR1cm5FdmVudCovKTtcclxuXHRcdFx0fVxyXG5cdFx0fSwge29ic2VydmVEb3duOnRydWUvKmZvciBwYXRobWFwL3BhdGhzcGxpdC9zZWFyY2htYXAgdXBkYXRlcyovfSk7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gU3luZGljYXRlIGNoYW5nZXMgdG9cclxuXHRcdC8vIHRoZSBicm93c2VyO3MgbG9jYXRpb24gYmFyXHJcblx0XHRSZWZsZXgub2JzZXJ2ZSh0aGlzLCAnaHJlZicsIGhyZWYgPT4ge1xyXG5cdFx0XHRpZiAoaHJlZiA9PT0gZG9jdW1lbnQubG9jYXRpb24uaHJlZikge1xyXG5cdFx0XHRcdHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh0aGlzLnN0YXRlLCAnJywgaHJlZik7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0d2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHRoaXMuc3RhdGUsICcnLCBocmVmKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gVGhpcyBldmVudCBpcyB0cmlnZ2VyZWQgYnlcclxuXHRcdC8vIGVpdGhlciB0aGUgYnJvd3NlciBiYWNrIGJ1dHRvbixcclxuXHRcdC8vIHRoZSB3aW5kb3cuaGlzdG9yeS5iYWNrKCksXHJcblx0XHQvLyB0aGUgd2luZG93Lmhpc3RvcnkuZm9yd2FyZCgpLFxyXG5cdFx0Ly8gb3IgdGhlIHdpbmRvdy5oaXN0b3J5LmdvKCkgYWN0aW9uLlxyXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgZSA9PiB7XHJcblx0XHRcdC8vIE5lZWRlZCB0byBhbG93IGRvY3VtZW50LmxvY2F0aW9uXHJcblx0XHRcdC8vIHRvIHVwZGF0ZSB0byB3aW5kb3cubG9jYXRpb25cclxuXHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XHJcblx0XHRcdFx0UmVmbGV4LnNldCh0aGlzLCBnZXRQcm9wcyhkb2N1bWVudC5sb2NhdGlvbiwgd2luZG93Lmhpc3Rvcnkuc3RhdGUpKTtcclxuXHRcdFx0fSwgMCk7XHJcblx0XHR9KTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBDYXB0dXJlIGFsbCBsaW5rLWNsaWNrc1xyXG5cdFx0Ly8gYW5kIGZpcmUgdG8gdGhpcyByb3V0ZXIuXHJcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlID0+IHtcclxuXHRcdFx0Ly8gVE9ETzogcmVtb3ZlIHdpdGhvdXQgaXNzdWVzXHJcblx0XHRcdGlmICghZS50YXJnZXQub3JpZ2luIHx8IGUudGFyZ2V0Lm9yaWdpbiA9PT0gdGhpcy5vcmlnaW4pIHtcclxuXHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0dmFyIGFuY2hvciwgaHJlZiwgdGFyZ2V0O1xyXG5cdFx0XHRcdGlmICgoYW5jaG9yID0gZS50YXJnZXQuY2xvc2VzdCgnYScpKSBcclxuXHRcdFx0XHQmJiAoaHJlZiA9IGFuY2hvci5ocmVmKSkge1xyXG5cdFx0XHRcdFx0dmFyIGUyID0gdGhpcy5yb3V0ZShocmVmLCBudWxsLCBhbmNob3IuZ2V0QXR0cmlidXRlKCd0YXJnZXQnKSk7XHJcblx0XHRcdFx0XHRpZiAoZTIgJiYgZTIuZGVmYXVsdFByZXZlbnRlZCkge1xyXG5cdFx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBTdGFydHVwIHByb3BlcnRpZXNcclxuXHRcdGlmICghdGhpcy5ocmVmKSB7XHJcblx0XHRcdC8vIFN0YXJ0dXAgcm91dGVcclxuXHRcdFx0UmVmbGV4LnNldCh0aGlzLCBnZXRQcm9wcyhkb2N1bWVudC5sb2NhdGlvbikpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCF0aGlzLnN0YXRlICYmIHdpbmRvdy5oaXN0b3J5KSB7XHJcblx0XHRcdC8vIFN0YXJ0dXAgc3RhdGVcclxuXHRcdFx0UmVmbGV4LnNldCh0aGlzLCAnc3RhdGUnLCB3aW5kb3cuaGlzdG9yeS5zdGF0ZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTZXRzIG5ldyBVUkwgYW5kIHN0YXRlIGRhdGEgYW5kIGZpcmVzIHRoZSBjaGFuZ2UuXHJcblx0ICpcclxuXHQgKiBGb3IgdGhlIGJlbmVmaXQgb2YgY2FsbGluZyBvYnNlcnZlcnMgYW5kIGFjY2Vzc2luZyBsaXN0ZW5lcnMnIGRpc3Bvc2l0aW9uLFxyXG5cdCAqIHRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIHVzZWQgaW5zdGVhZCBvZiB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoKSBhbmQgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKCkuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nIFx0aHJlZlxyXG5cdCAqIEBwYXJhbSBvYmplY3QgXHRyZXF1ZXN0XHJcblx0ICogQHBhcmFtIHN0cmluZyBcdHRhcmdldFxyXG5cdCAqXHJcblx0ICogQHJldHVybiBVc2VyRXZlbnRcclxuXHQgKi9cclxuXHRyb3V0ZShocmVmLCByZXF1ZXN0ID0gbnVsbCwgdGFyZ2V0ID0gbnVsbCkge1xyXG5cdFx0dmFyIHVybE9iaiA9IHtocmVmfTtcclxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xyXG5cdFx0XHR1cmxPYmoucmVxdWVzdCA9IHJlcXVlc3Q7XHJcblx0XHR9XHJcblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDIpIHtcclxuXHRcdFx0dXJsT2JqLnRhcmdldCA9IHRhcmdldDtcclxuXHRcdH1cclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRyZXR1cm4gUmVmbGV4LnNldCh0aGlzLCB1cmxPYmosIHRydWUvKnJldHVybkV2ZW50Ki8pO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBVcGRhdGVzIHRoZSBjdXJyZW50IHVybCB3aXRoIG5ldyBzdGF0ZSBkYXRhLlxyXG5cdCAqXHJcblx0ICogRm9yIHRoZSBiZW5lZml0IG9mIGNhbGxpbmcgb2JzZXJ2ZXJzIGFuZCBhY2Nlc3NpbmcgbGlzdGVuZXJzJyBkaXNwb3NpdGlvbixcclxuXHQgKiB0aGlzIGZ1bmN0aW9uIHNob3VsZCBiZSB1c2VkIGluc3RlYWQgb2Ygd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKCkuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gb2JqZWN0IFx0c3RhdGVcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gVXNlckV2ZW50XHJcblx0ICovXHJcblx0dXBkYXRlKHN0YXRlKSB7XHJcblx0XHR3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoc3RhdGUsICcnLCBkb2N1bWVudC5sb2NhdGlvbik7XHJcblx0XHRyZXR1cm4gUmVmbGV4LnNldCh0aGlzLCAnc3RhdGUnLCBzdGF0ZSwgdHJ1ZS8qcmV0dXJuRXZlbnQqLyk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBGb3J3YXJkcyB0byBhIHZpc2l0ZWQgcm91dGUgdXNpbmcgd2luZG93Lmhpc3RvcnkuZm9yd2FyZCgpXHJcblx0ICpcclxuXHQgKiBUaGlzIGZ1bmN0aW9uIGV2ZW50dWFsbHkgY2FsbHMgb2JzZXJ2ZXJzIHZpYSBcInBvcHN0YXRlXCIgZXZlbnQgYm91bmQgaW4gdGhlIGNvbnN0cnVjdG9yLlxyXG5cdCAqIEJ1dCB0aGlzIHdvbid0IHJldHVybiBhIFByb21pc2UgYXMgUm91dGVyLnJvdXRlKCkgd291bGQuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRmb3J3YXJkKCkge1xyXG5cdFx0d2luZG93Lmhpc3RvcnkuZm9yd2FyZCgpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUmV0dXJucyB0byBhIHByZXZpb3VzIHJvdXRlIHVzaW5nIHdpbmRvdy5oaXN0b3J5LmJhY2soKVxyXG5cdCAqXHJcblx0ICogVGhpcyBmdW5jdGlvbiBldmVudHVhbGx5IGNhbGxzIG9ic2VydmVycyB2aWEgXCJwb3BzdGF0ZVwiIGV2ZW50IGJvdW5kIGluIHRoZSBjb25zdHJ1Y3Rvci5cclxuXHQgKiBCdXQgdGhpcyB3b24ndCByZXR1cm4gYSBQcm9taXNlIGFzIFJvdXRlci5yb3V0ZSgpIHdvdWxkLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0YmFjaygpIHtcclxuXHRcdHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEdvZXMgdG8gYSBzcGVjaWZpYyBoaXN0b3J5IGVudHJ5IHVzaW5nIHdpbmRvdy5oaXN0b3J5LmdvKClcclxuXHQgKlxyXG5cdCAqIFRoaXMgZnVuY3Rpb24gZXZlbnR1YWxseSBjYWxscyBvYnNlcnZlcnMgdmlhIFwicG9wc3RhdGVcIiBldmVudCBib3VuZCBpbiB0aGUgY29uc3RydWN0b3IuXHJcblx0ICogQnV0IHRoaXMgd29uJ3QgcmV0dXJuIGEgUHJvbWlzZSBhcyBSb3V0ZXIucm91dGUoKSB3b3VsZC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBpbnQga2V5XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRnbyhrZXkpIHtcclxuXHRcdHdpbmRvdy5oaXN0b3J5LmdvKGtleSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBUZWxscyBpZiB0aGUgZ2l2ZW4gVVJMIG1hdGNoZXMgdGhlIHJvdXRlcidzIGN1cnJlbnQgVVJMXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nXHRcdFx0aHJlZlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBib29sXHJcblx0ICovXHJcblx0bWF0Y2hlcyhocmVmKSB7XHJcblx0XHR2YXIgdXJsT2JqID0gUm91dGVyLnBhcnNlVXJsKGhyZWYpO1xyXG5cdFx0cmV0dXJuICh0aGlzLmhyZWYgKyAnLycpLnN0YXJ0c1dpdGgoIXVybE9iai5ocmVmLmVuZHNXaXRoKCcvJykgPyB1cmxPYmouaHJlZiArICcvJyA6IHVybE9iai5ocmVmKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFBhcnNlcyBhbiBVUkwgYW5kIHJldHVybnMgaXRzIHByb3BlcnRpZXNcclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmdcdFx0XHRocmVmXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG9iamVjdFxyXG5cdCAqL1xyXG5cdHN0YXRpYyBwYXJzZVVybChocmVmKSB7XHJcblx0XHR2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuXHRcdGEuaHJlZiA9IGhyZWY7XHJcblx0XHRyZXR1cm4gdXJsUHJvcGVydGllcy5yZWR1Y2UoKG9iaiwgcHJvcCkgPT4gX3dpdGgob2JqLCBwcm9wLCBhW3Byb3BdKSwge30pO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUGFyc2VzIHRoZSBpbnB1dCBzZWFyY2ggc3RyaW5nIGludG8gYSBuYW1lZCBtYXBcclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmdcdFx0XHRzZWFyY2hcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gb2JqZWN0XHJcblx0ICovXHJcblx0c3RhdGljIHRvU2VhcmNobWFwKHNlYXJjaCkge1xyXG5cdFx0dmFyIHF1ZXJ5QXJyID0gKHNlYXJjaC5zdGFydHNXaXRoKCc/JykgPyBzZWFyY2guc3Vic3RyKDEpIDogc2VhcmNoKVxyXG5cdFx0XHQuc3BsaXQoJyYnKS5maWx0ZXIoc3RyID0+IHN0cikubWFwKHN0ciA9PiBzdHIuc3BsaXQoJz0nKS5tYXAoc3RyID0+IHN0ci50cmltKCkpKTtcclxuXHRcdHJldHVybiBxdWVyeUFyci5yZWR1Y2UoKHJlY2lldmVkLCBxKSA9PiBfd2l0aChyZWNpZXZlZCwgcVswXSwgcVsxXSksIHt9KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFN0cmluZ2lmaWVzIHRoZSBpbnB1dCBzZWFyY2htYXAgdG8gc2VhcmNoIHN0cmluZy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0XHRzZWFyY2htYXBcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gc3RyaW5nXHJcblx0ICovXHJcblx0c3RhdGljIHRvU2VhcmNoKHNlYXJjaG1hcCkge1xyXG5cdFx0cmV0dXJuIE9iamVjdC5rZXlzKHNlYXJjaG1hcCkubGVuZ3RoIFxyXG5cdFx0XHQ/ICc/JyArIE9iamVjdC5rZXlzKHNlYXJjaG1hcCkubWFwKGsgPT4gayArICc9JyArIHNlYXJjaG1hcFtrXSkuam9pbignJicpXHJcblx0XHRcdDogJyc7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBQYXJzZXMgdGhlIGlucHV0IHBhdGggYW5kIHJldHVybnMgaXRzIHBhcnRzIG5hbWVkXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nfGFycmF5XHRcdFx0cGF0aG5hbWVPclBhdGhzcGxpdFxyXG5cdCAqXHJcblx0ICogQHJldHVybiBvYmplY3RcclxuXHQgKi9cclxuXHRzdGF0aWMgdG9QYXRobWFwKHBhdGhuYW1lT3JQYXRoc3BsaXQpIHtcclxuXHRcdHZhciBwYXRoQXJyID0gX2lzU3RyaW5nKHBhdGhuYW1lT3JQYXRoc3BsaXQpID8gcGF0aG5hbWVPclBhdGhzcGxpdC5zcGxpdCgnLycpLmZpbHRlcihrID0+IGspIDogcGF0aG5hbWVPclBhdGhzcGxpdDtcclxuXHRcdHZhciBwYXRoU3RyID0gX2lzU3RyaW5nKHBhdGhuYW1lT3JQYXRoc3BsaXQpID8gcGF0aG5hbWVPclBhdGhzcGxpdCA6ICcvJyArIHBhdGhBcnIuam9pbignLycpICsgJy8nO1xyXG5cdFx0dmFyIHBhdGhuYW1pbmcgPSBfc29ydChPYmplY3Qua2V5cyhnbG9iYWxQYXJhbXMucGF0aG5hbWluZyksICdkZXNjJykucmVkdWNlKChfcGF0aG5hbWVzLCBfcGF0aCkgPT4ge1xyXG5cdFx0XHRyZXR1cm4gX3BhdGhuYW1lcyB8fCAoKHBhdGhTdHIgKyAnLycpLnN0YXJ0c1dpdGgoX3BhdGggPT09ICcvJyA/IF9wYXRoIDogJy8nICsgX3BhdGguc3BsaXQoJy8nKS5maWx0ZXIoayA9PiBrKS5qb2luKCcvJykgKyAnLycpID8gZ2xvYmFsUGFyYW1zLnBhdGhuYW1pbmdbX3BhdGhdIDogbnVsbCk7XHJcblx0XHR9LCBudWxsKTtcclxuXHRcdHJldHVybiAhcGF0aG5hbWluZyA/IHt9IDogcGF0aEFyci5yZWR1Y2UoKG9iaiwgcGF0aEl0ZW0sIGkpID0+IHBhdGhuYW1pbmdbaV0gPyBfd2l0aChvYmosIHBhdGhuYW1pbmdbaV0sIHBhdGhJdGVtKSA6IG9iaiwge30pO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUGFyc2VzIHRoZSBpbnB1dCBwYXRoIGFuZCByZXR1cm5zIGl0cyBwYXJ0cyB1bm5hbWVkXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gc3RyaW5nfG9iamVjdFx0XHRcdHBhdGhuYW1lT3JQYXRobWFwXHJcblx0ICogQHBhcmFtIHN0cmluZ1x0XHRcdFx0cmVmZXJlbmNlVXJsXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIGFycmF5XHJcblx0ICovXHJcblx0c3RhdGljIHRvUGF0aHNwbGl0KHBhdGhuYW1lT3JQYXRobWFwLCByZWZlcmVuY2VVcmwgPSBudWxsKSB7XHJcblx0XHRpZiAoX2lzU3RyaW5nKHBhdGhuYW1lT3JQYXRobWFwKSkge1xyXG5cdFx0XHRyZXR1cm4gcGF0aG5hbWVPclBhdGhtYXAuc3BsaXQoJy8nKS5maWx0ZXIoayA9PiBrKTtcclxuXHRcdH1cclxuXHRcdGlmICghcmVmZXJlbmNlVXJsKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignQSBcInJlZmVyZW5jZVVybFwiIG11c3QgYmUgZ2l2ZW4gdG8gcHJvcGVybHkgZGV0ZXJtaW5lIGEgcGF0aC1uYW1pbmcgc2NoZW1lLicpO1xyXG5cdFx0fVxyXG5cdFx0dmFyIHBhdGhuYW1pbmcgPSBfc29ydChPYmplY3Qua2V5cyhnbG9iYWxQYXJhbXMucGF0aG5hbWluZyksICdkZXNjJykucmVkdWNlKChfcGF0aG5hbWVzLCBfcGF0aCkgPT4ge1xyXG5cdFx0XHRyZXR1cm4gX3BhdGhuYW1lcyB8fCAoKHJlZmVyZW5jZVVybCArICcvJykuc3RhcnRzV2l0aChfcGF0aCA9PT0gJy8nID8gX3BhdGggOiAnLycgKyBfcGF0aC5zcGxpdCgnLycpLmZpbHRlcihrID0+IGspLmpvaW4oJy8nKSArICcvJykgPyBnbG9iYWxQYXJhbXMucGF0aG5hbWluZ1tfcGF0aF0gOiBudWxsKTtcclxuXHRcdH0sIG51bGwpO1xyXG5cdFx0aWYgKF9kaWZmZXJlbmNlKE9iamVjdC5rZXlzKHBhdGhuYW1lT3JQYXRobWFwKSwgcGF0aG5hbWluZykubGVuZ3RoKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignVGhlIGdpdmVuIHBhdGhtYXAgY29udGFpbnMga2V5cyAoJyArIE9iamVjdC5rZXlzKHBhdGhuYW1lT3JQYXRobWFwKS5qb2luKCcsICcpICsgJykgbm90IHJlY29nbml6ZWQgYnkgdGhlIGltcGxpZWQgcGF0aC1uYW1pbmcgc2NoZW1lICgnICsgcGF0aG5hbWluZy5qb2luKCcsICcpICsgJyknKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiAhcGF0aG5hbWluZyA/IFtdIDogcGF0aG5hbWluZy5tYXAobmFtZSA9PiBwYXRobmFtZU9yUGF0aG1hcFtuYW1lXSkuZmlsdGVyKGEgPT4gYSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBTdHJpbmdpZmllcyB0aGUgaW5wdXQgcGF0aG1hcCBvciBwYXRoc3BsaXQgdG8gYSBzdHJpbmdcclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3R8YXJyYXlcdFx0XHRwYXRobWFwT3JQYXRoc3BsaXRcclxuXHQgKiBAcGFyYW0gc3RyaW5nXHRcdFx0XHRyZWZlcmVuY2VVcmxcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gc3RyaW5nXHJcblx0ICovXHJcblx0c3RhdGljIHRvUGF0aG5hbWUocGF0aG1hcE9yUGF0aHNwbGl0LCByZWZlcmVuY2VVcmwgPSBudWxsKSB7XHJcblx0XHRpZiAoX2lzT2JqZWN0KHBhdGhtYXBPclBhdGhzcGxpdCkpIHtcclxuXHRcdFx0aWYgKCFyZWZlcmVuY2VVcmwpIHtcclxuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0EgXCJyZWZlcmVuY2VVcmxcIiBtdXN0IGJlIGdpdmVuIHRvIHByb3Blcmx5IGRldGVybWluZSBhIHBhdGgtbmFtaW5nIHNjaGVtZS4nKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRwYXRobWFwT3JQYXRoc3BsaXQgPSBSb3V0ZXIudG9QYXRoc3BsaXQocGF0aG1hcE9yUGF0aHNwbGl0LCByZWZlcmVuY2VVcmwpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuICcvJyArIHBhdGhtYXBPclBhdGhzcGxpdC5qb2luKCcvJykgKyAnLyc7XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIFRoZXNlIGFyZSBzdGFuZGFyZFxyXG4gKiBhbmQgc2hvdWxkbnQnL2Nhbid0IGJlIG1vZGlmaWVkXHJcbiAqXHJcbiAqIEBhcnJheVxyXG4gKi9cclxuY29uc3QgdXJsUHJvcGVydGllcyA9IFtcclxuXHQnaGFzaCcsXHJcblx0J2hvc3QnLFxyXG5cdCdob3N0bmFtZScsXHJcblx0J2hyZWYnLFxyXG5cdCdvcmlnaW4nLFxyXG5cdCdwYXRobmFtZScsXHJcblx0J3BvcnQnLFxyXG5cdCdwcm90b2NvbCcsXHJcblx0J3NlYXJjaCcsXHJcbl07IiwiXHJcbi8qKlxyXG4gKiBSZW1vdmVzIGluc3RhbmNlcyBvZiByZWZlcmVuY2UgdXAgdG8gPGxpbWl0PiB0aW1lcy5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqIEBwYXJhbSBtaXhlZFx0IFx0aXRtXHJcbiAqIEBwYXJhbSBpbnR8Ym9vbCBcdGxpbWl0XHJcbiAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFyciwgaXRtLCBsaW1pdCA9IGZhbHNlKSB7XHJcblx0dmFyIGkgPSBhcnIuaW5kZXhPZihpdG0pO1xyXG5cdHdoaWxlIChpID4gLTEgJiYgKGxpbWl0IHx8IGxpbWl0ID09PSBmYWxzZSkpIHtcclxuXHRcdGFyci5zcGxpY2UoaSwgMSk7XHJcblx0XHRpZiAobGltaXQgPiAwKSB7XHJcblx0XHRcdGxpbWl0IC0tO1xyXG5cdFx0fTtcclxuXHRcdGkgPSBhcnIuaW5kZXhPZihpdG0pO1xyXG5cdH07XHJcblx0cmV0dXJuIGFycjtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBET00gcXVlcnkuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHRcdFx0XHRzZWxlY3RvclxyXG4gKiBAcGFyYW0gRE9NRWxlbWVudCBcdFx0XHRjb250ZXh0XHJcbiAqIEBwYXJhbSBib29sXHRcdCBcdFx0XHRhbGxcclxuICpcclxuICogQHJldHVybiBET01Ob2RlTGlzdHxIVE1MRWxlbWVudFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZmluZChzZWxlY3RvciwgY29udGV4dCA9IGRvY3VtZW50LCBhbGwgPSBmYWxzZSkge1xyXG5cdHZhciBtYXRjaGVkSXRlbXMsIG1ldGhvZCA9IGFsbCA/ICdxdWVyeVNlbGVjdG9yQWxsJyA6ICdxdWVyeVNlbGVjdG9yJztcclxuXHR0cnkge1xyXG5cdFx0bWF0Y2hlZEl0ZW1zID0gY29udGV4dFttZXRob2RdKHNlbGVjdG9yKTtcclxuXHR9IGNhdGNoKGUpIHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdG1hdGNoZWRJdGVtcyA9IGNvbnRleHRbbWV0aG9kXShzZWxlY3Rvci5yZXBsYWNlKC9cXDppc1xcKC9nLCAnOm1hdGNoZXMoJykpO1xyXG5cdFx0fSBjYXRjaChlKSB7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0bWF0Y2hlZEl0ZW1zID0gY29udGV4dFttZXRob2RdKHNlbGVjdG9yLnJlcGxhY2UoL1xcOmlzXFwoL2csICc6LXdlYmtpdC1hbnkoJykpO1xyXG5cdFx0XHR9IGNhdGNoKGUpIHtcclxuXHRcdFx0XHR0cnkge1xyXG5cdFx0XHRcdFx0bWF0Y2hlZEl0ZW1zID0gY29udGV4dFttZXRob2RdKHNlbGVjdG9yLnJlcGxhY2UoL1xcOmlzXFwoL2csICc6LW1vei1hbnkoJykpO1xyXG5cdFx0XHRcdH0gY2F0Y2goZSkge1xyXG5cdFx0XHRcdFx0dGhyb3cgZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcblx0cmV0dXJuIG1hdGNoZWRJdGVtcztcclxufTtcclxuXHJcbi8qKlxyXG4gKiBRdWVyaWVzIGEgRE9NIGNvbnRleHQgZm9yIGFsbCBlbGVtZW50cyBtYXRjaGluZ1xyXG4gKiB0aGUgZ2l2ZW4gc2VsZWN0b3IuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHRcdFx0XHRzZWxlY3RvclxyXG4gKiBAcGFyYW0gRE9NRWxlbWVudCBcdFx0XHRjb250ZXh0XHJcbiAqXHJcbiAqIEByZXR1cm4gRE9NTm9kZUxpc3RcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmaW5kQWxsKHNlbGVjdG9yLCBjb250ZXh0ID0gZG9jdW1lbnQpIHtcclxuXHRyZXR1cm4gZmluZChzZWxlY3RvciwgY29udGV4dCwgdHJ1ZS8qYWxsKi8pO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFF1ZXJpZXMgYSBET00gY29udGV4dCBmb3IgdGhlIGZpcnN0IGVsZW1lbnQgbWF0Y2hpbmdcclxuICogdGhlIGdpdmVuIHNlbGVjdG9yLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0XHRcdFx0c2VsZWN0b3JcclxuICogQHBhcmFtIERPTUVsZW1lbnQgXHRcdFx0Y29udGV4dFxyXG4gKlxyXG4gKiBAcmV0dXJuIEhUTUxFbGVtZW50XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZmluZE9uZShzZWxlY3RvciwgY29udGV4dCA9IGRvY3VtZW50KSB7XHJcblx0cmV0dXJuIGZpbmQoc2VsZWN0b3IsIGNvbnRleHQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBwb2x5ZmlsbHNcclxuICovXHJcblxyXG5pZiAoIUVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMpIHtcclxuXHRFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzID0gXHJcblx0RWxlbWVudC5wcm90b3R5cGUubWF0Y2hlc1NlbGVjdG9yIHx8IFxyXG5cdEVsZW1lbnQucHJvdG90eXBlLm1vek1hdGNoZXNTZWxlY3RvciB8fFxyXG5cdEVsZW1lbnQucHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IFxyXG5cdEVsZW1lbnQucHJvdG90eXBlLm9NYXRjaGVzU2VsZWN0b3IgfHwgXHJcblx0RWxlbWVudC5wcm90b3R5cGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XHJcblx0ZnVuY3Rpb24ocykge1xyXG5cdFx0dmFyIG1hdGNoZXMgPSAodGhpcy5kb2N1bWVudCB8fCB0aGlzLm93bmVyRG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3JBbGwocyksXHJcblx0XHRcdGkgPSBtYXRjaGVzLmxlbmd0aDtcclxuXHRcdHdoaWxlICgtLWkgPj0gMCAmJiBtYXRjaGVzLml0ZW0oaSkgIT09IHRoaXMpIHt9XHJcblx0XHRyZXR1cm4gaSA+IC0xOyAgICAgICAgICAgIFxyXG5cdH07XHJcbn1cclxuIiwiXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBhIHN0cmluZyB0byB0aXRsZSBjYXNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0c3RyXHJcbiAqIEBwYXJhbSBib29sIFx0XHRzdHJpY3RcclxuICpcclxuICogQHJldHVybiBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ciwgc3RyaWN0KSB7XHJcblx0aWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XHJcblx0XHRyZXR1cm4gc3RyO1xyXG5cdH1cclxuXHRyZXR1cm4gc3RyLnJlcGxhY2UoL1xcd1xcUyovZywgIGZ1bmN0aW9uKHR4dCkgeyByZXR1cm4gdHh0LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgKCh0eXBlb2Ygc3RyaWN0ICE9PSB1bmRlZmluZWQgJiYgc3RyaWN0KSA/IHR4dC5zdWJzdHIoMSkudG9Mb3dlckNhc2UoKSA6IHR4dC5zdWJzdHIoMSkpOyB9KVxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX3RvVGl0bGUgZnJvbSAnLi90b1RpdGxlLmpzJztcclxuXHJcbi8qKlxyXG4gKiBNYWtlcyBhIHN0cmluZyBjYW1lbC1jYXNlZC5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHN0clxyXG4gKiBAcGFyYW0gYm9vbFx0IFx0ZnJvbVN0YXJ0XHJcbiAqXHJcbiAqIEByZXR1cm4gc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdHIsIGZyb21TdGFydCkge1xyXG5cdC8vIE1ha2UgZGlzdGluZyB3b3Jkc1xyXG5cdHN0ciA9IF90b1RpdGxlKHN0ci5yZXBsYWNlKC8tL2csICcgJykpLnJlcGxhY2UoLyAvZywgJycpO1xyXG5cdHJldHVybiBmcm9tU3RhcnQgPyBzdHIgOiBzdHJbMF0udG9Mb3dlckNhc2UoKSArIHN0ci5zdWJzdHIoMSk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNUeXBlT2JqZWN0IGZyb20gJy4uL2pzL2lzVHlwZU9iamVjdC5qcyc7XHJcbmltcG9ydCBfaXNOdW1lcmljIGZyb20gJy4uL2pzL2lzTnVtZXJpYy5qcyc7XHJcblxyXG4vKipcclxuICogTG9vcHMgdGhydSBvYmogZmxhdGx5IHdpdGggYSBjYWxsYmFjayBmdW5jdGlvbi5cclxuICogU3RvcHMgd2hlbiBjYWxsYmFjayByZXR1cm5zIGEgbm9uLXVuZGVmaW5lZCB2YWx1ZS5cclxuICpcclxuICogQHBhcmFtIGFycmF5fG9iamVjdCBcdFx0XHRvYmogXHRcdFx0VGhlIGFycmF5IG9yIG9iamVjdCB0byBpdGVyYXRlLlxyXG4gKiBAcGFyYW0gZnVuY3Rpb24gXHRcdFx0XHRjYWxsYmFjayBcdFx0VGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcmV0dXJuIG1peGVkfG51bGxcdFx0XHRBbnkgbm9uLW51bGwgcmV0dXJuIGZyb20gY2FsbGJhY2tcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iaiwgY2FsbGJhY2spIHtcclxuXHR2YXIgcmV0dXJuVmFsdWUgPSB1bmRlZmluZWQ7XHJcblx0aWYgKF9pc1R5cGVPYmplY3Qob2JqKSkge1xyXG5cdFx0T2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKChrLCBpKSA9PiB7XHJcblx0XHRcdGlmIChyZXR1cm5WYWx1ZSAhPT0gZmFsc2UpIHtcclxuXHRcdFx0XHRyZXR1cm5WYWx1ZSA9IGNhbGxiYWNrKF9pc051bWVyaWMoaykgPyBwYXJzZUZsb2F0KGspIDogaywgb2JqW2tdLCBpKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cdHJldHVybiByZXR1cm5WYWx1ZTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1N0cmluZyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzU3RyaW5nLmpzJztcclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc09iamVjdC5qcyc7XHJcbmltcG9ydCBfdG9DYW1lbCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci90b0NhbWVsLmpzJztcclxuaW1wb3J0IF9vYmpGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2Zyb20uanMnO1xyXG5pbXBvcnQgX2VhY2ggZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZWFjaC5qcyc7XHJcblxyXG4vKipcclxuICogR2V0cyBvciBzZXRzIGN1c3RvbSBkYXRhLlxyXG4gKlxyXG4gKiBAcGFyYW0gRE9NRWxlbWVudFx0XHRcdGVsIFxyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF5fG9iamVjdFx0cmVxdWVzdE9yUGF5bG9hZFxyXG4gKiBAcGFyYW0gbWl4ZWR8dm9pZFx0XHRcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIG1peGVkXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihlbCwgcmVxdWVzdE9yUGF5bG9hZCwgdmFsID0gbnVsbCkge1xyXG5cdGlmICghZWwuZGF0YXNldC5fX2N1c3RvbURhdGFzZXRLZXkpIHtcclxuXHRcdGVsLmRhdGFzZXQuX19jdXN0b21EYXRhc2V0S2V5ID0gY3VzdG9tRGF0YXNldHMubGVuZ3RoO1xyXG5cdFx0Y3VzdG9tRGF0YXNldHNbZWwuZGF0YXNldC5fX2N1c3RvbURhdGFzZXRLZXldID0ge307XHJcblx0fVxyXG5cdHZhciBjdXN0b21EYXRhc2V0ID0gY3VzdG9tRGF0YXNldHNbZWwuZGF0YXNldC5fX2N1c3RvbURhdGFzZXRLZXldO1xyXG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XHJcblx0XHRpZiAoX2lzU3RyaW5nKHJlcXVlc3RPclBheWxvYWQpKSB7XHJcblx0XHRcdHJldHVybiBjdXN0b21EYXRhc2V0W190b0NhbWVsKHJlcXVlc3RPclBheWxvYWQpXTtcclxuXHRcdH1cclxuXHRcdGlmIChfaXNBcnJheShyZXF1ZXN0T3JQYXlsb2FkKSkge1xyXG5cdFx0XHR2YXIgdmFscyA9IHt9O1xyXG5cdFx0XHRyZXF1ZXN0T3JQYXlsb2FkLmZvckVhY2goa2V5ID0+IHtcclxuXHRcdFx0XHR2YWxzW2tleV0gPSBjdXN0b21EYXRhc2V0W190b0NhbWVsKGtleSldO1xyXG5cdFx0XHR9KTtcclxuXHRcdFx0cmV0dXJuIHZhbHM7XHJcblx0XHR9XHJcblx0fVxyXG5cdHZhciBwYXlsb2FkID0gcmVxdWVzdE9yUGF5bG9hZDtcclxuXHRpZiAoIV9pc09iamVjdChyZXF1ZXN0T3JQYXlsb2FkKSkge1xyXG5cdFx0cGF5bG9hZCA9IF9vYmpGcm9tKHJlcXVlc3RPclBheWxvYWQsIHZhbCk7XHJcblx0fVxyXG5cdF9lYWNoKHBheWxvYWQsIChrZXksIHZhbCkgPT4ge1xyXG5cdFx0Y3VzdG9tRGF0YXNldFtfdG9DYW1lbChrZXkpXSA9IHZhbDtcclxuXHR9KTtcclxufTtcclxuY29uc3QgY3VzdG9tRGF0YXNldHMgPSBbXTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1N0cmluZyBmcm9tICcuL2lzU3RyaW5nLmpzJztcclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICcuL2lzVW5kZWZpbmVkLmpzJztcclxuXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgXCJhcnJheS1saWtlXCIuXHJcbiAqIFRoaXMgaG9sZHMgdHJ1ZSBmb3IgYW55dGhpbmcgdGhhdCBoYXMgYSBsZW5ndGggcHJvcGVydHkuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdHZhbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCkge1xyXG5cdHJldHVybiAhX2lzU3RyaW5nKHZhbCkgJiYgIV9pc1VuZGVmaW5lZCh2YWwubGVuZ3RoKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzVHlwZUFycmF5IGZyb20gJy4uL2pzL2lzVHlwZUFycmF5LmpzJztcclxuaW1wb3J0IF9pc0VtcHR5IGZyb20gJy4uL2pzL2lzRW1wdHkuanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJy4uL2pzL2lzT2JqZWN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiBDYXN0cyBhbiBhcnJheS1saWtlIG9iamVjdCB0byBhbiBhcnJheS5cclxuICpcclxuICogQHBhcmFtIG1peGVkIFx0dmFsXHJcbiAqIEBwYXJhbSBib29sXHQgXHRjYXN0T2JqZWN0XHJcbiAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbCwgY2FzdE9iamVjdCA9IHRydWUpIHtcclxuXHRpZiAoX2lzQXJyYXkodmFsKSkge1xyXG5cdFx0cmV0dXJuIHZhbDtcclxuXHR9O1xyXG5cdGlmICghY2FzdE9iamVjdCAmJiBfaXNPYmplY3QodmFsKSkge1xyXG5cdFx0cmV0dXJuIFt2YWxdO1xyXG5cdH07XHJcblx0aWYgKHZhbCAhPT0gZmFsc2UgJiYgdmFsICE9PSAwICYmIF9pc0VtcHR5KHZhbCkpIHtcclxuXHRcdHJldHVybiBbXTtcclxuXHR9O1xyXG5cdGlmIChfaXNUeXBlQXJyYXkodmFsKSkge1xyXG5cdFx0cmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHZhbCk7XHJcblx0fTtcclxuXHRpZiAoX2lzT2JqZWN0KHZhbCkpIHtcclxuXHRcdHJldHVybiBPYmplY3QudmFsdWVzKHZhbCk7XHJcblx0fTtcclxuXHRyZXR1cm4gW3ZhbF07XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfcmVtb3ZlIGZyb20gJy4vcmVtb3ZlLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZW1vdmVzIGFsbCBpbnN0YW5jZXMgb2YgZWFjaCBpdGVtLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXkgXHRhcnJcclxuICogQHBhcmFtIGFycmF5XHQgXHRpdG1zXHJcbiAqXHJcbiAqIEByZXR1cm4gYXJyYXlcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFyciwgLi4uaXRtcykge1xyXG5cdGl0bXMuZm9yRWFjaChpdG0gPT4gX3JlbW92ZShhcnIsIGl0bSkpO1xyXG5cdHJldHVybiBhcnI7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogUmV0dXJucyBhIGxpc3Qgb2YgdW5pcXVlIGl0ZW1zLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXlcdCBcdFx0XHRcdGFyclxyXG4gKlx0ICpcclxuICogQHJldHVybiBhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyKSB7XHJcblx0Y29uc3QgZGlzdGluY3QgPSAodmFsdWUsIGluZGV4LCBzZWxmKSA9PiB7XHJcblx0XHRyZXR1cm4gc2VsZi5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXg7XHJcblx0fTtcclxuXHRyZXR1cm4gYXJyLmZpbHRlcihkaXN0aW5jdCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSBpbnRlcnNlY3Rpb24gb2YgdHdvIGFycmF5cztcclxuICogb3B0aW9uYWxseSB1c2luZyBhIGN1c3RvbSBtYXRjaGluZyBmdW5jdGlvbi5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqIEBwYXJhbSBhcnJheVx0IFx0YXJyMlxyXG4gKiBAcGFyYW0gZnVuY3Rpb24gXHRjYWxsYmFja1xyXG4gKlxyXG4gKiBAcmV0dXJuIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIGFycjIsIGNhbGxiYWNrID0gbnVsbCkge1xyXG5cdHJldHVybiAhX2lzQXJyYXkoYXJyMikgPyBbXSA6IGFyci5maWx0ZXIodmFsMSA9PiBjYWxsYmFjayBcclxuXHRcdD8gYXJyMi5maWx0ZXIodmFsMiA9PiBjYWxsYmFjayh2YWwxLCB2YWwyKSkubGVuZ3RoIFxyXG5cdFx0OiBhcnIyLmluZGV4T2YodmFsMSkgIT09IC0xXHJcblx0KTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1N0cmluZyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzU3RyaW5nLmpzJztcclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc09iamVjdC5qcyc7XHJcbmltcG9ydCBfdG9DYW1lbCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci90b0NhbWVsLmpzJztcclxuaW1wb3J0IF9vYmpGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2Zyb20uanMnO1xyXG5pbXBvcnQgX2VhY2ggZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZWFjaC5qcyc7XHJcbmltcG9ydCBfYXJyRnJvbSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mcm9tLmpzJztcclxuaW1wb3J0IF9kaWZmZXJlbmNlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2RpZmZlcmVuY2UuanMnO1xyXG5pbXBvcnQgX2V4Y2x1ZGUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZXhjbHVkZS5qcyc7XHJcbmltcG9ydCBfdW5pcXVlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3VuaXF1ZS5qcyc7XHJcbmltcG9ydCBfaW50ZXJzZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ludGVyc2VjdC5qcyc7XHJcblxyXG4vKipcclxuICogR2V0cyBhbiBhdHRyaWJ1dGUgb3IgYSBsaXN0IG9mIGF0dHJpYnV0ZXMsXHJcbiAqIG9yIHNldHMgYW4gYXR0cmlidXRlIG9yIGEgbGlzdCBvZiBhdHRyaWJ1dGVzLlxyXG4gKlxyXG4gKiBAcGFyYW0gRE9NRWxlbWVudFx0XHRcdGVsIFxyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF5fG9iamVjdFx0cmVxdWVzdE9yUGF5bG9hZFxyXG4gKiBAcGFyYW0gc3RyaW5nfGJvb2x8dm9pZFx0XHR2YWxPck11dGF0aW9uXHJcbiAqIEBwYXJhbSBib29sfHZvaWRcdFx0XHRcdHN1YlZhbE11dGF0aW9uXHJcbiAqXHJcbiAqIEByZXR1cm4gbWl4ZWRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVsLCByZXF1ZXN0T3JQYXlsb2FkLCB2YWxPck11dGF0aW9uID0gbnVsbCwgc3ViVmFsTXV0YXRpb24gPSBudWxsKSB7XHJcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcclxuXHRcdGlmIChfaXNTdHJpbmcocmVxdWVzdE9yUGF5bG9hZCkpIHtcclxuXHRcdFx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShyZXF1ZXN0T3JQYXlsb2FkKTtcclxuXHRcdH1cclxuXHRcdGlmIChfaXNBcnJheShyZXF1ZXN0T3JQYXlsb2FkKSkge1xyXG5cdFx0XHR2YXIgdmFscyA9IHt9O1xyXG5cdFx0XHRyZXF1ZXN0T3JQYXlsb2FkLmZvckVhY2gocmVxdWVzdCA9PiB7XHJcblx0XHRcdFx0dmFsc1tyZXF1ZXN0XSA9IGVsLmdldEF0dHJpYnV0ZShyZXF1ZXN0KTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdHJldHVybiB2YWxzO1xyXG5cdFx0fVxyXG5cdH1cclxuXHR2YXIgcGF5bG9hZCA9IHJlcXVlc3RPclBheWxvYWQ7XHJcblx0aWYgKCFfaXNPYmplY3QocGF5bG9hZCkpIHtcclxuXHRcdHBheWxvYWQgPSBfb2JqRnJvbShyZXF1ZXN0T3JQYXlsb2FkLCB2YWxPck11dGF0aW9uKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0c3ViVmFsTXV0YXRpb24gPSB2YWxPck11dGF0aW9uO1xyXG5cdH1cclxuXHRfZWFjaChwYXlsb2FkLCAobmFtZSwgdmFsT3JNdXRhdGlvbikgPT4ge1xyXG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAzIHx8IChfaXNPYmplY3QocmVxdWVzdE9yUGF5bG9hZCkgJiYgYXJndW1lbnRzLmxlbmd0aCA+IDIpKSB7XHJcblx0XHRcdHZhciBjdXJyZW50VmFsID0gZWwuZ2V0QXR0cmlidXRlKG5hbWUpO1xyXG5cdFx0XHR2YXIgY3VycmVudFZhbEFycmF5ID0gY3VycmVudFZhbCA/IGN1cnJlbnRWYWwuc3BsaXQoJyAnKS5tYXAodmFsID0+IHZhbC50cmltKCkpLmZpbHRlcihhID0+IGEpIDogW107XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdC8vIEFkZCBvciByZW1vdmVcclxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0dmFyIHZhbHVlcyA9IF9pc1N0cmluZyh2YWxPck11dGF0aW9uKSA/IHZhbE9yTXV0YXRpb24udHJpbSgpLnNwbGl0KCcgJykubWFwKHZhbCA9PiB2YWwudHJpbSgpKS5maWx0ZXIoYSA9PiBhKSA6IF9hcnJGcm9tKHZhbE9yTXV0YXRpb24pO1xyXG5cdFx0XHRpZiAoIXN1YlZhbE11dGF0aW9uICYmIF9pbnRlcnNlY3QoY3VycmVudFZhbEFycmF5LCB2YWx1ZXMpLmxlbmd0aCkge1xyXG5cdFx0XHRcdC8vIEFkZC4uLlxyXG5cdFx0XHRcdGVsLnNldEF0dHJpYnV0ZShuYW1lLCBfZXhjbHVkZShjdXJyZW50VmFsQXJyYXksIC4uLnZhbHVlcykuam9pbignICcpKTtcclxuXHRcdFx0fSBlbHNlIGlmIChzdWJWYWxNdXRhdGlvbiAmJiBfZGlmZmVyZW5jZShjdXJyZW50VmFsQXJyYXksIHZhbHVlcykubGVuZ3RoKSB7XHJcblx0XHRcdFx0Ly8gUmVtb3ZlLi4uXHJcblx0XHRcdFx0ZWwuc2V0QXR0cmlidXRlKG5hbWUsIF91bmlxdWUoY3VycmVudFZhbEFycmF5LmNvbmNhdCh2YWx1ZXMpKS5qb2luKCcgJykpO1xyXG5cdFx0XHR9XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRpZiAodmFsT3JNdXRhdGlvbiA9PT0gZmFsc2UpIHtcclxuXHRcdFx0XHRlbC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZWwuc2V0QXR0cmlidXRlKG5hbWUsIHZhbE9yTXV0YXRpb24gPT09IHRydWUgPyAndHJ1ZScgOiB2YWxPck11dGF0aW9uKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH0pO1xyXG5cdHJldHVybiBlbDtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9lYWNoIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2VhY2guanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBCaW5kcyBjYWxsYmFja3MgdG8gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKClcclxuICogdG8gY3JlYXRlIGEgY2VudHJhbCBcInJlYWQvd3JpdGVcIiBwaGFzZXMgZm9yIERPTSBhY2Nlc3MuXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuXHRcdFx0XHJcbmNvbnN0IFJlZmxvdyA9IHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBIb2xkcyBhbGwgY2FsbGJhY2tzIGJvdW5kIHRvIHRoZSBcInJlYWRcIiBwaGFzZS5cclxuXHQgKlxyXG5cdCAqIEB2YXIgYXJyYXlcclxuXHQgKi9cclxuXHRyZWFkQ2FsbGJhY2tzOiBbXSxcclxuXHRcclxuXHQvKipcclxuXHQgKiBIb2xkcyBhbGwgY2FsbGJhY2tzIGJvdW5kIHRvIHRoZSBcIndyaXRlXCIgcGhhc2UuXHJcblx0ICpcclxuXHQgKiBAdmFyIGFycmF5XHJcblx0ICovXHJcblx0d3JpdGVDYWxsYmFja3M6IFtdLFxyXG5cclxuXHQvKipcclxuXHQgKiBTdGFydHMgdGhlIGxvb3AuXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHRoaXNcclxuXHQgKi9cclxuXHRfcnVuOiBmdW5jdGlvbigpIHtcclxuXHRcdHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcblx0XHRcdFJlZmxvdy5yZWFkQ2FsbGJhY2tzLmZvckVhY2goKGNhbGxiYWNrLCBpKSA9PiB7XHJcblx0XHRcdFx0aWYgKGNhbGxiYWNrICYmICFjYWxsYmFjaygpKSB7XHJcblx0XHRcdFx0XHRSZWZsb3cucmVhZENhbGxiYWNrc1tpXSA9IG51bGw7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdFx0UmVmbG93LndyaXRlQ2FsbGJhY2tzLmZvckVhY2goKGNhbGxiYWNrLCBpKSA9PiB7XHJcblx0XHRcdFx0aWYgKGNhbGxiYWNrICYmICFjYWxsYmFjaygpKSB7XHJcblx0XHRcdFx0XHRSZWZsb3cud3JpdGVDYWxsYmFja3NbaV0gPSBudWxsO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdFJlZmxvdy5fcnVuKCk7XHJcblx0XHR9KTtcclxuXHR9LFxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEJpbmRzIGEgY2FsbGJhY2sgdG8gdGhlIFwicmVhZFwiIHBoYXNlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uIFx0Y2FsbGJhY2tcclxuXHQgKiBAcGFyYW0gYm9vbFx0XHR3aXRoUHJvbWlzZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0b25yZWFkOiBmdW5jdGlvbihjYWxsYmFjaywgd2l0aFByb21pc2UgPSBmYWxzZSkge1xyXG5cdFx0aWYgKHdpdGhQcm9taXNlKSB7XHJcblx0XHRcdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRcdFx0UmVmbG93LnJlYWRDYWxsYmFja3MucHVzaCgoKSA9PiB7XHJcblx0XHRcdFx0XHRjYWxsYmFjayhyZXNvbHZlLCByZWplY3QpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHRcdFJlZmxvdy5yZWFkQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xyXG5cdH0sXHJcblx0XHJcblx0LyoqXHJcblx0ICogQmluZHMgYSBjYWxsYmFjayB0byB0aGUgXCJ3cml0ZVwiIHBoYXNlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uIFx0Y2FsbGJhY2tcclxuXHQgKiBAcGFyYW0gYm9vbFx0XHR3aXRoUHJvbWlzZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0b253cml0ZTogZnVuY3Rpb24oY2FsbGJhY2ssIHdpdGhQcm9taXNlID0gZmFsc2UpIHtcclxuXHRcdGlmICh3aXRoUHJvbWlzZSkge1xyXG5cdFx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0XHRcdFJlZmxvdy53cml0ZUNhbGxiYWNrcy5wdXNoKCgpID0+IHtcclxuXHRcdFx0XHRcdGNhbGxiYWNrKHJlc29sdmUsIHJlamVjdCk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdFx0UmVmbG93LndyaXRlQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xyXG5cdH0sXHJcblx0XHJcblx0LyoqXHJcblx0ICogQSBzcGVjaWFsIGNvbnN0cnVjdCBmb3IgRE9NIG1hbmlwdWxhdGlvbnMgdGhhdCBzcGFuXHJcblx0ICogb25lIG9yIG1vcmUgcmVhZC93cml0ZSBjeWNsZXMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb24gXHRyZWFkXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uIFx0d3JpdGVcclxuXHQgKiBAcGFyYW0gbWl4ZWRcdFx0cHJldlRyYW5zYWN0aW9uXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWR8bWl4ZWRcclxuXHQgKi9cclxuXHRjeWNsZTogZnVuY3Rpb24ocmVhZCwgd3JpdGUsIHByZXZUcmFuc2FjdGlvbikge1xyXG5cdFx0UmVmbG93Lm9ucmVhZCgoKSA9PiB7XHJcblx0XHRcdC8vIFJlY29yZCBpbml0aWFsIHZhbHVlc1xyXG5cdFx0XHR2YXIgcmVhZFJldHVybiA9IHJlYWQocHJldlRyYW5zYWN0aW9uKTtcclxuXHRcdFx0aWYgKHJlYWRSZXR1cm4pIHtcclxuXHRcdFx0XHQvLyBDYWxsIGVyaXRlLCB0aGUgdHJhbnNhdGlvblxyXG5cdFx0XHRcdHZhciBjYWxsV3JpdGUgPSAocmVhZFJldHVybikgPT4ge1xyXG5cdFx0XHRcdFx0UmVmbG93Lm9ud3JpdGUoKCkgPT4ge1xyXG5cdFx0XHRcdFx0XHR2YXIgd3JpdGVSZXR1cm4gPSB3cml0ZShyZWFkUmV0dXJuLCBwcmV2VHJhbnNhY3Rpb24pO1xyXG5cdFx0XHRcdFx0XHRpZiAod3JpdGVSZXR1cm4pIHtcclxuXHRcdFx0XHRcdFx0XHQvLyBSZXBlYXQgdHJhbnNhY3Rpb25cclxuXHRcdFx0XHRcdFx0XHR2YXIgcmVwZWF0VHJhbnNhY3Rpb24gPSAod3JpdGVSZXR1cm4pID0+IHtcclxuXHRcdFx0XHRcdFx0XHRcdFJlZmxvdy5jeWNsZShyZWFkLCB3cml0ZSwgd3JpdGVSZXR1cm4pO1xyXG5cdFx0XHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdFx0XHRcdFx0Ly8gSWYgXCJ3cml0ZVwiIHJldHVybnMgYSBwcm9taXNlLCB3ZSB3YWl0IHVudGlsIGl0IGlzIHJlc29sdmVkXHJcblx0XHRcdFx0XHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdFx0XHRcdFx0aWYgKHdyaXRlUmV0dXJuIGluc3RhbmNlb2Ygd2luZG93LlByb21pc2UpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHdyaXRlUmV0dXJuLnRoZW4ocmVwZWF0VHJhbnNhY3Rpb24pO1xyXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFx0XHRyZXBlYXRUcmFuc2FjdGlvbigpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0XHQvLyBJZiBcInJlYWRcIiByZXR1cm5zIGEgcHJvbWlzZSwgd2Ugd2FpdCB1bnRpbCBpdCBpcyByZXNvbHZlZFxyXG5cdFx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHRcdGlmIChyZWFkUmV0dXJuIGluc3RhbmNlb2Ygd2luZG93LlByb21pc2UpIHtcclxuXHRcdFx0XHRcdHJlYWRSZXR1cm4udGhlbihjYWxsV3JpdGUpO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRjYWxsV3JpdGUoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdH0sXHJcbn07XHJcblJlZmxvdy5fcnVuKCk7XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IFJlZmxvdzsiLCJcclxuLyoqXHJcbiogVGhlIHZlbmRvciBwcmVmaXggaW4gZGlmZmVyZW50IGZvcm1hdC5cclxuKlxyXG4qIEBwYXJhbSBvYmplY3RcclxuKi9cclxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uKCkge1xyXG5cdHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsICcnKTtcclxuXHR2YXIgcHJlZml4ID0gKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHN0eWxlcykuam9pbignJykubWF0Y2goLy0obW96fHdlYmtpdHxtcyktLykgfHwgc3R5bGVzLk9saW5rID09PSAnJyAmJiBbJycsICdvJ10pWzFdO1xyXG5cdHZhciBhcGkgPSAoJ1dlYktpdHxNb3p8TXN8TycpLm1hdGNoKG5ldyBSZWdFeHAoJygnICsgcHJlZml4ICsgJyknLCAnaScpKVsxXTtcclxuXHRyZXR1cm4ge3ByZWZpeDpwcmVmaXgsIGNzczonLScgKyBwcmVmaXggKyAnLScsIGFwaTphcGksfTtcclxufSkoKTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzU3RyaW5nIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNTdHJpbmcuanMnO1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNVbmRlZmluZWQuanMnO1xyXG5cclxuLyoqXHJcbiAqIFNldHMgb3IgZ2V0cyBIVE1MIGNvbnRlbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmd8SFRNTEVsZW1lbnRcdGNvbnRlbnRcclxuICpcclxuICogQHJldHVybiB2b2lkfHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZWwsIGNvbnRlbnQgPSBudWxsKSB7XHJcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XHJcblx0XHRpZiAoX2lzU3RyaW5nKGNvbnRlbnQpKSB7XHJcblx0XHRcdGVsLmlubmVySFRNTCA9IGNvbnRlbnQ7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRlbC5pbm5lckhUTUwgPSAnJztcclxuXHRcdFx0aWYgKCFfaXNVbmRlZmluZWQoY29udGVudCkpIHtcclxuXHRcdFx0XHRlbC5hcHBlbmQoY29udGVudCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdHJldHVybiBlbDtcclxuXHR9XHJcblx0cmV0dXJuIGVsLmlubmVySFRNTDsgIFxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNVbmRlZmluZWQuanMnO1xyXG5cclxuLyoqXHJcbiAqIFNldHMgb3IgZ2V0cyB0ZXh0IGNvbnRlbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHRcdFx0XHRjb250ZW50XHJcbiAqXHJcbiAqIEByZXR1cm4gdm9pZHxzdHJpbmdcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVsLCBjb250ZW50ID0gbnVsbCkge1xyXG5cdGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xyXG5cdFx0ZWwuaW5uZXJUZXh0ID0gX2lzVW5kZWZpbmVkKGNvbnRlbnQpID8gJycgOiBjb250ZW50O1xyXG5cdFx0cmV0dXJuIGVsO1xyXG5cdH1cclxuXHRyZXR1cm4gZWwuaW5uZXJUZXh0OyAgXHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNVbmRlZmluZWQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1VuZGVmaW5lZC5qcyc7XHJcblxyXG4vKipcclxuICogQXBwZW5kcyBuZXcgY29udGVudC5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdFx0XHRcdGNvbnRlbnRcclxuICpcclxuICogQHJldHVybiBIVE1MRWxlbWVudFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZWwsIGNvbnRlbnQpIHtcclxuXHRlbC5hcHBlbmQoX2lzVW5kZWZpbmVkKGNvbnRlbnQpID8gJycgOiBjb250ZW50KTsgXHJcblx0cmV0dXJuIGVsOyBcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVW5kZWZpbmVkLmpzJztcclxuXHJcbi8qKlxyXG4gKiBQcmVwZW5kcyBuZXcgY29udGVudC5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdFx0XHRcdGNvbnRlbnRcclxuICpcclxuICogQHJldHVybiBIVE1MRWxlbWVudFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZWwsIGNvbnRlbnQpIHtcclxuXHRlbC5wcmVwZW5kKF9pc1VuZGVmaW5lZChjb250ZW50KSA/ICcnIDogY29udGVudCk7ICBcclxuXHRyZXR1cm4gZWw7IFxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFNwbGl0cyBhIGNhbWVsLWNhc2VkIHN0cmluZy5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHN0clxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0ZGVsaW1pdGVyXHJcbiAqXHJcbiAqIEByZXR1cm4gc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdHIsIGRlbGltaXRlcikge1xyXG5cdHJldHVybiBzdHIgPT09IHVuZGVmaW5lZCA/ICcnIDogc3RyLnNwbGl0KC8oPz1bQS1aXSkvKS5qb2luKGRlbGltaXRlciA/IGRlbGltaXRlciA6ICcgJyk7IC8vIHBvc2l0aXZlIGxvb2thaGVhZCB0byBrZWVwIHRoZSBjYXBpdGFsIGxldHRlcnNcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9mcm9tQ2FtZWwgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvZnJvbUNhbWVsLmpzJztcclxuaW1wb3J0IF90b0NhbWVsIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL3RvQ2FtZWwuanMnO1xyXG5pbXBvcnQgdmVuZG9yUHJlZml4IGZyb20gJy4vdmVuZG9yUHJlZml4LmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRoZSB2ZW5kb3Itc3BlY2lmaWMgY3NzIHByb3BlcnR5IGlmIHN1cHBvcnRlZC4gTlVMTCBpZiBub3QuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHRwcm9wXHJcbiAqXHJcbiAqIEByZXR1cm4gc3RyaW5nfE5VTExcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHByb3ApIHtcclxuXHR2YXIgY2FtZWxDYXNlZFByb3AgPSBfdG9DYW1lbChwcm9wLCB0cnVlKTtcclxuXHRpZiAodmVuZG9yUHJlZml4LmFwaSArIGNhbWVsQ2FzZWRQcm9wIGluIGRvY3VtZW50LmJvZHkuc3R5bGUpIHtcclxuXHRcdHJldHVybiB2ZW5kb3JQcmVmaXguY3NzICsgX2Zyb21DYW1lbChwcm9wLCAnLScpO1xyXG5cdH1cclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9hcnJGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Zyb20uanMnO1xyXG5pbXBvcnQgX2Zyb21DYW1lbCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci9mcm9tQ2FtZWwuanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9lYWNoIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2VhY2guanMnO1xyXG5pbXBvcnQgdmVuZG9yaXplIGZyb20gJy4vdmVuZG9yaXplLmpzJztcclxuXHJcbi8qKlxyXG4gKiBMb29wcyB0aHJ1IGFsbCBrZXlzIGluIHByb3BzIGNhbGxzIGNhbGxiYWNrIHRvIG9idGFpbiB0aGVpciB2YWx1ZS5cclxuICpcclxuICogQHBhcmFtIHN0cmluZ3xhcnJheVx0XHRwcm9wc1xyXG4gKiBAcGFyYW0gZnVuY3Rpb25cdFx0XHRjYWxsYmFja1xyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdFx0d2l0aFZlbmRvclZlcnNpb25cclxuICpcclxuICogQHJldHVybiBOVUxMfGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHByb3BzLCBjYWxsYmFjaywgd2l0aFZlbmRvclZlcnNpb24pIHtcclxuXHR2YXIgdmFsc0xpc3QgPSB7fTtcclxuXHR2YXIgcHJvcHNMaXN0ID0gX2FyckZyb20ocHJvcHMpO1xyXG5cdHZhciBjYWxsQ2FsbGJhY2sgPSAoaSwgcHJvcCkgPT4ge1xyXG5cdFx0Ly8gV2UgdXNlIHRoZSBrZXkgYXMgZ2l2ZW4sIGJ1dCB3ZSBvYnRhaW4gdmFsdWUgd2l0aFxyXG5cdFx0Ly8gV2Ugc3VwcG9ydCBjYW1lbCBjYXNlcywgYnV0IHJldHVybiB0aGVpciBub3JtYWxpemVkIHZlcnNpb25zXHJcblx0XHR2YXIgbm9ybWFsUHJvcCA9IF9mcm9tQ2FtZWwocHJvcCwgJy0nKS50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0Ly8gV2l0aCB2ZW5kb3IgdmVyaXNvbj9cclxuXHRcdC8vIFdlIHNldCB0aGUgdmVuZG9yIHZlcnNpb24gZmlyc3QgaWYgc3VwcG9ydCBmb3IgdGhpcyBwcm9wZXJ0eVxyXG5cdFx0aWYgKHdpdGhWZW5kb3JWZXJzaW9uID09PSAnYXV0bycpIHtcclxuXHRcdFx0dmFsc0xpc3Rbbm9ybWFsUHJvcF0gPSBjYWxsYmFjayh2ZW5kb3JpemUobm9ybWFsUHJvcCkgfHwgbm9ybWFsUHJvcCwgcHJvcHNMaXN0W2ldKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdGlmICh3aXRoVmVuZG9yVmVyc2lvbikge1xyXG5cdFx0XHRcdHZhciB2ZW5kb3JpemVkUHJvcCA9IHZlbmRvcml6ZShub3JtYWxQcm9wKTtcclxuXHRcdFx0XHRpZiAodmVuZG9yaXplZFByb3ApIHtcclxuXHRcdFx0XHRcdHZhbHNMaXN0W3ZlbmRvcml6ZWRQcm9wXSA9IGNhbGxiYWNrKHZlbmRvcml6ZWRQcm9wLCBwcm9wc0xpc3RbaV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0XHR2YWxzTGlzdFtub3JtYWxQcm9wXSA9IGNhbGxiYWNrKG5vcm1hbFByb3AsIHByb3BzTGlzdFtpXSk7XHJcblx0XHR9XHJcblx0fTtcclxuXHRfZWFjaChwcm9wc0xpc3QsIChpLCBwcm9wKSA9PiB7XHJcblx0XHRjYWxsQ2FsbGJhY2soaSwgcHJvcCk7XHJcblx0fSk7XHJcblx0cmV0dXJuIF9pc0FycmF5KHByb3BzKSB8fCB3aXRoVmVuZG9yVmVyc2lvbiB8fCBwcm9wcyA9PT0gJ3NpemUnIHx8IHByb3BzID09PSAnb2Zmc2V0cycgXHJcblx0XHQ/IHZhbHNMaXN0IFxyXG5cdFx0OiB2YWxzTGlzdFtwcm9wc107XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfZWFjaCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9lYWNoLmpzJztcclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNOdW1lcmljIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNOdW1lcmljLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIGxpdHRsZSB0cmFuc2Zvcm0gdXRpbGl0eSBjbGFzc1xyXG4gKiBhbmQgc3RyaW5naWZ5ZXIgY2xhc3Nlcy5cclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5jb25zdCBUcmFuc2Zvcm1SdWxlID0gY2xhc3Mge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgYSBuZXcgVHJhbnNmb3JtUnVsZSBpbnN0YW5jZVxyXG5cdCAqIGFuZCBlYWNoIHJ1bGUncyBhcHByb3ByaWF0ZSBjbGFzcy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0IHRyYW5zZm9ybVJ1bGVzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHRoaXNcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcih0cmFuc2Zvcm1SdWxlcykge1xyXG5cdFx0X2VhY2godHJhbnNmb3JtUnVsZXMsIChydWxlLCB2YWx1ZSkgPT4ge1xyXG5cdFx0XHRpZiAoWydyb3RhdGUnLCAnc2NhbGUnLCAnc2tldycsICd0cmFuc2xhdGUnXS5pbmNsdWRlcyhydWxlKSkge1xyXG5cdFx0XHRcdHRoaXNbcnVsZV0gPSBfaXNBcnJheSh2YWx1ZSlcclxuXHRcdFx0XHRcdD8gbmV3IFRyYW5zZm9ybVJ1bGVbcnVsZV0oLi4udmFsdWUpXHJcblx0XHRcdFx0XHQ6IG5ldyBUcmFuc2Zvcm1SdWxlW3J1bGVdKHZhbHVlKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFN0cmluZ2lmaWVzIHRoZSB0cmFuc2Zvcm1SdWxlcyBpbiBhIENTUy1jb21wYXRpYmxlIGZvcm1hdC5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gc3RyaW5nXHJcblx0ICovXHJcblx0dG9TdHJpbmcoKSB7XHJcblx0XHRyZXR1cm4gWydyb3RhdGUnLCAnc2NhbGUnLCAnc2tldycsICd0cmFuc2xhdGUnXS5yZWR1Y2UoXHJcblx0XHRcdChzdHIsIHJ1bGUpID0+IHN0ciArICh0aGlzW3J1bGVdICYmIHRoaXNbcnVsZV0ubGVuZ3RoID8gJyAnICsgdGhpc1tydWxlXSA6ICcnKSwgJydcclxuXHRcdCkudHJpbSgpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBVbm1hdHJpeDogcGFyc2UgdGhlIHZhbHVlcyBvZiB0aGUgbWF0cml4XHJcblx0ICpcclxuXHQgKiBBbGdvcml0aG0gZnJvbTpcclxuXHQgKlxyXG5cdCAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0aGV3bXVlbGxlci91bm1hdHJpeC9ibG9iL21hc3Rlci9pbmRleC5qc1xyXG5cdCAqIEBzZWUgaHR0cDovL2hnLm1vemlsbGEub3JnL21vemlsbGEtY2VudHJhbC9maWxlLzdjYjNlOTc5NWQwNC9sYXlvdXQvc3R5bGUvbnNTdHlsZUFuaW1hdGlvbi5jcHBcclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmcgXHQgc3RyXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHtPYmplY3R9XHJcblx0ICovXHJcblx0c3RhdGljIHBhcnNlKHN0cikge1xyXG5cdFx0Ly8gU3RyaW5nIHRvIG1hdHJpeFxyXG5cdFx0dmFyIHN0b20gPSBmdW5jdGlvbih0cmFuc2Zvcm1TdHIpIHtcclxuXHRcdFx0dmFyIG0gPSBbXTtcclxuXHRcdFx0aWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIHtcclxuXHRcdFx0XHRtID0gbmV3IHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgodHJhbnNmb3JtU3RyKTtcclxuXHRcdFx0XHRyZXR1cm4gW20uYSwgbS5iLCBtLmMsIG0uZCwgbS5lLCBtLmZdO1xyXG5cdFx0XHR9XHJcblx0XHRcdHZhciByZGlnaXQgPSAvW1xcZFxcLlxcLV0rL2c7XHJcblx0XHRcdHZhciBuO1xyXG5cdFx0XHR3aGlsZShuID0gcmRpZ2l0LmV4ZWModHJhbnNmb3JtU3RyKSkge1xyXG5cdFx0XHRcdG0ucHVzaCgrbik7XHJcblx0XHRcdH1cclxuXHRcdFx0cmV0dXJuIG07XHJcblx0XHR9O1xyXG5cdFx0Ly8gUm91bmQgdG8gdGhlIG5lYXJlc3QgaHVuZHJlZHRoXHJcblx0XHR2YXIgcm91bmQgPSBmdW5jdGlvbihuKSB7XHJcblx0XHRcdHJldHVybiBNYXRoLnJvdW5kKG4gKiAxMDApIC8gMTAwO1xyXG5cdFx0fTtcclxuXHRcdC8vIFJhZGlhbnMgdG8gZGVncmVlc1xyXG5cdFx0dmFyIHIyZCA9IGZ1bmN0aW9uKHJhZGlhbnMpIHtcclxuXHRcdFx0dmFyIGRlZyA9IHJhZGlhbnMgKiAxODAgLyBNYXRoLlBJO1xyXG5cdFx0XHRyZXR1cm4gcm91bmQoZGVnKTtcclxuXHRcdH07XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdHZhciBtID0gc3RvbShzdHIpO1xyXG5cdFx0dmFyIEEgPSBtWzBdO1xyXG5cdFx0dmFyIEIgPSBtWzFdO1xyXG5cdFx0dmFyIEMgPSBtWzJdO1xyXG5cdFx0dmFyIEQgPSBtWzNdO1xyXG5cdFx0aWYgKEEgKiBEID09IEIgKiBDKSB0aHJvdyBuZXcgRXJyb3IoJ0RyYW1hdGljLnBhcnNlVHJhbnNmb3JtOiBtYXRyaXggaXMgc2luZ3VsYXInKTtcclxuXHRcdC8vIHN0ZXAgKDMpXHJcblx0XHR2YXIgc2NhbGVYID0gTWF0aC5zcXJ0KEEgKiBBICsgQiAqIEIpO1xyXG5cdFx0QSAvPSBzY2FsZVg7XHJcblx0XHRCIC89IHNjYWxlWDtcclxuXHRcdC8vIHN0ZXAgKDQpXHJcblx0XHR2YXIgc2tldyA9IEEgKiBDICsgQiAqIEQ7XHJcblx0XHRDIC09IEEgKiBza2V3O1xyXG5cdFx0RCAtPSBCICogc2tldztcclxuXHRcdC8vIHN0ZXAgKDUpXHJcblx0XHR2YXIgc2NhbGVZID0gTWF0aC5zcXJ0KEMgKiBDICsgRCAqIEQpO1xyXG5cdFx0QyAvPSBzY2FsZVk7XHJcblx0XHREIC89IHNjYWxlWTtcclxuXHRcdHNrZXcgLz0gc2NhbGVZO1xyXG5cdFx0Ly8gc3RlcCAoNilcclxuXHRcdGlmICggQSAqIEQgPCBCICogQyApIHtcclxuXHRcdFx0QSA9IC1BO1xyXG5cdFx0XHRCID0gLUI7XHJcblx0XHRcdHNrZXcgPSAtc2tldztcclxuXHRcdFx0c2NhbGVYID0gLXNjYWxlWDtcclxuXHRcdH1cclxuXHRcdHJldHVybiBuZXcgVHJhbnNmb3JtUnVsZSh7XHJcblx0XHRcdHRyYW5zbGF0ZTogWy8qeCovbVs0XSwgLyp5Ki9tWzVdLF0sXHJcblx0XHRcdHNjYWxlOiBbLyp4Ki9yb3VuZChzY2FsZVgpLCAvKnkqL3JvdW5kKHNjYWxlWSksXSxcclxuXHRcdFx0cm90YXRlOiByMmQoTWF0aC5hdGFuMihCLCBBKSksXHJcblx0XHRcdHNrZXc6IHIyZChNYXRoLmF0YW4oc2tldykpLFxyXG5cdFx0fSk7XHJcblx0fTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBcInJvdGF0ZVwiIHZhbHVlIGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS1cclxuICovXHJcblRyYW5zZm9ybVJ1bGUucm90YXRlID0gY2xhc3MgZXh0ZW5kcyBBcnJheSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogUmV0dXJucyBcInJvdGF0ZVwiIHZhbHVlcyBhcyBhIENTUyBmdW5jdGlvblxyXG5cdCAqXHJcblx0ICogQHJldHVybiBzdHJpbmdcclxuXHQgKi9cclxuXHR0b1N0cmluZygpIHtcclxuXHRcdHZhciB2YWx1ZXMgPSB0aGlzLm1hcCh2YWwgPT4gX2lzTnVtZXJpYyh2YWwpID8gdmFsICsgJ2RlZycgOiB2YWwpO1xyXG5cdFx0cmV0dXJuICdyb3RhdGUoJyArIHZhbHVlcy5qb2luKCcsICcpICsgJyknO1xyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBcInNjYWxlXCIgYXJyYXkgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuVHJhbnNmb3JtUnVsZS5zY2FsZSA9IGNsYXNzIGV4dGVuZHMgQXJyYXkge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFJldHVybnMgXCJzY2FsZVwiIHZhbHVlcyBhcyBhIENTUyBmdW5jdGlvblxyXG5cdCAqXHJcblx0ICogQHJldHVybiBzdHJpbmdcclxuXHQgKi9cclxuXHR0b1N0cmluZygpIHtcclxuXHRcdHJldHVybiAnc2NhbGUoJyArIHRoaXMuam9pbignLCAnKSArICcpJztcclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgXCJza2V3XCIgYXJyYXkgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuVHJhbnNmb3JtUnVsZS5za2V3ID0gY2xhc3MgZXh0ZW5kcyBBcnJheSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogUmV0dXJucyBcInNrZXdcIiB2YWx1ZXMgYXMgYSBDU1MgZnVuY3Rpb25cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gc3RyaW5nXHJcblx0ICovXHJcblx0dG9TdHJpbmcoKSB7XHJcblx0XHR2YXIgdmFsdWVzID0gdGhpcy5tYXAodmFsID0+IF9pc051bWVyaWModmFsKSA/IHZhbCArICdkZWcnIDogdmFsKTtcclxuXHRcdHJldHVybiAnc2tldygnICsgdmFsdWVzLmpvaW4oJywgJykgKyAnKSc7XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS1cclxuICogVGhlIFwidHJhbnNsYXRlXCIgYXJyYXkgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuVHJhbnNmb3JtUnVsZS50cmFuc2xhdGUgPSBjbGFzcyBleHRlbmRzIEFycmF5IHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBSZXR1cm5zIFwidHJhbnNsYXRlXCIgdmFsdWVzIGFzIGEgQ1NTIGZ1bmN0aW9uXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHN0cmluZ1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKCkge1xyXG5cdFx0dmFyIHZhbHVlcyA9IHRoaXMubWFwKHZhbCA9PiBfaXNOdW1lcmljKHZhbCkgPyB2YWwgKyAncHgnIDogdmFsKTtcclxuXHRcdHJldHVybiAndHJhbnNsYXRlKCcgKyB2YWx1ZXMuam9pbignLCAnKSArICcpJztcclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IFRyYW5zZm9ybVJ1bGU7IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IHJ1bGVDYWxsYmFjayBmcm9tICcuL3J1bGVDYWxsYmFjay5qcyc7XHJcbmltcG9ydCBUcmFuc2Zvcm1SdWxlIGZyb20gJy4vVHJhbnNmb3JtUnVsZS5qcyc7XHJcbmltcG9ydCB2ZW5kb3JpemUgZnJvbSAnLi92ZW5kb3JpemUuanMnO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgY29tcHV0ZWQgQ1NTIHByb3BlcnRpZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSBIVE1MRWxlbWVudFx0XHRlbFxyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF5XHRcdHByb3BzXHJcbiAqIEBwYXJhbSBzdHJpbmdcdFx0XHRwc3VlZG9cclxuICpcclxuICogQHJldHVybiBvYmplY3R8c3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihlbCwgcHJvcHMsIHBzdWVkbyA9IG51bGwpIHtcclxuXHR2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgcHN1ZWRvKSwgcmVjdDtcclxuXHRyZXR1cm4gcnVsZUNhbGxiYWNrKHByb3BzLCAocHJvcCwgcmF3UHJvcCkgPT4ge1xyXG5cdFx0dmFyIHZhbCA9IHN0eWxlLmdldFByb3BlcnR5VmFsdWUodmVuZG9yaXplKHByb3ApIHx8IHByb3ApO1xyXG5cdFx0aWYgKChwcm9wID09PSAnd2lkdGgnIHx8IHByb3AgPT09ICdoZWlnaHQnKSAmJiB2YWwgPT09ICcnKSB7XHJcblx0XHRcdHZhbCA9ICcwcHgnO1xyXG5cdFx0fVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdC8vIFdlIHJldHVybiBhbiBvYmplY3QgZm9yIHRoZSBcInRyYW5zZm9ybVwiIHByb3BlcnR5XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0aWYgKHByb3AgPT09ICd0cmFuc2Zvcm0nKSB7XHJcblx0XHRcdHZhbCA9IFRyYW5zZm9ybVJ1bGUucGFyc2UodmFsKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiB2YWw7XHJcblx0fSwgZmFsc2UvKndpdGhWZW5kb3JWZXJzaW9uKi8pO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIENTUyBwcm9wZXJ0aWVzIHRoYXQgbXVzdCBoYXZlIGEgZGVmYXVsdCBwaXhlbCB1bml0LlxyXG4gKlxyXG4gKiBAdmFyIGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBbJ3dpZHRoJywgJ2hlaWdodCcsICd0b3AnLCAnbGVmdCcsICdyaWdodCcsICdib3R0b20nLFxyXG5cdCdwYWRkaW5nJywgJ3BhZGRpbmctdG9wJywgJ3BhZGRpbmctbGVmdCcsICdwYWRkaW5nLXJpZ2h0JywgJ3BhZGRpbmctYm90dG9tJyxcclxuXHQnbWFyZ2luJywgJ21hcmdpbi10b3AnLCAnbWFyZ2luLWxlZnQnLCAnbWFyZ2luLXJpZ2h0JywgJ21hcmdpbi1ib3R0b20nLFxyXG5cdCdib3JkZXItd2lkdGgnLCAnYm9yZGVyLXRvcC13aWR0aCcsICdib3JkZXItbGVmdC13aWR0aCcsICdib3JkZXItcmlnaHQtd2lkdGgnLCAnYm9yZGVyLWJvdHRvbS13aWR0aCcsXHJcblx0J291dGxpbmUtd2lkdGgnLCAnb3V0bGluZS10b3Atd2lkdGgnLCAnb3V0bGluZS1sZWZ0LXdpZHRoJywgJ291dGxpbmUtcmlnaHQtd2lkdGgnLCAnb3V0bGluZS1ib3R0b20td2lkdGgnLFxyXG5dO1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzU3RyaW5nIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNTdHJpbmcuanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVW5kZWZpbmVkLmpzJztcclxuaW1wb3J0IF9pc051bWVyaWMgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bWVyaWMuanMnO1xyXG5pbXBvcnQgX29iakZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZnJvbS5qcyc7XHJcbmltcG9ydCBfZWFjaCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9lYWNoLmpzJztcclxuaW1wb3J0IFRyYW5zZm9ybVJ1bGUgZnJvbSAnLi9UcmFuc2Zvcm1SdWxlLmpzJztcclxuaW1wb3J0IHJ1bGVDYWxsYmFjayBmcm9tICcuL3J1bGVDYWxsYmFjay5qcyc7XHJcbmltcG9ydCBhdXRvcHggZnJvbSAnLi9hdXRvcHguanMnO1xyXG5cclxuLyoqXHJcbiAqIFNldHMgbmV3IENTUyBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0gSFRNTEVsZW1lbnRcdFx0ZWxcclxuICogQHBhcmFtIHN0cmluZ3xvYmplY3RcdFx0bmFtZU9yUHJvcHNcclxuICogQHBhcmFtIHN0cmluZ3xudW1iZXJcdFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gSFRNTEVsZW1lbnRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVsLCBuYW1lT3JQcm9wcywgdmFsID0gbnVsbCkge1xyXG5cdG5hbWVPclByb3BzID0gX2lzU3RyaW5nKG5hbWVPclByb3BzKVxyXG5cdFx0PyBfb2JqRnJvbShuYW1lT3JQcm9wcywgdmFsKVxyXG5cdFx0OiBuYW1lT3JQcm9wcztcclxuXHR2YXIgZGVzdHJ1Y3RhYmxlcyA9IHtcclxuXHRcdGluc2V0OiBbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLFxyXG5cdFx0bWFyZ2luOiBbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLFxyXG5cdFx0cGFkZGluZzogWyd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXSxcclxuXHR9O1xyXG5cdHJ1bGVDYWxsYmFjayhPYmplY3Qua2V5cyhuYW1lT3JQcm9wcyksIChwcm9wLCByYXdQcm9wKSA9PiB7XHJcblx0XHR2YXIgdmFsID0gbmFtZU9yUHJvcHNbcmF3UHJvcF07XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gV2UgY2FuIGRlc3R1Y3R1cmUgdGhpbmdzIGxpa2UgXCJpbnNldFwiKFwibGVmdFwiLCBcInRvcFwiLCBcInJpZ2h0XCIsIFwiYm90dG9tXCIpLCBldGNcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRfZWFjaChkZXN0cnVjdGFibGVzLCAoZGVzdHJ1Y3RhYmxlUHJvcCwgbWVhbmluZykgPT4ge1xyXG5cdFx0XHRpZiAocHJvcCA9PT0gZGVzdHJ1Y3RhYmxlUHJvcCkge1xyXG5cdFx0XHRcdGlmIChfaXNPYmplY3QodmFsKSkge1xyXG5cdFx0XHRcdFx0dmFsID0gbWVhbmluZy5tYXAoa2V5ID0+IHZhbFtrZXldKS5maWx0ZXIodmFsID0+ICFfaXNVbmRlZmluZWQodmFsKSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmIChfaXNBcnJheSh2YWwpKSB7XHJcblx0XHRcdFx0XHR2YWwgPSB2YWwuam9pbignICcpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gV2UgYWNjZXB0IGFuIG9iamVjdCBmb3IgdGhlIFwidHJhbnNmb3JtXCIgcHJvcGVydHlcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRpZiAocHJvcCA9PT0gJ3RyYW5zZm9ybScgJiYgX2lzT2JqZWN0KHZhbCkgJiYgISh2YWwgaW5zdGFuY2VvZiBUcmFuc2Zvcm1SdWxlKSkge1xyXG5cdFx0XHR2YWwgPSAobmV3IFRyYW5zZm9ybVJ1bGUodmFsKSkudG9TdHJpbmcoKTtcclxuXHRcdH1cclxuXHRcdGVsLnN0eWxlW3Byb3BdID0gYXV0b3B4LmluY2x1ZGVzKHByb3ApICYmIF9pc051bWVyaWModmFsKVxyXG5cdFx0XHQ/IHZhbCArICdweCdcclxuXHRcdFx0OiB2YWw7XHJcblx0fSwgJ2F1dG8nLyp3aXRoVmVuZG9yVmVyc2lvbiovKTtcclxuXHRyZXR1cm4gZWw7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgY3NzUmVhZCBmcm9tICcuL3JlYWQuanMnO1xyXG5pbXBvcnQgUmVmbG93IGZyb20gJy4uL1JlZmxvdy5qcyc7XHJcblxyXG4vKipcclxuICogVGhlIGFzeW5jIHR5cGUgb2YgY3NzUmVhZCgpLlxyXG4gKlxyXG4gKiBAc2VlIGNzc1JlYWQoKVxyXG4gKlxyXG4gKiBAcmV0dXJuIFByb21pc2VcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVsLCBwcm9wcywgcHN1ZWRvID0gbnVsbCkge1xyXG5cdHJldHVybiBSZWZsb3cub25yZWFkKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdHJlc29sdmUoX2lzRnVuY3Rpb24ocHJvcHMpID8gcHJvcHMoZWwpIDogY3NzUmVhZChlbCwgcHJvcHMsIHBzdWVkbykpO1xyXG5cdFx0fSBjYXRjaChlKSB7XHJcblx0XHRcdHJlamVjdChlKTtcclxuXHRcdH1cclxuXHR9LCB0cnVlLyp3aXRoUHJvbWlzZSovKTtcclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IGNzc1dyaXRlIGZyb20gJy4vd3JpdGUuanMnO1xyXG5pbXBvcnQgUmVmbG93IGZyb20gJy4uL1JlZmxvdy5qcyc7XHJcblxyXG4vKipcclxuICogVGhlIGFzeW5jIHR5cGUgb2YgY3NzV3JpdGUoKS5cclxuICpcclxuICogQHNlZSBjc3NXcml0ZSgpXHJcbiAqXHJcbiAqIEByZXR1cm4gUHJvbWlzZVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZWwsIG5hbWVPclByb3BzLCB2YWwgPSBudWxsKSB7XHJcblx0cmV0dXJuIFJlZmxvdy5vbndyaXRlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdHJlc29sdmUoX2lzRnVuY3Rpb24obmFtZU9yUHJvcHMpID8gbmFtZU9yUHJvcHMoZWwpIDogY3NzV3JpdGUoZWwsIG5hbWVPclByb3BzLCB2YWwpKTtcclxuXHRcdH0gY2F0Y2goZSkge1xyXG5cdFx0XHRyZWplY3QoZSk7XHJcblx0XHR9XHJcblx0fSwgdHJ1ZS8qd2l0aFByb21pc2UqLyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBydWxlQ2FsbGJhY2sgZnJvbSAnLi9ydWxlQ2FsbGJhY2suanMnO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgaW5saW5lLW9ubHkgQ1NTIHByb3BlcnRpZXMuXHJcbiAqXHJcbiAqIEBwYXJhbSBIVE1MRWxlbWVudFx0XHRlbFxyXG4gKiBAcGFyYW0gc3RyaW5nfG9iamVjdFx0XHRwcm9wXHJcbiAqIEBwYXJhbSBib29sfHN0cmluZ1x0XHR3aXRoVmVuZG9yVmVyc2lvbnNcclxuICpcclxuICogQHJldHVybiBtaXhlZFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZWwsIHByb3BzLCB3aXRoVmVuZG9yVmVyc2lvbiA9ICdhdXRvJykge1xyXG5cdHZhciBzdHlsZSA9IGVsLmdldEF0dHJpYnV0ZSgnc3R5bGUnKTtcclxuXHRpZiAocHJvcHMgPT09ICdhbGwnKSB7XHJcblx0XHRwcm9wcyA9IHN0eWxlLnNwbGl0KCc7JykubWFwKHN0ciA9PiBzdHIuc3BsaXQoJzonKVswXSk7XHJcblx0fVxyXG5cdHJldHVybiBydWxlQ2FsbGJhY2socHJvcHMsIHByb3AgPT4ge1xyXG5cdFx0dmFyIHJlZ2V4ID0gbmV3IFJlZ0V4cCgnO1sgXSo/JyArIHByb3AgKyAnOihbXjtdKyk7PycsICdnJyk7XHJcblx0XHRyZXR1cm4gKHJlZ2V4LmV4ZWMoJzsnICsgc3R5bGUpIHx8IFsnJywgJyddKVsxXS50cmltKCk7XHJcblx0fSwgd2l0aFZlbmRvclZlcnNpb24pO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgY3NzUmVhZElubGluZSBmcm9tICcuL3JlYWRJbmxpbmUuanMnO1xyXG5pbXBvcnQgY3NzUmVhZEFzeW5jIGZyb20gJy4vcmVhZEFzeW5jLmpzJztcclxuaW1wb3J0IGNzc1dyaXRlQXN5bmMgZnJvbSAnLi93cml0ZUFzeW5jLmpzJztcclxuXHJcbi8qKlxyXG4gKiBBcHBsaWVzIHNvbWUgQ1NTIHdpdGhpbiBhIHRyYW5zYWN0aW9uLCBnZXRzIGNvbXB1dGVkIHZhbHVlcyBmb3IgdXNlIGJlZm9yZSByb2xsaW5nIGJhY2suXHJcbiAqIElmIGEgY2FsbGJhY2sgaXMgcHJvdmlkZWQsIGl0IHN5bmNlcyB0aGUgZW50aXJlIG9wZXJhdGlvbiB3aXRoIFJlZmxvdydzIG5vcm1hbCByZWFkL3dyaXRlIGN5Y2xlcy5cclxuICpcclxuICogQHBhcmFtIEhUTUxFbGVtZW50XHRcdGVsIFxyXG4gKiBAcGFyYW0gc3RyaW5nfG9iamVjdFx0XHRuYW1lT3JQcm9wc1xyXG4gKiBAcGFyYW0gc3RyaW5nfG51bWJlclx0XHR2YWxcclxuICogQHBhcmFtIGZ1bmN0aW9uXHRcdFx0cmVhZENhbGxiYWNrXHJcbiAqXHJcbiAqIEByZXR1cm4gUHJvbWlzZVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZWwsIG5hbWVPclByb3BzLCB2YWwgPSBudWxsLCByZWFkQ2FsbGJhY2sgPSBudWxsKSB7XHJcblx0dmFyIHByb3BzVG9SZWFkID0gX2lzT2JqZWN0KG5hbWVPclByb3BzKSA/IE9iamVjdC5rZXlzKG5hbWVPclByb3BzKSA6IG5hbWVPclByb3BzO1xyXG5cdHJlYWRDYWxsYmFjayA9IF9pc09iamVjdChuYW1lT3JQcm9wcykgPyB2YWwgOiByZWFkQ2FsbGJhY2s7XHJcblx0Ly8gLS0tLS0tLS0tLS0tLVxyXG5cdHZhciBpbmxpbmVTYXZlcG9pbnQgPSBjc3NSZWFkSW5saW5lKGVsLCBwcm9wc1RvUmVhZCk7XHJcblx0cmV0dXJuIGNzc1dyaXRlQXN5bmMoZWwsIG5hbWVPclByb3BzLCB2YWwpLnRoZW4oKCkgPT4ge1xyXG5cdFx0cmV0dXJuIGNzc1JlYWRBc3luYyhlbCwgcmVhZENhbGxiYWNrIHx8IHByb3BzVG9SZWFkKS50aGVuKGNvbXB1dGVkVmFsdWVzID0+IHtcclxuXHRcdFx0Ly8gV2UgcmV0dXJuIHRoZSBjb21wdXRlZFZhbHVlcyBpbiBhIHByb21pc2VcclxuXHRcdFx0cmV0dXJuIGNzc1dyaXRlQXN5bmMoZWwsIGlubGluZVNhdmVwb2ludCkudGhlbigoKSA9PiB7XHJcblx0XHRcdFx0cmV0dXJuIGNvbXB1dGVkVmFsdWVzO1xyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cdH0pO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVtZXJpYy5qcyc7XHJcbmltcG9ydCBfYXJyRnJvbSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mcm9tLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIEVzdGFibGlzaGVzIGFuIG9wZXJhdGlvbSB0aGF0IGNhbiBiZSByb2xsZWRiYWNrXHJcbiAqIHdpdGhvdXQgYWx0ZXJpbmcgc2ltaWxhciBvcGVyYXRpb24gYnkgb3RoZXIgY29kZS5cclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuIFxyXG5jb25zdCBUcmFuc2FjdGlvbiA9IGNsYXNzIHtcclxuXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlcyBhIG5ldyB0cmFuc2FjdGlvbiBpbnN0YW5jZS5cclxuXHQgKlxyXG5cdCAqIElmIGEgY2FsbGJhY2sgaXMgcHJvdmlkZWQsIGl0IHN5bmNlcyB0aGUgZW50aXJlIG9wZXJhdGlvbiB3aXRoIFJlZmxvdydzIG5vcm1hbCByZWFkL3dyaXRlIGN5Y2xlcy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBIVE1MRWxlbWVudFx0XHRcdGVsIFxyXG5cdCAqIEBwYXJhbSBzdHJpbmd8YXJyYXl8b2JqZWN0XHRwYXJhbXNcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb25cdCBcdFx0XHRyZWFkQ2FsbGJhY2tcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb25cdCBcdFx0XHR3cml0ZUNhbGxiYWNrXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihlbCwgcGFyYW1zLCByZWFkQ2FsbGJhY2ssIHdyaXRlQ2FsbGJhY2spIHtcclxuXHRcdHRoaXMuZWwgPSBlbDtcclxuXHRcdHRoaXMucGFyYW1zID0gX2FyckZyb20ocGFyYW1zKTtcclxuXHRcdHRoaXMucmVhZENhbGxiYWNrID0gcmVhZENhbGxiYWNrO1xyXG5cdFx0dGhpcy53cml0ZUNhbGxiYWNrID0gd3JpdGVDYWxsYmFjaztcclxuXHRcdHRoaXMuJHNhdmVwb2ludHMgPSBbXTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQ3JlYXRlcyBhIHNhdmVwb2ludCB0aGF0IGNhbiBiZSBsYXRlciByb2xsZWQgYmFjayB0by5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gUHJvbWlzZXxtaXhlZFxyXG5cdCAqL1xyXG5cdHNhdmUoKSB7XHJcblx0XHR2YXIgcmVhZGVyRGlzcG9zaXRpb24gPSB0aGlzLnJlYWRDYWxsYmFjayh0aGlzLmVsLCB0aGlzLnBhcmFtcyk7XHJcblx0XHRpZiAocmVhZGVyRGlzcG9zaXRpb24gaW5zdGFuY2VvZiBQcm9taXNlKSB7XHJcblx0XHRcdHJldHVybiByZWFkZXJEaXNwb3NpdGlvbi50aGVuKGRhdGEgPT4gdGhpcy4kc2F2ZXBvaW50cy5wdXNoKGRhdGEpKTtcclxuXHRcdH0gZWxzZSBpZiAoX2lzT2JqZWN0KHJlYWRlckRpc3Bvc2l0aW9uKSkge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy4kc2F2ZXBvaW50cy5wdXNoKHJlYWRlckRpc3Bvc2l0aW9uKTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogTWFya3MgcmVjb2RzIGEgY29tbWl0ZWQuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gaW50XHRzYXZlcG9pbnRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdGhpc1xyXG5cdCAqL1xyXG5cdGNvbW1pdChzYXZlcG9pbnQgPSAwKSB7XHJcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8PSBzYXZlcG9pbnQgJiYgc2F2ZXBvaW50IDwgdGhpcy4kc2F2ZXBvaW50cy5sZW5ndGg7IGkgKyspIHtcclxuXHRcdFx0dGhpcy4kc2F2ZXBvaW50c1tpXSA9IG51bGw7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogUm9sbHMgdGhlIHRyYW5zYWN0aW9uIGJhY2sgdG8gYSBzYXZlcG9pbnQuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gaW50XHRzYXZlcG9pbnRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZH1Qcm9taXNlXHJcblx0ICovXHJcblx0cm9sbGJhY2soc2F2ZXBvaW50ID0gMCkge1xyXG5cdFx0aWYgKCFfaXNOdW1lcmljKHNhdmVwb2ludCkpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdBIHZhbGlkIHRyYW5zYWN0aW9uIElEIHRyYW5zYWN0aW9uIG11c3QgYmUgcHJvdmlkZWQhJyk7XHJcblx0XHR9XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0dmFyIGdldFJvbGxiYWNrRGF0YSA9IGN1cnJlbnRSZWFkID0+IHtcclxuXHRcdFx0dmFyIHNhdmVwb2ludHMgPSB0aGlzLiRzYXZlcG9pbnRzLnNwbGljZShzYXZlcG9pbnQpO1xyXG5cdFx0XHQvLyBUb1NhdmVwb2ludCBpcyBvdXIgdGFyZ2V0IHBvaW50XHJcblx0XHRcdHZhciB0b1NhdmVwb2ludCA9IHNhdmVwb2ludHMuc2hpZnQoKTtcclxuXHRcdFx0aWYgKCF0b1NhdmVwb2ludCkge1xyXG5cdFx0XHRcdHJldHVybiB7fTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBGcm9tU2F2ZXBvaW50IGlzIG91ciBsYXN0IHBvaW50IGJlZm9yZSBjdXJyZW50LFxyXG5cdFx0XHQvLyB3aGljaCB3ZSBuZWVkIHRvIHZhbGlkYXRlIHdpdGggY3VycmVudFxyXG5cdFx0XHR2YXIgZnJvbVNhdmVwb2ludCA9IHNhdmVwb2ludHMucG9wKCk7XHJcblx0XHRcdHZhciBkYXRhID0ge307XHJcblx0XHRcdC8vIFJlc3RvcmUgb25seSB3aGF0J3MgYXBwbGljYWJsZS5cclxuXHRcdFx0dGhpcy5wYXJhbXMuZm9yRWFjaChwYXJhbSA9PiB7XHJcblx0XHRcdFx0Ly8gV2UnbGwgcmVzdG9yZSBvbmx5IHZhbHVlcyB0aGF0IGhhdmVcclxuXHRcdFx0XHQvLyBOT1QgY2hhbmdlZCBmcm9tIHdoYXQgd2UgZWFybGllciBDT01NSVRURUQuLi5cclxuXHRcdFx0XHRpZiAoZnJvbVNhdmVwb2ludCAmJiBjdXJyZW50UmVhZFtwYXJhbV0gIT09IGZyb21TYXZlcG9pbnRbcGFyYW1dKSB7XHJcblx0XHRcdFx0XHRyZXR1cm5cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Ly8gV2UnbGwgcmVzdG9yZSBvbmx5IHZhbHVlcyB0aGF0XHJcblx0XHRcdFx0Ly8gSEFWRSBjaGFuZ2VkIGZyb20gd2hhdCB3ZSBlYXJsaWVyIFJFQ09SREVELi4uXHJcblx0XHRcdFx0aWYgKGN1cnJlbnRSZWFkW3BhcmFtXSAhPT0gdG9TYXZlcG9pbnRbcGFyYW1dKSB7XHJcblx0XHRcdFx0XHRkYXRhW3BhcmFtXSA9IHRvU2F2ZXBvaW50W3BhcmFtXTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRyZXR1cm4gZGF0YTtcclxuXHRcdH07XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0dmFyIGN1cnJlbnRSZWFkID0gdGhpcy5yZWFkQ2FsbGJhY2sodGhpcy5lbCwgdGhpcy5wYXJhbXMpO1xyXG5cdFx0aWYgKGN1cnJlbnRSZWFkIGluc3RhbmNlb2YgUHJvbWlzZSkge1xyXG5cdFx0XHRyZXR1cm4gY3VycmVudFJlYWQudGhlbihjdXJyZW50UmVhZCA9PiB0aGlzLndyaXRlQ2FsbGJhY2sodGhpcy5lbCwgZ2V0Um9sbGJhY2tEYXRhKGN1cnJlbnRSZWFkKSkpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHRoaXMud3JpdGVDYWxsYmFjayh0aGlzLmVsLCBnZXRSb2xsYmFja0RhdGEoY3VycmVudFJlYWQpKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHB1c2hlcy5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gaW50XHJcblx0ICovXHJcblx0ZGVwdGgoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy4kc2F2ZXBvaW50cy5sZW5ndGg7XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBUcmFuc2FjdGlvbjsiLCJcclxuLyoqXHJcbiogVGhlIHZlbmRvciBwcmVmaXggaW4gZGlmZmVyZW50IGZvcm1hdC5cclxuKlxyXG4qIEBwYXJhbSBvYmplY3RcclxuKi9cclxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uKCkge1xyXG5cdHZhciBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsICcnKTtcclxuXHR2YXIgcHJlZml4ID0gKEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHN0eWxlcykuam9pbignJykubWF0Y2goLy0obW96fHdlYmtpdHxtcyktLykgfHwgc3R5bGVzLk9saW5rID09PSAnJyAmJiBbJycsICdvJ10pWzFdO1xyXG5cdHZhciBhcGkgPSAoJ1dlYktpdHxNb3p8TXN8TycpLm1hdGNoKG5ldyBSZWdFeHAoJygnICsgcHJlZml4ICsgJyknLCAnaScpKVsxXTtcclxuXHRyZXR1cm4ge3ByZWZpeDpwcmVmaXgsIGNzczonLScgKyBwcmVmaXggKyAnLScsIGFwaTphcGksfTtcclxufSkoKTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2Zyb21DYW1lbCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci9mcm9tQ2FtZWwuanMnO1xyXG5pbXBvcnQgX3RvQ2FtZWwgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvdG9DYW1lbC5qcyc7XHJcbmltcG9ydCB2ZW5kb3JQcmVmaXggZnJvbSAnLi92ZW5kb3JQcmVmaXguanMnO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHZlbmRvci1zcGVjaWZpYyBjc3MgcHJvcGVydHkgaWYgc3VwcG9ydGVkLiBOVUxMIGlmIG5vdC5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdHByb3BcclxuICpcclxuICogQHJldHVybiBzdHJpbmd8TlVMTFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocHJvcCkge1xyXG5cdHZhciBjYW1lbENhc2VkUHJvcCA9IF90b0NhbWVsKHByb3AsIHRydWUpO1xyXG5cdGlmICh2ZW5kb3JQcmVmaXguYXBpICsgY2FtZWxDYXNlZFByb3AgaW4gZG9jdW1lbnQuYm9keS5zdHlsZSkge1xyXG5cdFx0cmV0dXJuIHZlbmRvclByZWZpeC5jc3MgKyBfZnJvbUNhbWVsKHByb3AsICctJyk7XHJcblx0fVxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZnJvbS5qcyc7XHJcbmltcG9ydCBfZnJvbUNhbWVsIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvc3RyL2Zyb21DYW1lbC5qcyc7XHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2VhY2ggZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZWFjaC5qcyc7XHJcbmltcG9ydCB2ZW5kb3JpemUgZnJvbSAnLi92ZW5kb3JpemUuanMnO1xyXG5cclxuLyoqXHJcbiAqIExvb3BzIHRocnUgYWxsIGtleXMgaW4gcHJvcHMgY2FsbHMgY2FsbGJhY2sgdG8gb2J0YWluIHRoZWlyIHZhbHVlLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF5XHRcdHByb3BzXHJcbiAqIEBwYXJhbSBmdW5jdGlvblx0XHRcdGNhbGxiYWNrXHJcbiAqIEBwYXJhbSBib29sXHRcdFx0XHR3aXRoVmVuZG9yVmVyc2lvblxyXG4gKlxyXG4gKiBAcmV0dXJuIE5VTEx8Ym9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocHJvcHMsIGNhbGxiYWNrLCB3aXRoVmVuZG9yVmVyc2lvbikge1xyXG5cdHZhciB2YWxzTGlzdCA9IHt9O1xyXG5cdHZhciBwcm9wc0xpc3QgPSBfYXJyRnJvbShwcm9wcyk7XHJcblx0dmFyIGNhbGxDYWxsYmFjayA9IChpLCBwcm9wKSA9PiB7XHJcblx0XHQvLyBXZSB1c2UgdGhlIGtleSBhcyBnaXZlbiwgYnV0IHdlIG9idGFpbiB2YWx1ZSB3aXRoXHJcblx0XHQvLyBXZSBzdXBwb3J0IGNhbWVsIGNhc2VzLCBidXQgcmV0dXJuIHRoZWlyIG5vcm1hbGl6ZWQgdmVyc2lvbnNcclxuXHRcdHZhciBub3JtYWxQcm9wID0gX2Zyb21DYW1lbChwcm9wLCAnLScpLnRvTG93ZXJDYXNlKCk7XHJcblx0XHQvLyBXaXRoIHZlbmRvciB2ZXJpc29uP1xyXG5cdFx0Ly8gV2Ugc2V0IHRoZSB2ZW5kb3IgdmVyc2lvbiBmaXJzdCBpZiBzdXBwb3J0IGZvciB0aGlzIHByb3BlcnR5XHJcblx0XHRpZiAod2l0aFZlbmRvclZlcnNpb24gPT09ICdhdXRvJykge1xyXG5cdFx0XHR2YWxzTGlzdFtub3JtYWxQcm9wXSA9IGNhbGxiYWNrKHZlbmRvcml6ZShub3JtYWxQcm9wKSB8fCBub3JtYWxQcm9wLCBwcm9wc0xpc3RbaV0pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0aWYgKHdpdGhWZW5kb3JWZXJzaW9uKSB7XHJcblx0XHRcdFx0dmFyIHZlbmRvcml6ZWRQcm9wID0gdmVuZG9yaXplKG5vcm1hbFByb3ApO1xyXG5cdFx0XHRcdGlmICh2ZW5kb3JpemVkUHJvcCkge1xyXG5cdFx0XHRcdFx0dmFsc0xpc3RbdmVuZG9yaXplZFByb3BdID0gY2FsbGJhY2sodmVuZG9yaXplZFByb3AsIHByb3BzTGlzdFtpXSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHRcdHZhbHNMaXN0W25vcm1hbFByb3BdID0gY2FsbGJhY2sobm9ybWFsUHJvcCwgcHJvcHNMaXN0W2ldKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cdF9lYWNoKHByb3BzTGlzdCwgKGksIHByb3ApID0+IHtcclxuXHRcdGNhbGxDYWxsYmFjayhpLCBwcm9wKTtcclxuXHR9KTtcclxuXHRyZXR1cm4gX2lzQXJyYXkocHJvcHMpIHx8IHdpdGhWZW5kb3JWZXJzaW9uIHx8IHByb3BzID09PSAnc2l6ZScgfHwgcHJvcHMgPT09ICdvZmZzZXRzJyBcclxuXHRcdD8gdmFsc0xpc3QgXHJcblx0XHQ6IHZhbHNMaXN0W3Byb3BzXTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9lYWNoIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2VhY2guanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc051bWVyaWMgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc051bWVyaWMuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgbGl0dGxlIHRyYW5zZm9ybSB1dGlsaXR5IGNsYXNzXHJcbiAqIGFuZCBzdHJpbmdpZnllciBjbGFzc2VzLlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcbmNvbnN0IFRyYW5zZm9ybVJ1bGUgPSBjbGFzcyB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogQ3JlYXRlcyBhIG5ldyBUcmFuc2Zvcm1SdWxlIGluc3RhbmNlXHJcblx0ICogYW5kIGVhY2ggcnVsZSdzIGFwcHJvcHJpYXRlIGNsYXNzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHQgdHJhbnNmb3JtUnVsZXNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdGhpc1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKHRyYW5zZm9ybVJ1bGVzKSB7XHJcblx0XHRfZWFjaCh0cmFuc2Zvcm1SdWxlcywgKHJ1bGUsIHZhbHVlKSA9PiB7XHJcblx0XHRcdGlmIChbJ3JvdGF0ZScsICdzY2FsZScsICdza2V3JywgJ3RyYW5zbGF0ZSddLmluY2x1ZGVzKHJ1bGUpKSB7XHJcblx0XHRcdFx0dGhpc1tydWxlXSA9IF9pc0FycmF5KHZhbHVlKVxyXG5cdFx0XHRcdFx0PyBuZXcgVHJhbnNmb3JtUnVsZVtydWxlXSguLi52YWx1ZSlcclxuXHRcdFx0XHRcdDogbmV3IFRyYW5zZm9ybVJ1bGVbcnVsZV0odmFsdWUpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogU3RyaW5naWZpZXMgdGhlIHRyYW5zZm9ybVJ1bGVzIGluIGEgQ1NTLWNvbXBhdGlibGUgZm9ybWF0LlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBzdHJpbmdcclxuXHQgKi9cclxuXHR0b1N0cmluZygpIHtcclxuXHRcdHJldHVybiBbJ3JvdGF0ZScsICdzY2FsZScsICdza2V3JywgJ3RyYW5zbGF0ZSddLnJlZHVjZShcclxuXHRcdFx0KHN0ciwgcnVsZSkgPT4gc3RyICsgKHRoaXNbcnVsZV0gJiYgdGhpc1tydWxlXS5sZW5ndGggPyAnICcgKyB0aGlzW3J1bGVdIDogJycpLCAnJ1xyXG5cdFx0KS50cmltKCk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFVubWF0cml4OiBwYXJzZSB0aGUgdmFsdWVzIG9mIHRoZSBtYXRyaXhcclxuXHQgKlxyXG5cdCAqIEFsZ29yaXRobSBmcm9tOlxyXG5cdCAqXHJcblx0ICogaHR0cHM6Ly9naXRodWIuY29tL21hdHRoZXdtdWVsbGVyL3VubWF0cml4L2Jsb2IvbWFzdGVyL2luZGV4LmpzXHJcblx0ICogQHNlZSBodHRwOi8vaGcubW96aWxsYS5vcmcvbW96aWxsYS1jZW50cmFsL2ZpbGUvN2NiM2U5Nzk1ZDA0L2xheW91dC9zdHlsZS9uc1N0eWxlQW5pbWF0aW9uLmNwcFxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZyBcdCBzdHJcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4ge09iamVjdH1cclxuXHQgKi9cclxuXHRzdGF0aWMgcGFyc2Uoc3RyKSB7XHJcblx0XHQvLyBTdHJpbmcgdG8gbWF0cml4XHJcblx0XHR2YXIgc3RvbSA9IGZ1bmN0aW9uKHRyYW5zZm9ybVN0cikge1xyXG5cdFx0XHR2YXIgbSA9IFtdO1xyXG5cdFx0XHRpZiAod2luZG93LldlYktpdENTU01hdHJpeCkge1xyXG5cdFx0XHRcdG0gPSBuZXcgd2luZG93LldlYktpdENTU01hdHJpeCh0cmFuc2Zvcm1TdHIpO1xyXG5cdFx0XHRcdHJldHVybiBbbS5hLCBtLmIsIG0uYywgbS5kLCBtLmUsIG0uZl07XHJcblx0XHRcdH1cclxuXHRcdFx0dmFyIHJkaWdpdCA9IC9bXFxkXFwuXFwtXSsvZztcclxuXHRcdFx0dmFyIG47XHJcblx0XHRcdHdoaWxlKG4gPSByZGlnaXQuZXhlYyh0cmFuc2Zvcm1TdHIpKSB7XHJcblx0XHRcdFx0bS5wdXNoKCtuKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gbTtcclxuXHRcdH07XHJcblx0XHQvLyBSb3VuZCB0byB0aGUgbmVhcmVzdCBodW5kcmVkdGhcclxuXHRcdHZhciByb3VuZCA9IGZ1bmN0aW9uKG4pIHtcclxuXHRcdFx0cmV0dXJuIE1hdGgucm91bmQobiAqIDEwMCkgLyAxMDA7XHJcblx0XHR9O1xyXG5cdFx0Ly8gUmFkaWFucyB0byBkZWdyZWVzXHJcblx0XHR2YXIgcjJkID0gZnVuY3Rpb24ocmFkaWFucykge1xyXG5cdFx0XHR2YXIgZGVnID0gcmFkaWFucyAqIDE4MCAvIE1hdGguUEk7XHJcblx0XHRcdHJldHVybiByb3VuZChkZWcpO1xyXG5cdFx0fTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0dmFyIG0gPSBzdG9tKHN0cik7XHJcblx0XHR2YXIgQSA9IG1bMF07XHJcblx0XHR2YXIgQiA9IG1bMV07XHJcblx0XHR2YXIgQyA9IG1bMl07XHJcblx0XHR2YXIgRCA9IG1bM107XHJcblx0XHRpZiAoQSAqIEQgPT0gQiAqIEMpIHRocm93IG5ldyBFcnJvcignRHJhbWF0aWMucGFyc2VUcmFuc2Zvcm06IG1hdHJpeCBpcyBzaW5ndWxhcicpO1xyXG5cdFx0Ly8gc3RlcCAoMylcclxuXHRcdHZhciBzY2FsZVggPSBNYXRoLnNxcnQoQSAqIEEgKyBCICogQik7XHJcblx0XHRBIC89IHNjYWxlWDtcclxuXHRcdEIgLz0gc2NhbGVYO1xyXG5cdFx0Ly8gc3RlcCAoNClcclxuXHRcdHZhciBza2V3ID0gQSAqIEMgKyBCICogRDtcclxuXHRcdEMgLT0gQSAqIHNrZXc7XHJcblx0XHREIC09IEIgKiBza2V3O1xyXG5cdFx0Ly8gc3RlcCAoNSlcclxuXHRcdHZhciBzY2FsZVkgPSBNYXRoLnNxcnQoQyAqIEMgKyBEICogRCk7XHJcblx0XHRDIC89IHNjYWxlWTtcclxuXHRcdEQgLz0gc2NhbGVZO1xyXG5cdFx0c2tldyAvPSBzY2FsZVk7XHJcblx0XHQvLyBzdGVwICg2KVxyXG5cdFx0aWYgKCBBICogRCA8IEIgKiBDICkge1xyXG5cdFx0XHRBID0gLUE7XHJcblx0XHRcdEIgPSAtQjtcclxuXHRcdFx0c2tldyA9IC1za2V3O1xyXG5cdFx0XHRzY2FsZVggPSAtc2NhbGVYO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIG5ldyBUcmFuc2Zvcm1SdWxlKHtcclxuXHRcdFx0dHJhbnNsYXRlOiBbLyp4Ki9tWzRdLCAvKnkqL21bNV0sXSxcclxuXHRcdFx0c2NhbGU6IFsvKngqL3JvdW5kKHNjYWxlWCksIC8qeSovcm91bmQoc2NhbGVZKSxdLFxyXG5cdFx0XHRyb3RhdGU6IHIyZChNYXRoLmF0YW4yKEIsIEEpKSxcclxuXHRcdFx0c2tldzogcjJkKE1hdGguYXRhbihza2V3KSksXHJcblx0XHR9KTtcclxuXHR9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS1cclxuICogVGhlIFwicm90YXRlXCIgdmFsdWUgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuVHJhbnNmb3JtUnVsZS5yb3RhdGUgPSBjbGFzcyBleHRlbmRzIEFycmF5IHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBSZXR1cm5zIFwicm90YXRlXCIgdmFsdWVzIGFzIGEgQ1NTIGZ1bmN0aW9uXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHN0cmluZ1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKCkge1xyXG5cdFx0dmFyIHZhbHVlcyA9IHRoaXMubWFwKHZhbCA9PiBfaXNOdW1lcmljKHZhbCkgPyB2YWwgKyAnZGVnJyA6IHZhbCk7XHJcblx0XHRyZXR1cm4gJ3JvdGF0ZSgnICsgdmFsdWVzLmpvaW4oJywgJykgKyAnKSc7XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS1cclxuICogVGhlIFwic2NhbGVcIiBhcnJheSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5UcmFuc2Zvcm1SdWxlLnNjYWxlID0gY2xhc3MgZXh0ZW5kcyBBcnJheSB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogUmV0dXJucyBcInNjYWxlXCIgdmFsdWVzIGFzIGEgQ1NTIGZ1bmN0aW9uXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHN0cmluZ1xyXG5cdCAqL1xyXG5cdHRvU3RyaW5nKCkge1xyXG5cdFx0cmV0dXJuICdzY2FsZSgnICsgdGhpcy5qb2luKCcsICcpICsgJyknO1xyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSBcInNrZXdcIiBhcnJheSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5UcmFuc2Zvcm1SdWxlLnNrZXcgPSBjbGFzcyBleHRlbmRzIEFycmF5IHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBSZXR1cm5zIFwic2tld1wiIHZhbHVlcyBhcyBhIENTUyBmdW5jdGlvblxyXG5cdCAqXHJcblx0ICogQHJldHVybiBzdHJpbmdcclxuXHQgKi9cclxuXHR0b1N0cmluZygpIHtcclxuXHRcdHZhciB2YWx1ZXMgPSB0aGlzLm1hcCh2YWwgPT4gX2lzTnVtZXJpYyh2YWwpID8gdmFsICsgJ2RlZycgOiB2YWwpO1xyXG5cdFx0cmV0dXJuICdza2V3KCcgKyB2YWx1ZXMuam9pbignLCAnKSArICcpJztcclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgXCJ0cmFuc2xhdGVcIiBhcnJheSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5UcmFuc2Zvcm1SdWxlLnRyYW5zbGF0ZSA9IGNsYXNzIGV4dGVuZHMgQXJyYXkge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFJldHVybnMgXCJ0cmFuc2xhdGVcIiB2YWx1ZXMgYXMgYSBDU1MgZnVuY3Rpb25cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gc3RyaW5nXHJcblx0ICovXHJcblx0dG9TdHJpbmcoKSB7XHJcblx0XHR2YXIgdmFsdWVzID0gdGhpcy5tYXAodmFsID0+IF9pc051bWVyaWModmFsKSA/IHZhbCArICdweCcgOiB2YWwpO1xyXG5cdFx0cmV0dXJuICd0cmFuc2xhdGUoJyArIHZhbHVlcy5qb2luKCcsICcpICsgJyknO1xyXG5cdH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgVHJhbnNmb3JtUnVsZTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgcnVsZUNhbGxiYWNrIGZyb20gJy4vcnVsZUNhbGxiYWNrLmpzJztcclxuaW1wb3J0IFRyYW5zZm9ybVJ1bGUgZnJvbSAnLi9UcmFuc2Zvcm1SdWxlLmpzJztcclxuaW1wb3J0IHZlbmRvcml6ZSBmcm9tICcuL3ZlbmRvcml6ZS5qcyc7XHJcblxyXG4vKipcclxuICogUmV0dXJucyBjb21wdXRlZCBDU1MgcHJvcGVydGllcy5cclxuICpcclxuICogQHBhcmFtIEhUTUxFbGVtZW50XHRcdGVsXHJcbiAqIEBwYXJhbSBzdHJpbmd8YXJyYXlcdFx0cHJvcHNcclxuICogQHBhcmFtIHN0cmluZ1x0XHRcdHBzdWVkb1xyXG4gKlxyXG4gKiBAcmV0dXJuIG9iamVjdHxzdHJpbmdcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVsLCBwcm9wcywgcHN1ZWRvID0gbnVsbCkge1xyXG5cdHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBwc3VlZG8pLCByZWN0O1xyXG5cdHJldHVybiBydWxlQ2FsbGJhY2socHJvcHMsIChwcm9wLCByYXdQcm9wKSA9PiB7XHJcblx0XHR2YXIgdmFsID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSh2ZW5kb3JpemUocHJvcCkgfHwgcHJvcCk7XHJcblx0XHRpZiAoKHByb3AgPT09ICd3aWR0aCcgfHwgcHJvcCA9PT0gJ2hlaWdodCcpICYmIHZhbCA9PT0gJycpIHtcclxuXHRcdFx0dmFsID0gJzBweCc7XHJcblx0XHR9XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gV2UgcmV0dXJuIGFuIG9iamVjdCBmb3IgdGhlIFwidHJhbnNmb3JtXCIgcHJvcGVydHlcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRpZiAocHJvcCA9PT0gJ3RyYW5zZm9ybScpIHtcclxuXHRcdFx0dmFsID0gVHJhbnNmb3JtUnVsZS5wYXJzZSh2YWwpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIHZhbDtcclxuXHR9LCBmYWxzZS8qd2l0aFZlbmRvclZlcnNpb24qLyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBkZWx0YSBmcm9tICcuL2RlbHRhLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGNvb3JkaW5hdGVzIG9mIHRoZSBpbnRlcnNlY3Rpb24gYmV0d2VlbiB0d28gcmVjdHMuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdFx0cmVjdDFcclxuICogQHBhcmFtIG9iamVjdFx0XHRyZWN0MlxyXG4gKlxyXG4gKiBAcmV0dXJuIG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocmVjdDEsIHJlY3QyKSB7XHJcblx0dmFyICRpbnRlcnNlY3Rpb24gPSB7XHJcblx0XHRsZWZ0OiByZWN0MS5sZWZ0IC0gcmVjdDIubGVmdCxcclxuXHRcdHRvcDogcmVjdDEudG9wIC0gcmVjdDIudG9wLFxyXG5cdFx0cmlnaHQ6IChyZWN0Mi5sZWZ0ICsgcmVjdDIud2lkdGgpIC0gKHJlY3QxLmxlZnQgKyByZWN0MS53aWR0aCksXHJcblx0XHRib3R0b206IChyZWN0Mi50b3AgKyByZWN0Mi5oZWlnaHQpIC0gKHJlY3QxLnRvcCArIHJlY3QxLmhlaWdodCksXHJcblx0fTtcclxuXHQvLyBNb3JlIG9mZnNldHNcclxuXHR2YXIgbGVmdGxpbmUgPSBNYXRoLm1heChyZWN0MS5sZWZ0LCByZWN0Mi5sZWZ0KTtcclxuXHR2YXIgcmlnaHRsaW5lID0gTWF0aC5taW4ocmVjdDEubGVmdCArIHJlY3QxLndpZHRoLCByZWN0Mi5sZWZ0ICsgcmVjdDIud2lkdGgpO1xyXG5cdHZhciB0b3BsaW5lID0gTWF0aC5tYXgocmVjdDEudG9wLCByZWN0Mi50b3ApO1xyXG5cdHZhciBib3R0b21saW5lID0gTWF0aC5taW4ocmVjdDEudG9wICsgcmVjdDEuaGVpZ2h0LCByZWN0Mi50b3AgKyByZWN0Mi5oZWlnaHQpO1xyXG5cdCRpbnRlcnNlY3Rpb24ud2lkdGggPSByaWdodGxpbmUgPiBsZWZ0bGluZSA/IHJpZ2h0bGluZSAtIGxlZnRsaW5lIDogMDtcclxuXHQkaW50ZXJzZWN0aW9uLmhlaWdodCA9IGJvdHRvbWxpbmUgPiB0b3BsaW5lID8gYm90dG9tbGluZSAtIHRvcGxpbmUgOiAwO1xyXG5cdC8vIFRoZSByYXcgdmFsdWVzXHJcblx0JGludGVyc2VjdGlvbi5yZWN0MSA9IHJlY3QxO1xyXG5cdCRpbnRlcnNlY3Rpb24ucmVjdDIgPSByZWN0MjtcclxuXHQkaW50ZXJzZWN0aW9uLmRlbHRhID0gZGVsdGEocmVjdDEsIHJlY3QyKTtcclxuXHRyZXR1cm4gJGludGVyc2VjdGlvbjtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9tZXJnZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9tZXJnZS5qcyc7XHJcblxyXG4vKipcclxuICogUmV0dXJucyBkaXN0YW5jZXMgaW4geCwgeSwgYW5kIHogYmV0d2VlbiB0aGUgY2VudGVycyBvZiB0d28gcmVjdHMuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdFx0cmVjdDFcclxuICogQHBhcmFtIG9iamVjdFx0XHRyZWN0MlxyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdHdpdGhBbmdsZVxyXG4gKlxyXG4gKiBAcmV0dXJuIG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocmVjdDEsIHJlY3QyLCB3aXRoQW5nbGUgPSBmYWxzZSkge1xyXG5cdHZhciAkZGVsdGEgPSB7fTtcclxuXHQkZGVsdGEueCA9IChyZWN0Mi5sZWZ0ICsgKHJlY3QyLndpZHRoIC8gMikpIC0gKHJlY3QxLmxlZnQgKyAocmVjdDEud2lkdGggLyAyKSk7XHJcblx0JGRlbHRhLnkgPSAocmVjdDIudG9wICsgKHJlY3QyLmhlaWdodCAvIDIpKSAtIChyZWN0MS50b3AgKyAocmVjdDEuaGVpZ2h0IC8gMikpO1xyXG5cdCRkZWx0YS56ID0gTWF0aC5zcXJ0KE1hdGgucG93KCRkZWx0YS54LCAyKSArIE1hdGgucG93KCRkZWx0YS55LCAyKSk7XHJcblx0aWYgKHdpdGhBbmdsZSkge1xyXG5cdFx0JGRlbHRhID0gX21lcmdlKCRkZWx0YSwgZGVsdGFBbmdsZSgkZGVsdGEpKTtcclxuXHR9XHJcblx0cmV0dXJuICRkZWx0YTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiBBTlkgaXRlbXMgcGFzcyB0aGUgdGVzdC5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqIEBwYXJhbSBmdW5jdGlvbiBcdGNhbGxiYWNrXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyLCBjYWxsYmFjaykge1xyXG5cdHJldHVybiBhcnIucmVkdWNlKChwcmV2VGVzdCwgaXRtKSA9PiBwcmV2VGVzdCB8fCBjYWxsYmFjayhpdG0pLCBmYWxzZSk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc09iamVjdC5qcyc7XHJcbmltcG9ydCBfYW55IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2FueS5qcyc7XHJcbmltcG9ydCBfY29weSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9jb3B5LmpzJztcclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBlbGVtZW50J3Mgd2lkdGgvaGVpZ2h0IHZhbHVlcyBvciBsZWZ0L3RvcCBvZmZzZXRzIG9yIGJvdGguXHJcbiAqXHJcbiAqIEEgY29udGV4dCBjYW4gYmUgc3BlY2lmaWVkIGZyb20gd2hpY2ggdG8gcmVzb2x2ZSBsZWZ0L3RvcCBkaXN0YW5jZXMuXHJcbiAqIGRvY3VtZW50IG9yaWdpbnMgYXJlIHVzZWQgYnkgZGVmYXVsdC5cclxuICpcclxuICogVGhpcyBmdW5jdGlvbiBjYW4gY2FsY3VsYXRlIHRoZSByZWN0IG9mIDMgZGlmZmVyZW50IHR5cGVzIG9mIG9iamVjdDpcclxuICogLSBET00gZWxlbWVudDogb2Zmc2V0cyBhcmUgY2FsY3VsYXRlZCBmcm9tIGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIGFuZCByZXNvbHZlZCByZWxhdGl2ZSB0byB0aGUgc3BlY2lmaWVkIG9mZnNldE9yaWdpbi5cclxuICpcdFx0d2lkdGggYW5kIGhlaWdodCBhcmUgY2FsY3VsYXRlZCBmcm9tIGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLlxyXG4gKiAtIEV2ZW50IG9iamVjdDogb2Zmc2V0cyBhcmUgY2FsY3VsYXRlZCBhcyB0aGUgZXZlbnQncyAoY2xpZW50fG9mZnNldHxwYWdlKSB4L3ksIGRlcGVuZGluZyBvbiB0aGUgc3BlY2lmaWVkIG9mZnNldE9yaWdpbi5cclxuICpcdFx0d2lkdGggYW5kIGhlaWdodCBhcmUgYWx3YXlzIDAsIDAuXHJcbiAqIC0gV2luZG93IG9iamVjdDogb2Zmc2V0cyBhcmUgY2FsY3VsYXRlZCBhcyB0aGUgY3VycmVudCBsZWZ0L3RvcCBzY3JvbGwsIGFzIGRldGVybWluZWQgYnkgdGhlIHZhbHVlIG9mIG9mZnNldE9yaWdpbi5cclxuICpcdFx0d2lkdGggYW5kIGhlaWdodCBhcmUgYWx3YXlzIHRoZSB3aW5kb3cncyBpbm5lciB3aWR0aC9oZWlnaHQgdmFsdWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0gRE9NRWxlbWVudHxFdmVudHx3aW5kb3cgXHRlbFxyXG4gKiBAcGFyYW0gYm9vbFx0IFx0XHRcdFx0XHRzaXplXHJcbiAqIEBwYXJhbSBET01FbGVtZW50fHdpbmRvd1x0IFx0XHRvZmZzZXRPcmlnaW5cclxuICpcclxuICogQHJldHVybiBvYmplY3RcclxuICovXHJcbmNvbnN0IHJlY3QgPSBmdW5jdGlvbihlbCwgc2l6ZSA9IHRydWUsIG9mZnNldE9yaWdpbiA9IG51bGwpIHtcclxuXHR2YXIgcmVjdFByb3BzID0gWyd3aWR0aCcsICdoZWlnaHQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J107XHJcblx0dmFyIGV2ZW50UHJvcHMgPSBbJ2NsaWVudFgnLCAnY2xpZW50WScsICdvZmZzZXRYJywgJ29mZnNldFknLCAncGFnZVgnLCAncGFnZVknLCAnc2NyZWVuWCcsICdzY3JlZW5ZJ107XHJcblx0dmFyIF9pc0VsZW1lbnQgPSBvYmogPT4gb2JqIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHwgb2JqIGluc3RhbmNlb2YgSFRNTERvY3VtZW50O1xyXG5cdHZhciBfcmVjdCA9IHt9O1xyXG5cdGlmIChlbCAhPT0gd2luZG93Lyp3aW5kb3cgYWxzbyBoYXMgc2NyZWVuWCBhbmQgc2NyZWVuWSovIFxyXG5cdCYmIF9pc09iamVjdChlbCkgJiYgX2FueShldmVudFByb3BzLCBwcm9wID0+IHByb3AgaW4gZWwpKSB7XHJcblx0XHRfcmVjdCA9IHNpemUgIT09IGZhbHNlID8ge3dpZHRoOjAsIGhlaWdodDowLH0gOiB7fTtcclxuXHRcdGlmIChvZmZzZXRPcmlnaW4gPT09IHdpbmRvdyB8fCBfaXNFbGVtZW50KG9mZnNldE9yaWdpbikpIHtcclxuXHRcdFx0X3JlY3QubGVmdCA9IGVsLmNsaWVudFg7XHJcblx0XHRcdF9yZWN0LnRvcCA9IGVsLmNsaWVudFk7XHJcblx0XHR9IGVsc2UgaWYgKG9mZnNldE9yaWdpbiA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRfcmVjdC5sZWZ0ID0gZWwub2Zmc2V0WDtcclxuXHRcdFx0X3JlY3QudG9wID0gZWwub2Zmc2V0WTtcclxuXHRcdH0gZWxzZSBpZiAob2Zmc2V0T3JpZ2luICE9PSBmYWxzZSkge1xyXG5cdFx0XHRfcmVjdC5sZWZ0ID0gZWwucGFnZVg7XHJcblx0XHRcdF9yZWN0LnRvcCA9IGVsLnBhZ2VZO1xyXG5cdFx0fVxyXG5cdH0gZWxzZSBpZiAoZWwgPT09IHdpbmRvdykge1xyXG5cdFx0X3JlY3QgPSBzaXplICE9PSBmYWxzZSA/IHt3aWR0aDp3aW5kb3cuaW5uZXJXaWR0aCwgaGVpZ2h0OndpbmRvdy5pbm5lckhlaWdodCx9IDoge307XHJcblx0XHRpZiAob2Zmc2V0T3JpZ2luID09PSB3aW5kb3cgfHwgb2Zmc2V0T3JpZ2luID09PSB0cnVlIHx8IF9pc0VsZW1lbnQob2Zmc2V0T3JpZ2luKSkge1xyXG5cdFx0XHRfcmVjdC5sZWZ0ID0gMDtcclxuXHRcdFx0X3JlY3QudG9wID0gMDtcclxuXHRcdH0gZWxzZSBpZiAob2Zmc2V0T3JpZ2luICE9PSBmYWxzZSkge1xyXG5cdFx0XHRfcmVjdC5sZWZ0ID0gd2luZG93LnBhZ2VYT2Zmc2V0Oy8vIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0O1xyXG5cdFx0XHRfcmVjdC50b3AgPSB3aW5kb3cucGFnZVlPZmZzZXQ7Ly8gfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcDtcclxuXHRcdH1cclxuXHR9IGVsc2UgaWYgKF9pc0VsZW1lbnQoZWwpKSB7XHJcblx0XHRfcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvSlNPTigpO1xyXG5cdFx0ZGVsZXRlIF9yZWN0Lng7XHJcblx0XHRkZWxldGUgX3JlY3QueTtcclxuXHRcdGRlbGV0ZSBfcmVjdC5yaWdodDtcclxuXHRcdGRlbGV0ZSBfcmVjdC5ib3R0b207XHJcblx0XHRpZiAoc2l6ZSA9PT0gZmFsc2UpIHtcclxuXHRcdFx0ZGVsZXRlIF9yZWN0LndpZHRoO1xyXG5cdFx0XHRkZWxldGUgX3JlY3QuaGVpZ2h0O1xyXG5cdFx0fVxyXG5cdFx0aWYgKG9mZnNldE9yaWdpbiA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRvZmZzZXRPcmlnaW4gPSBlbC5vZmZzZXRQYXJlbnQ7XHJcblx0XHR9IGVsc2UgaWYgKG9mZnNldE9yaWdpbiA9PT0gZmFsc2UpIHtcclxuXHRcdFx0ZGVsZXRlIF9yZWN0LmxlZnQ7XHJcblx0XHRcdGRlbGV0ZSBfcmVjdC50b3A7XHJcblx0XHR9IGVsc2UgaWYgKG9mZnNldE9yaWdpbiAhPT0gd2luZG93ICYmICFfaXNFbGVtZW50KG9mZnNldE9yaWdpbikpIHtcclxuXHRcdFx0X3JlY3QubGVmdCArPSB3aW5kb3cucGFnZVhPZmZzZXQ7Ly8gfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQpO1xyXG5cdFx0XHRfcmVjdC50b3AgKz0gd2luZG93LnBhZ2VZT2Zmc2V0Oy8vIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3ApO1xyXG5cdFx0fVxyXG5cdH0gZWxzZSBpZiAoX2lzT2JqZWN0KGVsKSAmJiBfYW55KHJlY3RQcm9wcywgcHJvcCA9PiBwcm9wIGluIGVsKSkge1xyXG5cdFx0X3JlY3QgPSBfY29weShlbCwgcmVjdFByb3BzKTtcclxuXHR9IGVsc2Uge1xyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG9iamVjdCB0eXBlIScpO1xyXG5cdH1cclxuXHRpZiAoX2lzRWxlbWVudChvZmZzZXRPcmlnaW4pKSB7XHJcblx0XHR2YXIgY29udGV4dE9mZnNldCA9IHJlY3Qob2Zmc2V0T3JpZ2luLCBmYWxzZSwgd2luZG93KTtcclxuXHRcdF9yZWN0LmxlZnQgLT0gY29udGV4dE9mZnNldC5sZWZ0O1xyXG5cdFx0X3JlY3QudG9wIC09IGNvbnRleHRPZmZzZXQudG9wO1xyXG5cdH1cclxuXHRyZXR1cm4gX3JlY3Q7XHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IHJlY3Q7IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IHBhcnNlUGxhY2VtZW50IGZyb20gJy4vcGFyc2VQbGFjZW1lbnQuanMnO1xyXG5pbXBvcnQgZXZhbFByZWRpY2F0ZXMgZnJvbSAnLi9ldmFsUHJlZGljYXRlcy5qcyc7XHJcbmltcG9ydCBpbnRlcnNlY3Rpb24gZnJvbSAnLi9pbnRlcnNlY3Rpb24uanMnO1xyXG5pbXBvcnQgcmVjdCBmcm9tICcuL3JlY3QuanMnO1xyXG5cclxuLyoqXHJcbiAqIENhbGN1bGF0ZXMgdGhlIGxlbmd0aCBvbiBhbiBheGlzIG9mIGFuIGludGVyc2VjdGlvbi5cclxuICpcclxuICogQHBhcmFtIEhUTUxFbGVtZW50fEV2ZW50fHdpbmRvdyBcdGVsXHJcbiAqIEBwYXJhbSBvYmplY3RcdFx0IFx0XHRcdCRyZWN0XHJcbiAqIEBwYXJhbSBvYmplY3RcdFx0IFx0XHRcdG9wdGlvbnNcclxuICpcclxuICogQHJldHVybiBvYmplY3RcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVsLCAkcmVjdCwgb3B0aW9ucyA9IHt9KSB7XHJcblx0dmFyICRpbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb24ocmVjdChvcHRpb25zLnVzaW5nIHx8IGVsKSwgJHJlY3QpO1xyXG5cdHZhciBsZW5ndGggPSB7eDond2lkdGgnLCB5OidoZWlnaHQnfTtcclxuXHR2YXIgc3RhcnQgPSB7eDonbGVmdCcsIHk6J3RvcCd9O1xyXG5cdHZhciBlbmQgPSB7eDoncmlnaHQnLCB5Oidib3R0b20nfTtcclxuXHR2YXIgJGNvb3JkcyA9IHt9O1xyXG5cdHZhciAkYWxpZ25tZW50ID0ge307XHJcblx0Wyd4JywgJ3knXS5mb3JFYWNoKGF4aXMgPT4ge1xyXG5cdFx0aWYgKG9wdGlvbnNbYXhpc10gPT09IGZhbHNlKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdHZhciByZWN0MUxlbmd0aCA9ICRpbnRlcnNlY3Rpb24ucmVjdDFbbGVuZ3RoW2F4aXNdLypoZWlnaHQqL107XHJcblx0XHQvLyBEaXN0aW5ndWlzaCBhbmQgcHJlZGljYXRlXHJcblx0XHQkYWxpZ25tZW50W2F4aXNdID0gcGFyc2VQbGFjZW1lbnQob3B0aW9uc1theGlzXSB8fCAnJyk7XHJcblx0XHRzd2l0Y2goJGFsaWdubWVudFtheGlzXS5rZXl3b3JkKSB7XHJcblx0XHRcdGNhc2UgJ2JlZm9yZSc6XHJcblx0XHRcdFx0Ly8gUHVsbCBiZXlvbmQgc3RhcnRcclxuXHRcdFx0XHQkY29vcmRzW2F4aXNdID0gLSAoJGludGVyc2VjdGlvbltzdGFydFtheGlzXS8qdG9wKi9dICsgcmVjdDFMZW5ndGgpO1xyXG5cdFx0XHRicmVhaztcclxuXHRcdFx0Y2FzZSAnYWZ0ZXInOlxyXG5cdFx0XHRcdC8vIFB1c2ggYmV5b25kIGVuZFxyXG5cdFx0XHRcdCRjb29yZHNbYXhpc10gPSAkaW50ZXJzZWN0aW9uW2VuZFtheGlzXS8qYm90dG9tKi9dICsgcmVjdDFMZW5ndGg7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0XHRjYXNlICdzdGFydCc6XHJcblx0XHRcdFx0Ly8gUHVsbCB0byBzdGFydFxyXG5cdFx0XHRcdCRjb29yZHNbYXhpc10gPSAtICRpbnRlcnNlY3Rpb25bc3RhcnRbYXhpc10vKnRvcCovXTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRcdGNhc2UgJ2VuZCc6XHJcblx0XHRcdFx0Ly8gUHVzaCB0byBlbmRcclxuXHRcdFx0XHQkY29vcmRzW2F4aXNdID0gJGludGVyc2VjdGlvbltlbmRbYXhpc10vKmJvdHRvbSovXTtcclxuXHRcdFx0YnJlYWs7XHJcblx0XHRcdGRlZmF1bHQ6XHJcblx0XHRcdFx0Ly8gQWxpZ24gdG8gY2VudGVyXHJcblx0XHRcdFx0JGNvb3Jkc1theGlzXSA9ICRpbnRlcnNlY3Rpb24uZGVsdGFbYXhpc107XHJcblx0XHR9XHJcblx0XHQvLyBBcHBseSBwcmVkaWNhdGVzXHJcblx0XHRpZiAoJGFsaWdubWVudFtheGlzXS5wcmVkaWNhdGVzKSB7XHJcblx0XHRcdCRjb29yZHNbYXhpc10gKz0gZXZhbFByZWRpY2F0ZXMoJGFsaWdubWVudFtheGlzXS5wcmVkaWNhdGVzLCByZWN0MUxlbmd0aCk7XHJcblx0XHR9XHJcblx0fSk7XHJcblx0JGNvb3Jkcy5hbGlnbm1lbnQgPSAkYWxpZ25tZW50O1xyXG5cdCRjb29yZHMuaW50ZXJzZWN0aW9uID0gJGludGVyc2VjdGlvbjtcclxuXHRyZXR1cm4gJGNvb3JkcztcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBQYXJzZXMgYSBkaXJlY3RpdmUgdG8gb2J0YWluIGEgcGxhY2VtZW50IGtleXdvcmQgYW5kIG1vZGlmaWVycy5cclxuICpcclxuICogQHBhcmFtIHN0cmluZ1x0XHRcdCBcdGV4cHJcclxuICpcclxuICogQHJldHVybiBvYmplY3RcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGV4cHIpIHtcclxuXHR2YXIgcmVnUGxhY2VtZW50ID0gbmV3IFJlZ0V4cCgnKGJlZm9yZXxhZnRlcnxzdGFydHxlbmR8Y2VudGVyKScsICdnJyk7XHJcblx0dmFyIHJlZ01vZGlmaWVycyA9IG5ldyBSZWdFeHAoJ1tcXC1cXCtdWzAtOV0rKCUpPycsICdnJyk7XHJcblx0cmV0dXJuIHtcclxuXHRcdGtleXdvcmQ6IChleHByLm1hdGNoKHJlZ1BsYWNlbWVudCkgfHwgW10pWzBdLFxyXG5cdFx0cHJlZGljYXRlczogZXhwci5tYXRjaChyZWdNb2RpZmllcnMpLFxyXG5cdH07XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogU3VtcyBhIGxpc3Qgb2YgTWF0aGVtYXRpY2FsIGV4cHJlc3Npb25zLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXlcdFx0XHRcdCBcdG1vZGlmaWVyc1xyXG4gKiBAcGFyYW0gbnVtYmVyIFx0XHRcdFx0cGVyY2VudGFnZUNvbnRleHRcclxuICpcclxuICogQHJldHVybiBudW1iZXJcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1vZGlmaWVycywgcGVyY2VudGFnZUNvbnRleHQpIHtcclxuXHRyZXR1cm4gbW9kaWZpZXJzLnJlZHVjZSgodG90YWwsIG1vZGlmaWVyKSA9PiB0b3RhbCArIChtb2RpZmllci5lbmRzV2l0aCgnJScpIFxyXG5cdFx0PyBwYXJzZUZsb2F0KG1vZGlmaWVyKSAvIDEwMCAqIHBlcmNlbnRhZ2VDb250ZXh0XHJcblx0XHQ6IHBhcnNlRmxvYXQobW9kaWZpZXIpXHJcblx0KSwgMCk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBjc3NSZWFkIGZyb20gJy4uL0Nzcy9yZWFkLmpzJztcclxuaW1wb3J0IFRyYW5zZm9ybVJ1bGUgZnJvbSAnLi4vQ3NzL1RyYW5zZm9ybVJ1bGUuanMnO1xyXG5pbXBvcnQgY29vcmRzQXRSZWN0IGZyb20gJy4vY29vcmRzQXRSZWN0LmpzJztcclxuaW1wb3J0IHJlY3QgZnJvbSAnLi9yZWN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiBNYW5pcHVsYXRlcyBhbiBlbGVtZW50J3MgdHJhbnNsYXRlLnRyYW5zbGF0ZSB0byBwbGFjZSBpdCB3aXRoIGFub3RoZXIgZWxlbWVudC5cclxuICpcclxuICogQHBhcmFtIEhUTUxFbGVtZW50fEV2ZW50fHdpbmRvdyBcdGVsXHJcbiAqIEBwYXJhbSBIVE1MRWxlbWVudHxFdmVudHx3aW5kb3dcdGVsMlxyXG4gKiBAcGFyYW0gb2JqZWN0IFx0XHRcdFx0XHRvcHRpb25zXHJcbiAqXHJcbiAqIEByZXR1cm4gb2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihlbCwgZWwyLCBvcHRpb25zID0ge30pIHtcclxuXHQvLyAtLS0tLS0tLS0tLVxyXG5cdHZhciAkY29vcmRzID0gY29vcmRzQXRSZWN0KGVsLCByZWN0KGVsMiksIG9wdGlvbnMpO1xyXG5cdC8vIC0tLS0tLS0tLS0tXHJcblx0dmFyICRjb29yZHNGb3JtYXR0ZWQgPSB7XHJcblx0XHRmcm9tOiBuZXcgVHJhbnNmb3JtUnVsZSh7dHJhbnNsYXRlOiBbXSx9KSxcclxuXHRcdHRvOiBuZXcgVHJhbnNmb3JtUnVsZSh7dHJhbnNsYXRlOiBbXSx9KSxcclxuXHRcdGN1cnJlbnQ6IHtcclxuXHRcdFx0ZnJvbTogbmV3IFRyYW5zZm9ybVJ1bGUoe3RyYW5zbGF0ZTogW10sfSksXHJcblx0XHRcdHRvOiBuZXcgVHJhbnNmb3JtUnVsZSh7dHJhbnNsYXRlOiBbXSx9KSxcclxuXHRcdFx0cHJvZ3Jlc3M6IHt9LFxyXG5cdFx0fSxcclxuXHR9O1xyXG5cdC8vIC0tLS0tLS0tLS0tXHJcblx0dmFyIGFjdGl2ZVRyYW5zZm9ybSA9IGNzc1JlYWQoZWwsICd0cmFuc2Zvcm0nKTtcclxuXHRbJ3gnLCAneSddLmZvckVhY2goKGF4aXMsIGkpID0+IHtcclxuXHRcdGlmIChheGlzIGluICRjb29yZHMpIHtcclxuXHRcdFx0JGNvb3Jkc0Zvcm1hdHRlZC5mcm9tLnRyYW5zbGF0ZVtpXSA9IDA7XHJcblx0XHRcdCRjb29yZHNGb3JtYXR0ZWQudG8udHJhbnNsYXRlW2ldID0gJGNvb3Jkc1theGlzXSArIGFjdGl2ZVRyYW5zZm9ybS50cmFuc2xhdGVbaV07XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0JGNvb3Jkc0Zvcm1hdHRlZC5jdXJyZW50LmZyb20udHJhbnNsYXRlW2ldID0gYWN0aXZlVHJhbnNmb3JtLnRyYW5zbGF0ZVtpXTtcclxuXHRcdFx0JGNvb3Jkc0Zvcm1hdHRlZC5jdXJyZW50LnRvLnRyYW5zbGF0ZVtpXSA9ICRjb29yZHNbYXhpc107XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0JGNvb3Jkc0Zvcm1hdHRlZC5jdXJyZW50LnByb2dyZXNzW2F4aXNdID0gTWF0aC5hYnMoYWN0aXZlVHJhbnNmb3JtLnRyYW5zbGF0ZVtpXSAvICgkY29vcmRzW2F4aXNdICsgYWN0aXZlVHJhbnNmb3JtLnRyYW5zbGF0ZVtpXSkpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0JGNvb3Jkc0Zvcm1hdHRlZC5mcm9tLnRyYW5zbGF0ZVtpXSA9IGFjdGl2ZVRyYW5zZm9ybS50cmFuc2xhdGVbaV07XHJcblx0XHRcdCRjb29yZHNGb3JtYXR0ZWQudG8udHJhbnNsYXRlW2ldID0gYWN0aXZlVHJhbnNmb3JtLnRyYW5zbGF0ZVtpXTtcclxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHQkY29vcmRzRm9ybWF0dGVkLmN1cnJlbnQuZnJvbS50cmFuc2xhdGVbaV0gPSBhY3RpdmVUcmFuc2Zvcm0udHJhbnNsYXRlW2ldO1xyXG5cdFx0XHQkY29vcmRzRm9ybWF0dGVkLmN1cnJlbnQudG8udHJhbnNsYXRlW2ldID0gYWN0aXZlVHJhbnNmb3JtLnRyYW5zbGF0ZVtpXTtcclxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHQkY29vcmRzRm9ybWF0dGVkLmN1cnJlbnQucHJvZ3Jlc3NbYXhpc10gPSAwO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG5cdHJldHVybiAkY29vcmRzRm9ybWF0dGVkO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2ludGVyc2VjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9pbnRlcnNlY3QuanMnO1xyXG5pbXBvcnQgX3dpdGggZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovd2l0aC5qcyc7XHJcbmltcG9ydCBwb3NpdGlvbmluZ09mZnNldHMgZnJvbSAnLi9wb3NpdGlvbmluZ09mZnNldHMuanMnO1xyXG5pbXBvcnQgY29vcmRzQXRSZWN0IGZyb20gJy4vY29vcmRzQXRSZWN0LmpzJztcclxuaW1wb3J0IHJlY3QgZnJvbSAnLi9yZWN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiBDYWxjdWxhdGVzIGFuIGVsZW1lbnQncyBvZmZzZXQgd2hlcmUgaXQgdG8gYmUgYXQgdGhlIGdpdmVuIHJlY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSBIVE1MRWxlbWVudHxFdmVudHx3aW5kb3cgXHRlbFxyXG4gKiBAcGFyYW0gSFRNTEVsZW1lbnR8RXZlbnR8d2luZG93XHRlbDJcclxuICogQHBhcmFtIG9iamVjdCBcdFx0XHRcdFx0b3B0aW9uc1xyXG4gKlxyXG4gKiBAcmV0dXJuIG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZWwsIGVsMiwgb3B0aW9ucyA9IHt9KSB7XHJcblx0Ly8gLS0tLS0tLS0tLS1cclxuXHR2YXIgJGNvb3JkcyA9IGNvb3Jkc0F0UmVjdChlbCwgcmVjdChlbDIpLCBvcHRpb25zKTtcclxuXHQvLyAtLS0tLS0tLS0tLVxyXG5cdHZhciBzdGFydCA9IHt4OidsZWZ0JywgeTondG9wJ307XHJcblx0dmFyIGVuZCA9IHt4OidyaWdodCcsIHk6J2JvdHRvbSd9O1xyXG5cdHZhciAkb2Zmc2V0cyA9IF9pbnRlcnNlY3QoWyd4JywgJ3knXSwgT2JqZWN0LmtleXMoJGNvb3JkcykpLnJlZHVjZSgob2JqLCBheGlzKSA9PiB7XHJcblx0XHRzd2l0Y2goJGNvb3Jkcy5hbGlnbm1lbnRbYXhpc10ua2V5d29yZCkge1xyXG5cdFx0XHRjYXNlICdiZWZvcmUnOlxyXG5cdFx0XHRcdHJldHVybiBvcHRpb25zLmFsdGVybmF0ZUFuY2hvcnMgPyBfd2l0aChvYmosIHN0YXJ0W2F4aXNdLCAkY29vcmRzW2F4aXNdKSA6IF93aXRoKG9iaiwgZW5kW2F4aXNdLCAtICRjb29yZHNbYXhpc10pO1xyXG5cdFx0XHRjYXNlICdhZnRlcic6XHJcblx0XHRcdFx0cmV0dXJuIG9wdGlvbnMuYWx0ZXJuYXRlQW5jaG9ycyA/IF93aXRoKG9iaiwgZW5kW2F4aXNdLCAtICRjb29yZHNbYXhpc10pIDogX3dpdGgob2JqLCBzdGFydFtheGlzXSwgJGNvb3Jkc1theGlzXSk7XHJcblx0XHRcdGNhc2UgJ2VuZCc6XHJcblx0XHRcdFx0cmV0dXJuIF93aXRoKG9iaiwgZW5kW2F4aXNdLCAtICRjb29yZHNbYXhpc10pO1xyXG5cdFx0XHRkZWZhdWx0OiAvLyBjZW50ZXIsc3RhcnRcclxuXHRcdFx0XHRyZXR1cm4gX3dpdGgob2JqLCBzdGFydFtheGlzXSwgJGNvb3Jkc1theGlzXSk7XHJcblx0XHR9XHJcblx0fSwge30pO1xyXG5cdC8vIC0tLS0tLS0tLS0tXHJcblx0dmFyICRvZmZzZXRzRm9ybWF0dGVkID0ge2Zyb206IHt9LCB0bzoge30sIGN1cnJlbnQ6IHtcclxuXHRcdFx0ZnJvbToge30sIHRvOiB7fSwgcHJvZ3Jlc3M6IHt9LFxyXG5cdFx0fSxcclxuXHR9O1xyXG5cdC8vIC0tLS0tLS0tLS0tXHJcblx0dmFyIGN1cnJlbnRPZmZzZXRzID0gcG9zaXRpb25pbmdPZmZzZXRzKGVsLCBPYmplY3Qua2V5cygkb2Zmc2V0cykpO1xyXG5cdFsnbGVmdCcsICdyaWdodCcsICd0b3AnLCAnYm90dG9tJ10uZm9yRWFjaChuYW1lID0+IHtcclxuXHRcdGlmIChuYW1lIGluICRvZmZzZXRzKSB7XHJcblx0XHRcdCRvZmZzZXRzRm9ybWF0dGVkLmZyb21bbmFtZV0gPSAwO1xyXG5cdFx0XHQkb2Zmc2V0c0Zvcm1hdHRlZC50b1tuYW1lXSA9ICRvZmZzZXRzW25hbWVdICsgY3VycmVudE9mZnNldHNbbmFtZV07XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0JG9mZnNldHNGb3JtYXR0ZWQuY3VycmVudC5mcm9tW25hbWVdID0gY3VycmVudE9mZnNldHNbbmFtZV07XHJcblx0XHRcdCRvZmZzZXRzRm9ybWF0dGVkLmN1cnJlbnQudG9bbmFtZV0gPSAkb2Zmc2V0c1tuYW1lXTtcclxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHQkb2Zmc2V0c0Zvcm1hdHRlZC5jdXJyZW50LnByb2dyZXNzW25hbWVdID0gTWF0aC5hYnMoY3VycmVudE9mZnNldHNbbmFtZV0gLyAoJG9mZnNldHNbbmFtZV0gKyBjdXJyZW50T2Zmc2V0c1tuYW1lXSkpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0JG9mZnNldHNGb3JtYXR0ZWQuZnJvbVtuYW1lXSA9ICdhdXRvJztcclxuXHRcdFx0JG9mZnNldHNGb3JtYXR0ZWQudG9bbmFtZV0gPSAnYXV0byc7XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0JG9mZnNldHNGb3JtYXR0ZWQuY3VycmVudC5mcm9tW25hbWVdID0gJ2F1dG8nO1xyXG5cdFx0XHQkb2Zmc2V0c0Zvcm1hdHRlZC5jdXJyZW50LnRvW25hbWVdID0gJ2F1dG8nO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG5cdHJldHVybiAkb2Zmc2V0c0Zvcm1hdHRlZDtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IGNzc1JlYWQgZnJvbSAnLi4vQ3NzL3JlYWQuanMnO1xyXG5pbXBvcnQgaW50ZXJzZWN0aW9uIGZyb20gJy4vaW50ZXJzZWN0aW9uLmpzJztcclxuaW1wb3J0IHJlY3QgZnJvbSAnLi9yZWN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiBHZXRzIHRoZSBlbGVtZW50J3MgbGVmdCx0b3AsYm90dG9tLHJpZ2h0IHZhbHVlc1xyXG4gKiB3aXRoIFwiYXV0b1wicyByZXNvbHZlZC5cclxuICpcclxuICogQHBhcmFtIEhUTUxFbGVtZW50XHRcdFx0ZWwgXHJcbiAqIEBwYXJhbSBhcnJheVx0XHRcdFx0XHRhbmNob3JzIFxyXG4gKlxyXG4gKiBAcmV0dXJuIG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZWwsIGFuY2hvcnMgPSBbJ2xlZnQnLCAndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbSddKSB7XHJcblx0dmFyIGludmVyc2VzID0ge3JpZ2h0OidsZWZ0JywgbGVmdDoncmlnaHQnLCBib3R0b206J3RvcCcsIHRvcDonYm90dG9tJ307XHJcblx0dmFyIGN1cnJlbnRPZmZzZXRzID0gY3NzUmVhZChlbCwgYW5jaG9ycy5jb25jYXQoJ3Bvc2l0aW9uJykpO1xyXG5cdHZhciBpbnRlcnNlY3Rpb25XaXRoQW5jaG9yID0gbnVsbDtcclxuXHRhbmNob3JzLmZvckVhY2gobmFtZSA9PiB7XHJcblx0XHRpZiAoY3VycmVudE9mZnNldHNbbmFtZV0gPT09ICdhdXRvJykge1xyXG5cdFx0XHQvLyBHZXQgd2hhdCBhbmNob3IgdmFsdWUgd291bGQgYmUuLi5cclxuXHRcdFx0Ly8gb24gY3VycmVudCBwb3NpdGlvbiB0eXBlXHJcblx0XHRcdGlmIChjdXJyZW50T2Zmc2V0cy5wb3NpdGlvbiA9PT0gJ3JlbGF0aXZlJykge1xyXG5cdFx0XHRcdGN1cnJlbnRPZmZzZXRzW25hbWVdID0gLSBwYXJzZUZsb2F0KGN1cnJlbnRPZmZzZXRzW2ludmVyc2VzW25hbWVdXSk7XHJcblx0XHRcdH0gZWxzZSBpZiAoY3VycmVudE9mZnNldHMucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcclxuXHRcdFx0XHRpbnRlcnNlY3Rpb25XaXRoQW5jaG9yID0gaW50ZXJzZWN0aW9uV2l0aEFuY2hvciB8fCBpbnRlcnNlY3Rpb24ocmVjdChlbCksIHJlY3Qod2luZG93KSk7XHJcblx0XHRcdFx0Y3VycmVudE9mZnNldHNbbmFtZV0gPSBpbnRlcnNlY3Rpb25XaXRoQW5jaG9yW25hbWVdO1xyXG5cdFx0XHR9IGVsc2UgaWYgKGN1cnJlbnRPZmZzZXRzLnBvc2l0aW9uID09PSAnYWJzb2x1dGUnKSB7XHJcblx0XHRcdFx0aW50ZXJzZWN0aW9uV2l0aEFuY2hvciA9IGludGVyc2VjdGlvbldpdGhBbmNob3IgfHwgaW50ZXJzZWN0aW9uKHJlY3QoZWwpLCByZWN0KGVsLm9mZnNldFBhcmVudCkpO1xyXG5cdFx0XHRcdGN1cnJlbnRPZmZzZXRzW25hbWVdID0gaW50ZXJzZWN0aW9uV2l0aEFuY2hvcltuYW1lXTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Y3VycmVudE9mZnNldHNbbmFtZV0gPSBwYXJzZUZsb2F0KGN1cnJlbnRPZmZzZXRzW25hbWVdKTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHRkZWxldGUgY3VycmVudE9mZnNldHMucG9zaXRpb247XHJcblx0cmV0dXJuIGN1cnJlbnRPZmZzZXRzO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgc2Nyb2xscyBmcm9tICcuL3Njcm9sbHMuanMnO1xyXG5pbXBvcnQgc2Nyb2xsUGFyZW50IGZyb20gJy4vc2Nyb2xsUGFyZW50LmpzJztcclxuaW1wb3J0IGNvb3Jkc0F0UmVjdCBmcm9tICcuL2Nvb3Jkc0F0UmVjdC5qcyc7XHJcbmltcG9ydCByZWN0IGZyb20gJy4vcmVjdC5qcyc7XHJcblxyXG4vKipcclxuICogU2Nyb2xscyBhbiBlbGVtZW50IHRvIHRoZSBwb3NpdGlvbiBvZiBhbm90aGVyIGVsZW1lbnRcclxuICogd2l0aGluIGl0cyBzY3JvbGxhYmxlIHBhcmVudC5cclxuICpcclxuICogQHBhcmFtIEhUTUxFbGVtZW50fEV2ZW50fHdpbmRvdyBcdGVsXHJcbiAqIEBwYXJhbSBIVE1MRWxlbWVudHxFdmVudHx3aW5kb3dcdGVsMlxyXG4gKiBAcGFyYW0gb2JqZWN0IFx0XHRcdFx0XHRvcHRpb25zXHJcbiAqXHJcbiAqIEByZXR1cm4gb2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihlbCwgZWwyLCBvcHRpb25zID0ge30pIHtcclxuXHR2YXIgdmlld3BvcnQgPSBvcHRpb25zLnNjcm9sbEFuY2hvciB8fCBzY3JvbGxQYXJlbnQoZWwpO1xyXG5cdHZpZXdwb3J0ID0gdmlld3BvcnQgPT09IGRvY3VtZW50LmJvZHkgPyB3aW5kb3cgOiB2aWV3cG9ydDtcclxuXHRpZiAoIXNjcm9sbHModmlld3BvcnQpKSB7XHJcblx0XHRyZXR1cm47XHJcblx0fVxyXG5cdC8vIC0tLS0tLS0tLS0tXHJcblx0dmFyICRjb29yZHMgPSBjb29yZHNBdFJlY3QoZWwsIHJlY3QoZWwyKSwgb3B0aW9ucyk7XHJcblx0Ly8gLS0tLS0tLS0tLS1cclxuXHR2YXIgJG9mZnNldHNGb3JtYXR0ZWQgPSB7ZnJvbToge30sIHRvOiB7fSwgY3VycmVudDoge1xyXG5cdFx0XHRmcm9tOiB7fSwgdG86IHt9LCBwcm9ncmVzczoge30sXHJcblx0XHR9LFxyXG5cdFx0dmlld3BvcnQ6IHZpZXdwb3J0LFxyXG5cdH07XHJcblx0Ly8gLS0tLS0tLS0tLS1cclxuXHR2YXIgY3VycmVudFNjcm9sbCA9IHtcclxuXHRcdHNjcm9sbExlZnQ6IHZpZXdwb3J0W3ZpZXdwb3J0ID09PSB3aW5kb3cgPyAncGFnZVhPZmZzZXQnIDogJ3Njcm9sbExlZnQnXSxcclxuXHRcdHNjcm9sbFRvcDogdmlld3BvcnRbdmlld3BvcnQgPT09IHdpbmRvdyA/ICdwYWdlWU9mZnNldCcgOiAnc2Nyb2xsVG9wJ10sXHJcblx0fTtcclxuXHRbJ3gnLCAneSddLmZvckVhY2goKGF4aXMsIGkpID0+IHtcclxuXHRcdHZhciBheGlzUHJvcCA9IGF4aXMgPT09ICd4JyA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnO1xyXG5cdFx0aWYgKGF4aXMgaW4gJGNvb3Jkcykge1xyXG5cdFx0XHQkY29vcmRzRm9ybWF0dGVkLmZyb21bYXhpc1Byb3BdID0gMDtcclxuXHRcdFx0JGNvb3Jkc0Zvcm1hdHRlZC50b1theGlzUHJvcF0gPSAkY29vcmRzW2F4aXNdICsgY3VycmVudFNjcm9sbFtheGlzUHJvcF07XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0JGNvb3Jkc0Zvcm1hdHRlZC5jdXJyZW50LmZyb21bYXhpc1Byb3BdID0gY3VycmVudFNjcm9sbFtheGlzUHJvcF07XHJcblx0XHRcdCRjb29yZHNGb3JtYXR0ZWQuY3VycmVudC50b1theGlzUHJvcF0gPSAkY29vcmRzW2F4aXNdO1xyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdCRjb29yZHNGb3JtYXR0ZWQuY3VycmVudC5wcm9ncmVzc1theGlzXSA9IE1hdGguYWJzKGN1cnJlbnRTY3JvbGxbYXhpc1Byb3BdIC8gKCRjb29yZHNbYXhpc10gKyBjdXJyZW50U2Nyb2xsW2F4aXNQcm9wXSkpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0JGNvb3Jkc0Zvcm1hdHRlZC5mcm9tW2F4aXNQcm9wXSA9IGN1cnJlbnRTY3JvbGxbYXhpc1Byb3BdO1xyXG5cdFx0XHQkY29vcmRzRm9ybWF0dGVkLnRvW2F4aXNQcm9wXSA9IGN1cnJlbnRTY3JvbGxbYXhpc1Byb3BdO1xyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdCRjb29yZHNGb3JtYXR0ZWQuY3VycmVudC5mcm9tW2F4aXNQcm9wXSA9IGN1cnJlbnRTY3JvbGxbYXhpc1Byb3BdO1xyXG5cdFx0XHQkY29vcmRzRm9ybWF0dGVkLmN1cnJlbnQudG9bYXhpc1Byb3BdID0gY3VycmVudFNjcm9sbFtheGlzUHJvcF07XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0JGNvb3Jkc0Zvcm1hdHRlZC5jdXJyZW50LnByb2dyZXNzW2F4aXNdID0gMDtcclxuXHRcdH1cclxuXHR9KTtcclxuXHRyZXR1cm4gJGNvb3Jkc0Zvcm1hdHRlZDtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBHZXRzIGFuIGVsZW1lbnQncyBuZWFyZXN0IHNjcm9sbGFibGUgcGFyZW50LlxyXG4gKlxyXG4gKiBAcGFyYW0gRE9NTm9kZVx0XHRlbFxyXG4gKlxyXG4gKiBAcmV0dXJuIGpRdWVyeVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZWwpIHtcclxuXHR2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCk7XHJcblx0dmFyIGV4Y2x1ZGVTdGF0aWNQYXJlbnQgPSBzdHlsZS5wb3NpdGlvbiA9PT0gJ2Fic29sdXRlJztcclxuXHR2YXIgb3ZlcmZsb3dSZWdleCA9IGZhbHNlLyppbmNsdWRlSGlkZGVuKi8gPyAvKGF1dG98c2Nyb2xsfGhpZGRlbikvIDogLyhhdXRvfHNjcm9sbCkvO1xyXG5cdGlmIChzdHlsZS5wb3NpdGlvbiAhPT0gJ2ZpeGVkJykge1xyXG5cdFx0Zm9yICh2YXIgcGFyZW50ID0gZWw7IChwYXJlbnQgPSBwYXJlbnQucGFyZW50RWxlbWVudCk7KSB7XHJcblx0XHRcdHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUocGFyZW50KTtcclxuXHRcdFx0aWYgKGV4Y2x1ZGVTdGF0aWNQYXJlbnQgJiYgc3R5bGUucG9zaXRpb24gPT09ICdzdGF0aWMnKSB7XHJcblx0XHRcdFx0Y29udGludWU7XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKG92ZXJmbG93UmVnZXgudGVzdChzdHlsZS5vdmVyZmxvdyArIHN0eWxlLm92ZXJmbG93WSArIHN0eWxlLm92ZXJmbG93WCkpIHtcclxuXHRcdFx0XHRyZXR1cm4gcGFyZW50O1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG5cdHJldHVybiBkb2N1bWVudC5ib2R5O1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFRlbGxzIGlmIGFuIGVsZW1lbnQgaXMgc2Nyb2xsYWJsZSBkdWUgdG8gb3ZlcmZsb3dpbmcgY29udGVudC5cclxuICpcclxuICogQHBhcmFtIERPTU5vZGVcdFx0ZWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihlbCkge1xyXG5cdHJldHVybiBlbCA9PT0gd2luZG93IFxyXG5cdFx0PyAoZWwucGFnZVlPZmZzZXQgfHwgZWwucGFnZVlPZmZzZXQpIFxyXG5cdFx0OiAoZWwuc2Nyb2xsSGVpZ2h0ID4gZWwuY2xpZW50SGVpZ2h0KTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgb2YgdHlwZSBcIm51bWJlclwiLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nIFx0dmFsXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsKSB7XHJcblx0cmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICcuLi9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9tZXJnZUNhbGxiYWNrIGZyb20gJy4vbWVyZ2VDYWxsYmFjay5qcyc7XHJcblxyXG4vKipcclxuICogQ29waWVzIG9ubHkgcHJvcGVydGllcyBvZiBhbiBvYmplY3QuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdCBcdG9ialxyXG4gKiBAcGFyYW0gYXJyYXlcdFx0IFx0b25seVxyXG4gKiBAcGFyYW0gYXJyYXlcdFx0IFx0ZXhjZXB0XHJcbiAqXHJcbiAqIEByZXR1cm4gb2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmosIGZpbHRlciA9IFtdKSB7XHJcblx0cmV0dXJuIF9tZXJnZUNhbGxiYWNrKFt7fSwgb2JqXSwgKGtleSwgb2JqMSwgb2JqMikgPT4ge1xyXG5cdFx0aWYgKCFfaXNGdW5jdGlvbihvYmoyW2tleV0pKSB7XHJcblx0XHRcdHJldHVybiBfaXNGdW5jdGlvbihmaWx0ZXIpID8gZmlsdGVyKGtleSkgXHJcblx0XHRcdFx0OiAoX2lzQXJyYXkoZmlsdGVyKSAmJiBmaWx0ZXIubGVuZ3RoID8gZmlsdGVyLmluZGV4T2Yoa2V5KSA+IC0xIDogdHJ1ZSk7XHJcblx0XHR9XHJcblx0fSwgZmFsc2UvKmRlZXBQcm9wcyovLCBmYWxzZS8qaXNSZXBsYWNlKi8sIGZhbHNlLyp3aXRoU3ltYm9scyovKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9lYWNoIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2VhY2guanMnO1xyXG5cclxuLyoqXHJcbiAqIEhlbHBlciBtZXRob2Q6IHBhcnNlcyBhIENTUyBzdHJpbmcgaW50byBhbiBhc3NvY2lhdGl2ZSBhcnJheS5cclxuICpcclxuICogQHBhcmFtIHN0cmluZ1x0IFx0Y3NzXHJcbiAqXHJcbiAqIEByZXR1cm4gb2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjc3MpIHtcclxuXHR2YXIgc3BsaXQgPSB7fTtcclxuXHRfZWFjaChjc3Muc3BsaXQoJzsnKSwgKGksIHJ1bGUpID0+IHtcclxuXHRcdHJ1bGUgPSBydWxlLnNwbGl0KCc6Jyk7XHJcblx0XHRzcGxpdFtydWxlWzBdLnRyaW0oKV0gPSBydWxlWzFdLnRyaW0oKTtcclxuXHR9KTtcclxuXHRyZXR1cm4gc3BsaXQ7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfY29weVBsYWluIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2NvcHlQbGFpbi5qcyc7XHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgc3R5bGVzaGVldFJ1bGVDYWxsYmFjayBmcm9tICcuL3N0eWxlc2hlZXRSdWxlQ2FsbGJhY2suanMnO1xyXG5pbXBvcnQgcnVsZUNhbGxiYWNrIGZyb20gJy4vcnVsZUNhbGxiYWNrLmpzJztcclxuaW1wb3J0IHZlbmRvclByZWZpeCBmcm9tICcuL3ZlbmRvclByZWZpeC5qcyc7XHJcbmltcG9ydCBwYXJzZVJ1bGVzIGZyb20gJy4vcGFyc2VSdWxlcy5qcyc7XHJcblxyXG4vKipcclxuICogRkluZHMgdGhlIGtleWZyYW1lcyBvZiB0aGUgZ2l2ZW4gYW5pbWF0aW9uIG5hbWUocykgYWNyb3NzIGFsbCBzdHlsZXNoZWV0cy5cclxuICpcclxuICogQHBhcmFtIHN0cmluZ3xhcnJheVx0XHRuYW1lXHJcbiAqIEBwYXJhbSBib29sXHRcdFx0XHRub0NhY2hlXHJcbiAqIEBwYXJhbSBib29sXHRcdFx0XHRub3JtYWxpemVcclxuICpcclxuICogQHJldHVybiBOVUxMfGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIG5vQ2FjaGUsIG5vcm1hbGl6ZSA9IHRydWUpIHtcclxuXHQvLyBBc2sgY2FjaGUgZmlyc3QuLi5cclxuXHR2YXIgY2FjaGVLZXkgPSBfaXNBcnJheShuYW1lKSA/IG5hbWUuam9pbignfCcpIDogbmFtZTtcclxuXHRpZiAoIW5vQ2FjaGUgJiYgc3R5bGVzaGVldEtleWZyYW1lc0NhY2hlW2NhY2hlS2V5XSkge1xyXG5cdFx0cmV0dXJuIHN0eWxlc2hlZXRLZXlmcmFtZXNDYWNoZVtjYWNoZUtleV07XHJcblx0fVxyXG5cdC8vIFBhcnNlIGtleWZyYW1lcyBydWxlXHJcblx0dmFyIHBhcnNlS2V5ZnJhbWVzID0gZnVuY3Rpb24ocnVsZURlZmluaXRpb24pIHtcclxuXHRcdHZhciBrZXlmcmFtZXMgPSBbXTtcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcnVsZURlZmluaXRpb24uY3NzUnVsZXMubGVuZ3RoOyBpICsrKSB7XHJcblx0XHRcdHZhciBrZXlmcmFtZVJ1bGUgPSBydWxlRGVmaW5pdGlvbi5jc3NSdWxlc1tpXTtcclxuXHRcdFx0dmFyIGtleWZyYW1lID0gcGFyc2VSdWxlcyhrZXlmcmFtZVJ1bGUuY3NzVGV4dFxyXG5cdFx0XHRcdC5yZXBsYWNlKGtleWZyYW1lUnVsZS5rZXlUZXh0LCAnJykucmVwbGFjZSgneycsICcnKS5yZXBsYWNlKCd9JywgJycpLnRyaW0oKVxyXG5cdFx0XHQpO1xyXG5cdFx0XHR2YXIgb2Zmc2V0cyA9IChrZXlmcmFtZVJ1bGUua2V5VGV4dCB8fCAnICcpLnNwbGl0KCcsJykubWFwKGtleSA9PiBrZXkgPT09ICdmcm9tJyA/IDAgOiAoa2V5ID09PSAndG8nID8gMSA6IChwYXJzZUludChrZXkpIC8gMTAwKSkpO1xyXG5cdFx0XHRpZiAobm9ybWFsaXplKSB7XHJcblx0XHRcdFx0bm9ybWFsaXplVG9XQUFQSShrZXlmcmFtZSwgWydhbmltYXRpb24tJywgJ3RyYW5zaXRpb24tJ10pO1xyXG5cdFx0XHRcdHdoaWxlKG9mZnNldHMubGVuZ3RoKSB7XHJcblx0XHRcdFx0XHR2YXIgX2tleWZyYW1lID0gX2NvcHlQbGFpbihrZXlmcmFtZSk7XHJcblx0XHRcdFx0XHRfa2V5ZnJhbWUub2Zmc2V0ID0gb2Zmc2V0cy5zaGlmdCgpO1xyXG5cdFx0XHRcdFx0a2V5ZnJhbWVzLnB1c2goX2tleWZyYW1lKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0a2V5ZnJhbWUub2Zmc2V0ID0gb2Zmc2V0cy5sZW5ndGggPiAxID8gb2Zmc2V0cyA6IG9mZnNldHNbMF07XHJcblx0XHRcdFx0a2V5ZnJhbWVzLnB1c2goa2V5ZnJhbWUpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4ga2V5ZnJhbWVzLnNvcnQoKGEsIGIpID0+IGEub2Zmc2V0ID09PSBiLm9mZnNldCA/IDAgOiBhLm9mZnNldCA+IGIub2Zmc2V0ID8gMSA6IC0xKTtcclxuXHR9O1xyXG5cdC8vIEZpbmQga2V5ZnJhbWVzXHJcblx0dmFyIGFsbEtleWZyYW1lcyA9IFtdO1xyXG5cdHN0eWxlc2hlZXRSdWxlQ2FsbGJhY2socnVsZURlZmluaXRpb24gPT4ge1xyXG5cdFx0aWYgKChydWxlRGVmaW5pdGlvbi50eXBlID09PSB3aW5kb3cuQ1NTUnVsZS5LRVlGUkFNRVNfUlVMRSB8fCBydWxlRGVmaW5pdGlvbi50eXBlID09PSB3aW5kb3cuQ1NTUnVsZVt2ZW5kb3JQcmVmaXguYXBpLnRvVXBwZXJDYXNlKCkgKyAnX0tFWUZSQU1FU19SVUxFJ10pXHJcblx0XHQmJiAoX2lzQXJyYXkobmFtZSkgPyBuYW1lIDogW25hbWVdKS5pbmRleE9mKHJ1bGVEZWZpbml0aW9uLm5hbWUpID4gLTEpIHtcclxuXHRcdFx0YWxsS2V5ZnJhbWVzID0gYWxsS2V5ZnJhbWVzLmNvbmNhdChhbGxLZXlmcmFtZXMsIHBhcnNlS2V5ZnJhbWVzKHJ1bGVEZWZpbml0aW9uKSk7XHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fVxyXG5cdH0sIHRydWUvKnJldmVyc2VkKi8pO1xyXG5cdC8vIFNhdmVcclxuXHRzdHlsZXNoZWV0S2V5ZnJhbWVzQ2FjaGVbY2FjaGVLZXldID0gYWxsS2V5ZnJhbWVzO1xyXG5cdHJldHVybiBhbGxLZXlmcmFtZXM7XHJcbn07XHJcblxyXG4vKipcclxuICogTm9ybWFsaXplcyBDU1MgYW5pbWF0aW9uIHByb3BlcnRpZXMgdG8gV0FBUEkgY29tcGF0aWJsZSBwcm9wZXJ0aWVzXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdFx0XHRhbmltYXRpb25Qcm9wc1xyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF1XHRcdHByZWZpeFxyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF1XHRcdG9mZnNldFxyXG4gKlxyXG4gKiBAcmV0dXJuIG51bGxcclxuICovXHJcbmNvbnN0IG5vcm1hbGl6ZVRvV0FBUEkgPSBmdW5jdGlvbihhbmltYXRpb25Qcm9wcywgb2Zmc2V0LCBwcmVmaXggPSAnJykge1xyXG5cdGlmIChfaXNBcnJheShwcmVmaXgpKSB7XHJcblx0XHRwcmVmaXguZm9yRWFjaChwcmVmID0+IG5vcm1hbGl6ZVRvV0FBUEkoYW5pbWF0aW9uUHJvcHMsIHByZWYpKTtcclxuXHRcdHJldHVybjtcclxuXHR9XHJcblx0aWYgKGFuaW1hdGlvblByb3BzW3ByZWZpeCArICd0aW1pbmctZnVuY3Rpb24nXSkge1xyXG5cdFx0YW5pbWF0aW9uUHJvcHMuZWFzaW5nID0gYW5pbWF0aW9uUHJvcHNbcHJlZml4ICsgJ3RpbWluZy1mdW5jdGlvbiddO1xyXG5cdFx0ZGVsZXRlIGFuaW1hdGlvblByb3BzW3ByZWZpeCArICd0aW1pbmctZnVuY3Rpb24nXTtcclxuXHR9XHJcblx0aWYgKGFuaW1hdGlvblByb3BzW3ByZWZpeCArICdmaWxsLW1vZGUnXSkge1xyXG5cdFx0YW5pbWF0aW9uUHJvcHMuZmlsbCA9IGFuaW1hdGlvblByb3BzW3ByZWZpeCArICdmaWxsLW1vZGUnXTtcclxuXHRcdGRlbGV0ZSBhbmltYXRpb25Qcm9wc1twcmVmaXggKyAnZmlsbC1tb2RlJ107XHJcblx0fVxyXG5cdGlmIChhbmltYXRpb25Qcm9wc1twcmVmaXggKyAnaXRlcmF0aW9uLWNvdW50J10pIHtcclxuXHRcdGFuaW1hdGlvblByb3BzLml0ZXJhdGlvbnMgPSBhbmltYXRpb25Qcm9wc1twcmVmaXggKyAnaXRlcmF0aW9uLWNvdW50J107XHJcblx0XHRkZWxldGUgYW5pbWF0aW9uUHJvcHNbcHJlZml4ICsgJ2l0ZXJhdGlvbi1jb3VudCddO1xyXG5cdFx0aWYgKGFuaW1hdGlvblByb3BzLml0ZXJhdGlvbnMgPT09ICdpbmZpbml0ZScpIHtcclxuXHRcdFx0YW5pbWF0aW9uUHJvcHMuaXRlcmF0aW9ucyA9IEluZmluaXR5O1xyXG5cdFx0fVxyXG5cdH1cclxufTtcclxuXHRcclxuLyoqXHJcbiAqIEB2YXIgb2JqZWN0XHJcbiAqL1xyXG5jb25zdCBzdHlsZXNoZWV0S2V5ZnJhbWVzQ2FjaGUgPSB7fTtcclxuIiwiXHJcbi8qKlxyXG4gKiBMb29wcyB0aHJ1IGFsbCBydWxlcyBpbiBhbGwgc3R5bGVzaGVldHMgKGluIHJldmVyc2Ugb3JkZXIgcG9zc2libGUpLlxyXG4gKlxyXG4gKiBAcGFyYW0gZnVuY3Rpb25cdFx0XHRjYWxsYmFja1xyXG4gKiBAcGFyYW0gYm9vbFx0XHRcdFx0cmV2ZXJzZWRcclxuICpcclxuICogQHJldHVybiBOVUxMfGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCByZXZlcnNlZCkge1xyXG5cdHZhciBzdHlsZXNoZWV0cyA9IGRvY3VtZW50LnN0eWxlU2hlZXRzO1xyXG5cdHZhciBzdHlsZXNoZWV0Q2FsbGJhY2sgPSBmdW5jdGlvbihzdHlsZXNoZWV0KSB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRmb3IgKHZhciBrID0gMDsgayA8IHN0eWxlc2hlZXQuY3NzUnVsZXMubGVuZ3RoOyBrICsrKSB7XHJcblx0XHRcdFx0dmFyIHJ1bGVEZWZpbml0aW9uID0gc3R5bGVzaGVldC5jc3NSdWxlc1trXTtcclxuXHRcdFx0XHRpZiAoY2FsbGJhY2socnVsZURlZmluaXRpb24pID09PSB0cnVlKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0gY2F0Y2ggKGUpIHt9XHJcblx0fVxyXG5cdGlmIChyZXZlcnNlZCkge1xyXG5cdFx0Zm9yICh2YXIgaSA9IHN0eWxlc2hlZXRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtLSkge1xyXG5cdFx0XHRpZiAoc3R5bGVzaGVldENhbGxiYWNrKHN0eWxlc2hlZXRzW2ldKSA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSBlbHNlIHtcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzaGVldHMubGVuZ3RoOyBpICsrKSB7XHJcblx0XHRcdGlmIChzdHlsZXNoZWV0Q2FsbGJhY2soc3R5bGVzaGVldHNbaV0pID09PSB0cnVlKSB7XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfZWFjaCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9lYWNoLmpzJztcclxuaW1wb3J0IF9leGNsdWRlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2V4Y2x1ZGUuanMnO1xyXG5pbXBvcnQgX3B1c2hVbmlxdWUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvcHVzaFVuaXF1ZS5qcyc7XHJcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1N0cmluZy5qcyc7XHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzTnVtYmVyIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNOdW1iZXIuanMnO1xyXG5pbXBvcnQgX2lzTnVtZXJpYyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVtZXJpYy5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzRW1wdHkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0VtcHR5LmpzJztcclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVW5kZWZpbmVkLmpzJztcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbmltcG9ydCBjc3NSZWFkIGZyb20gJy4uL2Nzcy9yZWFkLmpzJztcclxuaW1wb3J0IGNzc1dyaXRlIGZyb20gJy4uL2Nzcy93cml0ZS5qcyc7XHJcbmltcG9ydCBjc3NDb21wdXRlQXN5bmMgZnJvbSAnLi4vY3NzL2NvbXB1dGVBc3luYy5qcyc7XHJcbmltcG9ydCBjc3NSZWFkS2V5ZnJhbWVzIGZyb20gJy4uL2Nzcy9yZWFkS2V5ZnJhbWVzLmpzJztcclxuaW1wb3J0IGNzc1ZhclJlYWQgZnJvbSAnLi4vY3NzL3ZhclJlYWQuanMnO1xyXG5pbXBvcnQgY3NzQXV0b3B4IGZyb20gJy4uL2Nzcy9hdXRvcHguanMnO1xyXG5pbXBvcnQgVHJhbnNmb3JtUnVsZSBmcm9tICcuLi9jc3MvVHJhbnNmb3JtUnVsZS5qcyc7XHJcbmltcG9ydCBSZWZsb3cgZnJvbSAnLi4vUmVmbG93LmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIEVsZW1lbnQgdXRpbGl0eSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcblx0XHRcdFxyXG5jb25zdCBBbmltID0gY2xhc3Mge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgYW4gYW1pYXRpb24gZnJvbVxyXG5cdCAqIGFueSBvZiBrZXlmcmFtZXMsIENTUyBrZXlmcmFtZSBuYW1lLCBvciBDU1Mgb2JqZWN0LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIERPTU5vZGVcdFx0XHRcdGVsXHJcblx0ICogQHBhcmFtIGFycmF5fG9iamVjdHxzdHJpbmdcdGVmZmVjdFxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0XHRcdHBhcmFtc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB0aGlzXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoZWwsIGVmZmVjdCwgcGFyYW1zID0ge30pIHtcclxuXHRcdC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG5cdFx0dGhpcy5lbCA9IGVsO1xyXG5cdFx0dGhpcy4kID0ge1xyXG5cdFx0XHRyZWFkeUNhbGxiYWNrczogW10sXHJcblx0XHRcdGZpbmlzaENhbGxiYWNrczogW10sXHJcblx0XHRcdGNhbmNlbENhbGxiYWNrczogW10sXHJcblx0XHRcdHBhcmFtczogcGFyYW1zLFxyXG5cdFx0fTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBOb3JtYWxpemUgcGFyYW1zLi4uXHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0cGFyYW1zLmZpbGwgPSBwYXJhbXMuZmlsbCB8fCAnYm90aCc7XHJcblx0XHRpZiAoISgnZHVyYXRpb24nIGluIHBhcmFtcykpIHtcclxuXHRcdFx0cGFyYW1zLmR1cmF0aW9uID0gNDAwO1xyXG5cdFx0fVxyXG5cdFx0Ly8gQ29udmVydCBjZXJ0YWluIGVhc2luZyBzdHJpbmdzIHRvIGJlaXppZXIgY3VydmVzXHJcblx0XHRpZiAocGFyYW1zLmVhc2luZyAmJiBbJ2Vhc2UtaW4nLCAnZWFzZS1vdXQnLCAnZWFzZS1pbi1vdXQnXS5pbmRleE9mKHBhcmFtcy5lYXNpbmcpID09PSAtMSAmJiBwYXJhbXMuZWFzaW5nLmluZGV4T2YoJygnKSA9PT0gLTEpIHtcclxuXHRcdFx0Ly8gTmF0aXZlIGVhc2luZ3MsIGN1c3RvbSBjdWJpYy1iZXppZXJzLCBvciBEcmFtYXRpYydzIGN1YmljLWJlemllcnNcclxuXHRcdFx0cGFyYW1zLmVhc2luZyA9IGNzc1ZhclJlYWQocGFyYW1zLmVhc2luZykgfHwgcGFyYW1zLmVhc2luZztcclxuXHRcdH1cclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBOb3JtYWxpemUga2V5ZnJhbWVzLi4uXHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0dmFyIGRlc3RydWN0YWJsZXMgPSB7XHJcblx0XHRcdGluc2V0OiBbJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLFxyXG5cdFx0XHRtYXJnaW46IFsndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10sXHJcblx0XHRcdHBhZGRpbmc6IFsndG9wJywgJ3JpZ2h0JywgJ2JvdHRvbScsICdsZWZ0J10sXHJcblx0XHR9O1xyXG5cdFx0Y29uc3QgaW5pdCA9IGtleWZyYW1lcyA9PiB7XHJcblx0XHRcdGtleWZyYW1lcyA9IGtleWZyYW1lcy5zbGljZSgpO1xyXG5cdFx0XHQvLyBNaW5lIG91dCBlbmQtc3RhdGUgcHJvcGVydGllc1xyXG5cdFx0XHR2YXIgZmlyc3RGcmFtZSA9IHt9O1xyXG5cdFx0XHR2YXIgbGFzdEZyYW1lID0ge307XHJcblx0XHRcdF9lYWNoKGtleWZyYW1lcywgKGksIGtleWZyYW1lKSA9PiB7XHJcblx0XHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0XHQvLyBXZSBjYW4gZGVzdHVjdHVyZSB0aGluZ3MgbGlrZSBcImluc2V0XCIoXCJsZWZ0XCIsIFwidG9wXCIsIFwicmlnaHRcIiwgXCJib3R0b21cIiksIGV0Y1xyXG5cdFx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdFx0X2VhY2goZGVzdHJ1Y3RhYmxlcywgKGRlc3RydWN0YWJsZVByb3AsIG1lYW5pbmcpID0+IHtcclxuXHRcdFx0XHRcdGlmIChrZXlmcmFtZVtkZXN0cnVjdGFibGVQcm9wXSkge1xyXG5cdFx0XHRcdFx0XHRpZiAoX2lzT2JqZWN0KGtleWZyYW1lW2Rlc3RydWN0YWJsZVByb3BdKSkge1xyXG5cdFx0XHRcdFx0XHRcdGtleWZyYW1lW2Rlc3RydWN0YWJsZVByb3BdID0gbWVhbmluZy5tYXAoa2V5ID0+IGtleWZyYW1lW2Rlc3RydWN0YWJsZVByb3BdW2tleV0pLmZpbHRlcih2YWwgPT4gIV9pc1VuZGVmaW5lZCh2YWwpKTtcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0XHRpZiAoX2lzQXJyYXkoa2V5ZnJhbWVbZGVzdHJ1Y3RhYmxlUHJvcF0pKSB7XHJcblx0XHRcdFx0XHRcdFx0a2V5ZnJhbWVbZGVzdHJ1Y3RhYmxlUHJvcF0gPSBrZXlmcmFtZVtkZXN0cnVjdGFibGVQcm9wXS5qb2luKCcgJyk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHRcdC8vIFdlIGFjY2VwdCBhbiBvYmplY3QgZm9yIHRoZSBcInRyYW5zZm9ybVwiIHByb3BlcnR5XHJcblx0XHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0XHRpZiAoa2V5ZnJhbWUudHJhbnNmb3JtICYmIF9pc09iamVjdChrZXlmcmFtZS50cmFuc2Zvcm0pICYmICEoa2V5ZnJhbWUudHJhbnNmb3JtIGluc3RhbmNlb2YgVHJhbnNmb3JtUnVsZSkpIHtcclxuXHRcdFx0XHRcdGtleWZyYW1lLnRyYW5zZm9ybSA9IChuZXcgVHJhbnNmb3JtUnVsZShrZXlmcmFtZS50cmFuc2Zvcm0pKS50b1N0cmluZygpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHQvLyBNYXJzaGFsIG91dCBpdHMgcHJvcGVydGllc1xyXG5cdFx0XHRcdF9leGNsdWRlKE9iamVjdC5rZXlzKGtleWZyYW1lKSwgJ29mZnNldCcsICdlYXNpbmcnKS5mb3JFYWNoKHByb3AgPT4ge1xyXG5cdFx0XHRcdFx0Ly8gQXV0by1weFxyXG5cdFx0XHRcdFx0aWYgKGNzc0F1dG9weC5pbmNsdWRlcyhwcm9wKSAmJiBfaXNOdW1lcmljKGtleWZyYW1lW3Byb3BdKSkge1xyXG5cdFx0XHRcdFx0XHRrZXlmcmFtZVtwcm9wXSArPSAncHgnO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0Ly8gU2F2ZSBsYXN0IHNlZW4gdmFsdWUgb2YgdGhpcyBwcm9wZXJ0eVxyXG5cdFx0XHRcdFx0Ly8gYWNyb3NzIGFsbCBrZXlmcmFtZXMuLi5cclxuXHRcdFx0XHRcdGZpcnN0RnJhbWVbcHJvcF0gPSB0eXBlb2YgZmlyc3RGcmFtZVtwcm9wXSA9PT0gJ3VuZGVmaW5lZCcgPyBrZXlmcmFtZVtwcm9wXSA6IGZpcnN0RnJhbWVbcHJvcF07XHJcblx0XHRcdFx0XHRsYXN0RnJhbWVbcHJvcF0gPSBrZXlmcmFtZVtwcm9wXTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdC8vIFRoZSBhbmltYXRpb24uLi5cclxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHR2YXIgYW5pbSA9IHRoaXMuZWwuYW5pbWF0ZShrZXlmcmFtZXMsIHBhcmFtcyk7XHJcblx0XHRcdH0gY2F0Y2goZSkge1xyXG5cdFx0XHRcdHRoaXMuJC5lcnJvciA9IGU7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIFJldmVyc2VcclxuXHRcdFx0aWYgKHBhcmFtcy5yZXZlcnNlKSB7XHJcblx0XHRcdFx0YW5pbS5yZXZlcnNlKCk7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gQSBsaXR0bGUgcG9saWZ5bGxcclxuXHRcdFx0aWYgKCFhbmltLmVmZmVjdCkge1xyXG5cdFx0XHRcdGFuaW0uZWZmZWN0ID0ge307XHJcblx0XHRcdH1cclxuXHRcdFx0aWYgKCFhbmltLmVmZmVjdC5kdXJhdGlvbikge1xyXG5cdFx0XHRcdGFuaW0uZWZmZWN0LmR1cmF0aW9uID0gcGFyYW1zLmR1cmF0aW9uO1xyXG5cdFx0XHR9XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdC8vIFwib25maW5pc2hcIiBhbmQgXCJvbmNhbmNlbFwiIGxpc3RlbmVyXHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdGFuaW0ub25maW5pc2ggPSAoKSA9PiB7XHJcblx0XHRcdFx0Ly8gQXMgZ2V0dGVyLCBhcyBpdCB3ZXJlXHJcblx0XHRcdFx0aWYgKHBhcmFtcy5jYW5jZWxGb3JDc3MpIHtcclxuXHRcdFx0XHRcdGFuaW0uY2FuY2VsKCk7XHJcblx0XHRcdFx0XHRpZiAocGFyYW1zLmZpbGwgPT09ICdmb3J3YXJkcycgfHwgcGFyYW1zLmZpbGwgPT09ICdib3RoJykge1xyXG5cdFx0XHRcdFx0XHRjc3NXcml0ZSh0aGlzLmVsLCBsYXN0RnJhbWUpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR0aGlzLiQuZmluaXNoQ2FsbGJhY2tzLmZvckVhY2goY2FsbGJhY2sgPT4ge1xyXG5cdFx0XHRcdFx0Y2FsbGJhY2sodGhpcy5lbCk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH07XHJcblx0XHRcdC8vIG9uY2FuY2VsIGxpc3RlbmVyXHJcblx0XHRcdGFuaW0ub25jYW5jZWwgPSAoKSA9PiB7XHJcblx0XHRcdFx0Ly8gQXMgZ2V0dGVyLCBhcyBpdCB3ZXJlXHJcblx0XHRcdFx0dGhpcy4kLmNhbmNlbENhbGxiYWNrcy5mb3JFYWNoKGNhbGxiYWNrID0+IHtcclxuXHRcdFx0XHRcdGNhbGxiYWNrKHRoaXMuZWwpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9O1xyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdHRoaXMuJC5hbmltID0gYW5pbTtcclxuXHRcdFx0dGhpcy4kLmZpcnN0RnJhbWUgPSBmaXJzdEZyYW1lO1xyXG5cdFx0XHR0aGlzLiQubGFzdEZyYW1lID0gbGFzdEZyYW1lO1xyXG5cdFx0XHR0aGlzLiQucGFyYW1zID0gcGFyYW1zO1xyXG5cdFx0XHRpZiAodGhpcy4kLnJlYWR5Q2FsbGJhY2tzLmxlbmd0aCkge1xyXG5cdFx0XHRcdHRoaXMuJC5yZWFkeUNhbGxiYWNrcy5mb3JFYWNoKGNhbGxiYWNrID0+IGNhbGxiYWNrKGFuaW0sIHBhcmFtcywgZmlyc3RGcmFtZSwgbGFzdEZyYW1lKSk7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0fTtcclxuXHRcdGlmIChfaXNGdW5jdGlvbihlZmZlY3QpKSB7XHJcblx0XHRcdGVmZmVjdChlbCwgaW5pdCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRBbmltLmNyZWF0ZUNhbGxiYWNrKGVsLCBlZmZlY3QsIGluaXQsIGVycm9yID0+IHtcclxuXHRcdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdFx0dGhpcy4kLmVycm9yID0gZXJyb3I7XHJcblx0XHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHR9KTtcclxuXHRcdH1cclxuXHR9XHJcblx0XHRcclxuXHQvKipcclxuXHQgKiBSZXR1cm5zIHRoZSBhbmltYXRpb24uXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIEFuaW1hdGlvblxyXG5cdCAqL1xyXG5cdGdldCBhbmltKCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuJC5hbmltO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBBbmltYXRpb24tcmVhZHkgY2FsbGJhY2suXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb25cdFx0c3VjY2VzXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uXHRcdGVycm9yXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHRoaXNcclxuXHQgKi9cclxuXHRyZWFkeShzdWNjZXMsIGVycm9yKSB7XHJcblx0XHRpZiAodGhpcy4kLmVycm9yKSB7XHJcblx0XHRcdGlmIChlcnJvcikge1xyXG5cdFx0XHRcdGVycm9yKHRoaXMuJC5lcnJvcik7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSBpZiAodGhpcy4kLmFuaW0pIHtcclxuXHRcdFx0c3VjY2VzKHRoaXMuJC5hbmltLCB0aGlzLiQucGFyYW1zLCB0aGlzLiQuZmlyc3RGcmFtZSwgdGhpcy4kLmxhc3RGcmFtZSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLiQucmVhZHlDYWxsYmFja3MucHVzaChzdWNjZXMpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBCaW5kcyBhIGZ1bmN0aW9uIHRvIHRoZSBcIm9uZmluaXNoXCIgZXZlbnQuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb24gY2FsbGJhY2tcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdGhpc1xyXG5cdCAqXHJcblx0ICovXHJcblx0b25maW5pc2goY2FsbGJhY2spIHtcclxuXHRcdGlmICghX2lzRnVuY3Rpb24oY2FsbGJhY2spKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIk9uZmluaXNoKCkgYWNjZXB0cyBvbmx5IGEgZnVuY3Rpb24uXCIpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy4kLmZpbmlzaENhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBCaW5kcyBhIGZ1bmN0aW9uIHRvIHRoZSBcIm9uY2FuY2VsXCIgZXZlbnQuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb24gY2FsbGJhY2tcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdGhpc1xyXG5cdCAqXHJcblx0ICovXHJcblx0b25jYW5jZWwoY2FsbGJhY2spIHtcclxuXHRcdGlmICghX2lzRnVuY3Rpb24oY2FsbGJhY2spKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIk9uY2FuY2VsKCkgYWNjZXB0cyBvbmx5IGEgZnVuY3Rpb24uXCIpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy4kLmNhbmNlbENhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBSZXR1cm5zIHRoZSBhbmltYXRpb24ncyBwcm9ncmVzcy5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gbnVtYmVyXHJcblx0ICovXHJcblx0cHJvZ3Jlc3MoKSB7XHJcblx0XHRpZiAodGhpcy4kLmFuaW0pIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuJC5hbmltLmN1cnJlbnRUaW1lIC8gdGhpcy4kLmFuaW0uZWZmZWN0LmR1cmF0aW9uO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIDA7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFNlZWtzIHRoZSBhbmltYXRpb24gdG8gYSB0aW1lLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG51bWJlciB0b1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB0aGlzXHJcblx0ICovXHJcblx0c2Vlayh0bykge1xyXG5cdFx0aWYgKCFfaXNOdW1iZXIodG8pKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIlNlZWsoKSBhY2NlcHRzIG9ubHkgYSBudW1lcmljIHZhbHVlLlwiKTtcclxuXHRcdH1cclxuXHRcdHRoaXMucmVhZHkoKGFuaW0sIGVmZmVjdCkgPT4ge1xyXG5cdFx0XHRhbmltLmN1cnJlbnRUaW1lID0gTWF0aC5taW4odG8gKiBlZmZlY3QuZHVyYXRpb24sIGVmZmVjdC5kdXJhdGlvbik7XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUmV2ZXJzZXMgdGhlIGFuaW1hdGlvbi5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdGhpc1xyXG5cdCAqL1xyXG5cdHJldmVyc2UoKSB7XHJcblx0XHR0aGlzLnJlYWR5KGFuaW0gPT4gYW5pbS5yZXZlcnNlKCkpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFBsYXlzIHRoZSBhbmltYXRpb24uXHJcblx0ICogUmV0dXJucyBhbiBcIm9uZmluaXNoXCIgcHJvbWlzZS5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gUHJvbWlzZVxyXG5cdCAqL1xyXG5cdHBsYXkoKSB7XHJcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0XHR0aGlzLnJlYWR5KGFuaW0gPT4ge1xyXG5cdFx0XHRcdGFuaW0ucGxheSgpO1xyXG5cdFx0XHRcdHRoaXMub25maW5pc2goKCkgPT4gcmVzb2x2ZSh0aGlzKSk7XHJcblx0XHRcdFx0dGhpcy5vbmNhbmNlbCgoKSA9PiByZWplY3QodGhpcykpO1xyXG5cdFx0XHR9LCByZWplY3QpO1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFBhdXNlcyB0aGUgYW5pbWF0aW9uLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiB0aGlzXHJcblx0ICovXHJcblx0cGF1c2UoKSB7XHJcblx0XHR0aGlzLnJlYWR5KGFuaW0gPT4gYW5pbS5wYXVzZSgpKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBGaW5pc2hlcyB0aGUgYW5pbWF0aW9uLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiB0aGlzXHJcblx0ICovXHJcblx0ZmluaXNoKCkge1xyXG5cdFx0dGhpcy5yZWFkeShhbmltID0+IGFuaW0uZmluaXNoKCkpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIENhbmNlbHMgdGhlIGFuaW1hdGlvbi5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdGhpc1xyXG5cdCAqL1xyXG5cdGNhbmNlbCgpIHtcclxuXHRcdHRoaXMucmVhZHkoYW5pbSA9PiBhbmltLmNhbmNlbCgpKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBSZXNvbHZlcyB0aGUgZ2l2ZW4gZWZmZWN0IGludG8gdmFsaWQga2V5ZnJhbWVzLlxyXG5cdCAqXHJcblx0ICogRWZmZWN0IGNhbiBiZSBDU1MgYW5pbWF0aW9uIG5hbWUsXHJcblx0ICogb3IgYW4gb2JqZWN0IG9mIENTUyBwcm9wZXJ0aWVzIHRoYXQgcmVwcmVzZW50IHRoZSBlbmQga2V5ZnJhbWUuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gRE9NTm9kZVx0XHRcdFx0ZWxcclxuXHQgKiBAcGFyYW0gYXJyYXl8b2JqZWN0fHN0cmluZ1x0ZWZmZWN0XHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uXHRcdFx0XHRyZWFkeVxyXG5cdCAqIEBwYXJhbSBmdW5jdGlvblx0XHRcdFx0ZXJyb3JcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdHN0YXRpYyBjcmVhdGVDYWxsYmFjayhlbCwgZWZmZWN0LCByZWFkeSwgZXJyb3IpIHtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBSZXNvbHZlIGZpcnN0RnJhbWUgZnJvbSBjdXJyZW50IHN0YXRlP1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdHZhciBpc09iamVjdEFuZE9ubHlMYXN0S2V5ZnJhbWUgPSBfaXNPYmplY3QoZWZmZWN0KSAmJiAhT2JqZWN0LnZhbHVlcyhlZmZlY3QpLmZpbHRlcih2ID0+IF9pc0FycmF5KHYpKS5sZW5ndGg7XHJcblx0XHR2YXIgaXNBcnJheUJ1dEVtcHR5Rmlyc3RLZXlmcmFtZSA9IF9pc0FycmF5KGVmZmVjdCkgJiYgZWZmZWN0Lmxlbmd0aCA+IDEgJiYgX2lzRW1wdHkoZWZmZWN0WzBdKTtcclxuXHRcdGlmIChpc09iamVjdEFuZE9ubHlMYXN0S2V5ZnJhbWUgfHwgaXNBcnJheUJ1dEVtcHR5Rmlyc3RLZXlmcmFtZSkge1xyXG5cdFx0XHQvLyBHZXQgZmlyc3Qga2V5ZnJhbWUgZnJvbSBjdXJyZW50IHN0YXRlXHJcblx0XHRcdFJlZmxvdy5vbnJlYWQoKCkgPT4ge1xyXG5cdFx0XHRcdGlmIChpc0FycmF5QnV0RW1wdHlGaXJzdEtleWZyYW1lKSB7XHJcblx0XHRcdFx0XHRlZmZlY3Quc2hpZnQoKTtcclxuXHRcdFx0XHRcdEFuaW0uY3JlYXRlQ2FsbGJhY2soZWwsIFtjc3NSZWFkKGVsLCBPYmplY3Qua2V5cyhlZmZlY3RbMF0pKSwgLi4uZWZmZWN0XSwgcmVhZHksIGVycm9yKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0QW5pbS5jcmVhdGVDYWxsYmFjayhlbCwgW2Nzc1JlYWQoZWwsIE9iamVjdC5rZXlzKGVmZmVjdCkpLCBlZmZlY3RdLCByZWFkeSwgZXJyb3IpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBDcmVhdGUga2V5ZnJhbWVzIGZyb20gQ1NTIGFuaW1hdGlvbiBuYW1lLi4uXHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0aWYgKF9pc1N0cmluZyhlZmZlY3QpKSB7XHJcblx0XHRcdC8vIFJldHJpZXZlIGtleWZyYW1lcyBvZiB0aGUgZ2l2ZW4gYW5pbWF0aW9uIG5hbWUgZnJvbSBjc3NcclxuXHRcdFx0dmFyIGFuaW1hdGlvbk5hbWUgPSBlZmZlY3Q7XHJcblx0XHRcdGVmZmVjdCA9IGNzc1JlYWRLZXlmcmFtZXMoYW5pbWF0aW9uTmFtZSk7XHJcblx0XHRcdGlmICghZWZmZWN0Lmxlbmd0aCAmJiBlcnJvcikge1xyXG5cdFx0XHRcdGVycm9yKCdBbmltYXRpb24gbmFtZSBcIicgKyBhbmltYXRpb25OYW1lICsgJ1wiIG5vdCBmb3VuZCBpbiBhbnkgc3R5bGVzaGVldCEnKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdC8vIFJlc29sdmUgYXV0byBwaXhlbHMuLi5cclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRpZiAoX2lzQXJyYXkoZWZmZWN0KSkge1xyXG5cdFx0XHR2YXIga2V5ZnJhbWVzV2l0aEF1dG9TaXplcyA9IFtdO1xyXG5cdFx0XHRfZWFjaChlZmZlY3QsIChpLCBrZXlmcmFtZSkgPT4ge1xyXG5cdFx0XHRcdC8vIFdlIGNhbiBhbmltYXRlIHRvIGF1dG8gd2lkdGggYW5kIGhlaWdodFxyXG5cdFx0XHRcdGlmIChrZXlmcmFtZS5oZWlnaHQgPT09ICdhdXRvJykge1xyXG5cdFx0XHRcdFx0X3B1c2hVbmlxdWUoa2V5ZnJhbWVzV2l0aEF1dG9TaXplcywgaSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmIChrZXlmcmFtZS53aWR0aCA9PT0gJ2F1dG8nKSB7XHJcblx0XHRcdFx0XHRfcHVzaFVuaXF1ZShrZXlmcmFtZXNXaXRoQXV0b1NpemVzLCBpKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRpZiAoa2V5ZnJhbWVzV2l0aEF1dG9TaXplcy5sZW5ndGgpIHtcclxuXHRcdFx0XHQvLyBhcHBseSgpIHdpbGwgYmUgY2FsbGVkIHdoZW4gcmVhZHlcclxuXHRcdFx0XHQvLyBXZSByZXR1cm4gY3NzQ29tcHV0ZUFzeW5jKCksIHdoaWNoIGluIGl0c2VsZiByZXR1cm5zIHRoZSByZXR1cm4gb2YgYXBwbHkoKVxyXG5cdFx0XHRcdGNzc0NvbXB1dGVBc3luYyhlbCwge3dpZHRoOidhdXRvJywgaGVpZ2h0OidhdXRvJ30sIGVsID0+IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKS50aGVuKHJlc3VsdCA9PiB7XHJcblx0XHRcdFx0XHRrZXlmcmFtZXNXaXRoQXV0b1NpemVzLmZvckVhY2goaSA9PiB7XHJcblx0XHRcdFx0XHRcdGlmIChlZmZlY3RbaV0ud2lkdGggPT09ICdhdXRvJykge1xyXG5cdFx0XHRcdFx0XHRcdGVmZmVjdFtpXS53aWR0aCA9IHJlc3VsdC53aWR0aCArICdweCc7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0aWYgKGVmZmVjdFtpXS5oZWlnaHQgPT09ICdhdXRvJykge1xyXG5cdFx0XHRcdFx0XHRcdGVmZmVjdFtpXS5oZWlnaHQgPSByZXN1bHQuaGVpZ2h0ICsgJ3B4JztcclxuXHRcdFx0XHRcdFx0fVxyXG5cdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRyZWFkeShlZmZlY3QpO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdC8vIFJldHVybiByZXN1bHQuLi5cclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBXZSByZXR1cm4gdGhlIHJldHVybiBvZiBzdWNjZXNzKClcclxuXHRcdHJlYWR5KGVmZmVjdCk7XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IEFuaW07IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9mcm9tQ2FtZWwgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvZnJvbUNhbWVsLmpzJztcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHByZXNldCBlYXNpbmcgZnVuY3Rpb25zIGZyb20gQ1NTIHZhcmlhYmxlcy5cclxuICpcclxuICogQHBhcmFtIHN0cmluZyBcdG5hbWVcclxuICpcclxuICogQHJldHVybiBzdHJpbmd8TlVMTFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xyXG5cdHZhciBuYW1lID0gIW5hbWUuaW5kZXhPZignLScpID8gX2Zyb21DYW1lbChuYW1lLCAnLScpIDogbmFtZTtcclxuXHRyZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuYm9keSkuZ2V0UHJvcGVydHlWYWx1ZSgnLS0nICsgbmFtZSk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICcuLi9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc0Z1bmN0aW9uIGZyb20gJy4uL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuLi9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2FyckZyb20gZnJvbSAnLi4vYXJyL2Zyb20uanMnO1xyXG5cclxuLyoqXHJcbiAqIEZpbmRzIGEgdmFsdWUgaW4gYW4gYXJyYXkvb2JqZWN0IGFuZCByZXR1cm5zIHRoZSBrZXkgKG9yIHBhdGggd2hlbiBmb3VuZCBkZWVwKS5cclxuICpcclxuICogQHBhcmFtIGFycmF5fW9iamVjdCBcdG9ialxyXG4gKiBAcGFyYW0gZnVuY3Rpb25cdFx0Y2FsbGJhY2tcclxuICogQHBhcmFtIGJvb2xcdFx0XHRkZWVwXHJcbiAqXHJcbiAqIEByZXR1cm4gbnVtYmVyfHN0cmluZ3xhcnJheVxyXG4gKi9cclxuY29uc3QgX2ZpbmQgPSBmdW5jdGlvbihvYmosIGNhbGxiYWNrLCBkZWVwID0gZmFsc2UpIHtcclxuXHR2YXIga2V5cyA9IG51bGw7XHJcblx0dmFyIHZhbHVlcyA9IG9iajtcclxuXHRpZiAoIV9pc0FycmF5KG9iaikpIHtcclxuXHRcdGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xyXG5cdFx0dmFsdWVzID0gT2JqZWN0LnZhbHVlcyhvYmopO1xyXG5cdH1cclxuXHR2YXIgc3ViS2V5ID0gdW5kZWZpbmVkO1xyXG5cdHZhciB2YWx1ZSA9IHZhbHVlcy5yZWR1Y2UoKHByZXYsIGN1cnIpID0+IHtcclxuXHRcdGlmIChzdWJLZXkgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRpZiAoY2FsbGJhY2soY3VyciwgcHJldikpIHtcclxuXHRcdFx0XHRyZXR1cm4gY3VycjtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoZGVlcCAmJiAoX2lzVHlwZU9iamVjdChjdXJyKSB8fCBfaXNGdW5jdGlvbihjdXJyKSkgJiYgKHN1YktleSA9IF9maW5kKGN1cnIsIGNhbGxiYWNrLCBkZWVwKSkgIT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHRcdHJldHVybiBjdXJyO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcHJldjtcclxuXHR9LCB1bmRlZmluZWQpO1xyXG5cdGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcblx0XHR2YXIga2V5ID0ga2V5cyA/IGtleXNbdmFsdWVzLmluZGV4T2YodmFsdWUpXSA6IHZhbHVlcy5pbmRleE9mKHZhbHVlKTtcclxuXHRcdHJldHVybiBzdWJLZXkgIT09IHVuZGVmaW5lZCA/IFtrZXldLmNvbmNhdChfYXJyRnJvbShzdWJLZXkpKSA6IGtleTtcclxuXHR9XHJcbn07XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IF9maW5kOyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfb2JqRnJvbSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9mcm9tLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogQ3VzdG9tIGV2ZW50c1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICpcclxuICogQHZhciBvYmplY3RcclxuICovXHRcdFx0XHRcclxuY29uc3QgQ3VzdG9tRXZlbnRzID0ge307XHJcblxyXG4vKipcclxuICogTXVsdGl0YXAgZXZlbnRzXHJcbiAqL1xyXG5jb25zdCBNdWx0aXRhcCA9IHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBCaW5kcyBhbGwgbXVsdGl0YXAgZXZlbnRzLlxyXG5cdCAqL1xyXG5cdHNldHVwKGVsLCBldmVudE5hbWUsIGZpcmVDYWxsYmFjaywgaGFtbWVydGltZSkge1xyXG5cdFx0dmFyIGFsbFNldHVwID0gdHJ1ZTtcclxuXHRcdHZhciByZWNvZ25pemVycyA9IE11bHRpdGFwLmV2ZW50cy5tYXAoKHRhcFR5cGUsIGkpID0+IHtcclxuXHRcdFx0dmFyIHJlY29nbml6ZXIgPSBoYW1tZXJ0aW1lLmdldCh0YXBUeXBlKTtcclxuXHRcdFx0aWYgKCFyZWNvZ25pemVyKSB7XHJcblx0XHRcdFx0YWxsU2V0dXAgPSBmYWxzZTtcclxuXHRcdFx0XHRyZWNvZ25pemVyID0gbmV3IEhhbW1lci5UYXAoe1xyXG5cdFx0XHRcdFx0ZXZlbnQ6IHRhcFR5cGUsXHJcblx0XHRcdFx0XHR0YXBzOiBNdWx0aXRhcC5ldmVudHMubGVuZ3RoIC0gaSxcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRoYW1tZXJ0aW1lLmFkZChyZWNvZ25pemVyKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm4gcmVjb2duaXplcjtcclxuXHRcdH0pO1xyXG5cdFx0aWYgKCFhbGxTZXR1cCkge1xyXG5cdFx0XHQvLyBGcm9tIGxlZnQgdG8gcmlnaHQsIHJlY29nbml6ZVdpdGggYWxsIG90aGVycyBhaGVhZFxyXG5cdFx0XHR2YXIgcmVjZ3pyLCByZWNnenJzID0gcmVjb2duaXplcnMuc2xpY2UoKTtcclxuXHRcdFx0d2hpbGUoKHJlY2d6ciA9IHJlY2d6cnMuc2hpZnQoKSkgJiYgcmVjZ3pycy5sZW5ndGgpIHtcclxuXHRcdFx0XHRyZWNnenIucmVjb2duaXplV2l0aChyZWNnenJzKTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBGcm9tIHJpZ2h0IHRvIGxlZnQsIHJlY29nbml6ZVdpdGggYWxsIG90aGVycyBiZWhpbmRcclxuXHRcdFx0dmFyIHJlY2d6cjIsIHJlY2d6cnMyID0gcmVjb2duaXplcnMuc2xpY2UoKTtcclxuXHRcdFx0d2hpbGUoKHJlY2d6cjIgPSByZWNnenJzMi5wb3AoKSkgJiYgcmVjZ3pyczIubGVuZ3RoKSB7XHJcblx0XHRcdFx0cmVjZ3pyMi5yZXF1aXJlRmFpbHVyZShyZWNnenJzMik7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHRcdGhhbW1lcnRpbWUub24oZXZlbnROYW1lLCBmaXJlQ2FsbGJhY2spO1xyXG5cdH0sXHJcblx0XHJcblx0LyoqXHJcblx0ICogVW5iaW5kcyBhbGwgbXVsdGl0YXAgZXZlbnRzLlxyXG5cdCAqL1xyXG5cdHRlYXJkb3duKGVsLCBldmVudE5hbWUsIGhhbW1lcnRpbWUpIHtcclxuXHRcdGhhbW1lcnRpbWUub2ZmKGV2ZW50TmFtZSk7XHJcblx0fSxcclxuXHRcclxuXHQvKipcclxuXHQgKiBOb3cgYWRkaXRpb25hbCB0YXBzIGlzIGFjaGlldmVkIGJ5XHJcblx0ICogc2ltcGx5IHByZXBlbmRpbmcgdG8gdGhpcyBhcnJheS5cclxuXHQgKi9cclxuXHRldmVudHM6IFsndHJpcGxldGFwJywgJ2RvdWJsZXRhcCcsICdzaW5nbGV0YXAnXSxcclxufTtcclxuLy8gQWRkIGFsbCB0byBDdXN0b21FdmVudHNcclxuTXVsdGl0YXAuZXZlbnRzLmZvckVhY2goZXZlbnQgPT4ge1xyXG5cdEN1c3RvbUV2ZW50c1tldmVudF0gPSBNdWx0aXRhcDtcclxufSk7XHJcblxyXG4vKipcclxuICogQGV4cG9ydHNcclxuICovXHJcbmV4cG9ydCB7XHJcblx0TXVsdGl0YXBcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgQ3VzdG9tRXZlbnRzOyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBFdmVudCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9yZWZsZXgvc3JjL2ludGVybmFsL0V2ZW50LmpzJztcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgRXZlbnQ7IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IExpc3RlbmVyIGZyb20gJ0B3ZWItbmF0aXZlLWpzL3JlZmxleC9zcmMvaW50ZXJuYWwvTGlzdGVuZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBMaXN0ZW5lcjsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX0xpc3RlbmVyQmFzZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9yZWZsZXgvc3JjL2ludGVybmFsL0xpc3RlbmVyQmFzZS5qcyc7XHJcbmltcG9ydCBfdG9UaXRsZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci90b1RpdGxlLmpzJztcclxuaW1wb3J0IF9hcnJGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Zyb20uanMnO1xyXG5pbXBvcnQgX2ZpbmQgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZmluZC5qcyc7XHJcbmltcG9ydCBfaXNTdHJpbmcgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc1N0cmluZy5qcyc7XHJcbmltcG9ydCBfaXNGdW5jdGlvbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5pbXBvcnQgQ3VzdG9tRXZlbnRzIGZyb20gJy4vQ3VzdG9tRXZlbnRzLmpzJztcclxuaW1wb3J0IFVzZXJFdmVudCBmcm9tICcuL1VzZXJFdmVudC5qcyc7XHJcbmltcG9ydCBMaXN0ZW5lciBmcm9tICcuL0xpc3RlbmVyLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIExpc3RlbmVyQmFzZSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHRcdFx0XHRcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGlzdGVuZXJCYXNlIGV4dGVuZHMgX0xpc3RlbmVyQmFzZSB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIENvbnN0cnVjdHMgYSBuZXcgb2JzZXJ2YWJsZSBhbmQgcmV0dXJucyBhIHByb3h5IHdyYXBwZXIuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gSFRNTEVsZW1lbnRcdFx0XHRlbFxyXG5cdCAqXHJcblx0ICogQHJldHVybiB0aGlzXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoZWwpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHR0aGlzLmVsID0gZWw7XHJcblx0XHR0aGlzLmhhbmRsZXJzTGlzdCA9IHt9O1xyXG5cdFx0dGhpcy5oYW1tZXJ0aW1lID0gbmV3IEhhbW1lci5NYW5hZ2VyKHRoaXMuZWwpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogU2V0cyB1cCBhbiBldmVudCB0eXBlIHdoZW4gaXRzIGZpcnN0IGxpc3RlbmVyIGlzIGFkZGVkLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZyBUWVBFIFxyXG5cdCAqIEBwYXJhbSBvYmplY3QgcGFyYW1zIFxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0X3NldHVwKFRZUEUsIHBhcmFtcykge1xyXG5cdFx0Ly8gV2UgcmVnaXN0ZXIgYW4gZXZlbnQgb25seSBvbmNlLlxyXG5cdFx0aWYgKHRoaXMuaGFuZGxlcnNMaXN0W1RZUEVdKSB7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdGlmIChDdXN0b21FdmVudHNbVFlQRV0pIHtcclxuXHRcdFx0aWYgKF9pc1N0cmluZyhDdXN0b21FdmVudHNbVFlQRV0pKSB7XHJcblx0XHRcdFx0Ly8gPj4gTElOSyBUSEUgQUxJQVMgRVZFTlQgVE8gVEhJUyBGSVJFQkFTRVxyXG5cdFx0XHRcdHRoaXMuaGFuZGxlcnNMaXN0W1RZUEVdID0gZSA9PiB0aGlzLmZpcmUobmV3IFVzZXJFdmVudCh0aGlzLmVsLCB7dHlwZTpUWVBFLCBlfSkpO1xyXG5cdFx0XHRcdHRoaXMuYWRkRmlyZWFibGUobmV3IExpc3RlbmVyKHRoaXMuaGFuZGxlcnNMaXN0W1RZUEVdLCBDdXN0b21FdmVudHNbVFlQRV0pKTtcclxuXHRcdFx0fSBlbHNlIGlmIChfaXNGdW5jdGlvbihDdXN0b21FdmVudHNbVFlQRV0uc2V0dXApKSB7XHJcblx0XHRcdFx0Ly8gPj4gTElOSyBUSEUgQ1VTVE9NIEVWRU5UIFRPIFRISVMgRklSRUJBU0VcclxuXHRcdFx0XHR0aGlzLmhhbmRsZXJzTGlzdFtUWVBFXSA9IHRydWU7XHJcblx0XHRcdFx0Q3VzdG9tRXZlbnRzW1RZUEVdLnNldHVwKHRoaXMuZWwsIFRZUEUsIGUgPT4ge1xyXG5cdFx0XHRcdFx0aWYgKCFfaXNGdW5jdGlvbihDdXN0b21FdmVudHNbVFlQRV0udmFsaWRhdGUpIFxyXG5cdFx0XHRcdFx0fHwgQ3VzdG9tRXZlbnRzW1RZUEVdLnZhbGlkYXRlKGUsIHBhcmFtcykpIHtcclxuXHRcdFx0XHRcdFx0dGhpcy5maXJlKG5ldyBVc2VyRXZlbnQodGhpcy5lbCwge3R5cGU6VFlQRSwgZX0pKVxyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0sIHRoaXMuaGFtbWVydGltZSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdUaGUgXCInICsgVFlQRSArICdcIiBldmVudCBob29rIG11c3QgaGF2ZSBhIFwic2V0dXBcIiBmdW5jdGlvbiEnKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIGlmIChyZWNvZ25pemVHZXN0dXJlKFRZUEUuc3BsaXQoJysnKVswXSkpIHtcclxuXHRcdFx0Ly8gTGV0cyB3b3JrIGFzIGlmIGlmIGFsd2F5cyBhIGxpc3RcclxuXHRcdFx0dmFyIHJlY29nbml6ZXJzID0gVFlQRS5zcGxpdCgnKycpLm1hcChnZXN0dXJlTmFtZSA9PiB7XHJcblx0XHRcdFx0dmFyIG1haW5HZXN0dXJlTmFtZSA9IHJlY29nbml6ZUdlc3R1cmUoZ2VzdHVyZU5hbWUpO1xyXG5cdFx0XHRcdHZhciByZWNvZ25pemVyID0gdGhpcy5oYW1tZXJ0aW1lLmdldChtYWluR2VzdHVyZU5hbWUpO1xyXG5cdFx0XHRcdGlmICghcmVjb2duaXplcikge1xyXG5cdFx0XHRcdFx0cmVjb2duaXplciA9IG5ldyBIYW1tZXJbX3RvVGl0bGUobWFpbkdlc3R1cmVOYW1lKV07XHJcblx0XHRcdFx0XHR0aGlzLmhhbW1lcnRpbWUuYWRkKHJlY29nbml6ZXIpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHRyZXR1cm4gcmVjb2duaXplcjtcclxuXHRcdFx0fSk7XHJcblx0XHRcdC8vIEZyb20gcmlnaHQgdG8gbGVmdCwgcmVjb2duaXplV2l0aCBhbGwgb3RoZXJzIGFoZWFkXHJcblx0XHRcdHJlY29nbml6ZXJzLmZvckVhY2goKHJlY29nbml6ZXIsIGkpID0+IHtcclxuXHRcdFx0XHRyZWNvZ25pemVyLnJlY29nbml6ZVdpdGgocmVjb2duaXplcnMuc2xpY2UoaSArIDEpKTtcclxuXHRcdFx0fSk7XHJcblx0XHRcdC8vID4+IExJTksgVEhFIEhBTU1FUiBFVkVOVCBUTyBUSElTIEZJUkVCQVNFXHJcblx0XHRcdHRoaXMuaGFuZGxlcnNMaXN0W1RZUEVdID0gZSA9PiB0aGlzLmZpcmUobmV3IFVzZXJFdmVudCh0aGlzLmVsLCB7dHlwZTpUWVBFLCBlfSkpO1xyXG5cdFx0XHR0aGlzLmhhbW1lcnRpbWUub24oVFlQRS5zcGxpdCgnKycpLmpvaW4oJyAnKSwgdGhpcy5oYW5kbGVyc0xpc3RbVFlQRV0pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0Ly8gPj4gTElOSyBUSEUgRE9NIEVWRU5UIFRPIFRISVMgRklSRUJBU0VcclxuXHRcdFx0dGhpcy5oYW5kbGVyc0xpc3RbVFlQRV0gPSBlID0+IHRoaXMuZmlyZShuZXcgVXNlckV2ZW50KHRoaXMuZWwsIHt0eXBlOlRZUEUsIGV9KSk7XHJcblx0XHRcdHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcihUWVBFLCB0aGlzLmhhbmRsZXJzTGlzdFtUWVBFXSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBUZWFycyBkb3duIGFuIGV2ZW50IHR5cGUgd2hlbiBpdHMgbGFzdCBsaXN0ZW5lciBpcyByZW1vdmVkLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZyBUWVBFIFxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0X3RlYXJkb3duKFRZUEUpIHtcclxuXHRcdC8vIFdlIHJlZ2lzdGVyIGFuIGV2ZW50IG9ubHkgb25jZS5cclxuXHRcdGlmICghdGhpcy5oYW5kbGVyc0xpc3RbVFlQRV0pIHtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0aWYgKEN1c3RvbUV2ZW50c1tUWVBFXSkge1xyXG5cdFx0XHRpZiAoX2lzU3RyaW5nKEN1c3RvbUV2ZW50c1tUWVBFXSkpIHtcclxuXHRcdFx0XHQvLyBMZXZlbDEgY3VzdG9tIGV2ZW50XHJcblx0XHRcdFx0cmVtb3ZlTGlzdGVuZXIodGhpcy5lbCwgQ3VzdG9tRXZlbnRzW1RZUEVdLCB0aGlzLmhhbmRsZXJzTGlzdFtUWVBFXSk7XHJcblx0XHRcdH0gZWxzZSBpZiAoX2lzRnVuY3Rpb24oQ3VzdG9tRXZlbnRzW1RZUEVdLnRlYXJkb3duKSkge1xyXG5cdFx0XHRcdC8vIExldmVsMiBjdXN0b20gZXZlbnQuIFdlIHN1cHBseSB0aGUgdGhpcy51bm9ic2VydmUgbWV0aG9kIGluY2FzZSBpdCdsbCBiZSBuZWVkZWQuXHJcblx0XHRcdFx0Q3VzdG9tRXZlbnRzW1RZUEVdLnRlYXJkb3duKHRoaXMuZWwsIFRZUEUsIHRoaXMuaGFtbWVydGltZSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdUaGUgXCInICsgVFlQRSArICdcIiBldmVudCBob29rIG11c3QgaGF2ZSBhIFwidGVhcmRvd25cIiBmdW5jdGlvbiEnKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBlbHNlIGlmIChyZWNvZ25pemVHZXN0dXJlKFRZUEUuc3BsaXQoJysnKVswXSkpIHtcclxuXHRcdFx0dGhpcy5oYW1tZXJ0aW1lLm9mZihUWVBFLnNwbGl0KCcrJykuam9pbignICcpLCB0aGlzLmhhbmRsZXJzTGlzdFtUWVBFXSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQvLyBOYXRpdmUgZXZlbnRcclxuXHRcdFx0dGhpcy5lbC5yZW1vdmVFdmVudExpc3RlbmVyKFRZUEUsIHRoaXMuaGFuZGxlcnNMaXN0W1RZUEVdKTtcclxuXHRcdH1cclxuXHRcdGRlbGV0ZSB0aGlzLmhhbmRsZXJzTGlzdFtUWVBFXTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQHNlZSBzdXBlci5hZGRGaXJlYWJsZSgpXHJcblx0ICpcclxuXHQgKiBDYXB0dXJlcyB0aGUgcGFyYW1zIGJlaW5nIG9ic2VydmVkIGFuZCBzZXRzIHVwIHRoZWlyIGhvb2tzXHJcblx0ICogd2hlbiB0aGVpciBmaXJzdCBsaXN0ZW5lciBqdXN0IGdldHMgYWRkZWQuXHJcblx0ICovXHJcblx0YWRkRmlyZWFibGUoZmlyZWFibGUpIHtcclxuXHRcdHN1cGVyLmFkZEZpcmVhYmxlKGZpcmVhYmxlKTtcclxuXHRcdHRoaXMuX3NldHVwKGZpcmVhYmxlLnBhcmFtcy50eXBlLCBmaXJlYWJsZS5wYXJhbXMpO1xyXG5cdFx0cmV0dXJuIGZpcmVhYmxlO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRzdGF0aWMgY3JlYXRlRm9yVGFyZ2V0KG9iamVjdCkge1xyXG5cdFx0cmV0dXJuIHN1cGVyLmNyZWF0ZUZvclRhcmdldChvYmplY3QsIExpc3RlbmVyQmFzZSk7XHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEZpbmRzIHRoZSByZWNvZ25pemVyIGZvciBhIGdlc3R1cmVOYW1lLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyaW5nXHRnZXN0dXJlTmFtZVxyXG4gKlxyXG4gKiBAcmV0dXJuIHN0cmluZ1xyXG4gKi9cclxuY29uc3QgcmVjb2duaXplR2VzdHVyZSA9IGZ1bmN0aW9uKGdlc3R1cmVOYW1lKSB7XHJcblx0cmV0dXJuIF9maW5kKGdlc3R1cmVJbmRleCwgbGlzdCA9PiBsaXN0LmluY2x1ZGVzKGdlc3R1cmVOYW1lKSwgZmFsc2UvKmRlZXAqLyk7XHJcbn07XHJcblxyXG4vKipcclxuICogR2VzdHVyZSByZWZlcmVuY2UuXHJcbiAqL1xyXG5jb25zdCBnZXN0dXJlSW5kZXggPSB7XHJcblx0cHJlc3M6IFx0WydwcmVzcycsICdwcmVzc3VwJyxdLCBcclxuXHRyb3RhdGU6XHRbJ3JvdGF0ZScsICdyb3RhdGVzdGFydCcsICdyb3RhdGVtb3ZlJywgJ3JvdGF0ZWVuZCcsICdyb3RhdGVjYW5jZWwnLF0sXHJcblx0cGluY2g6IFx0WydwaW5jaCcsICdwaW5jaHN0YXJ0JywgJ3BpbmNobW92ZScsICdwaW5jaGVuZCcsICdwaW5jaGNhbmNlbCcsICdwaW5jaGluJywgJ3BpbmNob3V0JyxdLCBcclxuXHRwYW46IFx0WydwYW4nLCAncGFuc3RhcnQnLCAncGFubW92ZScsICdwYW5lbmQnLCAncGFuY2FuY2VsJywgJ3BhbmxlZnQnLCAncGFucmlnaHQnLCAncGFudXAnLCAncGFuZG93bicsXSxcclxuXHRzd2lwZTogXHRbJ3N3aXBlJywgJ3N3aXBlbGVmdCcsICdzd2lwZXJpZ2h0JywgJ3N3aXBldXAnLCAnc3dpcGVkb3duJyxdLFxyXG5cdHRhcDogXHRbJ3RhcCcsXSxcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IExpc3RlbmVyQmFzZSBmcm9tICcuL0xpc3RlbmVyQmFzZS5qcyc7XHJcbmltcG9ydCBMaXN0ZW5lciBmcm9tICcuL0xpc3RlbmVyLmpzJztcclxuXHJcbi8qKlxyXG4gKiBCaW5kcyBsaXN0ZW5lcnMgdG8gYW4gZWxlbWVudCdzIGV2ZW50IGNvbnRyb2xsZXIuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheXxvYmplY3QgXHRcdFx0b2JqZWN0XHJcbiAqIEBwYXJhbSBzdHJpbmdcdFx0IFx0XHR0eXBlXHJcbiAqIEBwYXJhbSBmdW5jdGlvblx0XHQgXHRcdGNhbGxiYWNrXHJcbiAqXHJcbiAqIEByZXR1cm4gb2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvYmplY3QsIHR5cGUsIGNhbGxiYWNrKSB7XHJcblx0dmFyIGZpcmViYXNlO1xyXG5cdGlmICghKGZpcmViYXNlID0gTGlzdGVuZXJCYXNlLmdldEZvclRhcmdldChvYmplY3QpKSkge1xyXG5cdFx0ZmlyZWJhc2UgPSBMaXN0ZW5lckJhc2UuY3JlYXRlRm9yVGFyZ2V0KG9iamVjdCk7XHJcblx0fVxyXG5cdHJldHVybiBmaXJlYmFzZS5hZGRGaXJlYWJsZShuZXcgTGlzdGVuZXIoY2FsbGJhY2ssIHt0eXBlfSkpO1xyXG59OyIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBvZmYgZnJvbSAnQHdlYi1uYXRpdmUtanMvcmVmbGV4L3NyYy9vZmYuanMnO1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBvZmY7IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IHRyaWdnZXIgZnJvbSAnQHdlYi1uYXRpdmUtanMvcmVmbGV4L3NyYy90cmlnZ2VyLmpzJztcclxuXHJcbi8qKlxyXG4gKiBAZXhwb3J0c1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgdHJpZ2dlcjsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX0NodG1sIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NodG1sJztcclxuaW1wb3J0IF9yZW1vdmUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvcmVtb3ZlLmpzJztcclxuaW1wb3J0IF9pc1VuZGVmaW5lZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzVW5kZWZpbmVkLmpzJztcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5pbXBvcnQgZG9tRmluZCBmcm9tICcuL2RvbS9maW5kLmpzJztcclxuaW1wb3J0IGRvbURhdGEgZnJvbSAnLi9kb20vZGF0YS5qcyc7XHJcbmltcG9ydCBkb21BdHRyIGZyb20gJy4vZG9tL2F0dHIuanMnO1xyXG5pbXBvcnQgZG9tQXR0ckFzeW5jIGZyb20gJy4vZG9tL2F0dHJBc3luYy5qcyc7XHJcbmltcG9ydCBkb21IdG1sIGZyb20gJy4vZG9tL2h0bWwuanMnO1xyXG5pbXBvcnQgZG9tSHRtbEFzeW5jIGZyb20gJy4vZG9tL2h0bWxBc3luYy5qcyc7XHJcbmltcG9ydCBkb21UZXh0IGZyb20gJy4vZG9tL3RleHQuanMnO1xyXG5pbXBvcnQgZG9tVGV4dEFzeW5jIGZyb20gJy4vZG9tL3RleHRBc3luYy5qcyc7XHJcbmltcG9ydCBkb21BcHBlbmQgZnJvbSAnLi9kb20vYXBwZW5kLmpzJztcclxuaW1wb3J0IGRvbUFwcGVuZEFzeW5jIGZyb20gJy4vZG9tL2FwcGVuZEFzeW5jLmpzJztcclxuaW1wb3J0IGRvbVByZXBlbmQgZnJvbSAnLi9kb20vcHJlcGVuZC5qcyc7XHJcbmltcG9ydCBkb21QcmVwZW5kQXN5bmMgZnJvbSAnLi9kb20vcHJlcGVuZEFzeW5jLmpzJztcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5pbXBvcnQgY3NzIGZyb20gJy4vY3NzL2Nzcy5qcyc7XHJcbmltcG9ydCBjc3NBc3luYyBmcm9tICcuL2Nzcy9jc3NBc3luYy5qcyc7XHJcbmltcG9ydCBjc3NDb21wdXRlQXN5bmMgZnJvbSAnLi9jc3MvY29tcHV0ZUFzeW5jLmpzJztcclxuaW1wb3J0IGNzc1RyYW5zYWN0aW9uIGZyb20gJy4vY3NzL3RyYW5zYWN0aW9uLmpzJztcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5pbXBvcnQgdWlUcmFuc2xhdGVUbyBmcm9tICcuL3VpL3RyYW5zbGF0ZVRvLmpzJztcclxuaW1wb3J0IHVpT2Zmc2V0VG8gZnJvbSAnLi91aS9vZmZzZXRUby5qcyc7XHJcbmltcG9ydCB1aVNjcm9sbFRvIGZyb20gJy4vdWkvc2Nyb2xsVG8uanMnO1xyXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbmltcG9ydCBBbmltIGZyb20gJy4vYW5pbS9BbmltLmpzJztcclxuaW1wb3J0IFJlZmxvdyBmcm9tICcuL1JlZmxvdy5qcyc7XHJcbmltcG9ydCBvbiBmcm9tICcuL2V2dC9vbi5qcyc7XHJcbmltcG9ydCBvZmYgZnJvbSAnLi9ldnQvb2ZmLmpzJztcclxuaW1wb3J0IHRyaWdnZXIgZnJvbSAnLi9ldnQvdHJpZ2dlci5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIENodG1sIGxpYnJhcnkuXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2h0bWwgZXh0ZW5kcyBfQ2h0bWwge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIE92ZXJyaWRlcyB0aGUgU3RhdGljIHBhcmFtdGVyIGluIHN1cGVyLmZyb20oKSB3aXRoIHNlbGYuXHJcblx0ICpcclxuXHQgKiBAc2VlIHN1cGVyLmZyb20oKVxyXG5cdCAqL1xyXG5cdHN0YXRpYyBmcm9tKGlucHV0LCBwYXJhbXMgPSB7fSwgU3RhdGljID0gQ2h0bWwpIHtcclxuXHRcdHJldHVybiBzdXBlci5mcm9tKGlucHV0LCBwYXJhbXMsIFN0YXRpYyk7XHJcblx0fVxyXG5cclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHJcblx0LyoqXHJcblx0ICogQ3JlYXRlcyBhbiBpbnN0YW5jZSBvdmVyIGFuIGVsZW1lbnQuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gSFRNTEVsZW1lbnRcdFx0XHRlbFxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0XHRcdHBhcmFtc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB0aGlzXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoZWwsIHBhcmFtcykge1xyXG5cdFx0c3VwZXIoZWwsIHBhcmFtcyk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFN0cmF0ZWdpY2FsbHkgcmV0dXJucyBhIEhUTUxFbGVtZW50LlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBIVE1MRWxlbWVudFxyXG5cdCAqL1xyXG5cdF9fZWwoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lbCB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQXV0b21hdGljYWxseSByZXR1cm5zIHRoZSBjdXJyZW50IGluc3RhbmNlIGluIHBsYWNlXHJcblx0ICogb2YgdGhlIGVsZW1lbnQuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gbWl4ZWRcdFx0XHRcdFx0cmV0XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG1peGVkXHJcblx0ICovXHJcblx0X19yZXQocmV0KSB7XHJcblx0XHRyZXR1cm4gdGhpcy5lbCAmJiByZXQgPT09IHRoaXMuZWwgPyB0aGlzIDogcmV0O1xyXG5cdH1cclxuXHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFF1ZXJpZXMgdGhlIGN1cnJlbnQgZWxlbWVudC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmcgXHRcdFx0XHRzZWxlY3RvclxyXG5cdCAqXHJcblx0ICogQHJldHVybiBET01Ob2RlTGlzdFxyXG5cdCAqL1xyXG5cdGZpbmQoc2VsZWN0b3IpIHtcclxuXHRcdHJldHVybiBuZXcgQ2h0bWwodGhpcy5lbCA/IGRvbUZpbmQoc2VsZWN0b3IsIHRoaXMuZWwpIDogdW5kZWZpbmVkKTtcclxuXHR9XHJcblxyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAc2VlIGRvbURhdGFcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gbWl4ZWR8dGhpc1xyXG5cdCAqL1xyXG5cdGRhdGEocmVxdWVzdE9yUGF5bG9hZCwgdmFsID0gbnVsbCkge1xyXG5cdFx0Ly8gVGhlIC4uLmFyZ3VtZW50cyBpcyBpbXBvcnRhbnQgYXMgdGhlXHJcblx0XHQvLyBkb21EYXRhIGZ1bmN0aW9uIGlzIHNlbnNpdGl2ZSB0byBhcmd1bWVudCBjb3VudFxyXG5cdFx0cmV0dXJuIHRoaXMuX19yZXQoZG9tRGF0YSh0aGlzLl9fZWwoKSwgLi4uYXJndW1lbnRzKSk7XHJcblx0fVxyXG5cclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHJcblx0LyoqXHJcblx0ICogQHNlZSBjc3NcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gbWl4ZWRcclxuXHQgKi9cclxuXHRjc3NTeW5jKC4uLmFyZ3MpIHtcclxuXHRcdC8vIFRoZSAuLi5hcmd1bWVudHMgaXMgaW1wb3J0YW50IGFzIHRoZVxyXG5cdFx0Ly8gY3NzIGZ1bmN0aW9uIGlzIHNlbnNpdGl2ZSB0byBhcmd1bWVudCBjb3VudFxyXG5cdFx0cmV0dXJuIHRoaXMuX19yZXQoY3NzKHRoaXMuX19lbCgpLCAuLi5hcmd1bWVudHMpKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQHNlZSB0aGlzLmF0dHJTeW5jKClcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gbWl4ZWRcclxuXHQgKi9cclxuXHRjbGFzc1N5bmMoLi4uYXJncykge1xyXG5cdFx0Ly8gVGhlIC4uLmFyZ3VtZW50cyBpcyBpbXBvcnRhbnQgYXMgdGhlXHJcblx0XHQvLyB0aGlzLmF0dHJTeW5jKCkgZnVuY3Rpb24gaXMgc2Vuc2l0aXZlIHRvIGFyZ3VtZW50IGNvdW50XHJcblx0XHRyZXR1cm4gdGhpcy5hdHRyU3luYygnY2xhc3MnLCAuLi5hcmd1bWVudHMpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAc2VlIGRvbUF0dHJcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gc3RyaW5nfHRoaXNcclxuXHQgKi9cclxuXHRhdHRyU3luYyhyZXF1ZXN0T3JQYXlsb2FkLCB2YWxPck11dGF0aW9uID0gbnVsbCwgc3ViVmFsTXV0YXRpb24gPSBudWxsKSB7XHJcblx0XHQvLyBUaGUgLi4uYXJndW1lbnRzIGlzIGltcG9ydGFudCBhcyB0aGVcclxuXHRcdC8vIGRvbUF0dHIgZnVuY3Rpb24gaXMgc2Vuc2l0aXZlIHRvIGFyZ3VtZW50IGNvdW50XHJcblx0XHRyZXR1cm4gdGhpcy5fX3JldChkb21BdHRyKHRoaXMuX19lbCgpLCAuLi5hcmd1bWVudHMpKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQHNlZSBkb21IdG1sXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHN0cmluZ3x0aGlzXHJcblx0ICovXHJcblx0aHRtbFN5bmMoY29udGVudCA9IG51bGwpIHtcclxuXHRcdC8vIFRoZSAuLi5hcmd1bWVudHMgaXMgaW1wb3J0YW50IGFzIHRoZVxyXG5cdFx0Ly8gZG9tSHRtbCBmdW5jdGlvbiBpcyBzZW5zaXRpdmUgdG8gYXJndW1lbnQgY291bnRcclxuXHRcdHJldHVybiB0aGlzLl9fcmV0KGRvbUh0bWwodGhpcy5fX2VsKCksIC4uLmFyZ3VtZW50cykpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAc2VlIGRvbVRleHRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gc3RyaW5nfHRoaXNcclxuXHQgKi9cclxuXHR0ZXh0U3luYyhjb250ZW50ID0gbnVsbCkge1xyXG5cdFx0Ly8gVGhlIC4uLmFyZ3VtZW50cyBpcyBpbXBvcnRhbnQgYXMgdGhlXHJcblx0XHQvLyBkb21UZXh0IGZ1bmN0aW9uIGlzIHNlbnNpdGl2ZSB0byBhcmd1bWVudCBjb3VudFxyXG5cdFx0cmV0dXJuIHRoaXMuX19yZXQoZG9tVGV4dCh0aGlzLl9fZWwoKSwgLi4uYXJndW1lbnRzKSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBzZWUgZG9tQXBwZW5kXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHN0cmluZ3x0aGlzXHJcblx0ICovXHJcblx0YXBwZW5kU3luYyhjb250ZW50KSB7XHJcblx0XHRyZXR1cm4gdGhpcy5fX3JldChkb21BcHBlbmQodGhpcy5fX2VsKCksIGNvbnRlbnQpKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQHNlZSBkb21QcmVwZW5kXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHN0cmluZ3x0aGlzXHJcblx0ICovXHJcblx0cHJlcGVuZFN5bmMoY29udGVudCkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX19yZXQoZG9tUHJlcGVuZCh0aGlzLl9fZWwoKSwgY29udGVudCkpO1xyXG5cdH1cclxuXHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBzZWUgY3NzQXN5bmNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gUHJvbWlzZVxyXG5cdCAqL1xyXG5cdGNzcyguLi5hcmdzKSB7XHJcblx0XHQvLyBUaGUgLi4uYXJndW1lbnRzIGlzIGltcG9ydGFudCBhcyB0aGVcclxuXHRcdC8vIGNzc0FzeW5jIGZ1bmN0aW9uIGlzIHNlbnNpdGl2ZSB0byBhcmd1bWVudCBjb3VudFxyXG5cdFx0cmV0dXJuIGNzc0FzeW5jKHRoaXMuX19lbCgpLCAuLi5hcmd1bWVudHMpLnRoZW4ocmV0ID0+IHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWwgJiYgcmV0ID09PSB0aGlzLmVsID8gdGhpcyA6IHJldDtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAc2VlIHRoaXMuYXR0cigpXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG1peGVkXHJcblx0ICovXHJcblx0Y2xhc3MoLi4uYXJncykge1xyXG5cdFx0Ly8gVGhlIC4uLmFyZ3VtZW50cyBpcyBpbXBvcnRhbnQgYXMgdGhlXHJcblx0XHQvLyB0aGlzLmF0dHIoKSBmdW5jdGlvbiBpcyBzZW5zaXRpdmUgdG8gYXJndW1lbnQgY291bnRcclxuXHRcdHJldHVybiB0aGlzLmF0dHIoJ2NsYXNzJywgLi4uYXJndW1lbnRzKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQHNlZSBkb21BdHRyQXN5bmNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gUHJvbWlzZVxyXG5cdCAqL1xyXG5cdGF0dHIocmVxdWVzdE9yUGF5bG9hZCwgdmFsT3JNdXRhdGlvbiA9IG51bGwsIHN1YlZhbE11dGF0aW9uID0gbnVsbCkge1xyXG5cdFx0Ly8gVGhlIC4uLmFyZ3VtZW50cyBpcyBpbXBvcnRhbnQgYXMgdGhlXHJcblx0XHQvLyBkb21BdHRyQXN5bmMgZnVuY3Rpb24gaXMgc2Vuc2l0aXZlIHRvIGFyZ3VtZW50IGNvdW50XHJcblx0XHRyZXR1cm4gZG9tQXR0ckFzeW5jKHRoaXMuX19lbCgpLCAuLi5hcmd1bWVudHMpLnRoZW4ocmV0ID0+IHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZWwgJiYgcmV0ID09PSB0aGlzLmVsID8gdGhpcyA6IHJldDtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBAc2VlIGRvbUh0bWxBc3luY1xyXG5cdCAqXHJcblx0ICogQHJldHVybiBQcm9taXNlXHJcblx0ICovXHJcblx0aHRtbChjb250ZW50KSB7XHJcblx0XHQvLyBUaGUgLi4uYXJndW1lbnRzIGlzIGltcG9ydGFudCBhcyB0aGVcclxuXHRcdC8vIGRvbUh0bWxBc3luYyBmdW5jdGlvbiBpcyBzZW5zaXRpdmUgdG8gYXJndW1lbnQgY291bnRcclxuXHRcdHJldHVybiBkb21IdG1sQXN5bmModGhpcy5fX2VsKCksIC4uLmFyZ3VtZW50cykudGhlbihyZXQgPT4ge1xyXG5cdFx0XHRyZXR1cm4gdGhpcy5lbCAmJiByZXQgPT09IHRoaXMuZWwgPyB0aGlzIDogcmV0O1xyXG5cdFx0fSk7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBzZWUgZG9tVGV4dEFzeW5jXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIFByb21pc2VcclxuXHQgKi9cclxuXHR0ZXh0KGNvbnRlbnQpIHtcclxuXHRcdC8vIFRoZSAuLi5hcmd1bWVudHMgaXMgaW1wb3J0YW50IGFzIHRoZVxyXG5cdFx0Ly8gZG9tVGV4dEFzeW5jIGZ1bmN0aW9uIGlzIHNlbnNpdGl2ZSB0byBhcmd1bWVudCBjb3VudFxyXG5cdFx0cmV0dXJuIGRvbVRleHRBc3luYyh0aGlzLl9fZWwoKSwgLi4uYXJndW1lbnRzKS50aGVuKHJldCA9PiB7XHJcblx0XHRcdHJldHVybiB0aGlzLmVsICYmIHJldCA9PT0gdGhpcy5lbCA/IHRoaXMgOiByZXQ7XHJcblx0XHR9KTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQHNlZSBkb21BcHBlbmRBc3luY1xyXG5cdCAqXHJcblx0ICogQHJldHVybiBQcm9taXNlXHJcblx0ICovXHJcblx0YXBwZW5kKGNvbnRlbnQpIHtcclxuXHRcdHJldHVybiBkb21BcHBlbmRBc3luYyh0aGlzLl9fZWwoKSwgLi4uYXJndW1lbnRzKS50aGVuKCgpID0+IHtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9KTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQHNlZSBkb21QcmVwZW5kQXN5bmNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gUHJvbWlzZVxyXG5cdCAqL1xyXG5cdHByZXBlbmQoY29udGVudCkge1xyXG5cdFx0cmV0dXJuIGRvbVByZXBlbmRBc3luYyh0aGlzLl9fZWwoKSwgLi4uYXJndW1lbnRzKS50aGVuKCgpID0+IHtcclxuXHRcdFx0cmV0dXJuIHRoaXM7XHJcblx0XHR9KTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQHNlZSBjc3NDb21wdXRlQXN5bmNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gUHJvbWlzZVxyXG5cdCAqL1xyXG5cdGNzc0NvbXB1dGUoLi4uYXJncykge1xyXG5cdFx0Ly8gVGhlIC4uLmFyZ3VtZW50cyBpcyBpbXBvcnRhbnQgYXMgdGhlXHJcblx0XHQvLyBjc3NDb21wdXRlQXN5bmMgZnVuY3Rpb24gaXMgc2Vuc2l0aXZlIHRvIGFyZ3VtZW50IGNvdW50XHJcblx0XHRyZXR1cm4gY3NzQ29tcHV0ZUFzeW5jKHRoaXMuX19lbCgpLCAuLi5hcmd1bWVudHMpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBFc3RhYmxpc2hlcyBhIENTUyBvcGVyYXRpb20gdGhhdCBjYW4gYmUgcm9sbGVkYmFjayB3aXRob3V0IGFsdGVyaW5nIHNpbWlsYXIgb3BlcmF0aW9uIGJ5IG90aGVyIGNvZGUuXHJcblx0ICogSWYgYSBjYWxsYmFjayBpcyBwcm92aWRlZCwgaXQgc3luY2VzIHRoZSBlbnRpcmUgb3BlcmF0aW9uIHdpdGggUmVmbG93J3Mgbm9ybWFsIHJlYWQvd3JpdGUgY3ljbGVzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZ3xhcnJheVx0XHRcdHByb3BzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIFRyYW5zYWN0aW9uXHJcblx0ICovXHJcblx0Y3NzVHJhbnNhY3Rpb24ocHJvcHMpIHtcclxuXHRcdHJldHVybiBjc3NUcmFuc2FjdGlvbih0aGlzLl9fZWwoKSwgcHJvcHMpO1xyXG5cdH1cclxuXHJcblx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBzZWUgb25cclxuXHQgKi9cclxuXHRvbiguLi5hcmdzKSB7XHJcblx0XHQvLyBUaGUgLi4uYXJndW1lbnRzIGlzIGltcG9ydGFudCBhcyB0aGVcclxuXHRcdC8vIG9uIGZ1bmN0aW9uIGlzIHNlbnNpdGl2ZSB0byBhcmd1bWVudCBjb3VudFxyXG5cdFx0cmV0dXJuIG9uKHRoaXMuX19lbCgpLCAuLi5hcmdzKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQHNlZSBvZmZcclxuXHQgKi9cclxuXHRvZmYoLi4uYXJncykge1xyXG5cdFx0Ly8gVGhlIC4uLmFyZ3VtZW50cyBpcyBpbXBvcnRhbnQgYXMgdGhlXHJcblx0XHQvLyBvZmYgZnVuY3Rpb24gaXMgc2Vuc2l0aXZlIHRvIGFyZ3VtZW50IGNvdW50XHJcblx0XHRyZXR1cm4gb2ZmKHRoaXMuX19lbCgpLCAuLi5hcmdzKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogQHNlZSB0cmlnZ2VyXHJcblx0ICovXHJcblx0dHJpZ2dlciguLi5hcmdzKSB7XHJcblx0XHRyZXR1cm4gdHJpZ2dlcih0aGlzLl9fZWwoKSwgLi4uYXJncyk7XHJcblx0fVxyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIGFuZCBwbGF5cyBhbiBhbWlhdGlvbi5cclxuXHQgKiBAc2VlIEFuaW1hdGlvblxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGFycmF5fG9iamVjdHxzdHJpbmdcdGVmZmVjdFxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0XHRcdHBhcmFtc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiBQcm9taXNlXHJcblx0ICovXHJcblx0cGxheShlZmZlY3QsIHBhcmFtcyA9IHt9KSB7XHJcblx0XHRpZiAoISgnY2FuY2VsRm9yQ3NzJyBpbiBwYXJhbXMpKSB7XHJcblx0XHRcdHBhcmFtcy5jYW5jZWxGb3JDc3MgPSB0cnVlO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIChuZXcgQW5pbSh0aGlzLl9fZWwoKSwgZWZmZWN0LCBwYXJhbXMpKS5wbGF5KCkudGhlbigoKSA9PiB0aGlzKTtcclxuXHR9XHJcblxyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcclxuXHQvKipcclxuXHQgKiBUcmFuc2xhdGVzIGFuIGVsZW1lbnQgdG8gYSByZWZlcmVuY2UgcG9pbnQgaW4gdGhlIFVJLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIEhUTUxFbGVtZW50fEV2ZW50fHdpbmRvd3xDaHRtbCBcdHJlZmVyZW5jZVxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0XHRcdFx0XHRcdG9wdGlvbnNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gUHJvbWlzZVxyXG5cdCAqL1xyXG5cdHRyYW5zbGF0ZVRvKHJlZmVyZW5jZSwgb3B0aW9ucyA9IHt9KSB7XHJcblx0XHR2YXIgcmVmUG9pbnQgPSByZWZlcmVuY2UgaW5zdGFuY2VvZiBDaHRtbCA/IHJlZmVyZW5jZS5lbCA6IHJlZmVyZW5jZTtcclxuXHRcdHJldHVybiBSZWZsb3cub25yZWFkKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdFx0aWYgKCF0aGlzLmVsKSB7XHJcblx0XHRcdFx0cmV0dXJuIHJlamVjdCgpO1xyXG5cdFx0XHR9XHJcblx0XHRcdHZhciB0cmFucyA9IHVpVHJhbnNsYXRlVG8odGhpcy5lbCwgcmVmUG9pbnQsIG9wdGlvbnMpO1xyXG5cdFx0XHRpZiAob3B0aW9ucy5wbGF5KSB7XHJcblx0XHRcdFx0cmVzb2x2ZSh0aGlzLnBsYXkoW1xyXG5cdFx0XHRcdFx0e3RyYW5zZm9ybTogdHJhbnMuY3VycmVudC5mcm9tfSxcclxuXHRcdFx0XHRcdHt0cmFuc2Zvcm06IHRyYW5zLnRvfSxcclxuXHRcdFx0XHRdLCBvcHRpb25zLnBsYXkpKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXNvbHZlKHRoaXMuY3NzKHt0cmFuc2Zvcm06IHRyYW5zLnRvfSkpO1xyXG5cdFx0XHR9XHJcblx0XHR9LCB0cnVlLyp3aXRoUHJvbWlzZSovKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogT2Zmc2V0cyBhbiBlbGVtZW50IHRvIGEgcmVmZXJlbmNlIHBvaW50IGluIHRoZSBVSS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBIVE1MRWxlbWVudHxFdmVudHx3aW5kb3d8Q2h0bWwgXHRyZWZlcmVuY2VcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdFx0XHRcdFx0XHRvcHRpb25zXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIFByb21pc2VcclxuXHQgKi9cclxuXHRvZmZzZXRUbyhyZWZlcmVuY2UsIG9wdGlvbnMgPSB7fSkge1xyXG5cdFx0dmFyIHJlZlBvaW50ID0gcmVmZXJlbmNlIGluc3RhbmNlb2YgQ2h0bWwgPyByZWZlcmVuY2UuZWwgOiByZWZlcmVuY2U7XHJcblx0XHRyZXR1cm4gUmVmbG93Lm9ucmVhZCgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRcdGlmICghdGhpcy5lbCkge1xyXG5cdFx0XHRcdHJldHVybiByZWplY3QoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgdHJhbnMgPSB1aU9mZnNldFRvKHRoaXMuZWwsIHJlZlBvaW50LCBvcHRpb25zKTtcclxuXHRcdFx0aWYgKG9wdGlvbnMucGxheSkge1xyXG5cdFx0XHRcdHJlc29sdmUodGhpcy5wbGF5KFt0cmFucy5jdXJyZW50LmZyb20sIHRyYW5zLnRvXSwgb3B0aW9ucy5wbGF5KSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmVzb2x2ZSh0aGlzLmNzcyh0cmFucy50bykpO1xyXG5cdFx0XHR9XHJcblx0XHR9LCB0cnVlLyp3aXRoUHJvbWlzZSovKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogU2Nyb2xscyBhbiBlbGVtZW50IHRvIGEgcmVmZXJlbmNlIHBvaW50IGluIHRoZSBVSS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBIVE1MRWxlbWVudHxFdmVudHx3aW5kb3d8Q2h0bWwgXHRyZWZlcmVuY2VcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdFx0XHRcdFx0XHRvcHRpb25zXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIFByb21pc2VcclxuXHQgKi9cclxuXHRzY3JvbGxUbyhyZWZlcmVuY2UsIG9wdGlvbnMgPSB7fSkge1xyXG5cdFx0dmFyIHJlZlBvaW50ID0gcmVmZXJlbmNlIGluc3RhbmNlb2YgQ2h0bWwgPyByZWZlcmVuY2UuZWwgOiByZWZlcmVuY2U7XHJcblx0XHRyZXR1cm4gUmVmbG93Lm9ucmVhZCgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRcdGlmICghdGhpcy5lbCkge1xyXG5cdFx0XHRcdHJldHVybiByZWplY3QoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgdHJhbnMgPSB1aVNjcm9sbFRvKHRoaXMuZWwsIHJlZlBvaW50LCBvcHRpb25zKTtcclxuXHRcdFx0aWYgKG9wdGlvbnMucGxheSkge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKCdzY3JvbGxUbygpIGRvZXMgbm90IGN1cnJlbnRseSBzdXBwb3J0IGFuaW1hdGlvbi4nKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXNvbHZlKHRyYW5zLnZpZXdwb3J0LnNjcm9sbFRvKHRyYW5zLnRvLnNjcm9sbExlZnQsIHRyYW5zLnRvLnNjcm9sbFRvcCkpO1xyXG5cdFx0fSwgdHJ1ZS8qd2l0aFByb21pc2UqLyk7XHJcblx0fVxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzU3RyaW5nIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNTdHJpbmcuanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgY3NzUmVhZCBmcm9tICcuL3JlYWQuanMnO1xyXG5pbXBvcnQgY3NzV3JpdGUgZnJvbSAnLi93cml0ZS5qcyc7XHJcblxyXG4vKipcclxuICogVGhlIGNzc1JlYWQoKSBhbmQgY3NzV3JpdGUoKSBmdW5jdGlvbiBpbiBvbmUgc2lnbmF0dXJlLlxyXG4gKlxyXG4gKiBAcGFyYW0gSFRNTEVsZW1lbnRcdFx0ZWxcclxuICogQHBhcmFtIGFycmF5XHRcdFx0XHQuLi5hcmdzXHJcbiAqXHJcbiAqIEByZXR1cm4gbWl4ZWRcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVsLCAuLi5hcmdzKSB7XHJcblx0aWYgKChhcmdzLmxlbmd0aCA+IDEgJiYgX2lzU3RyaW5nKGFyZ3NbMF0pKSB8fCBfaXNPYmplY3QoYXJnc1swXSkpIHtcclxuXHRcdHJldHVybiBjc3NXcml0ZShlbCwgLi4uYXJncyk7XHJcblx0fVxyXG5cdHJldHVybiBjc3NSZWFkKGVsLCAuLi5hcmdzKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc1N0cmluZyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzU3RyaW5nLmpzJztcclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzT2JqZWN0LmpzJztcclxuaW1wb3J0IGNzc1JlYWRBc3luYyBmcm9tICcuL3JlYWRBc3luYy5qcyc7XHJcbmltcG9ydCBjc3NXcml0ZUFzeW5jIGZyb20gJy4vd3JpdGVBc3luYy5qcyc7XHJcblxyXG4vKipcclxuICogVGhlIGFzeW5jIHR5cGUgb2YgY3NzKCkuXHJcbiAqXHJcbiAqIEBzZWUgY3NzKClcclxuICpcclxuICogQHJldHVybiBQcm9taXNlXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihlbCwgLi4uYXJncykge1xyXG5cdGlmICgoYXJncy5sZW5ndGggPiAxICYmIF9pc1N0cmluZyhhcmdzWzBdKSkgfHwgX2lzT2JqZWN0KGFyZ3NbMF0pKSB7XHJcblx0XHRyZXR1cm4gY3NzV3JpdGVBc3luYyhlbCwgLi4uYXJncyk7XHJcblx0fVxyXG5cdHJldHVybiBjc3NSZWFkQXN5bmMoZWwsIC4uLmFyZ3MpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgUmVmbG93IGZyb20gJy4uL1JlZmxvdy5qcyc7XHJcbmltcG9ydCBkb21BdHRyIGZyb20gJy4vYXR0ci5qcyc7XHJcblxyXG4vKipcclxuICogVGhlIGFzeW5jIHR5cGUgb2YgZG9tQXR0cigpLlxyXG4gKlxyXG4gKiBAc2VlIGRvbUF0dHIoKVxyXG4gKlxyXG4gKiBAcmV0dXJuIFByb21pc2VcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVsLCByZXF1ZXN0T3JQYXlsb2FkLCB2YWxPck11dGF0aW9uID0gbnVsbCwgc3ViVmFsTXV0YXRpb24gPSBudWxsKSB7XHJcblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcclxuXHRcdHJldHVybiBSZWZsb3cub253cml0ZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0cmVzb2x2ZShkb21BdHRyKC4uLmFyZ3VtZW50cykpO1xyXG5cdFx0XHR9IGNhdGNoKGUpIHtcclxuXHRcdFx0XHRyZWplY3QoZSk7XHJcblx0XHRcdH1cclxuXHRcdH0sIHRydWUvKndpdGhQcm9taXNlKi8pO1xyXG5cdH1cclxuXHRyZXR1cm4gUmVmbG93Lm9ucmVhZCgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRyZXNvbHZlKGRvbUF0dHIoLi4uYXJndW1lbnRzKSk7XHJcblx0XHR9IGNhdGNoKGUpIHtcclxuXHRcdFx0cmVqZWN0KGUpO1xyXG5cdFx0fVxyXG5cdH0sIHRydWUvKndpdGhQcm9taXNlKi8pO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgUmVmbG93IGZyb20gJy4uL1JlZmxvdy5qcyc7XHJcbmltcG9ydCBkb21IdG1sIGZyb20gJy4vaHRtbC5qcyc7XHJcblxyXG4vKipcclxuICogVGhlIGFzeW5jIHR5cGUgb2YgZG9tSHRtbCgpLlxyXG4gKlxyXG4gKiBAc2VlIGRvbUh0bWwoKVxyXG4gKlxyXG4gKiBAcmV0dXJuIFByb21pc2VcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVsLCB3cml0ZSA9IG51bGwpIHtcclxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcclxuXHRcdHJldHVybiBSZWZsb3cub253cml0ZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0cmVzb2x2ZShkb21IdG1sKC4uLmFyZ3VtZW50cykpO1xyXG5cdFx0XHR9IGNhdGNoKGUpIHtcclxuXHRcdFx0XHRyZWplY3QoZSk7XHJcblx0XHRcdH1cclxuXHRcdH0sIHRydWUvKndpdGhQcm9taXNlKi8pO1xyXG5cdH1cclxuXHRyZXR1cm4gUmVmbG93Lm9ucmVhZCgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRyZXNvbHZlKGRvbUh0bWwoLi4uYXJndW1lbnRzKSk7XHJcblx0XHR9IGNhdGNoKGUpIHtcclxuXHRcdFx0cmVqZWN0KGUpO1xyXG5cdFx0fVxyXG5cdH0sIHRydWUvKndpdGhQcm9taXNlKi8pO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgUmVmbG93IGZyb20gJy4uL1JlZmxvdy5qcyc7XHJcbmltcG9ydCBkb21UZXh0IGZyb20gJy4vdGV4dC5qcyc7XHJcblxyXG4vKipcclxuICogVGhlIGFzeW5jIHR5cGUgb2YgZG9tVGV4dCgpLlxyXG4gKlxyXG4gKiBAc2VlIGRvbVRleHQoKVxyXG4gKlxyXG4gKiBAcmV0dXJuIFByb21pc2VcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVsLCB3cml0ZSA9IG51bGwpIHtcclxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcclxuXHRcdHJldHVybiBSZWZsb3cub253cml0ZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0cmVzb2x2ZShkb21UZXh0KC4uLmFyZ3VtZW50cykpO1xyXG5cdFx0XHR9IGNhdGNoKGUpIHtcclxuXHRcdFx0XHRyZWplY3QoZSk7XHJcblx0XHRcdH1cclxuXHRcdH0sIHRydWUvKndpdGhQcm9taXNlKi8pO1xyXG5cdH1cclxuXHRyZXR1cm4gUmVmbG93Lm9ucmVhZCgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRyZXNvbHZlKGRvbVRleHQoLi4uYXJndW1lbnRzKSk7XHJcblx0XHR9IGNhdGNoKGUpIHtcclxuXHRcdFx0cmVqZWN0KGUpO1xyXG5cdFx0fVxyXG5cdH0sIHRydWUvKndpdGhQcm9taXNlKi8pO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgUmVmbG93IGZyb20gJy4uL1JlZmxvdy5qcyc7XHJcbmltcG9ydCBkb21BcHBlbmQgZnJvbSAnLi9hcHBlbmQuanMnO1xyXG5cclxuLyoqXHJcbiAqIFRoZSBhc3luYyB0eXBlIG9mIGRvbUFwcGVuZCgpLlxyXG4gKlxyXG4gKiBAc2VlIGRvbUFwcGVuZCgpXHJcbiAqXHJcbiAqIEByZXR1cm4gUHJvbWlzZVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZWwsIHdyaXRlKSB7XHJcblx0cmV0dXJuIFJlZmxvdy5vbndyaXRlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdHRyeSB7XHJcblx0XHRcdHJlc29sdmUoZG9tQXBwZW5kKC4uLmFyZ3VtZW50cykpO1xyXG5cdFx0fSBjYXRjaChlKSB7XHJcblx0XHRcdHJlamVjdChlKTtcclxuXHRcdH1cclxuXHR9LCB0cnVlLyp3aXRoUHJvbWlzZSovKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IFJlZmxvdyBmcm9tICcuLi9SZWZsb3cuanMnO1xyXG5pbXBvcnQgZG9tUHJlcGVuZCBmcm9tICcuL3ByZXBlbmQuanMnO1xyXG5cclxuLyoqXHJcbiAqIFRoZSBhc3luYyB0eXBlIG9mIGRvbVByZXBlbmQoKS5cclxuICpcclxuICogQHNlZSBkb21BcHBlbmQoKVxyXG4gKlxyXG4gKiBAcmV0dXJuIFByb21pc2VcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVsLCB3cml0ZSkge1xyXG5cdHJldHVybiBSZWZsb3cub253cml0ZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcblx0XHR0cnkge1xyXG5cdFx0XHRyZXNvbHZlKGRvbVByZXBlbmQoLi4uYXJndW1lbnRzKSk7XHJcblx0XHR9IGNhdGNoKGUpIHtcclxuXHRcdFx0cmVqZWN0KGUpO1xyXG5cdFx0fVxyXG5cdH0sIHRydWUvKndpdGhQcm9taXNlKi8pO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgY3NzUmVhZElubGluZSBmcm9tICcuL3JlYWRJbmxpbmUuanMnO1xyXG5pbXBvcnQgY3NzV3JpdGVBc3luYyBmcm9tICcuL3dyaXRlQXN5bmMuanMnO1xyXG5pbXBvcnQgVHJhbnNhY3Rpb24gZnJvbSAnLi4vVHJhbnNhY3Rpb24uanMnO1xyXG5cclxuLyoqXHJcbiAqIEVzdGFibGlzaGVzIGEgQ1NTIG9wZXJhdGlvbSB0aGF0IGNhbiBiZSByb2xsZWRiYWNrIHdpdGhvdXQgYWx0ZXJpbmcgc2ltaWxhciBvcGVyYXRpb24gYnkgb3RoZXIgY29kZS5cclxuICogSWYgYSBjYWxsYmFjayBpcyBwcm92aWRlZCwgaXQgc3luY2VzIHRoZSBlbnRpcmUgb3BlcmF0aW9uIHdpdGggUmVmbG93J3Mgbm9ybWFsIHJlYWQvd3JpdGUgY3ljbGVzLlxyXG4gKlxyXG4gKiBAcGFyYW0gSFRNTEVsZW1lbnRcdFx0XHRlbCBcclxuICogQHBhcmFtIHN0cmluZ3xhcnJheVx0XHRcdHByb3BzXHJcbiAqXHJcbiAqIEByZXR1cm4gVHJhbnNhY3Rpb25cclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGVsLCBwcm9wcykge1xyXG5cdHJldHVybiBuZXcgVHJhbnNhY3Rpb24oZWwsIHByb3BzLCAoZWwsIHByb3BzKSA9PiB7XHJcblx0XHRyZXR1cm4gY3NzUmVhZElubGluZShlbCwgcHJvcHMpO1xyXG5cdH0sIChlbCwgZGF0YSkgPT4ge1xyXG5cdFx0cmV0dXJuIGNzc1dyaXRlQXN5bmMoZWwsIGRhdGEpO1xyXG5cdH0pO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIFJldHVybnMgVEhFIEZJUlNUIEVOVFJZIE9SIEEgTlVNQkVSIE9GIEVOVFJJRVMgY291bnRpbmcgZm9yd2FyZCBmcm9tIHRoZSBiZWdpbmluZy5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqIEBwYXJhbSBpbnRcdCBcdGFtb3VudFxyXG4gKlxyXG4gKiBAcmV0dXJuIG1peGVkfGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIGFtb3VudCA9IDEpIHtcclxuXHR2YXIgY291bnQgPSAwO1xyXG5cdGFyci5mb3JFYWNoKGl0bSA9PiB7XHJcblx0XHRjb3VudCArKztcclxuXHR9KTtcclxuXHR2YXIgZmlyc3RzID0gYXJyLnNsaWNlKGFyci5sZW5ndGggLSBjb3VudCwgYW1vdW50KTtcclxuXHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBmaXJzdHMgOiBmaXJzdHNbMF07XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfZmlyc3QgZnJvbSAnLi9maXJzdC5qcyc7XHJcblxyXG4vKipcclxuICogUmV0dXJucyBUSEUgTEFTVCBFTlRSWSBPUiBBIE5VTUJFUiBPRiBFTlRSSUVTIGNvdW50aW5nIGZvcndhcmQgdG8gdGhlIGVuZC5cclxuICpcclxuICogQHBhcmFtIGFycmF5IFx0YXJyXHJcbiAqIEBwYXJhbSBpbnRcdCBcdGFtb3VudFxyXG4gKlxyXG4gKiBAcmV0dXJuIG1peGVkfGFycmF5XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnIsIGFtb3VudCA9IDEpIHtcclxuXHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcclxuXHRcdD8gX2ZpcnN0KGFyci5zbGljZSgpLnJldmVyc2UoKSwgYW1vdW50KS5yZXZlcnNlKClcclxuXHRcdDogX2ZpcnN0KGFyci5zbGljZSgpLnJldmVyc2UoKSk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNUeXBlRnVuY3Rpb24gZnJvbSAnLi9pc1R5cGVGdW5jdGlvbi5qcyc7XHJcblxyXG4vKipcclxuICogVGVsbHMgaWYgdmFsIGlzIG9mIHR5cGUgXCJjbGFzc1wiLlxyXG4gKlxyXG4gKiBAcGFyYW0gb2JqZWN0IFx0XHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gX2lzVHlwZUZ1bmN0aW9uKHZhbCkgJiYgL15jbGFzc1xccz8vLnRlc3QoRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKSk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNDbGFzcyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQ2xhc3MuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9pbnRlcnNlY3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvaW50ZXJzZWN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIFJlZ2lzdHJ5IGNsYXNzXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKlxyXG4gKiBUaGlzIGNsYXNzIHByb3ZpZGVzIHdpbmRvdy1saWtlIGZ1bmN0aW9uYWxpdHkgYXMgYSBjb21wb25lbnQuXHJcbiAqL1xyXG5cdFx0XHRcclxuZXhwb3J0IGRlZmF1bHQge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFJlZ2lzdGVycyBhIGxvZ2ljYWwgY29tcG9uZW50LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIHN0cmluZ1x0XHRcdFx0bmFtZVxyXG5cdCAqIEBwYXJhbSBDb21wb25lbnR8ZnVuY3Rpb25cdGNvbXBvbmVudFxyXG5cdCAqIEBwYXJhbSBib29sfHN0cmluZ1x0XHRcdHNpbmdsZXRvblxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0cmVnaXN0ZXIobmFtZSwgY29tcG9uZW50LCBzaW5nbGV0b24gPSBmYWxzZSkge1xyXG5cdFx0cmVnaXN0cnlbbmFtZV0gPSB7Y29tcG9uZW50LCBzaW5nbGV0b259O1xyXG5cdH0sXHJcblxyXG5cdC8qKlxyXG5cdCAqIEZpbmRzIGFuZCBpbnN0YW50aWF0ZXMgYSByZWdpc3RlcmVkIGNvbXBvbmVudC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBzdHJpbmdcdFx0XHRcdG5hbWVcclxuXHQgKiBAcGFyYW0gYXJyYXlcdFx0XHRcdFx0Li4uYXJnc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiBDb21wb25lbnRcclxuXHQgKi9cclxuXHRjcmVhdGUobmFtZSwgLi4uYXJncykge1xyXG5cdFx0dmFyIGNvbnN0cnV0b3IsIGluc3RhbmNlO1xyXG5cdFx0aWYgKGNvbnN0cnV0b3IgPSByZWdpc3RyeVtuYW1lXSkge1xyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0aWYgKGNvbnN0cnV0b3Iuc2luZ2xldG9uSW5zdGFuY2UpIHtcclxuXHRcdFx0XHRyZXR1cm4gY29uc3RydXRvci5zaW5nbGV0b25JbnN0YW5jZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoY29uc3RydXRvci5zaW5nbGV0b24gPT09ICdhdXRvJyAmJiBjb25zdHJ1dG9yLnNpbmdsZXRvbkluc3RhbmNlcykge1xyXG5cdFx0XHRcdHZhciBpbnN0ID0gY29uc3RydXRvci5zaW5nbGV0b25JbnN0YW5jZXMuZmlsdGVyKGluc3QgPT4ge1xyXG5cdFx0XHRcdFx0cmV0dXJuIF9pbnRlcnNlY3QoYXJncywgaW5zdC5hcmdzKS5sZW5ndGggPT09IGFyZ3MubGVuZ3RoXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdFx0aWYgKGluc3QubGVuZ3RoID09PSAxKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gaW5zdFswXS5pbnN0YW5jZTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdGlmIChfaXNDbGFzcyhjb25zdHJ1dG9yLmNvbXBvbmVudCkpIHtcclxuXHRcdFx0XHRpbnN0YW5jZSA9IG5ldyBjb25zdHJ1dG9yLmNvbXBvbmVudCguLi5hcmdzKTtcclxuXHRcdFx0fSBlbHNlIGlmIChfaXNGdW5jdGlvbihjb25zdHJ1dG9yLmNvbXBvbmVudCkpIHtcclxuXHRcdFx0XHRpbnN0YW5jZSA9IGNvbnN0cnV0b3IuY29tcG9uZW50KC4uLmFyZ3MpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGluc3RhbmNlID0gY29uc3RydXRvci5jb21wb25lbnQ7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdGlmIChjb25zdHJ1dG9yLnNpbmdsZXRvbiA9PT0gdHJ1ZSkge1xyXG5cdFx0XHRcdGNvbnN0cnV0b3Iuc2luZ2xldG9uSW5zdGFuY2UgPSBpbnN0YW5jZTtcclxuXHRcdFx0fSBlbHNlIGlmIChjb25zdHJ1dG9yLnNpbmdsZXRvbiA9PT0gJ2F1dG8nKSB7XHJcblx0XHRcdFx0Y29uc3RydXRvci5zaW5nbGV0b25JbnN0YW5jZXMgPSBjb25zdHJ1dG9yLnNpbmdsZXRvbkluc3RhbmNlcyB8fCBbXTtcclxuXHRcdFx0XHRjb25zdHJ1dG9yLnNpbmdsZXRvbkluc3RhbmNlcy5wdXNoKHtcclxuXHRcdFx0XHRcdGluc3RhbmNlLFxyXG5cdFx0XHRcdFx0YXJncyxcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0cmV0dXJuIGluc3RhbmNlO1xyXG5cdFx0fVxyXG5cdFx0dGhyb3cgbmV3IEVycm9yKCdUaGUgXCInICsgbmFtZSArICdcIiBjb21wb25lbnQgaXMgbm90IGRlZmluZWQgaW4gcmVnaXN0cnkhJyk7XHJcblx0fSxcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gb2JqZWN0XHJcbiAqL1xyXG5jb25zdCByZWdpc3RyeSA9IHt9O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJy4uL2pzL2lzVW5kZWZpbmVkLmpzJztcclxuaW1wb3J0IF9pc0Z1bmN0aW9uIGZyb20gJy4uL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5cclxuLyoqXHJcbiAqIDEuIFJldHVybnMgdGhlIEVOVFJZIGZvbGxvd2luZyAoZWl0aGVyIHRoZSBGSVJTVCBvciB0aGUgTEFTVCBpbnN0YW5jZSBvZikgdGhlIHJlZmVyZW5jZS5cclxuICogMi4gUmV0dXJucyBBIE5VTUJFUiBPRiBFTlRSSUVTIGNvdW50aW5nIGZvcndhcmRzIGZyb20gKGVpdGhlciB0aGUgRklSU1Qgb3IgdGhlIExBU1QgaW5zdGFuY2Ugb2YpIHRoZSBnaXZlbiByZWZlcmVuY2UuXHJcbiAqXHJcbiAqIEBwYXJhbSBhcnJheSBcdFx0YXJyXHJcbiAqIEBwYXJhbSBtaXhlZFx0IFx0XHRyZWZlcmVuY2VcclxuICogQHBhcmFtIGludHxib29sIFx0XHRsZW5ndGhcclxuICogQHBhcmFtIGJvb2x8ZnVuY3Rpb25cdCBsb29wXHJcbiAqIEBwYXJhbSBib29sXHQgXHRcdGxhc3RSZWZlcmVuY2VcclxuICpcclxuICogQHJldHVybiBtaXhlZHxhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyLCByZWZlcmVuY2UsIGxlbmd0aCA9IGZhbHNlLCBsb29wID0gZmFsc2UsIGxhc3RSZWZlcmVuY2UgPSBmYWxzZSkge1xyXG5cdGlmIChhcnIuaW5kZXhPZihyZWZlcmVuY2UpID09PSAtMSkge1xyXG5cdFx0cmV0dXJuIGxlbmd0aCA/IFtdIDogdW5kZWZpbmVkO1xyXG5cdH1cclxuXHR2YXIgYW1vdW50ID0gbGVuZ3RoID09PSB0cnVlID8gYXJyLmxlbmd0aCAtIDEgOiAobGVuZ3RoID09PSBmYWxzZSA/IDEgOiBsZW5ndGgpO1xyXG5cdHZhciBmcm9tID0gbGFzdFJlZmVyZW5jZSA/IGFyci5sYXN0SW5kZXhPZihyZWZlcmVuY2UpICsgMSA6IGFyci5pbmRleE9mKHJlZmVyZW5jZSkgKyAxO1xyXG5cdHZhciBhZnRlciA9ICFfaXNVbmRlZmluZWQocmVmZXJlbmNlKSA/IGFyci5zbGljZShmcm9tLCBmcm9tICsgYW1vdW50KSA6IFtdO1xyXG5cdGlmIChsb29wICYmIGFmdGVyLmxlbmd0aCA8IGFtb3VudCAmJiBhZnRlci5sZW5ndGggPCBhcnIubGVuZ3RoKSB7XHJcblx0XHRpZiAoIV9pc0Z1bmN0aW9uKGxvb3ApIHx8IGxvb3AoYW1vdW50IC0gYWZ0ZXIubGVuZ3RoKSkge1xyXG5cdFx0XHRhZnRlciA9IGFmdGVyLmNvbmNhdChhcnIuc2xpY2UoMCwgYW1vdW50IC0gYWZ0ZXIubGVuZ3RoKSk7XHJcblx0XHR9XHJcblx0fTtcclxuXHRyZXR1cm4gbGVuZ3RoID8gYWZ0ZXIgOiBhZnRlclswXTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IHtSZWZsZXh9IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NodG1sJztcclxuaW1wb3J0IF9lYWNoIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2VhY2guanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgRnJhbWUgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqXHJcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIGdpdmVuIHJvdXRlIGFuZCBtYW5hZ2VzXHJcbiAqIGl0cyBzdWItcm91dGUuXHJcbiAqL1xyXG5cdFx0XHRcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xyXG5cclxuXHQvKipcclxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IEl0ZW0uXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdFx0XHRlbnRyaWVzXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHRcdFx0cGFyYW1zXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihlbnRyaWVzID0ge30pIHtcclxuXHRcdF9lYWNoKGVudHJpZXMsIChrZXksIHZhbHVlKSA9PiB7XHJcblx0XHRcdFJlZmxleC5zZXQodGhpcywga2V5LCB2YWx1ZSk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENvbnRyb2xzIHRoZSBGcmFtZSdzIGFjdGl2ZSBzdGF0ZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBib29sXHRcdFx0XHRzdGF0ZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiBFdmVudFxyXG5cdCAqL1xyXG5cdHNldEFjdGl2ZVN0YXRlKHN0YXRlID0gdHJ1ZSkge1xyXG5cdFx0aWYgKHRoaXMuYWN0aXZlICE9PSBzdGF0ZSkge1xyXG5cdFx0XHR2YXIgZSA9IFJlZmxleC5zZXQodGhpcywgIXN0YXRlID8gJ2RlYWN0aXZhdGluZycgOiAnYWN0aXZhdGluZycsIHRydWUsIHRydWUvKnJldHVybkV2ZW50Ki8pO1xyXG5cdFx0XHRpZiAoZS5wcm9taXNlcykge1xyXG5cdFx0XHRcdGUucHJvbWlzZXMudGhlbigoKSA9PiB7XHJcblx0XHRcdFx0XHRSZWZsZXguc2V0KHRoaXMsICFzdGF0ZSA/IHtkZWFjdGl2YXRpbmc6ZmFsc2UsIGFjdGl2ZTpmYWxzZX0gOiB7YWN0aXZhdGluZzpmYWxzZSwgYWN0aXZlOnRydWV9LCB0cnVlLypyZXR1cm5FdmVudCovKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRyZXR1cm4gZTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXR1cm4gUmVmbGV4LnNldCh0aGlzLCAhc3RhdGUgPyB7ZGVhY3RpdmF0aW5nOmZhbHNlLCBhY3RpdmU6ZmFsc2V9IDoge2FjdGl2YXRpbmc6ZmFsc2UsIGFjdGl2ZTp0cnVlfSwgdHJ1ZS8qcmV0dXJuRXZlbnQqLyk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IHtSZWZsZXh9IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NodG1sJztcclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNFbXB0eSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzRW1wdHkuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0Z1bmN0aW9uLmpzJztcclxuaW1wb3J0IF9pc0NsYXNzIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNDbGFzcy5qcyc7XHJcbmltcG9ydCBfYXJyRmlyc3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvZmlyc3QuanMnO1xyXG5pbXBvcnQgX2Fyckxhc3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvbGFzdC5qcyc7XHJcbmltcG9ydCBfZm9sbG93aW5nIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2ZvbGxvd2luZy5qcyc7XHJcbmltcG9ydCBfcHJlY2VkaW5nIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3ByZWNlZGluZy5qcyc7XHJcbmltcG9ydCBfZWFjaCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9lYWNoLmpzJztcclxuaW1wb3J0IENvbGxlY3Rpb25CYXNlIGZyb20gJy4vQ29sbGVjdGlvbkJhc2UuanMnO1xyXG5pbXBvcnQgSXRlbSBmcm9tICcuL0l0ZW0uanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgTGlzdCBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcblx0XHRcdFxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBleHRlbmRzIENvbGxlY3Rpb25CYXNlIHtcclxuXHJcblx0LyoqXHJcblx0ICogQ29uc3RydWN0cyBhIG5ldyBMaXN0IGluc3RhbmNlLlxyXG5cdCAqIFN1Yi12aWV3cyBtYXkgYWxzbyBiZSBsaXN0ZWQuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gYXJyYXl8b2JqZWN0XHRcdFx0aXRlbXNcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdFx0XHRwYXJhbXNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGl0ZW1zID0ge30sIHBhcmFtcyA9IHt9KSB7XHJcblx0XHRpZiAoIXBhcmFtcy50YWtlU3RhdHMpIHtcclxuXHRcdFx0cGFyYW1zLnRha2VTdGF0cyA9IFtdO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCFwYXJhbXMudGFrZVN0YXRzLmluY2x1ZGVzKCdhY3RpdmUnKSkge1xyXG5cdFx0XHRwYXJhbXMudGFrZVN0YXRzLnB1c2goJ2FjdGl2ZScpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCFwYXJhbXMudGFrZVN0YXRzLmluY2x1ZGVzKCdhY3RpdmF0aW5nJykpIHtcclxuXHRcdFx0cGFyYW1zLnRha2VTdGF0cy5wdXNoKCdhY3RpdmF0aW5nJyk7XHJcblx0XHR9XHJcblx0XHRpZiAoIXBhcmFtcy50YWtlU3RhdHMuaW5jbHVkZXMoJ2RlYWN0aXZhdGluZycpKSB7XHJcblx0XHRcdHBhcmFtcy50YWtlU3RhdHMucHVzaCgnZGVhY3RpdmF0aW5nJyk7XHJcblx0XHR9XHJcblx0XHRzdXBlcih7fSwgcGFyYW1zKTtcclxuXHRcdFJlZmxleC5vYnNlcnZlKHRoaXMsIHRoaXMucGFyYW1zLml0ZW1zT2Zmc2V0ICsgJy4uYWN0aXZhdGluZycsIGFjdGl2YXRpbmcgPT4ge1xyXG5cdFx0XHRpZiAoYWN0aXZhdGluZykge1xyXG5cdFx0XHRcdHRoaXMuZ2V0SXRlbXNBcnJheSgpLmZvckVhY2goaXRlbSA9PiB7XHJcblx0XHRcdFx0XHRpZiAoaXRlbS5hY3RpdmUgPT09IHRydWUgJiYgIWl0ZW0uYWN0aXZhdGluZykge1xyXG5cdFx0XHRcdFx0XHRpdGVtLnNldEFjdGl2ZVN0YXRlKGZhbHNlKTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHR0aGlzLmZpbGwoaXRlbXMpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQWR2YW5jZXMgdGhlIGxpc3QncyBzZWxlY3RlZG5lc3MgdG8gdGhlXHJcblx0ICogZmlyc3QgaXRlbS5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZH1FdmVudFxyXG5cdCAqL1xyXG5cdHNlbGVjdFN0YXJ0KCkge1xyXG5cdFx0dmFyIGZpcnN0LCBpdGVtcyA9IHRoaXMuZ2V0SXRlbXNBcnJheSgpO1xyXG5cdFx0aWYgKCFfaXNFbXB0eShpdGVtcykgJiYgKGZpcnN0ID0gX2FyckZpcnN0KGl0ZW1zKSkpIHtcclxuXHRcdFx0cmV0dXJuIGZpcnN0LnNldEFjdGl2ZVN0YXRlKHRydWUpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQWR2YW5jZXMgdGhlIGxpc3QncyBzZWxlY3RlZG5lc3MgdG8gdGhlXHJcblx0ICogbGFzdCBpdGVtLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkfUV2ZW50XHJcblx0ICovXHJcblx0c2VsZWN0RW5kKCkge1xyXG5cdFx0dmFyIGxhc3QsIGl0ZW1zID0gdGhpcy5nZXRJdGVtc0FycmF5KCk7XHJcblx0XHRpZiAoIV9pc0VtcHR5KGl0ZW1zKSAmJiAobGFzdCA9IF9hcnJMYXN0KGl0ZW1zKSkpIHtcclxuXHRcdFx0cmV0dXJuIGxhc3Quc2V0QWN0aXZlU3RhdGUodHJ1ZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEFkdmFuY2VzIHRoZSBsaXN0J3Mgc2VsZWN0ZWRuZXNzIHRvIHRoZVxyXG5cdCAqIGl0ZW0gcHJlY2VkaW5nIHRoZSBjdXJyZW50IGN1cnJlbnQuYWN0aXZlLlxyXG5cdCAqIFNlbGVjdHMgdGhlIGxhc3QgaXRlbSBpZiBsb29wYWJsZSBhbmQgbm8gY3VycmVudC5hY3RpdmUuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gYm9vbHxmdW5jdGlvblx0bG9vcFxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkfUV2ZW50XHJcblx0ICovXHJcblx0c2VsZWN0UHJldihsb29wID0gZmFsc2UpIHtcclxuXHRcdHZhciBwcmVjZWRpbmcsIGl0ZW1zID0gdGhpcy5nZXRJdGVtc0FycmF5KCk7XHJcblx0XHRpZiAoX2lzRW1wdHkoaXRlbXMpKSB7XHJcblx0XHRcdGlmIChfaXNGdW5jdGlvbihsb29wKSkge1xyXG5cdFx0XHRcdGxvb3AoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRpZiAodGhpcy5jdXJyZW50LmFjdGl2ZSkge1xyXG5cdFx0XHRwcmVjZWRpbmcgPSBfcHJlY2VkaW5nKGl0ZW1zLCB0aGlzLmN1cnJlbnQuYWN0aXZlLCBmYWxzZS8qbGVuZ3RoKi8sIGxvb3ApO1xyXG5cdFx0fSBlbHNlIGlmIChsb29wICYmICghX2lzRnVuY3Rpb24obG9vcCkgfHwgbG9vcCgwKSkpIHtcclxuXHRcdFx0cHJlY2VkaW5nID0gX2Fyckxhc3QoaXRlbXMpO1xyXG5cdFx0fVxyXG5cdFx0aWYgKHByZWNlZGluZykge1xyXG5cdFx0XHRyZXR1cm4gcHJlY2VkaW5nLnNldEFjdGl2ZVN0YXRlKHRydWUpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQWR2YW5jZXMgdGhlIGxpc3QncyBzZWxlY3RlZG5lc3MgdG8gdGhlXHJcblx0ICogaXRlbSBmb2xsb3dpbmcgdGhlIGN1cnJlbnQgY3VycmVudC5hY3RpdmUuXHJcblx0ICogU2VsZWN0cyB0aGUgZmlyc3QgaXRlbSBpZiBsb29wYWJsZSBhbmQgbm8gY3VycmVudC5hY3RpdmUuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gYm9vbHxmdW5jdGlvblx0bG9vcFxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkfUV2ZW50XHJcblx0ICovXHJcblx0c2VsZWN0TmV4dChsb29wID0gZmFsc2UpIHtcclxuXHRcdHZhciBmb2xsb3dpbmcsIGl0ZW1zID0gdGhpcy5nZXRJdGVtc0FycmF5KCk7XHJcblx0XHRpZiAoX2lzRW1wdHkoaXRlbXMpKSB7XHJcblx0XHRcdGlmIChfaXNGdW5jdGlvbihsb29wKSkge1xyXG5cdFx0XHRcdGxvb3AoKTtcclxuXHRcdFx0fVxyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHRpZiAodGhpcy5jdXJyZW50LmFjdGl2ZSkge1xyXG5cdFx0XHRmb2xsb3dpbmcgPSBfZm9sbG93aW5nKGl0ZW1zLCB0aGlzLmN1cnJlbnQuYWN0aXZlLCBmYWxzZS8qbGVuZ3RoKi8sIGxvb3ApO1xyXG5cdFx0fSBlbHNlIGlmIChsb29wICYmICghX2lzRnVuY3Rpb24obG9vcCkgfHwgbG9vcCgwKSkpIHtcclxuXHRcdFx0Zm9sbG93aW5nID0gX2FyckZpcnN0KGl0ZW1zKTtcclxuXHRcdH1cclxuXHRcdGlmIChmb2xsb3dpbmcpIHtcclxuXHRcdFx0cmV0dXJuIGZvbGxvd2luZy5zZXRBY3RpdmVTdGF0ZSh0cnVlKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEFkdmFuY2VzIHRoZSBsaXN0J3Mgc2VsZWN0ZWRuZXNzIHRvIGEgcmFuZG9tIGl0ZW0uXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWR9RXZlbnRcclxuXHQgKi9cclxuXHRzZWxlY3RSYW5kKCkge1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQWR2YW5jZXMgdGhlIGxpc3QncyBzZWxlY3RlZG5lc3MgdG8gYSBpdGVtLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBvYmplY3RcclxuXHQgKi9cclxuXHRmaWx0ZXIoKSB7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBBZHZhbmNlcyB0aGUgbGlzdCdzIHNlbGVjdGVkbmVzcyB0byBhIGl0ZW0uXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG9iamVjdFxyXG5cdCAqL1xyXG5cdHNvcnQoKSB7XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgZW50cmllcyBmcm9tIGRlY2xhcmF0aW9ucy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3R8YXJyYXlcdFx0XHRlbnRyaWVzXHJcblx0ICogQHBhcmFtIG9iamVjdHxmdW5jdGlvblx0XHRlbnRyeUNsYXNzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG9iamVjdHxhcnJheVxyXG5cdCAqL1xyXG5cdHN0YXRpYyBjcmVhdGVFbnRyaWVzKGVudHJpZXMsIGVudHJ5Q2xhc3MgPSBJdGVtKSB7XHJcblx0XHR2YXIgX2VudHJpZXMgPSBfaXNBcnJheShlbnRyaWVzKSA/IFtdIDoge307XHJcblx0XHRfZWFjaChlbnRyaWVzLCAobmFtZSwgZW50cnkpID0+IHtcclxuXHRcdFx0ZW50cnkgPSBlbnRyeSBpbnN0YW5jZW9mIGVudHJ5Q2xhc3MgPyBlbnRyeVxyXG5cdFx0XHRcdDogKF9pc0NsYXNzKGVudHJ5Q2xhc3MpID8gbmV3IGVudHJ5Q2xhc3MoZW50cnkpXHJcblx0XHRcdFx0XHQ6IChfaXNGdW5jdGlvbihlbnRyeUNsYXNzKSA/IGVudHJ5Q2xhc3MoZW50cnkpIFxyXG5cdFx0XHRcdFx0XHQ6IGVudHJ5KSk7XHJcblx0XHRcdFJlZmxleC5zZXQoX2VudHJpZXMsIG5hbWUsIGVudHJ5KTtcclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIF9lbnRyaWVzO1xyXG5cdH1cclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQge1JlZmxleH0gZnJvbSAnQHdlYi1uYXRpdmUtanMvY2h0bWwnO1xyXG5pbXBvcnQgX2VhY2ggZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZWFjaC5qcyc7XHJcbmltcG9ydCBfcmVtb3ZlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3JlbW92ZS5qcyc7XHJcbmltcG9ydCBfcHVzaFVuaXF1ZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9wdXNoVW5pcXVlLmpzJztcclxuaW1wb3J0IF91bmlxdWUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvdW5pcXVlLmpzJztcclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfd3JhcHBlZCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL3N0ci93cmFwcGVkLmpzJztcclxuaW1wb3J0IF91bndyYXAgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9zdHIvdW53cmFwLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIExpc3QgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5cdFx0XHRcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xyXG5cclxuXHQvKipcclxuXHQgKiBDb25zdGl0dXRlcyB0aGUgdGhpcyBjb250ZXh0IGZvciBzdWJjbGFzc2VzLlxyXG5cdCAqIEFkZHMgaXRlbXMgdG8gdGhlIGNvbGxlY3Rpb24uXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdFx0XHRpdGVtc1xyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0XHRcdHBhcmFtc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IoaXRlbXMgPSB7fSwgcGFyYW1zID0ge30pIHtcclxuXHRcdHRoaXMucGFyYW1zID0gcGFyYW1zO1xyXG5cdFx0aWYgKCF0aGlzLnBhcmFtcy5pdGVtc09mZnNldCkge1xyXG5cdFx0XHR0aGlzLnBhcmFtcy5pdGVtc09mZnNldCA9ICdlbnRyaWVzJztcclxuXHRcdH1cclxuXHRcdHRoaXMuZmlsbChpdGVtcyk7XHJcblx0XHQvLyBSZWNvcmQgc2F0ZXNcclxuXHRcdFJlZmxleC5zZXQodGhpcywgJ2N1cnJlbnQnLCB7fSk7XHJcblx0XHRfdW5pcXVlKHBhcmFtcy50YWtlU3RhdHMgfHwgW10pLmZvckVhY2goc3RhdGVOYW1lID0+IHtcclxuXHRcdFx0dmFyIGlzTXVsdGlwbGU7XHJcblx0XHRcdGlmIChfd3JhcHBlZChzdGF0ZU5hbWUsICdbJywgJ10nKSkge1xyXG5cdFx0XHRcdGlzTXVsdGlwbGUgPSB0cnVlO1xyXG5cdFx0XHRcdHN0YXRlTmFtZSA9IF91bndyYXAoc3RhdGVOYW1lLCAnWycsICddJyk7XHJcblx0XHRcdFx0Ly8gSW5pdGlhbGl6ZSB0aGUgc3BlY2lmaWMgY29sbGF0aW9uXHJcblx0XHRcdFx0dGhpcy5jdXJyZW50W3N0YXRlTmFtZV0gPSBbXTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyBPYnNlcnZlIHRoZSBzYXRlXHJcblx0XHRcdHZhciBwYXRoVG9TdGF0ZSA9IHRoaXMucGFyYW1zLml0ZW1zT2Zmc2V0ICsgJy4uJyArIHN0YXRlTmFtZTtcclxuXHRcdFx0UmVmbGV4Lm9ic2VydmUodGhpcywgcGF0aFRvU3RhdGUsIChzdGF0ZSwgX3N0YXRlLCBlKSA9PiB7XHJcblx0XHRcdFx0aWYgKHN0YXRlID09PSB0cnVlKSB7XHJcblx0XHRcdFx0XHRpZiAoaXNNdWx0aXBsZSkge1xyXG5cdFx0XHRcdFx0XHQvLyBBZGQgdG8gYSBjb2xsZWN0aW9uP1xyXG5cdFx0XHRcdFx0XHRfcHVzaFVuaXF1ZSh0aGlzLmN1cnJlbnRbc3RhdGVOYW1lXSwgZS5vcmlnaW5hdGluZ1RhcmdldCk7XHJcblx0XHRcdFx0XHRcdFJlZmxleC5zZXQodGhpcy5jdXJyZW50LCBzdGF0ZU5hbWUsIHRoaXMuY3VycmVudFtzdGF0ZU5hbWVdKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdFJlZmxleC5zZXQodGhpcy5jdXJyZW50LCBzdGF0ZU5hbWUsIGUub3JpZ2luYXRpbmdUYXJnZXQpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoc3RhdGUgPT09IGZhbHNlKSB7XHJcblx0XHRcdFx0XHRpZiAoaXNNdWx0aXBsZSkge1xyXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZnJvbSBhIGNvbGxlY3Rpb24/XHJcblx0XHRcdFx0XHRcdF9yZW1vdmUodGhpcy5jdXJyZW50W3N0YXRlTmFtZV0sIGUub3JpZ2luYXRpbmdUYXJnZXQpO1xyXG5cdFx0XHRcdFx0XHRSZWZsZXguc2V0KHRoaXMuY3VycmVudCwgc3RhdGVOYW1lLCB0aGlzLmN1cnJlbnRbc3RhdGVOYW1lXSk7XHJcblx0XHRcdFx0XHR9IGVsc2UgaWYgKHRoaXMuY3VycmVudFtzdGF0ZU5hbWVdID09PSBlLm9yaWdpbmF0aW5nVGFyZ2V0KSB7XHJcblx0XHRcdFx0XHRcdFJlZmxleC5kZWwodGhpcy5jdXJyZW50LCBzdGF0ZU5hbWUpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEZpbGxzIHRoZSBjb2xsZWN0aW9ucyB3aXRoIGVudHJpZXMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gb2JqZWN0fGFycmF5XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG9iamVjdFxyXG5cdCAqL1xyXG5cdGZpbGwoZW50cmllcykge1xyXG5cdFx0X2VhY2goZW50cmllcywgKGtleSwgdmFsdWUpID0+IHtcclxuXHRcdFx0UmVmbGV4LnNldCh0aGlzLCBrZXksIHZhbHVlKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUmV0dXJucyB0aGUgbGlzdCBvZiBpdGVtcyBjYXN0IHRvIGFycmF5LlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBhcnJheVxyXG5cdCAqL1xyXG5cdGdldEl0ZW1zQXJyYXkoKSB7XHJcblx0XHR2YXIgaXRlbXMgPSB0aGlzW3RoaXMucGFyYW1zLml0ZW1zT2Zmc2V0XTtcclxuXHRcdHJldHVybiBfaXNBcnJheShpdGVtcykgPyBpdGVtcyA6IChpdGVtcyA/IE9iamVjdC52YWx1ZXMoaXRlbXMpIDogW10pO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQWR2YW5jZXMgdGhlIGxpc3QncyBzZWxlY3RlZG5lc3MgdG8gYSBpdGVtLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBvYmplY3RcclxuXHQgKi9cclxuXHRmaWx0ZXIoKSB7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBBZHZhbmNlcyB0aGUgbGlzdCdzIHNlbGVjdGVkbmVzcyB0byBhIGl0ZW0uXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIG9iamVjdFxyXG5cdCAqL1xyXG5cdHNvcnQoKSB7XHJcblx0fVxyXG59OyIsIlxyXG4vKipcclxuICogVGVsbHMgaWYgdGhlIHN0cmluZyBpcyB3YXJhcHBlZCB3aXRoIHRoZSBnaXZlbiBvcGVuaW5nIGFuZCBjbG9zaW5nIHRhZ3MuXHJcbiAqXHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzdWJqZWN0XHJcbiAqIEBwYXJhbSAgc3RyaW5nICBvcGVuaW5nVGFnXHJcbiAqIEBwYXJhbSAgc3RyaW5nICBjbG9zaW5nVGFnXHJcbiAqXHJcbiAqIEByZXR1cm4gYm9vbFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3ViamVjdCwgb3BlbmluZ1RhZywgY2xvc2luZ1RhZykge1xyXG5cdHJldHVybiBzdWJqZWN0LnN0YXJ0c1dpdGgob3BlbmluZ1RhZykgJiYgc3ViamVjdC5lbmRzV2l0aChjbG9zaW5nVGFnKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9hZnRlciBmcm9tICcuL2FmdGVyLmpzJztcclxuaW1wb3J0IF9iZWZvcmVMYXN0IGZyb20gJy4vYmVmb3JlTGFzdC5qcyc7XHJcblxyXG4vKipcclxuICogUmV0dXJucyB0aGUgc3RyaW5nIHdpdGhvdXQgdGhlIGdpdmVuIG9wZW5pbmcgYW5kIGNsb3NpbmcgdGFncy5cclxuICpcclxuICogQHBhcmFtICBzdHJpbmcgIHN1YmplY3RcclxuICogQHBhcmFtICBzdHJpbmcgIG9wZW5pbmdUYWdcclxuICogQHBhcmFtICBzdHJpbmcgIGNsb3NpbmdUYWdcclxuICpcclxuICogQHJldHVybiBzdHJpbmdcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN1YmplY3QsIG9wZW5pbmdUYWcsIGNsb3NpbmdUYWcpIHtcclxuXHRyZXR1cm4gX2JlZm9yZUxhc3QoX2FmdGVyKHN1YmplY3QsIG9wZW5pbmdUYWcpLCBjbG9zaW5nVGFnKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9iZWZvcmUgZnJvbSAnLi9iZWZvcmUuanMnO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybiB0aGUgcGFydCBvZiBhIHN0cmluZyBiZWZvcmUgbGFzdCBvY2N1cmVuY2Ugb2YgYSBnaXZlbiB2YWx1ZS5cclxuICpcclxuICogQHBhcmFtICBzdHJpbmcgIHN1YmplY3RcclxuICogQHBhcmFtICBzdHJpbmcgIHNlYXJjaFxyXG4gKlxyXG4gKiBAcmV0dXJuIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3ViamVjdCwgc2VhcmNoKSB7XHJcblx0cmV0dXJuIF9iZWZvcmUoc3ViamVjdCwgc2VhcmNoLCB0cnVlKTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBSZXR1cm4gdGhlIHBhcnQgb2YgYSBzdHJpbmcgYmVmb3JlIGEgZ2l2ZW4gdmFsdWUuXHJcbiAqXHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzdWJqZWN0XHJcbiAqIEBwYXJhbSAgc3RyaW5nICBzZWFyY2hcclxuICogQHBhcmFtICBib29sXHQgICBiZWZvcmVMYXN0XHJcbiAqXHJcbiAqIEByZXR1cm4gc3RyaW5nXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdWJqZWN0LCBzZWFyY2gsIGJlZm9yZUxhc3QgPSBmYWxzZSkge1xyXG5cdGlmIChzZWFyY2ggPT0gJycpIHtcclxuXHRcdHJldHVybiBzdWJqZWN0O1xyXG5cdH1cclxuXHR2YXIgcG9zID0gYmVmb3JlTGFzdCA/IHN1YmplY3QubGFzdEluZGV4T2Yoc2VhcmNoKSA6IHN1YmplY3QuaW5kZXhPZihzZWFyY2gpO1xyXG5cdGlmIChwb3MgPT09IC0xKSB7XHJcblx0XHRyZXR1cm4gc3ViamVjdDtcclxuXHR9XHJcblx0cmV0dXJuIHN1YmplY3Quc3Vic3RyKDAsIHBvcyk7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogUmV0dXJuIHRoZSByZW1haW5kZXIgb2YgYSBzdHJpbmcgYWZ0ZXIgYSBnaXZlbiB2YWx1ZS5cclxuICpcclxuICogQHBhcmFtICBzdHJpbmcgIHN1YmplY3RcclxuICogQHBhcmFtICBzdHJpbmcgIHNlYXJjaFxyXG4gKiBAcGFyYW0gIGJvb2xcdCAgIGFmdGVyTGFzdFxyXG4gKlxyXG4gKiBAcmV0dXJuIHN0cmluZ1xyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3ViamVjdCwgc2VhcmNoLCBhZnRlckxhc3QgPSBmYWxzZSkge1xyXG5cdGlmIChzZWFyY2ggPT0gJycpIHtcclxuXHRcdHJldHVybiBzdWJqZWN0O1xyXG5cdH1cclxuXHR2YXIgcG9zID0gYWZ0ZXJMYXN0ID8gc3ViamVjdC5sYXN0SW5kZXhPZihzZWFyY2gpIDogc3ViamVjdC5pbmRleE9mKHNlYXJjaCk7XHJcblx0aWYgKHBvcyA9PT0gLTEpIHtcclxuXHRcdHJldHVybiAnJztcclxuXHR9XHJcblx0cmV0dXJuIHN1YmplY3Quc3Vic3RyKHBvcyArIHNlYXJjaC5sZW5ndGgpO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzVW5kZWZpbmVkIGZyb20gJy4uL2pzL2lzVW5kZWZpbmVkLmpzJztcclxuaW1wb3J0IF9pc0Z1bmN0aW9uIGZyb20gJy4uL2pzL2lzRnVuY3Rpb24uanMnO1xyXG5cclxuLyoqXHJcbiAqIDEuIFJldHVybnMgdGhlIEVOVFJZIHByZWNlZGluZyAoZWl0aGVyIHRoZSBGSVJTVCBvciB0aGUgTEFTVCBpbnN0YW5jZSBvZikgdGhlIHJlZmVyZW5jZS5cclxuICogMi4gUmV0dXJucyBBIE5VTUJFUiBPRiBFTlRSSUVTIGNvdW50aW5nIGJhY2t3YXJkcyBmcm9tIChlaXRoZXIgdGhlIEZJUlNUIG9yIHRoZSBMQVNUIGluc3RhbmNlIG9mKSB0aGUgZ2l2ZW4gcmVmZXJlbmNlLlxyXG4gKlxyXG4gKiBAcGFyYW0gYXJyYXkgXHRcdGFyclxyXG4gKiBAcGFyYW0gbWl4ZWRcdCBcdFx0cmVmZXJlbmNlXHJcbiAqIEBwYXJhbSBpbnR8Ym9vbCBcdFx0bGVuZ3RoXHJcbiAqIEBwYXJhbSBib29sfGZ1bmN0aW9uXHRsb29wXHJcbiAqIEBwYXJhbSBib29sXHQgXHRcdGxhc3RSZWZlcmVuY2VcclxuICpcclxuICogQHJldHVybiBtaXhlZHxhcnJheVxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyLCByZWZlcmVuY2UsIGxlbmd0aCA9IGZhbHNlLCBsb29wID0gZmFsc2UsIGxhc3RSZWZlcmVuY2UgPSBmYWxzZSkge1xyXG5cdGlmIChhcnIuaW5kZXhPZihyZWZlcmVuY2UpID09PSAtMSkge1xyXG5cdFx0cmV0dXJuIGxlbmd0aCA/IFtdIDogdW5kZWZpbmVkO1xyXG5cdH1cclxuXHR2YXIgYW1vdW50ID0gbGVuZ3RoID09PSB0cnVlID8gYXJyLmxlbmd0aCAtIDEgOiAobGVuZ3RoID09PSBmYWxzZSA/IDEgOiBsZW5ndGgpO1xyXG5cdHZhciBhcnIgPSBhcnIuc2xpY2UoKS5yZXZlcnNlKCk7XHJcblx0dmFyIGZyb20gPSBsYXN0UmVmZXJlbmNlID8gYXJyLmxhc3RJbmRleE9mKHJlZmVyZW5jZSkgKyAxIDogYXJyLmluZGV4T2YocmVmZXJlbmNlKSArIDE7XHJcblx0dmFyIGJlZm9yZSA9ICFfaXNVbmRlZmluZWQocmVmZXJlbmNlKSA/IGFyci5zbGljZShmcm9tLCBmcm9tICsgYW1vdW50KSA6IFtdO1xyXG5cdGlmIChsb29wICYmIGJlZm9yZS5sZW5ndGggPCBhbW91bnQgJiYgYmVmb3JlLmxlbmd0aCA8IGFyci5sZW5ndGgpIHtcclxuXHRcdGlmICghX2lzRnVuY3Rpb24obG9vcCkgfHwgbG9vcChhbW91bnQgLSBiZWZvcmUubGVuZ3RoKSkge1xyXG5cdFx0XHRiZWZvcmUgPSBiZWZvcmUuY29uY2F0KGFyci5zbGljZSgwLCBhbW91bnQgLSBiZWZvcmUubGVuZ3RoKSk7XHJcblx0XHR9XHJcblx0fTtcclxuXHRyZXR1cm4gbGVuZ3RoID8gYmVmb3JlIDogYmVmb3JlWzBdO1xyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQge1JlZmxleH0gZnJvbSAnQHdlYi1uYXRpdmUtanMvY2h0bWwnO1xyXG5pbXBvcnQgX2VhY2ggZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZWFjaC5qcyc7XHJcbmltcG9ydCBfaXNBcnJheSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzTnVsbCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL2lzTnVsbC5qcyc7XHJcbmltcG9ydCBfaXNOdW1lcmljIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNOdW1lcmljLmpzJztcclxuaW1wb3J0IF9taXhpbiBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2pzL21peGluLmpzJztcclxuaW1wb3J0IFJlZ2lzdHJ5IGZyb20gJy4uLy4uL1JlZ2lzdHJ5LmpzJztcclxuaW1wb3J0IENvbGxlY3Rpb24gZnJvbSAnLi4vQ29sbGVjdGlvbi5qcyc7XHJcbmltcG9ydCBJdGVtIGZyb20gJy4uL0l0ZW0uanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgUm91dGUgY2xhc3NcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqXHJcbiAqIFRoaXMgY2xhc3MgcmVwcmVzZW50cyBhIGdpdmVuIHJvdXRlIGFuZCBtYW5hZ2VzXHJcbiAqIGl0cyBzdWItcm91dGUuXHJcbiAqL1xyXG5cdFx0XHRcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGUgZXh0ZW5kcyBfbWl4aW4oSXRlbSwgQ29sbGVjdGlvbikge1xyXG5cclxuXHQvKipcclxuXHQgKiBDb25zdHJ1Y3RzIGEgbmV3IFJvdXRlIGluc3RhbmNlLlxyXG5cdCAqIFN1Yi12aWV3cyBtYXkgYWxzbyBiZSBsaXN0ZWQuXHJcblx0ICpcclxuXHQgKiBJdHMgY29udGVudCBjb3VsZCBlaXRoZXIgYmUgc3RhdGljIG9yIHJlbW90ZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0XHRcdHN0YXRlXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHRcdFx0cGFyYW1zXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihpdGVtcyA9IHt9LCBwYXJhbXMgPSB7fSkge1xyXG5cdFx0cGFyYW1zLml0ZW1zT2Zmc2V0ID0gJ3N1YnJvdXRlcyc7XHJcblx0XHRzdXBlcihpdGVtcywgcGFyYW1zKTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBPYnNlcnZlIHRoZSBSb3V0ZSdzIHJvdXRlLXNsb3RcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRSZWZsZXgub2JzZXJ2ZSh0aGlzLCAnYWN0aXZlJywgYWN0aXZlU3RhdGUgPT4ge1xyXG5cdFx0XHRpZiAoYWN0aXZlU3RhdGUgPT09IHRydWUgJiYgdGhpcy5hY3RpdmVDYWxsYmFjaykge1xyXG5cdFx0XHRcdHRoaXMuYWN0aXZlQ2FsbGJhY2soKTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdGlmICh0aGlzLmluaXRDYWxsYmFjaykge1xyXG5cdFx0XHR0aGlzLmluaXRDYWxsYmFjaygpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQmluZHMgc3Vicm91dGVzIHRvIGEgcm91dGUgcGF0aCBzbG90LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGludHxhcnJheVx0XHRcdHN1YnJvdXRpbmdLZXlzXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHJcblx0cm91dGUoc3Vicm91dGluZ0tleXMgPSBudWxsKSB7XHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHR2YXIgc3Vicm91dGluZ0tleSwgc3Vicm91dGluZ0tleUZvcndhcmQ7XHJcblx0XHRpZiAoX2lzQXJyYXkoc3Vicm91dGluZ0tleXMpKSB7XHJcblx0XHRcdHN1YnJvdXRpbmdLZXkgPSBzdWJyb3V0aW5nS2V5cy5zaGlmdCgpO1xyXG5cdFx0XHRzdWJyb3V0aW5nS2V5Rm9yd2FyZCA9IHN1YnJvdXRpbmdLZXlzO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0c3Vicm91dGluZ0tleSA9IHN1YnJvdXRpbmdLZXlzO1xyXG5cdFx0XHRzdWJyb3V0aW5nS2V5Rm9yd2FyZCA9IF9pc051bWVyaWMoc3Vicm91dGluZ0tleSkgXHJcblx0XHRcdFx0PyBwYXJzZUludChzdWJyb3V0aW5nS2V5cykgKyAxIFxyXG5cdFx0XHRcdDogbnVsbDtcclxuXHRcdH1cclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdHZhciByb3V0ZXJJbnN0YW5jZSA9IFJlZ2lzdHJ5LmNyZWF0ZSgnUm91dGVyJyk7XHJcblx0XHR2YXIgc3Vicm91dGluZ0tleVR5cGUgPSAncGF0aG1hcCc7XHJcblx0XHRpZiAoX2lzTnVtZXJpYyhzdWJyb3V0aW5nS2V5KSkge1xyXG5cdFx0XHRzdWJyb3V0aW5nS2V5ID0gcGFyc2VJbnQoc3Vicm91dGluZ0tleSk7XHJcblx0XHRcdHN1YnJvdXRpbmdLZXlUeXBlID0gJ3BhdGhzcGxpdCc7XHJcblx0XHR9XHJcblx0XHR2YXIgcm91dGUgPSBwYXRoID0+IHtcclxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRcdGlmICh0aGlzLmFjdGl2ZSB8fCB0aGlzLmFjdGl2YXRpbmcpIHtcclxuXHRcdFx0XHR2YXIgb3duUGF0aCA9IFtdO1xyXG5cdFx0XHRcdF9lYWNoKHBhdGgsIChrZXksIHZhbCkgPT4ge1xyXG5cdFx0XHRcdFx0aWYgKGtleSA9PT0gc3Vicm91dGluZ0tleSkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRvd25QYXRoLnB1c2godmFsKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0XHRSZWZsZXguc2V0KHRoaXMsICdvd25QYXRoJywgb3duUGF0aC5qb2luKCcvJykpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFJlZmxleC5kZWwodGhpcywgJ293blBhdGgnKTtcclxuXHRcdFx0fVxyXG5cdFx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdFx0dmFyIHN1YnJvdXRpbmdLZXlWYWwgPSBwYXRoW3N1YnJvdXRpbmdLZXldO1xyXG5cdFx0XHRpZiAoKHRoaXMuYWN0aXZlIHx8IHRoaXMuYWN0aXZhdGluZykgJiYgdGhpcy5zdWJyb3V0ZXMgJiYgc3Vicm91dGluZ0tleVZhbCkge1xyXG5cdFx0XHRcdGlmICh0aGlzLnN1YnJvdXRlc1tzdWJyb3V0aW5nS2V5VmFsXSkge1xyXG5cdFx0XHRcdFx0aWYgKCF0aGlzLnN1YnJvdXRlc1tzdWJyb3V0aW5nS2V5VmFsXS5hY3RpdmUgJiYgIXRoaXMuc3Vicm91dGVzW3N1YnJvdXRpbmdLZXlWYWxdLmFjdGl2YXRpbmcpIHtcclxuXHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMuc3Vicm91dGVzW3N1YnJvdXRpbmdLZXlWYWxdLnNldEFjdGl2ZVN0YXRlKHRydWUpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0gZWxzZSBpZiAoIV9pc051bGwoc3Vicm91dGluZ0tleXMpKSB7XHJcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJzQwNDogJyArIHN1YnJvdXRpbmdLZXlWYWwsIHRoaXMuc3Vicm91dGluZ0tleSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2UgaWYgKHRoaXMuY3VycmVudC5hY3RpdmUpIHtcclxuXHRcdFx0XHRyZXR1cm4gdGhpcy5jdXJyZW50LmFjdGl2ZS5zZXRBY3RpdmVTdGF0ZShmYWxzZSk7XHJcblx0XHRcdH1cclxuXHRcdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHR9O1xyXG5cdFx0cm91dGUocm91dGVySW5zdGFuY2Vbc3Vicm91dGluZ0tleVR5cGVdKTtcclxuXHRcdFJlZmxleC5vYnNlcnZlKHJvdXRlckluc3RhbmNlLCBzdWJyb3V0aW5nS2V5VHlwZSwgcm91dGUpO1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0dGhpcy5nZXRJdGVtc0FycmF5KCkuZm9yRWFjaChyb3V0ZSA9PiByb3V0ZS5yb3V0ZShzdWJyb3V0aW5nS2V5Rm9yd2FyZCkpO1xyXG5cclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgUm91dGVzIGZyb20gZGVjbGFyYXRpb25zLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIG9iamVjdHxhcnJheVx0XHRcdHJvdXRlc1xyXG5cdCAqIEBwYXJhbSBvYmplY3R8ZnVuY3Rpb25cdFx0cm91dGVDbGFzc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiBvYmplY3R8YXJyYXlcclxuXHQgKi9cclxuXHRzdGF0aWMgY3JlYXRlUm91dGVzKHJvdXRlcywgcm91dGVDbGFzcyA9IFJvdXRlKSB7XHJcblx0XHRyZXR1cm4gc3VwZXIuY3JlYXRlRW50cmllcyhyb3V0ZXMsIHJvdXRlQ2xhc3MpO1xyXG5cdH1cclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBfYXJyTGFzdCBmcm9tICcuLi9hcnIvbGFzdC5qcyc7XHJcbmltcG9ydCBfbWVyZ2VDYWxsYmFjayBmcm9tICcuLi9vYmovbWVyZ2VDYWxsYmFjay5qcyc7XHJcbmltcG9ydCBfZWFjaCBmcm9tICcuLi9vYmovZWFjaC5qcyc7XHJcblxyXG4vKipcclxuICogQSBtdWx0aS1pbmhlcml0YW5jZSBpbXBsZW1lbnRzdGlvbi5cclxuICpcclxuICogQHBhcmFtIGFycmF5XHQgXHQuLi5jbGFzc2VzXHJcbiAqXHJcbiAqIEByZXR1cm4gb2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiguLi5jbGFzc2VzKSB7XHJcblx0XHJcblx0dmFyIFRyYXBzID0ge307XHJcblx0dmFyIFJldHJuRGlyZWN0aXZlID0gJ2xhc3QnO1xyXG5cdGlmIChfaXNBcnJheShhcmd1bWVudHNbMF0pKSB7XHJcblx0XHRjbGFzc2VzID0gYXJndW1lbnRzWzBdO1xyXG5cdFx0VHJhcHMgPSBhcmd1bWVudHNbMV07XHJcblx0XHRpZiAoYXJndW1lbnRzWzJdKSB7XHJcblx0XHRcdFJldHJuRGlyZWN0aXZlID0gYXJndW1lbnRzWzJdO1xyXG5cdFx0fVxyXG5cdH1cclxuXHR2YXIgQmFzZSA9IF9hcnJMYXN0KGNsYXNzZXMpO1xyXG5cdHZhciBzdXBlcnNNYXAgPSB7fTtcclxuXHR2YXIgTWl4aW4gPSBjbGFzcyBleHRlbmRzIEJhc2Uge1xyXG5cdFx0Y29uc3RydWN0b3IoLi4uYXJncykge1xyXG5cdFx0XHRzdXBlciguLi5hcmdzKTtcclxuXHRcdH1cclxuXHR9O1xyXG5cdC8vIEEgdHJhcCBmb3IgX2luc3RhbmNlb2YoKVxyXG5cdE1peGluLnByb3RvdHlwZXMgPSBjbGFzc2VzO1xyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdC8vIEV4dGVuZCAobWVyZ2UpIHByb3BlcnRpZXMgYnV0IGtlZXAgbWV0aG9kc1xyXG5cdGNsYXNzZXMuZm9yRWFjaChfY2xhc3MgPT4ge1xyXG5cdFx0Ly8gQ29weSBjb25zdCBtZW1iZXJzXHJcblx0XHRfbWVyZ2VDYWxsYmFjayhbTWl4aW4sIF9jbGFzc10sIChrZXksIG9iajEsIG9iajIpID0+IFsnbmFtZScsICdwcm90b3R5cGUnLCAncHJvdG90eXBlcycsICdsZW5ndGgnXS5pbmRleE9mKGtleSkgPT09IC0xKTtcclxuXHRcdF9tZXJnZUNhbGxiYWNrKFtNaXhpbi5wcm90b3R5cGUsIF9jbGFzcy5wcm90b3R5cGVdLCAoa2V5LCBvYmoxLCBvYmoyKSA9PiB7XHJcblx0XHRcdGlmIChbJ3Byb3RvdHlwZScsICdwcm90b3R5cGVzJ10uaW5kZXhPZihrZXkpID09PSAtMSkge1xyXG5cdFx0XHRcdGlmIChfaXNGdW5jdGlvbihvYmoyW2tleV0pKSB7XHJcblx0XHRcdFx0XHRpZiAoX2lzQXJyYXkoc3VwZXJzTWFwW2tleV0pKSB7XHJcblx0XHRcdFx0XHRcdHN1cGVyc01hcFtrZXldLnB1c2gob2JqMltrZXldKTtcclxuXHRcdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHRcdHN1cGVyc01hcFtrZXldID0gW29iajJba2V5XV07XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0XHR9XHJcblx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdH0sIHRydWUvKmRlZXBQcm9wcyovKTtcclxuXHR9KTtcclxuXHQvLyBFeHRlbmQgKHByb3h5KSBtZXRob2RzXHJcblx0X2VhY2goc3VwZXJzTWFwLCAobmFtZSwgc3VwZXJzKSA9PiB7XHJcblx0XHRpZiAobmFtZSA9PT0gJ2NvbnN0cnVjdG9yJykge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9XHJcblx0XHQvLyBOT1RFOiB0aGlzIG11c3Qgbm90IGJlIGRlZmluZWQgYXMgYW4gYXJyb3cgZnVuY3Rpb25cclxuXHRcdC8vIGZvciB0aGUgYmVuZWZpdCBvZiB0aGUgXCJ0aGlzXCIuXHJcblx0XHRNaXhpbi5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbiguLi5hcmdzKSB7XHJcblx0XHRcdGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkoVHJhcHMsIG5hbWUpICYmIF9pc0Z1bmN0aW9uKFRyYXBzW25hbWVdKSkge1xyXG5cdFx0XHRcdC8vIFdyYXAgYSBjYWxsIHRvIHRoZSB0cmFwLi4uXHJcblx0XHRcdFx0Ly8gU28gbWl4aW4gc3VwZXJzIGFyZSBwYXNzZWQgdG8gdHJhcHNcclxuXHRcdFx0XHRyZXR1cm4gVHJhcHNbbmFtZV0uY2FsbCh0aGlzLCBzdXBlcnMsIC4uLmFyZ3MpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdC8vIENhbGwgZWFjaCBzdXBlciBhbmQgcmV0dXJuXHJcblx0XHRcdFx0Ly8gdGhlIGxhc3Qgb25lJ3MgcmV0dXJuIHZhbHVlXHJcblx0XHRcdFx0dmFyIHN1cGVyc1JldHVyblZhbHVlcyA9IFtdO1xyXG5cdFx0XHRcdHN1cGVycy5mb3JFYWNoKHN1cHIgPT4ge1xyXG5cdFx0XHRcdFx0c3VwZXJzUmV0dXJuVmFsdWVzLnB1c2goc3Vwci5jYWxsKHRoaXMsIC4uLmFyZ3MpKTtcclxuXHRcdFx0XHR9KVxyXG5cdFx0XHRcdHJldHVybiBfYXJyTGFzdChzdXBlcnNSZXR1cm5WYWx1ZXMpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cdH0pO1xyXG5cdHJldHVybiBNaXhpbjtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9Sb3V0ZSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jdWkvc3JjL2FwcC9yb3V0aW5nL1JvdXRlLmpzJztcclxuaW1wb3J0IFJlZmxleCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9yZWZsZXgnO1xyXG5cclxuIGV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvdXRlIGV4dGVuZHMgX1JvdXRlIHtcclxuXHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihpdGVtcyA9IHt9LCBwYXJhbXMgPSB7fSkge1xyXG4gICAgICAgIHN1cGVyKGl0ZW1zLCBwYXJhbXMpO1xyXG4gICAgICAgIFJlZmxleC5vYnNlcnZlKHRoaXMsICdjdXJyZW50LmFjdGl2ZScsIGFjdGl2ZVN1YnJvdXRlID0+IHtcclxuICAgICAgICAgICAgaWYgKGFjdGl2ZVN1YnJvdXRlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlU3Vicm91dGUuY3VycmVudC5hY3RpdmUgfHwgYWN0aXZlU3Vicm91dGUuY3VycmVudC5hY3RpdmF0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlzcGxheSAhPT0gJ2hpZGRlbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxleC5zZXQodGhpcywgJ2Rpc3BsYXknLCAnaGlkZGVuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmRpc3BsYXkgIT09ICdtaW5pbWl6ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxleC5zZXQodGhpcywgJ2Rpc3BsYXknLCAnbWluaW1pemVkJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5kaXNwbGF5ICE9PSAnbWF4aW1pemVkJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJlZmxleC5zZXQodGhpcywgJ2Rpc3BsYXknLCAnbWF4aW1pemVkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB7b2JzZXJ2ZURvd246dHJ1ZX0pO1xyXG4gICAgfVxyXG5cclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIFJvdXRlcyBmcm9tIGRlY2xhcmF0aW9ucy5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3R8YXJyYXlcdFx0XHRyb3V0ZXNcclxuXHQgKiBAcGFyYW0gb2JqZWN0fGZ1bmN0aW9uXHRcdHJvdXRlQ2xhc3NcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gb2JqZWN0fGFycmF5XHJcblx0ICovXHJcblx0c3RhdGljIGNyZWF0ZVJvdXRlcyhyb3V0ZXMsIHJvdXRlQ2xhc3MgPSBSb3V0ZSkge1xyXG5cdFx0cmV0dXJuIHN1cGVyLmNyZWF0ZVJvdXRlcyhyb3V0ZXMsIHJvdXRlQ2xhc3MpO1xyXG5cdH1cclxufTsiLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9qcy9pc0FycmF5LmpzJztcclxuaW1wb3J0IF9pc0Z1bmN0aW9uIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBfYXJyRnJvbSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mcm9tLmpzJztcclxuaW1wb3J0IF9yZW1vdmUgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvcmVtb3ZlLmpzJztcclxuaW1wb3J0IEFuaW0gZnJvbSAnLi9BbmltLmpzJztcclxuaW1wb3J0IHsgUmVmbGV4IH0gZnJvbSAnQHdlYi1uYXRpdmUtanMvY2h0bWwnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFRoZSB0aW1lbGluZSBjbGFzc1xyXG4gKiBmb3Igd29ya2luZyB3aXRoIG11bHRpcGxlIGFuaW1hdGlvbnMuXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG4gXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBDcmVhdGVzIGFuIGFtaWF0aW9uIGZyb20ga2V5ZnJhbWVzLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGFycmF5XHRcdFx0XHRcdGFuaW1hdGlvbnNcclxuXHQgKiBAcGFyYW0gb2JqZWN0XHRcdFx0XHRwYXJhbXNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdGhpc1xyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGFuaW1hdGlvbnMgPSBbXSwgcGFyYW1zID0ge30pIHtcclxuXHRcdC8vIFByaXZhdGUgcHJvcGVydGllc1xyXG5cdFx0dGhpcy4kID0ge1xyXG5cdFx0XHRhbmltYXRpb25zOiBbXSxcclxuXHRcdFx0ZmluaXNoQ2FsbGJhY2tzOiBbXSxcclxuXHRcdFx0Y2FuY2VsQ2FsbGJhY2tzOiBbXSxcclxuXHRcdFx0cGFyYW1zOiBwYXJhbXMsXHJcblx0XHR9O1xyXG5cdFx0YW5pbWF0aW9ucy5mb3JFYWNoKGFuaW0gPT4ge1xyXG5cdFx0XHR0aGlzLmFkZChhbmltKTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQWRkcyBhbiBhbmltYXRpb24gaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gQW5pbVx0XHRcdCBhbmltXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHRoaXNcclxuXHQgKi9cclxuXHRhZGQoYW5pbSkge1xyXG5cdFx0aWYgKCEoYW5pbSBpbnN0YW5jZW9mIEFuaW0pKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignQXJndW1lbnQjMSBtdXN0IGJlIGFuIEFuaW0gaW5zdGFuY2UhJyk7XHJcblx0XHR9XHJcblx0XHR0aGlzLiQuYW5pbWF0aW9ucy5wdXNoKGFuaW0pO1xyXG5cdFx0aWYgKHRoaXMuJC5hZGRDYWxsYmFjaykge1xyXG5cdFx0XHR0aGlzLiQuYWRkQ2FsbGJhY2soYW5pbSk7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogUmVtb3ZlcyBhbiBhbmltYXRpb24gaW5zdGFuY2UuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gQW5pbVx0XHRcdCBhbmltXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHRoaXNcclxuXHQgKi9cclxuXHRyZW1vdmUoYW5pbSkge1xyXG5cdFx0aWYgKCEoYW5pbSBpbnN0YW5jZW9mIEFuaW0pKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcignQXJndW1lbnQjMSBtdXN0IGJlIGFuIEFuaW0gaW5zdGFuY2UhJyk7XHJcblx0XHR9XHJcblx0XHRfcmVtb3ZlKHRoaXMuJC5hbmltYXRpb25zLCBhbmltKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBCaW5kcyBhIGZ1bmN0aW9uIHRvIHRoZSBcIm9uZmluaXNoXCIgZXZlbnQuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb24gY2FsbGJhY2tcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdGhpc1xyXG5cdCAqXHJcblx0ICovXHJcblx0b25maW5pc2goY2FsbGJhY2spIHtcclxuXHRcdGlmICghX2lzRnVuY3Rpb24oY2FsbGJhY2spKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIk9uZmluaXNoKCkgYWNjZXB0cyBvbmx5IGEgZnVuY3Rpb24uXCIpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy4kLmZpbmlzaENhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBCaW5kcyBhIGZ1bmN0aW9uIHRvIHRoZSBcIm9uY2FuY2VsXCIgZXZlbnQuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb24gY2FsbGJhY2tcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdGhpc1xyXG5cdCAqXHJcblx0ICovXHJcblx0b25jYW5jZWwoY2FsbGJhY2spIHtcclxuXHRcdGlmICghX2lzRnVuY3Rpb24oY2FsbGJhY2spKSB7XHJcblx0XHRcdHRocm93IG5ldyBFcnJvcihcIk9uY2FuY2VsKCkgYWNjZXB0cyBvbmx5IGEgZnVuY3Rpb24uXCIpO1xyXG5cdFx0fVxyXG5cdFx0dGhpcy4kLmNhbmNlbENhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBSZXR1cm5zIHRoZSBhdmVyYWdlIG9mIGFsbCBhbmltYXRpb24ncyBwcm9ncmVzcy5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gbnVtYmVyXHJcblx0ICovXHJcblx0cHJvZ3Jlc3MoKSB7XHJcblx0XHRyZXR1cm4gdGhpcy4kLmFuaW1hdGlvbnMucmVkdWNlKChhLCBiKSA9PiBhLnByb2dyZXNzKCkgKyBiLnByb2dyZXNzKCksIDApIC8gdGhpcy4kLmFuaW1hdGlvbnMubGVuZ3RoO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBQbGF5cyBhbGwgYW5pbWF0aW9ucy5cclxuXHQgKiBSZXR1cm5zIGFuIFwib25maW5pc2hcIiBwcm9taXNlLlxyXG5cdCAqXHJcblx0ICogQHJldHVybiBQcm9taXNlXHJcblx0ICovXHJcblx0cGxheSgpIHtcclxuXHRcdHRoaXMuJC5zdG9wcGVkID0gZmFsc2U7XHJcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHR2YXIgYWxyZWFkeVJlc29sdmVkLCBhbHJlYWR5UmVqZWN0ZWQ7XHJcblx0XHRcdHZhciBoYW5kbGVGaW5pc2ggPSAoKSA9PiB7XHJcblx0XHRcdFx0aWYgKCFhbHJlYWR5UmVzb2x2ZWQpIHtcclxuXHRcdFx0XHRcdGFscmVhZHlSZXNvbHZlZCA9IHRydWU7XHJcblx0XHRcdFx0XHR0aGlzLiQuZmluaXNoQ2FsbGJhY2tzLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soKSk7XHJcblx0XHRcdFx0XHRyZXMoKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblx0XHRcdHZhciBoYW5kbGVDYW5jZWwgPSAoKSA9PiB7XHJcblx0XHRcdFx0aWYgKCFhbHJlYWR5UmVqZWN0ZWQpIHtcclxuXHRcdFx0XHRcdGFscmVhZHlSZWplY3RlZCA9IHRydWU7XHJcblx0XHRcdFx0XHR0aGlzLiQuY2FuY2VsQ2FsbGJhY2tzLmZvckVhY2goY2FsbGJhY2sgPT4gY2FsbGJhY2soKSk7XHJcblx0XHRcdFx0XHRyZWooKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH07XHJcblx0XHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0XHR2YXIgdG90YWwgPSB0aGlzLiQuYW5pbWF0aW9ucy5sZW5ndGg7XHJcblx0XHRcdHRoaXMuJC5hbmltYXRpb25zLmZvckVhY2goYW5pbSA9PiB7XHJcblx0XHRcdFx0YW5pbS5wbGF5KCkudGhlbigoKSA9PiB7XHJcblx0XHRcdFx0XHR0b3RhbCAtLTtcclxuXHRcdFx0XHRcdGlmICghdG90YWwgPiAwKSB7XHJcblx0XHRcdFx0XHRcdGhhbmRsZUZpbmlzaCgpO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH0pLmNhdGNoKGhhbmRsZUNhbmNlbCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHR0aGlzLiQuYWRkQ2FsbGJhY2sgPSBlbnRyeSA9PiB7XHJcblx0XHRcdFx0aWYgKCF0aGlzLiQuc3RvcHBlZCkge1xyXG5cdFx0XHRcdFx0dG90YWwgKys7XHJcblx0XHRcdFx0XHRlbnRyeS5wbGF5KCkudGhlbigoKSA9PiB7XHJcblx0XHRcdFx0XHRcdHRvdGFsIC0tO1xyXG5cdFx0XHRcdFx0XHRpZiAoIXRvdGFsID4gMCkge1xyXG5cdFx0XHRcdFx0XHRcdGhhbmRsZUZpbmlzaCgpO1xyXG5cdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHR9KS5jYXRjaChoYW5kbGVDYW5jZWwpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fTtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHRcdFxyXG5cdC8qKlxyXG5cdCAqIFNlZWtzIGFsbCBhbmltYXRpb25zIHRvIGEgdGltZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBpbnQgXHRcdHRvXHJcblx0ICogQHBhcmFtIGFycmF5ICAgICBvbmx5XHJcblx0ICogQHBhcmFtIGFycmF5XHRcdGV4Y2VwdFxyXG5cdCAqXHJcblx0ICogQHJldHVybiB0aGlzXHJcblx0ICovXHJcblx0c2Vlayh0bywgb25seSA9IFtdLCBleGNlcHQgPSBbXSkge1xyXG5cdFx0Ly8gVGhlIHZhbGlkaXR5IG9mIHRoZSBcInRvXCIgaW5wdXQgaXMgaGFuZGxlZCBieSBlYWNoIGFuaW0uLi5cclxuICAgICAgICB0aGlzLmVhY2goYW5pbSA9PiBhbmltLnNlZWsodG8pLCBvbmx5LCBleGNlcHQpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUGF1c2VzIGFsbCBhbmltYXRpb25zLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGFycmF5ICAgICBvbmx5XHJcblx0ICogQHBhcmFtIGFycmF5XHRcdGV4Y2VwdFxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0cGF1c2Uob25seSA9IFtdLCBleGNlcHQgPSBbXSkge1xyXG5cdFx0dGhpcy4kLnN0b3BwZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZWFjaChhbmltID0+IGFuaW0ucGF1c2UoKSwgb25seSwgZXhjZXB0KTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogRmluaXNoZXMgYWxsIGFuaW1hdGlvbnMuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gYXJyYXkgICAgIG9ubHlcclxuXHQgKiBAcGFyYW0gYXJyYXlcdFx0ZXhjZXB0XHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGZpbmlzaChvbmx5ID0gW10sIGV4Y2VwdCA9IFtdKSB7XHJcblx0XHR0aGlzLiQuc3RvcHBlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5lYWNoKGFuaW0gPT4gYW5pbS5maW5pc2goKSwgb25seSwgZXhjZXB0KTtcclxuXHR9XHJcblx0ICAgIFx0XHJcblx0LyoqXHJcblx0ICogQ2FuY2VscyBhbGwgZWZmZWN0cy5cclxuXHQgXHJcblx0ICogQHBhcmFtIGFycmF5ICAgICBvbmx5XHJcblx0ICogQHBhcmFtIGFycmF5XHRcdGV4Y2VwdFxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0Y2FuY2VsKG9ubHkgPSBbXSwgZXhjZXB0ID0gW10pIHtcclxuXHRcdHRoaXMuJC5zdG9wcGVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmVhY2goYW5pbSA9PiBhbmltLmNhbmNlbCgpLCBvbmx5LCBleGNlcHQpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogQ2xlYXJzIGFsbCBhbmltYXRpb25zLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGFycmF5ICAgICBvbmx5XHJcblx0ICogQHBhcmFtIGFycmF5XHRcdGV4Y2VwdFxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0Y2xlYXIob25seSA9IFtdLCBleGNlcHQgPSBbXSkge1xyXG5cdFx0dGhpcy4kLmFuaW1hdGlvbnMgPSB0aGlzLiQuYW5pbWF0aW9ucy5maWx0ZXIoYW5pbSA9PiB7XHJcblx0XHRcdGlmICgoIWV4Y2VwdCB8fCAhX2FyckZyb20oZXhjZXB0LCBmYWxzZS8qY2FzdE9iamVjdCovKS5pbmNsdWRlcyhhbmltLmVsKSlcclxuICAgICAgICAgICAgJiYgKCFvbmx5IHx8IF9hcnJGcm9tKG9ubHksIGZhbHNlLypjYXN0T2JqZWN0Ki8pLmluY2x1ZGVzKGFuaW0uZWwpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIExvb3BzIHRocnUgZW50cmllcywgc2VsZWN0aXZlbHkuXHJcblx0IFxyXG5cdCAqIEBwYXJhbSBhcnJheSAgICAgb25seVxyXG5cdCAqIEBwYXJhbSBhcnJheVx0XHRleGNlcHRcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGVhY2goY2FsbGJhY2ssIG9ubHkgPSBbXSwgZXhjZXB0ID0gW10pIHtcclxuICAgICAgICB0aGlzLiQuYW5pbWF0aW9ucy5mb3JFYWNoKGFuaW0gPT4ge1xyXG4gICAgICAgICAgICBpZiAoKCFleGNlcHQgfHwgIV9hcnJGcm9tKGV4Y2VwdCwgZmFsc2UvKmNhc3RPYmplY3QqLykuaW5jbHVkZXMoYW5pbS5lbCkpXHJcbiAgICAgICAgICAgICYmICghb25seSB8fCBfYXJyRnJvbShvbmx5LCBmYWxzZS8qY2FzdE9iamVjdCovKS5pbmNsdWRlcyhhbmltLmVsKSkpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGFuaW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn07IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IFJlZmxleCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9yZWZsZXgnO1xyXG5pbXBvcnQgUmVmbG93IGZyb20gJy4uLy4uL2NodG1sL1JlZmxvdy5qcyc7XHJcbmltcG9ydCBBbmltIGZyb20gJy4uLy4uL2NodG1sL2FuaW0vQW5pbS5qcyc7XHJcbmltcG9ydCB1aVRyYW5zbGF0ZVRvIGZyb20gJy4uLy4uL2NodG1sL3VpL3RyYW5zbGF0ZVRvLmpzJztcclxuaW1wb3J0IGNzcyBmcm9tICcuLi8uLi9jaHRtbC9jc3MvY3NzLmpzJztcclxuaW1wb3J0IGNzc1dyaXRlQXN5bmMgZnJvbSAnLi4vLi4vY2h0bWwvY3NzL3dyaXRlQXN5bmMuanMnO1xyXG5pbXBvcnQgb24gZnJvbSAnLi4vLi4vY2h0bWwvZXZ0L29uLmpzJztcclxuaW1wb3J0IG9mZiBmcm9tICcuLi8uLi9jaHRtbC9ldnQvb2ZmLmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogVGhlIFRyYW5zbGF0ZSBjbGFzc1xyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcblx0XHRcdFxyXG5jb25zdCBUcmFuc2xhdGUgPSBjbGFzcyB7XHJcblxyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZXMgYSBUcmFuc2xhdGlvbiBpbnN0YW5jZS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBIVE1MRWxlbWVudFx0XHRcdGVsXHJcblx0ICogQHBhcmFtIG9iamVjdFx0XHRcdFx0cGFyYW1zXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHRoaXNcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihlbCwgcGFyYW1zID0ge30pIHtcclxuXHRcdHRoaXMuZWwgPSBlbDtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBCaW5kIGV2ZW50c1xyXG5cdFx0Ly8gLS0tLS0tLS0tLS0tLS0tLS1cclxuXHRcdG9uKHRoaXMuZWwsICdwYW5zdGFydCcsIHRoaXMuX29uUGFuU3RhcnQuYmluZCh0aGlzKSk7XHJcblx0XHRvbih0aGlzLmVsLCAncGFubW92ZScsIHRoaXMuX29uUGFuTW92ZS5iaW5kKHRoaXMpKTtcclxuXHRcdG9uKHRoaXMuZWwsIFsncGFuZW5kJywgJ3BhbmNhbmNlbCddLCB0aGlzLl9vblBhbkVuZC5iaW5kKHRoaXMpKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIEluaXRpYWxpemVzIHRoZSBUcmFuc2xhdGlvbiBpbnN0YW5jZSB3aXRoIGEgcmVnaW9uLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIEhUTUxFbGVtZW50fHdpbmRvd1x0cmVnaW9uXHJcblx0ICogQHBhcmFtIHN0cmluZ1x0XHRcdFx0YXhpc1xyXG5cdCAqXHJcblx0ICogQHJldHVybiB0aGlzXHJcblx0ICovXHJcblx0d2l0aChyZWdpb24sIGF4aXMgPSAneCcpIHtcclxuXHRcdHRoaXMucmVnaW9uID0gcmVnaW9uO1xyXG5cdFx0dGhpcy5heGlzID0gYXhpcztcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHQvLyBJbml0aWFsaXplXHJcblx0XHQvLyAtLS0tLS0tLS0tLS0tLS0tLVxyXG5cdFx0dmFyIGluaXQgPSAoKSA9PiB7XHJcblx0XHRcdHZhciBhbmltUGFyYW1zID0gX2luaGVyaXQoe2R1cmF0aW9uOjQwMH0sIHRoaXMuJC5wYXJhbXMuYW5pbWF0aW9uIHx8IHt9KTtcclxuXHRcdFx0UmVmbG93Lm9ucmVhZCgoKSA9PiB7XHJcblx0XHRcdFx0dmFyIHRyYW5zbGF0ZSA9IHVpVHJhbnNsYXRlVG8odGhpcy5lbCwgdGhpcy5yZWdpb24sIHt4OidlbmQnLCB5OidjZW50ZXInfSk7XHJcblx0XHRcdFx0dGhpcy5tb3ZlYWJsZURpc3RhbmNlID0gdHJhbnNsYXRlLnRvLnRyYW5zbGF0ZVt0aGlzLmF4aXMgPT09ICd4JyA/IDAgOiAxXTtcclxuXHRcdFx0XHR0aGlzLmFuaW0gPSBuZXcgQW5pbSh0aGlzLmVsLCBbXHJcblx0XHRcdFx0XHR7dHJhbnNmb3JtOiB0cmFuc2xhdGUuY3VycmVudC5mcm9tfSxcclxuXHRcdFx0XHRcdHt0cmFuc2Zvcm06IHRyYW5zbGF0ZS50b31cclxuXHRcdFx0XHRdLCBhbmltUGFyYW1zKTtcclxuXHRcdFx0XHR0aGlzLmFuaW0ucGF1c2UoKTtcclxuXHRcdFx0XHR0aGlzLmN1cnJlbnREaXN0YW5jZSA9IDA7XHJcblx0XHRcdFx0dGhpcy5wcm9ncmVzcyA9IDA7XHJcblx0XHRcdH0pO1xyXG5cdFx0fTtcclxuXHRcdC8vIC0tLS0tLS0tLS0tLS0tLS0tXHJcblx0XHRpZiAodGhpcy4kcGFyYW1zLnN0YXJ0dXBSZXNldCkge1xyXG5cdFx0XHRSZWZsb3cub25yZWFkKCgpID0+IHtcclxuXHRcdFx0XHR2YXIgc3RhcnR1cCA9IHVpVHJhbnNsYXRlVG8odGhpcy5lbCwgdGhpcy5yZWdpb24sIHt4OidzdGFydCcsIHk6J2NlbnRlcid9KTtcclxuXHRcdFx0XHRjc3NXcml0ZUFzeW5jKHRoaXMuZWwsIHt0cmFuc2Zvcm06IHN0YXJ0dXAudG99KS50aGVuKGluaXQoKSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0aW5pdCgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBIYW5kbGUgcGFuIHN0YXJ0LlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIEV2ZW50XHRcdFx0XHRlXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRfb25QYW5TdGFydChlKSB7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBIYW5kbGUgcGFuIG1vdmUuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gRXZlbnRcdFx0XHRcdGVcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdF9vblBhbk1vdmUoZSkge1xyXG5cdFx0dGhpcy5wcm9ncmVzcyA9ICh0aGlzLmN1cnJlbnREaXN0YW5jZSArIGUuZGVsdGFYKSAvIHRoaXMubW92ZWFibGVEaXN0YW5jZTtcclxuXHRcdHRoaXMuYW5pbS5zZWVrKHRoaXMucHJvZ3Jlc3MpO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBIYW5kbGUgcGFuIGVuZC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBFdmVudFx0XHRcdFx0ZVxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0X29uUGFuRW5kKGUpIHtcclxuXHRcdHRoaXMucHJvZ3Jlc3MgPSB0aGlzLmFuaW0ucHJvZ3Jlc3MoKTtcclxuXHRcdHRoaXMuY3VycmVudERpc3RhbmNlID0gdGhpcy5wcm9ncmVzcyAqIHRoaXMubW92ZWFibGVEaXN0YW5jZTtcclxuXHRcdGlmICh0aGlzLnByb2dyZXNzID4gMC41KSB7XHJcblx0XHRcdHRoaXMuYW5pbS5wbGF5KCkudGhlbigoKSA9PiB7XHJcblx0XHRcdFx0dGhpcy5wcm9ncmVzcyA9IDE7XHJcblx0XHRcdFx0dGhpcy5jdXJyZW50RGlzdGFuY2UgPSB0aGlzLm1vdmVhYmxlRGlzdGFuY2U7XHJcblx0XHRcdFx0dGhpcy5hbmltLnBhdXNlKCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy5hbmltLnJldmVyc2UoKS5wbGF5KCkudGhlbigoKSA9PiB7XHJcblx0XHRcdFx0dGhpcy5wcm9ncmVzcyA9IDA7XHJcblx0XHRcdFx0dGhpcy5jdXJyZW50RGlzdGFuY2UgPSAwO1xyXG5cdFx0XHRcdHRoaXMuYW5pbS5yZXZlcnNlKCkucGF1c2UoKTtcclxuXHRcdFx0fSk7XHJcblx0XHR9XHJcblx0XHQvKipcclxuXHRcdCovXHJcblx0fVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBUcmFuc2xhdGU7IiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcclxuXHJcbi8qKlxyXG4gKiBUZWxscyBpZiBhbiBvYmplY3QgaXMgZGlyZWN0IGluc3RhbmNlIG9mIE9iamVjdC5wcm90b3R5cGUuXHJcbiAqIFF1aXRlIHVzZWZ1bCBpbiBkaWZmZXJlbnRpYXRpbmcgbmF0aXZlIG9iamVjdHMgYW5kIGNsYXNzIGluc3RhbmNlcyBmcm9tIHBsYWluIG9iamVjdHMgKHt9KS5cclxuICpcclxuICogQHBhcmFtIG9iamVjdCBcdG9ialxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iaikge1xyXG5cdHJldHVybiBfaXNPYmplY3Qob2JqKSAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gT2JqZWN0LnByb3RvdHlwZTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBUZWxscyBpZiB2YWwgaXMgdW5kZWZpbmVkIG9yIGlzIG9mIHR5cGUgXCJib29sZWFuXCIuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHJpbmcgXHR2YWxcclxuICpcclxuICogQHJldHVybiBib29sXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWwpIHtcclxuXHRyZXR1cm4gdmFsID09PSB0cnVlIHx8IHZhbCA9PT0gZmFsc2U7XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfaXNOdW1iZXIgZnJvbSAnLi4vanMvaXNOdW1iZXIuanMnO1xyXG5pbXBvcnQgX2lzQXJyYXkgZnJvbSAnLi4vanMvaXNBcnJheS5qcyc7XHJcbmltcG9ydCBfaXNPYmplY3QgZnJvbSAnLi4vanMvaXNPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzVHlwZU9iamVjdCBmcm9tICcuLi9qcy9pc1R5cGVPYmplY3QuanMnO1xyXG5pbXBvcnQgX2lzRnVuY3Rpb24gZnJvbSAnLi4vanMvaXNGdW5jdGlvbi5qcyc7XHJcbmltcG9ydCBfaXNQbGFpbk9iamVjdCBmcm9tICcuLi9qcy9pc1BsYWluT2JqZWN0LmpzJztcclxuaW1wb3J0IF9jb21wYXJlQ2FsbGJhY2sgZnJvbSAnLi9jb21wYXJlQ2FsbGJhY2suanMnO1xyXG5cclxuLyoqXHJcbiAqIEFzc2VydHMgKG1lbWJlcnMgb2YpIHRoZSBmaXJzdCB2YWx1ZSBhZ2FpbnN0IChtZW1iZXJzIG9mKSBzdWJzZXF1ZW50IHZhbHVlcy5cclxuICogQXNzZXJ0aW9uIGNvdWxkIGJlIFRSVUUsIEZBTFNFLCBvciBjdXN0b20uXHJcbiAqXHJcbiAqIEBwYXJhbSBtaXhlZCBcdFx0XHRvYmoxXHJcbiAqIEBwYXJhbSBtaXhlZCBcdFx0XHRvYmoyXHJcbiAqIEBwYXJhbSBib29sfGZ1bmN0aW9uXHRcdGFzc2VydGlvblxyXG4gKiBAcGFyYW0gaW50XHRcdFx0XHRkZXB0aFxyXG4gKlxyXG4gKiBAcmV0dXJuIGJvb2xcclxuICovXHJcbmNvbnN0IF9ldmVuID0gZnVuY3Rpb24ob2JqMSwgb2JqMiwgYXNzZXJ0aW9uID0gdHJ1ZSwgZGVwdGggPSAxKSB7XHJcblx0aWYgKF9pc0FycmF5KG9iajEpICYmIF9pc0FycmF5KG9iajIpICYmIG9iajEubGVuZ3RoICE9PSBvYmoyLmxlbmd0aCkge1xyXG5cdFx0cmV0dXJuICFhc3NlcnRpb247XHJcblx0fVxyXG5cdGlmIChfaXNPYmplY3Qob2JqMSkgJiYgX2lzT2JqZWN0KG9iajIpKSB7XHJcblx0XHR2YXIgb2JqMUtleXMgPSBPYmplY3Qua2V5cyhvYmoxKTtcclxuXHRcdHZhciBvYmoyS2V5cyA9IE9iamVjdC5rZXlzKG9iajIpO1xyXG5cdFx0aWYgKCFvYmoxS2V5cy5sZW5ndGggJiYgIW9iajJLZXlzLmxlbmd0aCkge1xyXG5cdFx0XHQvLyBPYmplY3RzIHRoYXQgd29uJ3Qgc2hvdyBrZXlzIG11c3QgYmUgY29tcGFyZWQgYnkgaW5zdGFuY2VcclxuXHRcdFx0Ly8gTWFueSBuYXRpdmUgb2JqZWN0cyB3b24ndC4gU28gd2UgY2FuJ3QganVkZ2UgYnkga2V5cyBhbG9uZS5cclxuXHRcdFx0cmV0dXJuIF9pc1BsYWluT2JqZWN0KG9iajEpICYmIF9pc1BsYWluT2JqZWN0KG9iajIpIFxyXG5cdFx0XHRcdD8gYXNzZXJ0aW9uXHJcblx0XHRcdFx0OiAob2JqMSA9PT0gb2JqMikgPT09IGFzc2VydGlvbjtcclxuXHRcdH1cclxuXHRcdGlmICghX2V2ZW4ob2JqMUtleXMsIG9iajJLZXlzKSkge1xyXG5cdFx0XHRyZXR1cm4gIWFzc2VydGlvbjtcclxuXHRcdH1cclxuXHR9XHJcblx0aWYgKGRlcHRoID4gMCAmJiAoKF9pc0FycmF5KG9iajEpICYmIF9pc0FycmF5KG9iajIpKSB8fCAoX2lzT2JqZWN0KG9iajEpICYmIF9pc09iamVjdChvYmoyKSkpKSB7XHJcblx0XHR2YXIgcmVzdWx0ID0gX2NvbXBhcmVDYWxsYmFjayhvYmoxLCBvYmoyLCAodjEsIHYyKSA9PiB7XHJcblx0XHRcdHJldHVybiBfZXZlbih2MSwgdjIsIGFzc2VydGlvbiwgZGVwdGggLSAxKTtcclxuXHRcdH0sIGZhbHNlLypuZXRDb21wYXJpc29uKi8sIGZhbHNlLypjb250cmFzdCovLCB0cnVlLypyZXR1cm5PbkZpcnN0RmFsc2UqLyk7XHJcblx0XHRyZXR1cm4gX2lzQXJyYXkocmVzdWx0KSBcclxuXHRcdFx0PyByZXN1bHQubGVuZ3RoID09PSBvYmoxLmxlbmd0aCAmJiByZXN1bHQubGVuZ3RoID09PSBvYmoyLmxlbmd0aCBcclxuXHRcdFx0OiAoX2lzT2JqZWN0KHJlc3VsdCkgJiYgX2lzT2JqZWN0KG9iajEpIFxyXG5cdFx0XHRcdD8gT2JqZWN0LmtleXMocmVzdWx0KS5sZW5ndGggPT09IE9iamVjdC5rZXlzKG9iajEpLmxlbmd0aCAmJiBPYmplY3Qua2V5cyhyZXN1bHQpLmxlbmd0aCA9PT0gIE9iamVjdC5rZXlzKG9iajIpLmxlbmd0aCBcclxuXHRcdFx0XHQ6IHJlc3VsdCk7XHJcblx0fVxyXG5cdHJldHVybiBfaXNGdW5jdGlvbihhc3NlcnRpb24pID8gYXNzZXJ0aW9uKG9iajEsIG9iajIpIDogKFxyXG5cdFx0X2lzTnVtYmVyKG9iajEpICYmIF9pc051bWJlcihvYmoyKSAmJiBpc05hTihvYmoxKSAmJiBpc05hTihvYmoyKSBcclxuXHRcdFx0PyBhc3NlcnRpb24gXHJcblx0XHRcdDogKG9iajEgPT09IG9iajIpID09PSBhc3NlcnRpb25cclxuXHQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBleHBvcnRzXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBfZXZlbjtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IF9pc0FycmF5IGZyb20gJy4uL2pzL2lzQXJyYXkuanMnO1xyXG5pbXBvcnQgX2lzT2JqZWN0IGZyb20gJy4uL2pzL2lzT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc1R5cGVPYmplY3QgZnJvbSAnLi4vanMvaXNUeXBlT2JqZWN0LmpzJztcclxuaW1wb3J0IF9pc0Jvb2xlYW4gZnJvbSAnLi4vanMvaXNCb29sZWFuLmpzJztcclxuaW1wb3J0IF9lYWNoIGZyb20gJy4vZWFjaC5qcyc7XHJcblxyXG4vKipcclxuICogR2V0cyB0aGUgbWF0Y2goZXMpIGJldHdlZW4gKG1lbWJlcnMgb2YpIHR3byB2YWx1ZXM7XHJcbiAqIGFzc2VydGlvbiBvcHRpb25hbGx5IGN1c3RvbS5cclxuICpcclxuICogQHBhcmFtIG1peGVkIFx0XHRcdG9iMVxyXG4gKiBAcGFyYW0gbWl4ZWQgXHRcdFx0b2JqMlxyXG4gKiBAcGFyYW0gc3RyaW5nfGZ1bmN0aW9uXHRhc3NlcnRpb25cclxuICogQHBhcmFtIGJvb2xcdFx0XHRcdG5ldENvbXBhcmlzb25cclxuICogQHBhcmFtIGJvb2xcdFx0XHRcdGNvbnRyYXN0XHJcbiAqIEBwYXJhbSBib29sXHRcdFx0XHRyZXR1cm5PbkZpcnN0RmFsc2VcclxuICpcclxuICogQHJldHVybiBib29sfGFycmF5fG9iamVjdFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqMSwgb2JqMiwgYXNzZXJ0aW9uID0gdHJ1ZSwgbmV0Q29tcGFyaXNvbiA9IHRydWUsIGNvbnRyYXN0ID0gZmFsc2UsIHJldHVybk9uRmlyc3RGYWxzZSA9IGZhbHNlKSB7XHJcblx0aWYgKF9pc0FycmF5KG9iajEpICYmIF9pc0FycmF5KG9iajIpKSB7XHJcblx0XHR2YXIgcmVzdWx0ID0gW107XHJcblx0XHR2YXIgY29udG4gPSB0cnVlO1xyXG5cdFx0b2JqMS5mb3JFYWNoKHYxID0+IHtcclxuXHRcdFx0aWYgKCFjb250bikge1xyXG5cdFx0XHRcdHJldHVybjtcclxuXHRcdFx0fVxyXG5cdFx0XHR2YXIgdGVzdFBhc3MgPSBmYWxzZTtcclxuXHRcdFx0X2VhY2gob2JqMiwgKGssIHYyKSA9PiB7XHJcblx0XHRcdFx0aWYgKCF0ZXN0UGFzcyB8fCAobmV0Q29tcGFyaXNvbiAmJiBfaXNUeXBlT2JqZWN0KHYxKSkpIHtcclxuXHRcdFx0XHRcdHRlc3RQYXNzID0gYXNzZXJ0aW9uKHYxLCB2Mik7XHJcblx0XHRcdFx0XHRpZiAoKF9pc0FycmF5KHRlc3RQYXNzKSAmJiAhdGVzdFBhc3MubGVuZ3RoKSB8fCAoX2lzT2JqZWN0KHRlc3RQYXNzKSAmJiAhT2JqZWN0LmtleXModGVzdFBhc3MpLmxlbmd0aCkpIHtcclxuXHRcdFx0XHRcdFx0dGVzdFBhc3MgPSBmYWxzZTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdGlmIChfaXNUeXBlT2JqZWN0KHRlc3RQYXNzKSAmJiBuZXRDb21wYXJpc29uKSB7XHJcblx0XHRcdFx0XHRcdC8vIEZ1cnRoZXIgcmVjdXJzaW9ucyBzaG91bGQgdXNlIHRoaXMgdGVzdFBhc3MgYXMgdjFcclxuXHRcdFx0XHRcdFx0djEgPSB0ZXN0UGFzcztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRpZiAoX2lzVHlwZU9iamVjdCh0ZXN0UGFzcykpIHtcclxuXHRcdFx0XHRyZXN1bHQucHVzaChuZXRDb21wYXJpc29uID8gdGVzdFBhc3MgOiB2MSk7XHJcblx0XHRcdH0gZWxzZSBpZiAoIV9pc0Jvb2xlYW4odGVzdFBhc3MpKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2godGVzdFBhc3MpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKChjb250cmFzdCAmJiAhdGVzdFBhc3MpIHx8ICghY29udHJhc3QgJiYgdGVzdFBhc3MpKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2godjEpO1xyXG5cdFx0XHR9IGVsc2UgaWYgKHJldHVybk9uRmlyc3RGYWxzZSkge1xyXG5cdFx0XHRcdGNvbnRuID0gZmFsc2U7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0cmV0dXJuIHJlc3VsdDtcclxuXHR9XHJcblx0XHJcblx0aWYgKF9pc09iamVjdChvYmoxKSAmJiBfaXNPYmplY3Qob2JqMikpIHtcclxuXHRcdHZhciByZXN1bHQgPSB7fTtcclxuXHRcdHZhciBjb250biA9IHRydWU7XHJcblx0XHRPYmplY3Qua2V5cyhvYmoxKS5mb3JFYWNoKGsgPT4ge1xyXG5cdFx0XHRpZiAoIWNvbnRuKSB7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdHZhciB0ZXN0UGFzcyA9IGFzc2VydGlvbihvYmoxW2tdLCBvYmoyW2tdKTtcclxuXHRcdFx0aWYgKChfaXNBcnJheSh0ZXN0UGFzcykgJiYgIXRlc3RQYXNzLmxlbmd0aCkgfHwgKF9pc09iamVjdCh0ZXN0UGFzcykgJiYgIU9iamVjdC5rZXlzKHRlc3RQYXNzKS5sZW5ndGgpKSB7XHJcblx0XHRcdFx0dGVzdFBhc3MgPSBmYWxzZTtcclxuXHRcdFx0fVxyXG5cdFx0XHRpZiAoX2lzVHlwZU9iamVjdCh0ZXN0UGFzcykpIHtcclxuXHRcdFx0XHRyZXN1bHRba10gPSBuZXRDb21wYXJpc29uID8gdGVzdFBhc3MgOiBvYmoxW2tdO1xyXG5cdFx0XHR9IGVsc2UgaWYgKCFfaXNCb29sZWFuKHRlc3RQYXNzKSkge1xyXG5cdFx0XHRcdHJlc3VsdFtrXSA9IHRlc3RQYXNzO1xyXG5cdFx0XHR9IGVsc2UgaWYgKChjb250cmFzdCAmJiAhdGVzdFBhc3MpIHx8ICghY29udHJhc3QgJiYgdGVzdFBhc3MpKSB7XHJcblx0XHRcdFx0cmVzdWx0W2tdID0gb2JqMVtrXTtcclxuXHRcdFx0fSBlbHNlIGlmIChyZXR1cm5PbkZpcnN0RmFsc2UpIHtcclxuXHRcdFx0XHRjb250biA9IGZhbHNlO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHJldHVybiByZXN1bHQ7XHJcblx0fVxyXG59O1xyXG4iLCJcclxuICAgIGltcG9ydCBSZWZsZXggZnJvbSAnQHdlYi1uYXRpdmUtanMvcmVmbGV4JztcclxuICAgIGltcG9ydCBSb3V0ZXIgZnJvbSAnQHdlYi1uYXRpdmUtanMvY3VpL3NyYy9hcHAvcm91dGluZy9Sb3V0ZXIuanMnO1xyXG4gICAgaW1wb3J0IENodG1sIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2N1aS9zcmMvY2h0bWwvQ2h0bWwuanMnO1xyXG4gICAgaW1wb3J0IFJvdXRlIGZyb20gJy4vUm91dGUuanMnO1xyXG4gICAgaW1wb3J0IFJlZ2lzdHJ5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2N1aS9zcmMvUmVnaXN0cnkuanMnO1xyXG4gICAgaW1wb3J0IGdsb2JhbFBhcmFtcyBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jdWkvc3JjL3BhcmFtcy5qcyc7XHJcbiAgICBpbXBvcnQge1xyXG4gICAgICAgIFRpbWVsaW5lLFxyXG4gICAgICAgIFRyYW5zbGF0ZSxcclxuICAgICAgICBSZXNpemVPYnNlcnZlcixcclxuICAgICAgICBJbnRlcnNlY3Rpb25PYnNlcnZlcixcclxuICAgICAgICBQcm94aW1pdHlPYnNlcnZlcixcclxuICAgIH0gZnJvbSAnQHdlYi1uYXRpdmUtanMvY3VpL3NyYy9hcHAvdWkvaW5kZXguanMnO1xyXG4gICAgaW1wb3J0IENvbGxlY3Rpb24gZnJvbSAnQHdlYi1uYXRpdmUtanMvY3VpL3NyYy9hcHAvQ29sbGVjdGlvbi5qcyc7XHJcbiAgIFxyXG5cdGdsb2JhbFBhcmFtcy5lbnYgPSB7XHJcbiAgICAgICAgZW52OiAnYnJvd3NlcicsXHJcbiAgICAgICAgUmVnaXN0cnlcclxuICAgIH07XHJcblx0XHJcbiAgICBSZWdpc3RyeS5yZWdpc3RlcignUm91dGVyJywgUm91dGVyLCB0cnVlKTtcclxuICAgIFJlZ2lzdHJ5LnJlZ2lzdGVyKCdUaW1lbGluZScsICgpID0+IG5ldyBUaW1lbGluZSwgdHJ1ZSk7XHJcbiAgICBSZWdpc3RyeS5yZWdpc3RlcignVHJhbnNsYXRlJywgKCkgPT4gbmV3IFRyYW5zbGF0ZSwgdHJ1ZSk7XHJcbiAgICBSZWdpc3RyeS5yZWdpc3RlcignSW50ZXJzZWN0aW9uT2JzZXJ2ZXInLCB0YXJnZXQgPT4gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKHRhcmdldCB8fCBkb2N1bWVudC5ib2R5KSwgJ2F1dG8nKTtcclxuICAgIFJlZ2lzdHJ5LnJlZ2lzdGVyKCdQcm94aW1pdHlPYnNlcnZlcicsIHRhcmdldCA9PiBuZXcgUHJveGltaXR5T2JzZXJ2ZXIodGFyZ2V0IHx8IGRvY3VtZW50LmJvZHkpLCAnYXV0bycpO1xyXG4gICAgUmVnaXN0cnkucmVnaXN0ZXIoJ1Jlc2l6ZU9ic2VydmVyJywgdGFyZ2V0ID0+IG5ldyBSZXNpemVPYnNlcnZlcih0YXJnZXQgfHwgZG9jdW1lbnQuYm9keSksICdhdXRvJyk7XHJcblxyXG4gICAgUmVnaXN0cnkucmVnaXN0ZXIoJ2NvbnNvbGUnLCAoKSA9PiBjb25zb2xlLCB0cnVlKTtcclxuICAgIFJlZ2lzdHJ5LnJlZ2lzdGVyKCd3aW5kb3cnLCAoKSA9PiB3aW5kb3csIHRydWUpO1xyXG5cclxuICAgIHZhciBzdHJ1Y3R1cmFsQ29kZSA9IGBcclxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICBTVFJVQ1RVUkVcclxuICAgIChGb2xsb3cgc29tZSBzZW1hbnRpYyBtYXJrdXAgcGF0dGVybi4pXHJcbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgXHJcbiAgICA8ZGl2IGMtcm9sZT1cImNhcmRcIj5cclxuICAgICAgPGRpdiBjLXJvbGU9XCJjYXJkLWljb25cIj48L2Rpdj5cclxuICAgICAgPGRpdj5cclxuICAgICAgICA8ZGl2IGMtcm9sZT1cImNhcmQtdGl0bGVcIj48L2Rpdj5cclxuICAgICAgICA8ZGl2IGMtcm9sZT1cImNhcmQtZGVzY1wiPjwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICAgXHJcbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgQWJvdmUsIHdlIGhhdmUgdXNlZCB0aGUgXCJjLXJvbGVcIiBhdHRyaWJ1dGUgdG8gY3JlYXRlXHJcbiAgICByZWxhdGlvbnNoaXBzIGZvciB0aGUgXCJjYXJkXCIgY29tcG9uZW50LlxyXG4gICAgXHJcbiAgICBOb3csIHdlIGhhdmUgdGhlIGZvbGxvd2luZyBjb21wb25lbnQgYmluZGluZywgbGlrZSBhIHRyZWU6XHJcbiAgICBcclxuICAgIGNhcmRcclxuICAgICAgfC0tIGljb25cclxuICAgICAgfC0tIHRpdGxlXHJcbiAgICAgIHwtLSBkZXNjXHJcbiAgICBcclxuICAgIFRoaXMgbWFrZXMgeW91ciBVSSBlYXNpZXIgdG8gcmVhc29uIGFib3V0IGFuZCB0byBhY2Nlc3MuXHJcbiAgICBGb3IgZXhhbXBsZSwgd2Ugd2lsbCBiZSBhYmxlIHRvIHRyYXZlcnNlIHRoZSBjb21wb25lbnRcclxuICAgIHRyZWUgaW4gSmF2YVNjcmlwdCwgbGlrZSB0aGlzOlxyXG4gICAgXHJcbiAgICBsZXQgdGl0bGUgPSBjYXJkLnRyZWUudGl0bGU7XHJcbiAgICBsZXQgZGVzYyA9IGNhcmQudHJlZS5kZXNjO1xyXG4gICAgXHJcbiAgICBNb3JlIG9uIHRoaXMgc2hvcnRseS5cclxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICBgO1xyXG5cclxuICAgIHZhciBiZWhhdmlvdXJhbENvZGUgPSBgXHJcbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgQkVIQVZJT1VSXHJcbiAgICAoUHJvZ3JhbW1hdGljYWxseSBvciBkZWNsYXJhdGl2ZWx5IGFkZCBiZWhhdmlvdXIuKVxyXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIFxyXG4gICAgLy8gVGhlIGNvbXBvbmVudCBpbnN0YW5jZVxyXG4gICAgbGV0IGNhcmQgPSBuZXcgQ2h0bWwoZWwpO1xyXG5cclxuICAgIC8vIFRoaXMgZ2l2ZXMgdXMgYW4gQVBJIHNpbWlsYXIgdG8galF1ZXJ5J3MgRE9NIEFQSVxyXG4gICAgY2FyZC5jc3MoJ2Rpc3BsYXknLCAnZmxleCcpO1xyXG4gICAgLy8gRXZlbiBub2RlcyBhcmUgY3JlYXRlZCBhcyBDSFRNTCBpbnN0YW5jZXNcclxuICAgIGNhcmQudHJlZS5pY29uLmNzcyh7XHJcbiAgICAgICAgd2lkdGg6ICc1MHB4JyxcclxuICAgICAgICBoZWlnaHQ6ICc1MHB4JyxcclxuICAgICAgICBib3JkZXJSYWRpdXM6ICcyNXB4JyxcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEFkZCBhbiBcIm9uY2xpY2tcIiBiZWhhdmlvdXJcclxuICAgIC8vIC0gXCJzaGFrZVwiIHRoZSBjb21wb25lbnQgb24gY2xpY2tpbmcgaXRzIGljb25cclxuICAgIGNhcmQudHJlZS5pY29uLm9uKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICBjYXJkLnBsYXkoW1xyXG4gICAgICAgICAgICB7dHJhbnNmb3JtOiB7dHJhbnNsYXRlOiBbMCwgMF19fSxcclxuICAgICAgICAgICAge3RyYW5zZm9ybToge3RyYW5zbGF0ZTogWyctNTBweCcsIDBdfX0sXHJcbiAgICAgICAgICAgIHt0cmFuc2Zvcm06IHt0cmFuc2xhdGU6IFsnNTBweCcsIDBdfX0sXHJcbiAgICAgICAgICAgIHt0cmFuc2Zvcm06IHt0cmFuc2xhdGU6IFswLCAwXX19LFxyXG4gICAgICAgIF0sIHtkdXJhdGlvbjogMzAwfSk7XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIE5vdyB0aGUgaW50ZXJlc3RpbmcgcGFydCBpcy4uLiBldmVyeXRoaW5nIGFib3ZlXHJcbiAgICBpcyBhY2hlaXZhYmxlIHJpZ2h0IHdpdGhpbiBtYXJrdXAuXHJcbiAgICBcclxuICAgIEZvciB0aGUgXCJvbmNsaWNrXCIgYmVoYXZpb3VyLCB3ZSdsbCB1c2UgYW4gXCJzY29wZWRcIiBzY3JpcHQuXHJcbiAgICAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgXHJcbiAgICA8ZGl2IGMtcm9sZT1cImNhcmRcIj5cclxuXHJcbiAgICAgIDxkaXYgYy1yb2xlPVwiY2FyZC1pY29uXCI+PC9kaXY+XHJcbiAgICAgIDxkaXY+XHJcbiAgICAgICAgPGRpdiBjLXJvbGU9XCJjYXJkLXRpdGxlXCI+PC9kaXY+XHJcbiAgICAgICAgPGRpdiBjLXJvbGU9XCJjYXJkLWRlc2NcIj48L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcblxyXG4gICAgICA8c2NyaXB0IHR5cGU9XCJ0ZXh0L2pzZW5cIj5cclxuICAgICAgICB0cmVlLmljb24ub24oJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBwbGF5KFtcclxuICAgICAgICAgICAgICAgIHt0cmFuc2Zvcm06IHt0cmFuc2xhdGU6IFswLCAwXX19LFxyXG4gICAgICAgICAgICAgICAge3RyYW5zZm9ybToge3RyYW5zbGF0ZTogWyctNTBweCcsIDBdfX0sXHJcbiAgICAgICAgICAgICAgICB7dHJhbnNmb3JtOiB7dHJhbnNsYXRlOiBbJzUwcHgnLCAwXX19LFxyXG4gICAgICAgICAgICAgICAge3RyYW5zZm9ybToge3RyYW5zbGF0ZTogWzAsIDBdfX0sXHJcbiAgICAgICAgICAgIF0sIHtkdXJhdGlvbjogMzAwfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIDwvc2NyaXB0PlxyXG5cclxuICAgIDwvZGl2PlxyXG5cclxuICAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICBUaGUgc2NyaXB0IGFib3ZlIGlzIHNjb3BlZCB0byB0aGUgY29tcG9uZW50LiBOb3RpY2VcclxuICAgIHRoYXQgd2UgZGlkbid0IGhhdmUgdG8gcmVmZXJlbmNlIGEgXCJjYXJkXCIgY29tcG9uZW50XHJcbiAgICBhcyB0aGlzIGlzIGltcGxpY2l0IHRvIHRoZSBjb2RlLlxyXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIGA7XHJcblxyXG4gICAgdmFyIGNvbXBvc2l0aW9uYWxDb2RlID0gYFxyXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIENPTVBPU0lUSU9OXHJcbiAgICAoRGVmaW5lIGNvbXBvbmVudHMgb25jZSBhbmQgdXNlIGV2ZXJ5d2hlcmUuKVxyXG4gICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICA8IS0tXHJcbiAgICBDb21wb25lbnRzIGFyZSBkZWZpbmVkIGluIGEgPHRlbXBsYXRlPiBlbGVtZW50LlxyXG4gICAgU28gd2Ugd2lsbCBwbGFjZSBvdXIgY2FyZCBpbiBvbmUuIFdlIHdpbGwgYWxzbyBhc3NpZ24gaXRcclxuICAgIGEgbWVhbnMgb2YgaWRlbnRpZmljYXRpb24gY2FsbGVkIGEgXCJuYW1lc3BhY2VcIi5cclxuICAgIC0tPlxyXG5cclxuICAgIDx0ZW1wbGF0ZSBpcz1cImMtYnVuZGxlXCI+XHJcblxyXG4gICAgICA8ZGl2IGMtcm9sZT1cImNhcmRcIiBjLW5hbWVzcGFjZT1cImh0bWwvY2FyZFwiPlxyXG4gICAgICAgIDxkaXYgYy1yb2xlPVwiY2FyZC1pY29uXCI+PC9kaXY+XHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgIDxkaXYgYy1yb2xlPVwiY2FyZC10aXRsZVwiPjwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjLXJvbGU9XCJjYXJkLWRlc2NcIj48L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8c2NyaXB0IHR5cGU9XCJ0ZXh0L2pzZW5cIj4uLi48L3NjcmlwdD5cclxuICAgICAgPC9kaXY+XHJcblxyXG4gICAgPC90ZW1wbGF0ZT5cclxuXHJcbiAgICA8IS0tXHJcbiAgICBUaGUgPHRlbXBsYXRlPiBlbGVtZW50IGl0c2xlZiB3b3VsZCBsaXZlIGluIHRoZSA8aGVhZD5cclxuICAgIHNlY3Rpb24gb2YgYSBkb2N1bWVudC5cclxuICAgIENvbXBvbmVudHMgd2l0aGluIGl0IGNhbiBiZSBpbXBvcnRlZCBhbnl3aGVyZSB3aXRoaW5cclxuICAgIHRoZSBkb2N1bWVudCA8Ym9keT4uXHJcbiAgICAtLT5cclxuXHJcbiAgICA8aHRtbD5cclxuXHJcbiAgICAgIDxoZWFkPlxyXG4gICAgICAgIDx0ZW1wbGF0ZSBpcz1cImMtYnVuZGxlXCI+XHJcbiAgICAgICAgICA8ZGl2IGMtcm9sZT1cImNhcmRcIiBjLW5hbWVzcGFjZT1cImh0bWwvY2FyZFwiPi4uLjwvZGl2PlxyXG4gICAgICAgIDwvdGVtcGxhdGU+XHJcbiAgICAgIDwvaGVhZD5cclxuXHJcbiAgICAgIDxib2R5PlxyXG4gICAgICAgIDxjLWltcG9ydCBjLW5hbWVzcGFjZT1cImh0bWwvY2FyZFwiPjwvYy1pbXBvcnQ+XHJcbiAgICAgIDwvYm9keT5cclxuXHJcbiAgICA8L2h0bWw+XHJcbiAgICBgO1xyXG5cclxuICAgIHZhciBhcHAgPSBuZXcgUm91dGUoe1xyXG4gICAgICAgIGFjdGl2ZTogdHJ1ZSxcclxuICAgICAgICB0aXRsZTonV2ViLU5hdGl2ZSBIb21lIDo6IFdlYi1OYXRpdmUnLFxyXG4gICAgICAgIHBhZ2U6IHtcclxuICAgICAgICAgICAgdGl0bGU6J0ZpbmFsbHksIGEgV2ViLU5hdGl2ZSBVSSBGcmFtZXdvcmshJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN1YnJvdXRlczogUm91dGUuY3JlYXRlUm91dGVzKHtcclxuICAgICAgICAgICAgY2h0bWw6IHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOidDSFRNTCAtIGEgV2ViLU5hdGl2ZSBVSSBGcmFtZXdvcmsgOjogV2ViLU5hdGl2ZScsXHJcbiAgICAgICAgICAgICAgICBwYWdlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6J0ZpbmFsbHksIGEgV2ViLU5hdGl2ZSBVSSBGcmFtZXdvcmshJyxcclxuICAgICAgICAgICAgICAgICAgICBzbGlkZXM6IG5ldyBDb2xsZWN0aW9uKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzYzogJ05ldyB0byBDSFRNTD8gSGVyZVxcJ3MgYSB3YWxrdGhyb3VnaC4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRyaWVzOiBDb2xsZWN0aW9uLmNyZWF0ZUVudHJpZXMoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnU3RydWN0dXJlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBzdHJ1Y3R1cmFsQ29kZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0OiAnTmV4dDogYmVoYXZpb3VyJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRFbChlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsID0gZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdCZWhhdmlvdXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGJlaGF2aW91cmFsQ29kZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0OiAnTmV4dDogY29tcG9zaXRpb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEVsKGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWwgPSBlbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ0NvbXBvc2l0aW9uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBjb21wb3NpdGlvbmFsQ29kZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0OiAnVGhlIGVuZCEnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEVsKGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWwgPSBlbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXSksXHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZWZsZXg6IHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiAnUmVmbGV4IC0gYSByZWFjdGl2aXR5IGxpYnJhcnkgOjogV2ViLU5hdGl2ZScsXHJcbiAgICAgICAgICAgICAgICBwYWdlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6J1RoaXMgaXMgUmVmbGV4IHBhZ2UhJyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGpzZW46IHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiAnSmF2YVNjcmlwdCBPYmplY3QgTm90YXRpb24gKEpTRU4pIDo6IFdlYi1OYXRpdmUnLFxyXG4gICAgICAgICAgICAgICAgcGFnZToge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOidUaGlzIGlzIEpTRU4gcGFnZSEnLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuXHRcdH0pLFxyXG5cdFx0LyoqXHJcblx0XHQqL1xyXG4gICAgfSk7XHJcbiAgICBcclxuXHRDaHRtbC5yZWFkeSgoKSA9PiB7XHJcbiAgICAgICAgZ2xvYmFsUGFyYW1zLmVudi5wYWdlVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCd0aXRsZScpO1xyXG4gICAgICAgIGFwcC5yb3V0ZSgwKTtcclxuICAgICAgICBDaHRtbC5mcm9tKCcjYXBwJykuYmluZChhcHApO1xyXG5cdH0pO1xyXG5cdCIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBBbmltIGZyb20gJy4uLy4uL2NodG1sL2FuaW0vQW5pbS5qcyc7XHJcbmltcG9ydCBUaW1lbGluZSBmcm9tICcuLi8uLi9jaHRtbC9hbmltL1RpbWVsaW5lLmpzJztcclxuaW1wb3J0IF9hcnJGcm9tIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL2Zyb20uanMnO1xyXG5pbXBvcnQgX2Fyckxhc3QgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9hcnIvbGFzdC5qcyc7XHJcbmltcG9ydCBfbWVyZ2UgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovbWVyZ2UuanMnO1xyXG5pbXBvcnQgX2lzTnVtYmVyIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvanMvaXNOdW1iZXIuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBBIGJhc2UgY2xhc3MgZm9yIE9ic2VydmVyIGltcGxlbWVudGF0aW9ucy5cclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEFjY2VwdHMgZWxlbWVudHMgKHRhcmdldHMpIGFuZCBvcHRpb25zIGZvcixcclxuXHQgKiBhbmQgY3JlYXRlcyB0aGUsIE9ic2VydmVyIGluc3RhbmNlLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGFycmF5ICAgICBcdGVudHJpZXNcclxuXHQgKiBAcGFyYW0gb2JqZWN0IFx0XHRvcHRpb25zXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcihlbnRyaWVzID0gW10sIHBhcmFtcyA9IHt9KSB7XHJcblx0XHR0aGlzLiQgPSB7fTtcclxuICAgICAgICB0aGlzLiQuZW50cmllcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuJC5wYXJhbXMgPSBwYXJhbXM7XHJcbiAgICAgICAgdGhpcy5ub3dQbGF5aW5nID0gbmV3IFRpbWVsaW5lO1xyXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICBlbnRyaWVzLmZvckVhY2goZWwgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmFkZChlbCwgcGFyYW1zLnRpbWluZyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5xdWV1ZSA9IFtdO1xyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBBZGRhIGEgbmV3IGVudHJ5IHRvIHRoZSB0aW1lbGluZS5cclxuXHQgKiBPcHRpb25hbGx5IGFjY2VwdHMgYSB0aW1pbmcgZm9yIHRoZSBzcGVjaWZpYyBlbnRyeS5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBIVE1MRWxlbWVudCBcdCAgICBlbFxyXG5cdCAqIEBwYXJhbSBwYmplY3QgICAgICAgIFx0ZWZmZWN0XHJcblx0ICogQHBhcmFtIHBiamVjdCBcdCAgICAgICAgcGFyYW1zXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uICAgICAgICBcdG9uZmluaXNoXHJcblx0ICogQHBhcmFtIGZ1bmN0aW9uICAgICAgICBcdG9uY2FuY2VsXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIHZvaWRcclxuXHQgKi9cclxuXHRhZGQoZWwsIGVmZmVjdCA9IHt9LCBwYXJhbXMgPSB7fSwgb25maW5pc2ggPSBudWxsLCBvbmNhbmNlbCA9IG51bGwpIHtcclxuICAgICAgICBpZiAoIXRoaXMuJC5lbnRyaWVzLmZpbHRlcihlbnRyeSA9PiBlbnRyeS5lbCA9PT0gZWwpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB2YXIgZW50cnkgPSB7ZWwsIGVmZmVjdCwgcGFyYW1zLCBvbmZpbmlzaCwgb25jYW5jZWx9O1xyXG4gICAgICAgICAgICB0aGlzLiQuZW50cmllcy5wdXNoKGVudHJ5KTtcclxuICAgICAgICAgICAgdGhpcy5ub3dQbGF5aW5nQWRkKGVudHJ5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcdFxyXG5cdC8qKlxyXG5cdCAqIEFkZGEgYSBxdWFsaWZpZWQgZW50cnkgdG8gdGhlIG5vd1BsYXlpbmcuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gb2JqZWN0IFx0ICAgICBlbnRyeVxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0bm93UGxheWluZ0FkZChlbnRyeSkge1xyXG4gICAgICAgIGlmICghdGhpcy5ub3dQbGF5aW5nRWZmZWN0KSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgICAgICAgdmFyIGNyZWF0ZUFuaW1hdGlvbiA9IChub3dQbGF5aW5nLCBlbnRyeSwgZWZmZWN0LCBwYXJhbXMpID0+IHtcclxuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IG5ldyBBbmltKGVudHJ5LmVsLCBlZmZlY3QsIHBhcmFtcyk7XHJcbiAgICAgICAgICAgIG5vd1BsYXlpbmcuYWRkKGFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgIGlmIChlbnRyeS5vbmZpbmlzaCkge1xyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLm9uY2FuY2VsKGVudHJ5Lm9uZmluaXNoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZW50cnkub25jYW5jZWwpIHtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5vbmNhbmNlbChlbnRyeS5vbmNhbmNlbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgIHZhciBjb21wdXRlID0gKG5vd1BsYXlpbmcsIHF1ZXVlKSA9PiB7XHJcbiAgICAgICAgICAgIHZhciBlbnRyeSA9IHF1ZXVlWzBdO1xyXG4gICAgICAgICAgICB2YXIgZWZmZWN0ID0gX21lcmdlKHRoaXMubm93UGxheWluZ0VmZmVjdCwgZW50cnkuZWZmZWN0KTtcclxuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IF9tZXJnZSh0aGlzLm5vd1BsYXlpbmdQYXJhbXMsIGVudHJ5LnBhcmFtcyk7XHJcbiAgICAgICAgICAgIGlmIChfaXNOdW1iZXIocGFyYW1zLmxhZykgfHwgX2lzTnVtYmVyKHBhcmFtcy5sYWdBZnRlcikpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsYXN0QW5pbSA9IF9hcnJMYXN0KG5vd1BsYXlpbmcuJC5hbmltYXRpb25zKTtcclxuICAgICAgICAgICAgICAgIGlmIChsYXN0QW5pbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RBbmltLnJlYWR5KChhbmltLCBfcGFyYW1zKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5kZWxheSA9IChwYXJhbXMuZGVsYXkgfHwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfaXNOdW1iZXIocGFyYW1zLmxhZykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5kZWxheSArPSAocGFyYW1zLndpdGhEZWxheXMgPyBfcGFyYW1zLmRlbGF5IDogMCkgKyBwYXJhbXMubGFnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmRlbGF5ICs9IChwYXJhbXMud2l0aERlbGF5cyA/IF9wYXJhbXMuZGVsYXkgKyBwYXJzZUZsb2F0KF9wYXJhbXMuZW5kRGVsYXkpIDogMCkgKyBfcGFyYW1zLmR1cmF0aW9uICsgcGFyYW1zLmxhZ0FmdGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5kZWxheSAtPSBfaXNOdW1iZXIoYW5pbS5jdXJyZW50VGltZSkgPyBhbmltLmN1cnJlbnRUaW1lIDogMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlQW5pbWF0aW9uKG5vd1BsYXlpbmcsIGVudHJ5LCBlZmZlY3QsIHBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcXVldWUuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcHV0ZShub3dQbGF5aW5nLCBxdWV1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3JlYXRlQW5pbWF0aW9uKG5vd1BsYXlpbmcsIGVudHJ5LCBlZmZlY3QsIHBhcmFtcyk7XHJcbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICAgICAgcXVldWUuc2hpZnQoKTtcclxuICAgICAgICAgICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY29tcHV0ZShub3dQbGF5aW5nLCBxdWV1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMucXVldWUucHVzaChlbnRyeSk7XHJcbiAgICAgICAgaWYgKHRoaXMucXVldWUubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIGNvbXB1dGUodGhpcy5ub3dQbGF5aW5nLCB0aGlzLnF1ZXVlKTtcclxuICAgICAgICB9XHJcblx0fVxyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIFBsYXlzIGFuIGVmZmVjdC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBvYmplY3R8YXJyYXkgIGVmZmVjdFxyXG5cdCAqIEBwYXJhbSBvYmplY3RcdFx0cGFyYW1zXHJcblx0ICpcclxuXHQgKiBAcmV0dXJuIFByb21pc2VcclxuXHQgKi9cclxuXHRwbGF5KGVmZmVjdCA9IHt9LCBwYXJhbXMgPSB7fSkge1xyXG4gICAgICAgIC8vIE9uZ29pbmcgYW5pbWF0aW9uP1xyXG4gICAgICAgIC8vIENsZWFyIG9ubHkgb24gc3Vic2VxdWVudCBjYWxsIHRvIHRoaXMgbWV0aG9kXHJcbiAgICAgICAgaWYgKHRoaXMubm93UGxheWluZ0VmZmVjdCkge1xyXG4gICAgICAgICAgICB0aGlzLm5vd1BsYXlpbmcgPSBuZXcgVGltZWxpbmU7XHJcbiAgICAgICAgICAgIHRoaXMucXVldWUgPSBbXTtcclxuICAgICAgIH1cclxuICAgICAgICB0aGlzLm5vd1BsYXlpbmdFZmZlY3QgPSBlZmZlY3Q7XHJcbiAgICAgICAgdGhpcy5ub3dQbGF5aW5nUGFyYW1zID0gcGFyYW1zO1xyXG4gICAgICAgIC8vIENyZWF0ZSBuZXcgcGxheWxpc3RcclxuICAgICAgICB2YXIgZW50cmllcyA9IHBhcmFtcy5yZXZlcnNlTGlzdCA/IHRoaXMuJC5lbnRyaWVzLnNsaWNlKCkucmV2ZXJzZSgpIDogdGhpcy4kLmVudHJpZXM7XHJcbiAgICAgICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHtcclxuICAgICAgICAgICAgaWYgKCghcGFyYW1zLmV4Y2VwdCB8fCAhX2FyckZyb20ocGFyYW1zLmV4Y2VwdCwgZmFsc2UvKmNhc3RPYmplY3QqLykuaW5jbHVkZXMoZW50cnkuZWwpKVxyXG4gICAgICAgICAgICAmJiAoIXBhcmFtcy5vbmx5IHx8IF9hcnJGcm9tKHBhcmFtcy5vbmx5LCBmYWxzZS8qY2FzdE9iamVjdCovKS5pbmNsdWRlcyhlbnRyeS5lbCkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vd1BsYXlpbmdBZGQoZW50cnkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubm93UGxheWluZy5wbGF5KCk7XHJcbiAgICB9XHJcblxyXG59O1xyXG4iLCJcclxuLyoqXHJcbiAqIEBpbXBvcnRzXHJcbiAqL1xyXG5pbXBvcnQgUmVmbGV4IGZyb20gJ0B3ZWItbmF0aXZlLWpzL3JlZmxleCc7XHJcbmltcG9ydCBfY29weSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL29iai9jb3B5LmpzJztcclxuXHJcbi8qKlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICogUmVwcmVzZW50cyBhbiBJbnRlcnNlY3Rpb25PYnNlcnZlclxyXG4gKiB0aGF0IHB1Ymxpc2hlcyBlbnRyaWVzIHRvIHN0YXRlLlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcih0YXJnZXQsIHBhcmFtcyA9IHt9KSB7XHJcblx0XHR2YXIgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoZW50cmllcyA9PiB7XHJcblx0XHRcdGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XHJcblx0XHRcdFx0UmVmbGV4LnNldCh0aGlzLCBlbnRyeSk7XHJcblx0XHRcdFx0aWYgKHBhcmFtcy5vbmNlKSB7XHJcblx0XHRcdFx0XHRvYnNlcnZlci51bm9ic2VydmUoZW50cnkudGFyZ2V0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fSwgX2NvcHkocGFyYW1zLCBbJ3Jvb3QnLCAncm9vdE1hcmdpbicsICd0aHJlc2hvbGQnXSkpO1xyXG5cdFx0b2JzZXJ2ZXIub2JzZXJ2ZSh0YXJnZXQpO1xyXG5cdH1cclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IFJlZmxleCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9yZWZsZXgnO1xyXG5pbXBvcnQgX2NvcHkgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovY29weS5qcyc7XHJcbmltcG9ydCBQcm94aW1pdHlPYnNlcnZlciBmcm9tICcuLi8uLi9jaHRtbC91aS9Qcm94aW1pdHlPYnNlcnZlci5qcyc7XHJcblxyXG4vKipcclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIFJlcHJlc2VudHMgYSBQcm94aW1pdHlPYnNlcnZlclxyXG4gKiB0aGF0IHB1Ymxpc2hlcyBlbnRyaWVzIHRvIHN0YXRlLlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICovXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyB7XHJcblx0XHJcblx0LyoqXHJcblx0ICogQGluaGVyaXRkb2NcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3Rvcih0YXJnZXQsIHBhcmFtcyA9IHt9KSB7XHJcblx0XHR2YXIgb2JzZXJ2ZXIgPSBuZXcgUHJveGltaXR5T2JzZXJ2ZXIoZW50cmllcyA9PiB7XHJcblx0XHRcdGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7XHJcblx0XHRcdFx0UmVmbGV4LnNldCh0aGlzLCBlbnRyeSk7XHJcblx0XHRcdFx0aWYgKHBhcmFtcy5vbmNlKSB7XHJcblx0XHRcdFx0XHRvYnNlcnZlci51bm9ic2VydmUoZW50cnkudGFyZ2V0KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fSwgX2NvcHkocGFyYW1zLCBbJ3Jvb3QnLCAncm9vdE1hcmdpbicsICdheGlzJ10pKTtcclxuXHRcdG9ic2VydmVyLm9ic2VydmUodGFyZ2V0KTtcclxuXHR9XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfcmVtb3ZlIGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvYXJyL3JlbW92ZS5qcyc7XHJcbmltcG9ydCBfbWVyZ2UgZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovbWVyZ2UuanMnO1xyXG5pbXBvcnQgX2V2ZW4gZnJvbSAnQHdlYi1uYXRpdmUtanMvY29tbW9ucy9vYmovZXZlbi5qcyc7XHJcbmltcG9ydCBvbiBmcm9tICcuLi9ldnQvb24uanMnO1xyXG5pbXBvcnQgcHJveGltaXR5IGZyb20gJy4vcHJveGltaXR5LmpzJztcclxuaW1wb3J0IHJlY3QgZnJvbSAnLi9yZWN0LmpzJztcclxuaW1wb3J0IFJlZmxvdyBmcm9tICcuLi9SZWZsb3cuanMnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBUaGUgUHJveGltaXR5T2JzZXJ2ZXIuXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKi9cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIHtcclxuXHRcclxuXHQvKipcclxuXHQgKiBJbml0aWFsaXplcyBhbiBpbnN0YW5jZSBvZiBQcm94aW1pdHlPYnNlcnZlclxyXG5cdCAqIHdpdGggYSBjYWxsYmFjayBhbmQgYW4gb3B0aW9ucyBvYmplY3QuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gZnVuY3Rpb24gXHRjYWxsYmFja1xyXG5cdCAqIEBwYXJhbSBvYmplY3RcdG9wdGlvbnNcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGNvbnN0cnVjdG9yKGNhbGxiYWNrLCBvcHRpb25zID0ge30pIHtcclxuXHRcdHRoaXMuJCA9IHt9O1xyXG5cdFx0dGhpcy4kLm9wdGlvbnMgPSBvcHRpb25zO1xyXG5cdFx0dGhpcy4kLnRhcmdldHNPYmogPSBbXTtcclxuXHRcdHZhciBvbmVQZW5kaW5nQ2FsbDtcclxuXHRcdHRoaXMuJC5yb290ID0gdGhpcy4kLm9wdGlvbnMucm9vdCB8fCB3aW5kb3c7XHJcblx0XHR2YXIgdGFrZVJlY29yZHMgPSAoY29udGluaW91c2x5LCBmdWxmaWxQZW5kaW5nQ2FsbCkgPT4ge1xyXG5cdFx0XHRpZiAodGhpcy4kLndhaXRpbmcpIHtcclxuXHRcdFx0XHRvbmVQZW5kaW5nQ2FsbCA9IHRydWU7XHJcblx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMuJC53YWl0aW5nID0gdHJ1ZTtcclxuXHRcdFx0UmVmbG93Lm9ucmVhZCgoKSA9PiB7XHJcblx0XHRcdFx0aWYgKHRoaXMuJC5kaXNjb25uZWN0ZWQgfHwgdGhpcy4kLnBhdXNlZCkge1xyXG5cdFx0XHRcdFx0cmV0dXJuO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0XHR2YXIgZW50cmllcyA9IFtdO1xyXG5cdFx0XHRcdGlmICh0aGlzLiQudGFyZ2V0c09iai5sZW5ndGgpIHtcclxuXHRcdFx0XHRcdHZhciByb290UmVjdCA9IHJlY3QodGhpcy4kLnJvb3QpO1xyXG5cdFx0XHRcdFx0dmFyIGNoYW5nZUluUm9vdCA9ICFfZXZlbih0aGlzLiQucHJldmlvdXNSb290UmVjdCwgcm9vdFJlY3QpO1xyXG5cdFx0XHRcdFx0dGhpcy4kLnRhcmdldHNPYmouZm9yRWFjaCh0T2JqID0+IHtcclxuXHRcdFx0XHRcdFx0dmFyIGl0ZW1SZWN0ID0gcmVjdCh0T2JqLmVsKTtcclxuXHRcdFx0XHRcdFx0dmFyIGNoYW5nZUluSXRlbSA9ICFfZXZlbih0T2JqLnByZXZpb3VzSXRlbVJlY3QsIGl0ZW1SZWN0KTtcclxuXHRcdFx0XHRcdFx0aWYgKGNoYW5nZUluUm9vdCB8fCBjaGFuZ2VJbkl0ZW0pIHtcclxuXHRcdFx0XHRcdFx0XHR2YXIgY3VycmVudFByb3hpbWl0eSA9IHByb3hpbWl0eShpdGVtUmVjdCwgcm9vdFJlY3QsIHRoaXMuJC5vcHRpb25zLmF4aXMsIHRPYmoucHJldmlvdXNQcm94aW1pdHkpO1xyXG5cdFx0XHRcdFx0XHRcdGlmICghX2V2ZW4oY3VycmVudFByb3hpbWl0eSwgdE9iai5wcmV2aW91c1Byb3hpbWl0eSwgdHJ1ZS8qYXNzZXJ0aW9uKi8sIDEvKmRlcHRoKi8pKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRlbnRyaWVzLnB1c2goX21lcmdlKHt0YXJnZXQ6dE9iai5lbH0sIGN1cnJlbnRQcm94aW1pdHkpKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0dE9iai5wcmV2aW91c1Byb3hpbWl0eSA9IGN1cnJlbnRQcm94aW1pdHk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0dE9iai5wcmV2aW91c0l0ZW1SZWN0ID0gaXRlbVJlY3Q7XHJcblx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdHRoaXMuJC5wcmV2aW91c1Jvb3RSZWN0ID0gcm9vdFJlY3Q7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGlmIChlbnRyaWVzLmxlbmd0aCkge1xyXG5cdFx0XHRcdFx0dmFyIGRpc3Bvc2l0aW9uID0gY2FsbGJhY2soZW50cmllcywgdGhpcyk7XHJcblx0XHRcdFx0XHRpZiAoZGlzcG9zaXRpb24gaW5zdGFuY2VvZiBQcm9taXNlKSB7XHJcblx0XHRcdFx0XHRcdHRoaXMuJC5wYXVzZWQgPSB0cnVlO1xyXG5cdFx0XHRcdFx0XHRkaXNwb3NpdGlvbi50aGVuKCgpID0+IHtcclxuXHRcdFx0XHRcdFx0XHR0aGlzLiQucGF1c2VkID0gZmFsc2U7XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cdFx0XHRcdFx0XHRkaXNwb3NpdGlvbi5jYXRjaCgoKSA9PiB7XHJcblx0XHRcdFx0XHRcdFx0dGhpcy4kLnBhdXNlZCA9IGZhbHNlO1xyXG5cdFx0XHRcdFx0XHR9KTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0aWYgKGNvbnRpbmlvdXNseSkge1xyXG5cdFx0XHRcdFx0Ly8gVGhpcyBcInRydXRoeVwiIHJldHVybiB2YWx1ZSBpcyBuZWVkZWQgZm9yIHVzIHRvIGJlXHJcblx0XHRcdFx0XHQvLyBjYWxsZWQgYWdhaW4gb24gbmV4dCByZWZsb3cuXHJcblx0XHRcdFx0XHQvLyBBbmQgdGhpcy4kLndhaXRpbmcgd2lsbCByZW1haW4gdHJ1ZSwgc2luY2Ugd2UncmUgaW4gXCJhdXRvLWNhbGxcIiBtb2RlLlxyXG5cdFx0XHRcdFx0cmV0dXJuIGNvbnRpbmlvdXNseTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdFx0Ly8gVGhlIGNhbGxlciBjYW4gY2FsbCB1cyBhZ2Fpbi5cclxuXHRcdFx0XHQvLyBPciBsZXQncyBzZWUgaWYgd2UgaGF2ZSBhIHBlZG5pbmcgY2FsbCB0byBmdWxmaWwuXHJcblx0XHRcdFx0dGhpcy4kLndhaXRpbmcgPSBmYWxzZTtcclxuXHRcdFx0XHRpZiAob25lUGVuZGluZ0NhbGwgJiYgZnVsZmlsUGVuZGluZ0NhbGwpIHtcclxuXHRcdFx0XHRcdG9uZVBlbmRpbmdDYWxsID0gZmFsc2U7XHJcblx0XHRcdFx0XHR0YWtlUmVjb3JkcyhmYWxzZSwgZnVsZmlsUGVuZGluZ0NhbGwpO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSk7XHJcblx0XHR9O1xyXG5cdFx0aWYgKHRoaXMuJC5vcHRpb25zLmV2ZW50cykge1xyXG5cdFx0XHRvbih0aGlzLiQucm9vdCwgdGhpcy4kLm9wdGlvbnMuZXZlbnRzLCAoKSA9PiB7XHJcblx0XHRcdFx0dGFrZVJlY29yZHMoZmFsc2UvKmNvbnRpbmlvdXNseSovLCB0aGlzLiQub3B0aW9ucy5mdWxmaWxQZW5kaW5nQ2FsbCk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGFrZVJlY29yZHModHJ1ZS8qY29udGluaW91c2x5Ki8pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBBZGRzIGFuIGVsZW1lbnQgdG8gb2JzZXJ2ZSBhZ2FpbnN0IHRoZSByb290IGVsZW1lbnQuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gSFRNTEVsZW1lbnQgZWxcclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdG9ic2VydmUoZWwpIHtcclxuXHRcdGlmICghdGhpcy4kLnRhcmdldHNPYmouZmlsdGVyKHRPYmogPT4gdE9iai5lbCA9PT0gZWwpLmxlbmd0aCkge1xyXG5cdFx0XHR0aGlzLiQudGFyZ2V0c09iai5wdXNoKHtlbDplbH0pO1xyXG5cdFx0fVxyXG5cdH1cclxuXHRcclxuXHQvKipcclxuXHQgKiBTdG9wcyBvYnNlcnZpbmcgYW4gZWxlbWVudC5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBIVE1MRWxlbWVudCBlbFxyXG5cdCAqXHJcblx0ICogQHJldHVybiB2b2lkXHJcblx0ICovXHJcblx0dW5vYnNlcnZlKGVsKSB7XHJcblx0XHR0aGlzLiQudGFyZ2V0c09iaiA9IHRoaXMuJC50YXJnZXRzT2JqLmZpbHRlcih0T2JqID0+IHRPYmouZWwgIT09IGVsKTtcclxuXHR9XHJcblx0XHJcblx0LyoqXHJcblx0ICogU3RvcHMgYWxsIG9ic2VydmF0aW9ucy5cclxuXHQgKlxyXG5cdCAqIEByZXR1cm4gdm9pZFxyXG5cdCAqL1xyXG5cdGRpc2Nvbm5lY3QoKSB7XHJcblx0XHR0aGlzLiQuZGlzY29ubmVjdGVkID0gdHJ1ZTtcclxuXHR9XHJcbn07XHJcbiIsIlxyXG4vKipcclxuICogQGltcG9ydHNcclxuICovXHJcbmltcG9ydCBfYXJyRnJvbSBmcm9tICdAd2ViLW5hdGl2ZS1qcy9jb21tb25zL2Fyci9mcm9tLmpzJztcclxuaW1wb3J0IF9jb3B5IGZyb20gJ0B3ZWItbmF0aXZlLWpzL2NvbW1vbnMvb2JqL2NvcHkuanMnO1xyXG5pbXBvcnQgaW50ZXJzZWN0aW9uIGZyb20gJy4vaW50ZXJzZWN0aW9uLmpzJztcclxuXHJcbi8qKlxyXG4gKiBDb21wdXRlcyB0aGUgcGVyY2VudGFnZSBwcm94aW1pdHkgYmV0d2VlbiB0d28gcmVjdHMuXHJcbiAqXHJcbiAqIEBwYXJhbSBvYmplY3RcdFx0cmVjdDFcclxuICogQHBhcmFtIG9iamVjdFx0XHRyZWN0MlxyXG4gKiBAcGFyYW0gc3RyaW5nfGFycmF5XHRheGlzXHJcbiAqIEBwYXJhbSBvYmplY3RcdFx0cHJldmlvdXNQcm94aW1pdHlcclxuICpcclxuICogQHJldHVybiBvYmplY3RcclxuICovXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJlY3QxLCByZWN0MiwgYXhpcywgcHJldmlvdXNQcm94aW1pdHkpIHtcclxuXHR2YXIgJHByb3hpbWl0eSA9IHtpbnRlcnNlY3Rpb246IGludGVyc2VjdGlvbihyZWN0MSwgcmVjdDIpfTtcdFx0XHRcdFxyXG5cdCRwcm94aW1pdHkueCA9ICRwcm94aW1pdHkueCB8fCB7fTtcclxuXHQkcHJveGltaXR5LnkgPSAkcHJveGltaXR5LnkgfHwge307XHJcblx0cHJldmlvdXNQcm94aW1pdHkgPSBfY29weShwcmV2aW91c1Byb3hpbWl0eSk7XHJcblx0Ly8gWCxZIHByb2Nlc3NpbmcuLi5cclxuXHQoYXhpcyA/IF9hcnJGcm9tKGF4aXMpIDogWyd4JywgJ3knXSkuZm9yRWFjaChheGlzID0+IHtcclxuXHRcdC8vIEluIHRoZSBjb250ZXh0IG9mIHRoZSBnaXZlbiBheGlzLi4uXHJcblx0XHR2YXIgZGlzdGFuY2VCZWZvcmUgPSBheGlzID09PSAneCcgPyAnbGVmdCcgOiAndG9wJztcclxuXHRcdHZhciBkaXN0YW5jZUFmdGVyID0gYXhpcyA9PT0gJ3gnID8gJ3JpZ2h0JyA6ICdib3R0b20nO1xyXG5cdFx0dmFyIHJlY3QxTGVuZ3RoID0gcmVjdDFbYXhpcyA9PT0gJ3gnID8gJ3dpZHRoJyA6ICdoZWlnaHQnXTtcclxuXHRcdHZhciByZWN0Mkxlbmd0aCA9IHJlY3QyW2F4aXMgPT09ICd4JyA/ICd3aWR0aCcgOiAnaGVpZ2h0J107XHJcblx0XHQvLyAtLS0tLSBJbiB3aGljaCBkaXJlY3Rpb24gYXJlIHdlIGFkdmFuY2VtZW50XHJcblx0XHQkcHJveGltaXR5W2F4aXNdLmFkdmFuY2VtZW50ID0gdW5kZWZpbmVkO1xyXG5cdFx0aWYgKHByZXZpb3VzUHJveGltaXR5LmludGVyc2VjdGlvbikge1xyXG5cdFx0XHQkcHJveGltaXR5W2F4aXNdLmFkdmFuY2VtZW50ID0gcHJldmlvdXNQcm94aW1pdHkuaW50ZXJzZWN0aW9uW2Rpc3RhbmNlQmVmb3JlXSA+ICRwcm94aW1pdHkuaW50ZXJzZWN0aW9uW2Rpc3RhbmNlQmVmb3JlXSBcclxuXHRcdFx0XHQ/ICdwb3NpdGl2ZScgOiAocHJldmlvdXNQcm94aW1pdHkuaW50ZXJzZWN0aW9uW2Rpc3RhbmNlQmVmb3JlXSA8ICRwcm94aW1pdHkuaW50ZXJzZWN0aW9uW2Rpc3RhbmNlQmVmb3JlXSBcclxuXHRcdFx0XHRcdD8gJ25lZ2F0aXZlJyA6IHByZXZpb3VzUHJveGltaXR5W2F4aXNdLmFkdmFuY2VtZW50KTtcclxuXHRcdH1cclxuXHRcdC8vIC0tLS0tIENyb3NzLWluIHBlcmNlbnRhZ2VcclxuXHRcdHZhciBwZXJjZW50YWdlSW4gPSAwO1xyXG5cdFx0Ly8gRWxlbWVudCB0b3BsaW5lIHRvdWNoZXMgb3IgcGFzc2VzIEFuY2hvciBib3R0b20gbGluZVxyXG5cdFx0aWYgKCRwcm94aW1pdHkuaW50ZXJzZWN0aW9uW2Rpc3RhbmNlQmVmb3JlXSA8PSByZWN0Mkxlbmd0aFxyXG5cdFx0Ly8gRWxlbWVudCBib3R0b20gbGluZSBpcyB5ZXQgdG8gdG91Y2gsIG9yIGlzIGp1c3QgdG91Y2hlcyBBbmNob3IgYm90dG9tIGxpbmVcclxuXHRcdCYmICRwcm94aW1pdHkuaW50ZXJzZWN0aW9uW2Rpc3RhbmNlQWZ0ZXJdIDw9IDApIHtcclxuXHRcdFx0cGVyY2VudGFnZUluID0gKHJlY3QxTGVuZ3RoIC0gTWF0aC5hYnMoJHByb3hpbWl0eS5pbnRlcnNlY3Rpb25bZGlzdGFuY2VBZnRlcl0pKSAvIHJlY3QxTGVuZ3RoO1xyXG5cdFx0fSBlbHNlIGlmICgkcHJveGltaXR5LmludGVyc2VjdGlvbltkaXN0YW5jZUFmdGVyXSA+IDApIHtcclxuXHRcdFx0cGVyY2VudGFnZUluID0gMTtcclxuXHRcdH1cclxuXHRcdC8vIC0tLS0tIENyb3NzLW91dCBwZXJjZW50YWdlXHJcblx0XHR2YXIgcGVyY2VudGFnZU91dCA9IDA7XHJcblx0XHQvLyBFbGVtZW50IHRvcGxpbmUgdG91Y2hlcyBvciBwYXNzZXMgQW5jaG9yIHRvcCBsaW5lXHJcblx0XHRpZiAoJHByb3hpbWl0eS5pbnRlcnNlY3Rpb25bZGlzdGFuY2VCZWZvcmVdIDw9IDBcclxuXHRcdC8vIEVsZW1lbnQgYm90dG9tIGxpbmUgaXMgeWV0IHRvIHRvdWNoLCBvciBpcyBqdXN0IHRvdWNoZXMgQW5jaG9yIHRvcCBsaW5lXHJcblx0XHQmJiAkcHJveGltaXR5LmludGVyc2VjdGlvbltkaXN0YW5jZUFmdGVyXSA8PSByZWN0Mkxlbmd0aCkge1xyXG5cdFx0XHRwZXJjZW50YWdlT3V0ID0gTWF0aC5hYnMoJHByb3hpbWl0eS5pbnRlcnNlY3Rpb25bZGlzdGFuY2VCZWZvcmVdKSAvIHJlY3QxTGVuZ3RoO1xyXG5cdFx0fSBlbHNlIGlmICgkcHJveGltaXR5LmludGVyc2VjdGlvbltkaXN0YW5jZUFmdGVyXSA+IHJlY3QyTGVuZ3RoKSB7XHJcblx0XHRcdHBlcmNlbnRhZ2VPdXQgPSAxO1xyXG5cdFx0fVxyXG5cdFx0Ly8gLS0tLS0gQ3Jvc3MtcGFzcyBwZXJjZW50YWdlXHJcblx0XHR2YXIgcGVyY2VudGFnZVBhc3MgPSAwO1xyXG5cdFx0Ly8gRWxlbWVudCB0b3BsaW5lIHRvdWNoZXMgb3IgcGFzc2VzIEFuY2hvciBib3R0b20gbGluZVxyXG5cdFx0aWYgKCRwcm94aW1pdHkuaW50ZXJzZWN0aW9uW2Rpc3RhbmNlQmVmb3JlXSA8PSByZWN0Mkxlbmd0aFxyXG5cdFx0Ly8gRWxlbWVudCBib3R0b20gbGluZSBpcyB5ZXQgdG8gdG91Y2gsIG9yIGlzIGp1c3QgdG91Y2hlcyBBbmNob3IgdG9wIGxpbmVcclxuXHRcdCYmICRwcm94aW1pdHkuaW50ZXJzZWN0aW9uW2Rpc3RhbmNlQWZ0ZXJdIDw9IHJlY3QyTGVuZ3RoKSB7XHJcblx0XHRcdHZhciB0b3RhbERpc3RhbmNlID0gcmVjdDJMZW5ndGggKyByZWN0MUxlbmd0aDtcclxuXHRcdFx0dmFyIGN1cnJlbnRQYXNzID0gJHByb3hpbWl0eS5pbnRlcnNlY3Rpb25bZGlzdGFuY2VCZWZvcmVdICsgcmVjdDFMZW5ndGg7XHJcblx0XHRcdHBlcmNlbnRhZ2VQYXNzID0gKHRvdGFsRGlzdGFuY2UgLSBjdXJyZW50UGFzcykgLyB0b3RhbERpc3RhbmNlO1xyXG5cdFx0fSBlbHNlIGlmICgkcHJveGltaXR5LmludGVyc2VjdGlvbltkaXN0YW5jZUFmdGVyXSA+IHJlY3QyTGVuZ3RoKSB7XHJcblx0XHRcdHBlcmNlbnRhZ2VQYXNzID0gMTtcclxuXHRcdH1cclxuXHRcdC8vIC0tLS0tIENyb3NzLW92ZXJmbG93IHBlcmNlbnRhZ2VcclxuXHRcdHZhciBwZXJjZW50YWdlQ29udGFpbmVkID0gMDtcclxuXHRcdGlmIChyZWN0MUxlbmd0aCA+IHJlY3QyTGVuZ3RoKSB7XHJcblx0XHRcdC8vIEVsZW1lbnQgaXMgbGFyZ2VyIHRoYW4sIGFuZCBjb3ZlcmluZyBBbmNob3IgdG9wL2JvdHRvbSBsaW5lc1xyXG5cdFx0XHRpZiAoJHByb3hpbWl0eS5pbnRlcnNlY3Rpb25bZGlzdGFuY2VCZWZvcmVdIDw9IDBcclxuXHRcdFx0JiYgJHByb3hpbWl0eS5pbnRlcnNlY3Rpb25bZGlzdGFuY2VBZnRlcl0gPD0gMCkge1xyXG5cdFx0XHRcdHZhciBsZW5ndGhEaWZmZXJlbmNlID0gcmVjdDFMZW5ndGggLSByZWN0Mkxlbmd0aDtcclxuXHRcdFx0XHRwZXJjZW50YWdlQ29udGFpbmVkID0gTWF0aC5hYnMoJHByb3hpbWl0eS5pbnRlcnNlY3Rpb25bZGlzdGFuY2VCZWZvcmVdKSAvIGxlbmd0aERpZmZlcmVuY2U7XHJcblx0XHRcdH0gZWxzZSBpZiAoJHByb3hpbWl0eS5pbnRlcnNlY3Rpb25bZGlzdGFuY2VBZnRlcl0gPiAwKSB7XHJcblx0XHRcdFx0cGVyY2VudGFnZUNvbnRhaW5lZCA9IDE7XHJcblx0XHRcdH1cclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdC8vIEVsZW1lbnQgaXMgc21hbGxlciB0aGFuLCBhbmQgd2l0aGluIEFuY2hvciB0b3AvYm90dG9tIGxpbmVzXHJcblx0XHRcdGlmICgkcHJveGltaXR5LmludGVyc2VjdGlvbltkaXN0YW5jZUJlZm9yZV0gPj0gMFxyXG5cdFx0XHQmJiAkcHJveGltaXR5LmludGVyc2VjdGlvbltkaXN0YW5jZUFmdGVyXSA+PSAwKSB7XHJcblx0XHRcdFx0dmFyIGxlbmd0aERpZmZlcmVuY2UgPSByZWN0Mkxlbmd0aCAtIHJlY3QxTGVuZ3RoO1xyXG5cdFx0XHRcdHBlcmNlbnRhZ2VDb250YWluZWQgPSAkcHJveGltaXR5LmludGVyc2VjdGlvbltkaXN0YW5jZUFmdGVyXSAvIGxlbmd0aERpZmZlcmVuY2U7XHJcblx0XHRcdH0gZWxzZSBpZiAoJHByb3hpbWl0eS5pbnRlcnNlY3Rpb25bZGlzdGFuY2VCZWZvcmVdIDwgMCkge1xyXG5cdFx0XHRcdHBlcmNlbnRhZ2VDb250YWluZWQgPSAxO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHQvLyAtLS0tLS0gQmluZCB0aGUgdmFsdWVzIHRvIHRoZSBpbnN0YW5jZSBvYmplY3RcclxuXHRcdGlmICgkcHJveGltaXR5W2F4aXNdLmFkdmFuY2VtZW50ID09PSAncG9zaXRpdmUnKSB7XHJcblx0XHRcdCRwcm94aW1pdHlbYXhpc10ucGVyY2VudGFnZUluID0gcGVyY2VudGFnZUluO1xyXG5cdFx0XHQkcHJveGltaXR5W2F4aXNdLnBlcmNlbnRhZ2VPdXQgPSBwZXJjZW50YWdlT3V0O1xyXG5cdFx0XHQkcHJveGltaXR5W2F4aXNdLnBlcmNlbnRhZ2VQYXNzID0gcGVyY2VudGFnZVBhc3M7XHJcblx0XHRcdCRwcm94aW1pdHlbYXhpc10ucGVyY2VudGFnZUNvbnRhaW5lZCA9IHBlcmNlbnRhZ2VDb250YWluZWQ7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHQkcHJveGltaXR5W2F4aXNdLnBlcmNlbnRhZ2VJbiA9IDEgLSBwZXJjZW50YWdlT3V0O1xyXG5cdFx0XHQkcHJveGltaXR5W2F4aXNdLnBlcmNlbnRhZ2VPdXQgPSAxIC0gcGVyY2VudGFnZUluO1xyXG5cdFx0XHQkcHJveGltaXR5W2F4aXNdLnBlcmNlbnRhZ2VQYXNzID0gMSAtIHBlcmNlbnRhZ2VQYXNzO1xyXG5cdFx0XHQkcHJveGltaXR5W2F4aXNdLnBlcmNlbnRhZ2VDb250YWluZWQgPSAxIC0gcGVyY2VudGFnZUNvbnRhaW5lZDtcclxuXHRcdH1cclxuXHRcdGlmIChyZWN0MUxlbmd0aCA+IHJlY3QyTGVuZ3RoKSB7XHJcblx0XHRcdCRwcm94aW1pdHlbYXhpc10ucGVyY2VudGFnZUNvbnRhaW5lZCAqPSAtMTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHRyZXR1cm4gJHByb3hpbWl0eTtcclxufTtcclxuIiwiXHJcbi8qKlxyXG4gKiBAaW1wb3J0c1xyXG4gKi9cclxuaW1wb3J0IFJlZmxleCBmcm9tICdAd2ViLW5hdGl2ZS1qcy9yZWZsZXgnO1xyXG5cclxuLyoqXHJcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gKiBSZXByZXNlbnRzIGEgUmVzaXplT2JzZXJ2ZXJcclxuICogdGhhdCBwdWJsaXNoZXMgZW50cmllcyB0byBzdGF0ZS5cclxuICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqL1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3Mge1xyXG5cdFxyXG5cdC8qKlxyXG5cdCAqIEBpbmhlcml0ZG9jXHJcblx0ICovXHJcblx0Y29uc3RydWN0b3IodGFyZ2V0LCBwYXJhbXMgPSB7fSkge1xyXG5cdFx0dmFyIG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGVudHJpZXMgPT4ge1xyXG5cdFx0XHRlbnRyaWVzLmZvckVhY2goZW50cnkgPT4ge1xyXG5cdFx0XHRcdHZhciBfZW50cnkgPSB7XHJcblx0XHRcdFx0XHRjb250ZW50UmVjdDogZW50cnkuY29udGVudFJlY3QudG9KU09OKCksXHJcblx0XHRcdFx0fTtcclxuXHRcdFx0XHRpZiAoZW50cnkuY29udGVudEJveFNpemUpIHtcclxuXHRcdFx0XHRcdF9lbnRyeS5jb250ZW50Qm94U2l6ZSA9IHtcclxuXHRcdFx0XHRcdFx0aW5saW5lU2l6ZTogZW50cnkuY29udGVudEJveFNpemUuaW5saW5lU2l6ZSxcclxuXHRcdFx0XHRcdFx0YmxvY2tTaXplOiBlbnRyeS5jb250ZW50Qm94U2l6ZS5ibG9ja1NpemUsXHJcblx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0X2VudHJ5LmJvcmRlckJveFNpemUgPSB7XHJcblx0XHRcdFx0XHRcdGlubGluZVNpemU6IGVudHJ5LmJvcmRlckJveFNpemUuaW5saW5lU2l6ZSxcclxuXHRcdFx0XHRcdFx0YmxvY2tTaXplOiBlbnRyeS5ib3JkZXJCb3hTaXplLmJsb2NrU2l6ZSxcclxuXHRcdFx0XHRcdH07XHJcblx0XHRcdFx0XHRSZWZsZXguc2V0KHRoaXMsIF9lbnRyeSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KTtcclxuXHRcdH0pO1xyXG5cdFx0b2JzZXJ2ZXIub2JzZXJ2ZSh0YXJnZXQpO1xyXG5cdH1cclxufTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==