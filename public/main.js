!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);var n={};r.r(n),r.d(n,"Route",(function(){return Ur})),r.d(n,"Router",(function(){return Gr}));var i=function(e){return"function"==typeof e},s=function(e){return Array.isArray(e)||"object"==typeof e&&e||i(e)},a=function(e){return Array.isArray(e)},o=function(e){return"string"==typeof e&&null!==e},l=function(e){return arguments.length&&(void 0===e||void 0===e)},c=function(e){return null===e||""===e},p=function(e){return c(e)||l(e)||!1===e||0===e||s(e)&&!Object.keys(e).length},h=function(e){return!Array.isArray(e)&&"object"==typeof e&&e},u=function(e,t=!0){return a(e)?e:!t&&h(e)?[e]:!1!==e&&0!==e&&p(e)?[]:function(e){return!o(e)&&!l(e.length)}(e)?Array.prototype.slice.call(e):h(e)?Object.values(e):[e]},d=function(e,t=null){var r={};return 2===arguments.length&&(a(e)&&a(t)?e.forEach((e,n)=>r[e]=t[n]):r[e]=t),r},f=function(e){return!0!==e&&!1!==e&&null!==e&&""!==e&&!isNaN(1*e)},m=function(e){return i(e)&&/^class\s?/.test(Function.prototype.toString.call(e))},g=function(e){return i(e)||e&&"[object function]"==={}.toString.call(e)},v=function(e,t){var r=void 0;return s(e)&&Object.keys(e).forEach((n,i)=>{!1!==r&&(r=t(f(n)?parseFloat(n):n,e[n],i))}),r},b=class{constructor(e,t={}){this.$={},this.$.target=e,this.$.details=t,this.$.propagationStopped=!1,this.$.defaultPrevented=!1,this.$.promisesInstance=null,this.$.promises=[],v(t,(e,t)=>{"$"!==e&&Object.defineProperty(this,e,{value:t})})}get target(){return this.$.target}get details(){return this.$.details}stopPropagation(){this.$.propagationStopped=!0}get propagationStopped(){return this.$.propagationStopped}preventDefault(){this.$.defaultPrevented=!0}get defaultPrevented(){return this.$.defaultPrevented}promise(e){if(!(e instanceof Promise))throw new Error("Event.promise() must be called with a Promise.");this.$.promises.push(e),this.$.promisesInstance=null}get promises(){return!this.$.promisesInstance&&this.$.promises.length&&(this.$.promisesInstance=Promise.all(this.$.promises)),this.$.promisesInstance}response(e){var t,r=h(e)&&!l(e.propagationStopped)&&!l(e.defaultPrevented);!1===e||r&&e.propagationStopped?this.stopPropagation():!1===e||r&&e.defaultPrevented?this.preventDefault():(e instanceof Promise&&(t=e)||r&&(t=e.promises))&&this.promise(t)}},y=class extends b{constructor(e,t={}){super(e,t)}},w=function(e){return"number"==typeof e},x=function(e){return h(e)&&Object.getPrototypeOf(e)===Object.prototype},k=function(e){return!0===e||!1===e};const E=function(e,t,r=!0,n=1){if(a(e)&&a(t)&&e.length!==t.length)return!r;if(h(e)&&h(t)){var i=Object.keys(e),o=Object.keys(t);if(!i.length&&!o.length)return x(e)&&x(t)?r:e===t===r;if(!E(i,o))return!r}if(n>0&&(a(e)&&a(t)||h(e)&&h(t))){var l=function(e,t,r=!0,n=!0,i=!1,o=!1){if(a(e)&&a(t)){var l=[],c=!0;return e.forEach(e=>{if(c){var p=!1;v(t,(t,i)=>{(!p||n&&s(e))&&(p=r(e,i),(a(p)&&!p.length||h(p)&&!Object.keys(p).length)&&(p=!1),s(p)&&n&&(e=p))}),s(p)?l.push(n?p:e):k(p)?i&&!p||!i&&p?l.push(e):o&&(c=!1):l.push(p)}}),l}if(h(e)&&h(t)){l={},c=!0;return Object.keys(e).forEach(p=>{if(c){var u=r(e[p],t[p]);(a(u)&&!u.length||h(u)&&!Object.keys(u).length)&&(u=!1),s(u)?l[p]=n?u:e[p]:k(u)?i&&!u||!i&&u?l[p]=e[p]:o&&(c=!1):l[p]=u}}),l}}(e,t,(e,t)=>E(e,t,r,n-1),!1,!1,!0);return a(l)?l.length===e.length&&l.length===t.length:h(l)&&h(e)?Object.keys(l).length===Object.keys(e).length&&Object.keys(l).length===Object.keys(t).length:l}return g(r)?r(e,t):w(e)&&w(t)&&isNaN(e)&&isNaN(t)?r:e===t===r};var S=E,j=function(e,t,r=null){return a(t)?e.filter(e=>r?t.filter(t=>r(e,t)).length:-1!==t.indexOf(e)):[]},O=class{disconnect(){this.disconnected=!0}},T=class{constructor(){this.fireables=[],this.currentlyFiringEvents=[]}addFireable(e){return this.fireables.push(e),e}removeFireable(e,t=[]){this.fireables=this.fireables.filter(t=>t!==e)}findFireables(e){return this.fireables.filter(t=>{var r=t.params||{},n=r.tags||[],i=e.params||{},s=i.tags||[];return!(e.handler&&t.handler!==e.handler||i.type&&r.type!==i.type||(s.length||n.length)&&j(n,s).length!==n.length)})}static createForTarget(e,t,r){var n;if(e&&s(e))return(n=e[C])||(n={},Object.defineProperty(e,C,{get:()=>n,set:e=>{if(e!==n)throw new Error('Attempt to overwrite the "'+C+'" special property!')},enumerable:!1})),n[t]="listeners"===t?new r(e):new r,n[t]}static getForTarget(e,t){var r;if(e&&s(e)&&(r=e[C]))return r[t]}};const C=".reflex";var A=class extends O{constructor(e,t={}){super(),this.handler=e,this.params=t}fire(e,t,r){return this.disconnected||this.params.type&&this.params.type!==e.type?t(...u(arguments).slice(2)):this.handler(e,r,t)}};class P extends T{fire(e,t=null){if(this.currentlyFiringEvents.filter(t=>t.type===e.type&&t.query===e.query).length)return t?t():void 0;this.currentlyFiringEvents.push(e);const r=(n,...i)=>{var s=this.fireables[n];return s?s.fire(e,(...e)=>r(n+1,...e),...i):t?t(...i):i[0]};var n=r(0);return this.currentlyFiringEvents.pop(),n}static createForTarget(e){return super.createForTarget(e,"traps",P)}static getForTarget(e){return super.getForTarget(e,"traps")}}var $=function(e,...t){return t.forEach(t=>{e.indexOf(t)<0&&e.push(t)}),e},F=function(e,t){var r=[];return function(e,t){t=(t=t||Object.prototype)&&!a(t)?[t]:t;var r=[];for(e=e;e&&(!t||t.indexOf(e)<0)&&"default"!==e.name;)r.push(e),e=e?Object.getPrototypeOf(e):null;return r}(e,t).forEach(e=>{$(r,...Object.getOwnPropertyNames(e))}),r};function W(e,t,r=!1,n=!1,i=!0){var o=0,l=e.shift();if((f(l)||!0===l||!1===l)&&(o=l,l=e.shift()),!e.length)throw new Error("_merge() requires two or more array/objects.");return e.forEach((e,c)=>{(s(e)||g(e))&&(r?F(e):Object.getOwnPropertyNames(e)).forEach(s=>{var p=l[s],u=e[s];if((a(p)&&a(u)||h(p)&&h(u))&&(!0===o||o>0))l[s]=a(p)&&a(u)?[]:{},W([f(o)?o-1:o,l[s],p,u],t,r,n,i);else if(t(s,l,e,c))if(a(l)&&a(e))n?l[s]=u:l.push(u);else try{i?Object.defineProperty(l,s,Object.getOwnPropertyDescriptor(e,s)):l[s]=e[s]}catch(e){}})}),l}var R=function(e,t=[],r=!0){var n=0;return f(arguments[0])&&s(arguments[1])&&(n=arguments[0],e=arguments[1],t=arguments[2]||[]),W([n,{},e],(e,r,n)=>g(t)?t(e):!a(t)||!t.length||t.indexOf(e)>-1,!1,!1,r)},M=function(...e){return W(e,(e,t,r)=>!0,!1,!1,!1)},D=function(e){return e.filter((e,t,r)=>r.indexOf(e)===t)},L=class extends b{constructor(e,t={}){if(t.data&&(t.fields=Object.keys(t.data)),super(e,t),this.srcEvt){this.dataEven=this.srcEvt.dataEven,this.originatingTarget=this.srcEvt.originatingTarget,this.originatingType=this.srcEvt.originatingType,this.originatingFields=[],this.originatingData={},this._originatingData={};var r=this.fields[0];Object.keys(this.srcEvt.originatingData).forEach(e=>{var t=r+"."+e;this.originatingFields.push(t),this.originatingData[t]=this.srcEvt.originatingData[e],this._originatingData[t]=this.srcEvt._originatingData[e]}),this.originatingCreated=this.srcEvt.originatingCreated,this.originatingDeleted=this.srcEvt.originatingDeleted}else this.dataEven=S(this.data,this._data),this.originatingTarget=this.target,this.originatingType=this.type,this.originatingFields=this.fields,this.originatingData=this.data,this._originatingData=this._data,this.originatingCreated=this.created,this.originatingDeleted=this.deleted}},N=function(e,t,r=!1){for(var n=e.indexOf(t);n>-1&&(r||!1===r);)e.splice(n,1),r>0&&r--,n=e.indexOf(t);return e};class I extends T{findFireables(e){return super.findFireables(e).filter(t=>c(e.fields)||l(e.fields)||S(u(t.fields),u(e.fields)))}fire(e){return this.currentlyFiringEvents.filter(t=>t.type===e.type&&t.fields===e.fields).length||(this.currentlyFiringEvents.push(e),this.fireables.forEach(t=>{e.propagationStopped||t.params.type&&t.params.type!==e.type||t.fire(e)}),this.currentlyFiringEvents.pop()),e}static createForTarget(e){return super.createForTarget(e,"observers",I)}static getForTarget(e){return super.getForTarget(e,"observers")}}var _=function(e,t,r=null,n={}){if(!e||!s(e))throw new Error("Object must be of type object!");var i;(g(t)||c(t)||l(t))&&(n=arguments.length>2?r:{},r=t,t=null),(i=I.getForTarget(e))&&i.findFireables({handler:r,fields:t,params:n}).forEach(e=>{i.removeFireable(e)})},q=function(e,t,r){_(r,null,{tags:["#e-bubbling",t,e]})},H=function(e){return typeof e},B=function(e,t,r=!1){if(""==t)return e;var n=r?e.lastIndexOf(t):e.indexOf(t);return-1===n?"":e.substr(n+t.length)},U=function(e,t,r={},n={}){t=u(t).slice();for(var i=e;!l(i)&&!c(i)&&t.length;){var a=t.shift();if(!(r.get?r.get(i,a):s(i)?a in i:i[a]))return void(n.exists=!1);i=r.get?r.get(i,a):i[a]}return n.exists=!0,i},z=class extends O{constructor(e,t=null,r={}){if(super(),this.handler=e,this.fields=t,this.params=r,this.fieldsArray=u(this.fields),this.isDynamicField=this.fieldsArray.filter(e=>e.indexOf("..")>-1||e.startsWith(".")||e.endsWith(".")).length,this.isDynamicField&&this.fieldsArray.length>1)throw new Error('Only one "Dynamic Field" must be observed at a time! "'+this.fieldsArray.join(", ")+'" have been bound together.')}fire(e){this.disconnected||this.params.type&&this.params.type!==e.type||e.dataEven&&!1!==this.params.diff||this.fireCallback(e,t=>{if(t){var r=[],n=[];return!1!==this.params.data&&t.forEach(t=>{var i=e.originatingFields.reduce((r,n)=>{var i=e.originatingData[n],s=e._originatingData[n];if(!r&&t===n)return[i,s];if(!r&&(t+".").startsWith(n+".")){var a=B(t,n+".");return[U(i,a.split("."),{get:G}),U(s,a.split("."),{get:G})]}return r},null);if(i)r.push(i.shift()),n.push(i.shift());else{var s=U(e.target,o(t)?t.split("."):t,{get:G});r.push(s),n.push(s)}}),a(this.fields)?e.response(this.handler(r,n,e)):e.response(this.handler(r[0],n[0],e))}r={},n={};return e.fields.forEach(t=>{var i=t in e.data?e.data[t]:G(e.target,t),s=t in e._data?e._data[t]:i;r[t]=i,n[t]=s}),e.response(this.handler(r,n,e))})}fireCallback(e,t){if(this.fieldsArray.length){var r=[];this.fieldsArray.filter((t,n)=>(t=o(t)?t.replace(/`/g,""):t,r[n]=[],e.originatingFields.filter(i=>{var s=i.split("."),a=this.isDynamicField?t.split(".").map((e,t)=>e||s[t]||"").join("."):t;return $(r[n],a),(a===i&&!e.srcEvt||!1!==this.params.observeUp&&(a+".").startsWith(i+".")||this.params.observeDown&&(i+".").startsWith(a+"."))&&(!this.isDynamicField||!a.split(".").filter(e=>!e).length)}).length)).length&&(n=r,n.reduce((e,t)=>{var r=[];return e.forEach(e=>{u(t).forEach(t=>{var n=e.slice();n.push(t),r.push(n)})}),r},[[]])).forEach(t)}else this.fields||e.srcEvt&&!this.params.observeDown||t();var n}},J=function(e,t,r=null,n={}){if(!e||!s(e))throw new Error("Object must be of type object!");if(g(t)&&(n=arguments.length>2?r:{},r=t,t=null),!g(r))throw new Error('Callback must be a function; "'+H(r)+'" given!');var i;return(i=I.getForTarget(e))||(i=I.createForTarget(e)),i.addFireable(new z(r,t,n))},K=function(e,t,r){var n;J(r,(i,s,a)=>{if(n=I.getForTarget(e)){var o=d(t,r);return n.fire(new L(e,{type:a.type,bubbling:!0,data:o,_data:o,srcEvt:a}))}},{observeDown:!0,tags:["#e-bubbling",t,e]})},Q=function(e,t,r=[],n=!1){var i=e.map((e,t)=>{if(!e||!s(e))throw new Error("Target must be of type object!");return{target:e,targetCopy:R(e,r),setData:{},_setData:{},delData:{},_delData:{},created:[],deleted:[]}}),o=t(...e);return i.map(e=>{var t,i,o=Object.keys(e.targetCopy),l=Object.keys(e.target),c=D(o.concat(l)).filter(t=>{if(!(r.length&&!r.includes(t)||a(e.target)&&("length"===t||".reflex"===t))){if(l.includes(t)?(e._setData[t]=e.targetCopy[t],e.setData[t]=e.target[t],o.includes(t)||e.created.push(t)):(e._delData[t]=e.targetCopy[t],e.delData[t]=void 0,e.deleted.push(t)),e.targetCopy[t]!==e.target[t])return e.targetCopy[t]&&s(e.targetCopy[t])&&q(e.target,t,e.targetCopy[t]),e.target[t]&&s(e.target[t])&&K(e.target,t,e.target[t]),!0;delete e.setData[t],delete e._setData[t]}});return((i=I.getForTarget(e.target))||n)&&(t=new L(e.target,{type:"transaction",data:M(e.setData,e.delData),_data:M(e._setData,e._delData),created:e.created,deleted:e.deleted}),i&&(Object.keys(e.delData).length&&t.response(i.fire(new L(e.target,{type:"del",data:e.delData,_data:e._delData,deleted:e.deleted}))),Object.keys(e.setData).length&&t.response(i.fire(new L(e.target,{type:"set",data:e.setData,_data:e._setData,created:e.created}))))),n?t:c}),o},G=function(e,t){if(!e||!s(e))throw new Error("Target must be of type object!");var r,n,i=function(r){return arguments.length?r:a(t)?d(t,e):e[t]};return r=(n=P.getForTarget(e))?n.fire(new y(e,{type:"get",query:t}),i):i(),a(e)&&!f(t)&&g(r)&&!m(r)?function(...t){return Q([e],()=>r.apply(e,t))}:r},V=function(e,t){return e.reduce((e,r)=>e&&t(r),!0)},Y=function(e,t){if(!e||!s(e))throw new Error("Target must be of type object!");var r,n=function(r){return arguments.length?r:t in e};return(r=P.getForTarget(e))?r.fire(new y(e,{type:"has",query:t}),n):n()},Z=function(e,t,r,n=null,i=!1){if(!t||!s(t))throw new Error("Target must be of type object!");h(r)&&(i=n);var l,c,p=r,d={},f={},m=[],g=(r,n,i)=>{var a;d[r]=t[r],Y(t,r)||m.push(r),e&&(n=(a=n||{}).value);var o,l,c=function(e){return arguments.length?e:(a?Object.defineProperty(t,r,a):t[r]=n,!0)};if(l=P.getForTarget(t)){var p=a?{type:"def",query:r,descriptor:a,related:i}:{type:"set",query:r,value:n,related:i};o=l.fire(new y(t,p),c)}else o=c();return o?(f[r]=n,f[r]!==d[r]?(d[r]&&s(d[r])&&q(t,r,d[r]),f[r]&&s(f[r])&&K(t,r,f[r])):(delete f[r],delete d[r])):delete d[r],o},v=[];if(a(p)||(o(p)||w(p))&&(p=u(p)))v=p.map(e=>g(e,n,p));else if(h(r)){var b=Object.keys(r);v=b.map(e=>g(e,r[e],b))}return((c=I.getForTarget(t))||i)&&(l=new L(t,{type:"set",data:f,_data:d,created:m}),c&&c.fire(l)),i?l:V(v,e=>e)},X=function(e,t,r=null,n=!1){return Z(!1,...arguments)},ee=function(e,t){u(t).forEach(t=>{var r,n,i=e[t],s=Object.getOwnPropertyDescriptor(e,t)||{enumerable:!(t in e)};"value"in s&&delete s.value,"writable"in s&&delete s.writable,s.get=()=>{if(r)return i;r=!0;var n=G(e,t);return r=!1,n},s.set=r=>{if(n)return i=r,!0;n=!0;X(e,t,r);return n=!1,!0},Object.defineProperty(e,t,s)})},te=function(e,t){if(!t||!s(t))throw new Error("Target must be of type object!");var r,n=function(r){return arguments.length?r:e?Object.getOwnPropertyNames(t):Object.keys(t)};return(r=P.getForTarget(t))?r.fire(new y(t,{type:e?"ownKeys":"keys"}),n):n()},re=function(e){return te(!1,...arguments)};var ne=function(e,t,r=null,n=!1){return Z(!0,...arguments)},ie=function(e,t,r=!1){if(!e||!s(e))throw new Error("Target must be of type object!");t=u(t);var n,i,a={},o={},l=[],c=t.map(r=>{a[r]=e[r],Y(e,r)&&l.push(r);var n,i,c=function(t){return arguments.length?t:(delete e[r],!0)};return(n=(i=P.getForTarget(e))?i.fire(new y(e,{type:"del",query:r,related:t}),c):c())&&(o[r]=void 0,a[r]&&s(a[r])&&q(e,r,a[r])),n});return((i=I.getForTarget(e))||r)&&(n=new L(e,{type:"del",data:o,_data:a,deleted:l}),i&&Object.keys(o).length&&i.fire(n)),r?n:V(c,e=>e)};class se extends T{fire(e){return this.fireables.forEach(t=>{e.propagationStopped||t.fire(e)}),e}static createForTarget(e,t=se){return super.createForTarget(e,"listeners",t)}static getForTarget(e){return super.getForTarget(e,"listeners")}}var ae=class extends O{constructor(e,t={}){super(),this.handler=e,this.params=t}fire(e){this.params.type===e.type&&e.response(this.handler.call(this.target,e.e))}};var oe={build:function e(t,r=!1){if(!t||!s(t))throw new Error("Target must be of type object!");var n=re(t);n.forEach(n=>{var i=G(t,n);s(i)&&i&&(K(t,n,i),e(i,r))}),r&&ee(t,n)},observe:J,unobserve:_,trap:function(e,t,r={}){if(!e||!s(e))throw new Error("Object must be of type object!");if(!g(t))throw new Error('Callback must be a function; "'+H(t)+'" given!');var n;return(n=P.getForTarget(e))||(n=P.createForTarget(e)),n.addFireable(new A(t,r))},untrap:function(e,t=null,r={}){if(!e||!s(e))throw new Error("Object must be of type object!");var n;(n=I.getForTarget(e))&&n.findFireables({handler:t,params:r}).forEach(e=>{n.removeFireable(e)})},def:ne,defineProperty:ne,set:X,del:ie,deleteProperty:ie,link:K,unlink:q,transaction:Q,get:G,has:Y,init:ee,keys:re,ownKeys:function(e){return te(!0,...arguments)},on:function(e,t,r,n={}){var i;return(i=se.getForTarget(e))||(i=se.createForTarget(e)),i.addFireable(new ae(r,M(n,{type:t})))},off:function(e,t,r=null,n={}){var i;(i=se.getForTarget(e))&&i.findFireables({handler:r,type:t,params:n}).forEach(e=>{i.removeFireable(e)})},trigger:function(e,t,r={}){var n;if(n=se.getForTarget(e))return n.fire(new b(e,M(r,{type:t})))},MutationEvent:L,QueryEvent:y,Event:b},le=function(e){return Array.isArray(e)},ce=function(e){return"function"==typeof e},pe=function(e){return ce(e)||e&&"[object function]"==={}.toString.call(e)},he=function(e){return!Array.isArray(e)&&"object"==typeof e&&e},ue=function(e){return Array.isArray(e)||"object"==typeof e},de=function(e){return!0!==e&&!1!==e&&null!==e&&""!==e&&!isNaN(1*e)},fe=function(e,t){var r=[];return function(e,t){t=(t=t||Object.prototype)&&!le(t)?[t]:t;var r=[];for(e=e;e&&(!t||t.indexOf(e)<0)&&"default"!==e.name;)r.push(e),e=e?Object.getPrototypeOf(e):null;return r}(e,t).forEach(e=>{!function(e,...t){t.forEach(t=>{e.indexOf(t)<0&&e.push(t)})}(r,...Object.getOwnPropertyNames(e))}),r};function me(e,t,r=!1,n=!1,i=!0){var s=0,a=e.shift();if((de(a)||!0===a||!1===a)&&(s=a,a=e.shift()),!e.length)throw new Error("_merge() requires two or more array/objects.");return e.forEach((e,o)=>{(ue(e)||pe(e))&&(r?fe(e):Object.getOwnPropertyNames(e)).forEach(l=>{var c=a[l],p=e[l];if((le(c)&&le(p)||he(c)&&he(p))&&(!0===s||s>0))a[l]=le(c)&&le(p)?[]:{},me([de(s)?s-1:s,a[l],c,p],t,r,n,i);else if(t(l,a,e,o))if(le(a)&&le(e))n?a[l]=p:a.push(p);else try{i?Object.defineProperty(a,l,Object.getOwnPropertyDescriptor(e,l)):a[l]=e[l]}catch(e){}})}),a}var ge=function(...e){return me(e,(e,t,r)=>!0,!1,!1,!1)},ve=function(e){return null===e||""===e},be=function(e){return arguments.length&&(void 0===e||void 0===e)},ye=function(e,t){if(!e)return!1;if(e instanceof t)return!0;var r=e=>{for(;e&&e!==Function.prototype;){if(e===t||e.prototypes&&e.prototypes.reduce((e,n)=>e||n===t||r(n),!1))return!0;e=Object.getPrototypeOf(e)}return!1};return r(e.constructor)},we=function(e){return"number"==typeof e},xe=function(e){return he(e)&&Object.getPrototypeOf(e)===Object.prototype},ke=function(e){return!0===e||!1===e},Ee=function(e,t){var r=void 0;return ue(e)&&Object.keys(e).forEach((n,i)=>{!1!==r&&(r=t(de(n)?parseFloat(n):n,e[n],i))}),r};const Se=function(e,t,r=!0,n=1){if(le(e)&&le(t)&&e.length!==t.length)return!r;if(he(e)&&he(t)){var i=Object.keys(e),s=Object.keys(t);if(!i.length&&!s.length)return xe(e)&&xe(t)?r:e===t===r;if(!Se(i,s))return!r}if(n>0&&(le(e)&&le(t)||he(e)&&he(t))){var a=function(e,t,r=!0,n=!0,i=!1,s=!1){if(le(e)&&le(t)){var a=[],o=!0;return e.forEach(e=>{if(o){var l=!1;Ee(t,(t,i)=>{(!l||n&&ue(e))&&(l=r(e,i),(le(l)&&!l.length||he(l)&&!Object.keys(l).length)&&(l=!1),ue(l)&&n&&(e=l))}),ue(l)?a.push(n?l:e):ke(l)?i&&!l||!i&&l?a.push(e):s&&(o=!1):a.push(l)}}),a}if(he(e)&&he(t)){a={},o=!0;return Object.keys(e).forEach(l=>{if(o){var c=r(e[l],t[l]);(le(c)&&!c.length||he(c)&&!Object.keys(c).length)&&(c=!1),ue(c)?a[l]=n?c:e[l]:ke(c)?i&&!c||!i&&c?a[l]=e[l]:s&&(o=!1):a[l]=c}}),a}}(e,t,(e,t)=>Se(e,t,r,n-1),!1,!1,!0);return le(a)?a.length===e.length&&a.length===t.length:he(a)&&he(e)?Object.keys(a).length===Object.keys(e).length&&Object.keys(a).length===Object.keys(t).length:a}return pe(r)?r(e,t):we(e)&&we(t)&&isNaN(e)&&isNaN(t)?r:e===t===r};var je=Se,Oe=class{even(e){return!(!he(e)||e.jsenType!==this.jsenType)&&je(e,this)}inherit(e){return this}withComments(e){return this.meta||(this.meta={}),this.meta.comments=e,this}withVars(e){return this.meta||(this.meta={}),this.meta.vars=e,this}};const Te=class extends Oe{};Object.defineProperty(Te.prototype,"jsenType",{get:()=>"Reference"});var Ce=Te;const Ae=class extends Oe{};Object.defineProperty(Ae.prototype,"jsenType",{get:()=>"CallExpression"});var Pe=Ae;const $e=class extends Oe{};Object.defineProperty($e.prototype,"jsenType",{get:()=>"FunctionType"});var Fe=$e;const We=class extends Oe{};Object.defineProperty(We.prototype,"jsenType",{get:()=>"IfConditional"});var Re=We;const Me={};class De{static parse(e,t,r={},n=De){if(e.length){var i;if(Me[e])if(i=De.parseOne(e,Me[e],r,n))return i;for(var s=Object.values(t||n.grammars),a=0;a<s.length;a++){var o=De.parseOne(e,s[a],r,n);if(o)return t||(Me[e]=s[a]),o}if(!1===r.assert)return;throw new Error("[Syntax error:] "+e)}}static parseOne(e,t,r={},n=De){var i=[],s=t.parse(e,(e,t,s={})=>{var a=De.parse(e,t,s?ge(r,s):r,n);return!1!==s.lodge&&(ye(a,Ce)||ye(a,Pe)?i.push(a):!a||ye(a,Fe)||ye(a,Re)||a.meta.vars.forEach(e=>i.push(e))),a});return s&&(s.meta||(s.meta={}),s.meta.vars=i,le(r.explain)&&r.explain.push(e+" >>-------------\x3e> "+s.jsenType)),s}}var Le=function(e){return"string"==typeof e},Ne=function(e,t=!0){return le(e)?e:!t&&he(e)?[e]:!1!==e&&0!==e&&function(e){return ve(e)||be(e)||!1===e||0===e||ue(e)&&!Object.keys(e).length}(e)?[]:function(e){return!Le(e)&&!be(e.length)}(e)?Array.prototype.slice.call(e):he(e)?Object.values(e):[e]};const Ie=function(e,t=1,r=!0){return!de(t)||t<=0?e:(!le(e)&&he(e)&&r&&(e=Object.values(e)),le(e)?e.reduce((e,n)=>le(n)||he(n)&&r?e.concat(Ie(le(n)?n:Object.values(n),t-1,r)):e.concat(n),[]):e)};var _e=Ie,qe=function(e,t=1){var r=0;e.forEach(e=>{r++});var n=e.slice(e.length-r,t);return arguments.length>1?n:n[0]},He=function(e,t=1){return arguments.length>1?qe(e.slice().reverse(),t).reverse():qe(e.slice().reverse())},Be=function(e,t=[]){return me([{},e],(e,r,n)=>{if(!pe(n[e]))return pe(t)?t(e):!le(t)||!t.length||t.indexOf(e)>-1},!1,!1,!1)};const Ue=class{static lex(e,t,r={}){if(!Le(e))throw new Error("Argument1 must be a string!");var n=e=>({delims:e.delims.slice(),options:Be(e.options),nesting:e.nesting.slice(),maxDepth:e.maxDepth,comments:e.comments.slice(),tokens:e.tokens.slice(),matches:e.matches.slice(),matchesi:Be(e.matchesi)});if(Ue.$cache[e]&&!1!==r.cache)for(var i=0;i<Ue.$cache[e].length;i++){var s=Ue.$cache[e][i];if(je(s.delims,t))return n(s)}var a=new Ue(e,r).lex(t);return!1!==r.cache&&(Ue.$cache[e]=Ue.$cache[e]||[],Ue.$cache[e].push(a)),n(a)}static split(e,t,r){return Ue.lex(e,t,r).tokens}static match(e,t,r){return Ue.lex(e,t,r).matches}constructor(e,t){if(!Le(e))throw new Error("Lexer requires the first argument to be a string.");this.$str=e,this.$options=t||{},this.$options.blocks||(this.$options.blocks=Ue.$blocks),this.$options.quotes||(this.$options.quotes=Ue.$quotes),this.$options.comments||(this.$options.comments=Ue.$comments)}lex(e,t){var r={delims:Ne(e),options:ge(!0,{},this.$options,t||{}),nesting:[],maxDepth:0,comments:[],tokens:[],matches:[],matchesi:{}};if(this._evalCharsAt(r,0),r.nesting.length)throw new Error("Error parsing the string: "+this.$str+". Unterminated blocks: "+_e(r.nesting).join(", "));return r}_evalCharsAt(e,t){if(!(t>=this.$str.length)){var r=1,n={},i={},s={};if(e.openComment||(i=this._testQuotes(e,t)),e.openQuote||(n=this._testComments(e,t)),e.openComment||n.ending)if(e.nesting.length||s.ending)this._push(e,this.$str[t]);else r=(o=n.starting||n.ending||this.$str[t]).length,this._push(e,o,"comments",n.starting);else if(e.openQuote||i.ending)this._push(e,this.$str[t]);else{if(e.options.limit&&e.matches.length===e.options.limit)return this._push(e,this.$str[t]),this._evalCharsAt(e,t+1);s=this._testNesting(e,t);s=this._testNesting(e,t);var a=this._testChars(e.options.stopChars||[],e,t);if(!e.nesting.length&&!1!==a)return e.options.stopChar=a,void(e.options.stopCharForward=this.$str.substr(t));if(e.delims.length)if(e.nesting.length||s.ending){var o;r=(o=s.starting||s.ending||this.$str[t]).length,this._push(e,o)}else{this._push(e,"");var l=this._testChars(e.delims,e,t);if(!1!==l&&(e.matches.push(l),e.matchesi[t]=l,r=l.length||1,!e.options.preserveDelims))return this._evalCharsAt(e,t+(l.length||1));this._push(e,l||this.$str[t])}else 2===e.nesting.length&&s.starting?(e.matches.push(null),this._push(e,s.starting),r=s.starting.length):!e.nesting.length&&s.ending?(this._push(e,s.ending),r=s.ending.length,e.matches.push(null)):this._push(e,this.$str[t])}return this._evalCharsAt(e,t+r)}}_testQuotes(e,t){var r={};return(e.options.quotes||[]).forEach(n=>{this.$str.substr(t,1)===n&&(e.openQuote?n===e.openQuote&&(e.openQuote=!1,r.ending=n):(e.openQuote=n,r.starting=n))}),r}_testComments(e,t){var r={};return(e.options.comments||[]).forEach(n=>{if(e.openComment){if(He(n)===He(e.openComment)){var i=He(n);this.$str.substr(t).startsWith(i)&&(e.openComment=!1,r.ending=i)}}else{var s=qe(n);this.$str.substr(t).startsWith(s)&&(e.openComment=n,r.starting=s)}}),r}_testNesting(e,t){var r={};return(e.options.blocks||[]).forEach(n=>{var i=qe(n);if(this.$str.substr(t).startsWith(i))e.nesting=e.nesting.concat([n]),r.starting=i;else if(e.nesting.length&&He(n)===He(He(e.nesting))){var s=He(n);this.$str.substr(t).startsWith(s)&&(e.nesting=e.nesting.slice(0,-1),r.ending=s)}}),e.maxDepth=Math.max(e.maxDepth,e.nesting.length),r}_testChars(e,t,r){for(var n=0;n<e.length;n++){var i=e[n];if(pe(i)){var s=i(this.$str.substr(0,r),this.$str.substr(r));if(!1!==s)return s}if(t.options.useRegex){var a=this.$str.substr(r).match(new RegExp("^"+i,!0!==t.options.useRegex?t.options.useRegex:""));if(a)return a[0]}if(!t.options.ci&&this.$str.substr(r,i.length)===i||t.options.ci&&this.$str.substr(r,i.length).toLowerCase()===i.toLowerCase())return i}return!1}_push(e,t,r="tokens",n=!1){var i=e.matches.length;if(be(e.tokens[i])&&(e.tokens[i]=""),"comments"===r){e.tokens[i].comments||(e.tokens[i]=new String(e.tokens[i]),e.tokens[i].comments=[]);var s=e.tokens[i].comments.length-(!e.tokens[i].comments.length||n?0:1);e.tokens[i].comments[s]=(e.tokens[i].comments[s]||"")+t}else{var a=e.tokens[i].comments;e.tokens[i]=new String(e.tokens[i]+t),e.tokens[i].comments=a}}split(e,t,r){return this.lex(t,r).tokens}match(e,t,r){return this.lex(t,r).matches}regParse(e,t){return this.lex(e,ge({useRegex:!0},t||{}))}regSplit(e,t){return this.regParse(e,t).tokens}regMatch(e,t){return this.regParse(e,t).matches}};Ue.$blocks=[["(",")"],["[","]"],["{","}"]],Ue.$quotes=['"',"'","`"],Ue.$comments=[["/*","*/"],["//","\n"]],Ue.$cache={};var ze=Ue;class Je{constructor(e,t=1){if(this.stack=e,this.type=t,!("main"in this.stack))throw new Error('A "main" context must be provided!');this.stack.super&&(this.stack.super=Je.create(this.stack.super)),this.stack.local=this.stack.local||{},this.stack.$local=this.stack.$local||{}}observe(e,t,r,n={}){n.observe&&e.length&&(this.stack.super&&this.stack.super.observe(e,(e,r,i)=>{if(i.fields.filter(e=>!Qe(this.stack.local,e,n)&&!Qe(this.stack.main,e,n)).length)return t(e,r,i)},r,n),ue(this.stack.main)&&n.observe(this.stack.main,e,(e,r,i)=>{if(i.fields.filter(e=>!Qe(this.stack.local,e,n)).length)return t(e,r,i)},r))}unobserve(e,t,r,n={}){n.unobserve&&(this.stack.super&&this.stack.super.unobserve(e,t,r,n),this.stack.main&&n.unobserve(this.stack.main,e,t,r))}handle(e,t,r,n=0){var i=()=>t(this.stack.main,null,()=>this.stack.super?this.stack.super.handle(e,t,r,n+1):r?r():void 0,n);return"toString"===e&&this.stack.local.toString===Object.prototype.toString?i():t(this.stack.local,this.stack.$local,i,n)}get(e,t={},r=!0){return e instanceof String&&(e+=""),this.handle(e,(n,i,s,a)=>{var o=Ke(n,e,t);return!be(o)||Qe(n,e,t)?pe(o)&&!function(e){return ce(e)&&/^class\s?/.test(Function.prototype.toString.call(e))}(o)&&r?o.bind(n):o:s()})}set(e,t,r={},n=!1){if(2===this.type&&"var"===n&&this.stack.super)return this.stack.super.set(e,t,r,n);e instanceof String&&(e+="");const i=(e,t,r,n)=>n.set?n.set(e,t,r):(e[t]=r,!0);return this.handle(!!n||e,(s,a,o)=>{if(a&&"const"===a[e])throw new Error("CONST "+e+" cannot be modified!");if(n){if(!["var","let","const"].includes(n))throw new Error("Unrecognized declarator: "+n+"!");return a[e]=n,i(s,e,t,r)}return Qe(s,e,r)?i(s,e,t,r):o()},()=>{throw new Error('"'+e+'" is undefined!')})}del(e,t={}){return e instanceof String&&(e+=""),this.handle(e,(r,n,i)=>Qe(r,e,t)?(n&&delete n[e],t.deleteProperty||t.del?(t.deleteProperty||t.del)(r,e):(delete r[e],!0)):i())}has(e,t,r={}){return e instanceof String&&(e+=""),t instanceof String&&(t+=""),this.handle(e,(n,i,s)=>{if(Qe(n,e,r)){var a=Ke(n,e,r);return Qe(a,t,r)}return s()},()=>{throw new Error('"'+e+'" is undefined!')})}exec(e,t,r={}){return e instanceof String&&(e+=""),this.handle(e,(n,i,s)=>{var a=Ke(n,e,r);if(!be(a)||Qe(n,e,r)){if(!pe(a)){if(r.exec)return r.exec(n,e,t);throw new Error('"'+e+'" is not a function! (Called on type: '+typeof n+".)")}return r.apply?r.apply(a,n,t):a.apply(n,t)}return s()},()=>{if(r.execUnknown)return r.execUnknown(this,e,t);throw new Error('"'+e+'()" is undefined!')})}static create(e){return e instanceof Je?e:new Je({main:e})}}const Ke=(e,t,r)=>r.get&&ue(e)&&!ve(e)?r.get(e,t):(ue(e)||Le(e)||we(e))&&!ve(e)?e[t]:void 0,Qe=(e,t,r)=>r.has&&ue(e)&&!ve(e)?r.has(e,t):ue(e)&&!ve(e)?t in e:!ve(e)&&!be(e[t]);var Ge=function(e,t,r){return e.startsWith(t)&&e.endsWith(r)},Ve=function(e,t,r=!1){if(""==t)return e;var n=r?e.lastIndexOf(t):e.indexOf(t);return-1===n?"":e.substr(n+t.length)},Ye=function(e,t,r=!1){if(""==t)return e;var n=r?e.lastIndexOf(t):e.indexOf(t);return-1===n?e:e.substr(0,n)},Ze=function(e,t,r){return function(e,t){return Ye(e,t,!0)}(Ve(e,t),r)};const Xe=class extends Oe{};Object.defineProperty(Xe.prototype,"jsenType",{get:()=>"Abstraction"});var et=Xe;const tt=class extends et{constructor(e){super(),this.expr=e}eval(e=null,t={}){return this.expr.eval(e,t)}toString(e=null){return"("+this.expr.toString(e)+")"}static parse(e,t,r=tt){if(Ge(e,"(",")")&&!ze.match(e,[" "]).length)return new r(t(Ze(e,"(",")")))}};var rt=tt;const nt=class extends Oe{};Object.defineProperty(nt.prototype,"jsenType",{get:()=>"ArrayType"});var it=nt;const st=class extends it{constructor(e){super(),this.exprs=e||[]}inherit(e){if(e instanceof it){var t=e.exprs.filter(e=>this.exprs.reduce((t,r)=>t&&!e.even(r),!0));this.exprs=t.concat(this.exprs)}return this}eval(e=null,t={}){return this.exprs.map(r=>r.eval(e,t))}toString(e=null){return"["+this.exprs.map(t=>t.toString(e)).join(", ")+"]"}static parse(e,t,r=st){if(Ge(e,"[","]")&&!ze.match(e.trim(),[" "]).length)return new r(ze.split(Ze(e,"[","]"),[","]).map(e=>e.trim()).filter(e=>e).map(e=>t(e)))}};var at=st;const ot=class extends Oe{};Object.defineProperty(ot.prototype,"jsenType",{get:()=>"Arguments"});var lt=ot;const ct=class extends lt{constructor(e=[]){super(),this.list=e}eval(e=null,t={}){return this.list.map(r=>r.eval(e,t))}toString(e=null){return"("+this.list.map(t=>t.toString(e)).join(", ")+")"}static parse(e,t,r=ct){if(e=e.trim(),Ge(e,"(",")")&&!ze.match(e,[" "]).length)return new r(ze.split(Ze(e,"(",")"),[","]).map(e=>t(e.trim())))}};var pt=ct,ht=function(e){return e.filter((e,t,r)=>r.indexOf(e)===t)};const ut=class extends Oe{};Object.defineProperty(ut.prototype,"jsenType",{get:()=>"AssertionExpression"});var dt=ut;const ft=class extends dt{constructor(e,t){super(),this.exprs=e,this.logic=t}eval(e=null,t={}){if("!"===this.logic)return!qe(this.exprs).eval(e,t);_e(ft.operators);for(var r=(this.logic||"").trim().toUpperCase(),n=r===(ft.operators.or||"").trim().toUpperCase(),i=r===(ft.operators.nor||"").trim().toUpperCase(),s=r===(ft.operators.and||"").trim().toUpperCase(),a=r===(ft.operators.nand||"").trim().toUpperCase(),o=!0,l=0,c=0;c<this.exprs.length;c++){if(o=this.exprs[c].eval(e,t),s&&!o)return!1;if(a&&!o)return!0;if(n&&o)return o;l+=o?1:0}return n?o:s||a?s:i&&0===l}toString(e=null){return"!"===this.logic?"!"+qe(this.exprs).toString(e):this.exprs.map(t=>t.toString(e)).join(" "+this.logic+" ")}static parse(e,t,r=ft){if(e.startsWith("!"))return new r([t(e.substr(1))],"!");var n=ze.lex(e,_e(r.operators));if(n.tokens.length>1){var i=ht(n.matches);if(i.length>1)throw new Error('"AND" and "OR" logic cannot be asserted in the same expression: '+e+"!");return new r(n.tokens.map(e=>t(e.trim())),qe(i))}}};ft.operators={and:"&&",or:"||"};var mt=ft;const gt=class extends Oe{};Object.defineProperty(gt.prototype,"jsenType",{get:()=>"AssignmentExpression"});var vt=gt;const bt=class extends vt{constructor(e,t,r,n="="){super(),this.initKeyword=e,this.reference=t,this.val=r,this.operator=n}eval(e=null,t={}){var r=this.reference.getEval(e,t),n=this.val.eval(e,t);if(!be(r.context)&&!be(r.name))return Je.create(r.context).set(r.name,n,t,this.initKeyword);throw new Error('"'+this+'" is undefined!')}toString(e=null){return(this.initKeyword?this.initKeyword+" ":"")+[this.reference.toString(e),this.operator,this.val.toString(e)].join(" ")}static parse(e,t,r=bt){var n=ze.lex(e,r.operators);if(2===n.tokens.length){var i,s=n.tokens.shift().trim(),a=n.tokens.shift().trim();if(["var","let","const"].includes(Ye(s," "))&&(i=Ye(s," "),s=Ve(s," ").trim()),!((s=t(s,null,{lodge:!1}))instanceof Ce&&(a=t(a))))throw new Error("Invalid assignment expression: "+e);return new r(i,s,a,n.matches[0].trim())}}};bt.operators=[" = "];var yt=bt;const wt=class extends Oe{};Object.defineProperty(wt.prototype,"jsenType",{get:()=>"Block"});var xt=wt;const kt=class extends Oe{};Object.defineProperty(kt.prototype,"jsenType",{get:()=>"ReturnDirective"});var Et=kt;class St extends xt{constructor(e,t){super(),this.stmts=e||[],this.delim=t}eval(e=null,t={}){e=Je.create(e);for(var r,n=[],i=0;i<this.stmts.length;i++){var s=this.stmts[i];if(s instanceof Et)return s.eval(e,t);n[i]=s.eval(e,t),function(r,n,i){e.observe(n,(n,i,s)=>{var a=r.eval(e,t);if(!1!==a)return a},{observeDown:!0,data:!1,tags:["#block",r]},t)}(s,(r=s.meta.vars,ht(r.map(e=>Ye(Ye(e.toString(),"["),"(")))),this.prevContext)}return this.prevContext=e,n}toString(e=null){return this.stmts.map(t=>t.toString(e)).join(this.delim)}static parse(e,t,r=St){var n=ze.lex(e+";",_e(r.operators).concat([St.testBlockEnd]));if(n.matches.length)return new r(n.tokens.map(e=>t(e.trim())).filter(e=>e),n.matches[0].trim())}static testBlockEnd(e,t){return!(!e.endsWith("}")||t.trim().startsWith("else"))&&""}}St.operators=[";","\r\n"];const jt=class extends Oe{};Object.defineProperty(jt.prototype,"jsenType",{get:()=>"BooleanType"});var Ot=jt;const Tt=class extends Ot{constructor(e){super(),this.state=e}eval(){return"true"===this.state.toLowerCase().trim()}toString(){return this.state}static parse(e,t,r=Tt){if("true"===(e=e.toLowerCase().trim())||"false"===e)return new r(e)}};var Ct=Tt;const At=class extends Pe{constructor(e,t){super(),this.reference=e,this.args=t}eval(e=null,t={}){var r=this.reference.getEval(e,t),n=this.args.eval(e,t);if(!be(r.context)&&!be(r.name))return Je.create(r.context).exec(r.name,n,t);throw new Error('"'+this+'" is undefined!')}toString(e=null){return this.reference.toString(e)+this.args.toString(e)}static parse(e,t,r=At){if(!e.startsWith("(")&&e.endsWith(")")&&!ze.match(e,[" "]).length){var n,i=ze.split(e,[]),s=i.pop();if(!((n=t(i.join(""),null,{lodge:!1}))instanceof Ce&&(s=t(s,[pt]))))throw new Error("Invalid call directive: "+e);return new r(n,s)}}};var Pt=At;const $t=class extends Oe{};Object.defineProperty($t.prototype,"jsenType",{get:()=>"ComparisonExpression"});var Ft=$t;const Wt=class extends Ft{constructor(e,t,r){super(),this.operand1=e,this.operand2=t,this.operator=r}eval(e=null,t={}){return Wt.compare(this.operand1.eval(e,t),this.operand2.eval(e,t),this.operator)}toString(e=null){return[this.operand1.toString(e),this.operator,this.operand2.toString(e)].join(" ")}static parse(e,t,r=Wt){var n=_e(r.operators).map(e=>" "+e+" "),i=ze.lex(e,n);if(i.tokens.length>1){if(i.tokens.length>2)throw new Error('Malformed "Comparison" expression: '+e+"!");return new r(t(qe(i.tokens).trim()),t(He(i.tokens).trim()),i.matches[0].trim())}}static compare(e,t,r="=="){if(-1===_e(Wt.operators).indexOf(r))throw new Error('The operator "'+r+'" is not recognized.');switch(r){case"===":return e===t;case"==":case"=":return e==t;case">":return e>t;case"<":return e<t;case">=":return e>=t;case"<=":return e<=t;case"!=":return e!=t;case"!==":return e!==t;case"^=":return Le(e)&&e.startsWith(t);case"$=":return Le(e)&&e.endsWith(t);case"*=":return!(!le(t)&&!Le(t))&&e.indexOf(t)>-1;case"~=":return Le(e)&&Le(t)&&(" "+e+" ").indexOf(" "+t+" ")>-1;case">=<":if(!le(t)||2!==t.length)throw new Error("A 'Between' comparison requires argument 2 to be an array of exactly 2 values.");return e>=t[0]&&e<=t[1];case"/**/":return t.match(new RegExp(e));default:return!1}}static diff(e,t,r){return!Wt.compare(e,t,r?"===":"==")}};Wt.operators={exact:{is:"===",isNull:"===",equalsTo:"==",strictlyNotEqualsTo:"!==",notEqualsTo:"!="},relative:{lesserThan:"<",greaterThan:">",lesserThanOrEqualsTo:"<=",greaterThanOrEqualsTo:">=",between:">=<"},partial:{startsWith:"^=",endsWith:"$=",contains:"*=",any:"~=",in:"~=",matches:"/**/"}};var Rt=Wt;const Mt=class extends Oe{};Object.defineProperty(Mt.prototype,"jsenType",{get:()=>"TernaryConditional"});var Dt=Mt;const Lt=class extends Dt{constructor(e,t,r){super(),this.assertion=e,this.onTrue=t,this.onFalse=r}eval(e=null,t={}){return this.assertion.eval(e,t)?this.onTrue.eval(e,t):this.onFalse.eval(e,t)}toString(e=null){return[this.assertion.toString(e),Lt.operators[0],this.onTrue.toString(e),Lt.operators[1],this.onFalse.toString(e)].join(" ")}static parse(e,t,r=Lt){var n=ze.split(e,r.operators);if(n.length>1){if(2===n.length)throw new Error("Malformed ternary expression: "+e+"!");return new r(t(n[0].trim()),t(n[1].trim()),t(n[2].trim()))}}};Lt.operators=["?",":"];var Nt=Lt;const It=class extends Oe{};Object.defineProperty(It.prototype,"jsenType",{get:()=>"DeleteExpression"});var _t=It;const qt=class extends _t{constructor(e,t="delete"){super(),this.reference=e,this.operator=t}eval(e=null,t={}){var r=this.reference.getEval(e,t);if(!be(r.context)&&!be(r.name))return Je.create(r.context).del(r.name,t);throw new Error('"'+this+'" is undefined!')}toString(e=null){return this.operator+" "+this.reference.toString(e)}static parse(e,t,r=qt){var n=ze.lex(e,Object.values(r.operators));if(1===n.matches.length&&e.startsWith(n.matches[0]+" ")){var i;if(!((i=t(n.tokens.pop().trim()))instanceof Ce))throw new Error("Invalid delete directive: "+e);return new r(i,n.matches[0].trim())}}};qt.operators={red:"reduce",del:"delete"};var Ht=qt;const Bt=class extends Fe{constructor(e,t,r={}){super(),this.paramters=e||{},this.statements=t,this.arrowFunctionFormatting=r}inherit(e){if(e instanceof Fe){for(var t=Object.keys(e.paramters),r=Object.keys(this.paramters),n=0;n<Math.max(r.length,t.length);n++){var i=t[n],s=r[n];if(!s&&i)throw new Error("Parameter #"+n+" ("+i+") in parent function must be implemented.");if(s&&i){var a=e.paramters[i],o=this.paramters[s];if(o&&!a)throw new Error("Parameter #"+n+" ("+s+") must not have a default value as established in parent function.");if(o&&a&&o.jsenType!==a.jsenType)throw new Error("Default value for parameter #"+n+" ("+s+") must be of type "+a.jsenType+" as established in parent function.")}}this.sup=e}return this}eval(e=null,t={}){return(...r)=>{var n={};Ee(Object.keys(this.paramters),(i,s)=>{var a=this.paramters[s];if(r.length-1<i&&!a)throw new Error('The parameter "'+s+'" is required.');n[s]=r.length>i?r[i]:this.paramters[s]?this.paramters[s].eval(e,t):null});var i=new Je({main:n,super:e});return this.statements.eval(i,t)}}toString(e=null){var t=[];if(Ee(this.paramters,(r,n)=>{t.push(r+(n?"="+n.toString(e):""))}),this.arrowFunctionFormatting){var r=!1===this.arrowFunctionFormatting.head||1===t.length&&-1===t[0].indexOf("="),n=!1===this.arrowFunctionFormatting.body;return(r?t[0]:"("+t.join(", ")+")")+" => "+(n?this.statements.toString(e):"{"+this.statements.toString(e)+"}")}return"function ("+t.join(", ")+") {"+this.statements.toString(e)+"}"}static parse(e,t,r=Bt){var n;if((e=e.trim()).startsWith("function")&&(n=ze.split(e,[]).slice(1).filter(e=>e.trim()))&&2===n.length)var i=!1,s=Ze(n.shift().trim(),"(",")"),a=Ze(n.shift().trim(),"{","}");else{if(e.startsWith("function")||!(n=ze.split(e,["=>"]))||2!==n.length)return;s=n.shift().trim(),a=n.shift().trim(),i={};Ge(s,"(",")")?s=Ze(s,"(",")"):i.head=!1,Ge(a,"{","}")?a=Ze(a,"{","}"):i.body=!1}var o={};ze.split(s,[","]).forEach(e=>{var r=e.split("=");r[1]?o[r[0].trim()]=t(r[1].trim(),null,{meta:null}):o[e.trim()]=null});var l=t(a,[St],{assert:!1})||t(a,null,{meta:null});return new r(o,"Block"===l.jsenType?l:new St([l]),i)}};Bt.operators=["=>"];var Ut=Bt;const zt=class extends Re{constructor(e,t,r,n={}){super(),this.assertion=e,this.onTrue=t,this.onFalse=r,this.params=n}eval(e=null,t={}){var r=new Je({main:{},super:e},2);return this.assertion.eval(e,t)?this.onTrue?this.onTrue.eval(r,t):void 0:this.onFalse?this.onFalse.eval(r,t):void 0}toString(e=null){var t=this.onTrue&&this.params.onTrueIsBlock?"{"+this.onTrue.toString(e)+"}":this.onTrue?this.onTrue.toString(e):"",r=this.onFalse&&this.params.onFalseIsBlock?"{"+this.onFalse.toString(e)+"}":this.onFalse?this.onFalse.toString(e):"";return"if ("+this.assertion.toString(e)+")"+t+(r?" else "+r:"")}static parse(e,t,r=zt){var n;if((e=e.trim()).startsWith("if")&&(n=ze.split(e,[],{limit:2}).slice(1).filter(e=>e.trim()))&&2===n.length){var i,s,a=t(Ze(n.shift().trim(),"(",")").trim()),o=ze.split(n.shift().trim(),["else"],{limit:1}),l=o.shift().trim(),c=(o.shift()||"").trim();return Ge(l,"{","}")?(i=!0,l=t(l=Ze(l,"{","}").trim(),[St],{assert:!1,meta:null})||t(l,null,{meta:null})):l=t(l,null,{meta:null}),c&&(Ge(c,"{","}")?(s=!0,c=t(c=Ze(c,"{","}").trim(),[St],{assert:!1,meta:null})||t(c,null,{meta:null})):c=t(c,null,{meta:null})),new r(a,l?"Block"===l.jsenType?l:new St([l]):null,c?"Block"===c.jsenType?c:new St([c]):null,{onTrueIsBlock:i,onFalseIsBlock:s})}}};var Jt=zt,Kt=function(e,t,r=null){return le(t)?e.filter(e=>r?t.filter(t=>r(e,t)).length:-1!==t.indexOf(e)):[]};const Qt=class extends Oe{};Object.defineProperty(Qt.prototype,"jsenType",{get:()=>"MathExpression"});var Gt=Qt;const Vt=class extends Gt{constructor(e,t){super(),this.val=e,this.exprs=t}eval(e=null,t={}){return this.exprs.reduce((r,n)=>{var i=n.val.eval(e,t),s=n.operator.trim();if(!(de(r)&&de(i)||"+"===s))throw new Error("Invalid Math expression: "+this.toString()+"!");switch(s){case"+":return r+i;case"-":return r-i;case"*":return r*i;case"/":return r/i}},this.val.eval(e,t))}toString(e=null){return[this.val.toString(e)].concat(this.exprs.map(t=>t.operator+" "+t.val.toString(e))).join(" ")}static parse(e,t,r=Vt){var n=ze.lex(e,_e(r.operators));if(n.tokens.length>1&&n.matches.length===n.tokens.length-1){var i=ht(n.matches);if(Kt(i,Vt.operators.sup).length&&Kt(i,Vt.operators.sub).length)throw new Error('"Addition/subtraction" and "multiplication/division" operators cannot be used in the same expression: '+e+"!");return new r(t(n.tokens.shift().trim()),n.tokens.map((e,r)=>({operator:n.matches[r],val:t(e.trim())})))}}};Vt.operators={sup:["*","/"],sub:[" + "," - "]};var Yt=Vt;const Zt=class extends Oe{};Object.defineProperty(Zt.prototype,"jsenType",{get:()=>"NumberType"});var Xt=Zt;const er=class extends Xt{constructor(e,t=0){super(),this.int=e,this.dec=t}eval(){return parseFloat(this.int+(this.dec?"."+this.dec:null))}toString(e=null){return this.int+(this.dec?"."+this.dec:null)}static parse(e,t,r=er){if(de(e)){e=e.split(".");return new r(parseInt(e.shift()),parseInt(e.shift()))}}};var tr=er;const rr=class extends Oe{};Object.defineProperty(rr.prototype,"jsenType",{get:()=>"ObjectType"});var nr=rr;const ir=class extends nr{constructor(e){super(),this.entries=e||{}}inherit(e){return e instanceof nr&&Ee(e.entries,(e,t)=>{e in this.entries||(this.entries[e]=t)}),this}eval(e=null,t={}){var r={};return Ee(this.entries,(n,i)=>{r[n]=i.eval(e,t)}),r}toString(e=null){var t=[];return Ee(this.entries,(r,n)=>{t.push(r+ir.operators.sub+n.toString(e))}),"{"+t.join(ir.operators.sup)+"}"}static parse(e,t,r=ir){if(Ge(e,"{","}")&&!ze.match(e.trim(),[" "]).length){var n={},i=ze.split(Ze(e,"{","}"),[ir.operators.sup]).map(e=>e.trim()).filter(e=>e);return Ee(i,(e,r)=>{var i=ze.split(r,[ir.operators.sub],{limit:1});n[qe(i).trim()]=t(He(i).trim())}),new r(n)}}};ir.operators={sup:",",sub:":"};var sr=ir;const ar=class extends Oe{};Object.defineProperty(ar.prototype,"jsenType",{get:()=>"PresenceOperator"});var or=ar;const lr=class extends or{constructor(e,t,r="in"){super(),this.prop=e,this.reference=t,this.operator=r}eval(e=null,t={}){var r=this.reference.getEval(e,t),n=this.prop.eval(e,t);if(!be(r.context)&&!be(r.name))return Je.create(r.context).has(r.name,n,t);throw new Error('"'+this+'" is undefined!')}toString(e=null){return[this.prop.toString(e),this.operator,this.reference.toString(e)].join(" ")}static parse(e,t,r=lr){var n=ze.lex(e,r.operators);if(2===n.tokens.length){var i,s;if(!((i=t(n.tokens.shift().trim()))&&(s=t(n.tokens.shift().trim()))instanceof Ce))throw new Error("Invalid presence check expression: "+e);return new r(i,s,n.matches[0].trim())}}};lr.operators=[" in "];var cr=lr;const pr=class extends Ce{constructor(e,t,r=!1){super(),this.context=e,this.name=t,this.backticks=r}getEval(e=null,t={}){var r=e,n=this.name;return this.context&&(n instanceof Oe&&(n=n.eval(e,t)),r=this.context.eval(e,t)),{context:r,name:n}}eval(e=null,t={}){var r=this.getEval(e,t);if(!be(r.context)&&!be(r.name))return Je.create(r.context).get(r.name,t)}toString(e=null){var t=this.name;if(this.context){var r=this.context.toString(e);t instanceof Oe?t="["+t.toString(e)+"]":this.backticks&&(t="`"+t+"`")}else{r=e;this.backticks&&(t="`"+t+"`")}return(r||"")+(r&&!t.startsWith("[")?pr.separator:"")+t}static parse(e,t,r=pr){if(!ze.match(e.trim(),[" "]).length){var n,i,s=ze.split(e,[]),a=s.pop(),o=ze.split(a.trim(),[r.separator],{preserveDelims:!0});if(o.length>1&&(a=o.pop().substr(1),s=s.concat(o)),Ge(a,"`","`")&&(a=Ze(a,"`","`"),i=!0),s.length&&((n=t(s.join(""))).isContext=!0),Ge(a,"[","]")){if(!n)throw new Error("Invalid reference: "+e+"!");a=t(Ze(a,"[","]"))}return new r(n,a,i)}}};pr.separator=".";var hr=pr;const ur=class extends Et{constructor(e){super(),this.expr=e}eval(e=null,t={}){return this.expr?this.expr.eval(e,t):void 0}toString(e=null){return this.expr?"return "+this.expr.toString(e):"return"}static parse(e,t,r=ur){var n=e.toLowerCase();if(n.startsWith("return ")||"return"===n)return new r(t(e.substr(6).trim()))}};var dr=ur;const fr=class extends Oe{};Object.defineProperty(fr.prototype,"jsenType",{get:()=>"StringType"});var mr=fr;const gr=class extends mr{constructor(e,t){super(),this.expr=e,this.quote=t}eval(){return this.expr}toString(){return this.quote+this.expr+this.quote}static parse(e,t,r=gr){if(e=e.trim(),(Ge(e,'"','"')||Ge(e,"'","'"))&&!ze.match(e,[" "]).length){var n=Ge(e,'"','"')?'"':"'";return new r(Ze(e,n,n),n)}}};var vr=gr;De.grammars={If:Jt,Return:dr,Deletion:Ht,Assignment:yt,Presence:cr,Func:Ut,Abstraction:rt,Condition:Nt,Assertion:mt,Comparison:Rt,Math:Yt,Arr:at,Obj:sr,Num:tr,Str:vr,Bool:Ct,Call:Pt,Reference:hr};var br=De;var yr={Window:null,Trap:null,params:{rootAttribute:"root",scopedIdAttribute:"scoped:id",idHintsAttribute:"scope-hint",scopeTreePropertyName:"scopeTree",addCallback:null}};const wr={std:{html:{type:["#sectioning-root"],model:["head","body"],singleton:!0},caption:{model:["#flow","!table"],singleton:!0},col:{model:["#nothing"]},colgroup:{model:[{"colgroup[span]":["#nothing"]},{":not(colgroup[span])":["col","template"]}],singleton:!0},dd:{model:["#flow"],implicitRole:"definition"},dt:{model:["#flow","!#heading","!#sectioning","!header","!footer"],implicitRole:"term"},figcaption:{model:["#flow"],singleton:!0},head:{model:["#metadata"],singleton:!0},legend:{model:["#phrasing"],singleton:!0},li:{model:["#flow"],implicitRole:"listitem"},optgroup:{model:["option","#script-supporting"],implicitRole:"group"},option:{model:[{"option[label][value]":["#nothing"]},{"option[label]:not(option[value])":["#text"]},{":not(option[label])":["#text"]}]},param:{model:["#nothing"]},rp:{model:["#text"]},rt:{model:["#phrasing"]},source:{model:["#nothing"]},summary:{model:["#phrasing","#heading"],singleton:!0},track:{model:["#nothing"]},tbody:{model:["#script-supporting","tr"]},td:{model:["#flow","!#heading","!#sectioning","!header","!footer"]},tfoot:{model:["tr","#script-supporting"],singleton:!0},thead:{model:["tr","#script-supporting"],singleton:!0},tr:{model:["#script-supporting","td","th"]},a:{type:["#flow","#phrasing",{"a[href]":["#interactive","#palpable"]}],model:["#transparent","!#interactive","!a"]},abbr:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},address:{type:["#flow","#palpable"],model:["#flow","!#heading","!#sectioning","!header","!footer","!address"]},area:{type:["#flow","#phrasing"],model:["#nothing"]},article:{type:["#flow","#palpable","#sectioning-content"],model:["#flow"],implicitRole:"article",acceptableRoles:["application","article","document","main"]},aside:{type:["#flow","#palpable","#sectioning-content"],model:["#flow"],implicitRole:"complementary",acceptableRoles:["complementary","note","search"]},audio:{type:["#embedded","#flow","#phrasing",{"audio[controls]":["#interactive","#palpable"]}],model:["#transparent","!#media","track",{":not(audio[src])":["source"]}]},b:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},base:{type:["#metadata"],model:["#nothing"],singleton:!0},bdi:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},bdo:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},blockquote:{type:["#flow","#palpable","#sectioning-root"],model:["#flow"]},body:{type:["#sectioning-root"],model:["#flow","@banner","@contentinfo","@complementary","@main"],singleton:!0},br:{type:["#flow","#phrasing"],model:["#nothing"]},button:{type:["#flow","#interactive","#palpable","#phrasing"],model:["#phrasing","!#interactive"]},canvas:{type:["#embedded","#flow","#palpable","#phrasing"],model:["#transparent","!#interactive","a","img[usemap]","button",'input[type="button"]','input[type="radio"]','input[type="checkbox"]',"select[multiple]","select[size>=1]","[tabindex]!#interactive"]},cite:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},code:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},data:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},datalist:{type:["#flow","#phrasing"],model:["#phrasing","#script-supporting","option"]},del:{type:["#flow","#phrasing"],model:["#transparent"]},details:{type:["#flow","#interactive","#palpable","#sectioning-root"],model:["#flow","summary"]},dfn:{type:["#flow","#palpable","#phrasing"],model:["#phrasing","!dfn"],implicitRole:"term"},dialog:{type:["#flow","#sectioning-root"],model:["#flow"],implicitRole:"dialog"},div:{type:["#flow","#palpable"],model:[{"dl > div":["dt","dd"]},{div:["#flow"]}]},dl:{type:["#flow"],model:["#script-supporting","dl","dt","div"]},em:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},embed:{type:["#embedded","#flow","#phrasing","#interactive","#palpable"],model:["#nothing"]},fieldset:{type:["#flow","#sectioning-root","#palpable"],model:["legend","#flow"]},figure:{type:["#flow","#sectioning-root","#palpable"],model:["#flow","figcaption"],implicitRole:"figure"},footer:{type:["#flow","#palpable"],model:["#flow","!header","!footer"],acceptableRoles:["contentinfo"],singleton:!0},form:{type:["#flow","#palpable"],model:["#flow","!form"]},h1:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h2:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h3:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h4:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h5:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h6:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},header:{type:["#flow","#palpable"],model:["#flow","!header","!footer"],acceptableRoles:["banner"],singleton:!0},hgroup:{type:["#flow","#heading","#palpable"],model:["h1","h2","h3","h4","h5","h6","#script-supporting"]},hr:{type:["#flow"],model:["#nothing"],implicitRole:"separator"},i:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},iframe:{type:["#embedded","#flow","#phrasing","#interactive","#palpable"],model:["#nothing"]},img:{type:["#embedded","#flow","#phrasing",{"img[usemap]":["#interactive","#palpable"]}],model:["#nothing"]},input:{type:["#flow","#phrasing",{'input:not([type!="hidden"])':["#interactive","#palpable"]}],model:["#nothing"]},ins:{type:["#flow","#phrasing","#palpable"],model:["#transparent"]},kbd:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},label:{type:["#flow","#phrasing","#interactive","#palpable"],model:["#phrasing","!label"]},link:{type:["#metadata",{"body link":["#flow","#phrasing"]}],model:["#nothing"]},main:{type:["#flow","#palpable"],model:["#flow"],implicitRole:"main",singleton:!0},map:{type:["#flow","#phrasing","#palpable"],model:["#transparent"]},mark:{type:["#flow","#phrasing","#palpable"],model:["#transparent"]},math:{type:["#embedded","#flow","#phrasing","#palpable"],model:[]},menu:{type:["#flow",{":contains(> li)":["#palpable"]}],model:["#script-supporting","li"],implicitRole:"list"},meta:{type:["#metadata",{"meta[itemprop]":["#flow","#phrasing"]}],model:["#nothing"],names:["application-name","author","description","generator","keywords","referrer","theme-color"]},meter:{type:["#flow","#labelable","#phrasing","#palpable"],model:["#phrasing","!meter"]},nav:{type:["#flow","#sectioning-content","#palpable"],model:["#flow"],implicitRole:"navigation",acceptableRoles:["navigation"]},noscript:{type:["#metadata","#flow","#phrasing"],model:[{"head link":["style","meta","link"]},{":not(head link)":["#transparent","!noscript"]}]},object:{type:["#embedded","#flow","#phrasing",{"object[usemap]":["#interactive","#palpable"]}],model:["#transparent","param"]},ol:{type:["#flow",{":contains(> li)":["#palpable"]}],model:["#script-supporting","li"],implicitRole:"list"},output:{type:["#flow","#labelable","#phrasing","#palpable"],model:["#phrasing","!meter"]},p:{type:["#flow","#palpable"],model:["#phrasing"]},picture:{type:["#embedded","#flow","#phrasing"],model:["source","img","#acript-supporting"]},pre:{type:["#flow","#palpable"],model:["#phrasing"]},progress:{type:["#flow","#labelable","#phrasing","#palpable"],model:["#phrasing","!progress"]},q:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},ruby:{type:["#flow","#phrasing","#palpable"],model:["rp","rt"]},s:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},samp:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},script:{type:["#flow","#metadata","#phrasing","#acript-supporting"],model:[{"script[src]":[]}]},section:{type:["#flow","#sectioning-content","#palpable"],model:["#flow"],implicitRole:"region",acceptableRoles:["alert","alertdialog","application","contentinfo","dialog","document","log","main","marquee","region","search","status"]},select:{type:["#flow","#interactive","#labelable","#phrasing","#palpable"],model:["option","optgroup","#acript-supporting"]},slot:{type:["#flow","#phrasing"],model:["#transparent"]},small:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},span:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},strong:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},style:{type:["#metadata"],model:["#text"]},sub:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},sup:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},svg:{type:["#embedded","#flow","#phrasing","#palpable"],model:[]},table:{type:["#flow","#palpable"],model:["caption","colgroup","thead","tbody","tr","tfoot","#script-supporting"]},td:{type:["#sectioning-root"],model:["#flow"]},template:{type:["#metadata","#flow","#phrasing","#script-supporting"],model:["#nothing"]},textarea:{type:["#flow","#interactive","#labelable","#phrasing","#palpable"],model:["#text"]},time:{type:["#flow","#phrasing","#palpable"],model:[{"time[datetime]":["#phrasing"]},{":not(time[datetime])":["#text"]}]},title:{type:["#metadata"],model:["#text"],singleton:!0},u:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},ul:{type:["#flow",{":contains(> li)":["#palpable"]}],model:["#script-supporting","li"],implicitRole:"list"},var:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},video:{type:["#embedded","#flow","#phrasing",{"video[controls]":["#interactive","#palpable"]}],model:["#transparent","!#media","track",{":not(video[src])":["source"]}]},wbr:{type:["#flow","#phrasing"],model:["#nothing"]}},aria:{banner:{type:["@banner"],singleton:!0},contentinfo:{type:["@contentinfo"],singleton:!0},complementary:{type:["@complementary"],singleton:!0},navigation:{type:["@navigation"],singleton:!0},list:{type:["@list"]},listitem:{type:["@listitem"]}},getContentModelFor(e){var t=e.nodeName.toLowerCase();return wr.std[t]?wr.expandRules(e,wr.std[t].model||[]):[]},getCategoriesFor(e,t=!0){var r=e.nodeName.toLowerCase(),n=wr.std[r]||wr.aria[r]||{},i=[];if(t&&!e.nodeName.startsWith("#")&&(e.hasAttribute("role")||n.implicitRole))if(e.hasAttribute("role")){e.getAttribute("role").split(" ");e.getAttribute("role").split(" ").forEach(t=>{n&&n.acceptableRoles&&!n.acceptableRoles.includes(t)||(t=t.trim(),i.push("@"+t),wr.aria[t]&&wr.aria[t].type&&(i=i.concat(wr.expandRules(e,wr.aria[t].type||[]))))})}else n.implicitRole&&$(i,"@"+n.implicitRole,r);else i=$(wr.expandRules(e,n.type||[]),r);return i},assertNodeBelongsInContentModel(e,t){var r,n=e instanceof HTMLElement?wr.getContentModelFor(e):e,i=t instanceof HTMLElement?wr.getCategoriesFor(t):t;return!j(n,["#nothing","#text"]).length&&(n.forEach(e=>{if(e.startsWith("!")){var t=e.substr(1);i.includes(t)&&(r=!1)}else!1!==r&&i.includes(e)&&(r=!0)}),r&&!0)},assertNodeBelongsInScopeAs(e,t,r=null){for(var n,i=wr.getCategoriesFor(e),s=t;!n&&(s=s.parentNode);)j(i,wr.getCategoriesFor(s)).length&&wr.assertNodeBelongsInContentModel(s,r&&r.type||t)&&(n=s);return n===e},expandRules(e,t){var r=t.reduce((t,r)=>(h(r)?e.matches(Object.keys(r)[0])&&(t=t.concat(Object.values(r)[0])):t.push(r),t),[]);return r.includes("#sectioning-root")&&r.push("#sectioning-content"),r}};var xr=wr;class kr{constructor(e){Object.defineProperty(this,"_el",{value:e}),Object.defineProperty(this,"el",{value:"#document"===e.nodeName?e.querySelector("html"):e}),Object.defineProperty(this.el,".scopedHTML",{value:this}),this.isRoot=e.hasAttribute(yr.params.rootAttribute);const t={};if(Object.defineProperty(this,"store",{value:t}),yr.Trap&&(yr.Trap.trap&&yr.Trap.trap(t,(e,t,r)=>r(t||this.find(e.query)),{type:"get"}),yr.Trap.link&&yr.Trap.link(this.el,yr.params.scopeTreePropertyName,this.store),yr.Trap.init)){const t=(e.getAttribute(yr.params.idHintsAttribute)||"").split(" ").map(e=>e.trim()).filter(e=>e);yr.Trap.init(this.store,t)}}add(e,t){var r=(e,t,r,n=!1)=>{var i=r;return n&&(yr.params.addCallback&&(i=yr.params.addCallback(i,this)),new kr(i)),yr.Trap&&yr.Trap.set?yr.Trap.set(e,t,i):a(e)?e.push(i):e[t]=i,n&&function e(t,r){if(t.parentNode&&yr.Window.MutationObserver){var n=!1;new yr.Window.MutationObserver(e=>{e.forEach(e=>{!n&&u(e.removedNodes).includes(t)&&(n=!0,r())})}).observe(t.parentNode,{childList:!0}),e(t.parentNode,()=>{n||(n=!0,r())})}}(r,()=>{yr.Trap&&yr.Trap.deleteProperty?yr.Trap.deleteProperty(e,t):a(e)?_remove(e,i):delete e[t]}),r};if(a(t)){var n=[];return t.forEach((e,t)=>r(n,t,e,!0)),r(this.store,e,n),n}return r(this.store,e,t,!0)}find(e){return u(e).forEach(e=>{if(this.store[e])return this.store[e];var t;((t=this.findExplicit(e))||(t=this.findImplicit(e)))&&this.add(e,t)}),a(e)?_objFrom(e,this.store):this.store[e]}findExplicit(e){if(this.isRoot){var t,r,n=yr.Window.CSS?yr.Window.CSS.escape:e=>e,i="["+n(yr.params.rootAttribute)+"]",s="["+n(yr.params.scopedIdAttribute)+'="'+e+'"]';if((r=(this.el.shadowRoot||this.el).querySelector(s))&&(this.el.shadowRoot&&(!r.parentNode.closest||!r.parentNode.closest(i))||!this.el.shadowRoot&&r.parentNode&&(t=r.parentNode.closest(i))&&t.isSameNode(this.el)))return r}}findImplicit(e){if(!f(e)&&!e.match(/[^a-zA-Z0-9\-]/)){var t=[];xr.aria[e]?t.push({Schema:xr.aria[e],selector:['[role="'+e+'"]']}):t.push({Schema:xr.std[e]||xr.aria[e],selector:[e,'[role="'+e+'"]']}),v(xr.std,(r,n)=>{n.implicitRole===e&&t.push({Schema:n,selector:[r]})});var r=null;return t.forEach(e=>{(this.el.shadowRoot||this.el).querySelectorAll(e.selector.join(",")).forEach(t=>{xr.assertNodeBelongsInScopeAs(this.el,t,e.schema)&&(e.schema&&e.schema.singleton?r=t:r&&!a(r)||(r=r||[]).push(t))}),r||!e.schema||e.schema.singleton||(r=[])}),r}}}kr.init=function(e,t=oe){if(yr.Window=e,yr.Trap=t,!yr.Window||!("Element"in yr.Window))throw new Error('The "Element" class not found in global context!');if(yr.params.scopeTreePropertyName in yr.Window.Element.prototype)throw new Error('The "Element" class already has a "'+yr.params.scopeTreePropertyName+'" property!');Object.defineProperty(yr.Window.Element.prototype,yr.params.scopeTreePropertyName,{get:function(){return this[".scopedHTML"]||new kr(this),yr.params.proxyScopedObjects?yr.Trap?new Proxy(this[".scopedHTML"].store,yr.Trap):new Proxy(this[".scopedHTML"].store):this[".scopedHTML"].store}})};var Er={Window:null},Sr=class{};Sr.init=function(e){Er.Window=e};var jr=class{static parse(e,t={}){var r;return(r=br.parse(e,[St],M({assert:!1},t)))||(r=new St([br.parse(e,null,t)])),r}},Or=Je;var Tr={Window:null,Trap:null,params:{scriptElement:'script[type="text/scoped-js"]',bindMethodName:"bind",inertContexts:[],autoHide:!0,bindCallback:null},globals:{}};jr.init=function(e,t=oe){Tr.Window=e,Tr.Trap=t;var r,n,i;r=e=>{var t;if(s(e.parentNode).AST)throw new Error("An element must only have one scopedJS instance!");(t=(e.textContent||"").trim())&&(s(e.parentNode).AST=jr.parse(t),a(e.parentNode),Tr.params.autoHide&&e.remove())},n=()=>i().forEach(r),i=()=>u(Tr.Window.document.scripts).filter(e=>e.matches(Tr.params.scriptElement)&&!e[".scopedJS-scooped"]&&!function(e,t){return e.reduce((e,r)=>e||t(r),!1)}(Tr.params.inertContexts,t=>e.closest(t))).map(e=>(e[".scopedJS-scooped"]=!0,e)),Tr.Window.document.addEventListener("DOMContentLoaded",()=>setTimeout(n,0),!1),Tr.Window.addEventListener("load",()=>setTimeout(n,0),!1),"complete"===Tr.Window.document.readyState&&n(),Tr.Window&&Tr.Window.MutationObserver&&new Tr.Window.MutationObserver(()=>n()).observe(Tr.Window.document,{childList:!0,subtree:!0});var s=function(e){if(!e[".scopedJS"]){var t={};Object.defineProperty(e,".scopedJS",{get:function(){return t}})}return e[".scopedJS"]},a=function(e){if(s(e).AST){var t=s(e).binding||{},r={main:{},super:Tr.globals};Tr.Trap?Tr.Trap.set(r.main,"this",e):r.main.this=e;var n={main:t,super:new Or(r)},i=new Or(n),a=s(e).AST.eval(i,Tr.Trap);g(a)&&a(t)}};if(!Tr.Window||!("Element"in Tr.Window))throw new Error('The "Element" class not found in global context!');if(Tr.params.bindMethodName in Tr.Window.Element.prototype)throw new Error('The "Element" class already has a "'+Tr.params.bindMethodName+'" property!');Object.defineProperty(Tr.Window.Element.prototype,Tr.params.bindMethodName,{value:function(e){var t=s(this).binding;s(this).binding=e,a(this),Tr.params.bindCallback&&Tr.params.bindCallback(this,e,t)}})};var Cr={Window:null,Trap:null,ScopedHTML:null,ScopedJS:null,params:{namespaceAttribute:"namespace",bundleElement:"html-bundle",importElement:"html-import",keyValAttributes:[],listAttributes:[],norecomposeAttributes:["nocompose","shadow"],recomposeCallback:null}},Ar=function(e,t,r=!1){if(""==t)return e;var n=r?e.lastIndexOf(t):e.indexOf(t);return-1===n?e:e.substr(0,n)},Pr=function(e,t,r,n=[]){if(n=n.concat([Cr.params.namespaceAttribute,...Cr.params.norecomposeAttributes]),t.hasAttribute("norecompose")&&(n=n.concat((t.getAttribute("norecompose")||"*").split(" ").map(e=>e.trim()))),g(Cr.params.recomposeCallback)){var i=Cr.params.recomposeCallback(e,t,r,n);if(!1===i)return!1;(o(i)||a(i))&&(n=n.concat(i))}var s=Cr.params.listAttributes.concat(["role","class"]);Cr.scopedHTML&&(s=s.concat([Cr.ScopedHTML.params.idHintsAttribute])),D(s).forEach(i=>{var s,a;if(!n.includes(i)&&!n.includes("*")&&(s=e.getAttribute(i))){if(a=t.getAttribute(i))var o="prepend"===r?[s,a]:[a,s];else o=[s];t.setAttribute(i,D(o.join(" ").split(" ").map(e=>e.trim())).join(" ")),n.push(i)}}),D(Cr.params.keyValAttributes.concat("style")).forEach(i=>{var s,a;if(!n.includes(i)&&!n.includes("*")&&(s=e.getAttribute(i))){if(a=t.getAttribute(i))(o="prepend"===r?[s,a]:[a,s])[0].trim().endsWith(";")||(o[0]=o[0]+";");else var o=[s];t.setAttribute(i,o.join(" ")),n.push(i)}});for(var l=0;l<e.attributes.length;l++){var c=e.attributes[l];n.includes(c.name)||n.includes("*")||t.hasAttribute(c.name)&&![Cr.ScopedHTML.params.rootAttribute,Cr.ScopedHTML.params.scopedIdAttribute].includes(c.name)||(t.setAttribute(c.name,c.value),n.push(c.name))}if(!n.includes("--scoped-js")&&!n.includes("*")&&Cr.ScopedJS){var p=u((t.shadowRoot||t).children).filter(e=>e.matches(Cr.ScopedJS.params.scriptElement)),h=u((e.shadowRoot||e).children).filter(e=>e.matches(Cr.ScopedJS.params.scriptElement));h.length&&(p.length?p[0][r](h[0].textContent):t.prepend(h[0].cloneNode(!0)))}return t},$r=function(e,t){return t.matches(Cr.params.importElement)?function(e,t){t=t.cloneNode(!0);var r=e.getAttribute(Cr.params.namespaceAttribute),n=Cr.ScopedHTML&&t.hasAttribute(Cr.ScopedHTML.params.rootAttribute);return t.setAttribute(Cr.params.namespaceAttribute,r),Pr(e,t,"append"),Cr.ScopedHTML?(u((e.shadowRoot||e).children).forEach((e,r)=>{if(!Cr.ScopedJS||!e.matches(Cr.ScopedJS.params.scriptElement)){e=e.cloneNode(!0);var i,s=Cr.Window.CSS?Cr.Window.CSS.escape:e=>e;if(n&&(i=e.getAttribute(Cr.ScopedHTML.params.scopedIdAttribute))){var a,o="["+s(Cr.ScopedHTML.params.rootAttribute)+"]",l="["+s(Cr.ScopedHTML.params.scopedIdAttribute)+'="'+i+'"]';t.shadowRoot&&(a=t.shadowRoot.querySelector(l))||(a=t.querySelector(l))&&a.parentNode.closest(o)===t?(Pr(a,e,"prepend"),a.replaceWith(e)):t.append(e)}else t.append(e)}}),t):t}(t,e):Pr(e,t,"prepend")};class Fr{constructor(e,t,r,n=null){this.namespace=u(t),this.getter=r,this.carry=n,this.collections={},this.value,this.sources=[],this.loadingSources=new Promise((t,r)=>{var n=[];u(e).forEach(e=>{e instanceof Promise?(n.push(e),e.then(r=>{n=n.filter(t=>t!==e),this.sources.push(r),n.length||t()})):this.sources.push(e)}),n.length||t()})}enter(e){return e in this.collections||(this.collections[e]=new Fr(this.sources,this.namespace.concat(e),this.getter,this)),this.collections[e]}leave(){return this.carry}get(){if(!this.value){var e=this.namespace.slice(),t=this.carry?this.carry.get():null;this.sources.forEach((r,n)=>{(t=this.getter.call(null,r,e,t,n))&&(this.value=t)})}return this.value}find(e){for(var t,r,n=e.split("/"),i=this;(r=n.shift())&&(i=i.enter(r));)t=i;var s=t.get();if(s)return s.cloneNode(!0)}}var Wr=function(e,t,r=!1,n=!1,i=!1){if(-1===e.indexOf(t))return r?[]:void 0;var s=!0===r?e.length-1:!1===r?1:r,a=i?e.lastIndexOf(t)+1:e.indexOf(t)+1,o=l(t)?[]:e.slice(a,a+s);return n&&o.length<s&&o.length<e.length&&(g(n)&&!n(s-o.length)||(o=o.concat(e.slice(0,s-o.length)))),r?o:o[0]};class Rr{static capture(e,t,r){const n=function(e){var t={roadmap:e};return t.roadmap&&(t.namespace=Ar(t.roadmap,"//"),t.subnamespace=B(t.roadmap,"//"),t.subnamespace.startsWith("/")&&(t.subnamespace=B(t.subnamespace,"/")),t.subnamespace.endsWith("//")&&-1===t.subnamespace.indexOf("///")&&(t.subnamespace=t.subnamespace+t.namespace+"//")),t}(e.getAttribute(Cr.params.namespaceAttribute)||""),i=Cr.syncListCallback||function(e,t,r,n=!1){return arguments.length>2?t.bind(r):t.unbind()};if(n.subnamespace)return s(t)&&t&&Cr.Trap.observe(t,r=>Rr.sync(e,t,n.subnamespace,i),{tags:["#HTMLTransport-sync",e]}),s(r)&&r&&Cr.Trap.unobserve(r,null,null,{tags:["#HTMLTransport-sync",e]}),Rr.sync(e,t||{},n.subnamespace,i)}static sync(e,t,r,n=null){var i=e[".scopedHTML"],s=r.split("//");s[0].indexOf("[")>-1&&(s[0]='"'+s[0].replace(/\[/g,'" + ').replace(/\]/g,' + "')+'"');var a=Cr.Trap.keys(t),o=Cr.Trap.keys(i.store),l=new Cr.Trap.MutationEvent(e,{type:"remodelling"});return D(a.concat(o)).forEach(r=>{r=f(r)?parseInt(r):r;var o,c=i.find(r);if(Cr.Trap.has(t,r)){var p=Cr.Trap.get(t,r),h=!1;if(!c){var u=s.slice();u[0].indexOf('"')>-1&&(u[0]=u[0].replace(/" \+  \+ "/g,r),u[0]=br.parse(u[0]).eval(p));var d=Rr.import(u.join("//"));if(d){var m=Wr(a,r+"",!0).reduce((e,t)=>e||i.find(t),null);m?m.before(d):e.append(d),c=i.add(r,d),h=!0}}c&&g(n)&&(o=n(r,c,p,h))}else if(c){g(n)&&(o=n(r,c));var v=()=>{c.remove()};o instanceof Promise?o.then(v).catch(v):v()}l.response(o)}),l}}Rr.init=function(e,t=oe,r=[]){Cr.Window=e,Cr.Trap=t,Cr.ScopedHTML&&(Cr.ScopedHTML.params.addCallback=(e,t)=>{var r;return e.matches(Cr.params.importElement)&&(r=e.resolve())?r:e}),Cr.ScopedJS&&Cr.Trap&&Cr.Trap.observe&&(Cr.ScopedJS.params.bindCallback=Rr.capture),Rr.contentLoadedPromise=new Promise(e=>{"complete"!==Cr.Window.document.readyState?(Cr.Window.document.addEventListener("DOMContentLoaded",e,!1),Cr.Window.addEventListener("load",e,!1)):e()}),Cr.Window.customElements.define(Cr.params.bundleElement,class extends Cr.Window.HTMLTemplateElement{attributeChangedCallback(e,t,r){r&&this.load()}load(){var e=this.getAttribute("src");e&&this.content.children.length?console.warn("A CHTML bundle must define only either a remote content or local content! Bundle ignored."):e&&(Cr.Window.fetch?Cr.Window.fetch(e).then(e=>e.ok?e.text():Promise.reject(e.statusText)).then(e=>{this.innerHTML=e,this.dispatchEvent(new Cr.Window.Event("bundleloadsuccess",{bubbles:!0}))}).catch(t=>{console.warn("Error fetching the bundle at "+e+". ("+t+")"),this.dispatchEvent(new Cr.Window.Event("bundleloaderror",{bubbles:!0}))}):setTimeout(()=>{this.dispatchEvent(new Cr.Window.Event("bundleloadsuccess",{bubbles:!0}))},0))}static get observedAttributes(){return["src"]}},{extends:"template"}),Rr.contentLoadedPromise.then(()=>{if(g(r))r=r();else if(!r||!r.length){var e=u(Cr.Window.document.querySelectorAll('template[is="'+Cr.params.bundleElement+'"]')).reverse();r=e.map(e=>e.hasAttribute("src")&&!e.content.children.length?new Promise(t=>{e.addEventListener("bundleloadsuccess",()=>t(e)),e.addEventListener("bundleloaderror",()=>t(e))}):e)}var t;Rr.bundleMatrix=function(e){e=e.map(e=>{if(!(e instanceof Promise||e instanceof Cr.Window.HTMLTemplateElement)){var t=Cr.Window.document.createElement("template");t.innerHTML=e.toString(),e=t}return e});const t=[],r=new Fr(e,[],(e,n,i,s)=>{var a=n.join("/");if(t.includes(a))return r.find(n.slice(0,-1).join("/"));t.push(a);var o=Cr.Window.CSS?Cr.Window.CSS.escape:e=>e,l=u(e.content.children).filter(e=>e.matches("["+o(Cr.params.namespaceAttribute)+'="'+a+'"]'))[0];if(l&&i){try{e.hasAttribute("norecompose")&&(e.getAttribute("norecompose")||"*").split(" ").map(e=>e.trim()),l=$r(i,l)}catch(e){console.error("[Inheritance error at source #"+s+"]: "+e.message)}return t.pop(),l}return t.pop(),l?l.cloneNode(!0):i?i.cloneNode(!0):null});return r}(r),Rr.bundleMatrix.loadingSources.then(()=>{Rr.importsReady=!0}),t=Rr,Cr.Window.customElements.define(Cr.params.importElement,class extends Cr.Window.HTMLElement{attemptResolve(){this.hasAttribute("ondemand")||this.closest("template")||this.closest(Cr.params.importElement+"[ondemand]")||t.bundleMatrix.loadingSources.then(()=>{this.resolve()})}connectedCallback(){this.processed=!1,this.attemptResolve()}attributeChangedCallback(e,t,r){this.attemptResolve()}resolve(){if(!this.parentNode)return!1;var e,r,n=Cr.params.namespaceAttribute;if((r=Ar(this.getAttribute(n)||"","//"))&&r!==this.__namespace){if(t.bundleMatrix&&(e=t.import(r))){this.__namespace=r;var i=$r(e,this);return this.hasAttribute("shadow")?(this.parentNode.shadowRoot||this.parentNode.attachShadow({mode:"open"}),this.parentNode.shadowRoot.append(i),this.remove()):this.replaceWith(i),i.setAttribute("autoimported","true"),i.dispatchEvent(new Cr.Window.Event("imported",{bubbles:!0})),i}this.innnerText='No element found on the namespace "'+r+'"!'}}static get observedAttributes(){return["ondemand",Cr.params.namespaceAttribute]}})})},Rr.ready=function(e,t=!0){Rr.contentLoadedPromise.then(()=>{t?Rr.bundleMatrix.loadingSources.then(e):e()})},Rr.import=function(e){if(Rr.bundleMatrix)return Rr.importsReady||Rr.warnedEarlyBundleAccess||(Rr.warnedEarlyBundleAccess=!0,console.warn("Remote bundles are still loading at this time! You should probabbly wrap bundle-dependent code within HTMLTransport.ready(callback[, true/*waitForBundles*/]).")),Rr.bundleMatrix.find(e)},Tr.params.inertContexts.push(Cr.params.importElement),Cr.ScopedHTML=yr,Cr.ScopedJS=Tr;var Mr={ScopedHTML:yr,ScopedJS:Tr,HTMLTransport:Cr};const Dr={init:function(e){kr.init(e),Sr.init(e),jr.init(e),Rr.init(e)},ready:Rr.ready};var Lr=function(e,t=1){var r=0;e.forEach(e=>{r++});var n=e.slice(e.length-r,t);return arguments.length>1?n:n[0]},Nr=function(e,t=1){return arguments.length>1?Lr(e.slice().reverse(),t).reverse():Lr(e.slice().reverse())},Ir=function(e,t,r){return function(e,t){return Ar(e,t,!0)}(B(e,t),r)},_r=class{constructor(e={}){v(e,(e,t)=>{oe.set(this,e,t)})}setActiveState(e=!0){if(this.active!==e){var t=oe.set(this,e?"activating":"deactivating",!0,!0);return t.promises?(t.promises.then(()=>{oe.set(this,e?{activating:!1,active:!0}:{deactivating:!1,active:!1},!0)}),t):oe.set(this,e?{activating:!1,active:!0}:{deactivating:!1,active:!1},!0)}}},qr=class extends class{constructor(e={},t={}){this.params=t,this.params.itemsOffset||(this.params.itemsOffset="entries"),this.fill(e),oe.set(this,"current",{}),D(t.takeStats||[]).forEach(e=>{var t,r,n,i;n="[",i="]",(r=e).startsWith(n)&&r.endsWith(i)&&(t=!0,e=Ir(e,"[","]"),this.current[e]=[]);var s=this.params.itemsOffset+".."+e;oe.observe(this,s,(r,n,i)=>{!0===r?t?($(this.current[e],i.originatingTarget),oe.set(this.current,e,this.current[e])):oe.set(this.current,e,i.originatingTarget):!1===r&&(t?(N(this.current[e],i.originatingTarget),oe.set(this.current,e,this.current[e])):this.current[e]===i.originatingTarget&&oe.del(this.current,e))})})}fill(e){v(e,(e,t)=>{oe.set(this,e,t)})}getItemsArray(){var e=this[this.params.itemsOffset];return a(e)?e:e?Object.values(e):[]}filter(){}sort(){}}{constructor(e={},t={}){t.takeStats||(t.takeStats=[]),t.takeStats.includes("active")||t.takeStats.push("active"),t.takeStats.includes("activating")||t.takeStats.push("activating"),t.takeStats.includes("deactivating")||t.takeStats.push("deactivating"),super({},t),oe.observe(this,this.params.itemsOffset+"..activating",e=>{e&&this.getItemsArray().forEach(e=>{!0!==e.active||e.activating||e.setActiveState(!1)})}),this.fill(e)}selectStart(){var e,t=this.getItemsArray();if(!p(t)&&(e=Lr(t)))return e.setActiveState(!0)}selectEnd(){var e,t=this.getItemsArray();if(!p(t)&&(e=Nr(t)))return e.setActiveState(!0)}selectPrev(e=!1){var t,r=this.getItemsArray();if(!p(r))return this.current.active?t=function(e,t,r=!1,n=!1,i=!1){if(-1===e.indexOf(t))return r?[]:void 0;var s=!0===r?e.length-1:!1===r?1:r,a=(e=e.slice().reverse(),i?e.lastIndexOf(t)+1:e.indexOf(t)+1),o=l(t)?[]:e.slice(a,a+s);return n&&o.length<s&&o.length<e.length&&(g(n)&&!n(s-o.length)||(o=o.concat(e.slice(0,s-o.length)))),r?o:o[0]}(r,this.current.active,!1,e):!e||g(e)&&!e(0)||(t=Nr(r)),t?t.setActiveState(!0):void 0;g(e)&&e()}selectNext(e=!1){var t,r=this.getItemsArray();if(!p(r))return this.current.active?t=Wr(r,this.current.active,!1,e):!e||g(e)&&!e(0)||(t=Lr(r)),t?t.setActiveState(!0):void 0;g(e)&&e()}selectRand(){}filter(){}sort(){}static createEntries(e,t=_r){var r=a(e)?[]:{};return v(e,(e,n)=>{n=n instanceof t?n:m(t)?new t(n):g(t)?t(n):n,oe.set(r,e,n)}),r}},Hr={register(e,t,r=!1){Br[e]={component:t,singleton:r}},create(e,...t){var r,n;if(r=Br[e]){if(r.singletonInstance)return r.singletonInstance;if("auto"===r.singleton&&r.singletonInstances){var i=r.singletonInstances.filter(e=>j(t,e.args).length===t.length);if(1===i.length)return i[0].instance}return n=m(r.component)?new r.component(...t):g(r.component)?r.component(...t):r.component,!0===r.singleton?r.singletonInstance=n:"auto"===r.singleton&&(r.singletonInstances=r.singletonInstances||[],r.singletonInstances.push({instance:n,args:t})),n}throw new Error('The "'+e+'" component is not defined in registry!')}};const Br={};class Ur extends(function(...e){var t={};a(arguments[0])&&(e=arguments[0],t=arguments[1],arguments[2]&&arguments[2]);var r=Nr(e),n={},i=class extends r{constructor(...e){super(...e)}};return i.prototypes=e,e.forEach(e=>{W([i,e],(e,t,r)=>-1===["name","prototype","prototypes","length"].indexOf(e)),W([i.prototype,e.prototype],(e,t,r)=>-1===["prototype","prototypes"].indexOf(e)&&(!g(r[e])||(a(n[e])?n[e].push(r[e]):n[e]=[r[e]],!1)),!0)}),v(n,(e,r)=>{"constructor"!==e&&(i.prototype[e]=function(...n){if(Object.hasOwnProperty(t,e)&&g(t[e]))return t[e].call(this,r,...n);var i=[];return r.forEach(e=>{i.push(e.call(this,...n))}),Nr(i)})}),i}(_r,qr)){constructor(e={},t={}){t.itemsOffset="subroutes",super(e,t),oe.observe(this,"active",e=>{!0===e&&this.activeCallback&&this.activeCallback()}),this.initCallback&&this.initCallback()}route(e=null){var t,r;a(e)?(t=e.shift(),r=e):r=f(t=e)?parseInt(e)+1:null;var n=Hr.create("Router"),i="pathmap";f(t)&&(t=parseInt(t),i="pathsplit");var s=r=>{if(this.active||this.activating){var n=[];v(r,(e,r)=>{if(e===t)return!1;n.push(r)}),oe.set(this,"ownPath",n.join("/"))}else oe.del(this,"ownPath");var i=r[t];if((this.active||this.activating)&&this.subroutes&&i){if(this.subroutes[i]){if(!this.subroutes[i].active&&!this.subroutes[i].activating)return this.subroutes[i].setActiveState(!0)}else if(!c(e))throw new Error("404: "+i,this.subroutingKey)}else if(this.current.active)return this.current.active.setActiveState(!1)};s(n[i]),oe.observe(n,i,s),this.getItemsArray().forEach(e=>e.route(r))}static createRoutes(e,t=Ur){return super.createEntries(e,t)}}var zr=function(e,t,r=null){for(var n=[],i=e.length,s=0;s<i;s++)n.push({index:s,value:r?r(e[s]):e[s]});return n.sort((function(e,t){return o(e.value)&&"".localeCompare?e.value.localeCompare(t.value):e.value===t.value?0:e.value>t.value?1:-1})),"desc"===(t||"").trim().toLowerCase()&&(n=n.reverse()),n.map(t=>e[t.index])},Jr=function(e,t,r=null){return a(t)?e.filter(e=>r?t.filter(t=>r(e,t)).length:-1===t.indexOf(e)):[]},Kr=function(e,t,r=null){return M(e,h(t)?t:d(t,r))};var Qr={params:{pathnaming:{"/":["name","id"]}}};class Gr{constructor(){var e=(e,t=null)=>(e=R(e,Vr,!1),t?Kr(e,"state",t):e),t=(e,r)=>h(e)&&h(r)?t(Object.keys(e),Object.keys(r))&&t(Object.values(e),Object.values(r)):a(e)&&a(r)?e.length===r.length&&e.reduce((e,t,n)=>e&&t===r[n],!0):e===r;oe.trap(this,(e,t,r)=>{if("href"===e.query&&Jr(Vr,e.related).length){var n=Gr.parseUrl(e.value);return oe.set(this,n),!1}return r()},{type:"set"}),oe.observe(this,["search","searchmap","pathname","pathmap","pathsplit","href"],(e,r,n)=>{var[i,s,a,o,l,c]=e,[h,u,d,f,m,g]=r;if(!(n.originatingCreated&&n.originatingCreated.indexOf("searchmap")>-1)){var v={},b=!n.originatingFields.filter(e=>e.startsWith("searchmap.")).length&&t(s,u);i!==h||b||(v.search=Gr.toSearch(s),v.search===this.search&&delete v.search),i!==h&&b&&(v.searchmap=Gr.toSearchmap(i),t(v.searchmap,this.searchmap)&&delete v.searchmap);var y=!n.originatingFields.filter(e=>e.startsWith("pathmap.")).length&&t(o,f),w=!n.originatingFields.filter(e=>e.startsWith("pathsplit.")).length&&t(l,m);return a!==d||y&&w||(v.pathname=Gr.toPathname(w?o:l,this.pathname),v.pathname===this.pathname&&delete v.pathname),!y||a===d&&w||(v.pathmap=Gr.toPathmap(a!==d?a:l),t(v.pathmap,this.pathmap)&&delete v.pathmap),!w||a===d&&y||(v.pathsplit=Gr.toPathsplit(a!==d?a:o,this.pathname),t(v.pathsplit,this.pathsplit)&&delete v.pathsplit),c!==g||p(v)?p(v)&&c!==g&&(v=Gr.parseUrl(c)):(v.href=this.origin,v.href+=v.pathname||a,v.href+=v.search||i||"",v.href===this.href&&delete v.href),p(v)?void 0:oe.set(this,v,!0)}},{observeDown:!0}),oe.observe(this,"href",e=>{e===window.document.location.href?window.history.replaceState(this.state,"",e):window.history.pushState(this.state,"",e)}),oe.observe(this,"hash",e=>{}),window.addEventListener("popstate",t=>{window.setTimeout(()=>{oe.set(this,e(window.document.location,window.history.state))},0)});var r=(e,t=10)=>{window.requestAnimationFrame(()=>{e>0?(window.scrollBy(0,t),r(Math.max(e-t,0))):e<0&&(window.scrollBy(0,-t),r(Math.min(e+t,0)))})},n=e=>{window.setTimeout(()=>{var t=u(window.document.querySelectorAll(e)).filter(e=>e.scrollHeight)[0];if(t){var n=t.getBoundingClientRect();r(n.top)}},0)};window.addEventListener("click",e=>{var t,r;if((t=e.target.closest("a"))&&(r=t.href)&&(!t.origin||t.origin===this.origin)){e.preventDefault();var i=this.route(r,null,t.getAttribute("target"));t.hash&&n(t.hash),i&&i.defaultPrevented}}),this.href||oe.set(this,e(window.document.location)),!this.state&&window.history&&oe.set(this,"state",window.history.state),window.document.location.hash&&n(window.document.location.hash)}route(e,t=null,r=null){var n={href:e};return arguments.length>1&&(n.request=t),arguments.length>2&&(n.target=r),oe.set(this,n,!0)}update(e){return window.history.replaceState(e,"",window.document.location),oe.set(this,"state",e,!0)}forward(){window.history.forward()}back(){window.history.back()}go(e){window.history.go(e)}matches(e){var t=Gr.parseUrl(e);return(this.href+"/").startsWith(t.href.endsWith("/")?t.href:t.href+"/")}static parseUrl(e){var t=window.document.createElement("a");return t.href=e,Vr.reduce((e,r)=>Kr(e,r,t[r]),{})}static toSearchmap(e){return(e.startsWith("?")?e.substr(1):e).split("&").filter(e=>e).map(e=>e.split("=").map(e=>e.trim())).reduce((e,t)=>Kr(e,t[0],t[1]),{})}static toSearch(e){return Object.keys(e).length?"?"+Object.keys(e).map(t=>t+"="+e[t]).join("&"):""}static toPathmap(e){var t=o(e)?e.split("/").filter(e=>e):e,r=o(e)?e:"/"+t.join("/")+"/",n=zr(Object.keys(Qr.params.pathnaming),"desc").reduce((e,t)=>e||((r+"/").startsWith("/"===t?t:"/"+t.split("/").filter(e=>e).join("/")+"/")?Qr.params.pathnaming[t]:null),null);return n?t.reduce((e,t,r)=>n[r]?Kr(e,n[r],t):e,{}):{}}static toPathsplit(e,t=null){if(o(e))return e.split("/").filter(e=>e);if(!t)throw new Error('A "referenceUrl" must be given to properly determine a path-naming scheme.');var r=zr(Object.keys(Qr.params.pathnaming),"desc").reduce((e,r)=>e||((t+"/").startsWith("/"===r?r:"/"+r.split("/").filter(e=>e).join("/")+"/")?Qr.params.pathnaming[r]:null),null);if(Jr(Object.keys(e),r).length)throw new Error("The given pathmap contains keys ("+Object.keys(e).join(", ")+") not recognized by the implied path-naming scheme ("+r.join(", ")+")");return r?r.map(t=>e[t]).filter(e=>e):[]}static toPathname(e,t=null){if(h(e)){if(!t)throw new Error('A "referenceUrl" must be given to properly determine a path-naming scheme.');e=Gr.toPathsplit(e,t)}return"/"+e.join("/")+"/"}}const Vr=["hash","host","hostname","href","origin","pathname","port","protocol","search"];Hr.register("Router",Gr,!0),Hr.register("Monetization",class{constructor(){var e=window.document.monetization;e&&(oe.set(this,"state",e.state),e.addEventListener("monetizationpending",e=>{oe.set(this,{state:"pending",detail:e})}),e.addEventListener("monetizationstart",e=>{oe.set(this,{state:"started",detail:e})}),e.addEventListener("monetizationstop",e=>{oe.set(this,{state:"stopped",detail:e})}),e.addEventListener("monetizationprogress",e=>{oe.set(this,{progress:e})}))}start(){if(!window.document.querySelector('meta[name="monetization"]')){window.document.querySelector("head").append('<meta name="monetization" content="$ddddd.gggggg.ttttt" />')}}stop(){var e;(e=window.document.querySelector('meta[name="monetization"]'))&&e.remove()}},!0);var Yr,Zr,Xr=function(e,t){return void 0===e?"":e.split(/(?=[A-Z])/).join(t||" ")},en=(Yr=window.getComputedStyle(document.documentElement,""),{prefix:Zr=(Array.prototype.slice.call(Yr).join("").match(/-(moz|webkit|ms)-/)||""===Yr.Olink&&["","o"])[1],css:"-"+Zr+"-",api:"WebKit|Moz|Ms|O".match(new RegExp("("+Zr+")","i"))[1]}),tn=function(e){var t,r,n=(r=!0,t=function(e,t){return"string"!=typeof e?e:e.replace(/\w\S*/g,(function(e){return e.charAt(0).toUpperCase()+(void 0!==typeof t&&t?e.substr(1).toLowerCase():e.substr(1))}))}((t=e).replace(/-/g," ")).replace(/ /g,""),r?t:t[0].toLowerCase()+t.substr(1));if(en.api+n in document.body.style)return en.css+Xr(e,"-")},rn=function(e,t,r){var n={},i=u(e);return v(i,(e,s)=>{((e,s)=>{var a=Xr(s,"-").toLowerCase();if("auto"===r)n[a]=t(tn(a)||a,i[e]);else{if(r){var o=tn(a);o&&(n[o]=t(o,i[e]))}n[a]=t(a,i[e])}})(e,s)}),a(e)||r||"size"===e||"offsets"===e?n:n[e]};const nn=class{constructor(e){v(e,(e,t)=>{["rotate","scale","skew","translate"].includes(e)&&(this[e]=a(t)?new nn[e](...t):new nn[e](t))})}toString(){return["rotate","scale","skew","translate"].reduce((e,t)=>e+(this[t]&&this[t].length?" "+this[t]:""),"").trim()}static parse(e){var t=function(e){return Math.round(100*e)/100},r=function(e){var r=180*e/Math.PI;return t(r)},n=function(e){var t=[];if(window.WebKitCSSMatrix)return[(t=new window.WebKitCSSMatrix(e)).a,t.b,t.c,t.d,t.e,t.f];for(var r,n=/[\d\.\-]+/g;r=n.exec(e);)t.push(+r);return t}(e),i=n[0],s=n[1],a=n[2],o=n[3];if(i*o==s*a)throw new Error("Dramatic.parseTransform: matrix is singular");var l=Math.sqrt(i*i+s*s),c=(i/=l)*a+(s/=l)*o;a-=i*c,o-=s*c;var p=Math.sqrt(a*a+o*o);return c/=p,i*(o/=p)<s*(a/=p)&&(i=-i,s=-s,c=-c,l=-l),new nn({translate:[n[4],n[5]],scale:[t(l),t(p)],rotate:r(Math.atan2(s,i)),skew:r(Math.atan(c))})}};nn.rotate=class extends Array{toString(){return"rotate("+this.map(e=>f(e)?e+"deg":e).join(", ")+")"}},nn.scale=class extends Array{toString(){return"scale("+this.join(", ")+")"}},nn.skew=class extends Array{toString(){return"skew("+this.map(e=>f(e)?e+"deg":e).join(", ")+")"}},nn.translate=class extends Array{toString(){return"translate("+this.map(e=>f(e)?e+"px":e).join(", ")+")"}};var sn=nn,an=function(e,t,r=null){var n=window.getComputedStyle(e,r);return rn(t,(e,t)=>{var r=n.getPropertyValue(tn(e)||e);return"width"!==e&&"height"!==e||""!==r||(r="0px"),"transform"===e&&(r=sn.parse(r)),r},!1)},on=["width","height","top","left","right","bottom","padding","padding-top","padding-left","padding-right","padding-bottom","margin","margin-top","margin-left","margin-right","margin-bottom","border-width","border-top-width","border-left-width","border-right-width","border-bottom-width","outline-width","outline-top-width","outline-left-width","outline-right-width","outline-bottom-width"],ln=function(e,t,r=null){t=o(t)?d(t,r):t;var n={inset:["top","right","bottom","left"],margin:["top","right","bottom","left"],padding:["top","right","bottom","left"]};return rn(Object.keys(t),(r,i)=>{var s=t[i];v(n,(e,t)=>{r===e&&(h(s)&&(s=t.map(e=>s[e]).filter(e=>!l(e))),a(s)&&(s=s.join(" ")))}),"transform"!==r||!h(s)||s instanceof sn||(s=new sn(s).toString()),e.style[r]=on.includes(r)&&f(s)?s+"px":s},"auto"),e};const cn={readCallbacks:[],writeCallbacks:[],_run:function(){requestAnimationFrame(()=>{cn.readCallbacks.forEach((e,t)=>{e&&!e()&&(cn.readCallbacks[t]=null)}),cn.writeCallbacks.forEach((e,t)=>{e&&!e()&&(cn.writeCallbacks[t]=null)}),cn._run()})},onread:function(e,t=!1){if(t)return new Promise((t,r)=>{cn.readCallbacks.push(()=>{e(t,r)})});cn.readCallbacks.push(e)},onwrite:function(e,t=!1){if(t)return new Promise((t,r)=>{cn.writeCallbacks.push(()=>{e(t,r)})});cn.writeCallbacks.push(e)},cycle:function(e,t,r){cn.onread(()=>{var n=e(r);if(n){var i=n=>{cn.onwrite(()=>{var i=t(n,r);if(i){var s=r=>{cn.cycle(e,t,r)};i instanceof window.Promise?i.then(s):s()}})};n instanceof window.Promise?n.then(i):i()}})}};cn._run();var pn=cn,hn=function(e,t,r=null){return pn.onwrite((n,i)=>{try{n(g(t)?t(e):ln(e,t,r))}catch(e){i(e)}},!0)},un=function(e,t,r=null,n=null){var i=h(t)?Object.keys(t):t;n=h(t)?r:n;var s=function(e,t,r="auto"){var n=e.getAttribute("style");return"all"===t&&(t=n.split(";").map(e=>e.split(":")[0])),rn(t,e=>(new RegExp(";[ ]*?"+e+":([^;]+);?","g").exec(";"+n)||["",""])[1].trim(),r)}(e,i);return hn(e,t,r).then(()=>function(e,t,r=null){return pn.onread((n,i)=>{try{n(g(t)?t(e):an(e,t,r))}catch(e){i(e)}},!0)}(e,n||i).then(t=>hn(e,s).then(()=>t)))},dn=function(e,t=[]){return W([{},e],(e,r,n)=>{if(!g(n[e]))return g(t)?t(e):!a(t)||!t.length||t.indexOf(e)>-1},!1,!1,!1)},fn=function(e){var t={};return e.split(";").filter(e=>e).forEach(e=>{e=e.split(":"),t[e[0].trim()]=e[1].trim()}),t},mn=function(e,t,r=!0){var n=a(e)?e.join("|"):e;if(!t&&vn[n])return vn[n];var i=[];return function(e,t){var r=document.styleSheets,n=function(t){try{for(var r=0;r<t.cssRules.length;r++){var n=t.cssRules[r];if(!0===e(n))return!0}}catch(e){}};if(t){for(var i=r.length-1;i>=0;i--)if(!0===n(r[i]))return!0}else for(i=0;i<r.length;i++)if(!0===n(r[i]))return!0}(t=>{if((t.type===window.CSSRule.KEYFRAMES_RULE||t.type===window.CSSRule[en.api.toUpperCase()+"_KEYFRAMES_RULE"])&&(a(e)?e:[e]).indexOf(t.name)>-1)return i=i.concat(i,function(e){for(var t=[],n=0;n<e.cssRules.length;n++){var i=e.cssRules[n],s=fn(i.cssText.replace(i.keyText,"").replace("{","").replace("}","").trim()),a=(i.keyText||" ").split(",").map(e=>"from"===e?0:"to"===e?1:parseInt(e)/100);if(r)for(gn(s,["animation-","transition-"]);a.length;){var o=dn(s);o.offset=a.shift(),t.push(o)}else s.offset=a.length>1?a:a[0],t.push(s)}return t.sort((e,t)=>e.offset===t.offset?0:e.offset>t.offset?1:-1)}(t)),!0},!0),vn[n]=i,i};const gn=function(e,t,r=""){a(r)?r.forEach(t=>gn(e,t)):(e[r+"timing-function"]&&(e.easing=e[r+"timing-function"],delete e[r+"timing-function"]),e[r+"fill-mode"]&&(e.fill=e[r+"fill-mode"],delete e[r+"fill-mode"]),e[r+"iteration-count"]&&(e.iterations=e[r+"iteration-count"],delete e[r+"iteration-count"],"infinite"===e.iterations&&(e.iterations=1/0)))},vn={};class bn{constructor(e,t,r={}){this.el=e,this.$={readyCallbacks:[],finishCallbacks:[],cancelCallbacks:[],params:r},r.fill=r.fill||"both","duration"in r||(r.duration=400),r.easing&&-1===["ease-in","ease-out","ease-in-out"].indexOf(r.easing)&&-1===r.easing.indexOf("(")&&(r.easing=function(e){e=e.indexOf("-")?e:Xr(e,"-");return window.getComputedStyle(document.body).getPropertyValue("--"+e)}(r.easing)||r.easing);var n={inset:["top","right","bottom","left"],margin:["top","right","bottom","left"],padding:["top","right","bottom","left"]};const i=e=>{e=e.slice();var t={},i={};v(e,(e,r)=>{v(n,(e,t)=>{r[e]&&(h(r[e])&&(r[e]=t.map(t=>r[e][t]).filter(e=>!l(e))),a(r[e])&&(r[e]=r[e].join(" ")))}),!r.transform||!h(r.transform)||r.transform instanceof sn||(r.transform=new sn(r.transform).toString()),function(e,...t){return t.forEach(t=>N(e,t)),e}(Object.keys(r),"offset","easing").forEach(e=>{on.includes(e)&&f(r[e])&&(r[e]+="px"),t[e]=void 0===t[e]?r[e]:t[e],i[e]=r[e]})});try{var s=this.el.animate(e,r)}catch(e){return void(this.$.error=e)}r.reverse&&s.reverse(),s.effect||(s.effect={}),s.effect.duration||(s.effect.duration=r.duration),s.onfinish=()=>{r.cancelForCss&&(s.cancel(),"forwards"!==r.fill&&"both"!==r.fill||ln(this.el,i)),this.$.finishCallbacks.forEach(e=>{e(this.el)})},s.oncancel=()=>{this.$.cancelCallbacks.forEach(e=>{e(this.el)})},this.$.anim=s,this.$.firstFrame=t,this.$.lastFrame=i,this.$.params=r,this.$.readyCallbacks.length&&this.$.readyCallbacks.forEach(e=>e(s,r,t,i))};g(t)?t(e,i):bn.createCallback(e,t,i,e=>{this.$.error=e})}get anim(){return this.$.anim}ready(e,t){this.$.error?t&&t(this.$.error):this.$.anim?e(this.$.anim,this.$.params,this.$.firstFrame,this.$.lastFrame):this.$.readyCallbacks.push(e)}onfinish(e){if(!g(e))throw new Error("Onfinish() accepts only a function.");return this.$.finishCallbacks.push(e),this}oncancel(e){if(!g(e))throw new Error("Oncancel() accepts only a function.");return this.$.cancelCallbacks.push(e),this}progress(){return this.$.anim?this.$.anim.currentTime/this.$.anim.effect.duration:0}seek(e){if(!w(e))throw new Error("Seek() accepts only a numeric value.");return this.ready((t,r)=>{var n=r.duration+(r.delay||0)+(r.endDelay||0);t.currentTime=Math.max(0,Math.min(e*n,n))}),this}reverse(){return this.ready(e=>e.reverse()),this}play(){return new Promise((e,t)=>{this.ready(r=>{r.play(),this.onfinish(()=>e(this)),this.oncancel(()=>t(this))},t)})}pause(){return this.ready(e=>e.pause()),this}finish(){return this.ready(e=>e.finish()),this}cancel(){return this.ready(e=>e.cancel()),this}static createCallback(e,t,r,n){var i=h(t)&&!Object.values(t).filter(e=>a(e)).length,s=a(t)&&t.length>1&&p(t[0]);if(i||s)pn.onread(()=>{s?(t.shift(),bn.createCallback(e,[an(e,Object.keys(t[0])),...t],r,n)):bn.createCallback(e,[an(e,Object.keys(t)),t],r,n)});else{if(o(t)){var l=t;!(t=mn(l)).length&&n&&n('Animation name "'+l+'" not found in any stylesheet!')}if(a(t)){var c=[];if(v(t,(e,t)=>{"auto"===t.height&&$(c,e),"auto"===t.width&&$(c,e)}),c.length)return void un(e,{width:"auto",height:"auto"},e=>e.getBoundingClientRect()).then(e=>{c.forEach(r=>{"auto"===t[r].width&&(t[r].width=e.width+"px"),"auto"===t[r].height&&(t[r].height=e.height+"px")}),r(t)})}r(t)}}}var yn=class{constructor(e=[],t={}){this.$={animations:[],finishCallbacks:[],cancelCallbacks:[],params:t},e.forEach(e=>{this.add(e)})}add(e){if(!(e instanceof bn))throw new Error("Argument#1 must be an Ani instance!");switch(this.$.animations.push(e),this.$.addCallback&&this.$.addCallback(e),this.$.playState){case"paused":e.pause();break;case"cancelled":e.cancel();break;case"finished":e.finish()}return this.$.reversed&&e.reverse(),this}remove(e){if(!(e instanceof bn))throw new Error("Argument#1 must be an Ani instance!");return N(this.$.animations,e),this.$.removeCallback&&this.$.removeCallback(e),this}onfinish(e){if(!g(e))throw new Error("Onfinish() accepts only a function.");return this.$.finishCallbacks.push(e),this}oncancel(e){if(!g(e))throw new Error("Oncancel() accepts only a function.");return this.$.cancelCallbacks.push(e),this}progress(){return this.$.animations.reduce((e,t)=>e.progress()+t.progress(),0)/this.$.animations.length}play(){return this.$.playState="playing",new Promise((e,t)=>{var r,n,i=()=>{r||(r=!0,this.$.finishCallbacks.forEach(e=>e()),e())},s=()=>{n||(n=!0,this.$.cancelCallbacks.forEach(e=>e()),t())},a=this.$.animations.length;this.$.animations.forEach(e=>{e.play().then(()=>{!--a>0&&i()}).catch(s)}),this.$.addCallback=e=>{"playing"===this.$.playState&&(a++,e.play().then(()=>{!--a>0&&i()}).catch(s))},this.$.removeCallback=e=>{a--}})}seek(e,t=[]){this.each(t=>t.seek(e),t)}reverse(e=[]){this.$.reversed=!this.$.reversed,this.each(e=>e.reverse(),e)}pause(e=[]){this.$.playState="paused",this.each(e=>e.pause(),e)}finish(e=[]){this.$.playState="finished",this.each(e=>e.finish(),e)}cancel(e=[]){this.$.playState="cancelled",this.each(e=>e.cancel(),e)}clear(e=[]){this.$.animations=this.$.animations.filter(t=>{if(!e||!u(e,!1).includes(t.el))return!1})}each(e,t=[]){this.$.animations.forEach(r=>{t&&u(t,!1).includes(r.el)||e(r)})}},wn=class{constructor(e=[],t={}){this.$={},this.$.entries=[],this.$.params=t,this.nowPlaying=new yn,e.forEach(e=>{this.add(e,t.timing)}),this.queue=[]}add(e,t={},r={},n=null,i=null){if(!this.$.entries.filter(t=>t.el===e).length){var s={el:e,effect:t,params:r,onfinish:n,oncancel:i};this.$.entries.push(s),this.nowPlayingAdd(s)}}remove(e){this.$.entries=this.$.entries.filter(t=>t.el!==e)}nowPlayingAdd(e){if(this.nowPlayingEffect){var t=(e,t,r,n)=>{var i=new bn(t.el,r,n);e.add(i),n.oneoff&&i.onfinish(()=>{e.remove(i),this.remove(t.el)}),t.onfinish&&i.onfinish(t.onfinish),t.oncancel&&i.oncancel(t.oncancel)},r=(e,n)=>{var i=n[0],s=p(i.effect)?this.nowPlayingEffect:i.effect,a=M({},this.nowPlayingParams,i.params);if(a.delay=a.delay||0,w(a.lag)||w(a.endLag)){var o=Nr(e.$.animations);if(o)return void o.ready((o,l)=>{w(a.lag)?a.delay+=l.delay+a.lag:a.delay+=l.delay+parseFloat(l.endDelay)+l.duration+a.endLag,a.delay-=w(o.currentTime)?o.currentTime:0,t(e,i,s,a),n.shift(),n.length&&r(e,n)})}t(e,i,s,a),n.shift(),n.length&&r(e,n)};this.queue.push(e),1===this.queue.length&&r(this.nowPlaying,this.queue)}}play(e={},t={}){return this.nowPlayingEffect&&(this.nowPlaying=new yn,this.queue=[]),this.nowPlayingEffect=e,this.nowPlayingParams=t,(t.reverseList?this.$.entries.slice().reverse():this.$.entries).forEach(e=>{t.except&&u(t.except,!1).includes(e.el)||t.only&&!u(t.only,!1).includes(e.el)||this.nowPlayingAdd(e)}),this.nowPlaying.play()}};class xn extends n.Route{constructor(e={},t={}){super(e,t),oe.observe(this,"current.active",e=>{if(e){if(e.current.active||e.current.activating){if("hidden"!==this.display)return oe.set(this,"display","hidden")}else if("minimized"!==this.display)return oe.set(this,"display","minimized")}else if("maximized"!==this.display)return oe.set(this,"display","maximized")},{observeDown:!0})}static createRoutes(e,t=xn){return super.createRoutes(e,t)}}var kn,En={engr:[{label:"CHTML",desc:"A suite of short specifications and technologies that bring a component architecture to the HTML language itself.",tags:["#ScopedHTML","#ScopedCSS","#ScopedJS","#HTMLTransport"],link1:["https://docs.web-native.dev/chtml/","DOCS"],link2:["https://github.com/web-native/chtml","GitHub"]},{label:"Play UI",desc:"A resilient, jQuery-inspired DOM abstraction API and an intuitive UI manipulation library.",tags:["#AsynchronousDOM","#UIPhysics"],link1:["https://docs.web-native.dev/play-ui/","DOCS"],link2:["https://github.com/web-native/play-ui","GitHub"]},{label:"Observables",desc:"Application components and client-side APIs implemented as objects with observable properties.",tags:["#ReflexActions"],link1:["https://docs.web-native.dev/observables/","DOCS"],link2:["https://github.com/web-native/observables","GitHub"]},{label:"Reflex",desc:"A general-purpose reflection API for observing objects and arrays in JavaScript.",tags:["#ReflexActions"],link1:["https://docs.web-native.dev/reflex/","DOCS"],link2:["https://github.com/web-native/reflex","GitHub"]},{label:"JSEN",desc:"A general-purpose library for parsing JavaScript expressions that execute in user-defined scopes.",tags:["#scopedJS"],link1:["https://docs.web-native.dev/jsen/","DOCS"],link2:["https://github.com/web-native/jsen","GitHub"]},{label:"Commons",desc:"A thoughtful utilities library for JavaScript.",link1:["https://docs.web-native.dev/commons/","DOCS"],link2:["https://github.com/web-native/commons","GitHub"]}],evan:[{},{},{},{meta:{type:"article"},label:"I’m joining web-native!",desc:"Hey, Awesome! I am pleased to announce that I am joining Web-native as a Front-end Engineer and Developer Relations!🎉",link2:["https://medium.com/@raymondosy1/im-joining-web-native-c98b2cdc5540","Read article"],authors:[{name:"Raymond Akalonu",avatar:"https://miro.medium.com/fit/c/48/48/0*dx5wDBZDIOiMILkr.",link:"https://miro.medium.com/@raymondosy1"}]}]},Sn=new xn({active:!0,title:"Web-Native Home :: Web-Native",page:{title:"Finally, a Web-Native UI Framework!",engineeringSection:En.engr,evangelismSection:En.evan},subroutes:xn.createRoutes({about:{title:"About Web-Native",page:{title:"Finally, a Web-Native UI Framework!"}}})});Mr.ScopedJS.globals={$:window.WebNative.Firedom,document:document,console:console,alert:alert.bind(window),prompt:prompt.bind(window),confirm:confirm.bind(window),monetization:Hr.create("Monetization"),router:Hr.create("Router")},Dr.init(window),(kn=window).customElements.define("playui-ul",class extends kn.HTMLUListElement{constructor(){super();var e=new wn,t=new wn,r={lag:300,oneoff:!0,duration:600};e.play([{opacity:0,transform:{translate:["0","100"]}},{opacity:1,transform:{translate:["0","0"]}}],r),t.play([{opacity:0,transform:{translate:["0","-100"]}},{opacity:1,transform:{translate:["0","0"]}}],r),this.intersectionObserver=new kn.IntersectionObserver(r=>{r.forEach(r=>{r.isIntersecting&&(r.boundingClientRect.top<0?t.add(r.target):e.add(r.target))})},{rootMargin:"50px"})}sequenceAdd(e){this.intersectionObserver.observe(e)}},{extends:"ul"}),kn.customElements.define("playui-li",class extends kn.HTMLLIElement{connectedCallback(){this.parentNode.sequenceAdd&&this.parentNode.sequenceAdd(this)}},{extends:"li"}),Dr.ready(()=>{var e=window.document.querySelector("#app");oe.observe(e,(e,t,r)=>{},{observeDown:!0}),oe.observe(Sn,(e,t,r)=>{},{observeDown:!0}),Sn.route(0),e.bind(Sn)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,