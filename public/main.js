!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);var n=function(t){return Array.isArray(t)||"object"==typeof t},i=function(t){return Array.isArray(t)},s=function(t){return"string"==typeof t},a=function(t){return arguments.length&&(void 0===t||void 0===t)},o=function(t){return null===t||""===t},l=function(t){return!Array.isArray(t)&&"object"==typeof t&&t},c=function(t,e=!0){return i(t)?t:!e&&l(t)?[t]:!1!==t&&0!==t&&function(t){return o(t)||a(t)||!1===t||0===t||n(t)&&!Object.keys(t).length}(t)?[]:function(t){return!s(t)&&!a(t.length)}(t)?Array.prototype.slice.call(t):l(t)?Object.values(t):[t]},h=function(t,e=null){var r={};return 2===arguments.length&&(s(t)?r[t]=e:i(t)&&i(e)&&t.forEach((t,n)=>r[t]=e[n])),r},p=function(t){return!0!==t&&!1!==t&&null!==t&&""!==t&&!isNaN(1*t)},u=function(t){return function(t){return"function"==typeof t}(t)||t&&"[object function]"==={}.toString.call(t)},d=function(t,e){var r=void 0;return n(t)&&Object.keys(t).forEach((n,i)=>{!1!==r&&(r=e(p(n)?parseFloat(n):n,t[n],i))}),r},f=class{constructor(t,e={}){this.$={},this.$.target=t,this.$.details=e,this.$.propagationStopped=!1,this.$.defaultPrevented=!1,this.$.promisesInstance=null,this.$.promises=[],d(e,(t,e)=>{"$"!==t&&Object.defineProperty(this,t,{value:e})})}get target(){return this.$.target}get details(){return this.$.details}stopPropagation(){this.$.propagationStopped=!0}get propagationStopped(){return this.$.propagationStopped}preventDefault(){this.$.defaultPrevented=!0}get defaultPrevented(){return this.$.defaultPrevented}promise(t){if(!(t instanceof Promise))throw new Error("Event.promise() must be called with a Promise.");this.$.promises.push(t),this.$.promisesInstance=null}get promises(){return!this.$.promisesInstance&&this.$.promises.length&&(this.$.promisesInstance=Promise.all(this.$.promises)),this.$.promisesInstance}response(t){var e,r=l(t)&&!a(t.propagationStopped)&&!a(t.defaultPrevented);!1===t||r&&t.propagationStopped?this.stopPropagation():!1===t||r&&t.defaultPrevented?this.preventDefault():(t instanceof Promise&&(e=t)||r&&(e=t.promises))&&this.promise(e)}},g=class extends f{constructor(t,e={}){super(t,e)}},m=function(t){return"number"==typeof t},v=function(t){return l(t)&&Object.getPrototypeOf(t)===Object.prototype},b=function(t){return!0===t||!1===t};const y=function(t,e,r=!0,s=1){if(i(t)&&i(e)&&t.length!==e.length)return!r;if(l(t)&&l(e)){var a=Object.keys(t),o=Object.keys(e);if(!a.length&&!o.length)return v(t)&&v(e)?r:t===e===r;if(!y(a,o))return!r}if(s>0&&(i(t)&&i(e)||l(t)&&l(e))){var c=function(t,e,r=!0,s=!0,a=!1,o=!1){if(i(t)&&i(e)){var c=[],h=!0;return t.forEach(t=>{if(h){var p=!1;d(e,(e,a)=>{(!p||s&&n(t))&&(p=r(t,a),(i(p)&&!p.length||l(p)&&!Object.keys(p).length)&&(p=!1),n(p)&&s&&(t=p))}),n(p)?c.push(s?p:t):b(p)?a&&!p||!a&&p?c.push(t):o&&(h=!1):c.push(p)}}),c}if(l(t)&&l(e)){c={},h=!0;return Object.keys(t).forEach(p=>{if(h){var u=r(t[p],e[p]);(i(u)&&!u.length||l(u)&&!Object.keys(u).length)&&(u=!1),n(u)?c[p]=s?u:t[p]:b(u)?a&&!u||!a&&u?c[p]=t[p]:o&&(h=!1):c[p]=u}}),c}}(t,e,(t,e)=>y(t,e,r,s-1),!1,!1,!0);return i(c)?c.length===t.length&&c.length===e.length:l(c)&&l(t)?Object.keys(c).length===Object.keys(t).length&&Object.keys(c).length===Object.keys(e).length:c}return u(r)?r(t,e):m(t)&&m(e)&&isNaN(t)&&isNaN(e)?r:t===e===r};var w=y,x=class{disconnect(){this.disconnected=!0}},E=class{constructor(){this.fireables=[],this.currentlyFiringEvents=[]}addFireable(t){return this.fireables.push(t),t}removeFireable(t,e=[]){this.fireables=this.fireables.filter(e=>e!==t)}findFireables(t){return this.fireables.filter(e=>!(t.handler&&e.handler!==t.handler||t.params&&(t.params.type&&e.params.type!==t.params.type||t.params.tags&&function(t,e,r=null){return i(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1!==e.indexOf(t)):[]}(e.params.tags||[],t.params.tags).length!==t.params.tags.length)))}static createForTarget(t,e,r){var i;if(t&&n(t))return(i=t[O])||(i={},Object.defineProperty(t,O,{get:()=>i,set:t=>{if(t!==i)throw new Error('Attempt to overwrite the "'+O+'" special property!')},enumerable:!1})),i[e]="listeners"===e?new r(t):new r,i[e]}static getForTarget(t,e){var r;if(t&&n(t)&&(r=t[O]))return r[e]}};const O="< r e f l e x >";class j extends E{fire(t,e=null){if(this.currentlyFiringEvents.filter(e=>e.type===t.type&&e.query===t.query).length)return e?e():void 0;this.currentlyFiringEvents.push(t);const r=(n,...i)=>{var s=this.fireables[n];return s?s.fire(t,(...t)=>r(n+1,...t),...i):e?e(...i):i[0]};var n=r(0);return this.currentlyFiringEvents.pop(),n}static createForTarget(t){return super.createForTarget(t,"traps",j)}static getForTarget(t){return super.getForTarget(t,"traps")}}var k=function(t,...e){return e.forEach(e=>{t.indexOf(e)<0&&t.push(e)}),t},S=function(t,e){var r=[];return function(t,e){e=(e=e||Object.prototype)&&!i(e)?[e]:e;var r=[];for(t=t;t&&(!e||e.indexOf(t)<0)&&"default"!==t.name;)r.push(t),t=t?Object.getPrototypeOf(t):null;return r}(t,e).forEach(t=>{k(r,...Object.getOwnPropertyNames(t))}),r};function T(t,e,r=!1,s=!1,a=!0){var o=0,c=t.shift();if((p(c)||!0===c||!1===c)&&(o=c,c=t.shift()),!t.length)throw new Error("_merge() requires two or more array/objects.");return t.forEach((t,h)=>{(n(t)||u(t))&&(r?S(t):Object.getOwnPropertyNames(t)).forEach(n=>{var u=c[n],d=t[n];if((i(u)&&i(d)||l(u)&&l(d))&&(!0===o||o>0))c[n]=i(u)&&i(d)?[]:{},T([p(o)?o-1:o,c[n],u,d],e,r,s,a);else if(e(n,c,t,h))if(i(c)&&i(t))s?c[n]=d:c.push(d);else try{a?Object.defineProperty(c,n,Object.getOwnPropertyDescriptor(t,n)):c[n]=t[n]}catch(t){}})}),c}var C=function(t,e=[],r=!0){var s=0;return p(arguments[0])&&n(arguments[1])&&(s=arguments[0],t=arguments[1],e=arguments[2]||[]),T([s,{},t],(t,r,n)=>u(e)?e(t):!i(e)||!e.length||e.indexOf(t)>-1,!1,!1,r)},F=function(...t){return T(t,(t,e,r)=>!0,!1,!1,!1)},P=class extends f{constructor(t,e={}){if(e.data&&(e.fields=Object.keys(e.data)),super(t,e),this.srcEvt){this.dataEven=this.srcEvt.dataEven,this.originatingTarget=this.srcEvt.originatingTarget,this.originatingType=this.srcEvt.originatingType,this.originatingFields=[],this.originatingData={},this._originatingData={};var r=this.fields[0];Object.keys(this.srcEvt.originatingData).forEach(t=>{var e=r+"."+t;this.originatingFields.push(e),this.originatingData[e]=this.srcEvt.originatingData[t],this._originatingData[e]=this.srcEvt._originatingData[t]}),this.originatingCreated=this.srcEvt.originatingCreated,this.originatingDeleted=this.srcEvt.originatingDeleted}else this.dataEven=w(this.data,this._data),this.originatingTarget=this.target,this.originatingType=this.type,this.originatingFields=this.fields,this.originatingData=this.data,this._originatingData=this._data,this.originatingCreated=this.created,this.originatingDeleted=this.deleted}};class $ extends E{findFireables(t){return super.findFireables(t).filter(e=>o(t.fields)||a(t.fields)||w(c(e.fields),c(t.fields)))}fire(t){return this.currentlyFiringEvents.filter(e=>e.type===t.type&&e.fields===t.fields).length||(this.currentlyFiringEvents.push(t),this.fireables.forEach(e=>{t.propagationStopped||e.params.type&&e.params.type!==t.type||e.fire(t)}),this.currentlyFiringEvents.pop()),t}static createForTarget(t){return super.createForTarget(t,"observers",$)}static getForTarget(t){return super.getForTarget(t,"observers")}}var A=function(t,e,r=null,i={}){if(!t||!n(t))throw new Error("Object must be of type object!");var s;(u(e)||o(e)||a(e))&&(i=arguments.length>2?r:{},r=e,e=null),(s=$.getForTarget(t))&&s.findFireables({handler:r,fields:e,params:i}).forEach(t=>{s.removeFireable(t)})},_=function(t,e,r){A(r,null,{tags:["#e-bubbling",e,t]})},D=function(t){return typeof t},M=function(t,e,r={},i={}){e=c(e).slice();for(var s=t;!a(s)&&!o(s)&&e.length;){var l=e.shift();if(!(r.get?r.get(s,l):n(s)?l in s:s[l]))return void(i.exists=!1);s=r.get?r.get(s,l):s[l]}return i.exists=!0,s},R=class extends x{constructor(t,e=null,r={}){if(super(),this.handler=t,this.fields=e,this.params=r,this.fieldsArray=c(this.fields),this.isDynamicField=this.fieldsArray.filter(t=>t.indexOf("..")>-1||t.startsWith(".")||t.endsWith(".")).length,this.isDynamicField&&this.fieldsArray.length>1)throw new Error('Only one "Dynamic Field" must be observed at a time! "'+this.fieldsArray.join(", ")+'" have been bound together.')}fire(t){this.disconnected||this.params.type&&this.params.type!==t.type||t.dataEven&&!1!==this.params.diff||this.fireCallback(t,e=>{if(e){var r=[],n=[];return!1!==this.params.data&&e.forEach(e=>{var i=t.originatingFields.reduce((r,n)=>{var i=t.originatingData[n],s=t._originatingData[n];if(!r&&e===n)return[i,s];if(!r&&(e+".").startsWith(n+".")){var a=function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?"":t.substr(n+e.length)}(e,n+".");return[M(i,a.split("."),{get:L}),M(s,a.split("."),{get:L})]}return r},null);if(i)r.push(i.shift()),n.push(i.shift());else{var a=M(t.target,s(e)?e.split("."):e,{get:L});r.push(a),n.push(a)}}),i(this.fields)?t.response(this.handler(r,n,t)):t.response(this.handler(r[0],n[0],t))}r={},n={};return t.fields.forEach(e=>{var i=e in t.data?t.data[e]:L(t.target,e),s=e in t._data?t._data[e]:i;r[e]=i,n[e]=s}),t.response(this.handler(r,n,t))})}fireCallback(t,e){if(this.fieldsArray.length){var r=[];this.fieldsArray.filter((e,n)=>(e=s(e)?e.replace(/`/g,""):e,r[n]=[],t.originatingFields.filter(i=>{var s=i.split("."),a=this.isDynamicField?e.split(".").map((t,e)=>t||s[e]||"").join("."):e;return k(r[n],a),(a===i&&!t.srcEvt||!1!==this.params.observeUp&&(a+".").startsWith(i+".")||this.params.observeDown&&(i+".").startsWith(a+"."))&&(!this.isDynamicField||!a.split(".").filter(t=>!t).length)}).length)).length&&(n=r,n.reduce((t,e)=>{var r=[];return t.forEach(t=>{c(e).forEach(e=>{var n=t.slice();n.push(e),r.push(n)})}),r},[[]])).forEach(e)}else t.srcEvt&&!this.params.observeDown||e();var n}},N=function(t,e,r=null,i={}){if(!t||!n(t))throw new Error("Object must be of type object!");if(u(e)&&(i=arguments.length>2?r:{},r=e,e=null),!u(r))throw new Error('Callback must be a function; "'+D(r)+'" given!');var s;return(s=$.getForTarget(t))||(s=$.createForTarget(t)),s.addFireable(new R(r,e,i))},I=function(t,e,r){var n;N(r,(i,s,a)=>{if(n=$.getForTarget(t)){var o=h(e,r);return n.fire(new P(t,{type:a.type,bubbling:!0,data:o,_data:o,srcEvt:a}))}},{observeDown:!0,tags:["#e-bubbling",e,t]})},W=function(t,e,r=[],s=!1){var a=t.map((t,e)=>{if(!t||!n(t))throw new Error("Target must be of type object!");return{target:t,targetCopy:C(t,r),setData:{},_setData:{},delData:{},_delData:{},created:[],deleted:[]}}),o=e(...t);return a.map(t=>{var e,a,o,l=Object.keys(t.targetCopy),c=Object.keys(t.target),h=(e=l.concat(c),e.filter((t,e,r)=>r.indexOf(t)===e)).filter(e=>{if(!(r.length&&!r.includes(e)||i(t.target)&&("length"===e||"< r e f l e x >"===e))){if(c.includes(e)?(t._setData[e]=t.targetCopy[e],t.setData[e]=t.target[e],l.includes(e)||t.created.push(e)):(t._delData[e]=t.targetCopy[e],t.delData[e]=void 0,t.deleted.push(e)),t.targetCopy[e]!==t.target[e])return t.targetCopy[e]&&n(t.targetCopy[e])&&_(t.target,e,t.targetCopy[e]),t.target[e]&&n(t.target[e])&&I(t.target,e,t.target[e]),!0;delete t.setData[e],delete t._setData[e]}});return((o=$.getForTarget(t.target))||s)&&(a=new P(t.target,{type:"transaction",data:F(t.setData,t.delData),_data:F(t._setData,t._delData),created:t.created,deleted:t.deleted}),o&&(Object.keys(t.delData).length&&a.response(o.fire(new P(t.target,{type:"del",data:t.delData,_data:t._delData,deleted:t.deleted}))),Object.keys(t.setData).length&&a.response(o.fire(new P(t.target,{type:"set",data:t.setData,_data:t._setData,created:t.created}))))),s?a:h}),o},L=function(t,e){if(!t||!n(t))throw new Error("Target must be of type object!");var r,s,a=function(r){return arguments.length?r:i(e)?h(e,t):t[e]};return r=(s=j.getForTarget(t))?s.fire(new g(t,{type:"get",query:e}),a):a(),i(t)&&!p(e)&&u(r)?function(...e){return W([t],()=>r.apply(t,e))}:r},q=function(t,e){return t.reduce((t,r)=>t&&e(r),!0)},z=function(t,e){if(!t||!n(t))throw new Error("Target must be of type object!");var r,i=function(r){return arguments.length?r:e in t};return(r=j.getForTarget(t))?r.fire(new g(t,{type:"has",query:e}),i):i()},B=function(t,e,r,a=null,o=!1){if(!e||!n(e))throw new Error("Target must be of type object!");l(r)&&(o=a);var h,p,u=r,d={},f={},v=[],b=(r,i,s)=>{var a;d[r]=e[r],z(e,r)||v.push(r),t&&(i=(a=i||{}).value);var o,l,c=function(t){return arguments.length?t:(a?Object.defineProperty(e,r,a):e[r]=i,!0)};if(l=j.getForTarget(e)){var h=a?{type:"def",query:r,descriptor:a,related:s}:{type:"set",query:r,value:i,related:s};o=l.fire(new g(e,h),c)}else o=c();return o?(f[r]=i,f[r]!==d[r]?(d[r]&&n(d[r])&&_(e,r,d[r]),f[r]&&n(f[r])&&I(e,r,f[r])):(delete f[r],delete d[r])):delete d[r],o},y=[];if(i(u)||(s(u)||m(u))&&(u=c(u)))y=u.map(t=>b(t,a,u));else if(l(r)){var w=Object.keys(r);y=w.map(t=>b(t,r[t],w))}return((p=$.getForTarget(e))||o)&&(h=new P(e,{type:"set",data:f,_data:d,created:v}),p&&p.fire(h)),o?h:q(y,t=>t)},U=function(t,e,r=null,n=!1){return B(!1,...arguments)};class H extends E{fire(t){return this.fireables.forEach(e=>{t.propagationStopped||e.fire(t)}),t}static createForTarget(t,e=H){return super.createForTarget(t,"listeners",e)}static getForTarget(t){return super.getForTarget(t,"listeners")}}var K=class extends x{constructor(t,e={}){super(),this.handler=t,this.params=e}fire(t){this.params.type===t.type&&t.response(this.handler.call(this.target,t.e))}},Y=function(t,e,r=null,n={}){var i;(i=H.getForTarget(t))&&i.findFireables({handler:r,type:e,params:n}).forEach(t=>{i.removeFireable(t)})},J=function(t,e,r={}){var n;if(n=H.getForTarget(t))return n.fire(new f(t,F(r,{type:e})))};var X=N,Q=U,V=function(t){return"string"==typeof t},Z=function(t,e,r=null){for(var n=[],i=t.length,s=0;s<i;s++)n.push({index:s,value:r?r(t[s]):t[s]});return n.sort((function(t,e){return V(t.value)&&"".localeCompare?t.value.localeCompare(e.value):t.value===e.value?0:t.value>e.value?1:-1})),"desc"===(e||"").trim().toLowerCase()&&(n=n.reverse()),n.map(e=>t[e.index])},G=function(t){return Array.isArray(t)},tt=function(t,e,r=null){return G(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1===e.indexOf(t)):[]},et=function(t){return!Array.isArray(t)&&"object"==typeof t&&t},rt=function(t){return null===t||""===t},nt=function(t){return arguments.length&&(void 0===t||void 0===t)},it=function(t){return Array.isArray(t)||"object"==typeof t},st=function(t){return rt(t)||nt(t)||!1===t||0===t||it(t)&&!Object.keys(t).length},at=function(t){return"function"==typeof t},ot=function(t){return at(t)||t&&"[object function]"==={}.toString.call(t)},lt=function(t){return!0!==t&&!1!==t&&null!==t&&""!==t&&!isNaN(1*t)},ct=function(t,...e){return e.forEach(e=>{t.indexOf(e)<0&&t.push(e)}),t},ht=function(t,e){var r=[];return function(t,e){e=(e=e||Object.prototype)&&!G(e)?[e]:e;var r=[];for(t=t;t&&(!e||e.indexOf(t)<0)&&"default"!==t.name;)r.push(t),t=t?Object.getPrototypeOf(t):null;return r}(t,e).forEach(t=>{ct(r,...Object.getOwnPropertyNames(t))}),r};function pt(t,e,r=!1,n=!1,i=!0){var s=0,a=t.shift();if((lt(a)||!0===a||!1===a)&&(s=a,a=t.shift()),!t.length)throw new Error("_merge() requires two or more array/objects.");return t.forEach((t,o)=>{(it(t)||ot(t))&&(r?ht(t):Object.getOwnPropertyNames(t)).forEach(l=>{var c=a[l],h=t[l];if((G(c)&&G(h)||et(c)&&et(h))&&(!0===s||s>0))a[l]=G(c)&&G(h)?[]:{},pt([lt(s)?s-1:s,a[l],c,h],e,r,n,i);else if(e(l,a,t,o))if(G(a)&&G(t))n?a[l]=h:a.push(h);else try{i?Object.defineProperty(a,l,Object.getOwnPropertyDescriptor(t,l)):a[l]=t[l]}catch(t){}})}),a}var ut=function(t,e=[],r=!0){var n=0;return lt(arguments[0])&&it(arguments[1])&&(n=arguments[0],t=arguments[1],e=arguments[2]||[]),pt([n,{},t],(t,r,n)=>ot(e)?e(t):!G(e)||!e.length||e.indexOf(t)>-1,!1,!1,r)},dt=function(t,e=null){var r={};return 2===arguments.length&&(V(t)?r[t]=e:G(t)&&G(e)&&t.forEach((t,n)=>r[t]=e[n])),r},ft=function(...t){return pt(t,(t,e,r)=>!0,!1,!1,!1)},gt=function(t,e,r=null){return ft(t,et(e)?e:dt(e,r))},mt=function(t){return Array.isArray(t)},vt=function(t){return"string"==typeof t},bt=function(t){return arguments.length&&(void 0===t||void 0===t)},yt=function(t){return Array.isArray(t)||"object"==typeof t},wt=function(t){return!Array.isArray(t)&&"object"==typeof t&&t},xt=function(t,e=!0){return mt(t)?t:!e&&wt(t)?[t]:!1!==t&&0!==t&&function(t){return function(t){return null===t||""===t}(t)||bt(t)||!1===t||0===t||yt(t)&&!Object.keys(t).length}(t)?[]:function(t){return!vt(t)&&!bt(t.length)}(t)?Array.prototype.slice.call(t):wt(t)?Object.values(t):[t]},Et=function(t){return Array.isArray(t)},Ot=function(t){return function(t){return"function"==typeof t}(t)||t&&"[object function]"==={}.toString.call(t)},jt=function(t){return!Array.isArray(t)&&"object"==typeof t&&t},kt=function(t){return Array.isArray(t)||"object"==typeof t},St=function(t){return!0!==t&&!1!==t&&null!==t&&""!==t&&!isNaN(1*t)},Tt=function(t,e){var r=[];return function(t,e){e=(e=e||Object.prototype)&&!Et(e)?[e]:e;var r=[];for(t=t;t&&(!e||e.indexOf(t)<0)&&"default"!==t.name;)r.push(t),t=t?Object.getPrototypeOf(t):null;return r}(t,e).forEach(t=>{!function(t,...e){e.forEach(e=>{t.indexOf(e)<0&&t.push(e)})}(r,...Object.getOwnPropertyNames(t))}),r};function Ct(t,e,r=!1,n=!1,i=!0){var s=0,a=t.shift();if((St(a)||!0===a||!1===a)&&(s=a,a=t.shift()),!t.length)throw new Error("_merge() requires two or more array/objects.");return t.forEach((t,o)=>{(kt(t)||Ot(t))&&(r?Tt(t):Object.getOwnPropertyNames(t)).forEach(l=>{var c=a[l],h=t[l];if((Et(c)&&Et(h)||jt(c)&&jt(h))&&(!0===s||s>0))a[l]=Et(c)&&Et(h)?[]:{},Ct([St(s)?s-1:s,a[l],c,h],e,r,n,i);else if(e(l,a,t,o))if(Et(a)&&Et(t))n?a[l]=h:a.push(h);else try{i?Object.defineProperty(a,l,Object.getOwnPropertyDescriptor(t,l)):a[l]=t[l]}catch(t){}})}),a}var Ft=function(...t){return Ct(t,(t,e,r)=>!0,!1,!1,!1)},Pt=function(t,e,r=!1){for(var n=t.indexOf(e);n>-1&&(r||!1===r);)t.splice(n,1),r>0&&r--,n=t.indexOf(e);return t},$t=function(t,e){if(!t)return!1;if(t instanceof e)return!0;var r=t=>{for(;t&&t!==Function.prototype;){if(t===e||t.prototypes&&t.prototypes.reduce((t,n)=>t||n===e||r(n),!1))return!0;t=Object.getPrototypeOf(t)}return!1};return r(t.constructor)},At=function(t){return"number"==typeof t},_t=function(t){return jt(t)&&Object.getPrototypeOf(t)===Object.prototype},Dt=function(t){return!0===t||!1===t},Mt=function(t,e){var r=void 0;return kt(t)&&Object.keys(t).forEach((n,i)=>{!1!==r&&(r=e(St(n)?parseFloat(n):n,t[n],i))}),r};const Rt=function(t,e,r=!0,n=1){if(Et(t)&&Et(e)&&t.length!==e.length)return!r;if(jt(t)&&jt(e)){var i=Object.keys(t),s=Object.keys(e);if(!i.length&&!s.length)return _t(t)&&_t(e)?r:t===e===r;if(!Rt(i,s))return!r}if(n>0&&(Et(t)&&Et(e)||jt(t)&&jt(e))){var a=function(t,e,r=!0,n=!0,i=!1,s=!1){if(Et(t)&&Et(e)){var a=[],o=!0;return t.forEach(t=>{if(o){var l=!1;Mt(e,(e,i)=>{(!l||n&&kt(t))&&(l=r(t,i),(Et(l)&&!l.length||jt(l)&&!Object.keys(l).length)&&(l=!1),kt(l)&&n&&(t=l))}),kt(l)?a.push(n?l:t):Dt(l)?i&&!l||!i&&l?a.push(t):s&&(o=!1):a.push(l)}}),a}if(jt(t)&&jt(e)){a={},o=!0;return Object.keys(t).forEach(l=>{if(o){var c=r(t[l],e[l]);(Et(c)&&!c.length||jt(c)&&!Object.keys(c).length)&&(c=!1),kt(c)?a[l]=n?c:t[l]:Dt(c)?i&&!c||!i&&c?a[l]=t[l]:s&&(o=!1):a[l]=c}}),a}}(t,e,(t,e)=>Rt(t,e,r,n-1),!1,!1,!0);return Et(a)?a.length===t.length&&a.length===e.length:jt(a)&&jt(t)?Object.keys(a).length===Object.keys(t).length&&Object.keys(a).length===Object.keys(e).length:a}return Ot(r)?r(t,e):At(t)&&At(e)&&isNaN(t)&&isNaN(e)?r:t===e===r};var Nt=Rt,It=class{even(t){return!(!jt(t)||t.jsenType!==this.jsenType)&&Nt(t,this)}inherit(t){return this}withComments(t){return this.meta||(this.meta={}),this.meta.comments=t,this}withVars(t){return this.meta||(this.meta={}),this.meta.vars=t,this}};const Wt=class extends It{};Object.defineProperty(Wt.prototype,"jsenType",{get:()=>"Reference"});var Lt=Wt;const qt=class extends It{};Object.defineProperty(qt.prototype,"jsenType",{get:()=>"CallExpression"});var zt=qt;const Bt=class extends It{};Object.defineProperty(Bt.prototype,"jsenType",{get:()=>"FunctionType"});var Ut=Bt;const Ht=class{static parse(t,e,r={},n=Ht){if(r.meta||(r.meta={vars:[],_vars:[]}),t.length){for(var i=Object.values(e||n.grammars),s=0;s<i.length;s++){var a=r.meta&&Et(r.meta.vars)?r.meta.vars.length:0,o=i[s].parse(t,(t,e,i={})=>Ht.parse(t,e,i?Ft(r,i):r,n));if(o){if(o.meta||(o.meta={}),$t(o,Ut)){var l=r.meta.vars.splice(a);r.meta._vars=r.meta._vars.concat(l),o.meta._vars=l}else o.meta.vars=r.meta.vars.slice(a);($t(o,Lt)||$t(o,zt))&&(Pt(o.meta.vars,o.context),Pt(r.meta.vars,o.context),r.meta.vars.push(o))}if(o&&Et(r.explain)&&r.explain.push(t+" >>-------------\x3e> "+o.jsenType),o)return o}if(!1===r.assert)return;throw new Error("[Syntax error:] "+t)}}};var Kt=Ht,Yt=function(t){return"string"==typeof t},Jt=function(t){return arguments.length&&(void 0===t||void 0===t)},Xt=function(t,e=!0){return Et(t)?t:!e&&jt(t)?[t]:!1!==t&&0!==t&&function(t){return function(t){return null===t||""===t}(t)||Jt(t)||!1===t||0===t||kt(t)&&!Object.keys(t).length}(t)?[]:function(t){return!Yt(t)&&!Jt(t.length)}(t)?Array.prototype.slice.call(t):jt(t)?Object.values(t):[t]};const Qt=function(t,e=1,r=!0){return!St(e)||e<=0?t:(!Et(t)&&jt(t)&&r&&(t=Object.values(t)),Et(t)?t.reduce((t,n)=>Et(n)||jt(n)&&r?t.concat(Qt(Et(n)?n:Object.values(n),e-1,r)):t.concat(n),[]):t)};var Vt=Qt,Zt=function(t,e=1){var r=0;t.forEach(t=>{r++});var n=t.slice(t.length-r,e);return arguments.length>1?n:n[0]},Gt=function(t,e=1){return arguments.length>1?Zt(t.slice().reverse(),e).reverse():Zt(t.slice().reverse())},te=function(t,e=[]){return Ct([{},t],(t,r,n)=>{if(!Ot(n[t]))return Ot(e)?e(t):!Et(e)||!e.length||e.indexOf(t)>-1},!1,!1,!1)};const ee=class{static lex(t,e,r={}){if(!Yt(t))throw new Error("Argument1 must be a string!");var n=t=>({delims:t.delims.slice(),options:te(t.options),nesting:t.nesting.slice(),maxDepth:t.maxDepth,comments:t.comments.slice(),tokens:t.tokens.slice(),matches:t.matches.slice(),matchesi:te(t.matchesi)});if(ee.$cache[t]&&!1!==r.cache)for(var i=0;i<ee.$cache[t].length;i++){var s=ee.$cache[t][i];if(Nt(s.delims,e))return n(s)}var a=new ee(t,r).lex(e);return!1!==r.cache&&(ee.$cache[t]=ee.$cache[t]||[],ee.$cache[t].push(a)),n(a)}static split(t,e,r){return ee.lex(t,e,r).tokens}static match(t,e,r){return ee.lex(t,e,r).matches}constructor(t,e){if(!Yt(t))throw new Error("Lexer requires the first argument to be a string.");this.$str=t,this.$options=e||{},this.$options.blocks||(this.$options.blocks=ee.$blocks),this.$options.quotes||(this.$options.quotes=ee.$quotes),this.$options.comments||(this.$options.comments=ee.$comments)}lex(t,e){var r={delims:Xt(t),options:Ft(!0,{},this.$options,e||{}),nesting:[],maxDepth:0,comments:[],tokens:[],matches:[],matchesi:{}};if(this._evalCharsAt(r,0),r.nesting.length)throw new Error("Error parsing the string: "+this.$str+". Unterminated blocks: "+Vt(r.nesting).join(", "));return r}_evalCharsAt(t,e){if(!(e>=this.$str.length)){var r=1,n={},i={},s={};if(t.openComment||(i=this._testQuotes(t,e)),t.openQuote||(n=this._testComments(t,e)),t.openComment||n.ending)if(t.nesting.length||s.ending)this._push(t,this.$str[e]);else r=(o=n.starting||n.ending||this.$str[e]).length,this._push(t,o,"comments",n.starting);else if(t.openQuote||i.ending)this._push(t,this.$str[e]);else{if(t.options.limit&&t.matches.length===t.options.limit)return this._push(t,this.$str[e]),this._evalCharsAt(t,e+1);s=this._testNesting(t,e);s=this._testNesting(t,e);var a=this._testChars(t.options.stopChars||[],t,e);if(!t.nesting.length&&!1!==a)return t.options.stopChar=a,void(t.options.stopCharForward=this.$str.substr(e));if(t.delims.length)if(t.nesting.length||s.ending){var o;r=(o=s.starting||s.ending||this.$str[e]).length,this._push(t,o)}else{this._push(t,"");var l=this._testChars(t.delims,t,e);if(!1!==l&&(t.matches.push(l),t.matchesi[e]=l,r=l.length||1,!t.options.preserveDelims))return this._evalCharsAt(t,e+(l.length||1));this._push(t,l||this.$str[e])}else 2===t.nesting.length&&s.starting?(t.matches.push(null),this._push(t,s.starting),r=s.starting.length):!t.nesting.length&&s.ending?(this._push(t,s.ending),r=s.ending.length,t.matches.push(null)):this._push(t,this.$str[e])}return this._evalCharsAt(t,e+r)}}_testQuotes(t,e){var r={};return(t.options.quotes||[]).forEach(n=>{this.$str.substr(e,1)===n&&(t.openQuote?n===t.openQuote&&(t.openQuote=!1,r.ending=n):(t.openQuote=n,r.starting=n))}),r}_testComments(t,e){var r={};return(t.options.comments||[]).forEach(n=>{if(t.openComment){if(Gt(n)===Gt(t.openComment)){var i;(i=this.$str.substr(e).match(new RegExp("^"+Gt(n))))&&(t.openComment=!1,r.ending=i[0])}}else(i=this.$str.substr(e).match(new RegExp("^"+Zt(n))))&&(t.openComment=n,r.starting=i[0])}),r}_testNesting(t,e){var r={};return(t.options.blocks||[]).forEach(n=>{var i=this.$str.substr(e).match(new RegExp("^"+Zt(n)));if(i)t.nesting=t.nesting.concat([n]),r.starting=i[0];else if(t.nesting.length&&Gt(n)===Gt(Gt(t.nesting))){var s=this.$str.substr(e).match(new RegExp("^"+Gt(n)));s&&(t.nesting=t.nesting.slice(0,-1),r.ending=s[0])}}),t.maxDepth=Math.max(t.maxDepth,t.nesting.length),r}_testChars(t,e,r){for(var n=0;n<t.length;n++){var i=t[n];if(Ot(i)){var s=i(this.$str.substr(0,r),this.$str.substr(r));if(!1!==s)return s}if(e.options.useRegex){var a=this.$str.substr(r).match(new RegExp("^"+i,!0!==e.options.useRegex?e.options.useRegex:""));if(a)return a[0]}if(!e.options.ci&&this.$str.substr(r,i.length)===i||e.options.ci&&this.$str.substr(r,i.length).toLowerCase()===i.toLowerCase())return i}return!1}_push(t,e,r="tokens",n=!1){var i=t.matches.length;if(Jt(t.tokens[i])&&(t.tokens[i]=""),"comments"===r){t.tokens[i].comments||(t.tokens[i]=new String(t.tokens[i]),t.tokens[i].comments=[]);var s=t.tokens[i].comments.length-(!t.tokens[i].comments.length||n?0:1);t.tokens[i].comments[s]=(t.tokens[i].comments[s]||"")+e}else{var a=t.tokens[i].comments;t.tokens[i]=new String(t.tokens[i]+e),t.tokens[i].comments=a}}split(t,e,r){return this.lex(e,r).tokens}match(t,e,r){return this.lex(e,r).matches}regParse(t,e){return this.lex(t,Ft({useRegex:!0},e||{}))}regSplit(t,e){return this.regParse(t,e).tokens}regMatch(t,e){return this.regParse(t,e).matches}};ee.$blocks=[["\\(","\\)"],["\\[","\\]"],["\\{","\\}"]],ee.$quotes=['"',"'","`"],ee.$comments=[["\\/\\*","\\*\\/"],["\\/\\/","(\\r)?\\n"]],ee.$cache={};var re=ee;class ne{constructor(t,e=null,r={},n={}){this.mainContext=t,this.superContext=e?ne.create(e):null,this.localContext=r,this.localContextMeta=n}handle(t,e,r,n=0){var i=()=>e(this.mainContext,null,()=>this.superContext?this.superContext.handle(t,e,r,n+1):r?r():void 0,n);return"toString"===t&&this.localContext.toString===Object.prototype.toString?i():e(this.localContext,this.localContextMeta,i,n)}get(t,e={},r=!0){return t instanceof String&&(t+=""),this.handle(t,(n,i,s,a)=>{var o=ie(n,t,e);return!Jt(o)||se(n,t,e)?Ot(o)&&r?o.bind(n):o:s()})}set(t,e,r={},n=!1){t instanceof String&&(t+="");const i=(t,e,r,n)=>n.set?n.set(t,e,r):(t[e]=r,!0);return this.handle(!!n||t,(s,a,o)=>{if(a&&"const"===a[t])throw new Error("CONST "+t+"cannot be modified!");if(n){if(!["var","let","const"].includes(n))throw new Error("Unrecognized declarator: "+n+"!");return a[t]=n,i(s,t,e,r)}return se(s,t,r)?i(s,t,e,r):o()},()=>{throw new Error('"'+t+'" is undefined!')})}del(t,e={}){return t instanceof String&&(t+=""),this.handle(t,(r,n,i)=>se(r,t,e)?e.deleteProperty||e.del?(e.deleteProperty||e.del)(r,t):(delete r[t],!0):i())}has(t,e,r={}){return t instanceof String&&(t+=""),e instanceof String&&(e+=""),this.handle(t,(n,i,s)=>{if(se(n,t,r)){var a=ie(n,t,r);return se(a,e,r)}return s()},()=>{throw new Error('"'+t+'" is undefined!')})}exec(t,e,r={}){return t instanceof String&&(t+=""),this.handle(t,(n,i,s)=>{var a=ie(n,t,r);if(!Jt(a)||se(n,t,r)){if(!Ot(a)){if(r.exec)return r.exec(n,t,e);throw new Error('"'+t+'" is not a function! (Called on type: '+typeof n+".)")}return r.apply?r.apply(a,n,e):a.apply(n,e)}return s()},()=>{if(r.execUnknown)return r.execUnknown(this,t,e);throw new Error('"'+t+'()" is undefined!')})}static create(t){return t instanceof ne?t:new ne(t)}}const ie=(t,e,r)=>r.get?r.get(t,e):kt(t)&&t||Yt(t)||At(t)?t[e]:void 0,se=(t,e,r)=>r.has?r.has(t,e):kt(t)&&t?e in t:!Jt(t[e]);var ae=function(t,e,r){return t.startsWith(e)&&t.endsWith(r)},oe=function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?"":t.substr(n+e.length)},le=function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?t:t.substr(0,n)},ce=function(t,e,r){return function(t,e){return le(t,e,!0)}(oe(t,e),r)};const he=class extends It{};Object.defineProperty(he.prototype,"jsenType",{get:()=>"Abstraction"});var pe=he;const ue=class extends pe{constructor(t){super(),this.expr=t}eval(t=null,e={}){return this.expr.eval(t,e)}toString(t=null){return"("+this.expr.toString(t)+")"}static parse(t,e,r=ue){if(ae(t,"(",")")&&!re.match(t,[" "]).length)return new r(e(ce(t,"(",")")))}};var de=ue;const fe=class extends It{};Object.defineProperty(fe.prototype,"jsenType",{get:()=>"ArrayType"});var ge=fe;const me=class extends ge{constructor(t){super(),this.exprs=t||[]}inherit(t){if(t instanceof ge){var e=t.exprs.filter(t=>this.exprs.reduce((e,r)=>e&&!t.even(r),!0));this.exprs=e.concat(this.exprs)}return this}eval(t=null,e={}){return this.exprs.map(r=>r.eval(t,e))}toString(t=null){return"["+this.exprs.map(e=>e.toString(t)).join(", ")+"]"}static parse(t,e,r=me){if(ae(t,"[","]")&&!re.match(t.trim(),[" "]).length)return new r(re.split(ce(t,"[","]"),[","]).map(t=>t.trim()).filter(t=>t).map(t=>e(t)))}};var ve=me;const be=class extends It{};Object.defineProperty(be.prototype,"jsenType",{get:()=>"Arguments"});var ye=be;const we=class extends ye{constructor(t=[]){super(),this.list=t}eval(t=null,e={}){return this.list.map(r=>r.eval(t,e))}toString(t=null){return"("+this.list.map(e=>e.toString(t)).join(", ")+")"}static parse(t,e,r=we){if(t=t.trim(),ae(t,"(",")")&&!re.match(t,[" "]).length)return new r(re.split(ce(t,"(",")"),[","]).map(t=>e(t.trim())))}};var xe=we,Ee=function(t){return t.filter((t,e,r)=>r.indexOf(t)===e)};const Oe=class extends It{};Object.defineProperty(Oe.prototype,"jsenType",{get:()=>"AssertionExpression"});var je=Oe;const ke=class extends je{constructor(t,e){super(),this.exprs=t,this.logic=e}eval(t=null,e={}){if("!"===this.logic)return!Zt(this.exprs).eval(t,e);Vt(ke.operators);for(var r=(this.logic||"").trim().toUpperCase(),n=r===(ke.operators.or||"").trim().toUpperCase(),i=r===(ke.operators.nor||"").trim().toUpperCase(),s=r===(ke.operators.and||"").trim().toUpperCase(),a=r===(ke.operators.nand||"").trim().toUpperCase(),o=!0,l=0,c=0;c<this.exprs.length;c++){if(o=this.exprs[c].eval(t,e),s&&!o)return!1;if(a&&!o)return!0;if(n&&o)return o;l+=o?1:0}return n?o:s||a?s:i&&0===l}toString(t=null){return"!"===this.logic?"!"+Zt(this.exprs).toString(t):this.exprs.map(e=>e.toString(t)).join(" "+this.logic+" ")}static parse(t,e,r=ke){if(t.startsWith("!"))return new r([e(t.substr(1))],"!");var n=re.lex(t,Vt(r.operators));if(n.tokens.length>1){var i=Ee(n.matches);if(i.length>1)throw new Error('"AND" and "OR" logic cannot be asserted in the same expression: '+t+"!");return new r(n.tokens.map(t=>e(t.trim())),Zt(i))}}};ke.operators={and:"&&",or:"||"};var Se=ke;const Te=class extends It{};Object.defineProperty(Te.prototype,"jsenType",{get:()=>"AssignmentExpression"});var Ce=Te;const Fe=class extends Ce{constructor(t,e,r,n="="){super(),this.initKeyword=t,this.reference=e,this.val=r,this.operator=n}eval(t=null,e={}){var r=this.reference.getEval(t,e),n=this.val.eval(t,e);if(!Jt(r.context)&&!Jt(r.name))return ne.create(r.context).set(r.name,n,e,this.initKeyword);throw new Error('"'+this+'" is undefined!')}toString(t=null){return(this.initKeyword?this.initKeyword+" ":"")+[this.reference.toString(t),this.operator,this.val.toString(t)].join(" ")}static parse(t,e,r=Fe){var n=re.lex(t,r.operators);if(2===n.tokens.length){var i,s=n.tokens.shift().trim(),a=n.tokens.shift().trim();if(["var","let","const"].includes(le(s," "))&&(i=le(s," "),s=oe(s," ").trim()),!((s=e(s))instanceof Lt&&(a=e(a))))throw new Error("Invalid assignment expression: "+t);return new r(i,s,a,n.matches[0].trim())}}};Fe.operators=[" = "];var Pe=Fe;const $e=class extends It{};Object.defineProperty($e.prototype,"jsenType",{get:()=>"BooleanType"});var Ae=$e;const _e=class extends Ae{constructor(t){super(),this.state=t}eval(){return"true"===this.state.toLowerCase().trim()}toString(){return this.state}static parse(t,e,r=_e){if("true"===(t=t.toLowerCase().trim())||"false"===t)return new r(t)}};var De=_e;const Me=class extends zt{constructor(t,e){super(),this.reference=t,this.args=e}eval(t=null,e={}){var r=this.reference.getEval(t,e),n=this.args.eval(t,e);if(!Jt(r.context)&&!Jt(r.name))return ne.create(r.context).exec(r.name,n,e);throw new Error('"'+this+'" is undefined!')}toString(t=null){return this.reference.toString(t)+this.args.toString(t)}static parse(t,e,r=Me){if(!t.startsWith("(")&&t.endsWith(")")&&!re.match(t,[" "]).length){var n,i=re.split(t,[]),s=i.pop();if(!((n=e(i.join("")))instanceof Lt&&(s=e(s,[xe]))))throw new Error("Invalid call directive: "+t);return new r(n,s)}}};var Re=Me;const Ne=class extends It{};Object.defineProperty(Ne.prototype,"jsenType",{get:()=>"ComparisonExpression"});var Ie=Ne;const We=class extends Ie{constructor(t,e,r){super(),this.operand1=t,this.operand2=e,this.operator=r}eval(t=null,e={}){return We.compare(this.operand1.eval(t,e),this.operand2.eval(t,e),this.operator)}toString(t=null){return[this.operand1.toString(t),this.operator,this.operand2.toString(t)].join(" ")}static parse(t,e,r=We){var n=Vt(r.operators).map(t=>" "+t+" "),i=re.lex(t,n);if(i.tokens.length>1){if(i.tokens.length>2)throw new Error('Malformed "Comparison" expression: '+t+"!");return new r(e(Zt(i.tokens).trim()),e(Gt(i.tokens).trim()),i.matches[0].trim())}}static compare(t,e,r="=="){if(-1===Vt(We.operators).indexOf(r))throw new Error('The operator "'+r+'" is not recognized.');switch(r){case"===":return t===e;case"==":case"=":return t==e;case">":return t>e;case"<":return t<e;case">=":return t>=e;case"<=":return t<=e;case"!=":return t!=e;case"!==":return t!==e;case"^=":return Yt(t)&&t.startsWith(e);case"$=":return Yt(t)&&t.endsWith(e);case"*=":return!(!Et(e)&&!Yt(e))&&t.indexOf(e)>-1;case"~=":return Yt(t)&&Yt(e)&&(" "+t+" ").indexOf(" "+e+" ")>-1;case">=<":if(!Et(e)||2!==e.length)throw new Error("A 'Between' comparison requires argument 2 to be an array of exactly 2 values.");return t>=e[0]&&t<=e[1];case"/**/":return e.match(new RegExp(t));default:return!1}}static diff(t,e,r){return!We.compare(t,e,r?"===":"==")}};We.operators={exact:{is:"===",isNull:"===",equalsTo:"==",strictlyNotEqualsTo:"!==",notEqualsTo:"!="},relative:{lesserThan:"<",greaterThan:">",lesserThanOrEqualsTo:"<=",greaterThanOrEqualsTo:">=",between:">=<"},partial:{startsWith:"^=",endsWith:"$=",contains:"*=",any:"~=",in:"~=",matches:"/**/"}};var Le=We;const qe=class extends It{};Object.defineProperty(qe.prototype,"jsenType",{get:()=>"TernaryConditional"});var ze=qe;const Be=class extends ze{constructor(t,e,r){super(),this.assertion=t,this.onTrue=e,this.onFalse=r}eval(t=null,e={}){return this.assertion.eval(t,e)?this.onTrue.eval(t,e):this.onFalse.eval(t,e)}toString(t=null){return[this.assertion.toString(t),Be.operators[0],this.onTrue.toString(t),Be.operators[1],this.onFalse.toString(t)].join(" ")}static parse(t,e,r=Be){var n=re.split(t,r.operators);if(n.length>1){if(2===n.length)throw new Error("Malformed ternary expression: "+t+"!");return new r(e(n[0].trim()),e(n[1].trim()),e(n[2].trim()))}}};Be.operators=["?",":"];var Ue=Be;const He=class extends It{};Object.defineProperty(He.prototype,"jsenType",{get:()=>"DeleteExpression"});var Ke=He;const Ye=class extends Ke{constructor(t,e="delete"){super(),this.reference=t,this.operator=e}eval(t=null,e={}){var r=this.reference.getEval(t,e);if(!Jt(r.context)&&!Jt(r.name))return ne.create(r.context).del(r.name,e);throw new Error('"'+this+'" is undefined!')}toString(t=null){return this.operator+" "+this.reference.toString(t)}static parse(t,e,r=Ye){var n=re.lex(t,Object.values(r.operators));if(1===n.matches.length&&t.startsWith(n.matches[0]+" ")){var i;if(!((i=e(n.tokens.pop().trim()))instanceof Lt))throw new Error("Invalid delete directive: "+t);return new r(i,n.matches[0].trim())}}};Ye.operators={red:"reduce",del:"delete"};var Je=Ye;const Xe=class extends It{};Object.defineProperty(Xe.prototype,"jsenType",{get:()=>"Statements"});var Qe=Xe;const Ve=class extends It{};Object.defineProperty(Ve.prototype,"jsenType",{get:()=>"ReturnDirective"});var Ze=Ve;const Ge=class extends Qe{constructor(t,e){super(),this.stmts=t||[],this.delim=e}eval(t=null,e={}){t=ne.create(t);for(var r=[],n=0;n<this.stmts.length;n++){if(this.stmts[n]instanceof Ze)return this.stmts[n].eval(t,e);r[n]=this.stmts[n].eval(t,e)}return r}toString(t=null){return this.stmts.map(e=>e.toString(t)).join(this.delim)}static parse(t,e,r=Ge){var n=re.lex(t,Vt(r.operators).concat([(t,e)=>!(!t.endsWith("}")||e.trim().startsWith("else"))&&""]));if(n.matches.length)return new r(n.tokens.map(t=>e(t.trim())).filter(t=>t),n.matches[0].trim())}};Ge.operators=[";","\r\n"];var tr=Ge;const er=class extends Ut{constructor(t,e,r={}){super(),this.paramters=t||{},this.statements=e,this.arrowFunctionFormatting=r}inherit(t){if(t instanceof Ut){for(var e=Object.keys(t.paramters),r=Object.keys(this.paramters),n=0;n<Math.max(r.length,e.length);n++){var i=e[n],s=r[n];if(!s&&i)throw new Error("Parameter #"+n+" ("+i+") in parent function must be implemented.");if(s&&i){var a=t.paramters[i],o=this.paramters[s];if(o&&!a)throw new Error("Parameter #"+n+" ("+s+") must not have a default value as established in parent function.");if(o&&a&&o.jsenType!==a.jsenType)throw new Error("Default value for parameter #"+n+" ("+s+") must be of type "+a.jsenType+" as established in parent function.")}}this.sup=t}return this}eval(t=null,e={}){return(...r)=>{var n={};Mt(Object.keys(this.paramters),(i,s)=>{var a=this.paramters[s];if(r.length-1<i&&!a)throw new Error('The parameter "'+s+'" is required.');n[s]=r.length>i?r[i]:this.paramters[s]?this.paramters[s].eval(t,e):null});var i=new ne(n,t);return this.statements.eval(i,e)}}toString(t=null){var e=[];if(Mt(this.paramters,(r,n)=>{e.push(r+(n?"="+n.toString(t):""))}),this.arrowFunctionFormatting){var r=!1===this.arrowFunctionFormatting.head||1===e.length&&-1===e[0].indexOf("="),n=!1===this.arrowFunctionFormatting.body;return(r?e[0]:"("+e.join(", ")+")")+" => "+(n?this.statements.toString(t):"{"+this.statements.toString(t)+"}")}return"function ("+e.join(", ")+") {"+this.statements.toString(t)+"}"}static parse(t,e,r=er){var n;if((t=t.trim()).startsWith("function")&&(n=re.split(t,[]).slice(1).filter(t=>t.trim()))&&2===n.length)var i=!1,s=ce(n.shift().trim(),"(",")"),a=ce(n.shift().trim(),"{","}");else{if(t.startsWith("function")||!(n=re.split(t,["=>"]))||2!==n.length)return;s=n.shift().trim(),a=n.shift().trim(),i={};ae(s,"(",")")?s=ce(s,"(",")"):i.head=!1,ae(a,"{","}")?a=ce(a,"{","}"):i.body=!1}var o={};re.split(s,[","]).forEach(t=>{var r=t.split("=");r[1]?o[r[0].trim()]=e(r[1].trim()):o[t.trim()]=null});var l=e(a,[tr],{assert:!1})||e(a);return new r(o,l,i)}};er.operators=["=>"];var rr=er;const nr=class extends It{};Object.defineProperty(nr.prototype,"jsenType",{get:()=>"IfConditional"});var ir=nr;const sr=class extends ir{constructor(t,e,r,n={}){super(),this.assertion=t,this.onTrue=e,this.onFalse=r,this.params=n}eval(t=null,e={}){return this.assertion.eval(t,e)?this.onTrue?this.onTrue.eval(t,e):void 0:this.onFalse?this.onFalse.eval(t,e):void 0}toString(t=null){var e=this.params.onTrueIsBlock?"{"+this.onTrue.toString(t)+"}":this.onTrue?this.onTrue.toString(t):"",r=this.params.onFalseIsBlock?"{"+this.onFalse.toString(t)+"}":this.onFalse?this.onFalse.toString(t):"";return"if ("+this.assertion.toString(t)+")"+e+(r?" else "+r:"")}static parse(t,e,r=sr){var n;if((t=t.trim()).startsWith("if")&&(n=re.split(t,[],{limit:2}).slice(1).filter(t=>t.trim()))&&2===n.length){var i,s,a=e(ce(n.shift().trim(),"(",")").trim()),o=re.split(n.shift().trim(),["else"],{limit:1}),l=o.shift().trim(),c=(o.shift()||"").trim();return ae(l,"{","}")?(i=!0,l=e(l=ce(l,"{","}").trim(),[tr],{assert:!1})||e(l)):l=e(l),c&&(ae(c,"{","}")?(s=!0,c=e(c=ce(c,"{","}").trim(),[tr],{assert:!1})||e(c)):c=e(c)),new r(a,l,c,{onTrueIsBlock:i,onFalseIsBlock:s})}}};var ar=sr,or=function(t,e,r=null){return Et(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1!==e.indexOf(t)):[]};const lr=class extends It{};Object.defineProperty(lr.prototype,"jsenType",{get:()=>"MathExpression"});var cr=lr;const hr=class extends cr{constructor(t,e){super(),this.val=t,this.exprs=e}eval(t=null,e={}){return this.exprs.reduce((r,n)=>{var i=n.val.eval(t,e),s=n.operator.trim();if(!(St(r)&&St(i)||"+"===s))throw new Error("Invalid Math expression: "+this.toString()+"!");switch(s){case"+":return r+i;case"-":return r-i;case"*":return r*i;case"/":return r/i}},this.val.eval(t,e))}toString(t=null){return[this.val.toString(t)].concat(this.exprs.map(e=>e.operator+" "+e.val.toString(t))).join(" ")}static parse(t,e,r=hr){var n=re.lex(t,Vt(r.operators));if(n.tokens.length>1&&n.matches.length===n.tokens.length-1){var i=Ee(n.matches);if(or(i,hr.operators.sup).length&&or(i,hr.operators.sub).length)throw new Error('"Addition/subtraction" and "multiplication/division" operators cannot be used in the same expression: '+t+"!");return new r(e(n.tokens.shift().trim()),n.tokens.map((t,r)=>({operator:n.matches[r],val:e(t.trim())})))}}};hr.operators={sup:["*","/"],sub:[" + "," - "]};var pr=hr;const ur=class extends It{};Object.defineProperty(ur.prototype,"jsenType",{get:()=>"NumberType"});var dr=ur;const fr=class extends dr{constructor(t,e=0){super(),this.int=t,this.dec=e}eval(){return parseFloat(this.int+(this.dec?"."+this.dec:null))}toString(t=null){return this.int+(this.dec?"."+this.dec:null)}static parse(t,e,r=fr){if(St(t)){t=t.split(".");return new r(parseInt(t.shift()),parseInt(t.shift()))}}};var gr=fr;const mr=class extends It{};Object.defineProperty(mr.prototype,"jsenType",{get:()=>"ObjectType"});var vr=mr;const br=class extends vr{constructor(t){super(),this.entries=t||{}}inherit(t){return t instanceof vr&&Mt(t.entries,(t,e)=>{t in this.entries||(this.entries[t]=e)}),this}eval(t=null,e={}){var r={};return Mt(this.entries,(n,i)=>{r[n]=i.eval(t,e)}),r}toString(t=null){var e=[];return Mt(this.entries,(r,n)=>{e.push(r+br.operators.sub+n.toString(t))}),"{"+e.join(br.operators.sup)+"}"}static parse(t,e,r=br){if(ae(t,"{","}")&&!re.match(t.trim(),[" "]).length){var n={},i=re.split(ce(t,"{","}"),[br.operators.sup]).map(t=>t.trim()).filter(t=>t);return Mt(i,(t,r)=>{var i=re.split(r,[br.operators.sub],{limit:1});n[Zt(i).trim()]=e(Gt(i).trim())}),new r(n)}}};br.operators={sup:",",sub:":"};var yr=br;const wr=class extends It{};Object.defineProperty(wr.prototype,"jsenType",{get:()=>"PresenceOperator"});var xr=wr;const Er=class extends xr{constructor(t,e,r="in"){super(),this.prop=t,this.reference=e,this.operator=r}eval(t=null,e={}){var r=this.reference.getEval(t,e),n=this.prop.eval(t,e);if(!Jt(r.context)&&!Jt(r.name))return ne.create(r.context).has(r.name,n,e);throw new Error('"'+this+'" is undefined!')}toString(t=null){return[this.prop.toString(t),this.operator,this.reference.toString(t)].join(" ")}static parse(t,e,r=Er){var n=re.lex(t,r.operators);if(2===n.tokens.length){var i,s;if(!((i=e(n.tokens.shift().trim()))&&(s=e(n.tokens.shift().trim()))instanceof Lt))throw new Error("Invalid presence check expression: "+t);return new r(i,s,n.matches[0].trim())}}};Er.operators=[" in "];var Or=Er;const jr=class extends Lt{constructor(t,e,r=!1){super(),this.context=t,this.name=e,this.backticks=r}getEval(t=null,e={}){var r=t,n=this.name;return this.context&&(n instanceof It&&(n=n.eval(t,e)),r=this.context.eval(t,e)),{context:r,name:n}}eval(t=null,e={}){var r=this.getEval(t,e);if(!Jt(r.context)&&!Jt(r.name))return ne.create(r.context).get(r.name,e)}toString(t=null){var e=this.name;if(this.context){var r=this.context.toString(t);e instanceof It?e="["+e.toString(t)+"]":this.backticks&&(e="`"+e+"`")}else{r=t;this.backticks&&(e="`"+e+"`")}return(r||"")+(r&&!e.startsWith("[")?jr.separator:"")+e}static parse(t,e,r=jr){if(!re.match(t.trim(),[" "]).length){var n,i,s=re.split(t,[]),a=s.pop(),o=re.split(a.trim(),[r.separator],{preserveDelims:!0});if(o.length>1&&(a=o.pop().substr(1),s=s.concat(o)),ae(a,"`","`")&&(a=ce(a,"`","`"),i=!0),s.length&&((n=e(s.join(""))).isContext=!0),ae(a,"[","]")){if(!n)throw new Error("Invalid reference: "+t+"!");a=e(ce(a,"[","]"))}return new r(n,a,i)}}};jr.separator=".";var kr=jr;const Sr=class extends Ze{constructor(t){super(),this.expr=t}eval(t=null,e={}){return this.expr?this.expr.eval(t,e):void 0}toString(t=null){return this.expr?"return "+this.expr.toString(t):"return"}static parse(t,e,r=Sr){var n=t.toLowerCase();if(n.startsWith("return ")||"return"===n)return new r(e(t.substr(6).trim()))}};var Tr=Sr;const Cr=class extends It{};Object.defineProperty(Cr.prototype,"jsenType",{get:()=>"StringType"});var Fr=Cr;const Pr=class extends Fr{constructor(t,e){super(),this.expr=t,this.quote=e}eval(){return this.expr}toString(){return this.quote+this.expr+this.quote}static parse(t,e,r=Pr){if(t=t.trim(),(ae(t,'"','"')||ae(t,"'","'"))&&!re.match(t,[" "]).length){var n=ae(t,'"','"')?'"':"'";return new r(ce(t,n,n),n)}}};var $r=Pr;Kt.grammars={If:ar,Return:Tr,Deletion:Je,Assignment:Pe,Presence:Or,Func:rr,Abstraction:de,Condition:Ue,Assertion:Se,Comparison:Le,Math:pr,Arr:ve,Obj:yr,Num:gr,Str:$r,Bool:De,Call:Re,Reference:kr};var Ar=Kt,_r=function(t){return Array.isArray(t)||"object"==typeof t},Dr=function(t){return Array.isArray(t)},Mr=function(t){return"string"==typeof t},Rr=function(t){return arguments.length&&(void 0===t||void 0===t)},Nr=function(t){return null===t||""===t},Ir=function(t){return!Array.isArray(t)&&"object"==typeof t&&t},Wr=function(t,e=!0){return Dr(t)?t:!e&&Ir(t)?[t]:!1!==t&&0!==t&&function(t){return Nr(t)||Rr(t)||!1===t||0===t||_r(t)&&!Object.keys(t).length}(t)?[]:function(t){return!Mr(t)&&!Rr(t.length)}(t)?Array.prototype.slice.call(t):Ir(t)?Object.values(t):[t]},Lr=function(t,e=null){var r={};return 2===arguments.length&&(Mr(t)?r[t]=e:Dr(t)&&Dr(e)&&t.forEach((t,n)=>r[t]=e[n])),r},qr=function(t){return!0!==t&&!1!==t&&null!==t&&""!==t&&!isNaN(1*t)},zr=function(t){return function(t){return"function"==typeof t}(t)||t&&"[object function]"==={}.toString.call(t)},Br=function(t,e){var r=void 0;return _r(t)&&Object.keys(t).forEach((n,i)=>{!1!==r&&(r=e(qr(n)?parseFloat(n):n,t[n],i))}),r},Ur=class{constructor(t,e={}){this.$={},this.$.target=t,this.$.details=e,this.$.propagationStopped=!1,this.$.defaultPrevented=!1,this.$.promisesInstance=null,this.$.promises=[],Br(e,(t,e)=>{"$"!==t&&Object.defineProperty(this,t,{value:e})})}get target(){return this.$.target}get details(){return this.$.details}stopPropagation(){this.$.propagationStopped=!0}get propagationStopped(){return this.$.propagationStopped}preventDefault(){this.$.defaultPrevented=!0}get defaultPrevented(){return this.$.defaultPrevented}promise(t){if(!(t instanceof Promise))throw new Error("Event.promise() must be called with a Promise.");this.$.promises.push(t),this.$.promisesInstance=null}get promises(){return!this.$.promisesInstance&&this.$.promises.length&&(this.$.promisesInstance=Promise.all(this.$.promises)),this.$.promisesInstance}response(t){var e,r=Ir(t)&&!Rr(t.propagationStopped)&&!Rr(t.defaultPrevented);!1===t||r&&t.propagationStopped?this.stopPropagation():!1===t||r&&t.defaultPrevented?this.preventDefault():(t instanceof Promise&&(e=t)||r&&(e=t.promises))&&this.promise(e)}},Hr=class extends Ur{constructor(t,e={}){super(t,e)}},Kr=function(t){return"number"==typeof t},Yr=function(t){return Ir(t)&&Object.getPrototypeOf(t)===Object.prototype},Jr=function(t){return!0===t||!1===t};const Xr=function(t,e,r=!0,n=1){if(Dr(t)&&Dr(e)&&t.length!==e.length)return!r;if(Ir(t)&&Ir(e)){var i=Object.keys(t),s=Object.keys(e);if(!i.length&&!s.length)return Yr(t)&&Yr(e)?r:t===e===r;if(!Xr(i,s))return!r}if(n>0&&(Dr(t)&&Dr(e)||Ir(t)&&Ir(e))){var a=function(t,e,r=!0,n=!0,i=!1,s=!1){if(Dr(t)&&Dr(e)){var a=[],o=!0;return t.forEach(t=>{if(o){var l=!1;Br(e,(e,i)=>{(!l||n&&_r(t))&&(l=r(t,i),(Dr(l)&&!l.length||Ir(l)&&!Object.keys(l).length)&&(l=!1),_r(l)&&n&&(t=l))}),_r(l)?a.push(n?l:t):Jr(l)?i&&!l||!i&&l?a.push(t):s&&(o=!1):a.push(l)}}),a}if(Ir(t)&&Ir(e)){a={},o=!0;return Object.keys(t).forEach(l=>{if(o){var c=r(t[l],e[l]);(Dr(c)&&!c.length||Ir(c)&&!Object.keys(c).length)&&(c=!1),_r(c)?a[l]=n?c:t[l]:Jr(c)?i&&!c||!i&&c?a[l]=t[l]:s&&(o=!1):a[l]=c}}),a}}(t,e,(t,e)=>Xr(t,e,r,n-1),!1,!1,!0);return Dr(a)?a.length===t.length&&a.length===e.length:Ir(a)&&Ir(t)?Object.keys(a).length===Object.keys(t).length&&Object.keys(a).length===Object.keys(e).length:a}return zr(r)?r(t,e):Kr(t)&&Kr(e)&&isNaN(t)&&isNaN(e)?r:t===e===r};var Qr=Xr,Vr=class{disconnect(){this.disconnected=!0}},Zr=class{constructor(){this.fireables=[],this.currentlyFiringEvents=[]}addFireable(t){return this.fireables.push(t),t}removeFireable(t,e=[]){this.fireables=this.fireables.filter(e=>e!==t)}findFireables(t){return this.fireables.filter(e=>!(t.handler&&e.handler!==t.handler||t.params&&(t.params.type&&e.params.type!==t.params.type||t.params.tags&&function(t,e,r=null){return Dr(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1!==e.indexOf(t)):[]}(e.params.tags||[],t.params.tags).length!==t.params.tags.length)))}static createForTarget(t,e,r){var n;if(t&&_r(t))return(n=t[Gr])||(n={},Object.defineProperty(t,Gr,{get:()=>n,set:t=>{if(t!==n)throw new Error('Attempt to overwrite the "'+Gr+'" special property!')},enumerable:!1})),n[e]="listeners"===e?new r(t):new r,n[e]}static getForTarget(t,e){var r;if(t&&_r(t)&&(r=t[Gr]))return r[e]}};const Gr="< r e f l e x >";var tn=class extends Vr{constructor(t,e={}){super(),this.handler=t,this.params=e}fire(t,e,r){return this.disconnected||this.params.type&&this.params.type!==t.type?e(...Wr(arguments).slice(2)):this.handler(t,r,e)}};class en extends Zr{fire(t,e=null){if(this.currentlyFiringEvents.filter(e=>e.type===t.type&&e.query===t.query).length)return e?e():void 0;this.currentlyFiringEvents.push(t);const r=(n,...i)=>{var s=this.fireables[n];return s?s.fire(t,(...t)=>r(n+1,...t),...i):e?e(...i):i[0]};var n=r(0);return this.currentlyFiringEvents.pop(),n}static createForTarget(t){return super.createForTarget(t,"traps",en)}static getForTarget(t){return super.getForTarget(t,"traps")}}var rn=function(t,...e){return e.forEach(e=>{t.indexOf(e)<0&&t.push(e)}),t},nn=function(t,e){var r=[];return function(t,e){e=(e=e||Object.prototype)&&!Dr(e)?[e]:e;var r=[];for(t=t;t&&(!e||e.indexOf(t)<0)&&"default"!==t.name;)r.push(t),t=t?Object.getPrototypeOf(t):null;return r}(t,e).forEach(t=>{rn(r,...Object.getOwnPropertyNames(t))}),r};function sn(t,e,r=!1,n=!1,i=!0){var s=0,a=t.shift();if((qr(a)||!0===a||!1===a)&&(s=a,a=t.shift()),!t.length)throw new Error("_merge() requires two or more array/objects.");return t.forEach((t,o)=>{(_r(t)||zr(t))&&(r?nn(t):Object.getOwnPropertyNames(t)).forEach(l=>{var c=a[l],h=t[l];if((Dr(c)&&Dr(h)||Ir(c)&&Ir(h))&&(!0===s||s>0))a[l]=Dr(c)&&Dr(h)?[]:{},sn([qr(s)?s-1:s,a[l],c,h],e,r,n,i);else if(e(l,a,t,o))if(Dr(a)&&Dr(t))n?a[l]=h:a.push(h);else try{i?Object.defineProperty(a,l,Object.getOwnPropertyDescriptor(t,l)):a[l]=t[l]}catch(t){}})}),a}var an=function(t,e=[],r=!0){var n=0;return qr(arguments[0])&&_r(arguments[1])&&(n=arguments[0],t=arguments[1],e=arguments[2]||[]),sn([n,{},t],(t,r,n)=>zr(e)?e(t):!Dr(e)||!e.length||e.indexOf(t)>-1,!1,!1,r)},on=function(...t){return sn(t,(t,e,r)=>!0,!1,!1,!1)},ln=class extends Ur{constructor(t,e={}){if(e.data&&(e.fields=Object.keys(e.data)),super(t,e),this.srcEvt){this.dataEven=this.srcEvt.dataEven,this.originatingTarget=this.srcEvt.originatingTarget,this.originatingType=this.srcEvt.originatingType,this.originatingFields=[],this.originatingData={},this._originatingData={};var r=this.fields[0];Object.keys(this.srcEvt.originatingData).forEach(t=>{var e=r+"."+t;this.originatingFields.push(e),this.originatingData[e]=this.srcEvt.originatingData[t],this._originatingData[e]=this.srcEvt._originatingData[t]}),this.originatingCreated=this.srcEvt.originatingCreated,this.originatingDeleted=this.srcEvt.originatingDeleted}else this.dataEven=Qr(this.data,this._data),this.originatingTarget=this.target,this.originatingType=this.type,this.originatingFields=this.fields,this.originatingData=this.data,this._originatingData=this._data,this.originatingCreated=this.created,this.originatingDeleted=this.deleted}};class cn extends Zr{findFireables(t){return super.findFireables(t).filter(e=>Nr(t.fields)||Rr(t.fields)||Qr(Wr(e.fields),Wr(t.fields)))}fire(t){return this.currentlyFiringEvents.filter(e=>e.type===t.type&&e.fields===t.fields).length||(this.currentlyFiringEvents.push(t),this.fireables.forEach(e=>{t.propagationStopped||e.params.type&&e.params.type!==t.type||e.fire(t)}),this.currentlyFiringEvents.pop()),t}static createForTarget(t){return super.createForTarget(t,"observers",cn)}static getForTarget(t){return super.getForTarget(t,"observers")}}var hn=function(t,e,r=null,n={}){if(!t||!_r(t))throw new Error("Object must be of type object!");var i;(zr(e)||Nr(e)||Rr(e))&&(n=arguments.length>2?r:{},r=e,e=null),(i=cn.getForTarget(t))&&i.findFireables({handler:r,fields:e,params:n}).forEach(t=>{i.removeFireable(t)})},pn=function(t,e,r){hn(r,null,{tags:["#e-bubbling",e,t]})},un=function(t){return typeof t},dn=function(t,e,r={},n={}){e=Wr(e).slice();for(var i=t;!Rr(i)&&!Nr(i)&&e.length;){var s=e.shift();if(!(r.get?r.get(i,s):_r(i)?s in i:i[s]))return void(n.exists=!1);i=r.get?r.get(i,s):i[s]}return n.exists=!0,i},fn=class extends Vr{constructor(t,e=null,r={}){if(super(),this.handler=t,this.fields=e,this.params=r,this.fieldsArray=Wr(this.fields),this.isDynamicField=this.fieldsArray.filter(t=>t.indexOf("..")>-1||t.startsWith(".")||t.endsWith(".")).length,this.isDynamicField&&this.fieldsArray.length>1)throw new Error('Only one "Dynamic Field" must be observed at a time! "'+this.fieldsArray.join(", ")+'" have been bound together.')}fire(t){this.disconnected||this.params.type&&this.params.type!==t.type||t.dataEven&&!1!==this.params.diff||this.fireCallback(t,e=>{if(e){var r=[],n=[];return!1!==this.params.data&&e.forEach(e=>{var i=t.originatingFields.reduce((r,n)=>{var i=t.originatingData[n],s=t._originatingData[n];if(!r&&e===n)return[i,s];if(!r&&(e+".").startsWith(n+".")){var a=function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?"":t.substr(n+e.length)}(e,n+".");return[dn(i,a.split("."),{get:bn}),dn(s,a.split("."),{get:bn})]}return r},null);if(i)r.push(i.shift()),n.push(i.shift());else{var s=dn(t.target,Mr(e)?e.split("."):e,{get:bn});r.push(s),n.push(s)}}),Dr(this.fields)?t.response(this.handler(r,n,t)):t.response(this.handler(r[0],n[0],t))}r={},n={};return t.fields.forEach(e=>{var i=e in t.data?t.data[e]:bn(t.target,e),s=e in t._data?t._data[e]:i;r[e]=i,n[e]=s}),t.response(this.handler(r,n,t))})}fireCallback(t,e){if(this.fieldsArray.length){var r=[];this.fieldsArray.filter((e,n)=>(e=Mr(e)?e.replace(/`/g,""):e,r[n]=[],t.originatingFields.filter(i=>{var s=i.split("."),a=this.isDynamicField?e.split(".").map((t,e)=>t||s[e]||"").join("."):e;return rn(r[n],a),(a===i&&!t.srcEvt||!1!==this.params.observeUp&&(a+".").startsWith(i+".")||this.params.observeDown&&(i+".").startsWith(a+"."))&&(!this.isDynamicField||!a.split(".").filter(t=>!t).length)}).length)).length&&(n=r,n.reduce((t,e)=>{var r=[];return t.forEach(t=>{Wr(e).forEach(e=>{var n=t.slice();n.push(e),r.push(n)})}),r},[[]])).forEach(e)}else t.srcEvt&&!this.params.observeDown||e();var n}},gn=function(t,e,r=null,n={}){if(!t||!_r(t))throw new Error("Object must be of type object!");if(zr(e)&&(n=arguments.length>2?r:{},r=e,e=null),!zr(r))throw new Error('Callback must be a function; "'+un(r)+'" given!');var i;return(i=cn.getForTarget(t))||(i=cn.createForTarget(t)),i.addFireable(new fn(r,e,n))},mn=function(t,e,r){var n;gn(r,(i,s,a)=>{if(n=cn.getForTarget(t)){var o=Lr(e,r);return n.fire(new ln(t,{type:a.type,bubbling:!0,data:o,_data:o,srcEvt:a}))}},{observeDown:!0,tags:["#e-bubbling",e,t]})},vn=function(t,e,r=[],n=!1){var i=t.map((t,e)=>{if(!t||!_r(t))throw new Error("Target must be of type object!");return{target:t,targetCopy:an(t,r),setData:{},_setData:{},delData:{},_delData:{},created:[],deleted:[]}}),s=e(...t);return i.map(t=>{var e,i,s,a=Object.keys(t.targetCopy),o=Object.keys(t.target),l=(e=a.concat(o),e.filter((t,e,r)=>r.indexOf(t)===e)).filter(e=>{if(!(r.length&&!r.includes(e)||Dr(t.target)&&("length"===e||"< r e f l e x >"===e))){if(o.includes(e)?(t._setData[e]=t.targetCopy[e],t.setData[e]=t.target[e],a.includes(e)||t.created.push(e)):(t._delData[e]=t.targetCopy[e],t.delData[e]=void 0,t.deleted.push(e)),t.targetCopy[e]!==t.target[e])return t.targetCopy[e]&&_r(t.targetCopy[e])&&pn(t.target,e,t.targetCopy[e]),t.target[e]&&_r(t.target[e])&&mn(t.target,e,t.target[e]),!0;delete t.setData[e],delete t._setData[e]}});return((s=cn.getForTarget(t.target))||n)&&(i=new ln(t.target,{type:"transaction",data:on(t.setData,t.delData),_data:on(t._setData,t._delData),created:t.created,deleted:t.deleted}),s&&(Object.keys(t.delData).length&&i.response(s.fire(new ln(t.target,{type:"del",data:t.delData,_data:t._delData,deleted:t.deleted}))),Object.keys(t.setData).length&&i.response(s.fire(new ln(t.target,{type:"set",data:t.setData,_data:t._setData,created:t.created}))))),n?i:l}),s},bn=function(t,e){if(!t||!_r(t))throw new Error("Target must be of type object!");var r,n,i=function(r){return arguments.length?r:Dr(e)?Lr(e,t):t[e]};return r=(n=en.getForTarget(t))?n.fire(new Hr(t,{type:"get",query:e}),i):i(),Dr(t)&&!qr(e)&&zr(r)?function(...e){return vn([t],()=>r.apply(t,e))}:r},yn=function(t,e){return t.reduce((t,r)=>t&&e(r),!0)},wn=function(t,e){if(!t||!_r(t))throw new Error("Target must be of type object!");var r,n=function(r){return arguments.length?r:e in t};return(r=en.getForTarget(t))?r.fire(new Hr(t,{type:"has",query:e}),n):n()},xn=function(t,e,r,n=null,i=!1){if(!e||!_r(e))throw new Error("Target must be of type object!");Ir(r)&&(i=n);var s,a,o=r,l={},c={},h=[],p=(r,n,i)=>{var s;l[r]=e[r],wn(e,r)||h.push(r),t&&(n=(s=n||{}).value);var a,o,p=function(t){return arguments.length?t:(s?Object.defineProperty(e,r,s):e[r]=n,!0)};if(o=en.getForTarget(e)){var u=s?{type:"def",query:r,descriptor:s,related:i}:{type:"set",query:r,value:n,related:i};a=o.fire(new Hr(e,u),p)}else a=p();return a?(c[r]=n,c[r]!==l[r]?(l[r]&&_r(l[r])&&pn(e,r,l[r]),c[r]&&_r(c[r])&&mn(e,r,c[r])):(delete c[r],delete l[r])):delete l[r],a},u=[];if(Dr(o)||(Mr(o)||Kr(o))&&(o=Wr(o)))u=o.map(t=>p(t,n,o));else if(Ir(r)){var d=Object.keys(r);u=d.map(t=>p(t,r[t],d))}return((a=cn.getForTarget(e))||i)&&(s=new ln(e,{type:"set",data:c,_data:l,created:h}),a&&a.fire(s)),i?s:yn(u,t=>t)},En=function(t,e,r=null,n=!1){return xn(!1,...arguments)},On=function(t,e){Wr(e).forEach(e=>{var r,n,i=t[e],s=Object.getOwnPropertyDescriptor(t,e)||{enumerable:!(e in t)};"value"in s&&delete s.value,"writable"in s&&delete s.writable,s.get=()=>{if(r)return i;r=!0;var n=bn(t,e);return r=!1,n},s.set=r=>{if(n)return i=r,!0;n=!0;En(t,e,r);return n=!1,!0},Object.defineProperty(t,e,s)})},jn=function(t,e){if(!e||!_r(e))throw new Error("Target must be of type object!");var r,n=function(r){return arguments.length?r:t?Object.getOwnPropertyNames(e):Object.keys(e)};return(r=en.getForTarget(e))?r.fire(new Hr(e,{type:t?"ownKeys":"keys"}),n):n()},kn=function(t){return jn(!1,...arguments)};var Sn=function(t,e,r=null,n=!1){return xn(!0,...arguments)},Tn=function(t,e,r=!1){if(!t||!_r(t))throw new Error("Target must be of type object!");e=Wr(e);var n,i,s={},a={},o=[],l=e.map(r=>{s[r]=t[r],wn(t,r)&&o.push(r);var n,i,l=function(e){return arguments.length?e:(delete t[r],!0)};return(n=(i=en.getForTarget(t))?i.fire(new Hr(t,{type:"del",query:r,related:e}),l):l())&&(a[r]=void 0,s[r]&&_r(s[r])&&pn(t,r,s[r])),n});return((i=cn.getForTarget(t))||r)&&(n=new ln(t,{type:"del",data:a,_data:s,deleted:o}),i&&Object.keys(a).length&&i.fire(n)),r?n:yn(l,t=>t)};class Cn extends Zr{fire(t){return this.fireables.forEach(e=>{t.propagationStopped||e.fire(t)}),t}static createForTarget(t,e=Cn){return super.createForTarget(t,"listeners",e)}static getForTarget(t){return super.getForTarget(t,"listeners")}}var Fn=class extends Vr{constructor(t,e={}){super(),this.handler=t,this.params=e}fire(t){this.params.type===t.type&&t.response(this.handler.call(this.target,t.e))}};var Pn={build:function t(e,r=!1){if(!e||!_r(e))throw new Error("Target must be of type object!");var n=kn(e);n.forEach(n=>{var i=bn(e,n);_r(i)&&i&&(mn(e,n,i),t(i,r))}),r&&On(e,n)},observe:gn,unobserve:hn,trap:function(t,e,r={}){if(!t||!_r(t))throw new Error("Object must be of type object!");if(!zr(e))throw new Error('Callback must be a function; "'+un(e)+'" given!');var n;return(n=en.getForTarget(t))||(n=en.createForTarget(t)),n.addFireable(new tn(e,r))},untrap:function(t,e=null,r={}){if(!t||!_r(t))throw new Error("Object must be of type object!");var n;(n=cn.getForTarget(t))&&n.findFireables({handler:e,params:r}).forEach(t=>{n.removeFireable(t)})},def:Sn,defineProperty:Sn,set:En,del:Tn,deleteProperty:Tn,link:mn,unlink:pn,transaction:vn,get:bn,has:wn,init:On,keys:kn,ownKeys:function(t){return jn(!0,...arguments)},on:function(t,e,r,n={}){var i;return(i=Cn.getForTarget(t))||(i=Cn.createForTarget(t)),i.addFireable(new Fn(r,on(n,{type:e})))},off:function(t,e,r=null,n={}){var i;(i=Cn.getForTarget(t))&&i.findFireables({handler:r,type:e,params:n}).forEach(t=>{i.removeFireable(t)})},trigger:function(t,e,r={}){var n;if(n=Cn.getForTarget(t))return n.fire(new Ur(t,on(r,{type:e})))},MutationEvent:ln,QueryEvent:Hr,Event:Ur},$n={env:"",context:{},attrMap:{hint:"c-hint",namespace:"c-namespace",superrole:"c-role",subrole:"c-role",bundle:"c-bundle",nocompose:["nocompose","shadow"]},tagMap:{jsen:'script[type="text/jsen"]',bundle:'template[is="c-bundle"]',import:"c-import"},treeProperty:"tree",bindingProperty:"binding",keyValAttributes:[],listAttributes:[],remodelCallback:null,recomposeCallback:null,hideDataBlockScript:!0},An=function(t){return function(t){return"function"==typeof t}(t)||t&&"[object function]"==={}.toString.call(t)},_n=function(t){return!0!==t&&!1!==t&&null!==t&&""!==t&&!isNaN(1*t)},Dn=function(t){return t.filter((t,e,r)=>r.indexOf(t)===e)},Mn=function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?t:t.substr(0,n)},Rn=function(t,e){return Mn(t,e,!0)},Nn=function(t,e,r,n=[]){if(n=n.concat([$n.attrMap.namespace,...$n.attrMap.nocompose]),e.hasAttribute("norecompose")&&(n=n.concat((e.getAttribute("norecompose")||"*").split(" ").map(t=>t.trim()))),An($n.recomposeCallback)){var i=$n.recomposeCallback(t,e,r,n);if(!1===i)return!1;(vt(i)||mt(i))&&(n=n.concat(i))}Dn($n.listAttributes.concat([$n.attrMap.hint,$n.attrMap.superrole,$n.attrMap.subrole,"role","class"])).forEach(i=>{var s,a;if(!n.includes(i)&&!n.includes("*")&&(s=t.getAttribute(i))){if(a=e.getAttribute(i))var o="prepend"===r?[s,a]:[a,s];else o=[s];e.setAttribute(i,Dn(o.join(" ").split(" ").map(t=>t.trim())).join(" ")),n.push(i)}}),Dn($n.keyValAttributes.concat("style")).forEach(i=>{var s,a;if(!n.includes(i)&&!n.includes("*")&&(s=t.getAttribute(i))){if(a=e.getAttribute(i))(o="prepend"===r?[s,a]:[a,s])[0].trim().endsWith(";")||(o[0]=o[0]+";");else var o=[s];e.setAttribute(i,o.join(" ")),n.push(i)}});for(var s=0;s<t.attributes.length;s++){var a=t.attributes[s];n.includes(a.name)||n.includes("*")||e.hasAttribute(a.name)||(e.setAttribute(a.name,a.value),n.push(a.name))}if(!n.includes("@directives")&&!n.includes("*")){var o=xt((e.shadowRoot||e).children).filter(t=>t.matches($n.tagMap.jsen)),l=xt((t.shadowRoot||t).children).filter(t=>t.matches($n.tagMap.jsen));l.length&&(o.length?o[0][r](l[0].textContent):e.prepend(l[0].cloneNode(!0)))}return e},In=function(t,e){return e.matches($n.tagMap.import)?function(t,e){e=e.cloneNode(!0);var r=t.getAttribute($n.attrMap.namespace),n=(e.getAttribute($n.attrMap.namespace),(e.getAttribute($n.attrMap.superrole)||"").split(" ").map(t=>t.trim()));return e.setAttribute($n.attrMap.namespace,r),Nn(t,e,"append"),xt((t.shadowRoot||t).children).forEach((t,r)=>{if(!t.matches($n.tagMap.jsen)){t=t.cloneNode(!0);var i=[],s=[];(t.getAttribute($n.attrMap.subrole)||"").split(" ").map(t=>t.trim()).forEach(t=>{var e=n.filter(e=>t.startsWith(e+"-"));e.length&&(i.push(e[0]),s.push(t))});var a=$n.context.CSS?$n.context.CSS.escape:t=>t;if(i.length){var o,l=i.map(t=>"["+a($n.attrMap.superrole)+'~="'+t+'"]'),c=s.map(t=>"["+a($n.attrMap.subrole)+'~="'+t+'"]');e.shadowRoot&&(o=e.shadowRoot.querySelectorAll(c))||1===(o=e.querySelectorAll(c)).length&&o[0].closest(l)===e?(Nn(o[0],t,"prepend"),o[0].replaceWith(t)):e.append(t)}else e.append(t)}}),e}(e,t):Nn(t,e,"prepend")};class Wn{constructor(t,e,r,n=null){this.sources=xt(t),this.namespace=xt(e),this.getter=r,this.carry=n,this.collections={},this.value}enter(t){return t in this.collections||(this.collections[t]=new Wn(this.sources,this.namespace.concat(t),this.getter,this)),this.collections[t]}leave(){return this.carry}get(){if(!this.value){var t=this.namespace.slice(),e=this.carry?this.carry.get():null;this.sources.forEach((r,n)=>{(e=this.getter.call(null,r,t,e,n))&&(this.value=e)})}return this.value}find(t){for(var e,r,n=t.split("/"),i=this;(r=n.shift())&&(i=i.enter(r));)e=i;var s=e.get();if(s)return s.cloneNode(!0)}}var Ln=function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?"":t.substr(n+e.length)},qn=function(t,...e){return e.forEach(e=>{t.indexOf(e)<0&&t.push(e)}),t},zn=function(t,e){var r=[];return function(t,e){e=(e=e||Object.prototype)&&!mt(e)?[e]:e;var r=[];for(t=t;t&&(!e||e.indexOf(t)<0)&&"default"!==t.name;)r.push(t),t=t?Object.getPrototypeOf(t):null;return r}(t,e).forEach(t=>{qn(r,...Object.getOwnPropertyNames(t))}),r};function Bn(t,e,r=!1,n=!1,i=!0){var s=0,a=t.shift();if((_n(a)||!0===a||!1===a)&&(s=a,a=t.shift()),!t.length)throw new Error("_merge() requires two or more array/objects.");return t.forEach((t,o)=>{(yt(t)||An(t))&&(r?zn(t):Object.getOwnPropertyNames(t)).forEach(l=>{var c=a[l],h=t[l];if((mt(c)&&mt(h)||wt(c)&&wt(h))&&(!0===s||s>0))a[l]=mt(c)&&mt(h)?[]:{},Bn([_n(s)?s-1:s,a[l],c,h],e,r,n,i);else if(e(l,a,t,o))if(mt(a)&&mt(t))n?a[l]=h:a.push(h);else try{i?Object.defineProperty(a,l,Object.getOwnPropertyDescriptor(t,l)):a[l]=t[l]}catch(t){}})}),a}var Un=function(...t){return Bn(t,(t,e,r)=>!0,!1,!1,!1)};class Hn extends tr{filter(){var t=[];return this.stmts.forEach(e=>{Hn.flatten(e,e=>{t.push(e)})}),(t=t.reduce((t,e)=>(t.forEach(t=>{t.isDuplicate||t.overridden||(e.toString()!==t.toString()||e.important!==t.important&&e.fallback!==t.fallback?e.important||t.fallback?t.overridden=!0:(t.important||e.fallback)&&(e.overridden=!0):e.isDuplicate=!0)}),t.concat([e])),[])).filter(t=>!t.isDuplicate&&!t.overridden)}static flatten(t,e,r=""){if("IfConditional"===t.jsenType){var n="("+t.assertion.toString()+")";t.onTrue&&("Statements"===t.onTrue.jsenType?t.onTrue.stmts.forEach(t=>{Hn.flatten(t,e,(r?r+" && ":"")+n)}):Hn.flatten(t.onTrue,e,(r?r+" && ":"")+n)),t.onFalse&&("Statements"===t.onFalse.jsenType?t.onFalse.stmts.forEach(t=>{Hn.flatten(t,e,(r?r+" && ":"")+"!"+n)}):Hn.flatten(t.onFalse,e,(r?r+" && ":"")+"!"+n))}else e(r?Ar.parse(r+' && "[ENDIF]" && '+t.toString()):t)}static parse(t,e={}){return super.parse(t.trim().endsWith(";")?t:t+";",(t,r=null,n=null)=>Ar.parse(t,r,n?Un(e,n):e),Hn)}}var Kn=function(t,e=[],r=!0){var n=0;return _n(arguments[0])&&yt(arguments[1])&&(n=arguments[0],t=arguments[1],e=arguments[2]||[]),Bn([n,{},t],(t,r,n)=>An(e)?e(t):!mt(e)||!e.length||e.indexOf(t)>-1,!1,!1,r)};var Yn=function(t,e,r=null){return mt(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1!==e.indexOf(t)):[]};const Jn={std:{html:{type:["#sectioning-root"],model:["head","body"],singleton:!0},caption:{model:["#flow","!table"],singleton:!0},col:{model:["#nothing"]},colgroup:{model:[{"colgroup[span]":["#nothing"]},{":not(colgroup[span])":["col","template"]}],singleton:!0},dd:{model:["#flow"],implicitRole:"definition"},dt:{model:["#flow","!#heading","!#sectioning","!header","!footer"],implicitRole:"term"},figcaption:{model:["#flow"],singleton:!0},head:{model:["#metadata"],singleton:!0},legend:{model:["#phrasing"],singleton:!0},li:{model:["#flow"],implicitRole:"listitem"},optgroup:{model:["option","#script-supporting"],implicitRole:"group"},option:{model:[{"option[label][value]":["#nothing"]},{"option[label]:not(option[value])":["#text"]},{":not(option[label])":["#text"]}]},param:{model:["#nothing"]},rp:{model:["#text"]},rt:{model:["#phrasing"]},source:{model:["#nothing"]},summary:{model:["#phrasing","#heading"],singleton:!0},track:{model:["#nothing"]},tbody:{model:["#script-supporting","tr"]},td:{model:["#flow","!#heading","!#sectioning","!header","!footer"]},tfoot:{model:["tr","#script-supporting"],singleton:!0},thead:{model:["tr","#script-supporting"],singleton:!0},tr:{model:["#script-supporting","td","th"]},a:{type:["#flow","#phrasing",{"a[href]":["#interactive","#palpable"]}],model:["#transparent","!#interactive","!a"]},abbr:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},address:{type:["#flow","#palpable"],model:["#flow","!#heading","!#sectioning","!header","!footer","!address"]},area:{type:["#flow","#phrasing"],model:["#nothing"]},article:{type:["#flow","#palpable","#sectioning-content"],model:["#flow"],implicitRole:"article",acceptableRoles:["application","article","document","main"]},aside:{type:["#flow","#palpable","#sectioning-content"],model:["#flow"],implicitRole:"complementary",acceptableRoles:["complementary","note","search"]},audio:{type:["#embedded","#flow","#phrasing",{"audio[controls]":["#interactive","#palpable"]}],model:["#transparent","!#media","track",{":not(audio[src])":["source"]}]},b:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},base:{type:["#metadata"],model:["#nothing"],singleton:!0},bdi:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},bdo:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},blockquote:{type:["#flow","#palpable","#sectioning-root"],model:["#flow"]},body:{type:["#sectioning-root"],model:["#flow","@banner","@contentinfo","@complementary","@main"],singleton:!0},br:{type:["#flow","#phrasing"],model:["#nothing"]},button:{type:["#flow","#interactive","#palpable","#phrasing"],model:["#phrasing","!#interactive"]},canvas:{type:["#embedded","#flow","#palpable","#phrasing"],model:["#transparent","!#interactive","a","img[usemap]","button",'input[type="button"]','input[type="radio"]','input[type="checkbox"]',"select[multiple]","select[size>=1]","[tabindex]!#interactive"]},cite:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},code:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},data:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},datalist:{type:["#flow","#phrasing"],model:["#phrasing","#script-supporting","option"]},del:{type:["#flow","#phrasing"],model:["#transparent"]},details:{type:["#flow","#interactive","#palpable","#sectioning-root"],model:["#flow","summary"]},dfn:{type:["#flow","#palpable","#phrasing"],model:["#phrasing","!dfn"],implicitRole:"term"},dialog:{type:["#flow","#sectioning-root"],model:["#flow"],implicitRole:"dialog"},div:{type:["#flow","#palpable"],model:[{"dl > div":["dt","dd"]},{div:["#flow"]}]},dl:{type:["#flow"],model:["#script-supporting","dl","dt","div"]},em:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},embed:{type:["#embedded","#flow","#phrasing","#interactive","#palpable"],model:["#nothing"]},fieldset:{type:["#flow","#sectioning-root","#palpable"],model:["legend","#flow"]},figure:{type:["#flow","#sectioning-root","#palpable"],model:["#flow","figcaption"],implicitRole:"figure"},footer:{type:["#flow","#palpable"],model:["#flow","!header","!footer"],acceptableRoles:["contentinfo"],singleton:!0},form:{type:["#flow","#palpable"],model:["#flow","!form"]},h1:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h2:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h3:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h4:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h5:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},h6:{type:["#flow","#heading","#palpable"],model:["#phrasing"],implicitRole:"heading"},header:{type:["#flow","#palpable"],model:["#flow","!header","!footer"],acceptableRoles:["banner"],singleton:!0},hgroup:{type:["#flow","#heading","#palpable"],model:["h1","h2","h3","h4","h5","h6","#script-supporting"]},hr:{type:["#flow"],model:["#nothing"],implicitRole:"separator"},i:{type:["#flow","#palpable","#phrasing"],model:["#phrasing"]},iframe:{type:["#embedded","#flow","#phrasing","#interactive","#palpable"],model:["#nothing"]},img:{type:["#embedded","#flow","#phrasing",{"img[usemap]":["#interactive","#palpable"]}],model:["#nothing"]},input:{type:["#flow","#phrasing",{'input:not([type!="hidden"])':["#interactive","#palpable"]}],model:["#nothing"]},ins:{type:["#flow","#phrasing","#palpable"],model:["#transparent"]},kbd:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},label:{type:["#flow","#phrasing","#interactive","#palpable"],model:["#phrasing","!label"]},link:{type:["#metadata",{"body link":["#flow","#phrasing"]}],model:["#nothing"]},main:{type:["#flow","#palpable"],model:["#flow"],implicitRole:"main",singleton:!0},map:{type:["#flow","#phrasing","#palpable"],model:["#transparent"]},mark:{type:["#flow","#phrasing","#palpable"],model:["#transparent"]},math:{type:["#embedded","#flow","#phrasing","#palpable"],model:[]},menu:{type:["#flow",{":contains(> li)":["#palpable"]}],model:["#script-supporting","li"],implicitRole:"list"},meta:{type:["#metadata",{"meta[itemprop]":["#flow","#phrasing"]}],model:["#nothing"],names:["application-name","author","description","generator","keywords","referrer","theme-color"]},meter:{type:["#flow","#labelable","#phrasing","#palpable"],model:["#phrasing","!meter"]},nav:{type:["#flow","#sectioning-content","#palpable"],model:["#flow"],implicitRole:"navigation",acceptableRoles:["navigation"]},noscript:{type:["#metadata","#flow","#phrasing"],model:[{"head link":["style","meta","link"]},{":not(head link)":["#transparent","!noscript"]}]},object:{type:["#embedded","#flow","#phrasing",{"object[usemap]":["#interactive","#palpable"]}],model:["#transparent","param"]},ol:{type:["#flow",{":contains(> li)":["#palpable"]}],model:["#script-supporting","li"],implicitRole:"list"},output:{type:["#flow","#labelable","#phrasing","#palpable"],model:["#phrasing","!meter"]},p:{type:["#flow","#palpable"],model:["#phrasing"]},picture:{type:["#embedded","#flow","#phrasing"],model:["source","img","#acript-supporting"]},pre:{type:["#flow","#palpable"],model:["#phrasing"]},progress:{type:["#flow","#labelable","#phrasing","#palpable"],model:["#phrasing","!progress"]},q:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},ruby:{type:["#flow","#phrasing","#palpable"],model:["rp","rt"]},s:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},samp:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},script:{type:["#flow","#metadata","#phrasing","#acript-supporting"],model:[{"script[src]":[]}]},section:{type:["#flow","#sectioning-content","#palpable"],model:["#flow"],implicitRole:"region",acceptableRoles:["alert","alertdialog","application","contentinfo","dialog","document","log","main","marquee","region","search","status"]},select:{type:["#flow","#interactive","#labelable","#phrasing","#palpable"],model:["option","optgroup","#acript-supporting"]},slot:{type:["#flow","#phrasing"],model:["#transparent"]},small:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},span:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},strong:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},style:{type:["#metadata"],model:["#text"]},sub:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},sup:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},svg:{type:["#embedded","#flow","#phrasing","#palpable"],model:[]},table:{type:["#flow","#palpable"],model:["caption","colgroup","thead","tbody","tr","tfoot","#script-supporting"]},td:{type:["#sectioning-root"],model:["#flow"]},template:{type:["#metadata","#flow","#phrasing","#script-supporting"],model:["#nothing"]},textarea:{type:["#flow","#interactive","#labelable","#phrasing","#palpable"],model:["#text"]},time:{type:["#flow","#phrasing","#palpable"],model:[{"time[datetime]":["#phrasing"]},{":not(time[datetime])":["#text"]}]},title:{type:["#metadata"],model:["#text"],singleton:!0},u:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},ul:{type:["#flow",{":contains(> li)":["#palpable"]}],model:["#script-supporting","li"],implicitRole:"list"},var:{type:["#flow","#phrasing","#palpable"],model:["#phrasing"]},video:{type:["#embedded","#flow","#phrasing",{"video[controls]":["#interactive","#palpable"]}],model:["#transparent","!#media","track",{":not(video[src])":["source"]}]},wbr:{type:["#flow","#phrasing"],model:["#nothing"]}},aria:{banner:{type:["@banner"],singleton:!0},contentinfo:{type:["@contentinfo"],singleton:!0},complementary:{type:["@complementary"],singleton:!0},navigation:{type:["@navigation"],singleton:!0},list:{type:["@list"]},listitem:{type:["@listitem"]}},getContentModelFor(t){var e=t.nodeName.toLowerCase();return Jn.std[e]?Jn.expandRules(t,Jn.std[e].model||[]):[]},getCategoriesFor(t,e=!0){var r=t.nodeName.toLowerCase(),n=Jn.std[r]||Jn.aria[r]||{},i=[];if(e&&!t.nodeName.startsWith("#")&&(t.hasAttribute("role")||n.implicitRole))if(t.hasAttribute("role")){t.getAttribute("role").split(" ");t.getAttribute("role").split(" ").forEach(e=>{n&&n.acceptableRoles&&!n.acceptableRoles.includes(e)||(e=e.trim(),i.push("@"+e),Jn.aria[e]&&Jn.aria[e].type&&(i=i.concat(Jn.expandRules(t,Jn.aria[e].type||[]))))})}else n.implicitRole&&qn(i,"@"+n.implicitRole,r);else i=qn(Jn.expandRules(t,n.type||[]),r);return i},assertNodeBelongsInContentModel(t,e){var r,n=t instanceof HTMLElement?Jn.getContentModelFor(t):t,i=e instanceof HTMLElement?Jn.getCategoriesFor(e):e;return!Yn(n,["#nothing","#text"]).length&&(n.forEach(t=>{if(t.startsWith("!")){var e=t.substr(1);i.includes(e)&&(r=!1)}else!1!==r&&i.includes(t)&&(r=!0)}),r&&!0)},assertNodeBelongsInScopeAs(t,e,r=null){for(var n,i=Jn.getCategoriesFor(t),s=e;!n&&(s=s.parentNode);)Yn(i,Jn.getCategoriesFor(s)).length&&Jn.assertNodeBelongsInContentModel(s,r&&r.type||e)&&(n=s);return n===t},expandRules(t,e){var r=e.reduce((e,r)=>(wt(r)?t.matches(Object.keys(r)[0])&&(e=e.concat(Object.values(r)[0])):e.push(r),e),[]);return r.includes("#sectioning-root")&&r.push("#sectioning-content"),r}};var Xn,Qn=Jn;class Vn{constructor(t,e={}){Object.defineProperty(this,"params",{value:Un($n,e)}),Object.defineProperty(this,"descendantParams",{value:Kn(this.params)}),Object.defineProperty(this,"_el",{value:t,enumerable:!0}),Object.defineProperty(this,"el",{value:"#document"===t.nodeName?t.querySelector("html"):t,enumerable:!0});const r=(t.getAttribute($n.attrMap.superrole)||"").split(" ").map(t=>t.trim()).filter(t=>t);Object.defineProperty(this,"roles",{value:r,enumerable:!0});const n={};Pn.defineProperty(this,$n.treeProperty,{value:n,enumerable:!0}),Pn.trap(n,(t,e,r)=>r(e||this.getNodes(t.query)),{type:"get"});const i=(t.getAttribute($n.attrMap.hint)||"").split(" ").map(t=>t.trim()).filter(t=>t);Pn.init(this[$n.treeProperty],i)}getNodes(t){return xt(t).forEach(t=>{if(t in this[$n.treeProperty]&&this[$n.treeProperty][t]instanceof Vn)return this[$n.treeProperty][t];var e;((e=this.getExplicitNode(t))||(e=this.getImplicitNode(t)))&&this.addNode(t,e)}),mt(t)?_objFrom(t,this[$n.treeProperty]):this[$n.treeProperty][t]}getExplicitNode(t){if(this.roles&&this.roles.length){var e=$n.rolecase?[$n.rolecase]:this.roles,r=$n.context.CSS?$n.context.CSS.escape:t=>t;return e.reduce((e,n)=>{if(!e){var i,s,a="["+r($n.attrMap.superrole)+'~="'+n+'"]',o="["+r($n.attrMap.subrole)+'~="'+n+"-"+t+'"]';(s=(this.el.shadowRoot||this.el).querySelector(o))&&(this.el.shadowRoot&&(!s.parentNode.closest||!s.parentNode.closest(a))||!this.el.shadowRoot&&s.parentNode&&(i=s.parentNode.closest(a))&&i.isSameNode(this.el))&&(e=s)}return e},null)}}getImplicitNode(t){if(!_n(t)&&!t.match(/[^a-zA-Z0-9\-]/)){var e,r,n,i=[];Qn.aria[t]?i.push({schema:Qn.aria[t],selector:['[role="'+t+'"]']}):i.push({schema:Qn.std[t]||Qn.aria[t],selector:[t,'[role="'+t+'"]']}),e=Qn.std,r=(e,r)=>{r.implicitRole===t&&i.push({schema:r,selector:[e]})},n=void 0,yt(e)&&Object.keys(e).forEach((t,i)=>{!1!==n&&(n=r(_n(t)?parseFloat(t):t,e[t],i))});var s=null;return i.forEach(t=>{(this.el.shadowRoot||this.el).querySelectorAll(t.selector.join(",")).forEach(e=>{Qn.assertNodeBelongsInScopeAs(this.el,e,t.schema)&&(t.schema&&t.schema.singleton?s=e:s&&!mt(s)||(s=s||[]).push(e))}),s||!t.schema||t.schema.singleton||(s=[])}),s}}addNode(t,e){var r,n=this.params.factory||((t,e)=>new Vn(t,e));return mt(e)?r=e.map(t=>n(t,this.descendantParams)):(r=n(e,this.descendantParams),function t(e,r){if(e.parentNode&&$n.context.MutationObserver){var n=!1;new $n.context.MutationObserver(t=>{t.forEach(t=>{!n&&xt(t.removedNodes).includes(e)&&(n=!0,r())})}).observe(e.parentNode,{childList:!0}),t(e.parentNode,()=>{n||(n=!0,r())})}}(e,()=>{Pn.del(this[$n.treeProperty],t)})),Pn.set(this[$n.treeProperty],t,r),r}}class Zn extends Vn{constructor(t,e={}){super(t,e),this.params.factory=this.constructor.from,this.el.addEventListener("imported",t=>{this.params.factory(t.target),t.stopImmediatePropagation()});const r=function(t){var e={roadmap:t};return e.roadmap&&(e.namespace=Mn(e.roadmap,"//"),e.subnamespace=Ln(e.roadmap,"//"),e.subnamespace.startsWith("/")&&(e.subnamespace=Ln(e.subnamespace,"/")),e.subnamespace.endsWith("//")&&-1===e.subnamespace.indexOf("///")&&(e.subnamespace=e.subnamespace+e.namespace+"//")),e}(t.getAttribute($n.attrMap.namespace)||"");Object.defineProperty(this,"namespace",{value:r.namespace,enumerable:!0}),Pn.init(this,$n.bindingProperty),Pn.observe(this,$n.bindingProperty,(t,e,n)=>{if(r.subnamespace)return yt(t)&&t&&Pn.observe(t,e=>this.populate(t,r.subnamespace,$n.remodelCallback),{tags:["#mirror",this]}),yt(e)&&e&&Pn.unobserve(e,null,null,{tags:["#mirror",this]}),this.populate(t||{},r.subnamespace,$n.remodelCallback)});Pn.defineProperty(this,"directives",{value:[],enumerable:!0});var n={},i=this.params.env,s=new ne(this,i,n);this.descendantParams.env=new ne(n,i);if(Pn.observe(this.directives,(t,e,r)=>{Object.keys(t).forEach(r=>{var n;e[r]&&Pn.unobserve(this,null,null,{tags:["#directive",e[r]]}),t[r]&&(!1!==this.autoEval&&t[r].eval(s,Pn),Pn.observe(this,(n=t[r].meta.vars,Dn(n.map(t=>Mn(Mn(t.toString(),"["),"(")))),(e,n,i)=>{var a=t[r].eval(s,Pn);if(!1!==a)return a},{data:!1,tags:["#directive",t[r]]}))})}),this.dataBlockScript=xt(t.children).filter(t=>t.matches($n.tagMap.jsen))[0]){var a=Pn.get(this.directives,"push");Hn.parse((this.dataBlockScript.textContent||"").trim()).filter().forEach(t=>{this.autoEval=$n.initialRendering,a(t),this.autoEval=!0})}this.dataBlockScript&&$n.hideDataBlockScript&&this.dataBlockScript.remove()}get(t){return super.getNodes(t)}bind(t){if(!$n.bindingProperty)throw new Error("Data key has not been set!");return Pn.set(this,$n.bindingProperty,t)}unbind(){if(!$n.bindingProperty)throw new Error("Data key has not been set!");return Pn.set(this,$n.bindingProperty,null)}populate(t,e,r=null){var n=e.split("//");n[0].indexOf("[")>-1&&(n[0]='"'+n[0].replace(/\[/g,'" + ').replace(/\]/g,' + "')+'"');var i=Pn.keys(t),s=Pn.keys(this[$n.treeProperty]),a=new Pn.MutationEvent(this.el,{type:"remodelling"});return Dn(i.concat(s)).forEach(e=>{e=_n(e)?parseInt(e):e;var s,o=this.getNodes(e);if(Pn.has(t,e)){var l=Pn.get(t,e),c=!1;if(!o){var h=n.slice();h[0].indexOf('"')>-1&&(h[0]=Ar.parse(h[0]).eval(l)),h[0]+="/"+e;var p=Zn.import(h.join("//"));if(p){var u=function(t,e,r=!1,n=!1,i=!1){if(-1===t.indexOf(e))return r?[]:void 0;var s=!0===r?t.length-1:!1===r?1:r,a=i?t.lastIndexOf(e)+1:t.indexOf(e)+1,o=bt(e)?[]:t.slice(a,a+s);return n&&o.length<s&&o.length<t.length&&(An(n)&&!n(s-o.length)||(o=o.concat(t.slice(0,s-o.length)))),r?o:o[0]}(i,e+"",!0).reduce((t,e)=>t||this.getNodes(e),null);u?u.el.before(p):this.el.append(p),o=this.addNode(e,p),c=!0}}o&&(s=An(r)?r(o,l,e,c):o.bind(l))}else if(o){var d=()=>{o.destroy(),o.el.remove()};(s=An(r)?r(o,e):o.unbind())instanceof Promise?s.then(d).catch(d):d()}a.response(s)}),a}destroy(){this.directives.forEach(t=>Pn.unobserve(this,null,null,{tags:["#directive",t]})),this.dataBlockScript&&$n.hideDataBlockScript&&this.prepend(this.dataBlockScript)}static init(t,e=null){$n.context=t,function(){const t=$n.context;t.customElements.define($n.attrMap.bundle,class extends t.HTMLTemplateElement{attributeChangedCallback(t,e,r){r&&this.load()}load(){var e=this.getAttribute("src");e&&this.content.children.length?console.warn("A CHTML bundle must define only either a remote content or local content! Bundle ignored."):e&&(t.fetch?t.fetch(e).then(t=>t.ok?t.text():Promise.reject(t.statusText)).then(e=>{this.innerHTML=e,this.dispatchEvent(new t.Event("bundleloadsuccess",{bubbles:!0}))}).catch(r=>{console.warn("Error fetching the bundle at "+e+". ("+r+")"),this.dispatchEvent(new t.Event("bundleloaderror",{bubbles:!0}))}):setTimeout(()=>{this.dispatchEvent(new t.Event("bundleloadsuccess",{bubbles:!0}))},0))}static get observedAttributes(){return["src"]}},{extends:"template"})}(),Zn.contentLoadedPromise=new Promise(e=>{"complete"!==t.document.readyState?(t.document.addEventListener("DOMContentLoaded",e,!1),t.addEventListener("load",e,!1)):e()}),Zn.contentLoadedPromise.then(()=>{var t;if(e&&(t=e())){if(!mt(t))throw new Error("The bundlesCallback() function must return an array!");$n.bundles=function(t,e=null){var[r,n]=function(t,e){for(var r=[],n=[],i=t.length,s=0;s<i;s++)e(t[s])?r.push(t[s]):n.push(t[s]);return[r,n]}(t,t=>t instanceof Promise);const i=Promise.all(r).then(t=>{n.push(...t),r=[]});var s;e&&e(i);const a=[],o=new Wn(n,[],(t,e,n,i)=>{var l=e.join("/");if(a.includes(l))return o.find(e.slice(0,-1).join("/"));a.push(l),r.length&&!s&&(s=!0,console.warn("Remote bundles are still loading at this time! You should probabbly wrap bundle-dependent code within Chtml.ready(callback[, true/*waitForBundles*/])."));var c=$n.context.CSS?$n.context.CSS.escape:t=>t,h=xt(t.content.children).filter(t=>t.matches("["+c($n.attrMap.namespace)+'="'+l+'"]'))[0];if(h&&n){try{t.hasAttribute("norecompose")&&(t.getAttribute("norecompose")||"*").split(" ").map(t=>t.trim()),h=In(n,h)}catch(t){console.error("[Inheritance error at source #"+i+"]: "+t.message)}return a.pop(),h}return a.pop(),h?h.cloneNode(!0):n?n.cloneNode(!0):null});return o}(t,t=>{Zn.loadingBundlesPromise=t,setTimeout(()=>{!function(t){const e=$n.context;e.customElements.define($n.tagMap.import,class extends e.HTMLElement{shouldResolve(){return!this.hasAttribute("ondemand")&&!this.closest("template")&&!this.closest($n.tagMap.import+"[ondemand]")}connectedCallback(){this.processed=!1,this.shouldResolve()&&this.resolve()}attributeChangedCallback(t,e,r){this.shouldResolve()&&this.resolve()}resolve(){if(!this.parentNode)return!1;t.then(()=>{var t,r,n=$n.attrMap.namespace;if((r=Mn(this.getAttribute(n)||"","//"))&&r!==this.__namespace)if(this.__namespace=r,$n.bundles&&(t=$n.bundles.find(r))){var i=In(t,this);this.hasAttribute("shadow")?(this.parentNode.shadowRoot||this.parentNode.attachShadow({mode:"open"}),this.parentNode.shadowRoot.append(i),this.remove()):this.replaceWith(i),i.setAttribute("autoimported","true"),i.dispatchEvent(new e.Event("imported",{bubbles:!0}))}else this.innnerText='No element found on the namespace "'+r+'"!'})}static get observedAttributes(){return["ondemand",$n.attrMap.namespace]}})}(t)},0)})}})}static ready(t,e=!0){Zn.contentLoadedPromise.then(()=>{e?Zn.loadingBundlesPromise.then(t):t()})}static from(t,e={},r=Zn){var n=t;if(vt(t)&&!t.trim().startsWith("<")&&-1!==t.indexOf("/")){if(!(n=Zn.import(Mn(t,"//"))))throw new Error('No element found on the namespace "'+t+'"!')}else{if(vt(t)&&!(n=function(t,e=null){if(e=e||$n.context.document){var r;if(t.trim().startsWith("<")){var n=e.createElement("div");n.innerHtml=t,r=n.firstChild}else r=e.querySelector(t);return r}}(t)))throw new Error('Could not resolve the string "'+t+'" to an element!');var i,s,a,o=n.matches($n.tagMap.import);if((i=Mn(n.getAttribute($n.attrMap.namespace)||"","//"))&&(o&&(s=i)||(s=Rn(i,"/"))&&s.indexOf("/")>-1)&&(a=Zn.import(s))){var l=n;n=In(a,n),o&&l.replaceWith(n)}else i&&console.warn("Namespace resolution failed: "+i)}return new r(n,e)}static import(t){if($n.bundles)return $n.bundles.find(t)}}Xn=window,Zn.init(Xn,()=>xt(Xn.document.querySelectorAll($n.tagMap.bundle)).reverse().map(t=>t.hasAttribute("src")&&!t.content.children.length?new Promise(e=>{t.addEventListener("bundleloadsuccess",()=>e(t)),t.addEventListener("bundleloaderror",()=>e(t))}):t));var Gn=Zn;$n.pathnaming={"/":["name","id"]};var ti=$n;class ei{constructor(){var t=(t,e=null)=>(t=ut(t,ri,!1),e?gt(t,"state",e):t),e=(t,r)=>et(t)&&et(r)?e(Object.keys(t),Object.keys(r))&&e(Object.values(t),Object.values(r)):G(t)&&G(r)?t.length===r.length&&t.reduce((t,e,n)=>t&&e===r[n],!0):t===r;Pn.trap(this,(t,e,r)=>{if("href"===t.query&&tt(ri,t.related).length){var n=ei.parseUrl(t.value);return Pn.set(this,n),!1}return r()},{type:"set"}),Pn.observe(this,["search","searchmap","pathname","pathmap","pathsplit","href"],(t,r,n)=>{var[i,s,a,o,l,c]=t,[h,p,u,d,f,g]=r;if(!(n.originatingCreated&&n.originatingCreated.indexOf("searchmap")>-1)){var m={},v=!n.originatingFields.filter(t=>t.startsWith("searchmap.")).length&&e(s,p);i!==h||v||(m.search=ei.toSearch(s),m.search===this.search&&delete m.search),i!==h&&v&&(m.searchmap=ei.toSearchmap(i),e(m.searchmap,this.searchmap)&&delete m.searchmap);var b=!n.originatingFields.filter(t=>t.startsWith("pathmap.")).length&&e(o,d),y=!n.originatingFields.filter(t=>t.startsWith("pathsplit.")).length&&e(l,f);return a!==u||b&&y||(m.pathname=ei.toPathname(y?o:l,this.pathname),m.pathname===this.pathname&&delete m.pathname),!b||a===u&&y||(m.pathmap=ei.toPathmap(a!==u?a:l),e(m.pathmap,this.pathmap)&&delete m.pathmap),!y||a===u&&b||(m.pathsplit=ei.toPathsplit(a!==u?a:o,this.pathname),e(m.pathsplit,this.pathsplit)&&delete m.pathsplit),c!==g||st(m)?st(m)&&c!==g&&(m=ei.parseUrl(c)):(m.href=this.origin,m.href+=m.pathname||a,m.href+=m.search||i||"",m.href===this.href&&delete m.href),st(m)?void 0:Pn.set(this,m,!0)}},{observeDown:!0}),Pn.observe(this,"href",t=>{t===document.location.href?window.history.replaceState(this.state,"",t):window.history.pushState(this.state,"",t)}),window.addEventListener("popstate",e=>{setTimeout(()=>{Pn.set(this,t(document.location,window.history.state))},0)}),window.addEventListener("click",t=>{var e,r;if((!t.target.origin||t.target.origin===this.origin)&&(t.preventDefault(),(e=t.target.closest("a"))&&(r=e.href))){var n=this.route(r,null,e.getAttribute("target"));n&&n.defaultPrevented&&t.preventDefault()}}),this.href||Pn.set(this,t(document.location)),!this.state&&window.history&&Pn.set(this,"state",window.history.state)}route(t,e=null,r=null){var n={href:t};return arguments.length>1&&(n.request=e),arguments.length>2&&(n.target=r),Pn.set(this,n,!0)}update(t){return window.history.replaceState(t,"",document.location),Pn.set(this,"state",t,!0)}forward(){window.history.forward()}back(){window.history.back()}go(t){window.history.go(t)}matches(t){var e=ei.parseUrl(t);return(this.href+"/").startsWith(e.href.endsWith("/")?e.href:e.href+"/")}static parseUrl(t){var e=document.createElement("a");return e.href=t,ri.reduce((t,r)=>gt(t,r,e[r]),{})}static toSearchmap(t){return(t.startsWith("?")?t.substr(1):t).split("&").filter(t=>t).map(t=>t.split("=").map(t=>t.trim())).reduce((t,e)=>gt(t,e[0],e[1]),{})}static toSearch(t){return Object.keys(t).length?"?"+Object.keys(t).map(e=>e+"="+t[e]).join("&"):""}static toPathmap(t){var e=V(t)?t.split("/").filter(t=>t):t,r=V(t)?t:"/"+e.join("/")+"/",n=Z(Object.keys(ti.pathnaming),"desc").reduce((t,e)=>t||((r+"/").startsWith("/"===e?e:"/"+e.split("/").filter(t=>t).join("/")+"/")?ti.pathnaming[e]:null),null);return n?e.reduce((t,e,r)=>n[r]?gt(t,n[r],e):t,{}):{}}static toPathsplit(t,e=null){if(V(t))return t.split("/").filter(t=>t);if(!e)throw new Error('A "referenceUrl" must be given to properly determine a path-naming scheme.');var r=Z(Object.keys(ti.pathnaming),"desc").reduce((t,r)=>t||((e+"/").startsWith("/"===r?r:"/"+r.split("/").filter(t=>t).join("/")+"/")?ti.pathnaming[r]:null),null);if(tt(Object.keys(t),r).length)throw new Error("The given pathmap contains keys ("+Object.keys(t).join(", ")+") not recognized by the implied path-naming scheme ("+r.join(", ")+")");return r?r.map(e=>t[e]).filter(t=>t):[]}static toPathname(t,e=null){if(et(t)){if(!e)throw new Error('A "referenceUrl" must be given to properly determine a path-naming scheme.');t=ei.toPathsplit(t,e)}return"/"+t.join("/")+"/"}}const ri=["hash","host","hostname","href","origin","pathname","port","protocol","search"];var ni=function(t,e,r=!1){for(var n=t.indexOf(e);n>-1&&(r||!1===r);)t.splice(n,1),r>0&&r--,n=t.indexOf(e);return t};function ii(t,e=document,r=!1){var n,i=r?"querySelectorAll":"querySelector";try{n=e[i](t)}catch(r){try{n=e[i](t.replace(/\:is\(/g,":matches("))}catch(r){try{n=e[i](t.replace(/\:is\(/g,":-webkit-any("))}catch(r){try{n=e[i](t.replace(/\:is\(/g,":-moz-any("))}catch(t){throw t}}}}return n}Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(t){for(var e=(this.document||this.ownerDocument).querySelectorAll(t),r=e.length;--r>=0&&e.item(r)!==this;);return r>-1});var si=function(t,e){return"string"!=typeof t?t:t.replace(/\w\S*/g,(function(t){return t.charAt(0).toUpperCase()+(void 0!==typeof e&&e?t.substr(1).toLowerCase():t.substr(1))}))},ai=function(t,e){return t=si(t.replace(/-/g," ")).replace(/ /g,""),e?t:t[0].toLowerCase()+t.substr(1)},oi=function(t,e){var r=void 0;return it(t)&&Object.keys(t).forEach((n,i)=>{!1!==r&&(r=e(lt(n)?parseFloat(n):n,t[n],i))}),r};const li=[];var ci=function(t,e=!0){return G(t)?t:!e&&et(t)?[t]:!1!==t&&0!==t&&st(t)?[]:function(t){return!V(t)&&!nt(t.length)}(t)?Array.prototype.slice.call(t):et(t)?Object.values(t):[t]},hi=function(t,...e){return e.forEach(e=>ni(t,e)),t},pi=function(t){return t.filter((t,e,r)=>r.indexOf(t)===e)},ui=function(t,e,r=null){return G(e)?t.filter(t=>r?e.filter(e=>r(t,e)).length:-1!==e.indexOf(t)):[]},di=function(t,e,r=null,n=null){if(2===arguments.length){if(V(e))return t.getAttribute(e);if(G(e)){var i={};return e.forEach(e=>{i[e]=t.getAttribute(e)}),i}}var s=e;return et(s)?n=r:s=dt(e,r),oi(s,(r,i)=>{if(arguments.length>3||et(e)&&arguments.length>2){var s=t.getAttribute(r),a=s?s.split(" ").map(t=>t.trim()).filter(t=>t):[],o=V(i)?i.trim().split(" ").map(t=>t.trim()).filter(t=>t):ci(i);!n&&ui(a,o).length?t.setAttribute(r,hi(a,...o).join(" ")):n&&tt(a,o).length&&t.setAttribute(r,pi(a.concat(o)).join(" "))}else!1===i?t.removeAttribute(r):t.setAttribute(r,!0===i?"true":i)}),t};const fi={readCallbacks:[],writeCallbacks:[],_run:function(){requestAnimationFrame(()=>{fi.readCallbacks.forEach((t,e)=>{t&&!t()&&(fi.readCallbacks[e]=null)}),fi.writeCallbacks.forEach((t,e)=>{t&&!t()&&(fi.writeCallbacks[e]=null)}),fi._run()})},onread:function(t,e=!1){if(e)return new Promise((e,r)=>{fi.readCallbacks.push(()=>{t(e,r)})});fi.readCallbacks.push(t)},onwrite:function(t,e=!1){if(e)return new Promise((e,r)=>{fi.writeCallbacks.push(()=>{t(e,r)})});fi.writeCallbacks.push(t)},cycle:function(t,e,r){fi.onread(()=>{var n=t(r);if(n){var i=n=>{fi.onwrite(()=>{var i=e(n,r);if(i){var s=r=>{fi.cycle(t,e,r)};i instanceof window.Promise?i.then(s):s()}})};n instanceof window.Promise?n.then(i):i()}})}};fi._run();var gi,mi,vi=fi,bi=function(t,e=null){return arguments.length>1?(V(e)?t.innerHTML=e:(t.innerHTML="",nt(e)||t.append(e)),t):t.innerHTML},yi=function(t,e=null){return arguments.length>1?(t.innerText=nt(e)?"":e,t):t.innerText},wi=function(t,e){return t.append(nt(e)?"":e),t},xi=function(t,e){return t.prepend(nt(e)?"":e),t},Ei=function(t,e){return void 0===t?"":t.split(/(?=[A-Z])/).join(e||" ")},Oi=(gi=window.getComputedStyle(document.documentElement,""),{prefix:mi=(Array.prototype.slice.call(gi).join("").match(/-(moz|webkit|ms)-/)||""===gi.Olink&&["","o"])[1],css:"-"+mi+"-",api:"WebKit|Moz|Ms|O".match(new RegExp("("+mi+")","i"))[1]}),ji=function(t){var e=ai(t,!0);if(Oi.api+e in document.body.style)return Oi.css+Ei(t,"-")},ki=function(t,e,r){var n={},i=ci(t);return oi(i,(t,s)=>{((t,s)=>{var a=Ei(s,"-").toLowerCase();if("auto"===r)n[a]=e(ji(a)||a,i[t]);else{if(r){var o=ji(a);o&&(n[o]=e(o,i[t]))}n[a]=e(a,i[t])}})(t,s)}),G(t)||r||"size"===t||"offsets"===t?n:n[t]};const Si=class{constructor(t){oi(t,(t,e)=>{["rotate","scale","skew","translate"].includes(t)&&(this[t]=G(e)?new Si[t](...e):new Si[t](e))})}toString(){return["rotate","scale","skew","translate"].reduce((t,e)=>t+(this[e]&&this[e].length?" "+this[e]:""),"").trim()}static parse(t){var e=function(t){return Math.round(100*t)/100},r=function(t){var r=180*t/Math.PI;return e(r)},n=function(t){var e=[];if(window.WebKitCSSMatrix)return[(e=new window.WebKitCSSMatrix(t)).a,e.b,e.c,e.d,e.e,e.f];for(var r,n=/[\d\.\-]+/g;r=n.exec(t);)e.push(+r);return e}(t),i=n[0],s=n[1],a=n[2],o=n[3];if(i*o==s*a)throw new Error("Dramatic.parseTransform: matrix is singular");var l=Math.sqrt(i*i+s*s),c=(i/=l)*a+(s/=l)*o;a-=i*c,o-=s*c;var h=Math.sqrt(a*a+o*o);return c/=h,i*(o/=h)<s*(a/=h)&&(i=-i,s=-s,c=-c,l=-l),new Si({translate:[n[4],n[5]],scale:[e(l),e(h)],rotate:r(Math.atan2(s,i)),skew:r(Math.atan(c))})}};Si.rotate=class extends Array{toString(){return"rotate("+this.map(t=>lt(t)?t+"deg":t).join(", ")+")"}},Si.scale=class extends Array{toString(){return"scale("+this.join(", ")+")"}},Si.skew=class extends Array{toString(){return"skew("+this.map(t=>lt(t)?t+"deg":t).join(", ")+")"}},Si.translate=class extends Array{toString(){return"translate("+this.map(t=>lt(t)?t+"px":t).join(", ")+")"}};var Ti=Si,Ci=function(t,e,r=null){var n=window.getComputedStyle(t,r);return ki(e,(t,e)=>{var r=n.getPropertyValue(ji(t)||t);return"width"!==t&&"height"!==t||""!==r||(r="0px"),"transform"===t&&(r=Ti.parse(r)),r},!1)},Fi=["width","height","top","left","right","bottom","padding","padding-top","padding-left","padding-right","padding-bottom","margin","margin-top","margin-left","margin-right","margin-bottom","border-width","border-top-width","border-left-width","border-right-width","border-bottom-width","outline-width","outline-top-width","outline-left-width","outline-right-width","outline-bottom-width"],Pi=function(t,e,r=null){e=V(e)?dt(e,r):e;var n={inset:["top","right","bottom","left"],margin:["top","right","bottom","left"],padding:["top","right","bottom","left"]};return ki(Object.keys(e),(r,i)=>{var s=e[i];oi(n,(t,e)=>{r===t&&(et(s)&&(s=e.map(t=>s[t]).filter(t=>!nt(t))),G(s)&&(s=s.join(" ")))}),"transform"!==r||!et(s)||s instanceof Ti||(s=new Ti(s).toString()),t.style[r]=Fi.includes(r)&&lt(s)?s+"px":s},"auto"),t},$i=function(t,e,r=null){return vi.onread((n,i)=>{try{n(ot(e)?e(t):Ci(t,e,r))}catch(t){i(t)}},!0)},Ai=function(t,e,r=null){return vi.onwrite((n,i)=>{try{n(ot(e)?e(t):Pi(t,e,r))}catch(t){i(t)}},!0)},_i=function(t,e,r="auto"){var n=t.getAttribute("style");return"all"===e&&(e=n.split(";").map(t=>t.split(":")[0])),ki(e,t=>(new RegExp(";[ ]*?"+t+":([^;]+);?","g").exec(";"+n)||["",""])[1].trim(),r)},Di=function(t,e,r=null,n=null){var i=et(e)?Object.keys(e):e;n=et(e)?r:n;var s=_i(t,i);return Ai(t,e,r).then(()=>$i(t,n||i).then(e=>Ai(t,s).then(()=>e)))};var Mi=class{constructor(t,e,r,n){this.el=t,this.params=ci(e),this.readCallback=r,this.writeCallback=n,this.$savepoints=[]}save(){var t=this.readCallback(this.el,this.params);return t instanceof Promise?t.then(t=>this.$savepoints.push(t)):et(t)?this.$savepoints.push(t):void 0}commit(t=0){for(var e=0;e<=t&&t<this.$savepoints.length;e++)this.$savepoints[e]=null;return this}rollback(t=0){if(!lt(t))throw new Error("A valid transaction ID transaction must be provided!");var e=e=>{var r=this.$savepoints.splice(t),n=r.shift();if(!n)return{};var i=r.pop(),s={};return this.params.forEach(t=>{i&&e[t]!==i[t]||e[t]!==n[t]&&(s[t]=n[t])}),s},r=this.readCallback(this.el,this.params);return r instanceof Promise?r.then(t=>this.writeCallback(this.el,e(t))):this.writeCallback(this.el,e(r))}depth(){return this.$savepoints.length}},Ri=function(){var t=window.getComputedStyle(document.documentElement,""),e=(Array.prototype.slice.call(t).join("").match(/-(moz|webkit|ms)-/)||""===t.Olink&&["","o"])[1];return{prefix:e,css:"-"+e+"-",api:"WebKit|Moz|Ms|O".match(new RegExp("("+e+")","i"))[1]}}(),Ni=function(t){var e=ai(t,!0);if(Ri.api+e in document.body.style)return Ri.css+Ei(t,"-")},Ii=function(t,e,r){var n={},i=ci(t);return oi(i,(t,s)=>{((t,s)=>{var a=Ei(s,"-").toLowerCase();if("auto"===r)n[a]=e(Ni(a)||a,i[t]);else{if(r){var o=Ni(a);o&&(n[o]=e(o,i[t]))}n[a]=e(a,i[t])}})(t,s)}),G(t)||r||"size"===t||"offsets"===t?n:n[t]};const Wi=class{constructor(t){oi(t,(t,e)=>{["rotate","scale","skew","translate"].includes(t)&&(this[t]=G(e)?new Wi[t](...e):new Wi[t](e))})}toString(){return["rotate","scale","skew","translate"].reduce((t,e)=>t+(this[e]&&this[e].length?" "+this[e]:""),"").trim()}static parse(t){var e=function(t){return Math.round(100*t)/100},r=function(t){var r=180*t/Math.PI;return e(r)},n=function(t){var e=[];if(window.WebKitCSSMatrix)return[(e=new window.WebKitCSSMatrix(t)).a,e.b,e.c,e.d,e.e,e.f];for(var r,n=/[\d\.\-]+/g;r=n.exec(t);)e.push(+r);return e}(t),i=n[0],s=n[1],a=n[2],o=n[3];if(i*o==s*a)throw new Error("Dramatic.parseTransform: matrix is singular");var l=Math.sqrt(i*i+s*s),c=(i/=l)*a+(s/=l)*o;a-=i*c,o-=s*c;var h=Math.sqrt(a*a+o*o);return c/=h,i*(o/=h)<s*(a/=h)&&(i=-i,s=-s,c=-c,l=-l),new Wi({translate:[n[4],n[5]],scale:[e(l),e(h)],rotate:r(Math.atan2(s,i)),skew:r(Math.atan(c))})}};Wi.rotate=class extends Array{toString(){return"rotate("+this.map(t=>lt(t)?t+"deg":t).join(", ")+")"}},Wi.scale=class extends Array{toString(){return"scale("+this.join(", ")+")"}},Wi.skew=class extends Array{toString(){return"skew("+this.map(t=>lt(t)?t+"deg":t).join(", ")+")"}},Wi.translate=class extends Array{toString(){return"translate("+this.map(t=>lt(t)?t+"px":t).join(", ")+")"}};var Li=Wi,qi=function(t,e,r=null){var n=window.getComputedStyle(t,r);return Ii(e,(t,e)=>{var r=n.getPropertyValue(Ni(t)||t);return"width"!==t&&"height"!==t||""!==r||(r="0px"),"transform"===t&&(r=Li.parse(r)),r},!1)},zi=function(t,e){var r={left:t.left-e.left,top:t.top-e.top,right:e.left+e.width-(t.left+t.width),bottom:e.top+e.height-(t.top+t.height)},n=Math.max(t.left,e.left),i=Math.min(t.left+t.width,e.left+e.width),s=Math.max(t.top,e.top),a=Math.min(t.top+t.height,e.top+e.height);return r.width=i>n?i-n:0,r.height=a>s?a-s:0,r.rect1=t,r.rect2=e,r.delta=function(t,e,r=!1){var n={};return n.x=e.left+e.width/2-(t.left+t.width/2),n.y=e.top+e.height/2-(t.top+t.height/2),n.z=Math.sqrt(Math.pow(n.x,2)+Math.pow(n.y,2)),r&&(n=ft(n,deltaAngle(n))),n}(t,e),r},Bi=function(t,e){return t.reduce((t,r)=>t||e(r),!1)};const Ui=function(t,e=!0,r=null){var n=["width","height","top","right","bottom","left"],i=t=>t instanceof HTMLElement||t instanceof HTMLDocument,s={};if(t!==window&&et(t)&&Bi(["clientX","clientY","offsetX","offsetY","pageX","pageY","screenX","screenY"],e=>e in t))s=!1!==e?{width:0,height:0}:{},r===window||i(r)?(s.left=t.clientX,s.top=t.clientY):!0===r?(s.left=t.offsetX,s.top=t.offsetY):!1!==r&&(s.left=t.pageX,s.top=t.pageY);else if(t===window)s=!1!==e?{width:window.innerWidth,height:window.innerHeight}:{},r===window||!0===r||i(r)?(s.left=0,s.top=0):!1!==r&&(s.left=window.pageXOffset,s.top=window.pageYOffset);else if(i(t))delete(s=t.getBoundingClientRect().toJSON()).x,delete s.y,delete s.right,delete s.bottom,!1===e&&(delete s.width,delete s.height),!0===r?r=t.offsetParent:!1===r?(delete s.left,delete s.top):r===window||i(r)||(s.left+=window.pageXOffset,s.top+=window.pageYOffset);else{if(!et(t)||!Bi(n,e=>e in t))throw new Error("Unknown object type!");s=ut(t,n)}if(i(r)){var a=Ui(r,!1,window);s.left-=a.left,s.top-=a.top}return s};var Hi=Ui,Ki=function(t,e,r={}){var n=zi(Hi(r.using||t),e),i={x:"width",y:"height"},s={x:"left",y:"top"},a={x:"right",y:"bottom"},o={},l={};return["x","y"].forEach(t=>{if(!1!==r[t]){var e,c,h,p,u,d=n.rect1[i[t]];switch(l[t]=(e=r[t]||"",c=new RegExp("(before|after|start|end|center)","g"),h=new RegExp("[-+][0-9]+(%)?","g"),{keyword:(e.match(c)||[])[0],predicates:e.match(h)}),l[t].keyword){case"before":o[t]=-(n[s[t]]+d);break;case"after":o[t]=n[a[t]]+d;break;case"start":o[t]=-n[s[t]];break;case"end":o[t]=n[a[t]];break;default:o[t]=n.delta[t]}l[t].predicates&&(o[t]+=(p=l[t].predicates,u=d,p.reduce((t,e)=>t+(e.endsWith("%")?parseFloat(e)/100*u:parseFloat(e)),0)))}}),o.alignment=l,o.intersection=n,o},Yi=function(t,e,r={}){var n=Ki(t,Hi(e),r),i={from:new Li({translate:[]}),to:new Li({translate:[]}),current:{from:new Li({translate:[]}),to:new Li({translate:[]}),progress:{}}},s=qi(t,"transform");return["x","y"].forEach((t,e)=>{t in n?(i.from.translate[e]=0,i.to.translate[e]=n[t]+s.translate[e],i.current.from.translate[e]=s.translate[e],i.current.to.translate[e]=n[t],i.current.progress[t]=Math.abs(s.translate[e]/(n[t]+s.translate[e]))):(i.from.translate[e]=s.translate[e],i.to.translate[e]=s.translate[e],i.current.from.translate[e]=s.translate[e],i.current.to.translate[e]=s.translate[e],i.current.progress[t]=0)}),i},Ji=function(t,e,r={}){var n=Ki(t,Hi(e),r),i={x:"left",y:"top"},s={x:"right",y:"bottom"},a=ui(["x","y"],Object.keys(n)).reduce((t,e)=>{switch(n.alignment[e].keyword){case"before":return r.alternateAnchors?gt(t,i[e],n[e]):gt(t,s[e],-n[e]);case"after":return r.alternateAnchors?gt(t,s[e],-n[e]):gt(t,i[e],n[e]);case"end":return gt(t,s[e],-n[e]);default:return gt(t,i[e],n[e])}},{}),o={from:{},to:{},current:{from:{},to:{},progress:{}}},l=function(t,e=["left","top","right","bottom"]){var r={right:"left",left:"right",bottom:"top",top:"bottom"},n=qi(t,e.concat("position")),i=null;return e.forEach(e=>{"auto"===n[e]?"relative"===n.position?n[e]=-parseFloat(n[r[e]]):"fixed"===n.position?(i=i||zi(Hi(t),Hi(window)),n[e]=i[e]):"absolute"===n.position&&(i=i||zi(Hi(t),Hi(t.offsetParent)),n[e]=i[e]):n[e]=parseFloat(n[e])}),delete n.position,n}(t,Object.keys(a));return["left","right","top","bottom"].forEach(t=>{t in a?(o.from[t]=0,o.to[t]=a[t]+l[t],o.current.from[t]=l[t],o.current.to[t]=a[t],o.current.progress[t]=Math.abs(l[t]/(a[t]+l[t]))):(o.from[t]="auto",o.to[t]="auto",o.current.from[t]="auto",o.current.to[t]="auto")}),o},Xi=function(t,e,r={}){var n=r.scrollAnchor||function(t){var e=window.getComputedStyle(t),r="absolute"===e.position,n=/(auto|scroll)/;if("fixed"!==e.position)for(var i=t;i=i.parentElement;)if(e=window.getComputedStyle(i),(!r||"static"!==e.position)&&n.test(e.overflow+e.overflowY+e.overflowX))return i;return document.body}(t);if(function(t){return t===window?t.pageYOffset||t.pageYOffset:t.scrollHeight>t.clientHeight}(n=n===document.body?window:n)){var i=Ki(t,Hi(e),r),s={scrollLeft:n[n===window?"pageXOffset":"scrollLeft"],scrollTop:n[n===window?"pageYOffset":"scrollTop"]};return["x","y"].forEach((t,e)=>{var r="x"===t?"scrollLeft":"scrollTop";t in i?($coordsFormatted.from[r]=0,$coordsFormatted.to[r]=i[t]+s[r],$coordsFormatted.current.from[r]=s[r],$coordsFormatted.current.to[r]=i[t],$coordsFormatted.current.progress[t]=Math.abs(s[r]/(i[t]+s[r]))):($coordsFormatted.from[r]=s[r],$coordsFormatted.to[r]=s[r],$coordsFormatted.current.from[r]=s[r],$coordsFormatted.current.to[r]=s[r],$coordsFormatted.current.progress[t]=0)}),$coordsFormatted}},Qi=function(t){return"number"==typeof t},Vi=function(t,e=[]){return pt([{},t],(t,r,n)=>{if(!ot(n[t]))return ot(e)?e(t):!G(e)||!e.length||e.indexOf(t)>-1},!1,!1,!1)},Zi=function(t){var e={};return oi(t.split(";"),(t,r)=>{r=r.split(":"),e[r[0].trim()]=r[1].trim()}),e},Gi=function(t,e,r=!0){var n=G(t)?t.join("|"):t;if(!e&&es[n])return es[n];var i=[];return function(t,e){var r=document.styleSheets,n=function(e){try{for(var r=0;r<e.cssRules.length;r++){var n=e.cssRules[r];if(!0===t(n))return!0}}catch(t){}};if(e){for(var i=r.length-1;i>=0;i--)if(!0===n(r[i]))return!0}else for(i=0;i<r.length;i++)if(!0===n(r[i]))return!0}(e=>{if((e.type===window.CSSRule.KEYFRAMES_RULE||e.type===window.CSSRule[Oi.api.toUpperCase()+"_KEYFRAMES_RULE"])&&(G(t)?t:[t]).indexOf(e.name)>-1)return i=i.concat(i,function(t){for(var e=[],n=0;n<t.cssRules.length;n++){var i=t.cssRules[n],s=Zi(i.cssText.replace(i.keyText,"").replace("{","").replace("}","").trim()),a=(i.keyText||" ").split(",").map(t=>"from"===t?0:"to"===t?1:parseInt(t)/100);if(r)for(ts(s,["animation-","transition-"]);a.length;){var o=Vi(s);o.offset=a.shift(),e.push(o)}else s.offset=a.length>1?a:a[0],e.push(s)}return e.sort((t,e)=>t.offset===e.offset?0:t.offset>e.offset?1:-1)}(e)),!0},!0),es[n]=i,i};const ts=function(t,e,r=""){G(r)?r.forEach(e=>ts(t,e)):(t[r+"timing-function"]&&(t.easing=t[r+"timing-function"],delete t[r+"timing-function"]),t[r+"fill-mode"]&&(t.fill=t[r+"fill-mode"],delete t[r+"fill-mode"]),t[r+"iteration-count"]&&(t.iterations=t[r+"iteration-count"],delete t[r+"iteration-count"],"infinite"===t.iterations&&(t.iterations=1/0)))},es={};const rs=class{constructor(t,e,r={}){this.el=t,this.$={readyCallbacks:[],finishCallbacks:[],cancelCallbacks:[],params:r},r.fill=r.fill||"both","duration"in r||(r.duration=400),r.easing&&-1===["ease-in","ease-out","ease-in-out"].indexOf(r.easing)&&-1===r.easing.indexOf("(")&&(r.easing=function(t){t=t.indexOf("-")?t:Ei(t,"-");return window.getComputedStyle(document.body).getPropertyValue("--"+t)}(r.easing)||r.easing);var n={inset:["top","right","bottom","left"],margin:["top","right","bottom","left"],padding:["top","right","bottom","left"]};const i=t=>{t=t.slice();var e={},i={};oi(t,(t,r)=>{oi(n,(t,e)=>{r[t]&&(et(r[t])&&(r[t]=e.map(e=>r[t][e]).filter(t=>!nt(t))),G(r[t])&&(r[t]=r[t].join(" ")))}),!r.transform||!et(r.transform)||r.transform instanceof Ti||(r.transform=new Ti(r.transform).toString()),hi(Object.keys(r),"offset","easing").forEach(t=>{Fi.includes(t)&&lt(r[t])&&(r[t]+="px"),e[t]=void 0===e[t]?r[t]:e[t],i[t]=r[t]})});try{var s=this.el.animate(t,r)}catch(t){return void(this.$.error=t)}r.reverse&&s.reverse(),s.effect||(s.effect={}),s.effect.duration||(s.effect.duration=r.duration),s.onfinish=()=>{r.cancelForCss&&(s.cancel(),"forwards"!==r.fill&&"both"!==r.fill||Pi(this.el,i)),this.$.finishCallbacks.forEach(t=>{t(this.el)})},s.oncancel=()=>{this.$.cancelCallbacks.forEach(t=>{t(this.el)})},this.$.anim=s,this.$.firstFrame=e,this.$.lastFrame=i,this.$.params=r,this.$.readyCallbacks.length&&this.$.readyCallbacks.forEach(t=>t(s,r,e,i))};ot(e)?e(t,i):rs.createCallback(t,e,i,t=>{this.$.error=t})}get anim(){return this.$.anim}ready(t,e){this.$.error?e&&e(this.$.error):this.$.anim?t(this.$.anim,this.$.params,this.$.firstFrame,this.$.lastFrame):this.$.readyCallbacks.push(t)}onfinish(t){if(!ot(t))throw new Error("Onfinish() accepts only a function.");return this.$.finishCallbacks.push(t),this}oncancel(t){if(!ot(t))throw new Error("Oncancel() accepts only a function.");return this.$.cancelCallbacks.push(t),this}progress(){return this.$.anim?this.$.anim.currentTime/this.$.anim.effect.duration:0}seek(t){if(!Qi(t))throw new Error("Seek() accepts only a numeric value.");return this.ready((e,r)=>{e.currentTime=Math.min(t*r.duration,r.duration)}),this}reverse(){return this.ready(t=>t.reverse()),this}play(){return new Promise((t,e)=>{this.ready(r=>{r.play(),this.onfinish(()=>t(this)),this.oncancel(()=>e(this))},e)})}pause(){return this.ready(t=>t.pause()),this}finish(){return this.ready(t=>t.finish()),this}cancel(){return this.ready(t=>t.cancel()),this}static createCallback(t,e,r,n){var i=et(e)&&!Object.values(e).filter(t=>G(t)).length,s=G(e)&&e.length>1&&st(e[0]);if(i||s)vi.onread(()=>{s?(e.shift(),rs.createCallback(t,[Ci(t,Object.keys(e[0])),...e],r,n)):rs.createCallback(t,[Ci(t,Object.keys(e)),e],r,n)});else{if(V(e)){var a=e;!(e=Gi(a)).length&&n&&n('Animation name "'+a+'" not found in any stylesheet!')}if(G(e)){var o=[];if(oi(e,(t,e)=>{"auto"===e.height&&ct(o,t),"auto"===e.width&&ct(o,t)}),o.length)return void Di(t,{width:"auto",height:"auto"},t=>t.getBoundingClientRect()).then(t=>{o.forEach(r=>{"auto"===e[r].width&&(e[r].width=t.width+"px"),"auto"===e[r].height&&(e[r].height=t.height+"px")}),r(e)})}r(e)}}};var ns=rs;const is=function(t,e,r=!1){var n=null,i=t;G(t)||(n=Object.keys(t),i=Object.values(t));var s=void 0,a=i.reduce((t,n)=>{if(void 0===s){if(e(n,t))return n;if(r&&(it(n)||ot(n))&&void 0!==(s=is(n,e,r)))return n}return t},void 0);if(void 0!==a){var o=n?n[i.indexOf(a)]:i.indexOf(a);return void 0!==s?[o].concat(ci(s)):o}};var ss=is;const as={},os={setup(t,e,r,n){var i=!0,s=os.events.map((t,e)=>{var r=n.get(t);return r||(i=!1,r=new Hammer.Tap({event:t,taps:os.events.length-e}),n.add(r)),r});if(!i){for(var a,o=s.slice();(a=o.shift())&&o.length;)a.recognizeWith(o);for(var l,c=s.slice();(l=c.pop())&&c.length;)l.requireFailure(c)}n.on(e,r)},teardown(t,e,r){r.off(e)},events:["tripletap","doubletap","singletap"]};os.events.forEach(t=>{as[t]=os});var ls=as,cs=f,hs=K;class ps extends H{constructor(t){super(),this.el=t,this.handlersList={},this.hammertime=new Hammer.Manager(this.el)}_setup(t,e){if(!this.handlersList[t])if(ls[t])if(V(ls[t]))this.handlersList[t]=e=>this.fire(new cs(this.el,{type:t,e:e})),this.addFireable(new hs(this.handlersList[t],ls[t]));else{if(!ot(ls[t].setup))throw new Error('The "'+t+'" event hook must have a "setup" function!');this.handlersList[t]=!0,ls[t].setup(this.el,t,r=>{ot(ls[t].validate)&&!ls[t].validate(r,e)||this.fire(new cs(this.el,{type:t,e:r}))},this.hammertime)}else if(us(t.split("+")[0])){var r=t.split("+").map(t=>{var e=us(t),r=this.hammertime.get(e);return r||(r=new(Hammer[si(e)]),this.hammertime.add(r)),r});r.forEach((t,e)=>{t.recognizeWith(r.slice(e+1))}),this.handlersList[t]=e=>this.fire(new cs(this.el,{type:t,e:e})),this.hammertime.on(t.split("+").join(" "),this.handlersList[t])}else this.handlersList[t]=e=>this.fire(new cs(this.el,{type:t,e:e})),this.el.addEventListener(t,this.handlersList[t])}_teardown(t){if(this.handlersList[t]){if(ls[t])if(V(ls[t]))removeListener(this.el,ls[t],this.handlersList[t]);else{if(!ot(ls[t].teardown))throw new Error('The "'+t+'" event hook must have a "teardown" function!');ls[t].teardown(this.el,t,this.hammertime)}else us(t.split("+")[0])?this.hammertime.off(t.split("+").join(" "),this.handlersList[t]):this.el.removeEventListener(t,this.handlersList[t]);delete this.handlersList[t]}}addFireable(t){return super.addFireable(t),this._setup(t.params.type,t.params),t}static createForTarget(t){return super.createForTarget(t,ps)}}const us=function(t){return ss(ds,e=>e.includes(t),!1)},ds={press:["press","pressup"],rotate:["rotate","rotatestart","rotatemove","rotateend","rotatecancel"],pinch:["pinch","pinchstart","pinchmove","pinchend","pinchcancel","pinchin","pinchout"],pan:["pan","panstart","panmove","panend","pancancel","panleft","panright","panup","pandown"],swipe:["swipe","swipeleft","swiperight","swipeup","swipedown"],tap:["tap"]};var fs=function(t,e,r){var n;return(n=ps.getForTarget(t))||(n=ps.createForTarget(t)),n.addFireable(new hs(r,{type:e}))},gs=Y,ms=J;class vs extends Gn{static from(t,e={},r=vs){return super.from(t,e,r)}constructor(t,e){super(t,e)}__el(){return this.el||document.createElement("div")}__ret(t){return this.el&&t===this.el?this:t}find(t){return new vs(this.el?ii(t,this.el):void 0)}data(t,e=null){return this.__ret(function(t,e,r=null){t.dataset.__customDatasetKey||(t.dataset.__customDatasetKey=li.length,li[t.dataset.__customDatasetKey]={});var n=li[t.dataset.__customDatasetKey];if(2===arguments.length){if(V(e))return n[ai(e)];if(G(e)){var i={};return e.forEach(t=>{i[t]=n[ai(t)]}),i}}var s=e;et(e)||(s=dt(e,r)),oi(s,(t,e)=>{n[ai(t)]=e})}(this.__el(),...arguments))}cssSync(...t){return this.__ret(function(t,...e){return e.length>1&&V(e[0])||et(e[0])?Pi(t,...e):Ci(t,...e)}(this.__el(),...arguments))}classSync(...t){return this.attrSync("class",...arguments)}attrSync(t,e=null,r=null){return this.__ret(di(this.__el(),...arguments))}htmlSync(t=null){return this.__ret(bi(this.__el(),...arguments))}textSync(t=null){return this.__ret(yi(this.__el(),...arguments))}appendSync(t){return this.__ret(wi(this.__el(),t))}prependSync(t){return this.__ret(xi(this.__el(),t))}css(...t){return function(t,...e){return e.length>1&&V(e[0])||et(e[0])?Ai(t,...e):$i(t,...e)}(this.__el(),...arguments).then(t=>this.el&&t===this.el?this:t)}class(...t){return this.attr("class",...arguments)}attr(t,e=null,r=null){return function(t,e,r=null,n=null){return 2===arguments.length?vi.onwrite((t,e)=>{try{t(di(...arguments))}catch(t){e(t)}},!0):vi.onread((t,e)=>{try{t(di(...arguments))}catch(t){e(t)}},!0)}(this.__el(),...arguments).then(t=>this.el&&t===this.el?this:t)}html(t){return function(t,e=null){return arguments.length>1?vi.onwrite((t,e)=>{try{t(bi(...arguments))}catch(t){e(t)}},!0):vi.onread((t,e)=>{try{t(bi(...arguments))}catch(t){e(t)}},!0)}(this.__el(),...arguments).then(t=>this.el&&t===this.el?this:t)}text(t){return function(t,e=null){return arguments.length>1?vi.onwrite((t,e)=>{try{t(yi(...arguments))}catch(t){e(t)}},!0):vi.onread((t,e)=>{try{t(yi(...arguments))}catch(t){e(t)}},!0)}(this.__el(),...arguments).then(t=>this.el&&t===this.el?this:t)}append(t){return function(t,e){return vi.onwrite((t,e)=>{try{t(wi(...arguments))}catch(t){e(t)}},!0)}(this.__el(),...arguments).then(()=>this)}prepend(t){return function(t,e){return vi.onwrite((t,e)=>{try{t(xi(...arguments))}catch(t){e(t)}},!0)}(this.__el(),...arguments).then(()=>this)}cssCompute(...t){return Di(this.__el(),...arguments)}cssTransaction(t){return function(t,e){return new Mi(t,e,(t,e)=>_i(t,e),(t,e)=>Ai(t,e))}(this.__el(),t)}on(...t){return fs(this.__el(),...t)}off(...t){return gs(this.__el(),...t)}trigger(...t){return ms(this.__el(),...t)}play(t,e={}){return"cancelForCss"in e||(e.cancelForCss=!0),new ns(this.__el(),t,e).play().then(()=>this)}translateTo(t,e={}){var r=t instanceof vs?t.el:t;return vi.onread((t,n)=>{if(!this.el)return n();var i=Yi(this.el,r,e);e.play?t(this.play([{transform:i.current.from},{transform:i.to}],e.play)):t(this.css({transform:i.to}))},!0)}offsetTo(t,e={}){var r=t instanceof vs?t.el:t;return vi.onread((t,n)=>{if(!this.el)return n();var i=Ji(this.el,r,e);e.play?t(this.play([i.current.from,i.to],e.play)):t(this.css(i.to))},!0)}scrollTo(t,e={}){var r=t instanceof vs?t.el:t;return vi.onread((t,n)=>{if(!this.el)return n();var i=Xi(this.el,r,e);e.play&&console.log("scrollTo() does not currently support animation."),t(i.viewport.scrollTo(i.to.scrollLeft,i.to.scrollTop))},!0)}}var bs=function(t,e=1){var r=0;t.forEach(t=>{r++});var n=t.slice(t.length-r,e);return arguments.length>1?n:n[0]},ys=function(t,e=1){return arguments.length>1?bs(t.slice().reverse(),e).reverse():bs(t.slice().reverse())},ws=function(t){return at(t)&&/^class\s?/.test(Function.prototype.toString.call(t))},xs={register(t,e,r=!1){Es[t]={component:e,singleton:r}},create(t,...e){var r,n;if(r=Es[t]){if(r.singletonInstance)return r.singletonInstance;if("auto"===r.singleton&&r.singletonInstances){var i=r.singletonInstances.filter(t=>ui(e,t.args).length===e.length);if(1===i.length)return i[0].instance}return n=ws(r.component)?new r.component(...e):ot(r.component)?r.component(...e):r.component,!0===r.singleton?r.singletonInstance=n:"auto"===r.singleton&&(r.singletonInstances=r.singletonInstances||[],r.singletonInstances.push({instance:n,args:e})),n}throw new Error('The "'+t+'" component is not defined in registry!')}};const Es={};var Os=class{constructor(t={}){oi(t,(t,e)=>{Pn.set(this,t,e)})}setActiveState(t=!0){if(this.active!==t){var e=Pn.set(this,t?"activating":"deactivating",!0,!0);return e.promises?(e.promises.then(()=>{Pn.set(this,t?{activating:!1,active:!0}:{deactivating:!1,active:!1},!0)}),e):Pn.set(this,t?{activating:!1,active:!0}:{deactivating:!1,active:!1},!0)}}},js=class extends class{constructor(t={},e={}){this.params=e,this.params.itemsOffset||(this.params.itemsOffset="entries"),this.fill(t),Pn.set(this,"current",{}),pi(e.takeStats||[]).forEach(t=>{var e,r,n,i;n="[",i="]",(r=t).startsWith(n)&&r.endsWith(i)&&(e=!0,t=function(t,e,r){return function(t,e){return function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?t:t.substr(0,n)}(t,e,!0)}(function(t,e,r=!1){if(""==e)return t;var n=r?t.lastIndexOf(e):t.indexOf(e);return-1===n?"":t.substr(n+e.length)}(t,e),r)}(t,"[","]"),this.current[t]=[]);var s=this.params.itemsOffset+".."+t;Pn.observe(this,s,(r,n,i)=>{!0===r?e?(ct(this.current[t],i.originatingTarget),Pn.set(this.current,t,this.current[t])):Pn.set(this.current,t,i.originatingTarget):!1===r&&(e?(ni(this.current[t],i.originatingTarget),Pn.set(this.current,t,this.current[t])):this.current[t]===i.originatingTarget&&Pn.del(this.current,t))})})}fill(t){oi(t,(t,e)=>{Pn.set(this,t,e)})}getItemsArray(){var t=this[this.params.itemsOffset];return G(t)?t:t?Object.values(t):[]}filter(){}sort(){}}{constructor(t={},e={}){e.takeStats||(e.takeStats=[]),e.takeStats.includes("active")||e.takeStats.push("active"),e.takeStats.includes("activating")||e.takeStats.push("activating"),e.takeStats.includes("deactivating")||e.takeStats.push("deactivating"),super({},e),Pn.observe(this,this.params.itemsOffset+"..activating",t=>{t&&this.getItemsArray().forEach(t=>{!0!==t.active||t.activating||t.setActiveState(!1)})}),this.fill(t)}selectStart(){var t,e=this.getItemsArray();if(!st(e)&&(t=bs(e)))return t.setActiveState(!0)}selectEnd(){var t,e=this.getItemsArray();if(!st(e)&&(t=ys(e)))return t.setActiveState(!0)}selectPrev(t=!1){var e,r=this.getItemsArray();if(!st(r))return this.current.active?e=function(t,e,r=!1,n=!1,i=!1){if(-1===t.indexOf(e))return r?[]:void 0;var s=!0===r?t.length-1:!1===r?1:r,a=(t=t.slice().reverse(),i?t.lastIndexOf(e)+1:t.indexOf(e)+1),o=nt(e)?[]:t.slice(a,a+s);return n&&o.length<s&&o.length<t.length&&(ot(n)&&!n(s-o.length)||(o=o.concat(t.slice(0,s-o.length)))),r?o:o[0]}(r,this.current.active,!1,t):!t||ot(t)&&!t(0)||(e=ys(r)),e?e.setActiveState(!0):void 0;ot(t)&&t()}selectNext(t=!1){var e,r=this.getItemsArray();if(!st(r))return this.current.active?e=function(t,e,r=!1,n=!1,i=!1){if(-1===t.indexOf(e))return r?[]:void 0;var s=!0===r?t.length-1:!1===r?1:r,a=i?t.lastIndexOf(e)+1:t.indexOf(e)+1,o=nt(e)?[]:t.slice(a,a+s);return n&&o.length<s&&o.length<t.length&&(ot(n)&&!n(s-o.length)||(o=o.concat(t.slice(0,s-o.length)))),r?o:o[0]}(r,this.current.active,!1,t):!t||ot(t)&&!t(0)||(e=bs(r)),e?e.setActiveState(!0):void 0;ot(t)&&t()}selectRand(){}filter(){}sort(){}static createEntries(t,e=Os){var r=G(t)?[]:{};return oi(t,(t,n)=>{n=n instanceof e?n:ws(e)?new e(n):ot(e)?e(n):n,Pn.set(r,t,n)}),r}};class ks extends(function(...t){var e={};G(arguments[0])&&(t=arguments[0],e=arguments[1],arguments[2]&&arguments[2]);var r=ys(t),n={},i=class extends r{constructor(...t){super(...t)}};return i.prototypes=t,t.forEach(t=>{pt([i,t],(t,e,r)=>-1===["name","prototype","prototypes","length"].indexOf(t)),pt([i.prototype,t.prototype],(t,e,r)=>-1===["prototype","prototypes"].indexOf(t)&&(!ot(r[t])||(G(n[t])?n[t].push(r[t]):n[t]=[r[t]],!1)),!0)}),oi(n,(t,r)=>{"constructor"!==t&&(i.prototype[t]=function(...n){if(Object.hasOwnProperty(e,t)&&ot(e[t]))return e[t].call(this,r,...n);var i=[];return r.forEach(t=>{i.push(t.call(this,...n))}),ys(i)})}),i}(Os,js)){constructor(t={},e={}){e.itemsOffset="subroutes",super(t,e),Pn.observe(this,"active",t=>{!0===t&&this.activeCallback&&this.activeCallback()}),this.initCallback&&this.initCallback()}route(t=null){var e,r;G(t)?(e=t.shift(),r=t):r=lt(e=t)?parseInt(t)+1:null;var n=xs.create("Router"),i="pathmap";lt(e)&&(e=parseInt(e),i="pathsplit");var s=r=>{if(this.active||this.activating){var n=[];oi(r,(t,r)=>{if(t===e)return!1;n.push(r)}),Pn.set(this,"ownPath",n.join("/"))}else Pn.del(this,"ownPath");var i=r[e];if((this.active||this.activating)&&this.subroutes&&i){if(this.subroutes[i]){if(!this.subroutes[i].active&&!this.subroutes[i].activating)return this.subroutes[i].setActiveState(!0)}else if(!rt(t))throw new Error("404: "+i,this.subroutingKey)}else if(this.current.active)return this.current.active.setActiveState(!1)};s(n[i]),Pn.observe(n,i,s),this.getItemsArray().forEach(t=>t.route(r))}static createRoutes(t,e=ks){return super.createEntries(t,e)}}class Ss extends ks{constructor(t={},e={}){super(t,e),X(this,"current.active",t=>{if(t){if(t.current.active||t.current.activating){if("hidden"!==this.display)return Q(this,"display","hidden")}else if("minimized"!==this.display)return Q(this,"display","minimized")}else if("maximized"!==this.display)return Q(this,"display","maximized")},{observeDown:!0})}static createRoutes(t,e=Ss){return super.createRoutes(t,e)}}var Ts=class{constructor(t=[],e={}){this.$={animations:[],finishCallbacks:[],cancelCallbacks:[],params:e},t.forEach(t=>{this.add(t)})}add(t){if(!(t instanceof ns))throw new Error("Argument#1 must be an Anim instance!");return this.$.animations.push(t),this.$.addCallback&&this.$.addCallback(t),this}remove(t){if(!(t instanceof ns))throw new Error("Argument#1 must be an Anim instance!");return ni(this.$.animations,t),this}onfinish(t){if(!ot(t))throw new Error("Onfinish() accepts only a function.");return this.$.finishCallbacks.push(t),this}oncancel(t){if(!ot(t))throw new Error("Oncancel() accepts only a function.");return this.$.cancelCallbacks.push(t),this}progress(){return this.$.animations.reduce((t,e)=>t.progress()+e.progress(),0)/this.$.animations.length}play(){return this.$.stopped=!1,new Promise((t,e)=>{var r,n,i=()=>{r||(r=!0,this.$.finishCallbacks.forEach(t=>t()),t())},s=()=>{n||(n=!0,this.$.cancelCallbacks.forEach(t=>t()),e())},a=this.$.animations.length;this.$.animations.forEach(t=>{t.play().then(()=>{!--a>0&&i()}).catch(s)}),this.$.addCallback=t=>{this.$.stopped||(a++,t.play().then(()=>{!--a>0&&i()}).catch(s))}})}seek(t,e=[],r=[]){this.each(e=>e.seek(t),e,r)}pause(t=[],e=[]){this.$.stopped=!0,this.each(t=>t.pause(),t,e)}finish(t=[],e=[]){this.$.stopped=!0,this.each(t=>t.finish(),t,e)}cancel(t=[],e=[]){this.$.stopped=!0,this.each(t=>t.cancel(),t,e)}clear(t=[],e=[]){this.$.animations=this.$.animations.filter(r=>{if((!e||!ci(e,!1).includes(r.el))&&(!t||ci(t,!1).includes(r.el)))return!1})}each(t,e=[],r=[]){this.$.animations.forEach(n=>{r&&ci(r,!1).includes(n.el)||e&&!ci(e,!1).includes(n.el)||t(n)})}};var Cs=class{constructor(t,e={}){this.el=t,fs(this.el,"panstart",this._onPanStart.bind(this)),fs(this.el,"panmove",this._onPanMove.bind(this)),fs(this.el,["panend","pancancel"],this._onPanEnd.bind(this))}with(t,e="x"){this.region=t,this.axis=e;var r=()=>{var t=_inherit({duration:400},this.$.params.animation||{});vi.onread(()=>{var e=Yi(this.el,this.region,{x:"end",y:"center"});this.moveableDistance=e.to.translate["x"===this.axis?0:1],this.anim=new ns(this.el,[{transform:e.current.from},{transform:e.to}],t),this.anim.pause(),this.currentDistance=0,this.progress=0})};this.$params.startupReset?vi.onread(()=>{var t=Yi(this.el,this.region,{x:"start",y:"center"});Ai(this.el,{transform:t.to}).then(r())}):r()}_onPanStart(t){}_onPanMove(t){this.progress=(this.currentDistance+t.deltaX)/this.moveableDistance,this.anim.seek(this.progress)}_onPanEnd(t){this.progress=this.anim.progress(),this.currentDistance=this.progress*this.moveableDistance,this.progress>.5?this.anim.play().then(()=>{this.progress=1,this.currentDistance=this.moveableDistance,this.anim.pause()}):this.anim.reverse().play().then(()=>{this.progress=0,this.currentDistance=0,this.anim.reverse().pause()})}},Fs=function(t){return et(t)&&Object.getPrototypeOf(t)===Object.prototype},Ps=function(t){return!0===t||!1===t};const $s=function(t,e,r=!0,n=1){if(G(t)&&G(e)&&t.length!==e.length)return!r;if(et(t)&&et(e)){var i=Object.keys(t),s=Object.keys(e);if(!i.length&&!s.length)return Fs(t)&&Fs(e)?r:t===e===r;if(!$s(i,s))return!r}if(n>0&&(G(t)&&G(e)||et(t)&&et(e))){var a=function(t,e,r=!0,n=!0,i=!1,s=!1){if(G(t)&&G(e)){var a=[],o=!0;return t.forEach(t=>{if(o){var l=!1;oi(e,(e,i)=>{(!l||n&&it(t))&&(l=r(t,i),(G(l)&&!l.length||et(l)&&!Object.keys(l).length)&&(l=!1),it(l)&&n&&(t=l))}),it(l)?a.push(n?l:t):Ps(l)?i&&!l||!i&&l?a.push(t):s&&(o=!1):a.push(l)}}),a}if(et(t)&&et(e)){a={},o=!0;return Object.keys(t).forEach(l=>{if(o){var c=r(t[l],e[l]);(G(c)&&!c.length||et(c)&&!Object.keys(c).length)&&(c=!1),it(c)?a[l]=n?c:t[l]:Ps(c)?i&&!c||!i&&c?a[l]=t[l]:s&&(o=!1):a[l]=c}}),a}}(t,e,(t,e)=>$s(t,e,r,n-1),!1,!1,!0);return G(a)?a.length===t.length&&a.length===e.length:et(a)&&et(t)?Object.keys(a).length===Object.keys(t).length&&Object.keys(a).length===Object.keys(e).length:a}return ot(r)?r(t,e):Qi(t)&&Qi(e)&&isNaN(t)&&isNaN(e)?r:t===e===r};var As=$s;ti.env={env:"browser",Registry:xs},xs.register("Router",ei,!0),xs.register("Timeline",()=>new class{constructor(t=[],e={}){this.$={},this.$.entries=[],this.$.params=e,this.nowPlaying=new Ts,t.forEach(t=>{this.add(t,e.timing)}),this.queue=[]}add(t,e={},r={},n=null,i=null){if(!this.$.entries.filter(e=>e.el===t).length){var s={el:t,effect:e,params:r,onfinish:n,oncancel:i};this.$.entries.push(s),this.nowPlayingAdd(s)}}nowPlayingAdd(t){if(this.nowPlayingEffect){var e=(t,e,r,n)=>{var i=new ns(e.el,r,n);t.add(i),e.onfinish&&i.oncancel(e.onfinish),e.oncancel&&i.oncancel(e.oncancel)},r=(t,n)=>{var i=n[0],s=ft(this.nowPlayingEffect,i.effect),a=ft(this.nowPlayingParams,i.params);if(Qi(a.lag)||Qi(a.lagAfter)){var o=ys(t.$.animations);if(o)return void o.ready((o,l)=>{a.delay=a.delay||0,Qi(a.lag)?a.delay+=(a.withDelays?l.delay:0)+a.lag:a.delay+=(a.withDelays?l.delay+parseFloat(l.endDelay):0)+l.duration+a.lagAfter,a.delay-=Qi(o.currentTime)?o.currentTime:0,e(t,i,s,a),n.shift(),n.length&&r(t,n)})}e(t,i,s,a),n.shift(),n.length&&r(t,n)};this.queue.push(t),1===this.queue.length&&r(this.nowPlaying,this.queue)}}play(t={},e={}){return this.nowPlayingEffect&&(this.nowPlaying=new Ts,this.queue=[]),this.nowPlayingEffect=t,this.nowPlayingParams=e,(e.reverseList?this.$.entries.slice().reverse():this.$.entries).forEach(t=>{e.except&&ci(e.except,!1).includes(t.el)||e.only&&!ci(e.only,!1).includes(t.el)||this.nowPlayingAdd(t)}),this.nowPlaying.play()}},!0),xs.register("Translate",()=>new Cs,!0),xs.register("IntersectionObserver",(t,e={})=>new class{constructor(t,e={}){var r=new IntersectionObserver(t=>{t.forEach(t=>{t.isIntersecting&&(Q(this,t.intersectionRect.toJSON()),e.once&&r.unobserve(t.target))})},ut(e,["root","rootMargin","threshold"]));r.observe(t)}observe(...t){return X(this,...t)}}(t||document.body,e),"auto"),xs.register("ProximityObserver",t=>new class{constructor(t,e={}){var r=new class{constructor(t,e={}){var r;this.$={},this.$.options=e,this.$.targetsObj=[],this.$.root=this.$.options.root||window;var n=(e,i)=>{this.$.waiting?r=!0:(this.$.waiting=!0,vi.onread(()=>{if(!this.$.disconnected&&!this.$.paused){var s=[];if(this.$.targetsObj.length){var a=Hi(this.$.root),o=!As(this.$.previousRootRect,a);this.$.targetsObj.forEach(t=>{var e,r,n,i,l,c=Hi(t.el),h=!As(t.previousItemRect,c);if(o||h){var p=(e=c,r=a,n=this.$.options.axis,i=t.previousProximity,(l={intersection:zi(e,r)}).x=l.x||{},l.y=l.y||{},i=ut(i),(n?ci(n):["x","y"]).forEach(t=>{var n="x"===t?"left":"top",s="x"===t?"right":"bottom",a=e["x"===t?"width":"height"],o=r["x"===t?"width":"height"];l[t].advancement=void 0,i.intersection&&(l[t].advancement=i.intersection[n]>l.intersection[n]?"positive":i.intersection[n]<l.intersection[n]?"negative":i[t].advancement);var c=0;l.intersection[n]<=o&&l.intersection[s]<=0?c=(a-Math.abs(l.intersection[s]))/a:l.intersection[s]>0&&(c=1);var h=0;l.intersection[n]<=0&&l.intersection[s]<=o?h=Math.abs(l.intersection[n])/a:l.intersection[s]>o&&(h=1);var p=0;if(l.intersection[n]<=o&&l.intersection[s]<=o){var u=o+a;p=(u-(l.intersection[n]+a))/u}else l.intersection[s]>o&&(p=1);var d=0;if(a>o)if(l.intersection[n]<=0&&l.intersection[s]<=0){var f=a-o;d=Math.abs(l.intersection[n])/f}else l.intersection[s]>0&&(d=1);else l.intersection[n]>=0&&l.intersection[s]>=0?(f=o-a,d=l.intersection[s]/f):l.intersection[n]<0&&(d=1);"positive"===l[t].advancement?(l[t].percentageIn=c,l[t].percentageOut=h,l[t].percentagePass=p,l[t].percentageContained=d):(l[t].percentageIn=1-h,l[t].percentageOut=1-c,l[t].percentagePass=1-p,l[t].percentageContained=1-d),a>o&&(l[t].percentageContained*=-1)}),l);As(p,t.previousProximity,!0,1)||s.push(ft({target:t.el},p)),t.previousProximity=p}t.previousItemRect=c}),this.$.previousRootRect=a}if(s.length){var l=t(s,this);l instanceof Promise&&(this.$.paused=!0,l.then(()=>{this.$.paused=!1}),l.catch(()=>{this.$.paused=!1}))}if(e)return e;this.$.waiting=!1,r&&i&&(r=!1,n(!1,i))}}))};this.$.options.events?fs(this.$.root,this.$.options.events,()=>{n(!1,this.$.options.fulfilPendingCall)}):n(!0)}observe(t){this.$.targetsObj.filter(e=>e.el===t).length||this.$.targetsObj.push({el:t})}unobserve(t){this.$.targetsObj=this.$.targetsObj.filter(e=>e.el!==t)}disconnect(){this.$.disconnected=!0}}(t=>{t.forEach(t=>{Q(this,t),e.once&&r.unobserve(t.target)})},ut(e,["root","rootMargin","axis"]));r.observe(t)}}(t||document.body),"auto"),xs.register("ResizeObserver",t=>new class{constructor(t,e={}){new ResizeObserver(t=>{t.forEach(t=>{var e={contentRect:t.contentRect.toJSON()};t.contentBoxSize&&(e.contentBoxSize={inlineSize:t.contentBoxSize.inlineSize,blockSize:t.contentBoxSize.blockSize},e.borderBoxSize={inlineSize:t.borderBoxSize.inlineSize,blockSize:t.borderBoxSize.blockSize},Q(this,e))})}).observe(t)}}(t||document.body),"auto"),xs.register("console",()=>console,!0),xs.register("window",()=>window,!0);var _s=new Ss({active:!0,title:"Web-Native Home :: Web-Native",page:{title:"Finally, a Web-Native UI Framework!",engineeringSection:[{label:"CHTML",desc:"The pure HTML-based, component-oriented UI framework!",link:"https://docs.web-native.dev/chtml/",cta:"DOCS"},{label:"Reflex",desc:'The "Reactivity" technology with zero abstractions - for observing any JavaScript object.',link:"https://docs.web-native.dev/reflex/",cta:"DOCS"},{label:"JSEN",desc:'The JavaScript Expression Notation - for "scoped" JavaScript implementations.',link:"https://docs.web-native.dev/jsen/",cta:"DOCS"},{label:"Commons",desc:"A thoughtful utilities library for JavaScript.",link:"https://docs.web-native.dev/commons/",cta:"DOCS"}],evangelismSection:[{},{},{},{meta:{type:"article"},label:"I’m joining web-native!",desc:"Hey, Awesome! I am pleased to announce that I am joining Web-native as a Front-end Engineer and Developer Relations!🎉",link:"https://medium.com/@raymondosy1/im-joining-web-native-c98b2cdc5540",cta:"Read article",authors:[{name:"Raymond Akalonu",avatar:"https://miro.medium.com/fit/c/48/48/0*dx5wDBZDIOiMILkr.",link:"https://miro.medium.com/@raymondosy1"}]}]},subroutes:Ss.createRoutes({chtml:{title:"CHTML - a Web-Native UI Framework :: Web-Native",page:{title:"Finally, a Web-Native UI Framework!",slides:new js({desc:"New to CHTML? Here's a walkthrough.",entries:js.createEntries([{label:"Structure",code:'\n    --------------------------------------------\n    STRUCTURE\n    (Follow some semantic markup pattern.)\n    --------------------------------------------\n    \n    <div c-role="card">\n      <div c-role="card-icon"></div>\n      <div>\n        <div c-role="card-title"></div>\n        <div c-role="card-desc"></div>\n      </div>\n    </div>\n    \n    --------------------------------------------\n    Above, we have used the "c-role" attribute to create\n    relationships for the "card" component.\n    \n    Now, we have the following component binding, like a tree:\n    \n    card\n      |-- icon\n      |-- title\n      |-- desc\n    \n    This makes your UI easier to reason about and to access.\n    For example, we will be able to traverse the component\n    tree in JavaScript, like this:\n    \n    let title = card.tree.title;\n    let desc = card.tree.desc;\n    \n    More on this shortly.\n    --------------------------------------------\n    ',next:"Next: behaviour",setEl(t){this.el=t}},{label:"Behaviour",code:"\n    --------------------------------------------\n    BEHAVIOUR\n    (Programmatically or declaratively add behaviour.)\n    --------------------------------------------\n    \n    // The component instance\n    let card = new Chtml(el);\n\n    // This gives us an API similar to jQuery's DOM API\n    card.css('display', 'flex');\n    // Even nodes are created as CHTML instances\n    card.tree.icon.css({\n        width: '50px',\n        height: '50px',\n        borderRadius: '25px',\n    });\n\n    // Add an \"onclick\" behaviour\n    // - \"shake\" the component on clicking its icon\n    card.tree.icon.on('click', () => {\n        card.play([\n            {transform: {translate: [0, 0]}},\n            {transform: {translate: ['-50px', 0]}},\n            {transform: {translate: ['50px', 0]}},\n            {transform: {translate: [0, 0]}},\n        ], {duration: 300});\n    });\n    \n    --------------------------------------------\n    Now the interesting part is... everything above\n    is acheivable right within markup.\n    \n    For the \"onclick\" behaviour, we'll use an \"scoped\" script.\n    --------------------------------------------\n    \n    <div c-role=\"card\">\n\n      <div c-role=\"card-icon\"></div>\n      <div>\n        <div c-role=\"card-title\"></div>\n        <div c-role=\"card-desc\"></div>\n      </div>\n\n      <script type=\"text/jsen\">\n        tree.icon.on('click', () => {\n            play([\n                {transform: {translate: [0, 0]}},\n                {transform: {translate: ['-50px', 0]}},\n                {transform: {translate: ['50px', 0]}},\n                {transform: {translate: [0, 0]}},\n            ], {duration: 300});\n        });\n      <\/script>\n\n    </div>\n\n    --------------------------------------------\n    The script above is scoped to the component. Notice\n    that we didn't have to reference a \"card\" component\n    as this is implicit to the code.\n    --------------------------------------------\n    ",next:"Next: composition",setEl(t){this.el=t}},{label:"Composition",code:'\n    --------------------------------------------\n    COMPOSITION\n    (Define components once and use everywhere.)\n    --------------------------------------------\n\n    \x3c!--\n    Components are defined in a <template> element.\n    So we will place our card in one. We will also assign it\n    a means of identification called a "namespace".\n    --\x3e\n\n    <template is="c-bundle">\n\n      <div c-role="card" c-namespace="html/card">\n        <div c-role="card-icon"></div>\n        <div>\n          <div c-role="card-title"></div>\n          <div c-role="card-desc"></div>\n        </div>\n        <script type="text/jsen">...<\/script>\n      </div>\n\n    </template>\n\n    \x3c!--\n    The <template> element itslef would live in the <head>\n    section of a document.\n    Components within it can be imported anywhere within\n    the document <body>.\n    --\x3e\n\n    <html>\n\n      <head>\n        <template is="c-bundle">\n          <div c-role="card" c-namespace="html/card">...</div>\n        </template>\n      </head>\n\n      <body>\n        <c-import c-namespace="html/card"></c-import>\n      </body>\n\n    </html>\n    ',next:"The end!",setEl(t){this.el=t}}])})}},reflex:{title:"Reflex - a reactivity library :: Web-Native",page:{title:"This is Reflex page!"}},jsen:{title:"JavaScript Object Notation (JSEN) :: Web-Native",page:{title:"This is JSEN page!"}}})});vs.ready(()=>{ti.env.pageTitle=document.querySelector("title"),_s.route(0),vs.from("#app").bind(_s)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,